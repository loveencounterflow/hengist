{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/pingpong.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERSHOP/RPC'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\nFS                        = require 'fs'\nafter                     = ( time_s, f ) -> setTimeout f, time_s * 1000\nSP                        = require '/home/flow/jzr/steampipes'\n{ $\n  $split\n  $watch\n  $show\n  $drain }                = SP.export()\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate }              = types.export()\n\n\n#-----------------------------------------------------------------------------------------------------------\nsettings =\n  readline:\n    input:      FS.createReadStream '/tmp/intershop-fifo-to-nodejs', { encoding: 'utf-8', }\n    # input:      process.stdin\n    # output:     process.stdout\n    terminal:   false\n  rpc_methods:\n    intertext:\n      [Symbol.for 'module']: {}\n      get_fortytwo: ( x ) -> return 42 + x\n\n\n#-----------------------------------------------------------------------------------------------------------\n$dispatch = ->\n  return $ ( line, send ) =>\n    unless ( match = line.match /^json:(?<payload>.+):$/ )?\n      warn \"^pingpong@337^ unknown format: #{rpr line}\"\n    try d = JSON.parse match.groups.payload catch error\n      warn \"^pingpong@337^ encountered error: #{rpr error.message} when trying to parse #{rpr line}\"\n      return null\n    urge '^pingpong@339^', d\n    unless ( method = settings.rpc_methods[ d.module ]?[ d.method ] )?\n      warn \"^pingpong@337^ unknown method: #{rpr d}\"\n      return null\n    P       = d.$value ? []\n    unless isa.list P\n      warn \"^pingpong@337^ expected a list for arguments, got a #{type_of P}\"\n      return null\n    that    = settings.rpc_methods[ d.module ][ Symbol.for 'module' ]\n    result  = method.call that, P...\n    if d.$id? then  send { $key: '^rpcr', $value: result, $id: d.$id }\n    else            send { $key: '^rpcr', $value: result, }\n    return null\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ntee_write_lines_to_file = ( path ) ->\n  # thx to https://stackoverflow.com/q/13042556/7568091\n  fd = FS.openSync path, 'w' #, 0644, function(error, fd) {\n  last    = Symbol 'last'\n  return $watch { last, }, ( d ) =>\n    if d is last\n      FS.closeSync fd\n      return null\n    d   = rpr d unless isa.text d\n    d  += '\\n' unless d.endsWith '\\n'\n    debug '^36635^', path, rpr d\n    FS.writeSync fd, d\n    # stream.write d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\nplay_pong_using_steampipes = -> new Promise ( resolve, reject ) =>\n  input_path    = '/tmp/intershop-fifo-to-nodejs' # only used for error message when fifo not found\n  urge \"^7776^ usage: `tail -f #{input_path} | nodexh pingpong.js`\"\n  output_path   = '/tmp/intershop-fifo-to-python'\n  pipeline      = []\n  pipeline.push SP.new_stdin_source()\n  pipeline.push SP.$split()\n  pipeline.push $dispatch()\n  # pipeline.push $show()\n  pipeline.push tee_write_lines_to_file output_path\n  pipeline.push $drain => help 'ok'; resolve()\n  SP.pull pipeline...\n  return null\n\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  play_pong_using_steampipes()\n"
  ]
}