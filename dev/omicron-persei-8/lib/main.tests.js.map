{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'OMICRON-PERSEI-8/TESTS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\n#...........................................................................................................\ntest                      = require 'guy-test'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  cast\n  type_of }               = types\ndefer                     = setImmediate\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"OMICRON-PERSEI-8 API 1\" ] = ( T, done ) ->\n  LRRR        = require '../../../apps/omicron-persei-8'\n  CAT         = require 'multimix/lib/cataloguing'\n  names       = [ '$', 'remit', 'types', 'export', ]\n  LRRR_export = LRRR.export()\n  #.........................................................................................................\n  for name in names\n    T.ok ( LRRR[ name         ] )?\n    T.ok ( LRRR_export[ name  ] )?\n  # urge CAT.all_keys_of LRRR\n  # urge ( k for k of LRRR )\n  # urge ( k for k of LRRR.export() )\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"OMICRON-PERSEI-8 API 2\" ] = ( T, done ) ->\n  LRRR = require '../../../apps/omicron-persei-8'\n  probes_and_matchers = [\n    [ [ 'function', 'remit',  ], true, ]\n    [ [ 'function', '$',      ], true, ]\n    [ [ 'object',   'types',  ], true, ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ type, name, ] = probe\n      resolve isa[ type ] LRRR[ name ]\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"OMICRON-PERSEI-8.remit 1\" ] = ( T, done ) ->\n  # debug '^776^', ( k for k of require 'readable-stream' ); return done()\n  { $, }        = require '../../../apps/omicron-persei-8'\n  CAT           = require 'multimix/lib/cataloguing'\n  FS            = require 'fs'\n  { Readable\n    Transform\n    Writable }  = require 'readable-stream'\n  #.........................................................................................................\n  read = ( size ) ->\n    urge '^read@1^' # , CAT.all_keys_of @\n    for d in [ 1 .. 3 ]\n      @push d\n    @push null\n    @destroy()\n    # @emit 'end'\n    # @emit 'close'\n    # debug ( k for k of @ )\n  #.........................................................................................................\n  transform = ( d, _, done ) ->\n    urge '^transform@1^', rpr d\n    @push d.toString()\n    done()\n  #.........................................................................................................\n  $remitter = => $ ( d, send ) =>\n    urge '^remit@1^', ( rpr d )[ .. 50 ] + '...'\n    send d #.toString 'utf-8' ### TAINT not safe as could be chunked ###\n  #.........................................................................................................\n  write = ( d, _, done ) ->\n    urge '^write@1^', ( rpr d )[ .. 50 ] + '...'\n    done()\n  #.........................................................................................................\n  # source  = FS.createReadStream __filename\n  source  = new Readable { read, objectMode: true, }\n  stream  = source\n  # # stream  = stream.pipe new Transform { transform, }\n  stream  = stream.pipe $remitter()\n  stream  = stream.pipe new Writable { write, objectMode: true, }\n  #.........................................................................................................\n  source.on 'end',    -> info '^source:end^'\n  source.on 'close',  -> info '^source:close^'; defer -> done()\n  stream.on 'end',    -> info '^stream:end^'\n  stream.on 'close',  -> info '^stream:close^'\n  # defer -> done()\n  return null\n\n\n############################################################################################################\nif module is require.main then do => # await do =>\n  test @\n\n\n\n\n\n"
  ]
}