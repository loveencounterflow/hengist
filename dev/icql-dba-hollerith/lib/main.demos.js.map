{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA-VNR/TESTS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of\n  equals }                = types.export()\nSQL                       = String.raw\nicql_dba_hollerith_path   = '../../../apps/icql-dba-hollerith'\ndba_path                  = '../../../apps/icql-dba'\n{ lets\n  freeze }                = require 'letsfreezethat'\nCATALOGUE                 = require 'multimix/lib/cataloguing'\njr                        = JSON.stringify\njp                        = JSON.parse\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_simple_table = ->\n  # T?.halt_on_error()\n  #.........................................................................................................\n  { Hollerith, }  = require icql_dba_hollerith_path\n  { Dba, }        = require dba_path\n  { Tbl, }        = require '../../../apps/icql-dba-tabulate'\n  dba             = new Dba()\n  dhlr            = new Hollerith { dba, }\n  # debug '^6w3^', dhlr\n  debug '^6w3^', dhlr.cfg\n  debug '^6w3^', dhlr.cfg.vnr_width\n  tbl             = new Tbl { dba, }\n  # fq          = ( P... ) -> dba.first_value dba.query P...\n  #.........................................................................................................\n  dba.execute SQL\"\"\"\n    create table myfiles ( \"text\" text not null );\n    \"\"\"\n  #.........................................................................................................\n  schema            = 'main'\n  table_name        = 'myfiles'\n  json_column_name  = 'vnr'\n  blob_column_name  = null\n  dhlr.alter_table { schema, table_name, json_column_name, blob_column_name, }\n  #.........................................................................................................\n  insert_sql        = SQL\"\"\"insert into myfiles ( \"text\", vnr ) values ( $text, $vnr )\"\"\"\n  dba.run insert_sql, { vnr: ( jr [ 1,    ] ), text: 'helo world', }\n  dba.run insert_sql, { vnr: ( jr [ 1, 1, ] ), text: 'helo', }\n  dba.run insert_sql, { vnr: ( jr [ 1, 2, ] ), text: 'world', }\n  dba.run insert_sql, { vnr: ( jr [ 2,    ] ), text: 'fancy stuff here', }\n  dba.run insert_sql, { vnr: ( jr [ 2, 1, ] ), text: 'fancy', }\n  dba.run insert_sql, { vnr: ( jr [ 2, 2, ] ), text: 'stuff', }\n  dba.run insert_sql, { vnr: ( jr [ 2, 3, ] ), text: 'here', }\n  dba.run insert_sql, { vnr: ( jr [ 3,    ] ), text: 'that\\'s all', }\n  dba.run insert_sql, { vnr: ( jr [ 3, 1, ] ), text: 'that\\'s', }\n  dba.run insert_sql, { vnr: ( jr [ 3, 2, ] ), text: 'all', }\n  #.........................................................................................................\n  # debug tbl.dump_db { order_by: '1', }\n  for line from tbl._walk_relation_lines { name: 'myfiles', order_by: 'vnr_blob', limit: null, }\n    echo line\n  #.........................................................................................................\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  @demo_simple_table()\n\n\n\n"
  ]
}