{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA-VNR/TESTS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of\n  equals }                = types.export()\nSQL                       = String.raw\nicql_dba_hollerith_path   = '../../../apps/icql-dba-hollerith'\ndba_path                  = '../../../apps/icql-dba'\n{ lets\n  freeze }                = require 'letsfreezethat'\nCATALOGUE                 = require 'multimix/lib/cataloguing'\njr                        = JSON.stringify\njp                        = JSON.parse\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@[ \"API\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  #.........................................................................................................\n  { Hollerith, }  = require icql_dba_hollerith_path\n  { Dba, }        = require dba_path\n  prefix          = 'hlr_'\n  dba             = new Dba()\n  hlr             = new Hollerith { dba, prefix, }\n  fq              = ( P... ) -> dba.first_value dba.query P...\n  #.........................................................................................................\n  ### NOTE these are just shallow sanity checks; for tests proper see\n  https://github.com/loveencounterflow/hengist/blob/master/dev/datom/src/hlr.test.coffee ###\n  T?.eq ( hlr.advance      [ 1, 2, 3, ]            ), [ 1, 2, 4 ]\n  T?.eq ( hlr.recede       [ 1, 2, 3, ]            ), [ 1, 2, 2 ]\n  T?.eq ( hlr.deepen       [ 1, 2, 3, ]            ), [ 1, 2, 3, 0 ]\n  T?.eq ( hlr.cmp          [ 1, 2, 3, ], [ 1, 2, ] ), 1\n  T?.eq ( hlr.new_vnr      [ 1, 2, 3, ]            ), [ 1, 2, 3 ]\n  T?.eq ( hlr.new_vnr      null                    ), [ 0 ]\n  T?.eq ( hlr.encode       [ 1, 2, 3, ]            ), Buffer.from '8000000180000002800000038000000080000000', 'hex'\n  #.........................................................................................................\n  T?.eq ( jp fq SQL\"select hlr_advance(     '[ 1, 2, 3 ]' );\" ),             [ 1, 2, 4 ]\n  T?.eq ( jp fq SQL\"select hlr_recede(      '[ 1, 2, 3 ]' );\" ),             [ 1, 2, 2 ]\n  T?.eq ( jp fq SQL\"select hlr_deepen(      '[ 1, 2, 3 ]' );\" ),             [ 1, 2, 3, 0 ]\n  T?.eq (    fq SQL\"select hlr_cmp(         '[ 1, 2, 3 ]', '[ 1, 2 ]' );\" ), 1\n  T?.eq ( jp fq SQL\"select hlr_new_vnr(      '[ 1, 2, 3 ]' );\"             ), [ 1, 2, 3 ]\n  T?.eq ( jp fq SQL\"select hlr_new_vnr(       null         );\"             ), [ 0 ]\n  T?.eq (    fq SQL\"select hlr_encode(      '[ 1, 2, 3 ]' );\"             ), Buffer.from '8000000180000002800000038000000080000000', 'hex'\n  T?.eq ( hlr.C.u32_nr_min                                        ), -2147483648\n  T?.eq ( hlr.C.u32_nr_max                                        ), 2147483647\n  T?.eq ( hlr.encode [ hlr.C.u32_nr_min, hlr.C.u32_nr_max, ]  ), Buffer.from '00000000ffffffff800000008000000080000000', 'hex'\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"VNR basics (JS)\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  #.........................................................................................................\n  { Hollerith, }  = require icql_dba_hollerith_path\n  { Dba, }        = require dba_path\n  { Tbl, }        = require '../../../apps/icql-dba-tabulate'\n  dba             = new Dba()\n  hlr             = new Hollerith { dba, }\n  #.........................................................................................................\n  T?.eq ( d = hlr.new_vnr()                 ), [ 0, ]\n  T?.eq ( d = hlr.new_vnr      [ 4, 6, 5, ] ), [ 4, 6, 5, ]\n  T?.eq ( d = hlr.deepen       d            ), [ 4, 6, 5, 0, ]\n  T?.eq ( d = hlr.deepen       d, 42        ), [ 4, 6, 5, 0, 42, ]\n  T?.eq ( d = hlr.advance      d            ), [ 4, 6, 5, 0, 43, ]\n  T?.eq ( d = hlr.recede       d            ), [ 4, 6, 5, 0, 42, ]\n  T?.ok ( hlr.new_vnr  d ) isnt d\n  T?.ok ( hlr.deepen   d ) isnt d\n  T?.ok ( hlr.advance  d ) isnt d\n  T?.ok ( hlr.recede   d ) isnt d\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"VNR basics (SQL)\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  #.........................................................................................................\n  { Hollerith, }  = require icql_dba_hollerith_path\n  { Dba, }        = require dba_path\n  { Tbl, }        = require '../../../apps/icql-dba-tabulate'\n  dba             = new Dba()\n  hlr             = new Hollerith { dba, }\n  fq              = ( P... ) -> dba.first_value dba.query P...\n  #.........................................................................................................\n  T?.eq ( d = jp fq SQL\"select hlr_new_vnr();\"                 ), [ 0, ]\n  T?.eq ( d = jp fq SQL\"select hlr_new_vnr(  '[ 4, 6, 5 ]' );\" ), [ 4, 6, 5, ]\n  T?.eq ( d = jp fq SQL\"select hlr_deepen(   $d            );\", { d: ( jr d ), } ), [ 4, 6, 5, 0, ]\n  T?.eq ( d = jp fq SQL\"select hlr_deepen(   $d, 42        );\", { d: ( jr d ), } ), [ 4, 6, 5, 0, 42, ]\n  T?.eq ( d = jp fq SQL\"select hlr_advance(  $d            );\", { d: ( jr d ), } ), [ 4, 6, 5, 0, 43, ]\n  T?.eq ( d = jp fq SQL\"select hlr_recede(   $d            );\", { d: ( jr d ), } ), [ 4, 6, 5, 0, 42, ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"HLR alter_table 1\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  #.........................................................................................................\n  { Hollerith, }  = require icql_dba_hollerith_path\n  { Dba, }        = require dba_path\n  { Tbl, }        = require '../../../apps/icql-dba-tabulate'\n  dba             = new Dba()\n  hlr             = new Hollerith { dba, }\n  tbl             = new Tbl { dba, }\n  # debug '^3342^', CATALOGUE.all_keys_of hlr.hollerith\n  #.........................................................................................................\n  dba.execute SQL\"\"\"\n    create table myfile ( line text not null );\n    \"\"\"\n  #.........................................................................................................\n  schema            = 'main'\n  table_name        = 'myfile'\n  json_column_name  = 'vnr'\n  blob_column_name  = null\n  hlr.alter_table { schema, table_name, json_column_name, blob_column_name, }\n  insert_sql        = SQL\"insert into myfile ( line, vnr ) values ( $line, $vnr )\"\n  dba.run insert_sql, { line: \"third\", vnr: ( jr [ 3, ] ) }\n  dba.run insert_sql, { line: \"second\", vnr: ( jr [ 2, ] ) }\n  dba.run insert_sql, { line: \"first\", vnr: ( jr [ 1, ] ) }\n  #.........................................................................................................\n  error = null\n  try\n    dba.run insert_sql, { line: \"fourth\", vnr: ( jr [ 3, ] ) }\n  catch error\n    T?.eq error.code, 'SQLITE_CONSTRAINT_UNIQUE'\n    debug error.name\n  T?.ok error?\n  #.........................................................................................................\n  debug tbl.dump_db { order_by: '1', }\n  T.eq ( dba.list dba.query SQL\"select * from myfile order by vnr_blob;\" ), [\n    { line: 'first',  vnr: '[1]', vnr_blob: ( Buffer.from '8000000180000000800000008000000080000000', 'hex' ) },\n    { line: 'second', vnr: '[2]', vnr_blob: ( Buffer.from '8000000280000000800000008000000080000000', 'hex' ) },\n    { line: 'third',  vnr: '[3]', vnr_blob: ( Buffer.from '8000000380000000800000008000000080000000', 'hex' ) } ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"HLR alter_table with existing columns 1\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  #.........................................................................................................\n  { Hollerith, }  = require icql_dba_hollerith_path\n  { Dba, }        = require dba_path\n  { Tbl, }        = require '../../../apps/icql-dba-tabulate'\n  dba             = new Dba()\n  hlr             = new Hollerith { dba, }\n  tbl             = new Tbl { dba, }\n  # debug '^3342^', CATALOGUE.all_keys_of hlr.hollerith\n  #.........................................................................................................\n  dba.execute SQL\"\"\"\n    create table myfile ( line text not null, vnr json not null );\n    create unique index hlr_myfile_vnr_idx on myfile ( vnr );\n    \"\"\"\n  #.........................................................................................................\n  schema            = 'main'\n  table_name        = 'myfile'\n  json_column_name  = 'vnr'\n  blob_column_name  = null\n  hlr.alter_table { schema, table_name, json_column_name, blob_column_name, }\n  insert_sql        = SQL\"insert into myfile ( line, vnr ) values ( $line, $vnr )\"\n  dba.run insert_sql, { line: \"third\", vnr: ( jr [ 3, ] ) }\n  dba.run insert_sql, { line: \"second\", vnr: ( jr [ 2, ] ) }\n  dba.run insert_sql, { line: \"first\", vnr: ( jr [ 1, ] ) }\n  #.........................................................................................................\n  error = null\n  try\n    dba.run insert_sql, { line: \"fourth\", vnr: ( jr [ 3, ] ) }\n  catch error\n    T?.eq error.code, 'SQLITE_CONSTRAINT_UNIQUE'\n    debug error.name\n  T?.ok error?\n  #.........................................................................................................\n  debug tbl.dump_db { order_by: '1', }\n  T.eq ( dba.list dba.query SQL\"select * from myfile order by vnr_blob;\" ), [\n    { line: 'first',  vnr: '[1]', vnr_blob: ( Buffer.from '8000000180000000800000008000000080000000', 'hex' ) },\n    { line: 'second', vnr: '[2]', vnr_blob: ( Buffer.from '8000000280000000800000008000000080000000', 'hex' ) },\n    { line: 'third',  vnr: '[3]', vnr_blob: ( Buffer.from '8000000380000000800000008000000080000000', 'hex' ) } ]\n  #.........................................................................................................\n  done?()\n\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  #.........................................................................................................\n  probes_and_matchers = []\n  { Hollerith, }  = require icql_dba_hollerith_path\n  { Dba, }        = require dba_path\n  dba             = new Dba()\n  hlr             = new Hollerith { dba, }\n  # debug '4476^', vnr\n  # debug '4476^', JSON.stringify ( CATALOGUE.all_keys_of vnr ).sort(), null, '  '\n  # console.table dba.list dba.query SQL\"select * from v_variables;\"\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n  #     [ key, value, ] = probe\n  #     vnr.set key, value\n  #     result = vnr.get key\n  #     resolve result\n  # console.table dba.list dba.query SQL\"select * from v_variables;\"\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  test @, { timeout: 10e3, }\n  # test @[ \"API\" ]\n  @[ \"HLR alter_table with existing columns 1\" ]()\n\n"
  ]
}