{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,kBAAA,EAAA,iBAAA,EAAA,KAAA,EAAA,QAAA,EAAA,KAAA,EAAA,SAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,eAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,wBAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,QAFF,EAGE,gBAHF,CAAA,GAG4B,KAAK,CAAC,MAAN,CAAA,CAH5B,EAlBA;;;EAuBA,eAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,KAAA,GAA4B,QAAA,CAAE,GAAF,CAAA;WAAW,IAAI,OAAJ,CAAY,CAAE,IAAF,CAAA,GAAA;aAAY,UAAA,CAAW,IAAX,EAAiB,GAAA,GAAM,IAAvB;IAAZ,CAAZ;EAAX;;EAC5B,GAAA,GAA4B,MAAM,CAAC;;EACnC,EAAA,GAA4B,IAAI,CAAC;;EACjC,EAAA,GAA4B,IAAI,CAAC;;EACjC,QAAA,GAA4B;;EAC5B,CAAA,CAAE,IAAF,EACE,MADF,CAAA,GAC4B,OAAA,CAAQ,gBAAR,CAD5B,EA7BA;;;EAiCA,iBAAA,GAAoB,QAAA,CAAE,GAAF,CAAA;AAEpB,QAAA,CAAA,EAAA,CAAA,EAAA,CAAA;;IACE,CAAA,GAGE,CAAA;;MAAA,oBAAA,EAAsB,SAAA,CAAE,IAAF,EAAQ,OAAR,CAAA;AAC1B,YAAA,KAAA,EAAA;QAAM,KAAA,GAAQ,IAAI,MAAJ,CAAW,OAAX,EAAoB,GAApB;AACR,eAAM,kCAAN;UACE,MAAM,CAAE,KAAK,CAAE,CAAF,CAAP,EAAc,KAAK,CAAE,CAAF,CAAnB;QADR;AAEA,eAAO;MAJa,CAAtB;;MAOA,eAAA,EAAiB,SAAA,CAAE,KAAF,EAAS,IAAT,EAAe,OAAO,IAAtB,CAAA;AACrB,YAAA,CAAA;;QACM,KAAA,CAAM,QAAN,EAAgB,IAAhB;;UACA,OAAQ;;QACR,CAAA,GAAQ;AACR,eAAA,IAAA;UACE,IAAS,CAAA,GAAI,IAAb;AAAA,kBAAA;WAAR;;;UAGQ,MAAM,CAAE,CAAF;UACN,CAAA,IAAK;QALP;AAMA,eAAO;MAXQ;IAPjB;IAqBF,KAAA,MAAA;eAAA;;MAAA,CAAC,CAAE,CAAF,CAAD,GAAS,CAAC,CAAC,IAAF,CAAO,CAAP;IAAT,CAzBF;;IA2BE,GAAG,CAAC,qBAAJ,CACE;MAAA,IAAA,EAAc,iBAAd;MACA,OAAA,EAAc,CAAE,GAAF,CADd;MAEA,UAAA,EAAc,CAAE,OAAF,EAAW,MAAX,EAAmB,MAAnB,CAFd;MAGA,IAAA,EAAc,CAAC,CAAC;IAHhB,CADF,EA3BF;;IAiCE,GAAG,CAAC,qBAAJ,CACE;MAAA,IAAA,EAAc,YAAd;MACA,OAAA,EAAc,CAAE,OAAF,EAAW,SAAX,CADd;MAEA,UAAA,EAAc,CAAE,MAAF,EAAU,SAAV,CAFd;MAGA,IAAA,EAAc,CAAC,CAAC;IAHhB,CADF,EAjCF;;AAuCE,WAAO;EAzCW,EAjCpB;;;EA8EM,MAAN,MAAA,IAAA,CAAA;;;IAGE,4BAA8B,CAAE,iBAAF,CAAA;AAChC,UAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,IAAA,EAAA;MAAI,QAAQ,CAAC,IAAT,CAAc,iBAAd;MACA,CAAA,GAAI;MACJ,IAAY,iBAAA,KAAqB,EAAjC;AAAA,eAAO,EAAP;;AACA;MAAA,KAAA,qCAAA;;QACE,IAAG,uDAAH;UACE,EAAA,GAAM,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,WAAhB,CAA4B,CAA5B;UACN,EAAA,GAAM,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,WAAhB,CAA4B,CAA5B,EAFR;SAAA,MAAA;UAIE,QAAQ,CAAC,GAAT,CAAa,IAAb;UACA,EAAA,GAAK,EAAA,GAAK,IAAI,CAAC,WAAL,CAAiB,CAAjB,EALZ;;QAMA,CAAC,CAAC,IAAF,CAAO,CAAE,EAAF,EAAM,EAAN,CAAP;MAPF;AAQA,aAAO;IAZqB;;EAHhC;;EAgBA,GAAA,GAAM,IAAI,GAAJ,CAAA,EA9FN;;;;;EAoGA,IAAC,CAAE,4BAAF,CAAD,GAAoC,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACpC,QAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA;;MAAE,CAAC,CAAE,aAAH,CAAA;KAAF;;IAEE,mBAAA,GAAsB;MACpB;QAAE,CAAE,MAAF,CAAF;QAA4C;UAAE,GAAA,EAAK;QAAP,CAA5C;OADoB;MAEpB;QAAE,CAAE,YAAF,CAAF;QAA4C;UAAE,GAAA,EAAK;QAAP,CAA5C;OAFoB;MAGpB;QAAE,CAAE,kBAAF,CAAF;QAA4C;UAAE,IAAA,EAAM;QAAR,CAA5C;OAHoB;MAIpB;QAAE,CAAE,eAAF,CAAF;QAA4C;UAAE,IAAA,EAAM;QAAR,CAA5C;OAJoB;MAKpB;QAAE,CAAE,eAAF;QAAoB,eAApB,CAAF;QAA4C;UAAE,IAAA,EAAM;QAAR,CAA5C;OALoB;MAMpB,CAAE,CAAE,UAAF;MAAc,UAAd,CAAF;MAA4C,CAAA,CAA5C,CANoB;MAOpB;QAAE,CAAE,eAAF;QAAmB,eAAnB,CAAF;QAA4C;UAAE,cAAA,EAAgB,IAAlB;UAAwB,cAAA,EAAgB;QAAxC,CAA5C;OAPoB;;IAStB,CAAA,CAAE,KAAF,CAAA,GAAc,OAAA,CAAQ,6BAAR,CAAd;IACA,KAAA,GAAc,IAAI,KAAJ,CAAA;IACd,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB;MACF,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;eAAG,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,CAAA;AAC1D,cAAA;UAAM,MAAA,GAAS,KAAK,CAAC,oBAAN,CAA2B;YAAE,UAAA,EAAY;UAAd,CAA3B;iBACT,OAAA,CAAQ,MAAR;QAFoD,CAAZ;MAAH,CAAjC;IADR;wCAKA;EAnBkC,EApGpC;;;EA0HA,IAAC,CAAE,0BAAF,CAAD,GAAkC,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAClC,QAAA,KAAA,EAAA,KAAA,EAAA,QAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,mBAAA;;;IAEE,QAAA,GAAW,QAAA,CAAE,KAAF,CAAA;AACb,UAAA,CAAA,EAAA,GAAA,EAAA;MAAI,CAAA,GAAI;AACJ;MAAA,KAAA,UAAA,GAAA;;QAEE,CAAC,CAAC,IAAF,CAAO,GAAP;MAFF;AAGA,aAAO;IALE,EAFb;;IASE,mBAAA,GAAsB;MACpB;QAAE;UAAE,GAAA,EAAK;QAAP,CAAF;QAA2C;UAAE;YAAE,EAAA,EAAI,CAAN;YAAS,GAAA,EAAK,KAAd;YAA8B,KAAA,EAAO;UAArC,CAAF;SAA3C;OADoB;MAEpB;QAAE;UAAE,GAAA,EAAK,KAAP;UAAc,KAAA,EAAO;QAArB,CAAF;QAA2C;UAAE;YAAE,EAAA,EAAI,CAAN;YAAS,GAAA,EAAK,KAAd;YAA8B,KAAA,EAAO;UAArC,CAAF;SAA3C;OAFoB;MAGpB;QAAE;UAAE,GAAA,EAAK,MAAP;UAAe,KAAA,EAAO;QAAtB,CAAF;QAA2C;UAAE;YAAE,EAAA,EAAI,CAAN;YAAS,GAAA,EAAK,MAAd;YAA8B,KAAA,EAAO;UAArC,CAAF;SAA3C;OAHoB;MAIpB;QAAE;UAAE,GAAA,EAAK,SAAP;UAAkB,KAAA,EAAO;QAAzB,CAAF;QAA2C;UAAE;YAAE,EAAA,EAAI,CAAN;YAAS,GAAA,EAAK,SAAd;YAA8B,KAAA,EAAO;UAArC,CAAF;SAA3C;OAJoB;MAKpB;QAAE;UAAE,GAAA,EAAK;QAAP,CAAF;QAA2C;UAAE;YAAE,EAAA,EAAI,CAAN;YAAS,GAAA,EAAK,cAAd;YAA8B,KAAA,EAAO;UAArC,CAAF;SAA3C;OALoB;;IAOtB,CAAA,CAAE,KAAF,CAAA,GAAc,OAAA,CAAQ,6BAAR,CAAd;IACA,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB;MACF,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;eAAG,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,CAAA;AAC1D,cAAA,KAAA,EAAA;UAAM,KAAA,GAAQ,IAAI,KAAJ,CAAA;UACR,KAAK,CAAC,OAAN,CAAc,KAAd;UACA,MAAA,GAAU,QAAA,CAAS,KAAT;iBACV,OAAA,CAAQ,MAAR;QAJoD,CAAZ;MAAH,CAAjC;IADR;wCAOA;EAzBgC,EA1HlC;;;EAsJA,IAAC,CAAE,mBAAF,CAAD,GAA2B,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC3B,QAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,mBAAA;;;IAEE,mBAAA,GAAsB;MACpB;QAAE;UAAE,KAAA,EAAO;QAAT,CAAF;QAAgD;UAAE,IAAA,EAAM,GAAR;UAAa,GAAA,EAAK,KAAlB;UAAyB,KAAA,EAAO;QAAhC,CAAhD;OADoB;MAEpB;QAAE;UAAE,KAAA,EAAO;QAAT,CAAF;QAAgD;UAAE,IAAA,EAAM,GAAR;UAAa,GAAA,EAAK,KAAlB;UAAyB,KAAA,EAAO;QAAhC,CAAhD;OAFoB;MAGpB;QAAE;UAAE,KAAA,EAAO;QAAT,CAAF;QAAgD;UAAE,IAAA,EAAM,GAAR;UAAa,GAAA,EAAK,oBAAlB;UAAwC,KAAA,EAAO;QAA/C,CAAhD;OAHoB;MAIpB;QAAE;UAAE,KAAA,EAAO;QAAT,CAAF;QAAgD;UAAE,IAAA,EAAM,GAAR;UAAa,GAAA,EAAK,iBAAlB;UAAqC,KAAA,EAAO;QAA5C,CAAhD;OAJoB;MAKpB;QAAE;UAAE,KAAA,EAAO;QAAT,CAAF;QAAgD,IAAhD;QAAsD,yBAAtD;OALoB;MAMpB;QAAE;UAAE,KAAA,EAAO;QAAT,CAAF;QAAgD,IAAhD;QAAsD,qBAAtD;OANoB;MAOpB;QAAE;UAAE,KAAA,EAAO;QAAT,CAAF;QAAgD,IAAhD;QAAsD,mCAAtD;OAPoB;;IAStB,CAAA,CAAE,KAAF,CAAA,GAAc,OAAA,CAAQ,6BAAR,CAAd;IACA,KAAA,GAAc,IAAI,KAAJ,CAAA;IACd,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB;MACF,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;eAAG,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,CAAA;AAC1D,cAAA;UAAM,MAAA,GAAS,KAAK,CAAC,WAAN,CAAkB,KAAlB;iBACT,OAAA,CAAQ,MAAR;QAFoD,CAAZ;MAAH,CAAjC;IADR;wCAKA;EAnByB,EAtJ3B;;;EA4KA,IAAC,CAAE,iBAAF,CAAD,GAAyB,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACzB,QAAA,KAAA,EAAA,wBAAA;;IACE,CAAA,CAAE,KAAF,CAAA,GAAc,OAAA,CAAQ,6BAAR,CAAd,EADF;;IAGE,wBAAA,GAA2B,QAAA,CAAE,KAAF,CAAA;MACzB,KAAK,CAAC,OAAN,CAAc;QAAE,GAAA,EAAK,KAAP;QAAc,KAAA,EAAO;MAArB,CAAd;MACA,KAAK,CAAC,OAAN,CAAc;QAAE,GAAA,EAAK,KAAP;QAAc,KAAA,EAAO;MAArB,CAAd;MACA,KAAK,CAAC,OAAN,CAAc;QAAE,GAAA,EAAK,KAAP;QAAc,KAAA,EAAO;MAArB,CAAd;MACA,KAAK,CAAC,gBAAN,CAAuB;QAAE,EAAA,EAAI,EAAN;QAAU,EAAA,EAAI,EAAd;QAAkB,GAAA,EAAK;MAAvB,CAAvB;MACA,KAAK,CAAC,gBAAN,CAAuB;QAAE,EAAA,EAAI,EAAN;QAAU,EAAA,EAAI,EAAd;QAAkB,IAAA,EAAM,GAAxB;QAA6B,GAAA,EAAK;MAAlC,CAAvB;MACA,KAAK,CAAC,gBAAN,CAAuB;QAAE,EAAA,EAAI,EAAN;QAAU,EAAA,EAAI,EAAd;QAAkB,GAAA,EAAK;MAAvB,CAAvB;MACA,KAAK,CAAC,gBAAN,CAAuB;QAAE,EAAA,EAAI,EAAN;QAAU,EAAA,EAAI,EAAd;QAAkB,IAAA,EAAM,GAAxB;QAA6B,GAAA,EAAK;MAAlC,CAAvB;MACA,KAAK,CAAC,gBAAN,CAAuB;QAAE,EAAA,EAAI,EAAN;QAAU,EAAA,EAAI,EAAd;QAAkB,GAAA,EAAK,KAAvB;QAA8B,KAAA,EAAO;MAArC,CAAvB;MACA,KAAK,CAAC,gBAAN,CAAuB;QAAE,EAAA,EAAI,EAAN;QAAU,EAAA,EAAI,EAAd;QAAkB,IAAA,EAAM,GAAxB;QAA6B,GAAA,EAAK;MAAlC,CAAvB;AACA,aAAO;IAVkB;IAWxB,CAAA,CAAA,CAAA,GAAA,EAAA;AACL,UAAA;MAAI,KAAA,GAAQ,IAAI,KAAJ,CAAA;MAAa,wBAAA,CAAyB,KAAzB;MACrB,CAAC,CAAC,EAAF,CAAK,KAAK,CAAC,aAAN,CAAA,CAAL,EAA4B;QAAE,GAAA,EAAK,IAAP;QAAa,GAAA,EAAK,KAAlB;QAAyB,GAAA,EAAK;MAA9B,CAA5B;MACA,CAAC,CAAC,EAAF,CAAK,KAAK,CAAC,sBAAN,CAAA,CAAL,EAAqC,CAAA,CAArC;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,GAAA,EAAK;MAAP,CAAzC;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC,CAAA,CAAzC;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,GAAA,EAAK;MAAP,CAAzC;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC,CAAA,CAAzC;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,GAAA,EAAK;MAAP,CAAzC;aACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC,CAAA,CAAzC;IATC,CAAA;IAUA,CAAA,CAAA,CAAA,GAAA,EAAA;AACL,UAAA;MAAI,KAAA,GAAQ,IAAI,KAAJ,CAAU;QAAE,SAAA,EAAW;MAAb,CAAV;MAAgC,wBAAA,CAAyB,KAAzB;MACxC,CAAC,CAAC,EAAF,CAAK,KAAK,CAAC,aAAN,CAAA,CAAL,EAA4B;QAAE,GAAA,EAAK,IAAP;QAAa,GAAA,EAAK,KAAlB;QAAyB,GAAA,EAAK;MAA9B,CAA5B;MACA,CAAC,CAAC,EAAF,CAAK,KAAK,CAAC,sBAAN,CAAA,CAAL,EAAqC;QAAE,GAAA,EAAK,IAAP;QAAa,GAAA,EAAK;MAAlB,CAArC;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,GAAA,EAAK,IAAP;QAAa,GAAA,EAAK;MAAlB,CAAzC;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,GAAA,EAAK,IAAP;QAAa,GAAA,EAAK;MAAlB,CAAzC;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,GAAA,EAAK,IAAP;QAAa,GAAA,EAAK,EAAlB;QAAsB,GAAA,EAAK;MAA3B,CAAzC;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,GAAA,EAAK,IAAP;QAAa,GAAA,EAAK;MAAlB,CAAzC;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,GAAA,EAAK,IAAP;QAAa,GAAA,EAAK;MAAlB,CAAzC;aACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,GAAA,EAAK,IAAP;QAAa,GAAA,EAAK;MAAlB,CAAzC;IATC,CAAA;IAUA,CAAA,CAAA,CAAA,GAAA,EAAA;AACL,UAAA;MAAI,KAAA,GAAQ,IAAI,KAAJ,CAAU;QAAE,SAAA,EAAW;MAAb,CAAV;MAAiC,wBAAA,CAAyB,KAAzB;MACzC,CAAC,CAAC,EAAF,CAAK,KAAK,CAAC,aAAN,CAAA,CAAL,EAA4B;QAAE,GAAA,EAAK,IAAP;QAAa,GAAA,EAAK,KAAlB;QAAyB,GAAA,EAAK;MAA9B,CAA5B;MACA,CAAC,CAAC,EAAF,CAAK,KAAK,CAAC,sBAAN,CAAA,CAAL,EAAqC;QAAE,GAAA,EAAK,IAAP;QAAa,GAAA,EAAK,KAAlB;QAAyB,GAAA,EAAK;MAA9B,CAArC;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,GAAA,EAAK,IAAP;QAAa,GAAA,EAAK,KAAlB;QAAyB,GAAA,EAAK;MAA9B,CAAzC;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,GAAA,EAAK,IAAP;QAAa,GAAA,EAAK,KAAlB;QAAyB,GAAA,EAAK;MAA9B,CAAzC;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,GAAA,EAAK,IAAP;QAAa,GAAA,EAAK,IAAlB;QAAwB,GAAA,EAAK;MAA7B,CAAzC;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,GAAA,EAAK,IAAP;QAAa,GAAA,EAAK,KAAlB;QAAyB,GAAA,EAAK;MAA9B,CAAzC;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,GAAA,EAAK,IAAP;QAAa,GAAA,EAAK,KAAlB;QAAyB,GAAA,EAAK;MAA9B,CAAzC;aACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,GAAA,EAAK,IAAP;QAAa,GAAA,EAAK,KAAlB;QAAyB,GAAA,EAAK;MAA9B,CAAzC;IATC,CAAA;wCAWH;EA9CuB,EA5KzB;;;EA6NA,IAAC,CAAE,wBAAF,CAAD,GAAgC,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAChC,QAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,MAAA,EAAA,KAAA,EAAA,mBAAA;;;IAEE,CAAA,CAAE,KAAF,CAAA,GAAc,OAAA,CAAQ,6BAAR,CAAd;IACA,MAAA,GAAgB,KAHlB;;IAKE,iBAAA,GAAoB,QAAA,CAAE,KAAF,CAAA;AACtB,UAAA,CAAA,EAAA,GAAA,EAAA;MAAI,CAAA,GAAI;AACJ;MAAA,KAAA,UAAA;QACE,GAAG,CAAC,KAAJ,GAAY,EAAA,CAAG,GAAG,CAAC,KAAP;QACZ,CAAC,CAAC,IAAF,CAAO,GAAP;MAFF;AAGA,aAAO;IALW,EALtB;;IAYE,mBAAA,GAAsB;MACpB;QAAE;UAAE,EAAA,EAAI,CAAN;UAAS,EAAA,EAAI,EAAb;UAAkB,IAAA,EAAM,GAAxB;UAA6B,GAAA,EAAK;QAAlC,CAAF;QAAsE;UAAE;YAAE,EAAA,EAAI,CAAN;YAAS,EAAA,EAAI,CAAb;YAAgB,EAAA,EAAI,EAApB;YAAwB,IAAA,EAAM,GAA9B;YAAmC,GAAA,EAAK,KAAxC;YAA+C,KAAA,EAAO;UAAtD,CAAF;SAAtE;OADoB;MAEpB;QAAE;UAAE,EAAA,EAAI,CAAN;UAAS,EAAA,EAAI,EAAb;UAAkB,IAAA,EAAM,GAAxB;UAA6B,GAAA,EAAK,KAAlC;UAAyC,KAAA,EAAO;QAAhD,CAAF;QAAsE;UAAE;YAAE,EAAA,EAAI,CAAN;YAAS,EAAA,EAAI,CAAb;YAAgB,EAAA,EAAI,EAApB;YAAwB,IAAA,EAAM,GAA9B;YAAmC,GAAA,EAAK,KAAxC;YAA+C,KAAA,EAAO;UAAtD,CAAF;SAAtE;OAFoB;MAGpB;QAAE;UAAE,EAAA,EAAI,CAAN;UAAS,EAAA,EAAI,EAAb;UAAkB,IAAA,EAAM,GAAxB;UAA6B,GAAA,EAAK,MAAlC;UAA0C,KAAA,EAAO;QAAjD,CAAF;QAAsE;UAAE;YAAE,EAAA,EAAI,CAAN;YAAS,EAAA,EAAI,CAAb;YAAgB,EAAA,EAAI,EAApB;YAAwB,IAAA,EAAM,GAA9B;YAAmC,GAAA,EAAK,MAAxC;YAAgD,KAAA,EAAO;UAAvD,CAAF;SAAtE;OAHoB;MAIpB;QAAE;UAAE,EAAA,EAAI,CAAN;UAAS,EAAA,EAAI,EAAb;UAAkB,IAAA,EAAM,GAAxB;UAA6B,GAAA,EAAK;QAAlC,CAAF;QAAsE;UAAE;YAAE,EAAA,EAAI,CAAN;YAAS,EAAA,EAAI,CAAb;YAAgB,EAAA,EAAI,EAApB;YAAwB,IAAA,EAAM,GAA9B;YAAmC,GAAA,EAAK,SAAxC;YAAmD,KAAA,EAAO;UAA1D,CAAF;SAAtE;OAJoB;MAKpB;QAAE;UAAE,EAAA,EAAI,CAAN;UAAS,EAAA,EAAI,EAAb;UAAkB,IAAA,EAAM,GAAxB;UAA6B,GAAA,EAAK;QAAlC,CAAF;QAAsE;UAAE;YAAE,EAAA,EAAI,CAAN;YAAS,EAAA,EAAI,CAAb;YAAgB,EAAA,EAAI,EAApB;YAAwB,IAAA,EAAM,GAA9B;YAAmC,GAAA,EAAK,cAAxC;YAAwD,KAAA,EAAO;UAA/D,CAAF;SAAtE;OALoB;;IAOtB,KAAA,GAAc,IAAI,KAAJ,CAAA;IACd,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB;MACF,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;eAAG,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,CAAA;AAC1D,cAAA;UAAM,KAAA,GAAU,IAAI,KAAJ,CAAU,CAAE,MAAF,CAAV;UACV,KAAK,CAAC,OAAN,CAAc,KAAd;UACA,KAAK,CAAC,gBAAN,CAAuB,KAAvB;UACA,MAAA,GAAU,iBAAA,CAAkB,KAAlB;iBACV,OAAA,CAAQ,MAAR;QALoD,CAAZ;MAAH,CAAjC;IADR,CApBF;;WA4BE,IAAA,CAAA;EA7B8B,EA7NhC;;;EA6PA,IAAC,CAAE,mBAAF,CAAD,GAA2B,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC3B,QAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,KAAA,EAAA,SAAA,EAAA,iBAAA,EAAA,MAAA;;;IAEE,CAAA,CAAE,GAAF,CAAA,GAAoB,OAAA,CAAQ,wBAAR,CAApB;IACA,CAAA,CAAE,KAAF,CAAA,GAAoB,OAAA,CAAQ,6BAAR,CAApB,EAHF;;IAKE,MAAA,GAAoB;IACpB,GAAA,GAAoB,IAAI,GAAJ,CAAA;IACpB,KAAA,GAAoB,IAAI,KAAJ,CAAU,CAAE,GAAF,EAAO,MAAP,CAAV,EAPtB;;IASE,iBAAA,GAAoB,QAAA,CAAA,CAAA;aAAG,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAA,0CAAA,CAAb,CAAT;IAAH;IACpB,SAAA,GAAoB,QAAA,CAAA,CAAA;aAAG,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAA,6CAAA,CAAb,CAAT;IAAH;IAIjB,CAAA,CAAA,CAAA,GAAA,EAAA;;;MACD,KAAK,CAAC,OAAN,CAAc;QAAE,GAAA,EAAK;MAAP,CAAd;MACA,KAAK,CAAC,OAAN,CAAc;QAAE,GAAA,EAAK;MAAP,CAAd;MACA,KAAK,CAAC,gBAAN,CAAuB;QAAE,IAAA,EAAM,GAAR;QAAa,EAAA,EAAI,EAAjB;QAAqB,EAAA,EAAI,EAAzB;QAA6B,GAAA,EAAK;MAAlC,CAAvB;MACA,KAAK,CAAC,gBAAN,CAAuB;QAAE,IAAA,EAAM,GAAR;QAAa,EAAA,EAAI,EAAjB;QAAqB,EAAA,EAAI,EAAzB;QAA6B,GAAA,EAAK;MAAlC,CAAvB;MACA,KAAK,CAAC,gBAAN,CAAuB;QAAE,IAAA,EAAM,GAAR;QAAa,EAAA,EAAI,EAAjB;QAAqB,EAAA,EAAI,EAAzB;QAA6B,GAAA,EAAK;MAAlC,CAAvB;MACA,CAAC,CAAC,EAAF,CAAK,SAAA,CAAA,CAAL,EAAkB,EAAlB;MACA,CAAC,CAAC,EAAF,CAAK,iBAAA,CAAA,CAAL,EAA0B;QACxB;UAAE,EAAA,EAAI,CAAN;UAAS,EAAA,EAAI,EAAb;UAAiB,EAAA,EAAI,EAArB;UAAyB,IAAA,EAAM,GAA/B;UAAoC,GAAA,EAAK,OAAzC;UAAkD,KAAA,EAAO;QAAzD,CADwB;QAExB;UAAE,EAAA,EAAI,CAAN;UAAS,EAAA,EAAI,EAAb;UAAiB,EAAA,EAAI,EAArB;UAAyB,IAAA,EAAM,GAA/B;UAAoC,GAAA,EAAK,QAAzC;UAAmD,KAAA,EAAO;QAA1D,CAFwB;QAGxB;UAAE,EAAA,EAAI,CAAN;UAAS,EAAA,EAAI,EAAb;UAAiB,EAAA,EAAI,EAArB;UAAyB,IAAA,EAAM,GAA/B;UAAoC,GAAA,EAAK,QAAzC;UAAmD,KAAA,EAAO;QAA1D,CAHwB;OAA1B;MAIA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,gBAAN,CAAuB;QAAE,EAAA,EAAI;MAAN,CAAvB,CAAP,EAA6C;QAC3C;UAAE,EAAA,EAAI,CAAN;UAAS,IAAA,EAAM,GAAf;UAAoB,GAAA,EAAK,OAAzB;UAAkC,KAAA,EAAO;QAAzC,CAD2C;QAE3C;UAAE,EAAA,EAAI,CAAN;UAAS,IAAA,EAAM,GAAf;UAAoB,GAAA,EAAK,QAAzB;UAAmC,KAAA,EAAO;QAA1C,CAF2C;OAA7C;MAGA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,gBAAN,CAAuB;QAAE,EAAA,EAAI;MAAN,CAAvB,CAAP,EAA6C;QAC3C;UAAE,EAAA,EAAI,CAAN;UAAS,IAAA,EAAM,GAAf;UAAoB,GAAA,EAAK,OAAzB;UAAkC,KAAA,EAAO;QAAzC,CAD2C;QAE3C;UAAE,EAAA,EAAI,CAAN;UAAS,IAAA,EAAM,GAAf;UAAoB,GAAA,EAAK,QAAzB;UAAmC,KAAA,EAAO;QAA1C,CAF2C;QAG3C;UAAE,EAAA,EAAI,CAAN;UAAS,IAAA,EAAM,GAAf;UAAoB,GAAA,EAAK,QAAzB;UAAmC,KAAA,EAAO;QAA1C,CAH2C;OAA7C;MAIA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,gBAAN,CAAuB;QAAE,EAAA,EAAI;MAAN,CAAvB,CAAP,EAA6C;QAC3C;UAAE,EAAA,EAAI,CAAN;UAAS,IAAA,EAAM,GAAf;UAAoB,GAAA,EAAK,OAAzB;UAAkC,KAAA,EAAO;QAAzC,CAD2C;OAA7C;MAEA,CAAC,CAAC,EAAF,CAAK,SAAA,CAAA,CAAL,EAAkB,EAAlB;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,KAAA,EAAO,IAAT;QAAe,MAAA,EAAQ;MAAvB,CAAzC;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,KAAA,EAAO;MAAT,CAAzC;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,KAAA,EAAO;MAAT,CAAzC;aACA,CAAC,CAAC,EAAF,CAAK,SAAA,CAAA,CAAL,EAAkB;QAChB;UAAE,EAAA,EAAI,EAAN;UAAU,IAAA,EAAM;QAAhB,CADgB;QAEhB;UAAE,EAAA,EAAI,EAAN;UAAU,IAAA,EAAM;QAAhB,CAFgB;QAGhB;UAAE,EAAA,EAAI,EAAN;UAAU,IAAA,EAAM;QAAhB,CAHgB;OAAlB;IAxBC,CAAA;wCA6BH;EA5CyB,EA7P3B;;;EA4SA,IAAC,CAAE,iCAAF,CAAD,GAAyC,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACzC,QAAA,KAAA,EAAA,KAAA,EAAA,SAAA,EAAA,iBAAA,EAAA,MAAA;;;IAEE,CAAA,CAAE,KAAF,CAAA,GAAoB,OAAA,CAAQ,6BAAR,CAApB;IACA,MAAA,GAAoB;IACpB,KAAA,GAAoB,IAAI,KAAJ,CAAU;MAAE,MAAF;MAAU,SAAA,EAAW;IAArB,CAAV,EAJtB;;IAME,iBAAA,GAAoB,QAAA,CAAA,CAAA;aAAG,KAAK,CAAC,GAAG,CAAC,IAAV,CAAe,KAAK,CAAC,GAAG,CAAC,KAAV,CAAgB,GAAG,CAAA,0CAAA,CAAnB,CAAf;IAAH;IACpB,SAAA,GAAoB,QAAA,CAAA,CAAA;aAAG,KAAK,CAAC,GAAG,CAAC,IAAV,CAAe,KAAK,CAAC,GAAG,CAAC,KAAV,CAAgB,GAAG,CAAA,6CAAA,CAAnB,CAAf;IAAH;IAIjB,CAAA,CAAA,CAAA,GAAA,EAAA;;;MACD,KAAK,CAAC,OAAN,CAAc;QAAE,GAAA,EAAK;MAAP,CAAd;MACA,KAAK,CAAC,gBAAN,CAAuB;QAAE,IAAA,EAAM,GAAR;QAAa,EAAA,EAAI,EAAjB;QAAqB,EAAA,EAAI,EAAzB;QAA6B,GAAA,EAAK;MAAlC,CAAvB;MACA,CAAC,CAAC,EAAF,CAAK,SAAA,CAAA,CAAL,EAAkB,EAAlB;MACA,CAAC,CAAC,EAAF,CAAK,iBAAA,CAAA,CAAL,EAA0B;QACxB;UAAE,EAAA,EAAI,CAAN;UAAS,EAAA,EAAI,EAAb;UAAiB,EAAA,EAAI,EAArB;UAAyB,IAAA,EAAM,GAA/B;UAAoC,GAAA,EAAK,OAAzC;UAAkD,KAAA,EAAO;QAAzD,CADwB;OAA1B;MAEA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,gBAAN,CAAuB;QAAE,EAAA,EAAI;MAAN,CAAvB,CAAP,EAA6C;QAC3C;UAAE,EAAA,EAAI,CAAN;UAAS,IAAA,EAAM,GAAf;UAAoB,GAAA,EAAK,OAAzB;UAAkC,KAAA,EAAO;QAAzC,CAD2C;OAA7C;MAEA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,gBAAN,CAAuB;QAAE,EAAA,EAAI;MAAN,CAAvB,CAAP,EAA6C,EAA7C;MACA,CAAC,CAAC,EAAF,CAAK,SAAA,CAAA,CAAL,EAAkB,EAAlB;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC;QAAE,KAAA,EAAO;MAAT,CAAzC;MACA,CAAC,CAAC,EAAF,CAAO,KAAK,CAAC,YAAN,CAAmB;QAAE,EAAA,EAAI;MAAN,CAAnB,CAAP,EAAyC,CAAA,CAAzC;MACA,CAAC,CAAC,EAAF,CAAK,SAAA,CAAA,CAAL,EAAkB;QAChB;UAAE,EAAA,EAAI,EAAN;UAAU,IAAA,EAAM;QAAhB,CADgB;QAEhB;UAAE,EAAA,EAAI,EAAN;UAAU,IAAA,EAAM;QAAhB,CAFgB;OAAlB;MAGA,OAAO,CAAC,KAAR,CAAc,KAAK,CAAC,GAAG,CAAC,IAAV,CAAe,KAAK,CAAC,GAAG,CAAC,KAAV,CAAgB,GAAG,CAAA,cAAA,CAAA,CAAmB,MAAnB,CAAA,6BAAA,CAAnB,CAAf,CAAd;aACA,OAAO,CAAC,KAAR,CAAc,KAAK,CAAC,GAAG,CAAC,IAAV,CAAe,KAAK,CAAC,GAAG,CAAC,KAAV,CAAgB,GAAG,CAAA,cAAA,CAAA,CAAmB,MAAnB,CAAA,kCAAA,CAAnB,CAAf,CAAd;IAhBC,CAAA;wCAkBH;EA9BuC,EA5SzC;;;EA6UA,kBAAA,GAAqB,QAAA,CAAE,KAAF,CAAA;AACrB,QAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,KAAA,EAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA;;;;IAAE,KAAA,GAAQ,CAIN,CAAE,eAAF,EAAoC,kBAApC,CAJM,EAKN,CAAE,eAAF,EAAoC,MAApC,CALM,EAMN,CAAE,eAAF,EAAoC,MAApC,CANM,EAON,CAAE,eAAF,EAAoC,MAApC,CAPM,EAQN,CAAE,eAAF,EAAoC,SAApC,CARM,EASN,CAAE,eAAF,EAAoC,YAApC,CATM,EAUN,CAAE,QAAF,EAAoC,eAApC,CAVM,EAWN,CAAE,eAAF,EAAoC,MAApC,CAXM,EAYN,CAAE,gBAAF,EAAoC,GAApC,CAZM,EAaN,CAAE,eAAF,EAAoC,MAApC,CAbM,EAcN,CAAE,8BAAF,EAAoC,GAApC,CAdM;IAgBR,SAAA,GAAY,IAAI,GAAJ,CAAA;IACZ,SAAS,CAAC,GAAV,CAAc,MAAd;IAA4B,KAAK,CAAC,OAAN,CAAc;MAAE,GAAA,EAAK,MAAP;MAAe,KAAA,EAAO;IAAtB,CAAd;IAC5B,SAAS,CAAC,GAAV,CAAc,WAAd;IAA4B,KAAK,CAAC,OAAN,CAAc;MAAE,GAAA,EAAK,WAAP;MAAoB,KAAA,EAAO;IAA3B,CAAd;IAC5B,KAAA,uCAAA;MAAI,CAAE,KAAF,EAAS,MAAT;MACF,CAAA,CAAE,IAAF,EAAQ,GAAR,EAAa,KAAb,CAAA,GAAwB,KAAK,CAAC,WAAN,CAAkB,CAAE,KAAF,CAAlB,CAAxB;MACA,KAAO,SAAS,CAAC,GAAV,CAAc,GAAd,CAAP;QACE,SAAS,CAAC,GAAV,CAAc,GAAd;QACA,KAAK,CAAC,OAAN,CAAc;UAAE,GAAF;UAAO,KAAA,EAAO,CAAK,KAAA,KAAS,IAAZ,GAAsB,KAAtB,GAAiC,KAAnC;QAAd,CAAd,EAFF;;AAGA;MAAA,KAAA,uCAAA;SAAI,CAAE,EAAF,EAAM,EAAN;QACF,KAAK,CAAC,gBAAN,CAAuB,CAAE,IAAF,EAAQ,GAAR,EAAa,KAAb,EAAoB,EAApB,EAAwB,EAAxB,CAAvB;MADF;IALF;AAOA,WAAO;EA3BY,EA7UrB;;;EA2WA,IAAC,CAAE,iBAAF,CAAD,GAAyB,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACzB,QAAA,KAAA,EAAA,CAAA,EAAA,SAAA,EAAA,CAAA,EAAA,GAAA,EAAA;;MAAE,CAAC,CAAE,aAAH,CAAA;;IACA,CAAA,CAAE,KAAF,CAAA,GAAoB,OAAA,CAAQ,6BAAR,CAApB,EADF;;IAGE,CAAA,GAAI,QAAA,CAAE,SAAF,CAAA;AACN,UAAA,GAAA,EAAA,YAAA,EAAA,GAAA,EAAA,YAAA,EAAA,KAAA,EAAA,SAAA,EAAA,CAAA,EAAA,QAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA;MAAI,MAAA,GAAoB;MACpB,KAAA,GAAoB,IAAI,KAAJ,CAAU,CAAE,MAAF,EAAU,SAAV,CAAV;MACpB,YAAA,GAAoB,QAAA,CAAE,GAAF,CAAA;eAAW,GAAG,CAAC,WAAJ,CAAgB,CAAhB;MAAX;MACpB,YAAA,GAAoB,QAAA,CAAE,GAAF,CAAA;eAAW,MAAM,CAAC,aAAP,CAAqB,GAArB;MAAX;MACpB,KAAK,CAAC,GAAG,CAAC,eAAV,CAA0B;QAAA,IAAA,EAAM,cAAN;QAAsB,IAAA,EAAM;MAA5B,CAA1B;MACA,SAAA,GAAoB,YAAA,CAAa,GAAb;MACpB,QAAA,GAAoB,YAAA,CAAa,GAAb,EANxB;;MAQI,kBAAA,CAAmB,KAAnB,EARJ;;MAUI,OAAO,CAAC,KAAR,CAAc,KAAK,CAAC,GAAG,CAAC,IAAV,CAAe,KAAK,CAAC,GAAG,CAAC,KAAV,CAAgB,GAAG,CAAA;;;;;;;OAAA,CAAA,CAQrC,MARqC,CAAA;cAAA,CAAnB,CAAf,CAAd;MAUA,OAAO,CAAC,KAAR,CAAc,KAAK,CAAC,GAAG,CAAC,IAAV,CAAe,KAAK,CAAC,GAAG,CAAC,KAAV,CAAgB,GAAG,CAAA,cAAA,CAAA,CAAmB,MAAnB,CAAA,kBAAA,CAAnB,CAAf,CAAd,EApBJ;;;MAuBI,KAAW,gHAAX;QACE,GAAA,GAAY,MAAM,CAAC,aAAP,CAAqB,GAArB;QACZ,IAAA,GAAY,KAAK,CAAC,YAAN,CAAmB;UAAE,EAAA,EAAI;QAAN,CAAnB;QACZ,IAAA,CAAO,GAAG,CAAC,IAAJ,CAAS,GAAT,CAAP,EAAyB,GAAG,CAAC,IAAJ,CAAS,IAAT,CAAzB;MAHF;aAIA,OAAO,CAAC,KAAR,CAAc,KAAK,CAAC,GAAG,CAAC,IAAV,CAAe,KAAK,CAAC,GAAG,CAAC,KAAV,CAAgB,GAAG,CAAA,cAAA,CAAA,CAAmB,MAAnB,CAAA,6BAAA,CAAnB,CAAf,CAAd;IA5BE;AA+BJ;;;IAAA,KAAA,qCAAA;;MACE,CAAA,CAAE,SAAF;IADF;wCAEA;EArCuB,EA3WzB;;;;EAmZA,IAAC,CAAE,wBAAF,CAAD,GAAgC,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAChC,QAAA,KAAA,EAAA,CAAA,EAAA,aAAA,EAAA,aAAA,EAAA,YAAA,EAAA,YAAA,EAAA,gCAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,SAAA,EAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,YAAA,EAAA;;MAAE,CAAC,CAAE,aAAH,CAAA;;IACA,CAAA,CAAE,KAAF,CAAA,GAAoB,OAAA,CAAQ,6BAAR,CAApB,EADF;;IAGE,MAAA,GAAoB;IACpB,KAAA,GAAoB,IAAI,KAAJ,CAAU;MAAE,MAAF;MAAU,SAAA,EAAW;IAArB,CAAV;IACpB,CAAA,CAAE,GAAF,CAAA,GAAoB,KAApB;IACA,YAAA,GAAoB,QAAA,CAAE,GAAF,CAAA;aAAW,GAAG,CAAC,WAAJ,CAAgB,CAAhB;IAAX;IACpB,YAAA,GAAoB,QAAA,CAAE,GAAF,CAAA;aAAW,MAAM,CAAC,aAAP,CAAqB,GAArB;IAAX;IACpB,SAAA,GAAoB,YAAA,CAAa,GAAb;IACpB,QAAA,GAAoB,YAAA,CAAa,GAAb,EATtB;;IAWE,kBAAA,CAAmB,KAAnB;IACA,KAAK,CAAC,gBAAN,CAAuB;MAAE,EAAA,EAAI,QAAN;MAAgB,EAAA,EAAI,QAApB;MAA8B,GAAA,EAAK,MAAnC;MAA2C,KAAA,EAAO;IAAlD,CAAvB,EAZF;;IAcE,gCAAA,GAAmC,QAAA,CAAA,CAAA;AACrC,UAAA,KAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,YAAA,EAAA,GAAA,EAAA,CAAA,EAAA,OAAA,EAAA,QAAA,EAAA,EAAA,EAAA,MAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA;MAAI,MAAA;;AAAc;AAAA;QAAA,KAAA,UAAA;uBAAA,GAAG,CAAC;QAAJ,CAAA;;;MAEd,QAAA,GAAgB,MAAM,CAAC,MAAP,GAAgB;MAChC,OAAA,GAAgB,MAAM,CAAE,QAAF;MACtB,QAAA,GAAgB;MAChB,YAAA,GAAgB,GALpB;;MAOI,KAAW,gGAAX;QACE,EAAA,GAAQ,MAAM,CAAE,GAAF;QACd,IAAA,GAAQ,IAAI,CAAC,SAAL,CAAe,KAAK,CAAC,YAAN,CAAmB,CAAE,EAAF,CAAnB,CAAf;QACR,IAAY,IAAA,KAAQ,QAApB;AAAA,mBAAA;SAFN;;QAIM,QAAA,GAAY,KAJlB;;QAMM,KAAA,CAAM,QAAN,EAAgB,EAAhB,EAAoB,GAAA,CAAI,IAAJ,CAApB;QACA,YAAY,CAAC,IAAb,CAAkB,CAAE,EAAF,EAAM,IAAN,CAAlB;MARF;MASA,YAAY,CAAC,IAAb,CAAkB;QAAE,EAAA,EAAI,OAAN;QAAe,IAAA,EAAM;MAArB,CAAlB,EAhBJ;;MAkBI,KAAW,2GAAX;QACE,KAAA,GAAQ,YAAY,CAAE,GAAF;QACpB,EAAA,GAAQ,KAAK,CAAC;QACd,EAAA,GAAQ,YAAY,CAAE,GAAA,GAAM,CAAR,CAAW,CAAC,EAAxB,GAA6B;QACrC,IAAA,GAAQ,KAAK,CAAC;QACd,IAAC,CAAA,GAAG,CAAC,GAAL,CAAS,IAAC,CAAA,GAAG,CAAC,uBAAd,EAAuC,CAAE,EAAF,EAAM,EAAN,EAAU,IAAV,CAAvC;MALF,CAlBJ;;AAyBI,aAAO;IA1B0B;IA2BnC,OAAO,CAAC,KAAR,CAAc,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAA,cAAA,CAAA,CAAiB,MAAjB,CAAA,yCAAA,CAAb,CAAT,CAAd;IACA,gCAAgC,CAAC,KAAjC,CAAuC,KAAvC;IACA,OAAO,CAAC,KAAR,CAAc,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAA,cAAA,CAAA,CAAiB,MAAjB,CAAA,8BAAA,CAAb,CAAT,CAAd;;MACA;;AAAS,WAAO,KA5ClB;;;IA+CE,KAAA,CAAM,UAAU,CAAC,KAAX,CAAiB,qBAAjB,CAAN;IACA,CAAA,GAAI;IACJ,EAAA,GAAK;IAQL,CAAA,GAAI;AACJ;IAAA,KAAA,qCAAA;;MACE,CAAA,CAAE,MAAF,CAAA,GAAc,KAAd;AACA;MAAA,KAAA,aAAA;;QACE,IAAgB,YAAhB;AAAA,mBAAA;;QACA,CAAC,CAAC,IAAF,CAAO,CAAE,KAAF,EAAS,IAAT,CAAP;AACA;MAHF;IAFF;IAMA,KAAA,UAAA;;MACE,IAAA,CAAK,KAAL,EAAY,GAAA,CAAI,IAAJ,CAAZ;IADF,CAhEF;;;;;;;;;IA0EE,YAAA,GAAe,CAAA;IACf,aAAA,GAAgB,QAAA,CAAE,GAAF,CAAA;AAClB,UAAA,MAAA,EAAA,QAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,MAAA,EAAA,QAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA;MAAI,CAAA,CAAE,EAAF,EAAM,EAAN,CAAA,GAAc,GAAd;;QACA,KAAc;;;QACd,KAAc;;MACd,KAAqC,oGAArC;QAAA,KAAK,CAAC,YAAN,CAAmB,CAAE,EAAF,CAAnB;MAAA;MACA,MAAA,GAAgB;MAChB,QAAA,GAAgB;MAChB,MAAA,GAAgB;MAChB,QAAA,GAAgB;AAChB;MAAA,KAAA,WAAA;QACE,CAAA;UAAE,EAAA,EAAI,MAAN;UAAc,IAAA,EAAM;QAApB,CAAA,GAAkC,GAAlC;QACA,IAAG,QAAA,KAAc,QAAjB;UACE,IAAG,gBAAH;YACE,kCAAE,YAAY,CAAE,QAAF,IAAZ,YAAY,CAAE,QAAF,IAAgB,EAA9B,CAAkC,CAAC,IAAnC,CAAwC,kBAAI,SAAS,SAAb,EAA4B,MAAA,GAAS,CAArC,CAAxC,EADF;;UAEA,MAAA,GAAY;UACZ,QAAA,GAAY,SAJd;;MAFF;MAOA,IAAA,CAAK,QAAL,EAAe,CAAE,MAAF,EAAU,QAAV,EAAoB,MAApB,EAA4B,QAA5B,CAAf;MACA,kCAAE,YAAY,CAAE,QAAF,IAAZ,YAAY,CAAE,QAAF,IAAgB,EAA9B,CAAkC,CAAC,IAAnC,CAAwC,kBAAI,SAAS,SAAb,EAA0B,MAA1B,CAAxC;AACA,aAAO;IAlBO;IAmBhB,aAAA,CAAc;MAAE,EAAA,EAAI,CAAN;MAAS,EAAA,EAAI;IAAb,CAAd;IACA,KAAA,oBAAA;;MACE,KAAA,wDAAA;;QACE,IAAG,GAAA,KAAO,CAAV;UACE,KAAA,CAAM,OAAN,EAAe,IAAf,EADF;SAAA,MAAA;UAGE,KAAA,CAAM,OAAN,EAHF;;MADF;IADF,CA/FF;;;IAuGE,YAAA,GAAe,CAAA;IACf,aAAA,GAAgB,QAAA,CAAE,GAAF,CAAA;AAClB,UAAA,MAAA,EAAA,QAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,EAAA;MAAI,CAAA,CAAE,EAAF,EAAM,EAAN,CAAA,GAAgB,GAAhB;;QACA,KAAgB;;;QAChB,KAAgB;;MAChB,MAAA,GAAgB;MAChB,QAAA,GAAgB;MAChB,MAAA,GAAgB;MAChB,QAAA,GAAgB;aAChB,KAAK,CAAC,GAAG,CAAC,SAAV,CAAoB,CAAA,CAAA,GAAA;AACxB,YAAA,EAAA,EAAA,IAAA,EAAA,OAAA,EAAA;AAAM;AAAA;QAAA,KAAA,WAAA;UACE,CAAA,CAAE,EAAF,EAAM,IAAN,CAAA,GAAgB,GAAhB;uBACA,KAAA,CAAM,OAAN,EAAe,EAAf,EAAmB,KAAK,CAAC,YAAN,CAAmB,CAAE,EAAF,CAAnB,CAAnB;QAFF,CAAA;;MADkB,CAApB;IARc;IAYhB,aAAA,CAAc;MAAE,EAAA,EAAI,EAAN;MAAU,EAAA,EAAI;IAAd,CAAd;IACA,KAAA,oBAAA;;MACE,KAAA,wDAAA;;QACE,IAAG,GAAA,KAAO,CAAV;UACE,KAAA,CAAM,OAAN,EAAe,IAAf,EADF;SAAA,MAAA;UAGE,KAAA,CAAM,OAAN,EAHF;;MADF;IADF,CArHF;;;;IA8HE,SAAA,GAAY;IACZ,QAAA,GAAY;IACZ,CAAA,GAAY,QAAA,GAAW,SAAX,GAAuB;IACnC,EAAA,GAAY,IAAI,CAAC,GAAL,CAAA;IAET,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,EAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA;AAAI;MAAA,KAAU,iHAAV,GAAA;;;;AAIE;MAJF,CAAA;;IADC,CAAA,IAnIL;;IA0IE,EAAA,GAAY,IAAI,CAAC,GAAL,CAAA;IACZ,GAAA,GAAY,CAAE,EAAA,GAAK,EAAP,CAAA,GAAc;IAC1B,SAAA,GAAY,KAAK,CAAC,GAAG,CAAC,WAAV,CAAsB,KAAK,CAAC,GAAG,CAAC,KAAV,CAAgB,GAAG,CAAA,qBAAA,CAAA,CAAwB,MAAxB,CAAA,iBAAA,CAAnB,CAAtB,EA5Id;;IA8IE,KAAA,CAAM,QAAN,EAAgB,CAAE,CAAF,EAAK,GAAL,EAAU,SAAV,CAAhB;wCAEA;EAjJ8B,EAnZhC;;;;EAuiBA,IAAC,CAAE,kBAAF,CAAD,GAA0B,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC1B,QAAA,SAAA,EAAA,KAAA,EAAA,CAAA,EAAA,SAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA,YAAA,EAAA,IAAA,EAAA,YAAA,EAAA,SAAA,EAAA,gBAAA,EAAA,KAAA,EAAA,SAAA,EAAA,KAAA,EAAA,QAAA,EAAA,CAAA,EAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,aAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA;;MAAE,CAAC,CAAE,aAAH,CAAA;;IACA,SAAA,GAA4B,OAAA,CAAQ,yBAAR;IAC5B,CAAA,CAAE,SAAF,CAAA,GAA4B,SAAS,CAAC,SAAtC;IACA,SAAA,GAA4B,IAAI,SAAJ,CAAA;IAC5B,CAAA;MAAE,GAAA,EAAK,IAAP;MACE,CADF;MAEE;IAFF,CAAA,GAE4B,SAAS,CAAC,MAAV,CAAA,CAF5B,EAJF;;IAQE,CAAA,CAAE,KAAF,CAAA,GAAoB,OAAA,CAAQ,6BAAR,CAApB;IACA,SAAA,GAAoB;IACpB,KAAA,GAAoB,IAAI,KAAJ,CAAU,CAAE,SAAF,CAAV;IACpB,YAAA,GAAoB,QAAA,CAAE,GAAF,CAAA;aAAW,GAAG,CAAC,WAAJ,CAAgB,CAAhB;IAAX;IACpB,YAAA,GAAoB,QAAA,CAAE,GAAF,CAAA;aAAW,MAAM,CAAC,aAAP,CAAqB,GAArB;IAAX,EAZtB;;;IAeE,kBAAA,CAAmB,KAAnB,EAfF;;IAiBE,IAAA,GAAQ;IACR,IAAA,GAAQ,IAAI,CAAC,WAAL,CAAA;IACR,IAAA,GAAQ,KAAK,CAAC,IAAN,CAAW,IAAX,EAnBV;;IAqBE,OAAA,GAAU,CAAA;IACV,KAAA,GAAU,GAtBZ;;IAwBE,gBAAA,GAAmB,QAAA,CAAE,GAAF,EAAO,KAAP,CAAA;AACrB,UAAA,CAAA,EAAA,MAAA,EAAA,MAAA,EAAA;AAAI,cAAO,CAAE,IAAA,GAAO,OAAA,CAAQ,KAAR,CAAT,CAAP;AAAA,aACO,QADP;UAEI,IAAA,CAAK,SAAL,EAAgB,SAAS,CAAC,SAAS,CAAC,gBAApB,CAAqC,CAAA,CAArC,EAAyC;YAAE,IAAA,EAAM,MAAR;YAAgB,GAAA,EAAK;UAArB,CAAzC,CAAhB;UACA,IAAA,CAAK,SAAL,EAAgB,SAAS,CAAC,SAAS,CAAC,gBAApB,CAAqC,CAAA,CAArC,EAAyC;YAAE,IAAA,EAAM,MAAR;YAAgB,GAAA,EAAK;UAArB,CAAzC,CAAhB;UACA,IAAA,CAAK,SAAL,EAAgB,SAAS,CAAC,SAAS,CAAC,gBAApB,CAAqC,CAAA,CAArC,EAAyC;YAAE,IAAA,EAAM,MAAR;YAAgB,GAAA,EAAK;UAArB,CAAzC,CAAhB;UACA,IAAA,CAAK,SAAL,EAAgB,SAAS,CAAC,SAAS,CAAC,gBAApB,CAAqC,CAAA,CAArC,EAAyC,UAAzC,CAAhB;UACA,IAAA,CAAK,OAAL,EAAc,KAAd,EAAqB,MAArB;UACA,CAAA,GAAsB,SAAS,CAAC,OAAV,CAAA;UACtB,CAAE,MAAF,EAAU,MAAV,CAAA,GAAsB,CAAC,CAAC,KAAF,CAAQ,MAAR;AACtB,iBAAO;AATX;AAWI,iBAAO,CAAA,CAAA,CAAA,CAAI,GAAJ,CAAA,QAAA,CAAA,CAAkB,KAAlB,CAAA,EAAA;AAXX;IADiB,EAxBrB;;IAsCE,aAAA,GAAgB,SAAA,CAAA,CAAA;AAClB,UAAA,GAAA,EAAA,GAAA,EAAA;AAAI;MAAA,KAAA,UAAA;;QACE,KAAK,CAAC,IAAN,CAAW,CAAE,GAAF,EAAO,KAAP,CAAX;QACA,MAAM,gBAAA,CAAiB,GAAjB,EAAsB,KAAtB;MAFR;AAGA,aAAO;IAJO;AAKhB;IAAA,KAAA,eAAA;MACE,KAAA,CAAM,QAAN,EAAgB,QAAhB;IADF;IAEA,OAAA,CAAQ,OAAR,EAAiB,KAAjB,EA7CF;;;IAgDE,KAAA,sCAAA;;MACE,EAAA,GAAQ,YAAA,CAAa,GAAb;MACR,IAAA,GAAQ,KAAK,CAAC,YAAN,CAAmB,CAAE,EAAF,CAAnB;MACR,OAAA,CAAQ,OAAR,EAAiB,GAAjB,EAAsB,IAAtB;MACA,KAAA,WAAA;;QACE,IAAA,CAAK,SAAL,EAAgB,CAAE,GAAF,EAAO,KAAP,CAAhB;QACA,IAAgB,QAAS,UAAT,QAAiB,OAAjC;AAAA,mBAAA;;QACA,IAAG,wBAAE,OAAO,CAAE,GAAF,IAAP,OAAO,CAAE,GAAF,IAAW,KAApB,CAAH;UACK,CAAA,KAAA,GAAQ,QAAA,CAAA,CAAA;AACnB,gBAAA;AAAU,mBAAA,IAAA;cACE,OAAA,GAAU,KAAK,CAAC,GAAN,CAAA;cACV,IAAA,CAAK,OAAL,EAAc,CAAA,EAAA,CAAA,CAAK,OAAL,CAAA,CAAA,CAAd;cACA,OAAO,CAAE,OAAF,CAAP,GAAqB;cACrB,IAAS,GAAA,KAAO,OAAhB;AAAA,sBAAA;;YAJF;AAKA,mBAAO;UANE,CAAR,IADL;;QAQA,KAAA,CAAM,OAAN,EAAe,GAAf;QACA,OAAO,CAAE,GAAF,CAAP,GAAiB;QACjB,IAAA,CAAK,OAAL,EAAc,CAAA,CAAA,CAAA,CAAI,GAAJ,CAAA,QAAA,CAAA,CAAkB,KAAlB,CAAA,EAAA,CAAd;QACA,KAAK,CAAC,IAAN,CAAW,GAAX;QACA,OAAA,CAAQ,OAAR,EAAiB,KAAjB;MAfF;IAJF;wCAqBA;EAtEwB,EAviB1B;;;;EAinBA,SAAA,GAAY,QAAA,CAAA,CAAA;AACZ,QAAA,SAAA,EAAA,CAAA,EAAA,SAAA,EAAA,CAAA,EAAA,IAAA,EAAA,SAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,IAAA,EAAA,gBAAA,EAAA;IAAE,SAAA,GAA4B,OAAA,CAAQ,yBAAR;IAC5B,CAAA,CAAE,SAAF,CAAA,GAA4B,SAAS,CAAC,SAAtC;IACA,SAAA,GAA4B,IAAI,SAAJ,CAAA;IAC5B,CAAA,CAAE,IAAF,EACE,MADF,EAEE,GAFF,EAGE,CAHF,EAIE,CAJF,CAAA,GAI4B,SAAS,CAAC,MAAV,CAAA,CAJ5B;IAKA,CAAA,CAAE,gBAAF,EACE,gBADF,CAAA,GAC4B,SAAS,CAAC,IAAI,CAAC,MAAf,CAAA,CAD5B,EARF;;IAWE,CAAC,CAAC,CAAF,CAAI,QAAA,CAAA,CAAA;MACF,CAAC,CAAC,IAAF,CAAQ,iBAAR;MACA,GAAA,CAAQ,IAAR,EAAc,MAAd;MACA,CAAC,CAAC,IAAF,CAAQ,8BAAR;MACA,GAAA,CAAQ,IAAR,EAAc;QAAE,GAAA,EAAK;MAAP,CAAd,EAA+B,QAAA,CAAA,CAAA;eAAG,CAAC,CAAC,IAAF,CAAO,KAAP;MAAH,CAA/B;aACA,GAAA,CAAQ,QAAR,EAAkB,OAAlB,EAA2B,sBAA3B,EAAmD,sBAAnD;IALE,CAAJ,EAXF;;IAkBE,IAAA,GAAS,SAAS,CAAC,OAAV,CAAA;IACT,IAAA,CAAK,SAAS,CAAC,cAAf;IACA,IAAA,CAAK,IAAA,GAAO,IAAZ,EApBF;;IAsBE,CAAC,CAAC,CAAF,CAAI,mBAAJ;IACA,KAAA,CAAM,SAAS,CAAC,OAAV,CAAA,CAAN,EAvBF;;IAyBE,GAAA,CAAI,GAAJ,EAAS;MAAE,KAAA,EAAO;IAAT,CAAT,EAA6B,QAAA,CAAA,CAAA;MAC3B,CAAC,CAAC,IAAF,CAAO,uBAAP;aACA,GAAA,CAAI,QAAJ,EAAc;QAAE,GAAA,EAAK;MAAP,CAAd,EAA6C,KAA7C;IAF2B,CAA7B;IAGA,KAAA,CAAM,SAAS,CAAC,OAAV,CAAA,CAAN,EA5BF;;AA8BE,WAAO;EA/BG,EAjnBZ;;;EAopBA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA;;;aAGhC,IAAA,CAAK,IAAC,CAAE,wBAAF,CAAN;IAHgC,CAAA,IAAlC;;;EAppBA;;;;;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA-TAGS/TESTS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\non_process_exit           = require 'exit-hook'\nsleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\nSQL                       = String.raw\njr                        = JSON.stringify\njp                        = JSON.parse\ndba_path                  = '../../../apps/icql-dba'\n{ lets\n  freeze }                = require 'letsfreezethat'\n\n#-----------------------------------------------------------------------------------------------------------\nadd_sql_functions = ( dba ) ->\n\n  #=========================================================================================================\n  R =\n\n    #-------------------------------------------------------------------------------------------------------\n    walk_pattern_matches: ( text, pattern ) ->\n      regex = new RegExp pattern, 'g'\n      while ( match = regex.exec text )?\n        yield [ match[ 0 ], match[ 1 ], ]\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    generate_series: ( start, stop, step = null ) ->\n      # stop ?= start\n      debug '^3334^', @\n      step ?= 1\n      n     = start\n      loop\n        break if n > stop\n        # if n %% 2 is 0 then yield [ \"*#{n}*\", ]\n        # else                yield [ n, ]\n        yield [ n, ]\n        n += step\n      return null\n\n  #.........................................................................................................\n  R[ k ] = v.bind R for k, v of R\n  #.........................................................................................................\n  dba.create_table_function\n    name:         'generate_series'\n    columns:      [ 'n', ]\n    parameters:   [ 'start', 'stop', 'step', ]\n    rows:         R.generate_series\n  #.........................................................................................................\n  dba.create_table_function\n    name:         're_matches'\n    columns:      [ 'match', 'capture', ]\n    parameters:   [ 'text', 'pattern', ]\n    rows:         R.walk_pattern_matches\n  #.........................................................................................................\n  return R\n\n\n#===========================================================================================================\nclass Ncr\n  # constructor: ->\n  #---------------------------------------------------------------------------------------------------------\n  parse_multirange_declaration: ( range_declaration ) ->\n    validate.text range_declaration\n    R = []\n    return R if range_declaration is ''\n    for part in range_declaration.split /,\\s+/\n      if ( match = part.match /^(?<lo>.+)\\.\\.(?<hi>.+)/ )?\n        lo  = match.groups.lo.codePointAt 0\n        hi  = match.groups.hi.codePointAt 0\n      else\n        validate.chr part\n        lo = hi = part.codePointAt 0\n      R.push { lo, hi, }\n    return R\nNCR = new Ncr()\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tags: tags_from_tagexchain\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ '+foo',                             ],  { foo: true,          }, ]\n    [ [ '+foo:\"abc\"',                       ],  { foo: 'abc',         }, ]\n    [ [ '+font:\"superset\"',                 ],  { font: 'superset',   }, ]\n    [ [ '+font:\"font1\"',                    ],  { font: 'font1',      }, ]\n    [ [ '+font:\"font1\"',  '+font:\"Arial\"',  ],  { font: 'Arial',      }, ]\n    [ [ '+rounded', '-rounded',             ],  {},                      ]\n    [ [ '+shape/ladder', '+shape/pointy',   ],  { 'shape/ladder': true, 'shape/pointy': true, }, ]\n    ]\n  { Dtags, }  = require '../../../apps/icql-dba-tags'\n  dtags       = new Dtags()\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = dtags.tags_from_tagexchain { tagexchain: probe, }\n      resolve result\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tags: add_tag with value\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  #.........................................................................................................\n  get_tags = ( dtags ) ->\n    R = []\n    for row from dtags.dba.query \"select * from t_tags;\"\n      # row.value = jp row.value\n      R.push row\n    return R\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ { tag: 'foo',                        },  [ { nr: 1, tag: 'foo',          value: 'false',    } ], ]\n    [ { tag: 'foo', value: 'abc',          },  [ { nr: 1, tag: 'foo',          value: '\"abc\"',   } ], ]\n    [ { tag: 'font', value: 'font1',       },  [ { nr: 1, tag: 'font',         value: '\"font1\"', } ], ]\n    [ { tag: 'rounded', value: false,      },  [ { nr: 1, tag: 'rounded',      value: 'false',   } ], ]\n    [ { tag: 'shape/ladder',               },  [ { nr: 1, tag: 'shape/ladder', value: 'false',    } ], ]\n    ]\n  { Dtags, }  = require '../../../apps/icql-dba-tags'\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      dtags = new Dtags()\n      dtags.add_tag probe\n      result  = get_tags dtags\n      resolve result\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tags: parse_tagex\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ { tagex: '+foo',                          },  { mode: '+', tag: 'foo', value: true,    }, ]\n    [ { tagex: '-foo',                          },  { mode: '-', tag: 'foo', value: false,    }, ]\n    [ { tagex: '+shape/excentricity:0.2',       },  { mode: '+', tag: 'shape/excentricity', value: 0.2,    }, ]\n    [ { tagex: '+css/font-family:\"Helvetica\"',  },  { mode: '+', tag: 'css/font-family', value: 'Helvetica',    }, ]\n    [ { tagex: '-css/font-family:\"Helvetica\"',  },  null, \"Dtags_subtractive_value\", ]\n    [ { tagex: '*bar',                          },  null, \"Dtags_invalid_tagex\", ]\n    [ { tagex: '+bar:blah',                     },  null, \"Dtags_illegal_tagex_value_literal\", ]\n    ]\n  { Dtags, }  = require '../../../apps/icql-dba-tags'\n  dtags       = new Dtags()\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = dtags.parse_tagex probe\n      resolve result\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tags: fallbacks\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dtags, }  = require '../../../apps/icql-dba-tags'\n  #.........................................................................................................\n  add_some_tags_and_ranges = ( dtags ) ->\n    dtags.add_tag { tag: 'foo', value: true, }\n    dtags.add_tag { tag: 'bar', value: false, }\n    dtags.add_tag { tag: 'baz', value: 42, }\n    dtags.add_tagged_range { lo: 10, hi: 10, tag: 'foo', }\n    dtags.add_tagged_range { lo: 11, hi: 11, mode: '-', tag: 'foo', }\n    dtags.add_tagged_range { lo: 12, hi: 12, tag: 'bar', }\n    dtags.add_tagged_range { lo: 13, hi: 13, mode: '-', tag: 'bar', }\n    dtags.add_tagged_range { lo: 14, hi: 14, tag: 'baz', value: 108, }\n    dtags.add_tagged_range { lo: 15, hi: 15, mode: '-', tag: 'baz', }\n    return null\n  do => #...................................................................................................\n    dtags = new Dtags(); add_some_tags_and_ranges dtags\n    T.eq dtags.get_fallbacks(), { foo: true, bar: false, baz: 42 }\n    T.eq dtags.get_filtered_fallbacks(), {}\n    T.eq ( dtags.tags_from_id { id: 10, } ), { foo: true }\n    T.eq ( dtags.tags_from_id { id: 11, } ), {}\n    T.eq ( dtags.tags_from_id { id: 12, } ), { bar: true }\n    T.eq ( dtags.tags_from_id { id: 13, } ), {}\n    T.eq ( dtags.tags_from_id { id: 14, } ), { baz: 108 }\n    T.eq ( dtags.tags_from_id { id: 15, } ), {}\n  do => #...................................................................................................\n    dtags = new Dtags { fallbacks: true, }; add_some_tags_and_ranges dtags\n    T.eq dtags.get_fallbacks(), { foo: true, bar: false, baz: 42 }\n    T.eq dtags.get_filtered_fallbacks(), { foo: true, baz: 42 }\n    T.eq ( dtags.tags_from_id { id: 10, } ), { foo: true, baz: 42 }\n    T.eq ( dtags.tags_from_id { id: 11, } ), { foo: true, baz: 42 }\n    T.eq ( dtags.tags_from_id { id: 12, } ), { foo: true, baz: 42, bar: true }\n    T.eq ( dtags.tags_from_id { id: 13, } ), { foo: true, baz: 42 }\n    T.eq ( dtags.tags_from_id { id: 14, } ), { foo: true, baz: 108 }\n    T.eq ( dtags.tags_from_id { id: 15, } ), { foo: true, baz: 42 }\n  do => #...................................................................................................\n    dtags = new Dtags { fallbacks: 'all', }; add_some_tags_and_ranges dtags\n    T.eq dtags.get_fallbacks(), { foo: true, bar: false, baz: 42 }\n    T.eq dtags.get_filtered_fallbacks(), { foo: true, bar: false, baz: 42 }\n    T.eq ( dtags.tags_from_id { id: 10, } ), { foo: true, bar: false, baz: 42 }\n    T.eq ( dtags.tags_from_id { id: 11, } ), { foo: true, bar: false, baz: 42 }\n    T.eq ( dtags.tags_from_id { id: 12, } ), { foo: true, bar: true, baz: 42 }\n    T.eq ( dtags.tags_from_id { id: 13, } ), { foo: true, bar: false, baz: 42 }\n    T.eq ( dtags.tags_from_id { id: 14, } ), { foo: true, bar: false, baz: 108 }\n    T.eq ( dtags.tags_from_id { id: 15, } ), { foo: true, bar: false, baz: 42 }\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tags: add_tagged_range\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  #.........................................................................................................\n  { Dtags, }  = require '../../../apps/icql-dba-tags'\n  prefix        = 't_'\n  #.........................................................................................................\n  get_tagged_ranges = ( dtags ) ->\n    R = []\n    for row from dtags.dba.query SQL\"select * from t_tagged_ranges order by lo, hi, tag;\"\n      row.value = jp row.value\n      R.push row\n    return R\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ { lo: 1, hi: 11,  mode: '+', tag: 'foo',                        },  [ { nr: 1, lo: 1, hi: 11, mode: '+', tag: 'foo', value: true, } ], ]\n    [ { lo: 2, hi: 12,  mode: '+', tag: 'foo', value: 'abc',          },  [ { nr: 1, lo: 2, hi: 12, mode: '+', tag: 'foo', value: 'abc', } ], ]\n    [ { lo: 5, hi: 15,  mode: '+', tag: 'font', value: 'font1',       },  [ { nr: 1, lo: 5, hi: 15, mode: '+', tag: 'font', value: 'font1', } ], ]\n    [ { lo: 6, hi: 16,  mode: '-', tag: 'rounded',                    },  [ { nr: 1, lo: 6, hi: 16, mode: '-', tag: 'rounded', value: false, } ],                      ]\n    [ { lo: 7, hi: 17,  mode: '+', tag: 'shape/ladder',               },  [ { nr: 1, lo: 7, hi: 17, mode: '+', tag: 'shape/ladder', value: true, } ],                      ]\n    ]\n  dtags       = new Dtags()\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      dtags   = new Dtags { prefix, }\n      dtags.add_tag probe\n      dtags.add_tagged_range probe\n      result  = get_tagged_ranges dtags\n      resolve result\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tags: caching (1)\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  #.........................................................................................................\n  { Dba }           = require '../../../apps/icql-dba'\n  { Dtags, }        = require '../../../apps/icql-dba-tags'\n  # E                 = require '../../../apps/icql-dba/lib/errors'\n  prefix            = 't_'\n  dba               = new Dba()\n  dtags             = new Dtags { dba, prefix, }\n  #.........................................................................................................\n  get_tagged_ranges = -> dba.list dba.query SQL\"select * from t_tagged_ranges order by nr;\"\n  get_cache         = -> dba.list dba.query SQL\"select * from t_tagged_ids_cache order by id;\"\n  # get_tagchain      = ( id ) -> dba.list dba.query SQL\"\"\"\n  #   select mode, tag, value from t_tagged_ranges where $id between lo and hi order by nr asc;\"\"\", { id, }\n  #.........................................................................................................\n  do =>\n    dtags.add_tag { tag: 'first', }\n    dtags.add_tag { tag: 'second', }\n    dtags.add_tagged_range { mode: '+', lo: 10, hi: 20, tag: 'first',  }\n    dtags.add_tagged_range { mode: '+', lo: 10, hi: 15, tag: 'second', }\n    dtags.add_tagged_range { mode: '-', lo: 12, hi: 12, tag: 'second', }\n    T.eq get_cache(), []\n    T.eq get_tagged_ranges(), [\n      { nr: 1, lo: 10, hi: 20, mode: '+', tag: 'first', value: 'true' },\n      { nr: 2, lo: 10, hi: 15, mode: '+', tag: 'second', value: 'true' },\n      { nr: 3, lo: 12, hi: 12, mode: '-', tag: 'second', value: 'false' } ]\n    T.eq ( dtags.tagchain_from_id { id: 10, } ), [\n      { nr: 1, mode: '+', tag: 'first', value: true },\n      { nr: 2, mode: '+', tag: 'second', value: true }, ]\n    T.eq ( dtags.tagchain_from_id { id: 12, } ), [\n      { nr: 1, mode: '+', tag: 'first', value: true },\n      { nr: 2, mode: '+', tag: 'second', value: true },\n      { nr: 3, mode: '-', tag: 'second', value: false } ]\n    T.eq ( dtags.tagchain_from_id { id: 16, } ), [\n      { nr: 1, mode: '+', tag: 'first', value: true } ]\n    T.eq get_cache(), []\n    T.eq ( dtags.tags_from_id { id: 10, } ), { first: true, second: true }\n    T.eq ( dtags.tags_from_id { id: 12, } ), { first: true, }\n    T.eq ( dtags.tags_from_id { id: 16, } ), { first: true }\n    T.eq get_cache(), [\n      { id: 10, tags: '{\"first\":true,\"second\":true}' },\n      { id: 12, tags: '{\"first\":true}' },\n      { id: 16, tags: '{\"first\":true}' } ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tags: caching with empty values\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  #.........................................................................................................\n  { Dtags, }        = require '../../../apps/icql-dba-tags'\n  prefix            = 't_'\n  dtags             = new Dtags { prefix, fallbacks: true, }\n  #.........................................................................................................\n  get_tagged_ranges = -> dtags.dba.list dtags.dba.query SQL\"select * from t_tagged_ranges order by nr;\"\n  get_cache         = -> dtags.dba.list dtags.dba.query SQL\"select * from t_tagged_ids_cache order by id;\"\n  # get_tagchain      = ( id ) -> dba.list dba.query SQL\"\"\"\n  #   select mode, tag, value from t_tagged_ranges where $id between lo and hi order by nr asc;\"\"\", { id, }\n  #.........................................................................................................\n  do =>\n    dtags.add_tag { tag: 'first', }\n    dtags.add_tagged_range { mode: '+', lo: 10, hi: 10, tag: 'first',  }\n    T.eq get_cache(), []\n    T.eq get_tagged_ranges(), [\n      { nr: 1, lo: 10, hi: 10, mode: '+', tag: 'first', value: 'true' }, ]\n    T.eq ( dtags.tagchain_from_id { id: 10, } ), [\n      { nr: 1, mode: '+', tag: 'first', value: true }, ]\n    T.eq ( dtags.tagchain_from_id { id: 11, } ), []\n    T.eq get_cache(), []\n    T.eq ( dtags.tags_from_id { id: 10, } ), { first: true, }\n    T.eq ( dtags.tags_from_id { id: 11, } ), {}\n    T.eq get_cache(), [\n      { id: 10, tags: '{\"first\":true}' },\n      { id: 11, tags: '{}' }, ]\n    console.table dtags.dba.list dtags.dba.query SQL\"\"\"select * from #{prefix}tagged_ids_cache order by id;\"\"\"\n    console.table dtags.dba.list dtags.dba.query SQL\"\"\"select * from #{prefix}tagged_ranges order by lo, hi, nr;\"\"\"\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n_add_tagged_ranges = ( dtags ) ->\n  rules = [\n    # [ '+superset',      'A..Z',               ]\n    # [ '+font:\"fallback\"', 'A..Z',               ]\n    # [ '+script:\"latin\"',  'A..Z',               ]\n    [ '+font:\"font1\"',                  'B..H, J, L, N..X',   ]\n    [ '+font:\"font2\"',                  'B..D',               ]\n    [ '+font:\"font3\"',                  'G..I',               ]\n    [ '+font:\"font4\"',                  'M..Q',               ]\n    [ '+font:\"font5\"',                  'M, O..T',            ]\n    [ '+font:\"font6\"',                  'M, U, X..X',         ]\n    [ '+vowel',                         'A, E, I, O, U',      ]\n    [ '+shape-pointy',                  'A, V',               ]\n    [ '+shape-crossed',                 'X',                  ]\n    [ '+shape-ladder',                  'A, H',               ]\n    [ '+pushraise:{\"x\":100,\"y\":200}',   'O',                  ]\n    ]\n  seen_tags = new Set()\n  seen_tags.add 'font';       dtags.add_tag { tag: 'font', value: 'fallback', }\n  seen_tags.add 'pushraise';  dtags.add_tag { tag: 'pushraise', value: false, }\n  for [ tagex, ranges, ] in rules\n    { mode, tag, value, } = dtags.parse_tagex { tagex, }\n    unless seen_tags.has tag\n      seen_tags.add tag\n      dtags.add_tag { tag, value: ( if value is true then false else value ), }\n    for { lo, hi, } in NCR.parse_multirange_declaration ranges\n      dtags.add_tagged_range { mode, tag, value, lo, hi, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: ranges (1)\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { Dtags, }        = require '../../../apps/icql-dba-tags'\n  #.........................................................................................................\n  f = ( fallbacks ) ->\n    prefix            = 't_'\n    dtags             = new Dtags { prefix, fallbacks, }\n    cid_from_chr      = ( chr ) -> chr.codePointAt 0\n    chr_from_cid      = ( cid ) -> String.fromCodePoint cid\n    dtags.dba.create_function name: 'chr_from_cid', call: chr_from_cid\n    first_cid         = cid_from_chr 'A'\n    last_cid          = cid_from_chr 'Z'\n    #.......................................................................................................\n    _add_tagged_ranges dtags\n    #.......................................................................................................\n    console.table dtags.dba.list dtags.dba.query SQL\"\"\"\n      select\n          nr                      as nr,\n          chr_from_cid( lo )      as chr_lo,\n          chr_from_cid( hi )      as chr_hi,\n          mode                    as mode,\n          tag                     as tag,\n          value                   as value\n        from #{prefix}tagged_ranges\n        order by nr;\"\"\"\n    console.table dtags.dba.list dtags.dba.query SQL\"\"\"select * from #{prefix}tags order by tag;\"\"\"\n    # console.table dtags.dba.list dtags.dba.query SQL\"\"\"select * from #{prefix}tags_by_cid order by tag, cid, nr;\"\"\"\n    #.......................................................................................................\n    for cid in [ first_cid .. last_cid ]\n      chr       = String.fromCodePoint cid\n      tags      = dtags.tags_from_id { id: cid, }\n      info ( CND.gold chr ), ( CND.blue tags )\n    console.table dtags.dba.list dtags.dba.query SQL\"\"\"select * from #{prefix}tagged_ids_cache order by id;\"\"\"\n    # console.table dtags.dba.list dtags.dba.query SQL\"\"\"select * from #{prefix}tagged_ranges order by lo, hi, nr;\"\"\"\n  #.........................................................................................................\n  for fallbacks in [ 'all', true, false, ]\n    f fallbacks\n  done?() #.................................................................................................\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: contiguous ranges\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { Dtags, }        = require '../../../apps/icql-dba-tags'\n  #.........................................................................................................\n  prefix            = 't_'\n  dtags             = new Dtags { prefix, fallbacks: true, }\n  { dba, }          = dtags\n  cid_from_chr      = ( chr ) -> chr.codePointAt 0\n  chr_from_cid      = ( cid ) -> String.fromCodePoint cid\n  first_cid         = cid_from_chr 'A'\n  last_cid          = cid_from_chr 'Z'\n  #.........................................................................................................\n  _add_tagged_ranges dtags\n  dtags.add_tagged_range { lo: 0x000000, hi: 0x010000, tag: 'font', value: 'font1', }\n  #.........................................................................................................\n  create_minimal_contiguous_ranges = ->\n    pi_ids    = ( row.id for row from @dba.query SQL\"\"\"\n      select id from #{prefix}_potential_inflection_points;\"\"\" )\n    last_idx      = pi_ids.length - 1\n    last_id       = pi_ids[ last_idx ]\n    prv_tags      = null\n    ids_and_tags  = []\n    #.......................................................................................................\n    for idx in [ 0 ... pi_ids.length - 1 ]\n      id    = pi_ids[ idx ]\n      tags  = JSON.stringify dtags.tags_from_id { id, }\n      continue if tags is prv_tags\n      # nxt_id    = pi_ids[ idx + 1 ] - 1\n      prv_tags  = tags\n      # debug '^3337^', id, nxt_id, rpr tags\n      debug '^3337^', id, rpr tags\n      ids_and_tags.push { id, tags, }\n    ids_and_tags.push { id: last_id, tags: null, }\n    #.......................................................................................................\n    for idx in [ 0 ... ids_and_tags.length - 1 ]\n      entry = ids_and_tags[ idx ]\n      lo    = entry.id\n      hi    = ids_and_tags[ idx + 1 ].id - 1\n      tags  = entry.tags\n      @dba.run @sql.insert_contiguous_range, { lo, hi, tags, }\n    #.......................................................................................................\n    return null\n  console.table dba.list dba.query SQL\"select * from #{prefix}_potential_inflection_points order by id;\"\n  create_minimal_contiguous_ranges.apply dtags\n  console.table dba.list dba.query SQL\"select * from #{prefix}contiguous_ranges order by lo;\"\n  done?(); return null\n  #.........................................................................................................\n  ### Demo for a regex that partitons a text into chunks of characters that all have the same tags. ###\n  debug 'abcdefgh'.match /(?<vowels>[aeiou])/g\n  d = 'arbitrary text'\n  re = ///\n    (?<g1> [ a - d ]+ \\s* ) |\n    (?<g2> [ e - h ]+ \\s* ) |\n    (?<g3> [ i - n ]+ \\s* ) |\n    (?<g4> [ o - t ]+ \\s* ) |\n    (?<g5> [ u - z ]+ \\s* ) |\n    (?<g0> \\s+ )\n    ///g\n  R = []\n  for match in [ ( d.matchAll re )..., ]\n    { groups, } = match\n    for group, part of match.groups\n      continue unless part?\n      R.push { group, part, }\n      break\n  for group, part of R\n    info group, rpr part\n  #.........................................................................................................\n  ### Computing contiguous ranges for all distinct sets of tags. For each ID, this table contains exactly\n  one matching row between lo and hi, and the lo of each row (except for the first) is the hi of the\n  preceding row plus one. The data in this table replaces `t_tagged_ids_cache` which in a typical\n  application can be expected to be much larger; further, the range data can be used to build a regex\n  as shown above to split a given text into chunks of characters that all have the same tags. ###\n  # f = add_sql_functions dtags.dba\n  # console.table dtags.dba.list dtags.dba.query SQL\"select * from t_tagged_ranges order by lo, hi;\"\n  tags_cache_1 = {}\n  build_cache_1 = ( cfg ) ->\n    { lo, hi, } = cfg\n    lo         ?= first_cid\n    hi         ?= last_cid\n    dtags.tags_from_id { id, } for id in [ lo .. hi ]\n    cur_id        = first_cid\n    cur_tags      = null\n    prv_id        = null\n    prv_tags      = null\n    for row from dtags.dba.query SQL\"select * from t_tagged_ids_cache order by id;\"\n      { id: cur_id, tags: cur_tags, } = row\n      if cur_tags isnt prv_tags\n        if prv_tags?\n          ( tags_cache_1[ prv_tags ] ?= [] ).push [ ( prv_id ? first_cid ), ( cur_id - 1 ), ]\n        prv_id    = cur_id\n        prv_tags  = cur_tags\n    info '^3487^', { prv_id, prv_tags, cur_id, cur_tags, }\n    ( tags_cache_1[ cur_tags ] ?= [] ).push [ ( prv_id ? first_cid ), cur_id, ]\n    return null\n  build_cache_1 { lo: 0, hi: 99, }\n  for tags, id_pairs of tags_cache_1\n    for id_pair, idx in id_pairs\n      if idx is 0\n        debug id_pair, tags\n      else\n        debug id_pair\n  #.........................................................................................................\n  ### Computing contiguous ranges for all distinct sets of tags using inflection points. ###\n  tags_cache_2 = {}\n  build_cache_2 = ( cfg ) ->\n    { lo, hi, }   = cfg\n    lo           ?= first_cid\n    hi           ?= last_cid\n    cur_id        = first_cid\n    cur_tags      = null\n    prv_id        = null\n    prv_tags      = null\n    dtags.dba.do_unsafe =>\n      for row from dtags.dba.query SQL\"select * from #{prefix}_potential_inflection_points order by id;\"\n        { id, tags, } = row\n        debug '^477^', id, dtags.tags_from_id { id, }\n  build_cache_2 { lo: 65, hi: 99, }\n  for tags, id_pairs of tags_cache_2\n    for id_pair, idx in id_pairs\n      if idx is 0\n        debug id_pair, tags\n      else\n        debug id_pair\n  #.........................................................................................................\n  ### Iterate over all potential Unicode code points ###\n  ### TAINT use proper benchmarking ###\n  first_cid = 0x000000\n  last_cid  = 0x010000\n  n         = last_cid - first_cid + 1\n  t0        = Date.now()\n  #.........................................................................................................\n  do ->\n    for id in [ first_cid .. last_cid ]\n      # tagchain  = dtags.tagchain_from_id { id, }\n      # tags      = dtags.tags_from_id { id, }\n      # urge '^337^', dtags.tagchain_from_id { id, }\n      continue\n  #.........................................................................................................\n  t1        = Date.now()\n  dts       = ( t1 - t0 ) / 1000\n  row_count = dtags.dba.first_value dtags.dba.query SQL\"select count(*) from #{prefix}tagged_ids_cache;\"\n  # console.table dtags.dba.list dtags.dba.query SQL\"\"\"select * from #{prefix}tagged_ids_cache order by id desc limit 100;\"\"\"\n  debug '^3376^', { n, dts, row_count, }\n  #.........................................................................................................\n  done?() #.................................................................................................\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: tagged text\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  INTERTEXT                 = require '../../../apps/intertext'\n  { Cupofhtml }             = INTERTEXT.CUPOFHTML\n  cupofhtml                 = new Cupofhtml()\n  { tag: _tag\n    S\n    H   }                   = cupofhtml.export()\n  #.........................................................................................................\n  { Dtags, }        = require '../../../apps/icql-dba-tags'\n  fallbacks         = 'all'\n  dtags             = new Dtags { fallbacks, }\n  cid_from_chr      = ( chr ) -> chr.codePointAt 0\n  chr_from_cid      = ( cid ) -> String.fromCodePoint cid\n  # dtags.dba.create_function name: 'chr_from_cid', call: chr_from_cid\n  # dtags.dba.create_function name: 'cid_from_chr', call: cid_from_chr\n  _add_tagged_ranges dtags\n  #.........................................................................................................\n  text  = \"lore ipsum\"\n  text  = text.toUpperCase()\n  chrs  = Array.from text\n  #.........................................................................................................\n  is_open = {}\n  stack   = []\n  #.........................................................................................................\n  dtag_as_html_tag = ( tag, value ) ->\n    switch ( type = type_of value )\n      when 'object'\n        urge '^77464^', INTERTEXT.CUPOFHTML._html_from_datom {}, { $key: '<foo', bar: 42, }\n        urge '^77464^', INTERTEXT.CUPOFHTML._html_from_datom {}, { $key: '^foo', bar: 42, }\n        urge '^77464^', INTERTEXT.CUPOFHTML._html_from_datom {}, { $key: '>foo', bar: 42, }\n        urge '^77464^', INTERTEXT.CUPOFHTML._html_from_datom {}, 'foo<bar>'\n        _tag 'mytag', value, '\\x00'\n        R                   = cupofhtml.as_html()\n        [ opener, closer, ] = R.split '\\x00'\n        return opener\n      else\n        return \"<#{tag} class='#{value}'>\"\n  #.........................................................................................................\n  prefill_stack = ->\n    for tag, value of dtags.get_fallbacks()\n      stack.push { tag, value, }\n      yield dtag_as_html_tag tag, value\n    return null\n  for html_tag from prefill_stack()\n    debug '^5576^', html_tag\n  whisper '^545^', stack\n  # return done?()\n  #.........................................................................................................\n  for chr in chrs\n    id    = cid_from_chr chr\n    tags  = dtags.tags_from_id { id, }\n    whisper '^777^', chr, tags\n    for tag, value of tags\n      info '^44476^', { tag, value, }\n      continue unless tag in [ 'font', 'vowel', ]\n      if ( is_open[ tag ] ?= false )\n        do flush = ->\n          loop\n            top_tag = stack.pop()\n            urge '^777^', \"</#{top_tag}>\"\n            is_open[ top_tag ] = false\n            break if tag is top_tag\n          return null\n      debug '^777^', chr\n      is_open[ tag ] = true\n      info '^777^', \"<#{tag} class='#{value}'>\"\n      stack.push tag\n      whisper '^777^', stack\n  #.........................................................................................................\n  done?() #.................................................................................................\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_html = ->\n  INTERTEXT                 = require '../../../apps/intertext'\n  { Cupofhtml }             = INTERTEXT.CUPOFHTML\n  cupofhtml                 = new Cupofhtml()\n  { cram\n    expand\n    tag\n    S\n    H   }                   = cupofhtml.export()\n  { datoms_from_html\n    html_from_datoms }      = INTERTEXT.HTML.export()\n  #.........................................................................................................\n  H.p ->\n    S.text  \"An interesting \"\n    tag     'em', \"fact\"\n    S.text  \" about CupOfJoe is that you \"\n    tag     'em', { foo: 'bar', }, -> S.text \"can\"\n    tag     'strong', \" nest\", \" with both sequences\", \" and function calls.\"\n  #.........................................................................................................\n  html   = cupofhtml.as_html()\n  info cupofhtml.last_expansion\n  urge '\\n' + html\n  #.........................................................................................................\n  H.p \"another paragraph\"\n  debug cupofhtml.as_html()\n  #.........................................................................................................\n  tag 'p', { guess: 'what', }, ->\n    S.text \"yet another paragraph\"\n    tag 'foobar', { atr: 'value with spaces', }, \"yay\"\n  debug cupofhtml.as_html()\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # test @, { timeout: 10e3, }\n  # test @[ \"DBA: ranges (1)\" ]\n  test @[ \"DBA: contiguous ranges\" ]\n  # @[ \"DBA: contiguous ranges\" ]()\n  # test @[ \"tags: caching with empty values\" ]\n  # test @[ \"tags: tags_from_tagexchain\" ]\n  # test @[ \"tags: add_tagged_range\" ]\n  # test @[ \"tags: add_tag with value\" ]\n  # test @[ \"tags: parse_tagex\" ]\n  # @[ \"DBA: ranges (1)\" ]()\n  # test @[ \"tags: caching (1)\" ]\n  # test @[ \"tags: fallbacks\" ]\n  # @[ \"tags: fallbacks\" ]()\n  # @[ \"DBA: tagged text\" ]()\n  # demo_html()\n\n\n\n\n###\n# from https://github.com/loveencounterflow/hengist/tree/master/dev/kitty-font-config-writer-kfcw\n\nsuperset          ABCDEFGHIJKLMNOPQRSTUVWXYZ  │ CSS-like Configuration with Overlapping Ranges\n————————————————— ——————————————————————————  ——————————————————————————————————————————————————————————————\nfont1             BCDEFGH J L NOPQRSTUVWX    │ [B-H] [J] [L] [N-X]                      ◮ least precedence\nfont2             BCD                        │ [B-D]                                    │\nfont3                  GHI                   │ [G-I]                                    │\nfont4                        MNOPQ           │ [M-Q]                                    │\nfont5                        M OPQRST        │ [M] [O-T]                                │\nfont6                        M       U  XY   │ [M] [U] [X-Y]                            │ most precedence\n###\n\n\n\n\n"
  ]
}