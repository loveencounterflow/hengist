{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA-TAGS/TESTS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\non_process_exit           = require 'exit-hook'\nsleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\nSQL                       = String.raw\njr                        = JSON.stringify\njp                        = JSON.parse\ndba_path                  = '../../../apps/icql-dba'\n{ lets\n  freeze }                = require 'letsfreezethat'\n\n\n\n\n#===========================================================================================================\nclass Ncr\n  # constructor: ->\n  #---------------------------------------------------------------------------------------------------------\n  parse_multirange_declaration: ( range_declaration ) ->\n    validate.text range_declaration\n    R = []\n    return R if range_declaration is ''\n    for part in range_declaration.split /,\\s+/\n      if ( match = part.match /^(?<lo>.+)\\.\\.(?<hi>.+)/ )?\n        lo  = match.groups.lo.codePointAt 0\n        hi  = match.groups.hi.codePointAt 0\n      else\n        validate.chr part\n        lo = hi = part.codePointAt 0\n      R.push { lo, hi, }\n    return R\nNCR = new Ncr()\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tags: tags_from_tagexchain\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ '+foo',                             ],  { foo: true,          }, ]\n    [ [ '+foo:\"abc\"',                       ],  { foo: 'abc',         }, ]\n    [ [ '+font:\"superset\"',                 ],  { font: 'superset',   }, ]\n    [ [ '+font:\"font1\"',                    ],  { font: 'font1',      }, ]\n    [ [ '+font:\"font1\"',  '+font:\"Arial\"',  ],  { font: 'Arial',      }, ]\n    [ [ '+rounded', '-rounded',             ],  { rounded: false,     }, ]\n    [ [ '+shape/ladder', '+shape/pointy',   ],  { 'shape/ladder': true, 'shape/pointy': true, }, ]\n    ]\n  { Dtags, }  = require '../../../apps/icql-dba-tags'\n  dtags       = new Dtags()\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = dtags.tags_from_tagexchain { tagexchain: probe, }\n      resolve result\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tags: add_tag with value\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  #.........................................................................................................\n  get_tags = ( dtags ) ->\n    R = []\n    for row from dtags.dba.query \"select * from t_tags;\"\n      # row.value = jp row.value\n      R.push row\n    return R\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ { tag: 'foo',                        },  [ { tag: 'foo',          value: 'true',    } ], ]\n    [ { tag: 'foo', value: 'abc',          },  [ { tag: 'foo',          value: '\"abc\"',   } ], ]\n    [ { tag: 'font', value: 'font1',       },  [ { tag: 'font',         value: '\"font1\"', } ], ]\n    [ { tag: 'rounded', value: false,      },  [ { tag: 'rounded',      value: 'false',   } ], ]\n    [ { tag: 'shape/ladder',               },  [ { tag: 'shape/ladder', value: 'true',    } ], ]\n    ]\n  { Dtags, }  = require '../../../apps/icql-dba-tags'\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      dtags = new Dtags()\n      dtags.add_tag probe\n      result  = get_tags dtags\n      resolve result\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tags: parse_tagex\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ { tagex: '+foo',                          },  { mode: '+', tag: 'foo', value: true,    }, ]\n    [ { tagex: '-foo',                          },  { mode: '-', tag: 'foo', value: false,    }, ]\n    [ { tagex: '+shape/excentricity:0.2',       },  { mode: '+', tag: 'shape/excentricity', value: 0.2,    }, ]\n    [ { tagex: '+css/font-family:\"Helvetica\"',  },  { mode: '+', tag: 'css/font-family', value: 'Helvetica',    }, ]\n    [ { tagex: '-css/font-family:\"Helvetica\"',  },  null, \"Dtags_subtractive_value\", ]\n    [ { tagex: '*bar',                          },  null, \"Dtags_invalid_tagex\", ]\n    [ { tagex: '+bar:blah',                     },  null, \"Dtags_illegal_tagex_value_literal\", ]\n    ]\n  { Dtags, }  = require '../../../apps/icql-dba-tags'\n  dtags       = new Dtags()\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = dtags.parse_tagex probe\n      resolve result\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tags: add_tagged_range\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  #.........................................................................................................\n  { Dtags, }  = require '../../../apps/icql-dba-tags'\n  prefix        = 't_'\n  #.........................................................................................................\n  get_tagged_ranges = ( dtags ) ->\n    R = []\n    for row from dtags.dba.query SQL\"select * from t_tagged_ranges order by lo, hi, tag;\"\n      row.value = jp row.value\n      R.push row\n    return R\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ { lo: 1, hi: 11,  mode: '+', tag: 'foo',                        },  [ { nr: 1, lo: 1, hi: 11, tag: 'foo', value: true, } ], ]\n    [ { lo: 2, hi: 12,  mode: '+', tag: 'foo', value: 'abc',          },  [ { nr: 1, lo: 2, hi: 12, tag: 'foo', value: 'abc', } ], ]\n    [ { lo: 5, hi: 15,  mode: '+', tag: 'font', value: 'font1',       },  [ { nr: 1, lo: 5, hi: 15, tag: 'font', value: 'font1', } ], ]\n    [ { lo: 6, hi: 16,  mode: '-', tag: 'rounded',                    },  [ { nr: 1, lo: 6, hi: 16, tag: 'rounded', value: false, } ],                      ]\n    [ { lo: 7, hi: 17,  mode: '+', tag: 'shape/ladder',               },  [ { nr: 1, lo: 7, hi: 17, tag: 'shape/ladder', value: true, } ],                      ]\n    ]\n  dtags       = new Dtags()\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      dtags   = new Dtags { prefix, }\n      dtags.add_tag probe\n      dtags.add_tagged_range probe\n      result  = get_tagged_ranges dtags\n      resolve result\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tags: caching (1)\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  #.........................................................................................................\n  { Dba }           = require '../../../apps/icql-dba'\n  { Dtags, }        = require '../../../apps/icql-dba-tags'\n  # E                 = require '../../../apps/icql-dba/lib/errors'\n  prefix            = 't_'\n  dba               = new Dba()\n  dtags             = new Dtags { dba, prefix, }\n  #.........................................................................................................\n  get_tagged_ranges = -> dba.list dba.query SQL\"select * from t_tagged_ranges order by lo, hi, tag;\"\n  get_cache         = -> dba.list dba.query SQL\"select * from t_tagged_cids_cache order by cid, tag;\"\n  #.........................................................................................................\n  do =>\n    dtags.add_tag { tag: 'first', }\n    dtags.add_tagged_range { tag: 'first', lo: 10, hi: 20, }\n    debug '^4487^', get_tagged_ranges()\n    debug '^4487^', get_cache()\n    T.eq get_tagged_ranges(), [ { nr: 1, lo: 10, hi: 20, tag: 'first' } ]\n    T.eq get_cache(),         []\n    debug '^4487^', get_cache()\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: ranges (1)\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  { Dtags, }        = require '../../../apps/icql-dba-tags'\n  # E                 = require '../../../apps/icql-dba/lib/errors'\n  prefix            = 't_'\n  dba               = new Dba()\n  dtags             = new Dtags { dba, prefix, }\n  cid_from_chr      = ( chr ) -> chr.codePointAt 0\n  chr_from_cid      = ( cid ) -> String.fromCodePoint cid\n  dba.create_function name: 'chr_from_cid', call: chr_from_cid\n  first_cid         = cid_from_chr 'A'\n  last_cid          = cid_from_chr 'Z'\n  #.........................................................................................................\n  rules = [\n    # [ '+superset',      'A..Z',               ]\n    [ '+font:fallback', 'A..Z',               ]\n    # [ '+script:latin',  'A..Z',               ]\n    [ '+font:font1',    'B..H, J, L, N..X',   ]\n    [ '+font:font2',    'B..D',               ]\n    [ '+font:font3',    'G..I',               ]\n    [ '+font:font4',    'M..Q',               ]\n    [ '+font:font5',    'M, O..T',            ]\n    [ '+font:font6',    'M, U, X..Y',         ]\n    [ '+vowel',         'A, E, I, O, U',      ]\n    [ '+shape/pointy',  'A, V',               ]\n    [ '+shape/crossed', 'X',                  ]\n    [ '+shape/ladder',  'A, H',               ]\n    ]\n  for [ tag, ranges, ] in rules\n    dtags.add_tag { tag, }\n    for { lo, hi, } in NCR.parse_multirange_declaration ranges\n      dtags.add_tagged_range { tag, lo, hi, }\n  #.........................................................................................................\n  console.table dba.list dba.query SQL\"\"\"\n    select\n        nr                      as nr,\n        tag                     as tag,\n        chr_from_cid( lo )      as chr_lo,\n        chr_from_cid( hi )      as chr_hi\n      from #{prefix}tagged_ranges\n      order by nr;\"\"\"\n  console.table dba.list dba.query SQL\"\"\"select * from #{prefix}tags order by tag;\"\"\"\n  # console.table dba.list dba.query SQL\"\"\"select * from #{prefix}tags_by_cid order by tag, cid, nr;\"\"\"\n  #.........................................................................................................\n  for cid in [ first_cid .. last_cid ]\n    chr       = String.fromCodePoint cid\n    tagchain  = dtags.tagchain_from_cid { cid, }\n    debug '^5543^', { tagchain, }\n    tags      = dtags.tags_from_tagchain tagchain\n    info ( CND.gold chr ), ( CND.blue tags )\n    for tag, value of tags\n      value = JSON.stringify value\n      dba.run SQL\"\"\"\n        insert into #{prefix}tagged_cids_cache ( cid, tag, value )\n          values ( $cid, $tag, $value );\"\"\", { cid, tag, value, }\n  console.table dba.list dba.query SQL\"\"\"select * from #{prefix}tagged_cids_cache order by cid, tag;\"\"\"\n  # console.table dba.list dba.query SQL\"\"\"select #{prefix}tags_from_cid( $cid );\"\"\", { cid: 65, }\n  done?() #..................................................................................................\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # test @, { timeout: 10e3, }\n  # test @[ \"DBA: ranges (1)\" ]\n  test @[ \"tags: tags_from_tagexchain\" ]\n  # test @[ \"tags: add_tagged_range\" ]\n  # test @[ \"tags: add_tag with value\" ]\n  # test @[ \"tags: parse_tagex\" ]\n  # @[ \"DBA: ranges (1)\" ]()\n  # test @[ \"tags: caching (1)\" ]\n\n\n\n\n###\n# from https://github.com/loveencounterflow/hengist/tree/master/dev/kitty-font-config-writer-kfcw\n\nsuperset          ABCDEFGHIJKLMNOPQRSTUVWXYZ  │ CSS-like Configuration with Overlapping Ranges\n————————————————— ——————————————————————————  ——————————————————————————————————————————————————————————————\nfont1             BCDEFGH J L NOPQRSTUVWX    │ [B-H] [J] [L] [N-X]                      ◮ least precedence\nfont2             BCD                        │ [B-D]                                    │\nfont3                  GHI                   │ [G-I]                                    │\nfont4                        MNOPQ           │ [M-Q]                                    │\nfont5                        M OPQRST        │ [M] [O-T]                                │\nfont6                        M       U  XY   │ [M] [U] [X-Y]                            │ most precedence\n###\n\n\n\n\n"
  ]
}