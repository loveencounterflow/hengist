{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/idlx-basic.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MOJIKURA-IDL/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\n{ IDL, IDLX, }            = require '../../../apps/mojikura-idl'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  equals   }              = types.export()\n\n\n#===========================================================================================================\n# TESTS (IDLX)\n#-----------------------------------------------------------------------------------------------------------\n@[ \"(IDLX) simple formulas\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"⿱刀口\",[\"⿱\",\"刀\",\"口\"]]\n    [\"⿱癶⿰弓貝\",[\"⿱\",\"癶\",[\"⿰\",\"弓\",\"貝\"]]]\n    [\"⿱⿰亻式貝\",[\"⿱\",[\"⿰\",\"亻\",\"式\"],\"貝\"]]\n    [\"⿱⿰亻式⿱目八\",[\"⿱\",[\"⿰\",\"亻\",\"式\"],[\"⿱\",\"目\",\"八\"]]]\n    [\"⿺辶言\",[\"⿺\",\"辶\",\"言\"]]\n    [\"⿰ab\",[\"⿰\",\"a\",\"b\"]]\n    [\"⿰⿰abc\",[\"⿰\",[\"⿰\",\"a\",\"b\"],\"c\"]]\n    [\"⿱⿱刀口乙\",[\"⿱\",[\"⿱\",\"刀\",\"口\"],\"乙\"]]\n    [\"⿱⿱刀口乙\",[\"⿱\",[\"⿱\",\"刀\",\"口\"],\"乙\"]]\n    [\"⿱&jzr#xe24a;&jzr#xe11d;\",[\"⿱\",\"\",\"\"]]\n    [\"⿰𠁣𠃛\",[\"⿰\",\"𠁣\",\"𠃛\"]]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    # result = resume_next T, -> IDLX.parse probe\n    result = IDLX.parse probe\n    urge ( CND.truth equals result, matcher ), JSON.stringify [ probe, result, ]\n    # urge ( rpr probe ), result\n    T.ok equals result, matcher\n  #.........................................................................................................\n  done()\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  test @\n  # test @[ \"(IDLX) reject bogus formulas\" ]\n\n\n\n"
  ]
}