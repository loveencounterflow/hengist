{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/idlx-silhouettes.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MOJIKURA-IDL/TESTS/SILHOUETTES'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n{ IDL, IDLX, }            = require '../../../apps/mojikura-idl'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  equals   }              = types.export()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"(IDLX) silhouettes\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"⿱⿰⿵𠘨䖝⿵𠘨䖝⿰⿵𠘨䖝⿵𠘨䖝\",\"bbb..b..bb..b..\"]\n    [\"⿱⿰⿵&#123;䖝⿵𠘨䖝⿰⿵𠘨䖝⿵𠘨䖝\",\"bbb..b..bb..b..\"]\n    [\"⿱⿰⿵&#x123;䖝⿵𠘨䖝⿰⿵𠘨䖝⿵𠘨䖝\",\"bbb..b..bb..b..\"]\n    [\"⿱⿰⿵&jzr#123;䖝⿵𠘨䖝⿰⿵𠘨䖝⿵𠘨䖝\",\"bbb..b..bb..b..\"]\n    [\"⿱⿰⿵&jzr#x123;䖝⿵𠘨䖝⿰⿵𠘨䖝⿵𠘨䖝\",\"bbb..b..bb..b..\"]\n    [\"(⿰金(⿱亠口子)夊)\",\"(b.(b...).)\"]\n    [\"⿰(⿱亠口子)夊\",\"b(b...).\"]\n    [\"(⿱⿰冫士寸)\",\"(bb....)\"]\n    [\"⿶≈凵王\",\"bu..\"]\n    [\"⿶≈凵⿱爫臼\",\"bu.b..\"]\n    [\"⿶?凵⿱爫臼\",\"bu.b..\"]\n    [\"⿱卄⿻≈巾⿰糹虫\",\"b.bu.b..\"]\n    [\"↻凹\",\"u.\"]\n    [\"∅\",\"s\"]\n    [\"●\",\"s\"]\n    [\"▽\",\"s\"]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    result = IDLX.silhouette_from_formula probe\n    debug JSON.stringify [ probe, result, ]\n    if result == matcher then T.ok true\n    else T.fail \"#{rpr probe}: expected #{rpr matcher}, got #{rpr result}\"\n  done()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  test @\n\n\n\n\n\n"
  ]
}