{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/idlx-list-tokens.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MOJIKURA-IDL/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\n{ IDL, IDLX, }            = require '../../../apps/mojikura-idl'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  equals   }              = types.export()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"(IDLX) solitaires\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ '↻', 'unary_operator',   ]\n    [ '〓', 'proxy',            ]\n    [ '§', 'proxy',            ]\n    [ '⿰', 'binary_operator',  ]\n    [ '⿻', 'binary_operator',  ]\n    [ '◰', 'binary_operator',  ]\n    [ '(', 'bracket',          ]\n    [ 'x', 'component',        ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, ] in probes_and_matchers\n    result = IDLX.type_from_literal probe\n    urge ( CND.truth equals result, matcher ), JSON.stringify [ probe, result, ]\n    T.ok equals result, matcher\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"(IDLX) get_formula\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ '⿱⿰天天⿰天天',                '⿱⿰天天⿰天天',                ]\n    [ '⿰(⿱一八土)⿱山电',          '⿰(⿱一八土)⿱山电'              ]\n    [ '(⿱⿶凵⿰⿱丄一⿱丄一开土)',      '(⿱⿶凵⿰⿱丄一⿱丄一开土)'          ]\n    [ '⿰⿱名土⿱勿中',             '⿰⿱名土⿱勿中'                 ]\n    [ '⿰⿱日有⿱犬土',             '⿰⿱日有⿱犬土'                 ]\n    [ '⿰⿱土坐⿱土坐',             '⿰⿱土坐⿱土坐'                 ]\n    [ '⿰土(⿱⿰一一⿰日日鹿)',        '⿰土(⿱⿰一一⿰日日鹿)'            ]\n    [ '⿰土⿱⿰⿱一日⿱一日鹿',         '⿰土⿱⿰⿱一日⿱一日鹿'             ]\n    [ '⿰土⿱⿰𣄼𣄼鹿',             '⿰土⿱⿰𣄼𣄼鹿'                 ]\n    [ '⿱𠀎冉',                   '⿱𠀎冉'                       ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, ] in probes_and_matchers\n    diagram = IDLX.parse probe\n    result  = IDLX.get_formula diagram\n    urge ( CND.truth equals result, matcher ), JSON.stringify [ probe, result, ]\n    T.ok equals result, matcher\n  #.........................................................................................................\n  done()\n  return null\n\n###\nresult = IDLX.type_from_literal probe\nurge ( CND.truth equals result, matcher ), JSON.stringify [ probe, result, ]\nT.ok equals result, matcher\ninfo @IDLX._get_literals_and_types IDLX_GRAMMAR\ninfo @IDLX.type_from_literal IDLX_GRAMMAR\nhelp '↻', @IDLX.type_from_literal '↻' # 'operator',\nhelp '〓', @IDLX.type_from_literal '〓' # 'proxy',\nhelp '§', @IDLX.type_from_literal '§' # 'proxy',\nhelp '⿰', @IDLX.type_from_literal '⿰' # 'operator',\nhelp '⿻', @IDLX.type_from_literal '⿻' # 'operator',\nhelp '◰', @IDLX.type_from_literal '◰' # 'operator',\nhelp '(', @IDLX.type_from_literal '(' # 'bracket',\nhelp 'x', @IDLX.type_from_literal 'x' # 'other',\nformula       = '⿹弓(⿰(⿱人人丨)(⿱人人丨)(⿱人人丨))'\nwhisper formula\nhelp diagram  = @IDLX.parse formula\nwhisper formula\nhelp tokens   = @IDLX.list_tokens diagram\nurge @IDLX.get_formula formula\nurge @IDLX.get_formula diagram\nurge @IDLX._get_treeshaker_litmus()\nurge ( CND.yellow formula    ), ( CND.blue CND.truth @IDLX.formula_may_be_nonminimal formula    )\nurge ( CND.yellow '⿱⿱𫝀口㐄'    ), ( CND.blue CND.truth @IDLX.formula_may_be_nonminimal '⿱⿱𫝀口㐄'    )\nurge ( CND.yellow '⿱𫝀⿱口㐄'    ), ( CND.blue CND.truth @IDLX.formula_may_be_nonminimal '⿱𫝀⿱口㐄'    )\nurge ( CND.yellow '⿰韋(⿱白大十)' ), ( CND.blue CND.truth @IDLX.formula_may_be_nonminimal '⿰韋(⿱白大十)' )\ninfo ( CND.yellow formula    ), ( CND.blue @IDLX.normalize_formula formula                       )\ninfo ( CND.yellow '⿱⿱𫝀口㐄'    ), ( CND.blue @IDLX.normalize_formula '⿱⿱𫝀口㐄'                       )\ninfo ( CND.yellow '⿱𫝀⿱口㐄'    ), ( CND.blue @IDLX.normalize_formula '⿱𫝀⿱口㐄'                       )\ninfo ( CND.yellow '⿰韋(⿱白大十)' ), ( CND.blue @IDLX.normalize_formula '⿰韋(⿱白大十)'                    )\n###\n\n############################################################################################################\nif module is require.main then do =>\n  test @\n\n\n\n\n\n"
  ]
}