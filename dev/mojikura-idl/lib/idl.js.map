{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/idl.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MOJIKURA-IDL/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\n{ IDL, IDLX, }            = require '../../../apps/mojikura-idl'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  equals   }              = types.export()\n\n\n#===========================================================================================================\n# TESTS (IDL)\n#-----------------------------------------------------------------------------------------------------------\n@[ \"(IDL) parse simple formulas\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"⿲木木木\",[\"⿲\",\"木\",\"木\",\"木\"]]\n    [\"⿱刀口\",[\"⿱\",\"刀\",\"口\"]]\n    [\"⿱癶⿰弓貝\",[\"⿱\",\"癶\",[\"⿰\",\"弓\",\"貝\"]]]\n    [\"⿱⿰亻式貝\",[\"⿱\",[\"⿰\",\"亻\",\"式\"],\"貝\"]]\n    [\"⿱⿰亻式⿱目八\",[\"⿱\",[\"⿰\",\"亻\",\"式\"],[\"⿱\",\"目\",\"八\"]]]\n    [\"⿺辶言\",[\"⿺\",\"辶\",\"言\"]]\n    [\"⿰ab\",[\"⿰\",\"a\",\"b\"]]\n    [\"⿰⿰abc\",[\"⿰\",[\"⿰\",\"a\",\"b\"],\"c\"]]\n    [\"⿱⿱刀口乙\",[\"⿱\",[\"⿱\",\"刀\",\"口\"],\"乙\"]]\n    [\"⿱⿱刀口乙\",[\"⿱\",[\"⿱\",\"刀\",\"口\"],\"乙\"]]\n    [\"⿱&jzr#xe24a;&jzr#xe11d;\",[\"⿱\",\"\",\"\"]]\n    [\"⿰𠁣𠃛\",[\"⿰\",\"𠁣\",\"𠃛\"]]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    # result = resume_next T, -> IDL.parse probe\n    result = IDL.parse probe\n    urge ( CND.truth equals result, matcher ), JSON.stringify [ probe, result, ]\n    # urge ( rpr probe ), result\n    T.ok equals result, matcher\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"(IDL) reject bogus formulas\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"木\",'Syntax error at index 0 (木)\\nUnexpected \"木\"']\n    [42,'expected a text, got a float']\n    [\"\",\"expected a non-empty text, got an empty text\"]\n    [\"⿱⿰亻式⿱目八木木木\",'Syntax error at index 7 (⿱⿰亻式⿱目八木木木)\\nUnexpected \"木\"']\n    [\"⿺廴聿123\",'Syntax error at index 3 (⿺廴聿123)\\nUnexpected \"1\".']\n    [\"⿺\",\"Syntax Error: '⿺'\"]\n    [\"⿺⿺⿺⿺\",\"Syntax Error: '⿺⿺⿺⿺'\"]\n    [\"(⿰亻聿式)\",'Syntax error at index 0 ((⿰亻聿式))\\nUnexpected \"(\".']\n    [\"≈〇\",'Syntax error at index 0 (≈〇)\\nUnexpected \"≈\".']\n    [\"●\",'Syntax error at index 0 (●)\\nUnexpected \"●\".']\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    try\n      result = IDL.parse probe\n      debug ( rpr probe ), ( rpr result )\n      warn \"expected an exception, got result #{rpr result}\"\n      T.fail \"expected an exception, got result #{rpr result}\"\n    catch error\n      { message, } = error\n      unless message.startsWith matcher\n        urge '^334^', \"probe:             \", rpr probe\n        warn '^334^', \"expected message:  \", ( rpr matcher )[ ... 100 ]\n        help '^334^', \"got message:       \", ( rpr message )[ ... 100 ]\n        message = ( rpr message )[ ... 100 ]\n        T.fail \"message #{rpr message} doesn't start with #{rpr matcher}\"\n      else\n        T.ok true\n  #.........................................................................................................\n  done()\n  return null\n\n############################################################################################################\nif module is require.main then do =>\n  test @\n  # test @[ \"(IDL) reject bogus formulas\" ]\n\n\n\n"
  ]
}