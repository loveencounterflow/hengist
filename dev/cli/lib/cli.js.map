{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/cli.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'DEV-CLI/CLI'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\n{ assign\n  jr }                    = CND\nINTERTEXT                 = require 'intertext'\n{ rpr }                   = INTERTEXT.export()\ndefer                     = setImmediate\nafter                     = ( time_s, f ) -> setTimeout f, time_s * 1000\ntypes                     = require './types'\n{ isa\n  validate\n  cast\n  defaults\n  type_of }               = types\n#...........................................................................................................\n\n\n#-----------------------------------------------------------------------------------------------------------\nasync_command = -> new Promise ( resolve ) =>\n  # defer => resolve()\n  whisper \"^445^ waiting for async task...\"\n  after 0.5, =>\n    urge \"^445^ async task complete\"\n    resolve()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@cli = -> new Promise ( done ) =>\n  pkg         = require '../package.json'\n  app         = require 'commander'\n  has_command = false\n  #.........................................................................................................\n  app\n    .name     pkg.name\n    .version  pkg.version\n  #.........................................................................................................\n  app\n    .command 'helo <name>'\n    .description \"say helo\"\n    .action ( name, d ) =>\n      has_command = true\n      info \"^5576^ Helo #{rpr name}\"\n      done()\n  #.........................................................................................................\n  app\n    .command 'benchmarks [project]'\n    .description \"run benchmarks\"\n    .action ( project, d ) =>\n      has_command = true\n      info \"^556^ running benchmarks for project #{rpr project}\"\n      done()\n  # #.........................................................................................................\n  # app\n  #   .command 'source [source_path]'\n  #   .description \"set or get location of source fonts\"\n  #   .action ( source_path, d ) =>\n  #     has_command = true\n  #     source_path = PATH.resolve source_path if source_path?\n  #     await FONTMIRROR.CFG.set_or_get 'source_path', source_path, true\n  #     done()\n  # #.........................................................................................................\n  # app\n  #   .command 'target [target_path]'\n  #   .description \"set or get location where tagged links and outlines are to be stored\"\n  #   .action ( target_path, d ) =>\n  #     has_command = true\n  #     target_path = PATH.resolve target_path if target_path?\n  #     await FONTMIRROR.CFG.set_or_get 'target_path', target_path, true\n  #     done()\n  # #.........................................................................................................\n  # app\n  #   .command 'link-all-sources'\n  #   .description \"rewrite links to fonts in target/all\"\n  #   .option '-d --dry',     \"show what links would be written\"\n  #   .option '-q --quiet',   \"only report totals\"\n  #   .action ( d ) =>\n  #     has_command = true\n  #     me          = @new_tagger d\n  #     await FONTMIRROR.LINKS.link_all_sources me\n  #     done()\n  # #.........................................................................................................\n  # app\n  #   .command 'refresh-tags'\n  #   .description \"rewrite tagged links as described in target/cfg/tags.txt\"\n  #   .option '-d --dry',     \"show what links would be written\"\n  #   .option '-q --quiet',   \"only report totals\"\n  #   .action ( d ) =>\n  #     has_command = true\n  #     me          = FONTMIRROR.CFG.new_tagger d\n  #     debug '^33653^', me; process.exit 1\n  #     await FONTMIRROR.TAGS.refresh me\n  #     done()\n  # #.........................................................................................................\n  # app\n  #   .command 'cache-outlines [tags]'\n  #   .description \"read all outlines from fonts and store them in target/outlines\"\n  #   .option '-f --force', \"force overwrite existing outline files\"\n  #   .action ( d ) =>\n  #     has_command     = true\n  #     force_overwrite = d.force ? false\n  #     info '^33332^', \"cache\", force_overwrite\n  #     # await FONTMIRROR.cache_font_outlines source_path, target_path, force_overwrite\n  #     done()\n  ###\n  #.........................................................................................................\n  app\n    .command 'sync'\n    .action ( d ) =>\n      has_command     = true\n      sync_command()\n      help \"^6531^ ok\"\n      done()\n  ###\n  #.........................................................................................................\n  app\n    .command 'async'\n    .action ( d ) =>\n      has_command     = true\n      await async_command()\n      help \"^6532^ ok\"\n      done()\n  #.........................................................................................................\n  whisper '^730^', rpr process.argv\n  app.parse process.argv\n  unless has_command\n    app.outputHelp ( message ) -> CND.orange message\n  # debug '^33376^', ( k for k of app).sort().join ', '\n  return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @cli()\n  # await async_command()\n  # help \"^fontmirror/cli@43892^ terminating.\"\n\n\n\n"
  ]
}