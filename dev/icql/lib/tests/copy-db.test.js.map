{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/tests/copy-db.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL/TESTS/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\nxrpr2                     = ( x ) -> inspect x, { colors: yes, breakLength: 20, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nPATH                      = require 'path'\nH                         = require './helpers'\nchance                    = new ( require 'chance' )()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_reuse memory DB\" ] = ( T, done ) ->\n  ICQL              = require '../../../../apps/icql'\n  settings          = H.get_icql_settings true\n  settings.echo     = true\n  db = null\n  doit = ->\n    db                = ICQL.bind settings\n    schema            = 'd2'\n    schema_x          = db.$.as_identifier schema\n    db.$.attach ':memory:', schema\n    db.$.execute \"create table #{schema_x}.x ( id integer primary key );\"\n    db.$.execute \"insert into #{schema_x}.x values ( 123 );\"\n    # db.$.close()\n  #.........................................................................................................\n  doit()\n  doit()\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_mirror DB to memory\" ] = ( T, done ) ->\n  ICQL              = require '../../../../apps/icql'\n  settings          = H.get_icql_settings true\n  debug '^78445^', settings\n  # H.try_to_remove_file settings.db_path\n  # return done()\n  settings.echo     = true\n  db                = ICQL.bind settings\n  from_schema       = 'main'\n  to_schema         = 'd2'\n  pool              = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()[] äöü壽'\n  length            = 10\n  get_name          = -> chance.string { pool, length, }\n  names             = ( [ get_name(), get_name(), ] for _ in [ 1 .. 10 ] )\n  #.........................................................................................................\n  db.create_tables_with_foreign_key()\n  db.populate_tables_with_foreign_key()\n  db.$.execute \"create view main.x as select * from t2 order by key desc;\"\n  ### NOTE following line tests whether inline comments are filtered out ###\n  db.$.execute \"create /* foo */ table main.[K1] ( id integer primary key, fk_k2 integer references [k2] ( id ) );\"\n  db.$.execute \"create table main.[k2] ( id integer primary key, fk_k1 integer references [K1] ( id ) );\"\n  db.$.pragma \"foreign_keys = off;\"\n  for id in [ 1 .. 9 ]\n    db.$.execute \"insert into main.[K1] values ( #{id}, #{id} );\"\n    db.$.execute \"insert into main.[k2] values ( #{id}, #{id} );\"\n  db.$.pragma \"foreign_keys = on;\"\n  #.........................................................................................................\n  for [ table_name, field_name, ] in names\n    table_name_x = db.$.as_identifier table_name\n    field_name_x = db.$.as_identifier field_name\n    db.$.execute \"create table #{table_name_x} ( #{field_name_x} text );\"\n    for n in [ 1 .. 3 ]\n      db.$.execute \"insert into #{table_name_x} values ( ? );\", get_name()\n  #.........................................................................................................\n  db.$.attach ':memory:', to_schema\n  db.$.copy_schema from_schema, to_schema\n  #.........................................................................................................\n  df1 = db.$.all_rows db.$.query \"select * from #{db.$.as_identifier from_schema}.t1 order by key;\"\n  df2 = db.$.all_rows db.$.query \"select * from #{db.$.as_identifier from_schema}.t2 order by id;\"\n  dt1 = db.$.all_rows db.$.query \"select * from #{db.$.as_identifier to_schema}.t1 order by key;\"\n  dt2 = db.$.all_rows db.$.query \"select * from #{db.$.as_identifier to_schema}.t2 order by id;\"\n  T.eq df1, dt1\n  T.eq df2, dt2\n  # rows              = db.$.all_rows db.select_from_tables_with_foreign_key()\n  # debug '^3485^', rows\n  # T.eq db.$.get_toposort(), []\n  # db.$.clear()\n  # T.eq db.$.get_toposort(), []\n  # db.drop_tables_with_foreign_key()\n  done() if done?\n\n\n\n############################################################################################################\nunless module.parent?\n  # test @\n  # test @[ \"_mirror DB to memory\" ]\n  test @[ \"_reuse memory DB\" ]\n  # @[ \"_mirror DB to memory\" ]()\n\n"
  ]
}