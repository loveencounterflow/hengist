{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/tests/copy-db.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL/TESTS/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\nxrpr2                     = ( x ) -> inspect x, { colors: yes, breakLength: 20, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nPATH                      = require 'path'\nH                         = require './helpers'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_mirror DB to memory\" ] = ( T, done ) ->\n  ICQL              = require '../../../../apps/icql'\n  settings          = H.get_icql_settings true\n  settings.echo     = true\n  db                = ICQL.bind settings\n  from_schema       = 'main'\n  to_schema         = 'd2'\n  db.create_tables_with_foreign_key()\n  db.populate_tables_with_foreign_key()\n  db.$.attach ':memory:', to_schema\n  db.$.copy_schema from_schema, to_schema\n  df1 = db.$.all_rows db.$.query \"select * from #{db.$.as_identifier from_schema}.t1 order by key;\"\n  df2 = db.$.all_rows db.$.query \"select * from #{db.$.as_identifier from_schema}.t2 order by id;\"\n  dt1 = db.$.all_rows db.$.query \"select * from #{db.$.as_identifier to_schema}.t1 order by key;\"\n  dt2 = db.$.all_rows db.$.query \"select * from #{db.$.as_identifier to_schema}.t2 order by id;\"\n  T.eq df1, dt1\n  T.eq df2, dt2\n  # rows              = db.$.all_rows db.select_from_tables_with_foreign_key()\n  # debug '^3485^', rows\n  # T.eq db.$.get_toposort(), []\n  # db.$.clear()\n  # T.eq db.$.get_toposort(), []\n  # db.drop_tables_with_foreign_key()\n  done() if done?\n\n\n\n############################################################################################################\nunless module.parent?\n  # test @\n  test @[ \"_mirror DB to memory\" ]\n  # @[ \"_mirror DB to memory\" ]()\n\n\n"
  ]
}