{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/tests/copy-db.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL/TESTS/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../../apps/guy-test'\njr                        = JSON.stringify\n{ inspect, }              = require 'util'\n#...........................................................................................................\nPATH                      = require 'path'\nFSP                       = require 'fs/promises'\nH                         = require './helpers'\nchance                    = new ( require 'chance' )()\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  validate\n  validate_list_of }      = types.export()\n\n#-----------------------------------------------------------------------------------------------------------\nis_new = ( x ) ->\n  R = not is_new.cache.has x\n  is_new.cache.set x, true\n  return R\nis_new.cache = new Map()\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_cfg = ->\n  R =\n    # word_count: 10_000\n    word_count: 10\n    db:\n      templates:\n        small:  H.resolve_path 'assets/icql/small-datamill.db'\n        big:    H.resolve_path 'assets/icql/Chinook_Sqlite_AutoIncrementPKs.db'\n      target:\n        small:  H.resolve_path 'data/icql/icql-copy-db-{ref}-{size}.db'\n        big:    H.resolve_path 'data/icql/icql-copy-db-{ref}-{size}.db'\n      work:\n        mem:    ':memory:'\n        fle:    'data/icql/copy-schemas-work-{ref}-{size}.db'\n      temp:\n        small:  H.resolve_path 'data/icql/icql-copy-db-{ref}-{size}-temp.db'\n        big:    H.resolve_path 'data/icql/icql-copy-db-{ref}-{size}-temp.db'\n    pragma_sets:\n      #.....................................................................................................\n      ### thx to https://forum.qt.io/topic/8879/solved-saving-and-restoring-an-in-memory-sqlite-database/2 ###\n      fle: [\n        'page_size = 4096'\n        'cache_size = 16384'\n        'temp_store = MEMORY'\n        'journal_mode = WAL'\n        'locking_mode = EXCLUSIVE'\n        'synchronous = OFF' ]\n      #.....................................................................................................\n      mem: []\n      bare: []\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"reuse memory DB\" ] = ( T, done ) ->\n  ICQL              = require '../../../../apps/icql'\n  settings          = H.get_icql_settings true\n  settings.echo     = true\n  db = null\n  doit = ->\n    db                = ICQL.bind settings\n    schema            = 'd2'\n    schema_x          = db.$.as_identifier schema\n    db.$.attach ':memory:', schema\n    db.$.execute \"create table #{schema_x}.x ( id integer primary key );\"\n    db.$.execute \"insert into #{schema_x}.x values ( 123 );\"\n    # db.$.close()\n  #.........................................................................................................\n  doit()\n  doit()\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"mirror DB to memory\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQL              = require '../../../../apps/icql'\n  settings          = H.get_icql_settings true\n  debug '^78445^', settings\n  # H.try_to_remove_file settings.db_path\n  # return done()\n  settings.echo     = true\n  db                = ICQL.bind settings\n  from_schema       = 'main'\n  to_schema         = 'd2'\n  pool              = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()[] äöü壽'\n  length            = 10\n  get_name          = -> chance.string { pool, length, }\n  names             = ( [ get_name(), get_name(), ] for _ in [ 1 .. 10 ] )\n  #.........................................................................................................\n  db.create_tables_with_foreign_key()\n  db.populate_tables_with_foreign_key()\n  db.$.execute \"create view main.x as select * from t2 order by key desc;\"\n  ### NOTE following line tests whether inline comments are filtered out ###\n  db.$.execute \"create /* foo */ table main.[K1] ( id integer primary key, fk_k2 integer references [k2] ( id ) );\"\n  db.$.execute \"create table main.[k2] ( id integer primary key, fk_k1 integer references [K1] ( id ) );\"\n  db.$.pragma \"foreign_keys = off;\"\n  for id in [ 1 .. 9 ]\n    db.$.execute \"insert into main.[K1] values ( #{id}, #{id} );\"\n    db.$.execute \"insert into main.[k2] values ( #{id}, #{id} );\"\n  db.$.pragma \"foreign_keys = on;\"\n  #.........................................................................................................\n  for [ table_name, field_name, ] in names\n    table_name_x = db.$.as_identifier table_name\n    field_name_x = db.$.as_identifier field_name\n    db.$.execute \"create table #{table_name_x} ( #{field_name_x} text );\"\n    for n in [ 1 .. 3 ]\n      db.$.execute \"insert into #{table_name_x} values ( ? );\", get_name()\n  #.........................................................................................................\n  db.$.attach ':memory:', to_schema\n  db.$.copy_schema from_schema, to_schema\n  #.........................................................................................................\n  df1 = db.$.all_rows db.$.query \"select * from #{db.$.as_identifier from_schema}.t1 order by key;\"\n  df2 = db.$.all_rows db.$.query \"select * from #{db.$.as_identifier from_schema}.t2 order by id;\"\n  dt1 = db.$.all_rows db.$.query \"select * from #{db.$.as_identifier to_schema}.t1 order by key;\"\n  dt2 = db.$.all_rows db.$.query \"select * from #{db.$.as_identifier to_schema}.t2 order by id;\"\n  T.eq df1, dt1\n  T.eq df2, dt2\n  # rows              = db.$.all_rows db.select_from_tables_with_foreign_key()\n  # debug '^3485^', rows\n  # T.eq db.$.get_toposort(), []\n  # db.$.clear()\n  # T.eq db.$.get_toposort(), []\n  # db.drop_tables_with_foreign_key()\n  # db.$.query \"xxx\"\n  # throw new Error '^intentional-error@348374^'\n  done() if done?\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"use API to do CRUD in memory\" ] = ( T, done ) ->\n  T.halt_on_error() if T?\n  #.........................................................................................................\n  word_count        = 10\n  probe             = ( H.get_data { word_count, } ).texts\n  matcher           = [ probe..., ].sort()\n  #.........................................................................................................\n  ICQL              = require '../../../../apps/icql'\n  icql_cfg          = H.get_icql_settings true\n  # H.try_to_remove_file icql_cfg.db_path\n  # return done()\n  icql_cfg.echo     = true\n  test_cfg          = get_cfg()\n  db                = ICQL.bind icql_cfg\n  test_cfg.mode     = 'mem'\n  # test_cfg.size     = 'big'\n  test_cfg.size     = 'small'\n  test_cfg.ref      = 'crud-in-mem'\n  test_cfg.pragmas  = 'fle'\n  #.........................................................................................................\n  pragmas           = test_cfg.pragma_sets[ test_cfg.pragmas ]\n  validate_list_of.nonempty_text pragmas\n  #.........................................................................................................\n  validate.nonempty_text test_cfg.ref\n  db_work_path      = H.interpolate test_cfg.db.work[      test_cfg.mode ], test_cfg\n  db_template_path  = H.interpolate test_cfg.db.templates[ test_cfg.size ], test_cfg\n  db_target_path    = H.interpolate test_cfg.db.target[    test_cfg.size ], test_cfg\n  db_temp_path      = H.interpolate test_cfg.db.temp[      test_cfg.size ], test_cfg\n  #.........................................................................................................\n  validate.nonempty_text db_template_path\n  validate.nonempty_text db_target_path\n  validate.nonempty_text db_temp_path\n  #.........................................................................................................\n  # if gcfg.verbose\n  help \"^44433^ template  DB:\", db_template_path\n  help \"^44433^ work      DB:\", db_work_path\n  help \"^44433^ target    DB:\", db_target_path\n  help \"^44433^ temp      DB:\", db_temp_path\n  H.try_to_remove_file db_target_path\n  H.try_to_remove_file db_temp_path\n  H.try_to_remove_file db_work_path unless db_work_path is ':memory:'\n  await FSP.copyFile db_template_path, db_target_path\n  #.........................................................................................................\n  fle_schema        = 'main'\n  work_schema       = 'x'\n  work_schema_x     = db.$.as_identifier work_schema\n  db.$.attach db_work_path, work_schema\n  db.$.copy_schema fle_schema, work_schema\n  #.........................................................................................................\n  db.$.execute \"\"\"drop table if exists #{work_schema_x}.test;\"\"\"\n  db.$.execute \"\"\"\n    create table #{work_schema_x}.test(\n      id    integer primary key,\n      nr    integer not null,\n      text  text );\"\"\"\n  insert  = db.$.prepare \"\"\"insert into #{work_schema_x}.test ( nr, text ) values ( ?, ? );\"\"\"\n  nr      = 0\n  for text in probe\n    nr++\n    insert.run [ nr, text, ]\n  retrieve  = db.$.prepare \"\"\"select * from #{work_schema_x}.test order by text;\"\"\"\n  result    = ( row.text for row from retrieve.iterate() )\n  T.eq result, matcher if T?\n  #.........................................................................................................\n  done() if done?\n\n\n\n############################################################################################################\nunless module.parent?\n  # test @\n  # test @[ \"reuse memory DB\" ]\n  # test @[ \"mirror DB to memory\" ]\n  # test @[ \"use API to do CRUD in memory\" ]\n  @[ \"use API to do CRUD in memory\" ]()\n  # @[ \"mirror DB to memory\" ]()\n\n"
  ]
}