{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/tests/copy-db.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL/TESTS/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\nxrpr2                     = ( x ) -> inspect x, { colors: yes, breakLength: 20, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nPATH                      = require 'path'\nH                         = require './helpers'\n\n#-----------------------------------------------------------------------------------------------------------\nprovide_copy_methods = ->\n\n  #-----------------------------------------------------------------------------------------------------------\n  ### TAINT must escape path, schema ###\n  @attach = ( me, path, schema ) ->\n    debug '^334445^', \"attach #{@as_sql path} as [#{schema}];\"\n    me.$.db.exec \"attach '#{path}' as [#{schema}];\"\n\n  #-----------------------------------------------------------------------------------------------------------\n  @copy_to_memory = ( me, schema ) ->\n    # debug '^3334^', ( k for k of me )\n    # debug '^3334^', ( k for k of me.$.db )\n    debug '^3334^', ( k for k of me.$ )\n    debug '^3334^', me.$.db.attach\n    @attach me, ':memory:', schema\n    urge '^64656^', me.$.get_toposort()\n    # for table in\n    me.$.db.exec \"create table #{schema}.a ( n integer );\"\n    urge '^64656^', \"get_toposort 'main'\", me.$.get_toposort 'main'\n    urge '^64656^', \"get_toposort schema\", me.$.get_toposort schema\n    urge '^64656^', me.$.all_rows me.$.catalog()\n    help '^64656^', me.$.all_rows me.$.list_objects 'main'\n    help '^64656^', me.$.all_rows me.$.list_objects schema\n    urge '^64656^', me.$.all_rows me.$.list_schemas()\n    info '^67888^', me.$.all_rows me.$.query \"select * from #{schema}.a;\"\n    info '^67888^', me.$.all_rows me.$.query \"select * from #{schema}.sqlite_schema;\"\n    # me.$.db.\n    return null\n\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_mirror DB to memory\" ] = ( T, done ) ->\n  ICQL              = require '../../../../apps/icql'\n  settings          = H.get_icql_settings true\n  db                = ICQL.bind settings\n  #################################\n  provide_copy_methods.apply db.$\n  db.$.copy_to_memory db, 'd2'\n  #################################\n  db.create_tables_with_foreign_key()\n  db.populate_tables_with_foreign_key()\n  rows              = db.$.all_rows db.select_from_tables_with_foreign_key()\n  debug '^3485^', rows\n  # T.eq db.$.get_toposort(), []\n  db.$.clear()\n  # T.eq db.$.get_toposort(), []\n  # db.drop_tables_with_foreign_key()\n  done() if done?\n\n\n\n############################################################################################################\nunless module.parent?\n  # test @\n  # test @[ \"_mirror DB to memory\" ]\n  @[ \"_mirror DB to memory\" ]()\n\n\n"
  ]
}