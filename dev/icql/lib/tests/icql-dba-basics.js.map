{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/tests/icql-dba-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../../apps/guy-test'\nPATH                      = require 'path'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: as_sql\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA           = require '../../../../apps/icql/dba'\n  dba               = new ICQLDBA.Dba()\n  probes_and_matchers = [\n    [true,'1',]\n    [false,'0',]\n    [42,'42',]\n    ['text',\"'text'\",]\n    [\"text with 'quotes'\",\"'text with ''quotes'''\",]\n    [[1,2,3],\"'[1,2,3]'\",]\n    [[],\"'[]'\",]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      resolve dba.as_sql probe\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: interpolate\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA           = require '../../../../apps/icql/dba'\n  dba               = new ICQLDBA.Dba()\n  probes_and_matchers = [\n    [[\"foo, $bar, baz\",{bar:42,}],\"foo, 42, baz\"]\n    [[\"select * from t where d = $d;\",{bar:42,}],null,\"unable to express 'undefined' as SQL literal\"]\n    [[\"select * from t where d = $d;\",{d:true,}],\"select * from t where d = 1;\"]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ sql, Q, ] = probe\n      resolve dba.interpolate sql, Q\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: toposort is removed\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA           = require '../../../../apps/icql/dba'\n  dba               = new ICQLDBA.Dba()\n  T.eq dba.get_toposort, undefined\n  ### removed b/c stops working when tables refer to each other cyclical fashion:\n  dba.execute \"create table main.k1 ( id integer primary key, fk_k2 integer references k2 ( id ) );\"\n  dba.execute \"create table main.k2 ( id integer primary key, fk_k1 integer references k1 ( id ) );\"\n  debug '^568^', dba.get_toposort()\n  # => \"Error: detected cycle involving node 'K1'\"\n  ###\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: clear()\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  ICQLDBA           = require '../../../../apps/icql/dba'\n  dba               = new ICQLDBA.Dba()\n  #.........................................................................................................\n  # Create tables, indexes:\n  dba.execute \"create table main.k1 ( id integer primary key, fk_k2 integer unique references k2 ( id ) );\"\n  dba.execute \"create table main.k2 ( id integer primary key, fk_k1 integer unique references k1 ( id ) );\"\n  #.........................................................................................................\n  for d in dba.list_objects()\n    info \"^557-300^\", { type: d.type, name: d.name, }\n  #.........................................................................................................\n  # Insert rows:\n  T.eq dba.get_foreign_key_state(), true\n  dba.set_foreign_key_state off\n  T.eq dba.get_foreign_key_state(), false\n  for id in [ 1 .. 9 ]\n    dba.execute \"insert into main.k1 values ( #{id}, #{id} );\"\n    dba.execute \"insert into main.k2 values ( #{id}, #{id} );\"\n  dba.set_foreign_key_state on\n  T.eq dba.get_foreign_key_state(), true\n  #.........................................................................................................\n  T.eq ( d.name for d in dba.list_objects() ), [ 'sqlite_autoindex_k1_1', 'sqlite_autoindex_k2_1', 'k1', 'k2' ]\n  T.eq ( dba.all_rows dba.query \"select * from k1 join k2 on ( k1.fk_k2 = k2.id );\" ), [\n    { id: 1, fk_k2: 1, fk_k1: 1 },\n    { id: 2, fk_k2: 2, fk_k1: 2 },\n    { id: 3, fk_k2: 3, fk_k1: 3 },\n    { id: 4, fk_k2: 4, fk_k1: 4 },\n    { id: 5, fk_k2: 5, fk_k1: 5 },\n    { id: 6, fk_k2: 6, fk_k1: 6 },\n    { id: 7, fk_k2: 7, fk_k1: 7 },\n    { id: 8, fk_k2: 8, fk_k1: 8 },\n    { id: 9, fk_k2: 9, fk_k1: 9 } ]\n  #.........................................................................................................\n  dba.clear()\n  T.eq ( d.name for d in dba.list_objects() ), []\n  #.........................................................................................................\n  done()\n\n\n\n############################################################################################################\nunless module.parent?\n  # test @\n  # test @[ \"DBA: as_sql\" ]\n  # test @[ \"DBA: interpolate\" ]\n  test @[ \"DBA: clear()\" ]\n  # test @[ \"toposort with schema\" ]\n  # @[ \"toposort with schema\" ]()\n\n\n"
  ]
}