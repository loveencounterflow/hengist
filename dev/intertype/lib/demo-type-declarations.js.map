{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-type-declarations.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA;IAAA;;EAEA,KAAA,GAAc,IAAI,CAAE,OAAA,CAAQ,yBAAR,CAAF,CAAqC,CAAC,SAA1C,CAAA;;EACd,CAAA,CAAE,GAAF,EACE,OADF,CAAA,GACc,KADd;;EAEA,GAAA,GAAc,OAAO,CAAC;;EAEtB,OAAA,CAAQ,aAAR,EAAuB;IAAA,IAAA,EAAM;MAC3B,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAqB,CAArB;MAAT,CAD2B;MAE3B,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,KAAL,CAAqB,CAAC,CAAC,KAAvB;MAAT,CAF2B;MAG3B,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,QAAQ,CAAC,IAAd,CAAqB,CAAC,CAAC,IAAvB;MAAT,CAH2B;;EAAN,CAAvB;;EAMA,GAAA,CAAI,OAAJ,EAAa,GAAG,CAAC,WAAJ,CAAgB,IAAhB,CAAb;;EACA,GAAA,CAAI,OAAJ,EAAa,GAAG,CAAC,WAAJ,CAAgB,EAAhB,CAAb;;EACA,GAAA,CAAI,OAAJ,EAAa,GAAG,CAAC,WAAJ,CAAgB;IAAE,KAAA,EAAO,EAAT;IAAa,IAAA,EAAM;EAAnB,CAAhB,CAAb,EAfA;;;;EAoBA,KAAK,CAAC,OAAO,CAAC,MAAd,CAAqB,MAArB,EApBA;;EAqBA,KAAK,CAAC,OAAO,CAAC,OAAd,CAAsB,QAAA,CAAE,CAAF,CAAA;kBAAS,GAAK,EAAL,KAAU;EAAnB,CAAtB,EArBA;;;EAuBA,KAAK,CAAC,OAAO,CAAC,OAAd,CACE;IAAA,MAAA,EAAU,QAAV;IACA,GAAA,EAAK;MACH,SADG;MAEH;QAAE,IAAA,EAAM,gBAAR;QAA0B,IAAA,EAAM,CAAE,QAAA,CAAE,CAAF,CAAA;wBAAS;MAAK,EAAL,KAAU;QAAnB,CAAF;MAAhC,CAFG;;EADL,CADF,EAvBA;;;EA6BA,KAAK,CAAC,OAAO,CAAC,uBAAd,CAAsC;IAAA,GAAA,EAAK;MAAE,eAAF;MAAmB;QAAE,SAAA,EAAW;MAAb,CAAnB;;EAAL,CAAtC;;EACA,KAAK,CAAC,OAAO,CAAC,eAAd,CAAsC;IAAA,GAAA,EAAK,CAAE,eAAF,EAAmB,iCAAnB;EAAL,CAAtC,EA9BA;;;EAgCA,KAAK,CAAC,OAAO,CAAC,wBAAd,CACE;IAAA,GAAA,EAAK;MACH,IAAA,EAAc,QADX;MAEH,OAAA,EAAc,eAFX;MAGH,OAAA,EAAc;QAAA,GAAA,EAAM,CAAE,YAAA,UAAF,EAAc,oBAAA,kBAAd;MAAN,CAHX;MAIH,SAAA,EAAc;IAJX;EAAL,CADF;AAhCA",
  "sourcesContent": [
    "\n'use strict'\n\ntypes       = new ( require '../../../apps/intertype' ).Intertype()\n{ isa\n  declare } = types\nlog         = console.log\n\ndeclare 'xy_quantity', test: [\n  ( x ) -> @isa.object          x\n  ( x ) -> @isa.float           x.value\n  ( x ) -> @isa.nonempty.text   x.unit\n  ]\n\nlog '^1-1^', isa.xy_quantity null\nlog '^1-1^', isa.xy_quantity 42\nlog '^1-1^', isa.xy_quantity { value: 42, unit: 'm', }\n\n\n### Simplest forms: either define by a single string (creating a type alias) or a single function (whose\nprocessed source code will serve as a name to identify the rule): ###\ntypes.declare.string 'text'                 # now `string` is another word for `text`\ntypes.declare.div3int ( x ) -> x %% 3 is 0\n#...........................................................................................................\ntypes.declare.div3int\n  groups:   'number'\n  all: [\n    'integer'\n    { name: 'divisible by 3', test: ( ( x ) -> x %% 3 is 0 ), } ]\n#...........................................................................................................\ntypes.declare.Type_cfg_groups_element all: [ 'nonempty.text', { not_match: /[\\s,]/, }, ]\ntypes.declare.Type_cfg_groups         any: [ 'nonempty.text', 'list_of.Type_cfg_groups_element', ]\n#...........................................................................................................\ntypes.declare.Type_cfg_constructor_cfg\n  all: {\n    self:         'object'\n    '.name':      'nonempty.text'\n    '.test':      any:  { 'function', 'list_of.function', }\n    '.groups':    'Type_cfg_groups'\n    }\n\n"
  ]
}