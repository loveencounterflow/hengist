{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/_ng.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\n# njs_util                  = require 'util'\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'INTERTYPE/tests/basics'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\npraise                    = CND.get_logger 'praise',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n# { intersection_of }       = require '../../../apps/intertype/lib/helpers'\nH                         = require '../../../lib/helpers'\nGUY                       = require 'guy'\nequals                    = require '../../../apps/intertype/deps/jkroso-equals'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"isa\" ] = ( T, done ) ->\n  { Intertype }   = require '../../../apps/intertype'\n  types           = new Intertype()\n  jto = ( x ) => ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase().replace /\\s+/g, ''\n  types.declare 'null',                             test: ( x ) -> x is null\n  types.declare 'array',    isa_collection: true,   test: ( x ) -> Array.isArray x\n  types.declare 'list',     isa_collection: true,   test: ( x ) -> @isa 'array', x\n  types.declare 'integer',  isa_numeric: true,      test: ( x ) -> Number.isInteger x\n  types.declare 'text',     isa_collection: true,   test: ( x ) -> ( jto x ) is 'string'\n  #.........................................................................................................\n  T?.eq ( types.isa 'null',                         null          ), true\n  T?.eq ( types.isa 'optional', 'null',             null          ), true\n  T?.eq ( types.isa 'optional', 'null',             undefined     ), true\n  T?.eq ( types.isa 'null',                         undefined     ), false\n  T?.eq ( types.isa 'array',                        []            ), true\n  T?.eq ( types.isa 'list',                         []            ), true\n  T?.eq ( types.isa 'empty', 'array',               []            ), true\n  T?.eq ( types.isa 'optional', 'empty', 'array',   []            ), true\n  T?.eq ( types.isa 'optional', 'empty', 'array',   null          ), true\n  T?.eq ( types.isa 'optional', 'empty', 'array',   42            ), false\n  T?.eq ( types.isa 'optional', 'empty', 'array',   [ 42, ]       ), false\n  #.........................................................................................................\n  T?.throws /'optional' cannot be a hedge in declarations/, => types.declare 'optional', 'integer', test: ->\n  # for type, declaration of types._types\n  #   debug '^34234^', type, declaration\n  # H.tabulate 'types._types', ( -> yield type for _, type of types._types )()\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  { Intertype }   = require '../../../apps/intertype'\n  types           = new Intertype()\n  jto = ( x ) => ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase().replace /\\s+/g, ''\n  # types.declare 'null',               groups: 'other',            test: ( x ) -> x is null\n  types.declare 'text',               groups: 'collection',            test: ( x ) -> typeof x is 'string'\n  # debug '^5345-1^', types\n  debug '^5345-2^', types.groups\n  # debug '^5345-3^', types.isa\n  debug '^5345-4^', types.isa.collection\n  debug '^5345-5^', types.type_of 'x'\n  debug '^5345-6^', types.isa.collection 'x'\n  debug '^5345-7^', ( k for k of types.isa )\n  # types.declare 'list',       isa_collection: true,  test: ( x ) -> ( jto x ) is 'list'\n  # ### @isa 'empty', 'isa_collection', x ###\n  # # types.declare 'empty_array',                  test: ( x ) -> ( @isa 'array', x ) and x.length is 0\n  # types.declare 'list',                           test: ( x ) -> @isa 'array', x\n  # types.declare 'integer',      isa_numeric: true,    test: ( x ) -> @isa 'array', x\n  debug '^5345-8^', k for k of types.isa\n  debug '^5345-9^', types._isa\n  debug '^5345-10^', types._isa 'text', ''\n  debug '^5345-11^', types._isa 'text', 'xxx'\n  debug '^5345-12^', types._isa 'text', 42\n  # debug '^5345-13^', types._isa 'empty'\n  debug '^5345-14^', types._isa 'empty', 'text', ''\n  debug '^5345-15^', types._isa 'empty', 'text', 'xxx'\n  debug '^5345-16^', types._isa 'empty', 'text', 42\n  # debug '^5345-17^', types.isa.empty.text 'x'\n  # debug '^5345-18^', types.isa.nonempty.text ''\n  # debug '^5345-19^', types.isa.nonempty.text 'x'\n  # debug '^5345-20^', types.isa.empty.text 42\n  # debug '^5345-21^', types.isa.list_of.text 42\n  # debug '^5345-22^', types.isa.list_of.text []\n  # debug '^5345-23^', types.isa.list_of.text [ 'a', 'b', ]\n  # debug '^5345-24^', types.isa.nonempty.list_of.text [ 'a', 'b', ]\n  # debug '^5345-25^', types.isa.nonempty.list_of.nonempty.text [ 'a', 'b', ]\n  # debug '^5345-26^', types.isa.empty.list_of.text 42\n  # debug '^5345-27^', types.isa.empty.list_of.text []\n  # debug '^5345-28^', types.isa.optional.empty.text 42\n  # debug '^5345-29^', types.isa.optional.empty.text null\n  # debug '^5345-30^', types.isa.optional\n  # debug '^5345-31^', types.isa.optional.empty\n  # debug '^5345-32^', types.isa.optional.empty.list_of\n  # debug '^5345-33^', types.isa.optional.empty.list_of.text\n  process.exit 111\n  #.........................................................................................................\n  info '^509-1', types.isa 'null',                         null\n  info '^509-2', types.isa 'optional', 'null',             null\n  info '^509-3', types.isa 'optional', 'null',             undefined\n  info '^509-4', types.isa 'null',                         undefined\n  info '^509-5', types.isa 'array',                        []\n  info '^509-6', types.isa 'list',                         []\n  info '^509-7', types.isa 'empty', 'array',               []\n  info '^509-8', types.isa 'optional', 'empty', 'array',   []\n  #.........................................................................................................\n  try ( types.declare 'optional', 'integer', test: -> ) catch error\n    warn '^509-9^', CND.reverse error.message\n  H.tabulate 'types._types', ( -> yield type for _, type of types._types )()\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"intertype hedgepaths\" ] = ( T, done ) ->\n  { Intertype\n    Type_cfg }  = require '../../../apps/intertype'\n  #.........................................................................................................\n  do =>\n    types       = new Intertype()\n    hedgepaths  = types._hedges.hedgepaths\n    groupname   = 'other'\n    H.tabulate \"hedgepaths for group #{rpr groupname}\", [ [ null, null, null, null, null, null, null ], hedgepaths[ groupname ]..., ]\n    T?.eq hedgepaths[ groupname ], [ [], [ 'list_of' ], [ 'list_of', 'optional' ], [ 'set_of' ], [ 'set_of', 'optional' ], [ 'empty', 'list_of' ], [ 'empty', 'list_of', 'optional' ], [ 'empty', 'set_of' ], [ 'empty', 'set_of', 'optional' ], [ 'nonempty', 'list_of' ], [ 'nonempty', 'list_of', 'optional' ], [ 'nonempty', 'set_of' ], [ 'nonempty', 'set_of', 'optional' ], [ 'optional' ], [ 'optional', 'list_of' ], [ 'optional', 'list_of', 'optional' ], [ 'optional', 'set_of' ], [ 'optional', 'set_of', 'optional' ], [ 'optional', 'empty', 'list_of' ], [ 'optional', 'empty', 'list_of', 'optional' ], [ 'optional', 'empty', 'set_of' ], [ 'optional', 'empty', 'set_of', 'optional' ], [ 'optional', 'nonempty', 'list_of' ], [ 'optional', 'nonempty', 'list_of', 'optional' ], [ 'optional', 'nonempty', 'set_of' ], [ 'optional', 'nonempty', 'set_of', 'optional' ] ]\n    #.......................................................................................................\n    typenames =\n      other:        'boolean'\n      collections:  'set'\n      numbers:      'integer'\n    for groupname, hedgepaths of types._hedges.hedgepaths\n      info groupname\n      typename = typenames[ groupname ]\n      for hedgepath in hedgepaths\n        urge [ hedgepath..., typename ].join '.'\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"intertype all hedgepaths\" ] = ( T, done ) ->\n  # T.halt_on_error true\n  { Intertype\n    Type_cfg }  = require '../../../apps/intertype'\n  types         = new Intertype()\n  { declare\n    isa       } = types\n  declare 'boolean',  groups: 'other',        test: ( x ) ->  ( x is true ) or ( x is false )\n  # declare 'integer',  groups: 'numbers',      test: ( x ) -> Number.isInteger x\n  # declare 'set',      groups: 'collections',  test: ( x ) -> x instanceof Set\n  #.........................................................................................................\n  probes_and_matchers = [\n    ### other ###\n    [ 'isa.boolean',                                   (   true                    ), true, ]\n    [ 'isa.list_of.boolean',                           (   [ true, ]               ), true, ]\n    [ 'isa.list_of.boolean',                           (   []                      ), true, ]\n    [ 'isa.list_of.optional.boolean',                  ( []                        ), true, ]\n    [ 'isa.list_of.optional.boolean',                  ( [ null, ]                 ), true, ]\n    [ 'isa.list_of.optional.boolean',                  ( [ null, true, ]           ), true, ]\n    [ 'isa.set_of.boolean',                            ( new Set []                ), true, ]\n    [ 'isa.set_of.boolean',                            ( new Set [ false, ]        ), true, ]\n    [ 'isa.set_of.optional.boolean',                   ( new Set []                ), true, ]\n    [ 'isa.set_of.optional.boolean',                   ( new Set [ null, ]         ), true, ]\n    [ 'isa.set_of.optional.boolean',                   ( new Set [ null, false, ]  ), true, ]\n    [ 'isa.empty.list_of.boolean',                     ( []                        ), true, ]\n    [ 'isa.empty.list_of.optional.boolean',            ( []                        ), true, ]\n    [ 'isa.empty.set_of.boolean',                      ( new Set()                 ), true, ]\n    [ 'isa.empty.set_of.optional.boolean',             ( new Set()                 ), true, ]\n    [ 'isa.nonempty.list_of.boolean',                  ( [ true, ]                 ), true, ]\n    [ 'isa.nonempty.list_of.optional.boolean',         ( [ true, null, ]           ), true, ]\n    [ 'isa.nonempty.set_of.boolean',                   ( new Set [ true, false, ]  ), true, ]\n    [ 'isa.nonempty.set_of.optional.boolean',          ( new Set [ null, null, ]   ), true, ]\n    [ 'isa.optional.boolean',                          ( true                      ), true, ]\n    [ 'isa.optional.boolean',                          ( false                     ), true, ]\n    [ 'isa.optional.boolean',                          ( null                      ), true, ]\n    [ 'isa.optional.list_of.boolean',                  ( null                      ), true, ]\n    [ 'isa.optional.list_of.boolean',                  ( []                        ), true, ]\n    [ 'isa.optional.list_of.boolean',                  ( [ true, ]                 ), true, ]\n    [ 'isa.optional.list_of.optional.boolean',         ( null                      ), true, ]\n    [ 'isa.optional.list_of.optional.boolean',         ( []                        ), true, ]\n    [ 'isa.optional.list_of.optional.boolean',         ( [ true, ]                 ), true, ]\n    [ 'isa.optional.list_of.optional.boolean',         ( [ true, null, ]           ), true, ]\n    [ 'isa.optional.set_of.boolean',                   ( null                      ), true, ]\n    [ 'isa.optional.set_of.boolean',                   ( new Set()                 ), true, ]\n    [ 'isa.optional.set_of.boolean',                   ( new Set [ true, ]         ), true, ]\n    [ 'isa.optional.set_of.optional.boolean',          ( null                      ), true, ]\n    [ 'isa.optional.set_of.optional.boolean',          ( new Set()                 ), true, ]\n    [ 'isa.optional.set_of.optional.boolean',          ( new Set [ true, ]         ), true, ]\n    [ 'isa.optional.set_of.optional.boolean',          ( new Set [ null, ]         ), true, ]\n    [ 'isa.optional.empty.list_of.boolean',            ( null                      ), true, ]\n    [ 'isa.optional.empty.list_of.boolean',            ( []                        ), true, ]\n    [ 'isa.optional.empty.list_of.optional.boolean',   ( null                      ), true, ]\n    [ 'isa.optional.empty.list_of.optional.boolean',   ( []                        ), true, ]\n    [ 'isa.optional.empty.set_of.boolean',             ( null                      ), true, ]\n    [ 'isa.optional.empty.set_of.boolean',             ( new Set()                 ), true, ]\n    [ 'isa.optional.empty.set_of.optional.boolean',    ( null                      ), true, ]\n    [ 'isa.optional.empty.set_of.optional.boolean',    ( new Set()                 ), true, ]\n    [ 'isa.optional.nonempty.list_of.boolean',         ( null                      ), true, ]\n    [ 'isa.optional.nonempty.list_of.boolean',         ( [ true, ]                 ), true, ]\n    [ 'isa.optional.nonempty.list_of.boolean',         ( [ false, ]                ), true, ]\n    [ 'isa.optional.nonempty.list_of.optional.boolean',( null                      ), true, ]\n    [ 'isa.optional.nonempty.list_of.optional.boolean',( [ true, ]                 ), true, ]\n    [ 'isa.optional.nonempty.list_of.optional.boolean',( [ null, null, ]           ), true, ]\n    [ 'isa.optional.nonempty.set_of.boolean',          ( null                      ), true, ]\n    [ 'isa.optional.nonempty.set_of.boolean',          ( new Set [ true, ]         ), true, ]\n    [ 'isa.optional.nonempty.set_of.optional.boolean', ( null                      ), true, ]\n    [ 'isa.optional.nonempty.set_of.optional.boolean', ( new Set [ true, ]         ), true, ]\n    [ 'isa.optional.nonempty.set_of.optional.boolean', ( new Set [ false, null, ]  ), true, ]\n    ]\n  #.........................................................................................................\n  for [ probe, value, matcher, error, ] in probes_and_matchers\n    await T.perform [ probe, value, ], matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ _, hedges..., ] = probe.split '.'\n      callable          = isa\n      callable          = do =>\n        for term in hedges\n          callable = callable[ term ]\n        return callable\n      result = callable value\n      # log rpr [ probe, result, ]\n      # resolve result\n      resolve result\n      return null\n  # #.........................................................................................................\n  # ### collections ###\n  # for [ v, matcher, ] in [ [ ( new Set() ), true, ], [ ( new Map() ), false, ], ]\n  #   T?.eq ( isa.set                                                   v ), matcher\n  #   T?.eq ( isa.empty.set                                             v ), matcher\n  #   T?.eq ( isa.list_of.set                                           v ), matcher\n  #   T?.eq ( isa.list_of.empty.set                                     v ), matcher\n  #   T?.eq ( isa.list_of.nonempty.set                                  v ), matcher\n  #   T?.eq ( isa.list_of.optional.set                                  v ), matcher\n  #   T?.eq ( isa.list_of.optional.empty.set                            v ), matcher\n  #   T?.eq ( isa.list_of.optional.nonempty.set                         v ), matcher\n  #   T?.eq ( isa.nonempty.set                                          v ), matcher\n  #   T?.eq ( isa.set_of.set                                            v ), matcher\n  #   T?.eq ( isa.set_of.empty.set                                      v ), matcher\n  #   T?.eq ( isa.set_of.nonempty.set                                   v ), matcher\n  #   T?.eq ( isa.set_of.optional.set                                   v ), matcher\n  #   T?.eq ( isa.set_of.optional.empty.set                             v ), matcher\n  #   T?.eq ( isa.set_of.optional.nonempty.set                          v ), matcher\n  #   T?.eq ( isa.empty.list_of.set                                     v ), matcher\n  #   T?.eq ( isa.empty.list_of.empty.set                               v ), matcher\n  #   T?.eq ( isa.empty.list_of.nonempty.set                            v ), matcher\n  #   T?.eq ( isa.empty.list_of.optional.set                            v ), matcher\n  #   T?.eq ( isa.empty.list_of.optional.empty.set                      v ), matcher\n  #   T?.eq ( isa.empty.list_of.optional.nonempty.set                   v ), matcher\n  #   T?.eq ( isa.empty.set_of.set                                      v ), matcher\n  #   T?.eq ( isa.empty.set_of.empty.set                                v ), matcher\n  #   T?.eq ( isa.empty.set_of.nonempty.set                             v ), matcher\n  #   T?.eq ( isa.empty.set_of.optional.set                             v ), matcher\n  #   T?.eq ( isa.empty.set_of.optional.empty.set                       v ), matcher\n  #   T?.eq ( isa.empty.set_of.optional.nonempty.set                    v ), matcher\n  #   T?.eq ( isa.nonempty.list_of.set                                  v ), matcher\n  #   T?.eq ( isa.nonempty.list_of.empty.set                            v ), matcher\n  #   T?.eq ( isa.nonempty.list_of.nonempty.set                         v ), matcher\n  #   T?.eq ( isa.nonempty.list_of.optional.set                         v ), matcher\n  #   T?.eq ( isa.nonempty.list_of.optional.empty.set                   v ), matcher\n  #   T?.eq ( isa.nonempty.list_of.optional.nonempty.set                v ), matcher\n  #   T?.eq ( isa.nonempty.set_of.set                                   v ), matcher\n  #   T?.eq ( isa.nonempty.set_of.empty.set                             v ), matcher\n  #   T?.eq ( isa.nonempty.set_of.nonempty.set                          v ), matcher\n  #   T?.eq ( isa.nonempty.set_of.optional.set                          v ), matcher\n  #   T?.eq ( isa.nonempty.set_of.optional.empty.set                    v ), matcher\n  #   T?.eq ( isa.nonempty.set_of.optional.nonempty.set                 v ), matcher\n  #   T?.eq ( isa.optional.set                                          v ), matcher\n  #   T?.eq ( isa.optional.empty.set                                    v ), matcher\n  #   T?.eq ( isa.optional.list_of.set                                  v ), matcher\n  #   T?.eq ( isa.optional.list_of.empty.set                            v ), matcher\n  #   T?.eq ( isa.optional.list_of.nonempty.set                         v ), matcher\n  #   T?.eq ( isa.optional.list_of.optional.set                         v ), matcher\n  #   T?.eq ( isa.optional.list_of.optional.empty.set                   v ), matcher\n  #   T?.eq ( isa.optional.list_of.optional.nonempty.set                v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set                                 v ), matcher\n  #   T?.eq ( isa.optional.set_of.set                                   v ), matcher\n  #   T?.eq ( isa.optional.set_of.empty.set                             v ), matcher\n  #   T?.eq ( isa.optional.set_of.nonempty.set                          v ), matcher\n  #   T?.eq ( isa.optional.set_of.optional.set                          v ), matcher\n  #   T?.eq ( isa.optional.set_of.optional.empty.set                    v ), matcher\n  #   T?.eq ( isa.optional.set_of.optional.nonempty.set                 v ), matcher\n  #   T?.eq ( isa.optional.empty.list_of.set                            v ), matcher\n  #   T?.eq ( isa.optional.empty.list_of.empty.set                      v ), matcher\n  #   T?.eq ( isa.optional.empty.list_of.nonempty.set                   v ), matcher\n  #   T?.eq ( isa.optional.empty.list_of.optional.set                   v ), matcher\n  #   T?.eq ( isa.optional.empty.list_of.optional.empty.set             v ), matcher\n  #   T?.eq ( isa.optional.empty.list_of.optional.nonempty.set          v ), matcher\n  #   T?.eq ( isa.optional.empty.set_of.set                             v ), matcher\n  #   T?.eq ( isa.optional.empty.set_of.empty.set                       v ), matcher\n  #   T?.eq ( isa.optional.empty.set_of.nonempty.set                    v ), matcher\n  #   T?.eq ( isa.optional.empty.set_of.optional.set                    v ), matcher\n  #   T?.eq ( isa.optional.empty.set_of.optional.empty.set              v ), matcher\n  #   T?.eq ( isa.optional.empty.set_of.optional.nonempty.set           v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list_of.set                         v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list_of.empty.set                   v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list_of.nonempty.set                v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list_of.optional.set                v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list_of.optional.empty.set          v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list_of.optional.nonempty.set       v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set_of.set                          v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set_of.empty.set                    v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set_of.nonempty.set                 v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set_of.optional.set                 v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set_of.optional.empty.set           v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set_of.optional.nonempty.set        v ), matcher\n  # #.........................................................................................................\n  # ### numbers ###\n  # for [ v, matcher, ] in [ [ 42, true, ], [ 42.1, false, ], ]\n  #   T?.eq ( isa.integer                                               v ), matcher\n  #   T?.eq ( isa.list_of.integer                                       v ), matcher\n  #   T?.eq ( isa.list_of.negative0.integer                             v ), matcher\n  #   T?.eq ( isa.list_of.negative1.integer                             v ), matcher\n  #   T?.eq ( isa.list_of.positive0.integer                             v ), matcher\n  #   T?.eq ( isa.list_of.positive1.integer                             v ), matcher\n  #   T?.eq ( isa.list_of.optional.integer                              v ), matcher\n  #   T?.eq ( isa.list_of.optional.negative0.integer                    v ), matcher\n  #   T?.eq ( isa.list_of.optional.negative1.integer                    v ), matcher\n  #   T?.eq ( isa.list_of.optional.positive0.integer                    v ), matcher\n  #   T?.eq ( isa.list_of.optional.positive1.integer                    v ), matcher\n  #   T?.eq ( isa.negative0.integer                                     v ), matcher\n  #   T?.eq ( isa.negative1.integer                                     v ), matcher\n  #   T?.eq ( isa.positive0.integer                                     v ), matcher\n  #   T?.eq ( isa.positive1.integer                                     v ), matcher\n  #   T?.eq ( isa.set_of.integer                                        v ), matcher\n  #   T?.eq ( isa.set_of.negative0.integer                              v ), matcher\n  #   T?.eq ( isa.set_of.negative1.integer                              v ), matcher\n  #   T?.eq ( isa.set_of.positive0.integer                              v ), matcher\n  #   T?.eq ( isa.set_of.positive1.integer                              v ), matcher\n  #   T?.eq ( isa.set_of.optional.integer                               v ), matcher\n  #   T?.eq ( isa.set_of.optional.negative0.integer                     v ), matcher\n  #   T?.eq ( isa.set_of.optional.negative1.integer                     v ), matcher\n  #   T?.eq ( isa.set_of.optional.positive0.integer                     v ), matcher\n  #   T?.eq ( isa.set_of.optional.positive1.integer                     v ), matcher\n  #   T?.eq ( isa.empty.list_of.integer                                 v ), matcher\n  #   T?.eq ( isa.empty.list_of.negative0.integer                       v ), matcher\n  #   T?.eq ( isa.empty.list_of.negative1.integer                       v ), matcher\n  #   T?.eq ( isa.empty.list_of.positive0.integer                       v ), matcher\n  #   T?.eq ( isa.empty.list_of.positive1.integer                       v ), matcher\n  #   T?.eq ( isa.empty.list_of.optional.integer                        v ), matcher\n  #   T?.eq ( isa.empty.list_of.optional.negative0.integer              v ), matcher\n  #   T?.eq ( isa.empty.list_of.optional.negative1.integer              v ), matcher\n  #   T?.eq ( isa.empty.list_of.optional.positive0.integer              v ), matcher\n  #   T?.eq ( isa.empty.list_of.optional.positive1.integer              v ), matcher\n  #   T?.eq ( isa.empty.set_of.integer                                  v ), matcher\n  #   T?.eq ( isa.empty.set_of.negative0.integer                        v ), matcher\n  #   T?.eq ( isa.empty.set_of.negative1.integer                        v ), matcher\n  #   T?.eq ( isa.empty.set_of.positive0.integer                        v ), matcher\n  #   T?.eq ( isa.empty.set_of.positive1.integer                        v ), matcher\n  #   T?.eq ( isa.empty.set_of.optional.integer                         v ), matcher\n  #   T?.eq ( isa.empty.set_of.optional.negative0.integer               v ), matcher\n  #   T?.eq ( isa.empty.set_of.optional.negative1.integer               v ), matcher\n  #   T?.eq ( isa.empty.set_of.optional.positive0.integer               v ), matcher\n  #   T?.eq ( isa.empty.set_of.optional.positive1.integer               v ), matcher\n  #   T?.eq ( isa.nonempty.list_of.integer                              v ), matcher\n  #   T?.eq ( isa.nonempty.list_of.negative0.integer                    v ), matcher\n  #   T?.eq ( isa.nonempty.list_of.negative1.integer                    v ), matcher\n  #   T?.eq ( isa.nonempty.list_of.positive0.integer                    v ), matcher\n  #   T?.eq ( isa.nonempty.list_of.positive1.integer                    v ), matcher\n  #   T?.eq ( isa.nonempty.list_of.optional.integer                     v ), matcher\n  #   T?.eq ( isa.nonempty.list_of.optional.negative0.integer           v ), matcher\n  #   T?.eq ( isa.nonempty.list_of.optional.negative1.integer           v ), matcher\n  #   T?.eq ( isa.nonempty.list_of.optional.positive0.integer           v ), matcher\n  #   T?.eq ( isa.nonempty.list_of.optional.positive1.integer           v ), matcher\n  #   T?.eq ( isa.nonempty.set_of.integer                               v ), matcher\n  #   T?.eq ( isa.nonempty.set_of.negative0.integer                     v ), matcher\n  #   T?.eq ( isa.nonempty.set_of.negative1.integer                     v ), matcher\n  #   T?.eq ( isa.nonempty.set_of.positive0.integer                     v ), matcher\n  #   T?.eq ( isa.nonempty.set_of.positive1.integer                     v ), matcher\n  #   T?.eq ( isa.nonempty.set_of.optional.integer                      v ), matcher\n  #   T?.eq ( isa.nonempty.set_of.optional.negative0.integer            v ), matcher\n  #   T?.eq ( isa.nonempty.set_of.optional.negative1.integer            v ), matcher\n  #   T?.eq ( isa.nonempty.set_of.optional.positive0.integer            v ), matcher\n  #   T?.eq ( isa.nonempty.set_of.optional.positive1.integer            v ), matcher\n  #   T?.eq ( isa.optional.integer                                      v ), matcher\n  #   T?.eq ( isa.optional.list_of.integer                              v ), matcher\n  #   T?.eq ( isa.optional.list_of.negative0.integer                    v ), matcher\n  #   T?.eq ( isa.optional.list_of.negative1.integer                    v ), matcher\n  #   T?.eq ( isa.optional.list_of.positive0.integer                    v ), matcher\n  #   T?.eq ( isa.optional.list_of.positive1.integer                    v ), matcher\n  #   T?.eq ( isa.optional.list_of.optional.integer                     v ), matcher\n  #   T?.eq ( isa.optional.list_of.optional.negative0.integer           v ), matcher\n  #   T?.eq ( isa.optional.list_of.optional.negative1.integer           v ), matcher\n  #   T?.eq ( isa.optional.list_of.optional.positive0.integer           v ), matcher\n  #   T?.eq ( isa.optional.list_of.optional.positive1.integer           v ), matcher\n  #   T?.eq ( isa.optional.negative0.integer                            v ), matcher\n  #   T?.eq ( isa.optional.negative1.integer                            v ), matcher\n  #   T?.eq ( isa.optional.positive0.integer                            v ), matcher\n  #   T?.eq ( isa.optional.positive1.integer                            v ), matcher\n  #   T?.eq ( isa.optional.set_of.integer                               v ), matcher\n  #   T?.eq ( isa.optional.set_of.negative0.integer                     v ), matcher\n  #   T?.eq ( isa.optional.set_of.negative1.integer                     v ), matcher\n  #   T?.eq ( isa.optional.set_of.positive0.integer                     v ), matcher\n  #   T?.eq ( isa.optional.set_of.positive1.integer                     v ), matcher\n  #   T?.eq ( isa.optional.set_of.optional.integer                      v ), matcher\n  #   T?.eq ( isa.optional.set_of.optional.negative0.integer            v ), matcher\n  #   T?.eq ( isa.optional.set_of.optional.negative1.integer            v ), matcher\n  #   T?.eq ( isa.optional.set_of.optional.positive0.integer            v ), matcher\n  #   T?.eq ( isa.optional.set_of.optional.positive1.integer            v ), matcher\n  #   T?.eq ( isa.optional.empty.list_of.integer                        v ), matcher\n  #   T?.eq ( isa.optional.empty.list_of.negative0.integer              v ), matcher\n  #   T?.eq ( isa.optional.empty.list_of.negative1.integer              v ), matcher\n  #   T?.eq ( isa.optional.empty.list_of.positive0.integer              v ), matcher\n  #   T?.eq ( isa.optional.empty.list_of.positive1.integer              v ), matcher\n  #   T?.eq ( isa.optional.empty.list_of.optional.integer               v ), matcher\n  #   T?.eq ( isa.optional.empty.list_of.optional.negative0.integer     v ), matcher\n  #   T?.eq ( isa.optional.empty.list_of.optional.negative1.integer     v ), matcher\n  #   T?.eq ( isa.optional.empty.list_of.optional.positive0.integer     v ), matcher\n  #   T?.eq ( isa.optional.empty.list_of.optional.positive1.integer     v ), matcher\n  #   T?.eq ( isa.optional.empty.set_of.integer                         v ), matcher\n  #   T?.eq ( isa.optional.empty.set_of.negative0.integer               v ), matcher\n  #   T?.eq ( isa.optional.empty.set_of.negative1.integer               v ), matcher\n  #   T?.eq ( isa.optional.empty.set_of.positive0.integer               v ), matcher\n  #   T?.eq ( isa.optional.empty.set_of.positive1.integer               v ), matcher\n  #   T?.eq ( isa.optional.empty.set_of.optional.integer                v ), matcher\n  #   T?.eq ( isa.optional.empty.set_of.optional.negative0.integer      v ), matcher\n  #   T?.eq ( isa.optional.empty.set_of.optional.negative1.integer      v ), matcher\n  #   T?.eq ( isa.optional.empty.set_of.optional.positive0.integer      v ), matcher\n  #   T?.eq ( isa.optional.empty.set_of.optional.positive1.integer      v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list_of.integer                     v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list_of.negative0.integer           v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list_of.negative1.integer           v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list_of.positive0.integer           v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list_of.positive1.integer           v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list_of.optional.integer            v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list_of.optional.negative0.integer  v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list_of.optional.negative1.integer  v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list_of.optional.positive0.integer  v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list_of.optional.positive1.integer  v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set_of.integer                      v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set_of.negative0.integer            v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set_of.negative1.integer            v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set_of.positive0.integer            v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set_of.positive1.integer            v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set_of.optional.integer             v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set_of.optional.negative0.integer   v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set_of.optional.negative1.integer   v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set_of.optional.positive0.integer   v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set_of.optional.positive1.integer   v ), matcher\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_test_with_protocol = ->\n  { Intertype\n    Type_cfg }  = require '../../../apps/intertype'\n  types         = new Intertype()\n  #.........................................................................................................\n  types.declare 'integer', isa_numeric: true, test: ( x ) -> urge '^342-1^', rpr x; Number.isInteger x\n  info '^342-2^', types.isa.integer                     42\n  info '^342-2^', types.isa.optional.integer            42\n  info '^342-2^', types.isa.optional.positive0.integer  42\n  info '^342-2^', types.isa.integer                     42.1\n  info '^342-2^', types.isa.optional.integer            42.1\n  info '^342-2^', types.isa.optional.positive0.integer  42.1\n  info '^342-2^', types.isa.integer                     null\n  info '^342-2^', types.isa.optional.integer            null\n  info '^342-2^', types.isa.optional.positive0.integer  null\n  info '^342-2^', types.isa.list_of.integer             null\n  info '^342-2^', types.isa.list_of.integer             []\n  info '^342-2^', types.isa.list_of.integer             [ 1, 2, 3, ]\n  info '^342-2^', types.isa.list_of.integer             [ 1, 2, 3.5, ]\n  info '^342-2^', types.isa.list_of.optional.integer    [ 1, 2, null, ]\n  info '^342-2^', types.isa.list_of.optional.integer    [ 1, 2, 3.5, ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_hedges = ->\n  { Intertype\n    Type_cfg }  = require '../../../apps/intertype'\n  types         = new Intertype()\n  do =>\n    count         = 0\n    type          = 'integer'\n    type_cfg      = new Type_cfg { isa_numeric: true, }\n    urge '^234^', type, type_cfg\n    for hedgepath from types._walk_hedgepaths type_cfg\n      count++\n      info '^2434^', count, ( hedgepath.join ' ' ) + ' ' + type\n  do =>\n    count         = 0\n    type          = 'text'\n    type_cfg      = new Type_cfg { isa_collection: true, }\n    urge '^234^', type, type_cfg\n    for hedgepath from types._walk_hedgepaths type_cfg\n      count++\n      info '^2434^', count, ( hedgepath.join ' ' ) + ' ' + type\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_multipart_hedges = ->\n  hedge =\n    terms:\n      optional_prefixes:  [ 'empty', 'nonempty', ]\n      mandatory_kernels:  [ 'list_of', 'set_of', ]\n      optional_suffixes:  [ 'optional', ]\n    match: { all: true, }\n  #.........................................................................................................\n  chains = []\n  for prefix_idx in [ -1 ... hedge.terms.optional_prefixes.length ]\n    if ( prefix = hedge.terms.optional_prefixes[ prefix_idx ] ? null )?\n      chain = [ prefix ]\n    else\n      chain = []\n    for kernel in hedge.terms.mandatory_kernels\n      chains.push [ chain..., kernel, ]\n  for suffix_idx in [ -1 ... hedge.terms.mandatory_kernels.length ]\n    if ( suffix_idx = hedge.terms.optional_suffixes[ suffix_idx ] )?\n      chains.push\n  #.........................................................................................................\n  debug '^509^', chain for chain in chains\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_combinate = ->\n  combinate = ( require \"combinate\" ).default\n  values =\n    optional:     [ null, 'optional', ]\n    collections:\n      prefix:     [ null, 'empty', 'nonempty', ]\n      kernel:     [ 'list_of', 'set_of', ]\n      suffix:     [ null, 'optional', ]\n    empty: [ null, 'empty', 'nonempty', ]\n  # combine = ( terms ) => ( ( v for _, v of x when v? ) for x in combinate terms )\n  combine = ( terms ) => ( ( v for _, v of x         ) for x in combinate terms )\n    # combinations[ idx ] = ( e for e in x when e? ) for x, idx in combinations\n  compile_hedges = ( hedges ) ->\n    R = { hedges..., }\n    for k, v of R\n      continue if Array.isArray v\n      R[ k ] = combine v\n    return R\n  get_hedgepaths = ( compiled_hedges ) ->\n    R = ( x.flat() for x in combine compiled_hedges )\n    return ( ( v for v in x when v? ) for x in R )\n  compiled_hedges = compile_hedges values\n  combinations    = get_hedgepaths compiled_hedges\n  combinations.unshift [ null, null, null, null, null ]\n  # combinations.sort()\n  H.tabulate 'combinate', combinations\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_combinate_2 = ->\n  { Intertype\n    Type_cfg }  = require '../../../apps/intertype'\n  types         = new Intertype()\n  combinate     = ( require \"combinate\" ).default\n  #.........................................................................................................\n  hedges = GUY.lft.freeze [\n    { terms: [ null, 'optional', ],                                         match: { all: true, }, }\n    { terms: [\n      null,\n      [ [ null, 'empty', 'nonempty', ]\n        [ 'list_of', 'set_of', ]\n        [ null, 'optional', ]\n        ], ],                                                               match: { all: true, }, }\n    { terms: [ null, 'empty', 'nonempty', ],                                match: { isa_collection: true, }, }\n    { terms: [ null, 'positive0', 'positive1', 'negative0', 'negative1', ], match: { isa_numeric: true, }, }\n    ]\n  #.........................................................................................................\n  combine = ( terms ) => ( ( v for _, v of x ) for x in combinate terms )\n  types._compile_hedges = ( hedges, type_cfg ) ->\n    R = []\n    for hedge in hedges\n      continue unless @_match_hedge_and_type_cfg hedge, type_cfg\n      # termses = [ hedge.terms..., ]\n      target = []\n      R.push target\n      for termgroup in hedge.terms\n        if Array.isArray termgroup\n          target.splice target.length - 1, 0, ( @get_hedgepaths termgroup )...\n        else\n          target.push termgroup\n    return R\n  types.get_hedgepaths = ( compiled_hedges ) ->\n    R = ( x.flat() for x in combine compiled_hedges )\n    return R\n  types._reduce_hedgepaths = ( combinations ) -> ( ( e for e in hp when e? ) for hp in combinations )\n  #.........................................................................................................\n  combinations    = types.get_hedgepaths hedges[ 1 ].terms[ 1 ]\n  # combinations    = types.get_hedgepaths types._compile_hedges hedges, {}\n  # combinations    = types.get_hedgepaths types._compile_hedges hedges, { isa_collection: true, }\n  combinations    = types.get_hedgepaths types._compile_hedges hedges, { isa_numeric: true, }\n  info '^540^', combinations\n  combinations.sort()\n  combinations    = types._reduce_hedgepaths combinations\n  combinations.unshift [ null, null, null, null, null, null, null ]\n  H.tabulate 'combinate', combinations\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_intertype_hedge_combinator = ->\n#-----------------------------------------------------------------------------------------------------------\n  { Intertype\n    Type_cfg }  = require '../../../apps/intertype'\n  #.........................................................................................................\n  do =>\n    types   = new Intertype()\n    hedges  = types._hedges.constructor.hedges\n    for groupname in [ 'collections', 'numbers', 'other', ]\n      compiled_hedges = types._hedges._compile_hedges groupname, hedges\n      hedgepaths      = types._hedges.get_hedgepaths compiled_hedges\n      hedgepaths.sort()\n      hedgepaths      = types._hedges._reduce_hedgepaths hedgepaths\n      H.tabulate \"hedgepaths for group #{rpr groupname}\", [ [ null, null, null, null, null, null, null ], hedgepaths..., ]\n      info '^540^', hedgepaths\n      if groupname is 'other'\n        info CND.truth equals hedgepaths, [ [], [ 'list_of' ], [ 'list_of', 'optional' ], [ 'set_of' ], [ 'set_of', 'optional' ], [ 'empty', 'list_of' ], [ 'empty', 'list_of', 'optional' ], [ 'empty', 'set_of' ], [ 'empty', 'set_of', 'optional' ], [ 'nonempty', 'list_of' ], [ 'nonempty', 'list_of', 'optional' ], [ 'nonempty', 'set_of' ], [ 'nonempty', 'set_of', 'optional' ], [ 'optional' ], [ 'optional', 'list_of' ], [ 'optional', 'list_of', 'optional' ], [ 'optional', 'set_of' ], [ 'optional', 'set_of', 'optional' ], [ 'optional', 'empty', 'list_of' ], [ 'optional', 'empty', 'list_of', 'optional' ], [ 'optional', 'empty', 'set_of' ], [ 'optional', 'empty', 'set_of', 'optional' ], [ 'optional', 'nonempty', 'list_of' ], [ 'optional', 'nonempty', 'list_of', 'optional' ], [ 'optional', 'nonempty', 'set_of' ], [ 'optional', 'nonempty', 'set_of', 'optional' ] ]\n  #.........................................................................................................\n  do =>\n    types       = new Intertype()\n    hedgepaths  = types._hedges.hedgepaths\n    debug '^453^', hedgepaths\n    groupname   = 'other'\n    H.tabulate \"hedgepaths for group #{rpr groupname}\", [ [ null, null, null, null, null, null, null ], hedgepaths[ groupname ]..., ]\n    info CND.truth equals hedgepaths[ groupname ], [ [], [ 'list_of' ], [ 'list_of', 'optional' ], [ 'set_of' ], [ 'set_of', 'optional' ], [ 'empty', 'list_of' ], [ 'empty', 'list_of', 'optional' ], [ 'empty', 'set_of' ], [ 'empty', 'set_of', 'optional' ], [ 'nonempty', 'list_of' ], [ 'nonempty', 'list_of', 'optional' ], [ 'nonempty', 'set_of' ], [ 'nonempty', 'set_of', 'optional' ], [ 'optional' ], [ 'optional', 'list_of' ], [ 'optional', 'list_of', 'optional' ], [ 'optional', 'set_of' ], [ 'optional', 'set_of', 'optional' ], [ 'optional', 'empty', 'list_of' ], [ 'optional', 'empty', 'list_of', 'optional' ], [ 'optional', 'empty', 'set_of' ], [ 'optional', 'empty', 'set_of', 'optional' ], [ 'optional', 'nonempty', 'list_of' ], [ 'optional', 'nonempty', 'list_of', 'optional' ], [ 'optional', 'nonempty', 'set_of' ], [ 'optional', 'nonempty', 'set_of', 'optional' ] ]\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\nlist_all_builtin_type_testers = ->\n  CAT                       = require 'multimix/lib/cataloguing'\n  pattern                   = /^is/\n  excludes                  = new Set [ 'isPrototypeOf', ]\n  for top_level_name in CAT.all_keys_of global\n    info top_level_name if ( top_level_name.match pattern )? and not excludes.has top_level_name\n    # whisper '^3424^', top_level_name\n    for second_level_name in CAT.all_keys_of global[ top_level_name ]\n      info \"#{top_level_name}.#{second_level_name}\" if ( second_level_name.match pattern )? and not excludes.has second_level_name\n  return null\n\n\n\n############################################################################################################\nunless module.parent?\n  demo()\n  # list_all_builtin_type_testers()\n  # demo_hedges()\n  # demo_test_with_protocol()\n  # demo_multipart_hedges()\n  # demo_combinate_2()\n  # demo_intertype_hedge_combinator()\n  # test @\n  # @[ \"intertype hedgepaths\" ]()\n  # @[ \"intertype all hedgepaths\" ]()\n  # test @[ \"intertype all hedgepaths\" ]\n\n\n\n\n\n\n\n"
  ]
}