{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/_ng.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\n# njs_util                  = require 'util'\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'INTERTYPE/tests/basics'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\npraise                    = CND.get_logger 'praise',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n# { intersection_of }       = require '../../../apps/intertype/lib/helpers'\nH                         = require '../../../lib/helpers'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"isa\" ] = ( T, done ) ->\n  { Intertype }   = require '../../../apps/intertype'\n  types           = new Intertype()\n  jto = ( x ) => ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase().replace /\\s+/g, ''\n  types.declare 'null',                           test: ( x ) -> x is null\n  types.declare 'array',       isa_collection: true,  test: ( x ) -> ( jto x ) is 'array'\n  ### @isa 'empty', 'isa_collection', x ###\n  # types.declare 'empty_array',                  test: ( x ) -> ( @isa 'array', x ) and x.length is 0\n  types.declare 'list',                           test: ( x ) -> @isa 'array', x\n  types.declare 'integer',      isa_numeric: true,    test: ( x ) -> @isa 'array', x\n  #.........................................................................................................\n  T?.eq ( types.isa 'null',                         null          ), true\n  T?.eq ( types.isa 'optional', 'null',             null          ), true\n  T?.eq ( types.isa 'optional', 'null',             undefined     ), true\n  T?.eq ( types.isa 'null',                         undefined     ), false\n  T?.eq ( types.isa 'array',                        []            ), true\n  T?.eq ( types.isa 'list',                         []            ), true\n  T?.eq ( types.isa 'empty', 'array',               []            ), true\n  T?.eq ( types.isa 'optional', 'empty', 'array',   []            ), true\n  #.........................................................................................................\n  T?.throws /'optional' cannot be a hedge in declarations/, => types.declare 'optional', 'integer', test: ->\n  # for type, declaration of types._types\n  #   debug '^34234^', type, declaration\n  H.tabulate 'types._types', ( -> yield type for _, type of types._types )()\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  { Intertype }   = require '../../../apps/intertype'\n  types           = new Intertype()\n  jto = ( x ) => ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase().replace /\\s+/g, ''\n  types.declare 'null',                           test: ( x ) -> x is null\n  types.declare 'array',       isa_collection: true,  test: ( x ) -> ( jto x ) is 'array'\n  ### @isa 'empty', 'isa_collection', x ###\n  # types.declare 'empty_array',                  test: ( x ) -> ( @isa 'array', x ) and x.length is 0\n  types.declare 'list',                           test: ( x ) -> @isa 'array', x\n  types.declare 'integer',      isa_numeric: true,    test: ( x ) -> @isa 'array', x\n  #.........................................................................................................\n  info '^509-1', types.isa 'null',                         null\n  info '^509-2', types.isa 'optional', 'null',             null\n  info '^509-3', types.isa 'optional', 'null',             undefined\n  info '^509-4', types.isa 'null',                         undefined\n  info '^509-5', types.isa 'array',                        []\n  info '^509-6', types.isa 'list',                         []\n  info '^509-7', types.isa 'empty', 'array',               []\n  info '^509-8', types.isa 'optional', 'empty', 'array',   []\n  #.........................................................................................................\n  try ( types.declare 'optional', 'integer', test: -> ) catch error\n    warn '^509-9^', CND.reverse error.message\n  H.tabulate 'types._types', ( -> yield type for _, type of types._types )()\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_hedges = ->\n  { Intertype\n    Type_cfg }  = require '../../../apps/intertype'\n  type          = 'integer'\n  type_cfg      = new Type_cfg { isa_numeric: true, }\n  debug '^234^', type_cfg\n  lists         = ( [ null, hedge.x..., ] for hedge in Intertype.hedges )\n  hedgepaths    = generate_permutations type_cfg, lists, 0\n  for hedgepath in hedgepaths\n    debug '^2434^', hedgepath # + ' ' + 'text'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ngenerate_permutations = ( type_cfg, lists, list_idx, current_path = [], R = [] ) ->\n  ### thx to https://itecnote.com/tecnote/java-generate-all-combinations-from-multiple-lists/ ###\n  if list_idx is lists.length\n    R.push current_path\n    return R\n  list = lists[ list_idx ]\n  for term, term_idx in list\n    next_path = [ current_path..., ]\n    next_path.push term if term?\n    generate_permutations type_cfg, lists, list_idx + 1, next_path, R\n  return R\n\n\n\n\n\n\n\n############################################################################################################\nunless module.parent?\n  demo()\n  demo_hedges()\n  # test @\n\n\n\n\n\n\n\n\n"
  ]
}