{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/_ng.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\n# njs_util                  = require 'util'\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'INTERTYPE/tests/basics'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\npraise                    = CND.get_logger 'praise',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n# { intersection_of }       = require '../../../apps/intertype/lib/helpers'\nH                         = require '../../../lib/helpers'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"isa\" ] = ( T, done ) ->\n  { Intertype }   = require '../../../apps/intertype'\n  types           = new Intertype()\n  jto = ( x ) => ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase().replace /\\s+/g, ''\n  types.declare 'null',                           test: ( x ) -> x is null\n  types.declare 'array',       collection: true,  test: ( x ) -> ( jto x ) is 'array'\n  ### @isa 'empty', 'collection', x ###\n  # types.declare 'empty_array',                  test: ( x ) -> ( @isa 'array', x ) and x.length is 0\n  types.declare 'list',                           test: ( x ) -> @isa 'array', x\n  types.declare 'integer',      numeric: true,    test: ( x ) -> @isa 'array', x\n  #.........................................................................................................\n  T?.eq ( types.isa 'null',                         null          ), true\n  T?.eq ( types.isa 'optional', 'null',             null          ), true\n  T?.eq ( types.isa 'optional', 'null',             undefined     ), true\n  T?.eq ( types.isa 'null',                         undefined     ), false\n  T?.eq ( types.isa 'array',                        []            ), true\n  T?.eq ( types.isa 'list',                         []            ), true\n  T?.eq ( types.isa 'empty', 'array',               []            ), true\n  T?.eq ( types.isa 'optional', 'empty', 'array',   []            ), true\n  #.........................................................................................................\n  T?.throws /'optional' cannot be a hedge in declarations/, => types.declare 'optional', 'integer', test: ->\n  # for type, declaration of types._types\n  #   debug '^34234^', type, declaration\n  H.tabulate 'types._types', ( -> yield type for _, type of types._types )()\n  #.........................................................................................................\n  done()\n  return null\n\n\n\n############################################################################################################\nunless module.parent?\n  test @\n"
  ]
}