{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/_ng.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\n# njs_util                  = require 'util'\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nGUY                       = require '../../../apps/guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTYPE/tests'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\nrvr                       = GUY.trm.reverse\ntruth                     = GUY.trm.truth.bind GUY.trm\n#...........................................................................................................\ntest                      = require 'guy-test'\n# { intersection_of }       = require '../../../apps/intertype/lib/helpers'\nH                         = require '../../../lib/helpers'\nequals                    = GUY.samesame.equals\nS                         = ( parts ) -> new Set eval parts.raw[ 0 ]\n{ to_width }              = require 'to-width'\n_types                    = new ( require 'intertype' ).Intertype()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"isa\" ] = ( T, done ) ->\n  { Intertype }   = require '../../../apps/intertype'\n  types           = new Intertype()\n  # jto = ( x ) => ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase().replace /\\s+/g, ''\n  types.declare 'array', collection: true, isa: ( x ) -> @isa.list x\n  #.........................................................................................................\n  T?.eq ( types._isa 'null',                         null          ), true\n  T?.eq ( types._isa 'optional', 'null',             null          ), true\n  T?.eq ( types._isa 'optional', 'null',             undefined     ), true\n  T?.eq ( types._isa 'null',                         undefined     ), false\n  T?.eq ( types._isa 'array',                        []            ), true\n  T?.eq ( types._isa 'list',                         []            ), true\n  T?.eq ( types._isa 'object',                       {}            ), true\n  T?.eq ( types._isa 'object',                       []            ), false\n  T?.eq ( types._isa 'empty', 'array',               []            ), true\n  T?.eq ( types._isa 'optional', 'empty', 'array',   []            ), true\n  T?.eq ( types._isa 'optional', 'empty', 'array',   null          ), true\n  T?.eq ( types._isa 'optional', 'empty', 'array',   42            ), false\n  T?.eq ( types._isa 'optional', 'empty', 'array',   [ 42, ]       ), false\n  #.........................................................................................................\n  # T?.throws /'optional' cannot be a hedge in declarations/, => types.declare 'optional', 'integer', isa: ->\n  # for type, declaration of types._types\n  #   debug '^34234^', type, declaration\n  # H.tabulate 'types._types', ( -> yield type for _, type of types._types )()\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"forbidden to overwrite declarations\" ] = ( T, done ) ->\n  { Intertype }   = require '../../../apps/intertype'\n  types           = new Intertype()\n  T?.eq ( GUY.props.has types.isa, 'weirdo' ), false\n  types.declare 'weirdo', isa: ( x ) -> x is weirdo\n  # types.declare 'weirdo', isa: ( x ) -> x is weirdo\n  T?.eq ( GUY.props.has types.isa, 'weirdo' ), true\n  debug '^353^', GUY.props.has types.isa, 'weirdo'\n  T?.throws /unable to re-declare 'weirdo'/, => types.declare 'weirdo', isa: ( x ) -> x is weirdo\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  { Intertype }   = require '../../../apps/intertype'\n  types           = new Intertype()\n  jto = ( x ) => ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase().replace /\\s+/g, ''\n  debug '^5345-1^', types\n  debug '^5345-2^', types.isa\n  debug '^5345-3^', types.isa.collection\n  debug '^5345-4^', types.type_of 'x'\n  debug '^5345-5^', types.isa.collection 'x'\n  debug '^5345-6^', ( k for k of types.isa )\n  # types.declare 'list',       isa_collection: true,  isa: ( x ) -> ( jto x ) is 'list'\n  # ### @isa 'empty', 'isa_collection', x ###\n  # # types.declare 'empty_array',                  isa: ( x ) -> ( @isa 'array', x ) and x.length is 0\n  # types.declare 'list',                           isa: ( x ) -> @isa 'array', x\n  # types.declare 'integer',      isa_numeric: true,    isa: ( x ) -> @isa 'array', x\n  debug '^5345-7^', k for k of types.isa\n  # debug '^5345-8^', types._isa 'empty'\n  debug '^5345-9^', types._isa\n  debug '^5345-10^', types._isa 'text', ''\n  debug '^5345-11^', types._isa 'text', 'xxx'\n  debug '^5345-12^', types._isa 'empty', 'text', ''\n  debug '^5345-13^', types.isa.text 'x'\n  debug '^5345-14^', types.isa.nonempty.text 'x'\n  debug '^5345-15^', types._isa 'nonempty', 'text', 'x'\n  debug '^5345-16^', types._isa 'empty', 'set', 'of', 'text', new Set()\n  debug '^5345-17^', types.isa.empty.set.of.text new Set()\n  debug '^5345-18^', types.isa.list.of.text []\n  debug '^5345-19^', types.isa.list.of.text [ 'x', '', ]\n  debug '^5345-20^', types.isa.list.of.nonempty.text [ 'x', ]\n  debug '^5345-21^', types.isa.list.of.empty.text [ '', ]\n  debug '^5345-22^', types.isa.optional.text ''\n  debug '^5345-23^', types.isa.optional.text null\n  debug '^5345-24^', types.isa.optional.list.of.text null\n  debug '^5345-25^', types.isa.optional.list.of.optional.text null\n  debug '^5345-26^', types.isa.optional.list.of.optional.nonempty.text null\n  debug '^5345-27^', types.isa.optional.nonempty.list.of.optional.nonempty.text null\n  info CND.reverse '        '\n  debug '^5345-28^', types._isa 'nonempty', 'text', ''\n  debug '^5345-29^', types._isa 'text', 42\n  debug '^5345-30^', types._isa 'empty', 'text', 'xxx'\n  debug '^5345-31^', types._isa 'empty', 'text', 42\n  debug '^5345-32^', types.isa.empty.text 'x'\n  debug '^5345-33^', types.isa.nonempty.text ''\n  debug '^5345-34^', types.isa.empty.text 42\n  debug '^5345-35^', types.isa.list.of.text 'x'\n  debug '^5345-36^', types.isa.list.of.text [ 'x', 42, ]\n  debug '^5345-37^', types.isa.list.of.nonempty.text [ '', 'x' ]\n  debug '^5345-38^', types.isa.list.of.empty.text [ 'x', '', ]\n  # debug '^5345-39^', types.isa.list.of.text 42\n  # debug '^5345-40^', types.isa.list.of.text []\n  # debug '^5345-41^', types.isa.list.of.text [ 'a', 'b', ]\n  # debug '^5345-42^', types.isa.nonempty.list.of.text [ 'a', 'b', ]\n  # debug '^5345-43^', types.isa.nonempty.list.of.nonempty.text [ 'a', 'b', ]\n  # debug '^5345-44^', types.isa.empty.list.of.text 42\n  # debug '^5345-45^', types.isa.empty.list.of.text []\n  # debug '^5345-46^', types.isa.optional.empty.text 42\n  # debug '^5345-47^', types.isa.optional.empty.text null\n  # debug '^5345-48^', types.isa.optional\n  # debug '^5345-49^', types.isa.optional.empty\n  # debug '^5345-50^', types.isa.optional.empty.list.of\n  # debug '^5345-51^', types.isa.optional.empty.list.of.text\n  process.exit 111\n  #.........................................................................................................\n  info '^509-1', types.isa 'null',                         null\n  info '^509-2', types.isa 'optional', 'null',             null\n  info '^509-3', types.isa 'optional', 'null',             undefined\n  info '^509-4', types.isa 'null',                         undefined\n  info '^509-5', types.isa 'array',                        []\n  info '^509-6', types.isa 'list',                         []\n  info '^509-7', types.isa 'empty', 'array',               []\n  info '^509-8', types.isa 'optional', 'empty', 'array',   []\n  #.........................................................................................................\n  try ( types.declare 'optional', 'integer', isa: -> ) catch error\n    warn '^509-9^', CND.reverse error.message\n  H.tabulate 'types._types', ( -> yield type for _, type of types._types )()\n  #.........................................................................................................\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"intertype hedgepaths\" ] = ( T, done ) ->\n#   { Intertype\n#     Type_cfg }  = require '../../../apps/intertype'\n#   #.........................................................................................................\n#   do =>\n#     types       = new Intertype()\n#     hedgepaths  = types._hedges.hedgepaths\n#     groupname   = 'other'\n#     H.tabulate \"hedgepaths for group #{rpr groupname}\", [ [ null, null, null, null, null, null, null ], hedgepaths[ groupname ]..., ]\n#     T?.eq hedgepaths[ groupname ], [ [], [ 'list', 'of' ], [ 'list', 'of', 'optional' ], [ 'set', 'of' ], [ 'set', 'of', 'optional' ], [ 'empty', 'list', 'of' ], [ 'empty', 'list', 'of', 'optional' ], [ 'empty', 'set', 'of' ], [ 'empty', 'set', 'of', 'optional' ], [ 'nonempty', 'list', 'of' ], [ 'nonempty', 'list', 'of', 'optional' ], [ 'nonempty', 'set', 'of' ], [ 'nonempty', 'set', 'of', 'optional' ], [ 'optional' ], [ 'optional', 'list', 'of' ], [ 'optional', 'list', 'of', 'optional' ], [ 'optional', 'set', 'of' ], [ 'optional', 'set', 'of', 'optional' ], [ 'optional', 'empty', 'list', 'of' ], [ 'optional', 'empty', 'list', 'of', 'optional' ], [ 'optional', 'empty', 'set', 'of' ], [ 'optional', 'empty', 'set', 'of', 'optional' ], [ 'optional', 'nonempty', 'list', 'of' ], [ 'optional', 'nonempty', 'list', 'of', 'optional' ], [ 'optional', 'nonempty', 'set', 'of' ], [ 'optional', 'nonempty', 'set', 'of', 'optional' ] ]\n#     #.......................................................................................................\n#     typenames =\n#       other:        'boolean'\n#       collections:  'set'\n#       numbers:      'integer'\n#     for groupname, hedgepaths of types._hedges.hedgepaths\n#       info groupname\n#       typename = typenames[ groupname ]\n#       for hedgepath in hedgepaths\n#         urge [ hedgepath..., typename ].join '.'\n#   done?()\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"intertype size_of\" ] = ( T, done ) ->\n  { Intertype } = require '../../../apps/intertype'\n  types         = new Intertype()\n  probes_and_matchers = [\n    [ [ [],           ], 0, ]\n    [ [ [ 1, 2, 3, ], ], 3, ]\n    [ [ null,         ], null, 'expected an object with `x.length` or `x.size`, got a null' ]\n    [ [ 42,           ], null, 'expected an object with `x.length` or `x.size`, got a float' ]\n    [ [ 42, null,     ], null, ]\n    [ [ 42, 0,        ], 0, ]\n    [ [ S\"\",          ], 0, ]\n    [ [ S\"'abc𪜁'\",    ], 4, ]\n    [ [ '',           ], 0, ]\n    [ [ '', null,     ], 0, ]\n    [ [ 'helo',       ], 4, ]\n    [ [ 'helo', null, ], 4, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      resolve result = types.size_of probe...\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_all_hedgepaths = ( T, done ) ->\n  # T?.halt_on_error true\n  { Intertype\n    Type_cfg }  = require '../../../apps/intertype'\n  types         = new Intertype()\n  { declare\n    isa       } = types\n  #.........................................................................................................\n  probes_and_matchers = [\n    ### other ###\n    [ 'isa.boolean',                                   (   true                                             ), true, ]\n    [ 'isa.list.of.boolean',                           (   [ true, ]                                        ), true, ]\n    [ 'isa.list.of.boolean',                           (   []                                               ), true, ]\n    [ 'isa.list.of.optional.boolean',                  ( []                                                 ), true, ]\n    [ 'isa.list.of.optional.boolean',                  ( [ null, ]                                          ), true, ]\n    [ 'isa.list.of.optional.boolean',                  ( [ null, true, ]                                    ), true, ]\n    [ 'isa.set.of.boolean',                            ( S\"[]\"                                              ), true, ]\n    [ 'isa.set.of.boolean',                            ( S\"[ false, ]\"                                      ), true, ]\n    [ 'isa.set.of.optional.boolean',                   ( S\"[]\"                                              ), true, ]\n    [ 'isa.set.of.optional.boolean',                   ( S\"[ null, ]\"                                       ), true, ]\n    [ 'isa.set.of.optional.boolean',                   ( S\"[ null, false, ]\"                                ), true, ]\n    [ 'isa.empty.list.of.boolean',                     ( []                                                 ), true, ]\n    [ 'isa.empty.list.of.optional.boolean',            ( []                                                 ), true, ]\n    [ 'isa.empty.set.of.boolean',                      ( S\"\"                                                ), true, ]\n    [ 'isa.empty.set.of.optional.boolean',             ( S\"\"                                                ), true, ]\n    [ 'isa.nonempty.list.of.boolean',                  ( [ true, ]                                          ), true, ]\n    [ 'isa.nonempty.list.of.optional.boolean',         ( [ true, null, ]                                    ), true, ]\n    [ 'isa.nonempty.set.of.boolean',                   ( S\"[ true, false, ]\"                                ), true, ]\n    [ 'isa.nonempty.set.of.optional.boolean',          ( S\"[ null, null, ]\"                                 ), true, ]\n    [ 'isa.optional.boolean',                          ( true                                               ), true, ]\n    [ 'isa.optional.boolean',                          ( false                                              ), true, ]\n    [ 'isa.optional.boolean',                          ( null                                               ), true, ]\n    [ 'isa.optional.list.of.boolean',                  ( null                                               ), true, ]\n    [ 'isa.optional.list.of.boolean',                  ( []                                                 ), true, ]\n    [ 'isa.optional.list.of.boolean',                  ( [ true, ]                                          ), true, ]\n    [ 'isa.optional.list.of.optional.boolean',         ( null                                               ), true, ]\n    [ 'isa.optional.list.of.optional.boolean',         ( []                                                 ), true, ]\n    [ 'isa.optional.list.of.optional.boolean',         ( [ true, ]                                          ), true, ]\n    [ 'isa.optional.list.of.optional.boolean',         ( [ true, null, ]                                    ), true, ]\n    [ 'isa.optional.set.of.boolean',                   ( null                                               ), true, ]\n    [ 'isa.optional.set.of.boolean',                   ( S\"\"                                                ), true, ]\n    [ 'isa.optional.set.of.boolean',                   ( S\"[ true, ]\"                                       ), true, ]\n    [ 'isa.optional.set.of.optional.boolean',          ( null                                               ), true, ]\n    [ 'isa.optional.set.of.optional.boolean',          ( S\"\"                                                ), true, ]\n    [ 'isa.optional.set.of.optional.boolean',          ( S\"[ true, ]\"                                       ), true, ]\n    [ 'isa.optional.set.of.optional.boolean',          ( S\"[ null, ]\"                                       ), true, ]\n    [ 'isa.optional.empty.list.of.boolean',            ( null                                               ), true, ]\n    [ 'isa.optional.empty.list.of.boolean',            ( []                                                 ), true, ]\n    [ 'isa.optional.empty.list.of.optional.boolean',   ( null                                               ), true, ]\n    [ 'isa.optional.empty.list.of.optional.boolean',   ( []                                                 ), true, ]\n    [ 'isa.optional.empty.set.of.boolean',             ( null                                               ), true, ]\n    [ 'isa.optional.empty.set.of.boolean',             ( S\"\"                                                ), true, ]\n    [ 'isa.optional.empty.set.of.optional.boolean',    ( null                                               ), true, ]\n    [ 'isa.optional.empty.set.of.optional.boolean',    ( S\"\"                                                ), true, ]\n    [ 'isa.optional.nonempty.list.of.boolean',         ( null                                               ), true, ]\n    [ 'isa.optional.nonempty.list.of.boolean',         ( [ true, ]                                          ), true, ]\n    [ 'isa.optional.nonempty.list.of.boolean',         ( [ false, ]                                         ), true, ]\n    [ 'isa.optional.nonempty.list.of.optional.boolean',( null                                               ), true, ]\n    [ 'isa.optional.nonempty.list.of.optional.boolean',( [ true, ]                                          ), true, ]\n    [ 'isa.optional.nonempty.list.of.optional.boolean',( [ null, null, ]                                    ), true, ]\n    [ 'isa.optional.nonempty.set.of.boolean',          ( null                                               ), true, ]\n    [ 'isa.optional.nonempty.set.of.boolean',          ( S\"[ true, ]\"                                       ), true, ]\n    [ 'isa.optional.nonempty.set.of.optional.boolean', ( null                                               ), true, ]\n    [ 'isa.optional.nonempty.set.of.optional.boolean', ( S\"[ true, ]\"                                       ), true, ]\n    [ 'isa.optional.nonempty.set.of.optional.boolean', ( S\"[ false, null, ]\"                                ), true, ]\n  #.........................................................................................................\n  ### collections ###\n    [ 'isa.set',                                              ( S\"\"                                         ), true, ]\n    [ 'isa.empty.set',                                        ( S\"\"                                         ), true, ]\n    [ 'isa.list.of.set',                                      ( []                                          ), true, ]\n    [ 'isa.list.of.set',                                      ( [ S\"\", ]                                    ), true, ]\n    [ 'isa.list.of.empty.set',                                ( [ S\"\", ]                                    ), true, ]\n    [ 'isa.list.of.nonempty.set',                             ( [ S\"[42]\", S\"'x'\", ]                        ), true, ]\n    [ 'isa.list.of.optional.set',                             ( []                                          ), true, ]\n    [ 'isa.list.of.optional.set',                             ( [ S\"\" ]                                     ), true, ]\n    [ 'isa.list.of.optional.empty.set',                       ( []                                          ), true, ]\n    [ 'isa.list.of.optional.nonempty.set',                    ( []                                          ), true, ]\n    [ 'isa.list.of.optional.nonempty.set',                    ( [ null, S\"'x'\", ]                           ), true, ]\n    [ 'isa.list.of.optional.nonempty.set',                    ( [ S\"'x'\", S\"'abc𪜁'\", ]                      ), true, ]\n    [ 'isa.nonempty.set',                                     ( S\"'abc𪜁'\"                                   ), true, ]\n    [ 'isa.set.of.set',                                       ( S\"[new Set()]\"                              ), true, ]\n    [ 'isa.set.of.empty.set',                                 ( S\"[]\"                                       ), true, ]\n    [ 'isa.set.of.empty.set',                                 ( S\"[new Set()]\"                              ), true, ]\n    [ 'isa.set.of.nonempty.set',                              ( S\"[]\"                                       ), true, ]\n    [ 'isa.set.of.nonempty.set',                              ( S\"[new Set('a')]\"                           ), true, ]\n    [ 'isa.set.of.optional.set',                              ( S\"\"                                         ), true, ]\n    [ 'isa.set.of.optional.set',                              ( S\"null\"                                     ), true, ]\n    [ 'isa.set.of.optional.set',                              ( S\"[null,new Set()]\"                         ), true, ]\n    [ 'isa.set.of.optional.empty.set',                        ( S\"\"                                         ), true, ]\n    [ 'isa.set.of.optional.empty.set',                        ( S\"null\"                                     ), true, ]\n    [ 'isa.set.of.optional.empty.set',                        ( S\"[new Set()]\"                              ), true, ]\n    [ 'isa.set.of.optional.nonempty.set',                     ( S\"\"                                         ), true, ]\n    [ 'isa.set.of.optional.nonempty.set',                     ( S\"null\"                                     ), true, ]\n    [ 'isa.set.of.optional.nonempty.set',                     ( S\"[new Set('a')]\"                           ), true, ]\n    [ 'isa.empty.list.of.set',                                ( []                                          ), true, ]\n    [ 'isa.empty.list.of.empty.set',                          ( []                                          ), true, ]\n    [ 'isa.empty.list.of.nonempty.set',                       ( []                                          ), true, ]\n    [ 'isa.empty.list.of.optional.set',                       ( []                                          ), true, ]\n    [ 'isa.empty.list.of.optional.empty.set',                 ( []                                          ), true, ]\n    [ 'isa.empty.list.of.optional.nonempty.set',              ( []                                          ), true, ]\n    [ 'isa.empty.set.of.set',                                 ( S\"\"                                         ), true, ]\n    [ 'isa.empty.set.of.empty.set',                           ( S\"\"                                         ), true, ]\n    [ 'isa.empty.set.of.nonempty.set',                        ( S\"\"                                         ), true, ]\n    [ 'isa.empty.set.of.optional.set',                        ( S\"\"                                         ), true, ]\n    [ 'isa.empty.set.of.optional.empty.set',                  ( S\"\"                                         ), true, ]\n    [ 'isa.empty.set.of.optional.nonempty.set',               ( S\"\"                                         ), true, ]\n    [ 'isa.nonempty.list.of.set',                             ( [ S\"\", ]                                    ), true, ]\n    [ 'isa.nonempty.list.of.set',                             ( [ S\"'x'\", ]                                 ), true, ]\n    [ 'isa.nonempty.list.of.empty.set',                       ( [ S\"\", S\"\", ]                               ), true, ]\n    [ 'isa.nonempty.list.of.nonempty.set',                    ( [ S\"[1]\", S\"[2]\", ]                         ), true, ]\n    [ 'isa.nonempty.list.of.optional.set',                    ( [ null, ]                                   ), true, ]\n    [ 'isa.nonempty.list.of.optional.set',                    ( [ null, S\"'abc'\", ]                         ), true, ]\n    [ 'isa.nonempty.list.of.optional.empty.set',              ( [ null, ]                                   ), true, ]\n    [ 'isa.nonempty.list.of.optional.empty.set',              ( [ null, S\"\", ]                              ), true, ]\n    [ 'isa.nonempty.list.of.optional.nonempty.set',           ( [ null, ]                                   ), true, ]\n    [ 'isa.nonempty.list.of.optional.nonempty.set',           ( [ null, S\"'abc'\" ]                          ), true, ]\n    [ 'isa.nonempty.set.of.set',                              ( S\"[new Set()]\"                              ), true, ]\n    [ 'isa.nonempty.set.of.empty.set',                        ( S\"[new Set()]\"                              ), true, ]\n    [ 'isa.nonempty.set.of.nonempty.set',                     ( S\"[new Set('abc')]\"                         ), true, ]\n    [ 'isa.nonempty.set.of.optional.set',                     ( S\"[null]\"                                   ), true, ]\n    [ 'isa.nonempty.set.of.optional.set',                     ( S\"[null, new Set('a')]\"                     ), true, ]\n    [ 'isa.nonempty.set.of.optional.empty.set',               ( S\"[new Set(), null,]\"                       ), true, ]\n    [ 'isa.nonempty.set.of.optional.nonempty.set',            ( S\"[null,new Set('abc')]\"                    ), true, ]\n    [ 'isa.optional.set',                                     ( null                                      ), true, ]\n    [ 'isa.optional.set',                                     ( S\"\"                                      ), true, ]\n    [ 'isa.optional.empty.set',                               ( null                                      ), true, ]\n    [ 'isa.optional.empty.set',                               ( S\"\"                                      ), true, ]\n    [ 'isa.optional.list.of.set',                             ( null                                      ), true, ]\n    [ 'isa.optional.list.of.set',                             ( []                                      ), true, ]\n    [ 'isa.optional.list.of.set',                             ( [ S\"\", ]                                      ), true, ]\n    [ 'isa.optional.list.of.empty.set',                       ( null                                      ), true, ]\n    [ 'isa.optional.list.of.empty.set',                       ( []                                      ), true, ]\n    [ 'isa.optional.list.of.empty.set',                       ( [ S\"\", ]                                      ), true, ]\n    [ 'isa.optional.list.of.nonempty.set',                    ( null                                      ), true, ]\n    [ 'isa.optional.list.of.nonempty.set',                    ( [ S\"'xxx'\", ]                                      ), true, ]\n    [ 'isa.optional.list.of.optional.set',                    ( null                                      ), true, ]\n    [ 'isa.optional.list.of.optional.set',                    ( []                                      ), true, ]\n    [ 'isa.optional.list.of.optional.set',                    ( [ null, ]                                      ), true, ]\n    [ 'isa.optional.list.of.optional.set',                    ( [ null, S\"\", ]                                      ), true, ]\n    [ 'isa.optional.list.of.optional.empty.set',              ( null                                      ), true, ]\n    [ 'isa.optional.list.of.optional.empty.set',              ( []                                      ), true, ]\n    [ 'isa.optional.list.of.optional.empty.set',              ( [ null, ]                                      ), true, ]\n    [ 'isa.optional.list.of.optional.empty.set',              ( [ null, S\"\", ]                                      ), true, ]\n    [ 'isa.optional.list.of.optional.nonempty.set',           ( null                                      ), true, ]\n    [ 'isa.optional.list.of.optional.nonempty.set',           ( []                                      ), true, ]\n    [ 'isa.optional.list.of.optional.nonempty.set',           ( [ null, S\"'abc'\", ]                                      ), true, ]\n    [ 'isa.optional.nonempty.set',                            ( null                                      ), true, ]\n    [ 'isa.optional.nonempty.set',                            ( S\"'abc'\"                                      ), true, ]\n    [ 'isa.optional.set.of.set',                              ( null                                      ), true, ]\n    [ 'isa.optional.set.of.set',                              ( S\"\"                                      ), true, ]\n    [ 'isa.optional.set.of.set',                              ( S\"[new Set()]\"                                      ), true, ]\n    [ 'isa.optional.set.of.set',                              ( S\"[new Set('abc')]\"                                      ), true, ]\n    [ 'isa.optional.set.of.empty.set',                        ( null                                      ), true, ]\n    [ 'isa.optional.set.of.empty.set',                        ( S\"\"                                      ), true, ]\n    [ 'isa.optional.set.of.empty.set',                        ( S\"[new Set()]\"                                      ), true, ]\n    [ 'isa.optional.set.of.nonempty.set',                     ( null                                      ), true, ]\n    [ 'isa.optional.set.of.nonempty.set',                     ( S\"[new Set('abc')]\"                                      ), true, ]\n    [ 'isa.optional.set.of.optional.set',                     ( null                                      ), true, ]\n    [ 'isa.optional.set.of.optional.set',                     ( S\"\"                                      ), true, ]\n    [ 'isa.optional.set.of.optional.set',                     ( S\"[null, new Set(),]\"                                      ), true, ]\n    [ 'isa.optional.set.of.optional.empty.set',               ( null                                      ), true, ]\n    [ 'isa.optional.set.of.optional.empty.set',               ( S\"\"                                      ), true, ]\n    [ 'isa.optional.set.of.optional.empty.set',               ( S\"[null, new Set()]\"                                      ), true, ]\n    [ 'isa.optional.set.of.optional.nonempty.set',            ( null                                      ), true, ]\n    [ 'isa.optional.set.of.optional.nonempty.set',            ( S\"\"                                      ), true, ]\n    [ 'isa.optional.set.of.optional.nonempty.set',            ( S\"[null, new Set('abc')]\"                                      ), true, ]\n    # [ 'isa.optional.empty.list.of.set',                       ( null                                      ), true, ]\n    # [ 'isa.optional.empty.list.of.empty.set',                 ( null                                      ), true, ]\n    # [ 'isa.optional.empty.list.of.nonempty.set',              ( null                                      ), true, ]\n    # [ 'isa.optional.empty.list.of.optional.set',              ( null                                      ), true, ]\n    # [ 'isa.optional.empty.list.of.optional.empty.set',        ( null                                      ), true, ]\n    # [ 'isa.optional.empty.list.of.optional.nonempty.set',     ( null                                      ), true, ]\n    # [ 'isa.optional.empty.set.of.set',                        ( null                                      ), true, ]\n    # [ 'isa.optional.empty.set.of.empty.set',                  ( null                                      ), true, ]\n    # [ 'isa.optional.empty.set.of.nonempty.set',               ( null                                      ), true, ]\n    # [ 'isa.optional.empty.set.of.optional.set',               ( null                                      ), true, ]\n    # [ 'isa.optional.empty.set.of.optional.empty.set',         ( null                                      ), true, ]\n    # [ 'isa.optional.empty.set.of.optional.nonempty.set',      ( null                                      ), true, ]\n    # [ 'isa.optional.nonempty.list.of.set',                    ( null                                      ), true, ]\n    # [ 'isa.optional.nonempty.list.of.empty.set',              ( null                                      ), true, ]\n    # [ 'isa.optional.nonempty.list.of.nonempty.set',           ( null                                      ), true, ]\n    # [ 'isa.optional.nonempty.list.of.optional.set',           ( null                                      ), true, ]\n    # [ 'isa.optional.nonempty.list.of.optional.empty.set',     ( null                                      ), true, ]\n    # [ 'isa.optional.nonempty.list.of.optional.nonempty.set',  ( null                                      ), true, ]\n    # [ 'isa.optional.nonempty.set.of.set',                     ( null                                      ), true, ]\n    # [ 'isa.optional.nonempty.set.of.empty.set',               ( null                                      ), true, ]\n    # [ 'isa.optional.nonempty.set.of.nonempty.set',            ( null                                      ), true, ]\n    # [ 'isa.optional.nonempty.set.of.optional.set',            ( null                                      ), true, ]\n    # [ 'isa.optional.nonempty.set.of.optional.empty.set',      ( null                                      ), true, ]\n    # [ 'isa.optional.nonempty.set.of.optional.nonempty.set',   ( null                                      ), true, ]\n    ]\n  # #.........................................................................................................\n  # ### numbers ###\n  # for [ v, matcher, ] in [ [ 42, true, ], [ 42.1, false, ], ]\n  #   T?.eq ( isa.integer                                               v ), matcher\n  #   T?.eq ( isa.list.of.integer                                       v ), matcher\n  #   T?.eq ( isa.list.of.negative0.integer                             v ), matcher\n  #   T?.eq ( isa.list.of.negative1.integer                             v ), matcher\n  #   T?.eq ( isa.list.of.positive0.integer                             v ), matcher\n  #   T?.eq ( isa.list.of.positive1.integer                             v ), matcher\n  #   T?.eq ( isa.list.of.optional.integer                              v ), matcher\n  #   T?.eq ( isa.list.of.optional.negative0.integer                    v ), matcher\n  #   T?.eq ( isa.list.of.optional.negative1.integer                    v ), matcher\n  #   T?.eq ( isa.list.of.optional.positive0.integer                    v ), matcher\n  #   T?.eq ( isa.list.of.optional.positive1.integer                    v ), matcher\n  #   T?.eq ( isa.negative0.integer                                     v ), matcher\n  #   T?.eq ( isa.negative1.integer                                     v ), matcher\n  #   T?.eq ( isa.positive0.integer                                     v ), matcher\n  #   T?.eq ( isa.positive1.integer                                     v ), matcher\n  #   T?.eq ( isa.set.of.integer                                        v ), matcher\n  #   T?.eq ( isa.set.of.negative0.integer                              v ), matcher\n  #   T?.eq ( isa.set.of.negative1.integer                              v ), matcher\n  #   T?.eq ( isa.set.of.positive0.integer                              v ), matcher\n  #   T?.eq ( isa.set.of.positive1.integer                              v ), matcher\n  #   T?.eq ( isa.set.of.optional.integer                               v ), matcher\n  #   T?.eq ( isa.set.of.optional.negative0.integer                     v ), matcher\n  #   T?.eq ( isa.set.of.optional.negative1.integer                     v ), matcher\n  #   T?.eq ( isa.set.of.optional.positive0.integer                     v ), matcher\n  #   T?.eq ( isa.set.of.optional.positive1.integer                     v ), matcher\n  #   T?.eq ( isa.empty.list.of.integer                                 v ), matcher\n  #   T?.eq ( isa.empty.list.of.negative0.integer                       v ), matcher\n  #   T?.eq ( isa.empty.list.of.negative1.integer                       v ), matcher\n  #   T?.eq ( isa.empty.list.of.positive0.integer                       v ), matcher\n  #   T?.eq ( isa.empty.list.of.positive1.integer                       v ), matcher\n  #   T?.eq ( isa.empty.list.of.optional.integer                        v ), matcher\n  #   T?.eq ( isa.empty.list.of.optional.negative0.integer              v ), matcher\n  #   T?.eq ( isa.empty.list.of.optional.negative1.integer              v ), matcher\n  #   T?.eq ( isa.empty.list.of.optional.positive0.integer              v ), matcher\n  #   T?.eq ( isa.empty.list.of.optional.positive1.integer              v ), matcher\n  #   T?.eq ( isa.empty.set.of.integer                                  v ), matcher\n  #   T?.eq ( isa.empty.set.of.negative0.integer                        v ), matcher\n  #   T?.eq ( isa.empty.set.of.negative1.integer                        v ), matcher\n  #   T?.eq ( isa.empty.set.of.positive0.integer                        v ), matcher\n  #   T?.eq ( isa.empty.set.of.positive1.integer                        v ), matcher\n  #   T?.eq ( isa.empty.set.of.optional.integer                         v ), matcher\n  #   T?.eq ( isa.empty.set.of.optional.negative0.integer               v ), matcher\n  #   T?.eq ( isa.empty.set.of.optional.negative1.integer               v ), matcher\n  #   T?.eq ( isa.empty.set.of.optional.positive0.integer               v ), matcher\n  #   T?.eq ( isa.empty.set.of.optional.positive1.integer               v ), matcher\n  #   T?.eq ( isa.nonempty.list.of.integer                              v ), matcher\n  #   T?.eq ( isa.nonempty.list.of.negative0.integer                    v ), matcher\n  #   T?.eq ( isa.nonempty.list.of.negative1.integer                    v ), matcher\n  #   T?.eq ( isa.nonempty.list.of.positive0.integer                    v ), matcher\n  #   T?.eq ( isa.nonempty.list.of.positive1.integer                    v ), matcher\n  #   T?.eq ( isa.nonempty.list.of.optional.integer                     v ), matcher\n  #   T?.eq ( isa.nonempty.list.of.optional.negative0.integer           v ), matcher\n  #   T?.eq ( isa.nonempty.list.of.optional.negative1.integer           v ), matcher\n  #   T?.eq ( isa.nonempty.list.of.optional.positive0.integer           v ), matcher\n  #   T?.eq ( isa.nonempty.list.of.optional.positive1.integer           v ), matcher\n  #   T?.eq ( isa.nonempty.set.of.integer                               v ), matcher\n  #   T?.eq ( isa.nonempty.set.of.negative0.integer                     v ), matcher\n  #   T?.eq ( isa.nonempty.set.of.negative1.integer                     v ), matcher\n  #   T?.eq ( isa.nonempty.set.of.positive0.integer                     v ), matcher\n  #   T?.eq ( isa.nonempty.set.of.positive1.integer                     v ), matcher\n  #   T?.eq ( isa.nonempty.set.of.optional.integer                      v ), matcher\n  #   T?.eq ( isa.nonempty.set.of.optional.negative0.integer            v ), matcher\n  #   T?.eq ( isa.nonempty.set.of.optional.negative1.integer            v ), matcher\n  #   T?.eq ( isa.nonempty.set.of.optional.positive0.integer            v ), matcher\n  #   T?.eq ( isa.nonempty.set.of.optional.positive1.integer            v ), matcher\n  #   T?.eq ( isa.optional.integer                                      v ), matcher\n  #   T?.eq ( isa.optional.list.of.integer                              v ), matcher\n  #   T?.eq ( isa.optional.list.of.negative0.integer                    v ), matcher\n  #   T?.eq ( isa.optional.list.of.negative1.integer                    v ), matcher\n  #   T?.eq ( isa.optional.list.of.positive0.integer                    v ), matcher\n  #   T?.eq ( isa.optional.list.of.positive1.integer                    v ), matcher\n  #   T?.eq ( isa.optional.list.of.optional.integer                     v ), matcher\n  #   T?.eq ( isa.optional.list.of.optional.negative0.integer           v ), matcher\n  #   T?.eq ( isa.optional.list.of.optional.negative1.integer           v ), matcher\n  #   T?.eq ( isa.optional.list.of.optional.positive0.integer           v ), matcher\n  #   T?.eq ( isa.optional.list.of.optional.positive1.integer           v ), matcher\n  #   T?.eq ( isa.optional.negative0.integer                            v ), matcher\n  #   T?.eq ( isa.optional.negative1.integer                            v ), matcher\n  #   T?.eq ( isa.optional.positive0.integer                            v ), matcher\n  #   T?.eq ( isa.optional.positive1.integer                            v ), matcher\n  #   T?.eq ( isa.optional.set.of.integer                               v ), matcher\n  #   T?.eq ( isa.optional.set.of.negative0.integer                     v ), matcher\n  #   T?.eq ( isa.optional.set.of.negative1.integer                     v ), matcher\n  #   T?.eq ( isa.optional.set.of.positive0.integer                     v ), matcher\n  #   T?.eq ( isa.optional.set.of.positive1.integer                     v ), matcher\n  #   T?.eq ( isa.optional.set.of.optional.integer                      v ), matcher\n  #   T?.eq ( isa.optional.set.of.optional.negative0.integer            v ), matcher\n  #   T?.eq ( isa.optional.set.of.optional.negative1.integer            v ), matcher\n  #   T?.eq ( isa.optional.set.of.optional.positive0.integer            v ), matcher\n  #   T?.eq ( isa.optional.set.of.optional.positive1.integer            v ), matcher\n  #   T?.eq ( isa.optional.empty.list.of.integer                        v ), matcher\n  #   T?.eq ( isa.optional.empty.list.of.negative0.integer              v ), matcher\n  #   T?.eq ( isa.optional.empty.list.of.negative1.integer              v ), matcher\n  #   T?.eq ( isa.optional.empty.list.of.positive0.integer              v ), matcher\n  #   T?.eq ( isa.optional.empty.list.of.positive1.integer              v ), matcher\n  #   T?.eq ( isa.optional.empty.list.of.optional.integer               v ), matcher\n  #   T?.eq ( isa.optional.empty.list.of.optional.negative0.integer     v ), matcher\n  #   T?.eq ( isa.optional.empty.list.of.optional.negative1.integer     v ), matcher\n  #   T?.eq ( isa.optional.empty.list.of.optional.positive0.integer     v ), matcher\n  #   T?.eq ( isa.optional.empty.list.of.optional.positive1.integer     v ), matcher\n  #   T?.eq ( isa.optional.empty.set.of.integer                         v ), matcher\n  #   T?.eq ( isa.optional.empty.set.of.negative0.integer               v ), matcher\n  #   T?.eq ( isa.optional.empty.set.of.negative1.integer               v ), matcher\n  #   T?.eq ( isa.optional.empty.set.of.positive0.integer               v ), matcher\n  #   T?.eq ( isa.optional.empty.set.of.positive1.integer               v ), matcher\n  #   T?.eq ( isa.optional.empty.set.of.optional.integer                v ), matcher\n  #   T?.eq ( isa.optional.empty.set.of.optional.negative0.integer      v ), matcher\n  #   T?.eq ( isa.optional.empty.set.of.optional.negative1.integer      v ), matcher\n  #   T?.eq ( isa.optional.empty.set.of.optional.positive0.integer      v ), matcher\n  #   T?.eq ( isa.optional.empty.set.of.optional.positive1.integer      v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list.of.integer                     v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list.of.negative0.integer           v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list.of.negative1.integer           v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list.of.positive0.integer           v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list.of.positive1.integer           v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list.of.optional.integer            v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list.of.optional.negative0.integer  v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list.of.optional.negative1.integer  v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list.of.optional.positive0.integer  v ), matcher\n  #   T?.eq ( isa.optional.nonempty.list.of.optional.positive1.integer  v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set.of.integer                      v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set.of.negative0.integer            v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set.of.negative1.integer            v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set.of.positive0.integer            v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set.of.positive1.integer            v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set.of.optional.integer             v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set.of.optional.negative0.integer   v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set.of.optional.negative1.integer   v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set.of.optional.positive0.integer   v ), matcher\n  #   T?.eq ( isa.optional.nonempty.set.of.optional.positive1.integer   v ), matcher\n  #.........................................................................................................\n  for [ probe, value, matcher, error, ] in probes_and_matchers\n    await T.perform [ probe, value, ], matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ _, hedges..., ] = probe.split '.'\n      callable          = isa\n      callable          = do =>\n        for term in hedges\n          callable = callable[ term ]\n        return callable\n      result = callable value\n      # log rpr [ probe, result, ]\n      # resolve result\n      resolve result\n      return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@_demo_hedgepath_resolution = ->\n  # T?.halt_on_error true\n  { Intertype\n    Type_cfg }  = require '../../../apps/intertype'\n  types         = new Intertype()\n  { declare\n    isa       } = types\n  #.........................................................................................................\n  probes_and_matchers = [\n    ### other ###\n    [ 'isa.boolean',                                   (   true                                             ), true, ]\n    [ 'isa.list.of.boolean',                           (   [ true, ]                                        ), true, ]\n    [ 'isa.list.of.boolean',                           (   []                                               ), true, ]\n    [ 'isa.list.of.optional.boolean',                  ( []                                                 ), true, ]\n    [ 'isa.list.of.optional.boolean',                  ( [ null, ]                                          ), true, ]\n    [ 'isa.list.of.optional.boolean',                  ( [ null, true, ]                                    ), true, ]\n    [ 'isa.set.of.boolean',                            ( S\"[]\"                                              ), true, ]\n    [ 'isa.set.of.boolean',                            ( S\"[ false, ]\"                                      ), true, ]\n    ]\n  #.........................................................................................................\n  for [ probe, value, matcher, error, ] in probes_and_matchers\n    [ _, hedges..., ] = probe.split '.'\n    callable          = isa\n    callable          = do =>\n      for term in hedges\n        callable = callable[ term ]\n      return callable\n    result = callable value\n    urge { probe, value, result, }\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_test_with_protocol = ->\n  { Intertype\n    Type_cfg }  = require '../../../apps/intertype'\n  types         = new Intertype()\n  #.........................................................................................................\n  info '^342-2^', types.isa.integer                     42\n  info '^342-2^', types.isa.optional.integer            42\n  info '^342-2^', types.isa.optional.positive0.integer  42\n  info '^342-2^', types.isa.integer                     42.1\n  info '^342-2^', types.isa.optional.integer            42.1\n  info '^342-2^', types.isa.optional.positive0.integer  42.1\n  info '^342-2^', types.isa.integer                     null\n  info '^342-2^', types.isa.optional.integer            null\n  info '^342-2^', types.isa.optional.positive0.integer  null\n  info '^342-2^', types.isa.list.of.integer             null\n  info '^342-2^', types.isa.list.of.integer             []\n  info '^342-2^', types.isa.list.of.integer             [ 1, 2, 3, ]\n  info '^342-2^', types.isa.list.of.integer             [ 1, 2, 3.5, ]\n  info '^342-2^', types.isa.list.of.optional.integer    [ 1, 2, null, ]\n  info '^342-2^', types.isa.list.of.optional.integer    [ 1, 2, 3.5, ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_hedges = ->\n  { Intertype\n    Type_cfg }  = require '../../../apps/intertype'\n  types         = new Intertype()\n  do =>\n    count         = 0\n    type          = 'integer'\n    type_cfg      = new Type_cfg { isa_numeric: true, }\n    urge '^234^', type, type_cfg\n    for hedgepath from types._walk_hedgepaths type_cfg\n      count++\n      info '^2434^', count, ( hedgepath.join ' ' ) + ' ' + type\n  do =>\n    count         = 0\n    type          = 'text'\n    type_cfg      = new Type_cfg { isa_collection: true, }\n    urge '^234^', type, type_cfg\n    for hedgepath from types._walk_hedgepaths type_cfg\n      count++\n      info '^2434^', count, ( hedgepath.join ' ' ) + ' ' + type\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_multipart_hedges = ->\n  hedge =\n    terms:\n      optional_prefixes:  [ 'empty', 'nonempty', ]\n      mandatory_kernels:  [ 'list', 'of', 'set', 'of', ]\n      optional_suffixes:  [ 'optional', ]\n    match: { all: true, }\n  #.........................................................................................................\n  chains = []\n  for prefix_idx in [ -1 ... hedge.terms.optional_prefixes.length ]\n    if ( prefix = hedge.terms.optional_prefixes[ prefix_idx ] ? null )?\n      chain = [ prefix ]\n    else\n      chain = []\n    for kernel in hedge.terms.mandatory_kernels\n      chains.push [ chain..., kernel, ]\n  for suffix_idx in [ -1 ... hedge.terms.mandatory_kernels.length ]\n    if ( suffix_idx = hedge.terms.optional_suffixes[ suffix_idx ] )?\n      chains.push\n  #.........................................................................................................\n  debug '^509^', chain for chain in chains\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_combinate = ->\n  combinate = ( require \"combinate\" ).default\n  values =\n    optional:     [ null, 'optional', ]\n    collections:\n      prefix:     [ null, 'empty', 'nonempty', ]\n      kernel:     [ 'list', 'of', 'set', 'of', ]\n      suffix:     [ null, 'optional', ]\n    empty: [ null, 'empty', 'nonempty', ]\n  # combine = ( terms ) => ( ( v for _, v of x when v? ) for x in combinate terms )\n  combine = ( terms ) => ( ( v for _, v of x         ) for x in combinate terms )\n    # combinations[ idx ] = ( e for e in x when e? ) for x, idx in combinations\n  compile_hedges = ( hedges ) ->\n    R = { hedges..., }\n    for k, v of R\n      continue if Array.isArray v\n      R[ k ] = combine v\n    return R\n  get_hedgepaths = ( compiled_hedges ) ->\n    R = ( x.flat() for x in combine compiled_hedges )\n    return ( ( v for v in x when v? ) for x in R )\n  compiled_hedges = compile_hedges values\n  combinations    = get_hedgepaths compiled_hedges\n  combinations.unshift [ null, null, null, null, null ]\n  # combinations.sort()\n  H.tabulate 'combinate', combinations\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_combinate_2 = ->\n  { Intertype\n    Type_cfg }  = require '../../../apps/intertype'\n  types         = new Intertype()\n  combinate     = ( require \"combinate\" ).default\n  #.........................................................................................................\n  hedges = GUY.lft.freeze [\n    { terms: [ null, 'optional', ],                                         match: { all: true, }, }\n    { terms: [\n      null,\n      [ [ null, 'empty', 'nonempty', ]\n        [ 'list', 'of', 'set', 'of', ]\n        [ null, 'optional', ]\n        ], ],                                                               match: { all: true, }, }\n    { terms: [ null, 'empty', 'nonempty', ],                                match: { isa_collection: true, }, }\n    { terms: [ null, 'positive0', 'positive1', 'negative0', 'negative1', ], match: { isa_numeric: true, }, }\n    ]\n  #.........................................................................................................\n  combine = ( terms ) => ( ( v for _, v of x ) for x in combinate terms )\n  types._compile_hedges = ( hedges, type_cfg ) ->\n    R = []\n    for hedge in hedges\n      continue unless @_match_hedge_and_type_cfg hedge, type_cfg\n      # termses = [ hedge.terms..., ]\n      target = []\n      R.push target\n      for termgroup in hedge.terms\n        if Array.isArray termgroup\n          target.splice target.length - 1, 0, ( @get_hedgepaths termgroup )...\n        else\n          target.push termgroup\n    return R\n  types.get_hedgepaths = ( compiled_hedges ) ->\n    R = ( x.flat() for x in combine compiled_hedges )\n    return R\n  types._reduce_hedgepaths = ( combinations ) -> ( ( e for e in hp when e? ) for hp in combinations )\n  #.........................................................................................................\n  combinations    = types.get_hedgepaths hedges[ 1 ].terms[ 1 ]\n  # combinations    = types.get_hedgepaths types._compile_hedges hedges, {}\n  # combinations    = types.get_hedgepaths types._compile_hedges hedges, { isa_collection: true, }\n  combinations    = types.get_hedgepaths types._compile_hedges hedges, { isa_numeric: true, }\n  info '^540^', combinations\n  combinations.sort()\n  combinations    = types._reduce_hedgepaths combinations\n  combinations.unshift [ null, null, null, null, null, null, null ]\n  H.tabulate 'combinate', combinations\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_intertype_hedge_combinator = ->\n#-----------------------------------------------------------------------------------------------------------\n  { Intertype\n    Type_cfg }  = require '../../../apps/intertype'\n  #.........................................................................................................\n  do =>\n    types   = new Intertype()\n    hedges  = types._hedges.constructor.hedges\n    for groupname in [ 'collections', 'numbers', 'other', ]\n      compiled_hedges = types._hedges._compile_hedges groupname, hedges\n      hedgepaths      = types._hedges.get_hedgepaths compiled_hedges\n      hedgepaths.sort()\n      hedgepaths      = types._hedges._reduce_hedgepaths hedgepaths\n      H.tabulate \"hedgepaths for group #{rpr groupname}\", [ [ null, null, null, null, null, null, null ], hedgepaths..., ]\n      info '^540^', hedgepaths\n      if groupname is 'other'\n        info CND.truth equals hedgepaths, [ [], [ 'list', 'of' ], [ 'list', 'of', 'optional' ], [ 'set', 'of' ], [ 'set', 'of', 'optional' ], [ 'empty', 'list', 'of' ], [ 'empty', 'list', 'of', 'optional' ], [ 'empty', 'set', 'of' ], [ 'empty', 'set', 'of', 'optional' ], [ 'nonempty', 'list', 'of' ], [ 'nonempty', 'list', 'of', 'optional' ], [ 'nonempty', 'set', 'of' ], [ 'nonempty', 'set', 'of', 'optional' ], [ 'optional' ], [ 'optional', 'list', 'of' ], [ 'optional', 'list', 'of', 'optional' ], [ 'optional', 'set', 'of' ], [ 'optional', 'set', 'of', 'optional' ], [ 'optional', 'empty', 'list', 'of' ], [ 'optional', 'empty', 'list', 'of', 'optional' ], [ 'optional', 'empty', 'set', 'of' ], [ 'optional', 'empty', 'set', 'of', 'optional' ], [ 'optional', 'nonempty', 'list', 'of' ], [ 'optional', 'nonempty', 'list', 'of', 'optional' ], [ 'optional', 'nonempty', 'set', 'of' ], [ 'optional', 'nonempty', 'set', 'of', 'optional' ] ]\n  #.........................................................................................................\n  do =>\n    types       = new Intertype()\n    hedgepaths  = types._hedges.hedgepaths\n    debug '^453^', hedgepaths\n    groupname   = 'other'\n    H.tabulate \"hedgepaths for group #{rpr groupname}\", [ [ null, null, null, null, null, null, null ], hedgepaths[ groupname ]..., ]\n    info CND.truth equals hedgepaths[ groupname ], [ [], [ 'list', 'of' ], [ 'list', 'of', 'optional' ], [ 'set', 'of' ], [ 'set', 'of', 'optional' ], [ 'empty', 'list', 'of' ], [ 'empty', 'list', 'of', 'optional' ], [ 'empty', 'set', 'of' ], [ 'empty', 'set', 'of', 'optional' ], [ 'nonempty', 'list', 'of' ], [ 'nonempty', 'list', 'of', 'optional' ], [ 'nonempty', 'set', 'of' ], [ 'nonempty', 'set', 'of', 'optional' ], [ 'optional' ], [ 'optional', 'list', 'of' ], [ 'optional', 'list', 'of', 'optional' ], [ 'optional', 'set', 'of' ], [ 'optional', 'set', 'of', 'optional' ], [ 'optional', 'empty', 'list', 'of' ], [ 'optional', 'empty', 'list', 'of', 'optional' ], [ 'optional', 'empty', 'set', 'of' ], [ 'optional', 'empty', 'set', 'of', 'optional' ], [ 'optional', 'nonempty', 'list', 'of' ], [ 'optional', 'nonempty', 'list', 'of', 'optional' ], [ 'optional', 'nonempty', 'set', 'of' ], [ 'optional', 'nonempty', 'set', 'of', 'optional' ] ]\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\nlist_all_builtin_type_testers = ->\n  CAT                       = require 'multimix/lib/cataloguing'\n  pattern                   = /^is/\n  excludes                  = new Set [ 'isPrototypeOf', ]\n  for top_level_name in CAT.all_keys_of global\n    info top_level_name if ( top_level_name.match pattern )? and not excludes.has top_level_name\n    # whisper '^3424^', top_level_name\n    for second_level_name in CAT.all_keys_of global[ top_level_name ]\n      info \"#{top_level_name}.#{second_level_name}\" if ( second_level_name.match pattern )? and not excludes.has second_level_name\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_picomatch_for_hedgepaths = ->\n  pmatch = require 'picomatch'\n  hedgepaths = [\n    'integer'\n    'list.of.integer'\n    'optional.integer'\n    'optional.list.of.integer'\n    'optional.list.of.optional.integer'\n    ]\n  globpatterns = [\n    '*'\n    'optional.*'\n    '!(*optional*)'\n    '*.optional.*'\n    '!(*.optional.*)'\n    '*.!(optional).*'\n    '!(optional)?(.*)'\n    ]\n  for globpattern in globpatterns\n    echo GUY.trm.yellow GUY.trm.reverse \" #{globpattern} \"\n    for hedgepath in hedgepaths\n      v = pmatch.isMatch hedgepath, globpattern\n      echo ( to_width ( GUY.trm.truth v ), 10 ), hedgepath\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_enumerate_hedgepaths = ->\n  { Intertype } = require '../../../apps/intertype'\n  types         = new Intertype()\n  evaluate = ({ owner, key, value, }) ->\n    # debug '^324^', key, ( types.type_of value )\n    return 'take' if ( types.type_of value ) is 'function'\n    return 'take' unless GUY.props.has_any_keys value\n    return 'descend'\n  for path in GUY.props.tree types.isa, { evaluate, sep: '.', }\n    praise path\n  # for k, v of Object.own types.isa\n  #   debug '^4432^', k\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_intertype_autovivify_hedgepaths = ->\n  { Intertype } = require '../../../apps/intertype'\n  types         = new Intertype()\n  { isa\n    validate\n    declare   } = types\n  info '^879-4^', isa.integer 42                        ; praise '^879-5^',  ( GUY.trm.reverse types.state.method ), types.state.hedges.join '.'\n  info '^879-8^', isa.optional 42                       ; praise '^879-9^',  ( GUY.trm.reverse types.state.method ), types.state.hedges.join '.'\n  info '^879-10^', isa.optional.integer                 ; praise '^879-11^', ( GUY.trm.reverse types.state.method ), types.state.hedges.join '.'\n  info '^879-12^', isa.optional.integer 42              ; praise '^879-13^', ( GUY.trm.reverse types.state.method ), types.state.hedges.join '.'\n  info '^879-14^', isa.optional.integer 42              ; praise '^879-15^', ( GUY.trm.reverse types.state.method ), types.state.hedges.join '.'\n  info '^879-16^', isa.optional.integer null            ; praise '^879-17^', ( GUY.trm.reverse types.state.method ), types.state.hedges.join '.'\n  info '^879-18^', isa.optional.optional.integer null   ; praise '^879-19^', ( GUY.trm.reverse types.state.method ), types.state.hedges.join '.'\n  info '^879-20^', isa.empty.integer null               ; praise '^879-21^', ( GUY.trm.reverse types.state.method ), types.state.hedges.join '.'\n  info '^879-22^', isa.empty.integer 42                 ; praise '^879-23^', ( GUY.trm.reverse types.state.method ), types.state.hedges.join '.'\n  info '^879-24^', isa.empty.integer 0                  ; praise '^879-25^', ( GUY.trm.reverse types.state.method ), types.state.hedges.join '.'\n  info '^879-26^', isa.negative0.integer 0              ; praise '^879-27^', ( GUY.trm.reverse types.state.method ), types.state.hedges.join '.'\n  info '^879-28^', isa.positive0.integer 0              ; praise '^879-29^', ( GUY.trm.reverse types.state.method ), types.state.hedges.join '.'\n  info '^879-30^', isa.negative1.integer 0              ; praise '^879-31^', ( GUY.trm.reverse types.state.method ), types.state.hedges.join '.'\n  info '^879-32^', isa.positive1.integer 0              ; praise '^879-33^', ( GUY.trm.reverse types.state.method ), types.state.hedges.join '.'\n  info '^879-34^', isa.negative0.list 0                 ; praise '^879-35^', ( GUY.trm.reverse types.state.method ), types.state.hedges.join '.'\n  info '^879-36^', isa.negative0.list []                ; praise '^879-37^', ( GUY.trm.reverse types.state.method ), types.state.hedges.join '.'\n  # info '^879-38^', isa.x\n  # info '^879-39^', isa.optional.empty.list.of.integer null\n  # info '^879-40^', isa.optional.empty.list.of.integer []\n  # info '^879-41^', isa.optional.empty.list.of.integer [ 42, ]\n  # info '^879-42^', isa.optional.empty.list.of.integer [ 42, 3.1, ]\n  # info '^879-43^', isa.empty.integer     5 ### TAINT returns `false` ###\n  # info '^879-44^', isa.nonempty.integer  5 ### TAINT returns `true` ###\n  # console.log ( require 'util' ).inspect isa, { colors: true, depth: Infinity, }\n  # info '^879-45^', isa.optional.empty.list.of.list.of.integer [ 42, ]\n  # info '^879-46^', isa.optional.empty.list.of.list.of.integer [ [ 42,] ]\n  # praise '^353-2^', path for path from GUY.props.walk_tree isa, { sep: '.', }\n  # # info '^879-47^', isa.x.y.z\n  # # info '^879-48^', isa.x.y.z 42\n  # # # info '^879-49^', isa.x.y.z.u.v.w.a.b.c.d\n  # # info '^879-50^', isa.x.y.z.u.v.w.a.b.c.d 42\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_size_of = ->\n  { Intertype } = require '../../../apps/intertype'\n  types         = new Intertype()\n  info '^905-1^', types.size_of [ 1, 2, 3, ]\n  info '^905-2^', types.size_of new Set [ 1, 2, 3, ]\n  info '^905-3^', GUY.props.get ( new Set \"abc\" ), 'length', null\n  info '^905-4^', GUY.props.get ( new Set \"abc\" ), 'size', null\n  info '^905-5^', GUY.props.get ( \"abc\" ), 'length', null\n  info '^905-6^', GUY.props.get ( \"abc\" ), 'size', null\n  info '^905-7^', types.size_of \"abc\"\n  info '^905-8^', types.size_of \"abc𪜁\"\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@validate_1 = ( T, done ) ->\n  { Intertype } = require '../../../apps/intertype'\n  types         = new Intertype()\n  { declare\n    isa\n    validate  } = types\n  #.........................................................................................................\n  T?.eq ( validate.list [] ), []\n  T?.eq ( validate.optional.list [] ), []\n  T?.eq ( validate.optional.list null ), null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@validate_returns_value = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype } = require '../../../apps/intertype'\n  types         = new Intertype()\n  #.........................................................................................................\n  types.declare.quantity\n    isa:      ( x ) -> @isa.object x\n    $value:   'float'\n    $unit:    'nonempty.text'\n    default:\n      value:    0\n      unit:     null\n  types.declare.fortytwo ( x ) -> x is 42\n  d = { value: 4, unit: 'kB', }\n  types.validate.fortytwo 42\n  try types.validate.fortytwo           123 catch error then warn rvr error.message\n  try types.validate.positive1.fortytwo 123 catch error then warn rvr error.message\n  # #.........................................................................................................\n  # info '^321-1^', ( types.validate.float 12.3     );  echo types.get_state_report { format: 'failing', }\n  # info '^321-1^', ( types.validate.fortytwo 12.3  );  echo types.get_state_report { format: 'failing', }\n  # info '^321-1^', ( types.validate.fortytwo 42    );  echo types.get_state_report { format: 'failing', }\n  # info '^321-2^', ( types.isa.object d            );  echo types.get_state_report { format: 'failing', }\n  # info '^321-3^', ( types.isa.quantity d          );  echo types.get_state_report { format: 'failing', }\n  # # info '^321-3^', ( types.isa.quantity null       );  echo types.get_state_report { format: 'failing', }\n  # info '^321-4^', ( types.validate.quantity d     );  echo types.get_state_report { format: 'failing', }\n  # T?.eq ( types.validate.float 12.3 ), 12.3\n  # T?.eq ( types.validate.quantity d ), d\n  # T?.ok ( types.validate.quantity d ) is d\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@create_returns_deep_copy_of_default = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype } = require '../../../apps/intertype'\n  types         = new Intertype()\n  #.........................................................................................................\n  types.declare.frob\n    $list:  'list'\n    $blah:  'nonempty.text'\n    default:\n      list:     []\n      blah:     null\n  #.........................................................................................................\n  mylist  = [ 1, 2, 3, ]\n  d       = { list: mylist, blah: 'blub', }\n  T?.eq ( types.validate.frob d ), d\n  T?.ok ( types.validate.frob d ) is d\n  e       = types.create.frob d\n  debug '^45345^', d\n  debug '^45345^', e\n  T?.ok equals e, d\n  T?.ok e isnt d\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@create_with_seal_freeze_extra = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype } = require '../../../apps/intertype'\n  types         = new Intertype()\n  # #.........................................................................................................\n  # types.declare.sealed_frob\n  #   isa: [\n  #     ( x ) -> @isa.object        x\n  #     ( x ) -> @isa.list          x.list\n  #     ( x ) -> @isa.nonempty.text x.blah\n  #     ]\n  #   seal:     'deep'\n  #   default:\n  #     list:     []\n  #     blah:     null\n  #.........................................................................................................\n  types.declare.frozen_frob\n    $list:  'list'\n    $blah:  'nonempty.text'\n    freeze:   'deep'\n    default:\n      list:     []\n      blah:     null\n  #.........................................................................................................\n  types.declare.noextra_frob\n    $list:  'list'\n    $blah:  'nonempty.text'\n    extras:   false\n    default:\n      list:     []\n      blah:     null\n  #.........................................................................................................\n  do =>\n    # debug types.registry.frozen_frob\n    # debug ( k for k of GUY.lft )\n    mylist        = [ 1, 2, 3, ]\n    d             = { list: mylist, blah: 'blub', }\n    d_copy        = GUY.lft._deep_copy d\n    d_frozen_copy = GUY.lft.freeze d_copy\n    urge '^549-1^', \"d                                    \", d\n    urge '^549-2^', \"d_copy                               \", d_copy\n    urge '^549-2^', \"d_frozen_copy                        \", d_frozen_copy\n    info '^549-3^', \"d.list is mylist                     \", GUY.trm.truth d.list is mylist\n    info '^549-4^', \"d_copy.list is mylist                \", GUY.trm.truth d_copy.list is mylist\n    info '^549-4^', \"d_frozen_copy.list is mylist         \", GUY.trm.truth d_frozen_copy.list is mylist\n    info '^549-4^', \"d_frozen_copy.list is d_copy.list    \", GUY.trm.truth d_frozen_copy.list is d_copy.list\n    info '^549-5^', \"Object.isFrozen mylist               \", GUY.trm.truth Object.isFrozen mylist\n    info '^549-6^', \"Object.isFrozen d                    \", GUY.trm.truth Object.isFrozen d\n    info '^549-5^', \"Object.isFrozen d.list               \", GUY.trm.truth Object.isFrozen d.list\n    info '^549-6^', \"Object.isFrozen d_copy               \", GUY.trm.truth Object.isFrozen d_copy\n    info '^549-5^', \"Object.isFrozen d_copy.list          \", GUY.trm.truth Object.isFrozen d_copy.list\n    info '^549-6^', \"Object.isFrozen d_frozen_copy        \", GUY.trm.truth Object.isFrozen d_frozen_copy\n    info '^549-5^', \"Object.isFrozen d_frozen_copy.list   \", GUY.trm.truth Object.isFrozen d_frozen_copy.list\n  #.........................................................................................................\n  do =>\n    mylist        = [ 1, 2, 3, ]\n    cfg           = { list: mylist, blah: 'blub', }\n    frozen_frob   = types.create.frozen_frob cfg\n    info '^879-1^', \"cfg.list is mylist                 \", GUY.trm.truth cfg.list is mylist\n    info '^879-2^', \"frozen_frob.list isnt mylist       \", GUY.trm.truth frozen_frob.list isnt mylist\n    info '^879-3^', \"not Object.isFrozen mylist         \", GUY.trm.truth not Object.isFrozen mylist\n    info '^879-4^', \"not Object.isFrozen cfg            \", GUY.trm.truth not Object.isFrozen cfg\n    info '^879-5^', \"Object.isFrozen frozen_frob        \", GUY.trm.truth Object.isFrozen frozen_frob\n    info '^879-6^', \"Object.isFrozen frozen_frob.list   \", GUY.trm.truth Object.isFrozen frozen_frob.list\n    T?.ok cfg.list is mylist\n    T?.ok frozen_frob.list isnt mylist\n    T?.ok not Object.isFrozen mylist\n    T?.ok not Object.isFrozen cfg\n    T?.ok Object.isFrozen frozen_frob\n    T?.ok Object.isFrozen frozen_frob.list\n  #.........................................................................................................\n  do =>\n    mylist        = [ 1, 2, 3, ]\n    cfg           = { list: mylist, blah: 'blub', }\n    noextra_frob  = types.create.noextra_frob cfg\n    debug '^4535-1^', types.registry.noextra_frob\n    debug '^4535-3^', noextra_frob\n    T?.ok types.registry.noextra_frob.extras is false\n    T?.ok types.isa.noextra_frob noextra_frob\n    noextra_frob.extra_prop = true\n    debug '^4535-4^', noextra_frob\n    T?.ok not types.isa.noextra_frob noextra_frob\n    # types.validate.noextra_frob noextra_frob\n    T?.throws /not a valid noextra_frob/, -> types.validate.noextra_frob noextra_frob\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@declare_NG_defaults = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype } = require '../../../apps/intertype'\n  types         = new Intertype()\n  #.........................................................................................................\n  types.declare.quantity\n    $value:   'float'\n    $unit:    'nonempty.text'\n    default:\n      value:    0\n      unit:     null\n  #.........................................................................................................\n  types.declare.point2d\n    $x: 'float'\n    $y: 'float'\n    default:\n      x:    0\n      y:    0\n    create: ( cfg ) -> { { x: 1, y: 1, }..., cfg..., }\n  #.........................................................................................................\n  info '^868-1^', types\n  T?.eq ( _types.type_of types.declare          ), 'function'\n  T?.eq ( _types.type_of types.registry         ), 'object'\n  T?.eq ( _types.type_of types.registry.text    ), 'function'\n  # info '^868-2^', types.registry\n  info '^868-3^', types.registry.integer\n  info '^868-4^', types.registry.null\n  info '^868-5^', types.registry.text\n  info '^868-6^', types.registry.quantity\n  # info '^868-7^', types.registry.quantity.test\n  # info '^868-8^',  T?.eq ( types.registry.quantity.test  42                           ), false\n  # info '^868-9^',  T?.eq ( types.registry.quantity.test  { value: 1.23, unit: '', }   ), false\n  # info '^868-10^', T?.eq ( types.registry.quantity.test  { value: 1.23, unit: 'm', }  ), true\n  info '^868-11^', T?.eq ( types.isa.quantity            42                           ), false\n  info '^868-12^', T?.eq ( types.isa.quantity            { value: 1.23, unit: '', }   ), false\n  info '^868-13^', T?.eq ( types.isa.quantity            { value: 1.23, unit: 'm', }  ), true\n  info '^868-14^', T?.eq ( types.validate.quantity { types.registry.quantity.default..., { value: 44, unit: 'g', }..., } ), { value: 44, unit: 'g', }\n  info '^868-15^', T?.throws /not a valid text/, -> types.validate.text 42\n  # praise '^521-1^', types.isa.text ''\n  # praise '^521-2^', types.validate.text ''\n  # praise '^521-3^', types.isa.optional.text null\n  # praise '^521-4^', types.isa.optional.text ''\n  # praise '^521-5^', types.isa.optional.text 42\n  # praise '^521-6^', types.validate.optional.text null\n  # praise '^521-7^', types.validate.empty.text null\n  # praise '^521-8^', types.validate.empty.text 42\n  info '^868-16^', T?.throws /not a valid empty\\.text/, -> types.validate.empty.text 42\n  info '^868-17^', T?.throws /not a valid quantity/, -> types.validate.quantity { types.registry.quantity.default..., { value: null, }..., }\n  info '^868-18^', T?.eq ( types.isa.empty.text '' ), true\n  info '^868-19^', T?.eq ( types.validate.empty.text '' ), ''\n  info '^868-20^', T?.eq ( types.validate.nonempty.text 'x' ), 'x'\n  info '^868-21^', T?.eq ( types.validate.optional.nonempty.text null ), null\n  info '^868-22^', T?.eq ( types.validate.optional.nonempty.text 'x' ), 'x'\n  praise '^868-24^', rpr types.create.text()\n  praise '^868-25^', rpr types.create.integer()\n  info '^868-22^', T?.eq ( types.create.null()       ), null\n  info '^868-22^', T?.eq ( types.create.undefined()  ), undefined\n  info '^868-22^', T?.eq ( types.create.boolean()    ), false\n  info '^868-22^', T?.eq ( types.create.list()       ), []\n  info '^868-22^', T?.eq ( types.create.object()     ), {}\n  info '^868-22^', T?.eq ( types.create.text()       ), ''\n  info '^868-22^', T?.eq ( types.create.integer()    ), 0\n  info '^868-22^', T?.eq ( types.create.quantity {            unit: 'km', } ), { value:  0, unit: 'km', }\n  info '^868-22^', T?.eq ( types.create.quantity { value: 32, unit: 'km', } ), { value: 32, unit: 'km', }\n  info '^868-22^', T?.eq ( types.create.float()      ), 0\n  info '^868-22^', T?.eq ( types.create.point2d()    ), { x: 1, y: 1, }\n  #.........................................................................................................\n  # info '^868-23^', T?.eq ( types.create.text() ), ''\n  # info '^868-22^', T?.eq ( types.create.integer 42   ), 42\n  # info '^868-22^', T?.throws /not a valid integer/, -> types.create.integer 4.2\n  # praise hedgepath for hedgepath from GUY.props.walk_tree types.isa,      { sep: '.', }\n  # info   hedgepath for hedgepath from GUY.props.walk_tree types.validate, { sep: '.', }\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@isa_x_or_y = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype } = require '../../../apps/intertype'\n  types         = new Intertype()\n  { declare\n    isa\n    validate  } = types\n  #.........................................................................................................\n  try isa.integer.foobar 24 catch error then warn GUY.trm.reverse error.message\n  T?.throws /unknown hedge or type 'foobar'/, -> isa.integer.foobar\n  T?.throws /unknown hedge or type 'foobar'/, -> isa.integer.foobar 24\n  T?.throws /unknown hedge or type 'list_of'/, -> isa.list_of\n  T?.throws /unknown hedge or type 'list_of'/, -> isa.list_of.integer\n  T?.throws /unknown hedge or type 'list_of'/, -> isa.list_of.integer 24\n  # praise '^868-25^', GUY.trm.truth      isa.integer 24\n  # praise '^868-25^', GUY.trm.truth      isa.optional.integer 24\n  # praise '^868-25^', GUY.trm.truth      isa.collection 24\n  # praise '^868-25^', GUY.trm.truth      isa.collection [ 24, ]\n  # praise '^868-25^', GUY.trm.truth      isa.text.or.integer 24\n  # praise '^868-25^', GUY.trm.truth      isa.integer.or.text 24\n  # praise '^868-25^', GUY.trm.truth      isa.integer.or.text\n  # praise '^868-25^', GUY.trm.truth      isa.optional.nonempty.text\n  # praise '^868-25^', path for path from GUY.props.walk_tree isa\n  # praise '^868-25^', GUY.trm.truth      isa.integer.or.text 'x'\n  # praise '^868-25^', GUY.trm.truth not  isa.integer.or.text false\n  # praise '^868-25^', GUY.trm.truth not  isa.integer.or.text {}\n\n  # praise '^341-1^', isa.text.or.integer 42\n  # praise '^341-2^', isa.text.or.integer ''\n  # praise '^341-1^', isa.optional.text.or.integer null\n  # praise '^341-1^', isa.optional.text.or.integer ''\n  # praise '^341-1^', isa.optional.text.or.integer 42\n  # praise '^341-1^', isa.optional.text.or.integer false\n  # #.........................................................................................................\n  info '^871-1^',   try T?.eq ( isa.integer 42                                ), true   catch e then warn '^871-2^', rvr e.message; T?.ok false\n  info '^871-3^',   try T?.eq ( isa.text ''                                   ), true   catch e then warn '^871-4^', rvr e.message; T?.ok false\n  info '^871-5^',   try T?.eq ( isa.integer ''                                ), false  catch e then warn '^871-6^', rvr e.message; T?.ok false\n  info '^871-7^',   try T?.eq ( isa.text 42                                   ), false  catch e then warn '^871-8^', rvr e.message; T?.ok false\n  info '^871-9^',   try T?.eq ( isa.text.or.integer 42                        ), true   catch e then warn '^871-10^', rvr e.message; T?.ok false\n  info '^871-11^',  try T?.eq ( isa.text.or.integer ''                        ), true   catch e then warn '^871-12^', rvr e.message; T?.ok false\n  info '^871-13^',  try T?.eq ( isa.integer.or.text 42                        ), true   catch e then warn '^871-14^', rvr e.message; T?.ok false\n  info '^871-15^',  try T?.eq ( isa.integer.or.text ''                        ), true   catch e then warn '^871-16^', rvr e.message; T?.ok false\n  info '^871-17^',  try T?.eq ( isa.text.or.integer false                     ), false  catch e then warn '^871-18^', rvr e.message; T?.ok false\n  info '^871-19^',  try T?.eq ( isa.integer.or.text false                     ), false  catch e then warn '^871-20^', rvr e.message; T?.ok false\n  info '^871-21^',  try T?.eq ( isa.text.or.integer null                      ), false  catch e then warn '^871-22^', rvr e.message; T?.ok false\n  info '^871-23^',  try T?.eq ( isa.integer.or.text null                      ), false  catch e then warn '^871-24^', rvr e.message; T?.ok false\n  info '^871-25^',  try T?.eq ( isa.optional.text.or.integer null             ), true   catch e then warn '^871-26^', rvr e.message; T?.ok false\n  info '^871-27^',  try T?.eq ( isa.optional.integer.or.text null             ), true   catch e then warn '^871-28^', rvr e.message; T?.ok false\n  info '^871-29^',  try T?.eq ( isa.optional.integer.or.text.or.boolean null  ), true   catch e then warn '^871-30^', rvr e.message; T?.ok false\n  info '^871-31^',  try T?.eq ( isa.optional.integer.or.text.or.boolean false ), true   catch e then warn '^871-32^', rvr e.message; T?.ok false\n  info '^871-33^',  try T?.eq ( isa.optional.integer.or.text.or.boolean 42    ), true   catch e then warn '^871-34^', rvr e.message; T?.ok false\n  info '^871-35^',  try T?.eq ( isa.optional.integer.or.text.or.boolean 'x'   ), true   catch e then warn '^871-36^', rvr e.message; T?.ok false\n  info '^871-37^',  try T?.eq ( isa.optional.integer.or.text.or.boolean {}    ), false  catch e then warn '^871-38^', rvr e.message; T?.ok false\n  info '^871-37^',  try T?.eq ( isa.positive0.integer 0                       ), true   catch e then warn '^871-38^', rvr e.message; T?.ok false\n  info '^871-37^',  try T?.eq ( isa.positive0.integer 1                       ), true   catch e then warn '^871-38^', rvr e.message; T?.ok false\n  info '^871-37^',  try T?.eq ( isa.positive0.integer Infinity                ), false  catch e then warn '^871-38^', rvr e.message; T?.ok false\n  info '^871-37^',  try T?.eq ( isa.positive0.integer 123456                  ), true   catch e then warn '^871-38^', rvr e.message; T?.ok false\n  info '^871-37^',  try T?.eq ( isa.positive0.integer -1                      ), false  catch e then warn '^871-38^', rvr e.message; T?.ok false\n  info '^871-37^',  try T?.eq ( isa.positive0.integer true                    ), false  catch e then warn '^871-38^', rvr e.message; T?.ok false\n  #.........................................................................................................\n  # T?.throws /unknown type 'foobar'/, -> isa.integer.foobar 24\n  # praise ( to_width k, 20 ), entry for k, entry of types.registry\n  # help types.registry.text\n  # help types.registry.integer\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_collection_of_t = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype } = require '../../../apps/intertype'\n  types         = new Intertype()\n  { declare\n    isa\n    validate  } = types\n  #.........................................................................................................\n  praise '^222-1^', isa.list.of.integer             []\n  praise '^222-1^', isa.list.of.integer             [ 1, ]\n  praise '^222-1^', isa.list.of.integer             [ 1, 'x', ]\n  praise '^222-1^', isa.nonempty.list.of.integer    [ 1, ]\n  praise '^222-1^', isa.nonempty.set.of.integer     [ 1, ]\n  praise '^222-1^', isa.nonempty.set.of.integer     new Set [ 1, ]\n  praise '^222-1^', isa.nonempty.set.of.integer     new Set()\n  praise '^222-1^', isa.set.of.codepoint            new Set \"helo world\\u{20000}\"\n  praise '^222-1^', isa.list.of.text                42\n  praise '^222-1^', isa.list.of.integer             42\n  try praise '^222-1^', isa.integer.of.text             '???' catch error then warn rvr error.message\n  try praise '^222-1^', isa.integer.of.text             42    catch error then warn rvr error.message\n  #.........................................................................................................\n  info '^854-1^',   T?.eq ( isa.list.of.integer                   []                              ), true\n  info '^854-2^',   T?.eq ( isa.list.of.integer                   [ 1, ]                          ), true\n  info '^854-3^',   T?.eq ( isa.list.of.integer                   [ 1, 'x', ]                     ), false\n  info '^854-4^',   T?.eq ( isa.nonempty.list.of.integer          [ 1, ]                          ), true\n  info '^854-5^',   T?.eq ( isa.nonempty.set.of.integer           [ 1, ]                          ), false\n  info '^854-6^',   T?.eq ( isa.nonempty.set.of.integer           new Set [ 1, ]                  ), true\n  info '^854-7^',   T?.eq ( isa.nonempty.set.of.integer           new Set()                       ), false\n  info '^854-8^',   T?.eq ( isa.set.of.codepoint                  new Set \"helo world\\u{20000}\"   ), true\n  info '^854-9^',  T?.eq ( isa.list.of.text                      42                              ), false\n  info '^854-10^',  T?.eq ( isa.list.of.integer                   42                              ), false\n  info '^854-11^',  T?.eq ( isa.list.of.integer.or.text           [ 'abc', 42, ]                  ), true\n  info '^854-12^',  T?.eq ( isa.list.of.optional.integer.or.text  [ 'abc', 42, ]                  ), true\n  info '^854-13^',  T?.eq ( isa.list.of.optional.integer.or.text  [ 'abc', 42, null, ]            ), true\n  info '^854-14^',  T?.eq ( isa.list.of.optional.integer.or.text  [ 'abc', 42, null, true, ]      ), false\n  info '^854-15^',  T?.throws /hedgerow cannot start with `or`/, -> isa.or.text ### throws at declaration time ###\n  info '^854-16^',  T?.throws /hedgerow cannot start with `of`/, -> isa.of.text ### throws at declaration time ###\n  info '^854-17^',  T?.throws /expected type before `of` to be a collection/, -> isa.integer.of.text ### throws at declaration time ###\n  info '^854-18^',  T?.throws /expected type before `of` to be a collection/, -> isa.integer.of.text 42\n  info '^854-19^',  T?.throws /expected type before `of` to be a collection/, -> isa.integer.of.text '???'\n  info '^854-20^',  T?.throws /hedgerow cannot begin or end with `of` or `or`/, -> isa.list.of.list.of 42\n  #.........................................................................................................\n  info '^854-21^',  T?.eq ( isa.list.of.list.of.integer []                                    ), true\n  info '^854-22^',  T?.eq ( isa.list.of.list.of.integer [ [], ]                               ), true\n  info '^854-23^',  T?.eq ( isa.list.of.optional.list.of.integer [ null, ]                    ), true\n  info '^854-24^',  T?.eq ( isa.list.of.optional.list.of.integer [ [], ]                      ), true\n  info '^854-25^',  T?.eq ( isa.list.of.list.of.integer [ [ 1, ], ]                           ), true\n  info '^854-26^',  T?.eq ( isa.list.of.list.of.integer [ [ 1, ], [ 2, 3, ], [ 4, 5, 6, ], ]  ), true\n  #.........................................................................................................\n  info '^854-27^',  T?.eq ( isa.list.of.list.of.integer [ null, ]                             ), false\n  info '^854-28^',  T?.eq ( isa.list.of.optional.list.of.integer [ [ null, ], ]               ), false\n  info '^854-29^',  T?.eq ( isa.list.of.list.of.optional.integer [ null, ]                    ), false\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_even_odd_for_bigints = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype } = require '../../../apps/intertype'\n  types         = new Intertype()\n  { declare\n    isa\n    validate  } = types\n  #.........................................................................................................\n  info '^430-1^', isa.even.numeric 1\n  info '^430-2^', isa.even.numeric 2\n  info '^430-3^', T?.eq ( isa.even.numeric 1                     ), false\n  info '^430-4^', T?.eq ( isa.even.numeric 2                     ), true\n  info '^430-5^', isa.even.numeric 1n\n  info '^430-6^', isa.even.numeric 2n\n  info '^430-7^', T?.eq ( isa.even.numeric 1n                    ), false\n  info '^430-8^', T?.eq ( isa.even.numeric 2n                    ), true\n  # debug isa.even.integer 1n\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_existential_types = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype } = require '../../../apps/intertype'\n  types         = new Intertype()\n  { declare\n    isa\n    validate  } = types\n  #.........................................................................................................\n  info '^430-1^', isa.anything    1\n  info '^430-1^', isa.something   1\n  info '^430-2^', isa.nothing     1\n  info '^430-3^', T?.eq ( isa.anything  1         ), true\n  info '^430-3^', T?.eq ( isa.something 1         ), true\n  info '^430-3^', T?.eq ( isa.nothing   1         ), false\n  info '^430-3^', T?.eq ( isa.anything  false     ), true\n  info '^430-3^', T?.eq ( isa.something false     ), true\n  info '^430-3^', T?.eq ( isa.nothing   false     ), false\n  info '^430-3^', T?.eq ( isa.anything  null      ), true\n  info '^430-3^', T?.eq ( isa.something null      ), false\n  info '^430-3^', T?.eq ( isa.nothing   null      ), true\n  info '^430-3^', T?.eq ( isa.anything  undefined ), true\n  info '^430-3^', T?.eq ( isa.something undefined ), false\n  info '^430-3^', T?.eq ( isa.nothing   undefined ), true\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_empty_and_nonempty = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype } = require '../../../apps/intertype'\n  types         = new Intertype()\n  { declare\n    isa\n    validate  } = types\n  #.........................................................................................................\n  info '^931-1^',   T?.eq ( types.isa.empty     42.5    ), false\n  info '^931-2^',   T?.eq ( types.isa.empty     ''      ), true\n  info '^931-3^',   T?.eq ( types.isa.empty     'x'     ), false\n  info '^931-4^',   T?.eq ( types.isa.empty     []      ), true\n  info '^931-5^',   T?.eq ( types.isa.empty     [ 1, ]  ), false\n  info '^931-6^',   T?.eq ( types.isa.nonempty  42.5    ), false\n  info '^931-7^',   T?.eq ( types.isa.nonempty  ''      ), false\n  info '^931-8^',   T?.eq ( types.isa.nonempty  'x'     ), true\n  info '^931-9^',   T?.eq ( types.isa.nonempty  [ 1, ]  ), true\n  #.........................................................................................................\n  info '^931-10^',  T?.eq ( types.isa.empty.list     42.5    ), false\n  info '^931-11^',  T?.eq ( types.isa.empty.text     ''      ), true\n  info '^931-12^',  T?.eq ( types.isa.empty.text     'x'     ), false\n  info '^931-13^',  T?.eq ( types.isa.empty.list     []      ), true\n  info '^931-14^',  T?.eq ( types.isa.empty.list     [ 1, ]  ), false\n  info '^931-15^',  T?.eq ( types.isa.nonempty.list  42.5    ), false\n  info '^931-16^',  T?.eq ( types.isa.nonempty.text  ''      ), false\n  info '^931-17^',  T?.eq ( types.isa.nonempty.text  'x'     ), true\n  info '^931-18^',  T?.eq ( types.isa.nonempty.list  [ 1, ]  ), true\n  #.........................................................................................................\n  info '^931-19^',  T?.eq ( types.isa.list.empty     42.5    ), false\n  info '^931-20^',  T?.eq ( types.isa.text.empty     ''      ), true\n  info '^931-21^',  T?.eq ( types.isa.text.empty     'x'     ), false\n  info '^931-22^',  T?.eq ( types.isa.list.empty     []      ), true\n  info '^931-23^',  T?.eq ( types.isa.list.empty     [ 1, ]  ), false\n  info '^931-24^',  T?.eq ( types.isa.list.nonempty  42.5    ), false\n  info '^931-25^',  T?.eq ( types.isa.text.nonempty  ''      ), false\n  info '^931-26^',  T?.eq ( types.isa.text.nonempty  'x'     ), true\n  info '^931-27^',  T?.eq ( types.isa.list.nonempty  [ 1, ]  ), true\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_declaration_with_per_key_clauses = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype } = require '../../../apps/intertype'\n  #.........................................................................................................\n  do =>\n    types         = new Intertype()\n    { declare\n      create\n      validate\n      isa       } = types\n    info '^443322^', k, v for k, v of types.registry\n    whisper '^46464^', '————————————————————————————————————————————————————————'\n    #.......................................................................................................\n    types.declare.quantity\n      $value:   'float'\n      $unit:    'nonempty.text'\n    help '^960-1^', isa.quantity null\n    help '^960-2^', isa.quantity {}\n    help '^960-3^', isa.quantity { value: 1024, unit: 'kB', }\n  #.........................................................................................................\n  do =>\n    types         = new Intertype()\n    { declare\n      create\n      validate\n      isa       } = types\n    whisper '^46464^', '————————————————————————————————————————————————————————'\n    declare.quantity\n      $value: 'float'\n      $unit:  'nonempty.text'\n      default:\n        value:    0\n        unit:     null\n    #.........................................................................................................\n    # d = { value: 4, unit: 'kB', }\n    # T?.eq ( validate.quantity d ), d\n    # T?.ok ( validate.quantity d ) is d\n    # # info '^3453^', create.quantity { unit: 'kB', }\n    # info '^3453^', types.registry.quantity.test.toString()\n    # # try validate.quantity {}                           catch error then warn GUY.trm.reverse error.message\n    # # try validate.quantity { unit: '', }                catch error then warn GUY.trm.reverse error.message\n    # # try validate.quantity { unit: 'kB', }              catch error then warn GUY.trm.reverse error.message\n    help '^960-4^', isa.quantity null\n    help '^960-5^', isa.quantity {}\n    help '^960-6^', isa.quantity { value: 1024, unit: 'kB', }\n    # try validate.quantity { value: 1024, unit: 'kB', } catch error then warn GUY.trm.reverse error.message\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@_demo_type_cfgs_as_functions_1 = ->\n  whisper '#############################################'\n  class F extends Function\n    constructor: ( ...P ) ->\n      super '...P', 'return this._me.do(...P)'\n      @_me      = @bind @\n      @_me.hub  = @\n      return @_me\n    do: ( x ) -> x ** 2\n  info '^981-1^', f = new F()\n  info '^981-1^', f._me\n  info '^981-1^', f.hub\n  info '^981-1^', f instanceof F\n  info '^981-1^', f()\n  info '^981-1^', f 42\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_demo_type_cfgs_as_functions_2 = ->\n  whisper '#############################################'\n  class Intertype\n    create_type_cfg: ( cfg ) ->\n      defaults  = { extras: true, collection: false, type: null, }\n      cfg       = { defaults..., cfg..., }\n      name      = cfg.type\n      R         = ( ( x ) -> x ** 2 ).bind @\n      GUY.props.hide R, k, v for k, v of cfg\n      GUY.props.hide R, 'name', name\n      R         = new GUY.props.Strict_owner { target: R, freeze: true, }\n      return R\n  types = new Intertype()\n  f     = types.create_type_cfg { type: 'foobar', }\n  urge '^982-1^', ( require 'util' ).inspect f  # [Function: foobar]\n  urge '^982-2^', rpr f                         # [Function: foobar]\n  urge '^982-3^', f                             # [Function: foobar]\n  urge '^982-4^', f.toString()                  # function () { [native code] }\n  urge '^982-5^', typeof f                      # function\n  urge '^982-6^', { f, }                        # { f: [Function: foobar] }\n  urge '^982-7^', Object.isFrozen f             # true\n  urge '^982-8^', Object.isSealed f             # true\n  # Object is frozen, sealed, and has a strict `get()`ter:\n  try f.collection = true catch error then warn rvr error.message\n  try f.xxx               catch error then warn rvr error.message\n  try f.xxx = 111         catch error then warn rvr error.message\n  info '^982-9^', f.name\n  info '^982-10^', f 42\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_exception_guarding = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype\n    Intertype_user_error } = require '../../../apps/intertype'\n  #.........................................................................................................\n  do =>                                                                                                      # 1  Branden\n    types = new Intertype { errors: false, }                                                                 # 2  Thomasine\n    T?.eq types.cfg.errors, false                                                                            # 3  Kellee\n    T?.eq types.state.error, null                                                                            # 4  Latosha\n    types.declare.oops          ( x ) -> throw new Error 'oops'                                              # 5  Marline\n    types.declare.oops_anyway   ( x ) -> throw new Intertype_user_error 'oops'                               # 6  Hana\n    types.declare.nevah         ( x ) -> false                                                               # 7  Inger\n    types.isa.oops 42\n    #....................................................................................................... # 8  Ebony\n    T?.eq ( types.isa.oops 42 ), false;                                                                      # 9  Tanesha\n    T?.ok types.state.error instanceof Error                                                                 # 10 Jayna\n    T?.eq types.state.error.message, 'oops'                                                                  # 11 Tobias\n    #....................................................................................................... # 12 Leisha\n    T?.eq ( types.isa.optional.list.of.oops 42 ), false                                                      # 13 Raina\n    T?.eq types.state.error, null                                                                            # 14 Hermila\n    T?.eq ( types.isa.optional.list.of.oops [] ), true                                                       # 15 Kevin\n    T?.eq types.state.error, null                                                                            # 16 Erick\n    T?.eq ( types.isa.optional.list.of.oops null ), true                                                     # 17 Jody\n    T?.eq types.state.error, null                                                                            # 18 Alex\n    T?.eq ( types.isa.optional.list.of.oops [ 42, ] ), false                                                 # 15 Kevin\n    T?.ok types.state.error instanceof Error                                                                 # 10 Jayna\n    T?.eq types.state.error.message, 'oops'                                                                  # 11 Tobias\n    #....................................................................................................... # 19 Morgan\n    T?.throws /oops/, => types.isa.oops_anyway 42                                                            # 20 Britta\n    T?.eq types.state.error, null                                                                            # 18 Alex\n    #....................................................................................................... # 23 Gillian\n    T?.eq ( types.isa.nevah 42 ), false                                                                      # 24 Collin\n    T?.eq types.state.error, null                                                                            # 25 Tijuana\n    return null                                                                                              # 26 Fannie\n  #......................................................................................................... # 27 Carl\n  do =>                                                                                                      # 28 Alia\n    types = new Intertype()                                                                                  # 29 Nella\n    T?.eq types.cfg.errors, true                                                                             # 30 Mauricio\n    T?.eq types.state.error, null                                                                            # 31 Fe\n    types.declare.oops          ( x ) -> throw new Error 'oops'                                              # 32 Edra\n    types.declare.oops_anyway   ( x ) -> throw new Intertype_user_error 'oops'                               # 33 Corazon\n    types.declare.nevah         ( x ) -> false                                                               # 34 Nola\n    #....................................................................................................... # 35 Laine\n    T?.throws /oops/, => types.isa.oops 42                                                                   # 36 Joanna\n    T?.eq types.state.error, null                                                                            # 37 Vito\n    T?.eq ( types.isa.nevah 42 ), false                                                                      # 38 Talisha\n    T?.eq types.state.error, null                                                                            # 39 Alex\n    #....................................................................................................... # 40 Latina\n    T?.throws /oops/, => types.isa.oops_anyway 42                                                            # 41 Francisca\n    T?.eq types.state.error, null                                                                            # 25 Tijuana\n    return null                                                                                              # 44 Zenaida\n  #.........................................................................................................\n  do =>\n    T?.throws /not a valid Intertype_constructor_cfg/, => types = new Intertype { errors: 42, }\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_check_complex_recursive_types = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype } = require '../../../apps/intertype'\n  #.........................................................................................................\n  types             = new Intertype()\n  { declare\n    isa\n    validate\n    create        } = types\n  #.........................................................................................................\n  declare.quantity\n    $value:         'float'\n    $unit:          'nonempty.text'\n    extras:         false\n    default:\n      value:    0\n      unit:     null\n  #.........................................................................................................\n  declare.rectangle\n    $width:         'quantity'\n    $height:        'quantity'\n    extras:         false\n    default:\n      width:        { value: 0, unit: 'mm', }\n      height:       { value: 0, unit: 'mm', }\n  #.........................................................................................................\n  debug '^342-1^', T?.eq ( isa.quantity           { value: 0, unit: 'mm', }                                                                                                                                 \\\n                                                                                                    ), true\n  debug '^342-1^', T?.eq ( isa.rectangle          { width: { value: 0, unit: 'mm', }, height: { value: 0, unit: 'mm', }, }                                                                                  \\\n                                                                                                    ), true\n  debug '^342-2^', T?.eq ( isa.list.of.quantity   [ { value: 0, unit: 'mm', }, { value: 0, unit: 'mm', }, ]                                                                                                 \\\n                                                                                                    ), true\n  debug '^342-2^', T?.eq ( isa.list.of.rectangle  [ { width: { value: 0, unit: 'mm', }, height: { value: 0, unit: 'mm', }, }, { width: { value: 0, unit: 'mm', }, height: { value: 0, unit: 'mm', }, }, ]   \\\n                                                                                                    ), true\n  debug '^342-3^', T?.eq ( isa.rectangle          []                                                                                                                                                        \\\n                                                                                                    ), false\n  debug '^342-4^', T?.eq ( isa.rectangle          { value: 0, unit: null, }                                                                                                                                 \\\n                                                                                                    ), false\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@_intertype_isa_arity_check = ( T, done ) ->\n  T?.halt_on_error()\n  { Intertype } = require '../../../apps/intertype'\n  #.........................................................................................................\n  types = new Intertype()\n  debug '^3454^', try types.isa.integer 42                          catch e then warn rvr e.message\n  debug '^3454^', try types.isa.integer 42, 43                      catch e then warn rvr e.message\n  debug '^3454^', try types.isa.optional.integer null               catch e then warn rvr e.message\n  debug '^3454^', try types.isa.optional.integer null, null         catch e then warn rvr e.message\n  debug '^3454^', try types.isa.optional.integer 42, null           catch e then warn rvr e.message\n  debug '^3454^', try types.isa.optional.list.of.integer 42, null   catch e then warn rvr e.message\n  debug '^3454^', try types.isa.optional.list.of.integer [], null   catch e then warn rvr e.message\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_normalize_type_cfg = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype\n    Type_factory  } = require '../../../apps/intertype'\n  types = new Intertype()\n  TF    = new Type_factory types\n  #.........................................................................................................\n  prep = ( d ) ->\n    R = {}\n    for k in ( Object.keys d ).sort()\n      v       = d[ k ]\n      R[ k ]  = if _types.isa.function v then \"f(#{v.name})\" else v\n    if d.fields?\n      for k, v of d.fields\n        d.fields[ k ] = \"f(#{v.name})\"\n    return R\n  # debug prep TF._normalize_type_cfg 't', 'list.of.integer'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ 't'                                                                     ], null, /not a valid Type_factory_type_dsc/,                ]\n    [ [ { name: 't', collection: false, }                                       ], null, /not a valid Type_factory_type_dsc/,                ]\n    [ ['t', ( ( x ) -> @isa.object x ), { x: 'float', y: 'float', }             ], null, /expected a function or a nonempty text for `isa`/, ]\n    [ [ 't', 'list.of.integer'                                                  ], { collection: false, create: null, extras: true, fields: null, freeze: false, isa: 'f(t:list.of.integer)', name: 't', typename: 't', override: false, replace: false, }, ]\n    [ [ { name: 't', collection: false, isa: 'positive0.integer', }             ], { collection: false, create: null, extras: true, fields: null, freeze: false, isa: 'f(t:positive0.integer)', name: 't', typename: 't', override: false, replace: false, }, ]\n    [ [ 't', { collection: false, }, 'list.of.integer'                          ], { collection: false, create: null, extras: true, fields: null, freeze: false, isa: 'f(t:list.of.integer)', name: 't', typename: 't', override: false, replace: false, }, ]\n    [ [ 't', { collection: false, }, ( x ) -> @isa.positive0.integer x          ], { collection: false, create: null, extras: true, fields: null, freeze: false, isa: 'f(t:#0)', name: 't', typename: 't', override: false, replace: false, }, ]\n    [ [ 't', ( x ) -> @isa.positive0.integer x                                  ], { collection: false, create: null, extras: true, fields: null, freeze: false, isa: 'f(t:#0)', name: 't', typename: 't', override: false, replace: false, }, ]\n    [ [ 't', { collection: false, isa: ( ( x ) -> @isa.positive0.integer x ), } ], { collection: false, create: null, extras: true, fields: null, freeze: false, isa: 'f(t:#0)', name: 't', typename: 't', override: false, replace: false, }, ]\n    [ [ 'quantity', { $value: 'float', $unit: 'nonempty.text', }                ], { collection: false, create: null, extras: true, fields: { value: 'f(quantity.value:float)', unit: 'f(quantity.unit:nonempty.text)' }, freeze: false, isa: 'f(quantity:object)', name: 'quantity', typename: 'quantity', override: false, replace: false, }, ]\n    [ [ 'foobar', { $foo: 'text', $bar: 'text', create: ( -> ), default: {}, extras: false, freeze: true, seal: true, collection: true, }, ( ( x ) -> x instanceof Foobar )                ], \\\n      { collection: true, create: 'f(create)', default: {}, extras: false, fields: { foo: 'f(foobar.foo:text)', bar: 'f(foobar.bar:text)' }, freeze: true, isa: 'f(foobar:#0)', name: 'foobar', seal: true, typename: 'foobar', override: false, replace: false, }, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    # debug '^23-1^', { probe, matcher, error, }\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      resolve prep TF._normalize_type_cfg probe...\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_tracing = ( T, done ) ->\n  T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype { errors: false, }\n  noresult          = Symbol 'noresult'\n  { declare\n    isa\n    validate\n    create        } = types\n  declare.quantity\n    $value:         'float'\n    $unit:          'nonempty.text'\n    extras:         false\n    default:\n      value:    0\n      unit:     null\n  declare.rectangle\n    $width:         'quantity'\n    $height:        'quantity'\n    extras:         false\n    default:\n      width:        { value: 0, unit: 'mm', }\n      height:       { value: 0, unit: 'mm', }\n  declare.oops      ( x ) -> throw new Error 'oops'\n  probes_and_matchers = [\n    [ [ 'quantity',                                           [ { value: null, unit: 'foo', }, ],                                                                                                                         ], ]\n    [ [ 'quantity',                                           { value: null, unit: 'foo', },                                                                                                                              ], ]\n    [ [ 'quantity',                                           { value: 432, unit: 'foo', },                                                                                                                               ], ]\n    [ [ 'rectangle',                                          [ 1, ],                                                                                                                                                         ], ]\n    [ [ 'rectangle',                                          { value: 0, unit: 'mm', },                                                                                                                                  ], ]\n    [ [ 'rectangle',                                          { width: { value: 0, unit: 'mm', }, height: { value: 0, unit: 'mm', }, },                                                                                   ], ]\n    [ [ 'list.of.rectangle',                                  [ { width: { value: 0, unit: 'mm', }, height: { value: 0, unit: 'mm', }, }, { width: { value: 0, unit: 'mm', }, height: { value: 0, unit: 'mm', }, }, ],    ], ]\n    [ [ 'list.of.rectangle',                                  [ { width: { value: 0, unit: 'mm', }, height: { value: 0, unit: 'mm', }, }, { width: { value: null, unit: 'mm', }, height: { value: 0, unit: 'mm', }, }, ], ], ]\n    [ [ 'integer.or.boolean',                                 42,                                                                                                                                                         ], ]\n    [ [ 'integer.or.boolean',                                 true,                                                                                                                                                       ], ]\n    [ [ 'integer.or.boolean',                                 'wat',                                                                                                                                                      ], ]\n    [ [ 'integer.or.boolean.or.text',                         'wat',                                                                                                                                                      ], ]\n    [ [ 'integer.or.boolean.or.text',                         'wat',                                                                                                                                                      ], ]\n    [ [ 'integer.or.boolean.or.text.or.list.of.integer',      [ 2, ],                                                                                                                                                         ], ]\n    [ [ 'integer.or.text.or.bigint.or.oops',                  [ 3, ],                                                                                                                                                         ], ]\n    [ [ 'object',                                             [ 4, ],                                                                                                                                                         ], ]\n    [ [ 'oops',                                               [ 5, ],                                                                                                                                                         ], ]\n    [ [ 'optional.list.of.quantity',                          [ { value: null, unit: 'foo', }, ],                                                                                                                         ], ]\n    [ [ 'optional.list.of.optional.integer.or.nonempty.text', [ 'foo', ],                                                                                                                                                 ], ]\n    [ [ 'optional.list.of.optional.integer.or.nonempty.text', [ 'foo', 'bar', 'baz', 1234, ],                                                                                                                             ], ]\n    [ [ 'optional.list.of.optional.integer.or.nonempty.text', [ 'foo', 'bar', 'baz', 3.5, ],                                                                                                                              ], ]\n    [ [ 'optional.list.of.optional.integer.or.nonempty.text', false,                                                                                                                                                      ], ]\n    # [ [ 'optional.list.of.optional.integer.or.nonempty.text', null, ], ] ### TAINT doesn't work??? ###\n    [ [ 'integer.or.boolean.or.text.or.list.of.integer',      [ 'x', ],                                                                                                                                                   ], ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ hedgerow, value, ] = probe\n      echo()\n      echo()\n      echo GUY.trm.grey '—————————————————————————————————————————————————————————————————'\n      echo { hedgerow, value, }\n      echo()\n      error   = null\n      result  = false\n      hedges  = hedgerow.split '.'\n      for verb in [ 'isa', ]\n      # for verb in [ 'isa', 'validate', ]\n        result = ( GUY.props.resolve_property_chain types[ verb ], hedges ) value\n        echo types.get_state_report { format: 'all', }\n        echo types.get_state_report { format: 'all', refs: true, }\n        echo types.get_state_report { format: 'failing', }\n        echo types.get_state_report { format: 'all', colors: false, }\n      resolve undefined\n  # debug '^15345^', isa.optional.object 42\n  # debug '^15345^', isa.optional.object {}\n  # debug '^15345^', ( isa.object 42 ), types.state\n  # debug '^15345^', ( isa.object {} ), types.state\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@_intertype_tracing_2 = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype { errors: false, }\n  noresult          = Symbol 'noresult'\n  { declare\n    isa\n    validate\n    create        } = types\n  declare.quantity\n    $value:         'float'\n    $unit:          'nonempty.text'\n    extras:         false\n    default:\n      value:    0\n      unit:     null\n  declare.rectangle\n    $width:         'quantity'\n    $height:        'quantity'\n    extras:         false\n    default:\n      width:        { value: 0, unit: 'mm', }\n      height:       { value: 0, unit: 'mm', }\n  declare.oops      ( x ) -> throw new Error 'oops'\n  #.........................................................................................................\n  cleanup = ( text ) ->\n    R = text\n    R = R.replace /\\n/g, '⏎'\n    R = R.replace /\\s+/g, ' '\n    return R\n  #.........................................................................................................\n  do =>\n    isa.list.of.rectangle [ { width: { value: 0, unit: 'mm', }, height: { value: 0, unit: 'mm', }, }, { width: { value: 0, unit: 'mm', }, height: { value: 0, unit: 'mm', }, }, ]\n    echo types.get_state_report { format: 'all', }\n    result = cleanup types.get_state_report { width: 191, format: 'all', colors: false, }\n    urge rpr result\n    T?.eq result, \" T isa list [ { width: { value: 0, unit: 'mm' }, height: { value: 0, unit: 'mm' } }, { width: { value: 0, unit: 'mm' }, height: { …⏎ T isa of [ { width: { value: 0, unit: 'mm' }, height: { value: 0, unit: 'mm' } }, { width: { value: 0, unit: 'mm' }, height: { …⏎ T isa object { width: { value: 0, unit: 'mm' }, height: { value: 0, unit: 'mm' } } ⏎ T isa rectangle { width: { value: 0, unit: 'mm' }, height: { value: 0, unit: 'mm' } } ⏎ T isa rectangle:object { width: { value: 0, unit: 'mm' }, height: { value: 0, unit: 'mm' } } ⏎ T isa object { value: 0, unit: 'mm' } ⏎ T isa quantity { value: 0, unit: 'mm' } ⏎ T isa quantity:object { value: 0, unit: 'mm' } ⏎ T isa float 0 ⏎ T isa quantity.value:float { value: 0, unit: 'mm' } ⏎ T isa nonempty 'mm' ⏎ T isa text 'mm' ⏎ T isa quantity.unit:nonempty.text { value: 0, unit: 'mm' } ⏎ T isa rectangle.width:quantity { width: { value: 0, unit: 'mm' }, height: { value: 0, unit: 'mm' } } ⏎ T isa object { value: 0, unit: 'mm' } ⏎ T isa quantity { value: 0, unit: 'mm' } ⏎ T isa quantity:object { value: 0, unit: 'mm' } ⏎ T isa float 0 ⏎ T isa quantity.value:float { value: 0, unit: 'mm' } ⏎ T isa nonempty 'mm' ⏎ T isa text 'mm' ⏎ T isa quantity.unit:nonempty.text { value: 0, unit: 'mm' } ⏎ T isa rectangle.height:quantity { width: { value: 0, unit: 'mm' }, height: { value: 0, unit: 'mm' } } ⏎ T isa object { width: { value: 0, unit: 'mm' }, height: { value: 0, unit: 'mm' } } ⏎ T isa rectangle { width: { value: 0, unit: 'mm' }, height: { value: 0, unit: 'mm' } } ⏎ T isa rectangle:object { width: { value: 0, unit: 'mm' }, height: { value: 0, unit: 'mm' } } ⏎ T isa object { value: 0, unit: 'mm' } ⏎ T isa quantity { value: 0, unit: 'mm' } ⏎ T isa quantity:object { value: 0, unit: 'mm' } ⏎ T isa float 0 ⏎ T isa quantity.value:float { value: 0, unit: 'mm' } ⏎ T isa nonempty 'mm' ⏎ T isa text 'mm' ⏎ T isa quantity.unit:nonempty.text { value: 0, unit: 'mm' } ⏎ T isa rectangle.width:quantity { width: { value: 0, unit: 'mm' }, height: { value: 0, unit: 'mm' } } ⏎ T isa object { value: 0, unit: 'mm' } ⏎ T isa quantity { value: 0, unit: 'mm' } ⏎ T isa quantity:object { value: 0, unit: 'mm' } ⏎ T isa float 0 ⏎ T isa quantity.value:float { value: 0, unit: 'mm' } ⏎ T isa nonempty 'mm' ⏎ T isa text 'mm' ⏎ T isa quantity.unit:nonempty.text { value: 0, unit: 'mm' } ⏎ T isa rectangle.height:quantity { width: { value: 0, unit: 'mm' }, height: { value: 0, unit: 'mm' } } ⏎ T isa list.of.rectangle [ { width: { value: 0, unit: 'mm' }, height: { value: 0, unit: 'mm' } }, { width: { value: 0, unit: 'mm' }, height: { …⏎\"\n  do =>\n    isa.list.of.rectangle [ { width: { value: 0, unit: 'mm', }, height: { value: 0, unit: 'mm', }, }, { width: { value: null, unit: 'mm', }, height: { value: 0, unit: 'mm', }, }, ]\n    echo types.get_state_report { format: 'all', }\n    echo types.get_state_report { format: 'failing', }\n    result = cleanup types.get_state_report { width: 191, format: 'failing', colors: false, }\n    urge rpr result\n    T?.eq result, \" F isa float null ⏎ F isa quantity.value:float { value: null, unit: 'mm' } ⏎ F isa rectangle.width:quantity { width: { value: null, unit: 'mm' }, height: { value: 0, unit: 'mm' } } ⏎ F isa list.of.rectangle [ { width: { value: 0, unit: 'mm' }, height: { value: 0, unit: 'mm' } }, { width: { value: null, unit: 'mm' }, height:…⏎\"\n  do =>\n    isa.list.of.rectangle [ { width: { value: 0, unit: 'mm', }, height: { value: 0, unit: 'mm', }, }, { width: { value: null, unit: 'mm', }, height: { value: 0, unit: 'mm', }, }, ]\n    echo types.get_state_report { format: 'failing', }\n    echo types.get_state_report { format: 'short', }\n    echo types.get_state_report { format: 'short', colors: false, }\n    result = cleanup types.get_state_report { width: 191, format: 'short', colors: false, }\n    urge rpr result\n    T?.eq result, \"F isa float null ◀ F isa quantity.value:float { value: null, unit: 'mm' } ◀ F isa rectangle.width:quantity { width: { value: null, unit: 'mm' }, height: { v…\"\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_improved_validation_errors = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype { errors: false, }\n  noresult          = Symbol 'noresult'\n  { declare\n    isa\n    validate\n    create        } = types\n  declare.quantity\n    $value:         'float'\n    $unit:          'nonempty.text'\n    extras:         false\n    default:\n      value:    0\n      unit:     null\n  declare.rectangle\n    $width:         'quantity'\n    $height:        'quantity'\n    extras:         false\n    default:\n      width:        { value: 0, unit: 'mm', }\n      height:       { value: 0, unit: 'mm', }\n  declare.oops      ( x ) -> throw new Error 'oops'\n  #.........................................................................................................\n  cleanup = ( text ) ->\n    R = text\n    R = R.replace /\\n/g, '⏎'\n    R = R.replace /\\s+/g, ' '\n    return R\n  #.........................................................................................................\n  good_probe = [\n    { width: { value: 0,    unit: 'mm', }, height: { value: 0, unit: 'mm', }, },\n    { width: { value: 1234, unit: 'mm', }, height: { value: 0, unit: 'mm', }, }, ]\n  #.........................................................................................................\n  bad_probe = [\n    { width: { value: 0,    unit: 'mm', }, height: { value: 0, unit: 'mm', }, },\n    { width: { value: null, unit: 'mm', }, height: { value: 0, unit: 'mm', }, }, ]\n  #.........................................................................................................\n  do =>\n    result = validate.optional.list.of.rectangle null\n    T?.ok result is null\n  #.........................................................................................................\n  do =>\n    result = validate.optional.list.of.rectangle good_probe\n    T?.ok result is good_probe\n  #.........................................................................................................\n  do =>\n    # debug '^4234^', validate.optional.list.of.rectangle null\n    try\n      validate.optional.list.of.rectangle 123\n    catch error\n      warn '^443-1^', error.message\n  #.........................................................................................................\n  do =>\n    try\n      validate.list.of.rectangle bad_probe\n    catch error\n      warn '^443-2^', rvr error.message\n      result = error.message\n      T?.ok ( result.match \\\n        /\\(Intertype_validation_error\\) not a valid list\\.of\\.rectangle; failing tests: F validate float null ◀ F validate quantity.value:float \\{/ \\\n          ) isnt null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@_intertype_demo_improved_validation_errors = ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype { errors: false, }\n  try\n    types.validate.text 42\n  catch error\n    warn error.message\n  types.validate.text 42\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_demo_postconditions = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types = new Intertype()\n  { declare\n    isa\n    validate\n    create        } = types\n  #.........................................................................................................\n  plus_1 = ( a, b ) ->\n    R = a + b\n    return try validate.float.or.bigint R catch error\n      0\n  #.........................................................................................................\n  plus_2 = ( a, b ) ->\n    R = a + b\n    return try validate.float.or.bigint R catch error\n      throw new Error \"these values can not be added: a: #{rpr a}, b: #{rpr b}\"\n  #.........................................................................................................\n  debug '^210-1^',  try rpr plus_1 4, 6           catch error then warn rvr error.message; './.'\n  debug '^210-2^',  try rpr plus_1 4n, 6n         catch error then warn rvr error.message; './.'\n  debug '^210-2^',  try rpr plus_2 4n, 6n         catch error then warn rvr error.message; './.'\n  debug '^210-3^',  try rpr plus_1 '4', '6'       catch error then warn rvr error.message; './.'\n  debug '^210-4^',  try rpr plus_1 '4', 6         catch error then warn rvr error.message; './.'\n  debug '^210-5^',  try rpr plus_1 4, '6'         catch error then warn rvr error.message; './.'\n  debug '^210-6^',  try rpr plus_1 4, true        catch error then warn rvr error.message; './.'\n  debug '^210-7^',  try rpr plus_1 4, false       catch error then warn rvr error.message; './.'\n  debug '^210-8^',  try rpr plus_1 4, null        catch error then warn rvr error.message; './.'\n  debug '^210-9^',  try rpr plus_1 4, undefined   catch error then warn rvr error.message; './.'\n  debug '^210-10^', try rpr plus_2 4, undefined   catch error then warn rvr error.message; './.'\n  debug '^210-11^', try rpr plus_2 4, {}          catch error then warn rvr error.message; './.'\n  debug '^210-3^',  try rpr plus_2 '4', '6'       catch error then warn rvr error.message; './.'\n  # T?.eq ( )\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@_intermezzo_private_class_features_in_coffeescript = ->\n  ### thx to https://crimefighter.svbtle.com/using-private-methods-in-coffeescript ###\n  class SomeClass\n    # this line is identical to `publicMethod: ->`\n    this::publicMethod = -> '*' + privateMethod() + '*'\n    privateProperty = 'foo'\n    privateMethod = -> privateProperty\n  #.........................................................................................................\n  x = new SomeClass()\n  for key from GUY.props.walk_keys x, { hidden: true, symbols: true, builtins: true, }\n    debug '^342-1^', key\n  info '^343-2^', x.publicMethod()\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_equals_distinguishes_positive_from_negative_zero = ( T, done ) ->\n  { Intertype }   = require '../../../apps/intertype'\n  types           = new Intertype()\n  debug '^34-1^', types.equals -0, +0\n  debug '^34-2^', types.equals +0, +0\n  debug '^34-3^', types.equals -0, -0\n  T?.eq ( types.equals        -0, +0    ), false\n  T?.eq ( GUY.samesame.equals -0, +0    ), false\n  T?.eq ( types.equals        NaN, NaN  ), true\n  T?.eq ( GUY.samesame.equals NaN, NaN  ), true\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_can_use_detached_type_of_method = ( T, done ) ->\n  { Intertype }   = require '../../../apps/intertype'\n  types           = new Intertype()\n  { type_of }     = types\n  T?.eq ( type_of 55          ), 'float'\n  T?.eq ( type_of {}          ), 'object'\n  T?.eq ( type_of ->          ), 'function'\n  T?.eq ( type_of -> await x  ), 'asyncfunction'\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_type_regex = ( T, done ) ->\n  { Intertype }   = require '../../../apps/intertype'\n  #.........................................................................................................\n  show_error = ( error ) -> warn rvr ( error.message.split /\\n/ )[ 0 ]\n  #.........................................................................................................\n  do ->\n    types           = new Intertype()\n    debug '^77-1^',     types.type_of /x/\n    debug '^77-2^',     types.isa.regex /x/\n    debug '^77-3^', not types.isa.regex 'x'\n    debug '^77-4^', not types.isa.regex 42\n    T?.eq ( types.type_of /x/ ), 'regex'\n    T?.ok     types.isa.regex /x/\n    T?.ok not types.isa.regex 'x'\n    T?.ok not types.isa.regex 42\n  #.........................................................................................................\n  do ->\n    types           = new Intertype()\n    types.declare.foo\n      fields:\n        bar:    'text'\n      default:\n        bar:    'baz'\n    debug '^77-5^', try types.create.foo()                  catch e then show_error e\n    debug '^77-6^', try types.create.foo {}                 catch e then show_error e\n    debug '^77-7^', try types.create.foo { bar: 'helo', }   catch e then show_error e\n    # debug '^77-8^', try types.create.foo { bar: /world/y, } catch e then show_error e\n  #.........................................................................................................\n  do ->\n    types           = new Intertype()\n    types.declare.foo\n      fields:\n        bar:    'regex'\n      default:\n        bar:    /baz/\n    debug '^77-9^', try types.create.foo()                  catch e then show_error e\n    debug '^77-10^', try types.create.foo {}                 catch e then show_error e\n    # debug '^77-11^', try types.create.foo { bar: 'helo', }   catch e then show_error e\n    debug '^77-12^', try types.create.foo { bar: /world/y, } catch e then show_error e\n  #.........................................................................................................\n  do ->\n    types           = new Intertype()\n    types.declare.foo\n      fields:\n        bar:    'text.or.regex'\n      default:\n        bar:    /baz/\n    debug '^77-13^', try types.create.foo()                  catch e then show_error e\n    debug '^77-14^', try types.create.foo {}                 catch e then show_error e\n    debug '^77-15^', try types.create.foo { bar: 'helo', }   catch e then show_error e\n    debug '^77-16^', try types.create.foo { bar: /world/y, } catch e then show_error e\n    T?.eq ( types.create.foo()                  ), { bar: /baz/, }\n    T?.eq ( types.create.foo {}                 ), { bar: /baz/, }\n    T?.eq ( types.create.foo { bar: 'helo', }   ), { bar: 'helo', }\n    T?.eq ( types.create.foo { bar: /world/y, } ), { bar: /world/y, }\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_has_type_for_negative_zero = ( T, done ) ->\n  { Intertype }   = require '../../../apps/intertype'\n  types           = new Intertype()\n  #.........................................................................................................\n  T?.eq ( types.isa.positive0 +0 ), true\n  T?.eq ( types.isa.negative0 -0 ), true\n  T?.eq ( types.isa.positive  +0 ), true\n  T?.eq ( types.isa.negative  -0 ), true\n  #.........................................................................................................\n  T?.eq ( types.isa.negative  +0 ), false\n  T?.eq ( types.isa.negative0 +0 ), false\n  T?.eq ( types.isa.positive0 -0 ), false\n  T?.eq ( types.isa.positive  -0 ), false\n  T?.eq ( types.isa.positive1 -0 ), false\n  T?.eq ( types.isa.positive1 +0 ), false\n  T?.eq ( types.isa.negative1 -0 ), false\n  T?.eq ( types.isa.negative1 +0 ), false\n  #.........................................................................................................\n  T?.eq ( types.isa.zero          -0 ), true\n  T?.eq ( types.isa.zero          +0 ), true\n  T?.eq ( types.isa.negative.zero -0 ), true\n  T?.eq ( types.isa.positive.zero +0 ), true\n  T?.eq ( types.isa.positive.zero -0 ), false\n  T?.eq ( types.isa.negative.zero +0 ), false\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_has_data_property = ( T, done ) ->\n  { Intertype }   = require '../../../apps/intertype'\n  types           = new Intertype()\n  #.........................................................................................................\n  T?.ok types.isa.object types.data\n  types.declare 'foobar', ( x ) -> ( @data.foobar ?= [] ).push x; return true\n  types.isa.foobar 42\n  types.isa.foobar \"yes\"\n  types.validate.foobar false\n  T?.eq types.data, { foobar: [ 42, \"yes\", false, ] }\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_ordering_of_field_and_isa_tests = ( T, done ) ->\n  { Intertype }   = require '../../../apps/intertype'\n  types           = new Intertype()\n  #.........................................................................................................\n  collector       = []\n  types.declare 'foobar',\n    $myfield: 'cardinal'\n    isa: ( x ) -> collector.push x; return true\n  types.validate.foobar { myfield: 42, }\n  try types.validate.foobar { myfield: 1.2, } catch e then warn rvr e.message\n  ### NOTE because `isa()` is now called after fields are validated, it will never be called if any field\n  is nonconformant, so only the tracing of the first probe is present in the collector: ###\n  T?.eq collector, [ { myfield: 42 } ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_can_use_subobject_fields = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype { errors: false, }\n  noresult          = Symbol 'noresult'\n  { declare\n    isa\n    validate\n    create        } = types\n  declare.quantity\n    fields:\n      value:         'float'\n      unit:          'nonempty.text'\n    extras:         false\n    default:\n      value:    0\n      unit:     null\n  declare.rectangle\n    fields:\n      width:         'quantity'\n      height:        'quantity'\n    extras:         false\n    default:\n      width:        { value: 0, unit: 'mm', }\n      height:       { value: 0, unit: 'mm', }\n  #.........................................................................................................\n  T?.throws /not a valid quantity/, -> validate.quantity null\n  T?.throws /not a valid quantity/, -> validate.quantity { unit: 'kg', }\n  T?.eq ( validate.quantity { value: 0, unit: 'kg', } ), { value: 0, unit: 'kg', }\n  T?.eq ( create.quantity { unit: 'kg', } ), { value: 0, unit: 'kg', }\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_cast = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype { errors: false, }\n  collector         = []\n  { declare\n    isa\n    type_of\n    validate\n    create\n    cast          } = types\n  declare.quantity\n    fields:\n      value:         'float'\n      unit:          'nonempty.text'\n    extras:         false\n    default:\n      value:    0\n      unit:     null\n    cast: ( x ) ->\n      T?.ok @ instanceof Intertype\n      T?.ok @ is types\n      return x unless @isa.nonempty.text x\n      return x unless ( match = x.match /^(?<value>.*?)(?<unit>\\D*)$/ )?\n      { value\n        unit  } = match.groups\n      value     = parseFloat value\n      return x unless isa.float value\n      return x unless isa.nonempty.text unit\n      return { value, unit, }\n  declare.rectangle\n    fields:\n      width:         'quantity'\n      height:        'quantity'\n    extras:         false\n    default:\n      width:        { value: 0, unit: 'mm', }\n      height:       { value: 0, unit: 'mm', }\n    cast: ( width, height ) ->\n      T?.ok @ instanceof Intertype\n      T?.ok @ is types\n      return\n        width:  { value: width,   unit: 'mm', }\n        height: { value: height,  unit: 'mm', }\n  #.........................................................................................................\n  # T?.eq ( type_of types.registry.quantity.cast ), 'function'\n  T?.ok isa.quantity { value: 102, unit: 'kg', }\n  show = ( x ) -> info '^show@454^', rpr x; x\n  debug '^4456-1^', isa.quantity '2kg'\n  debug '^4456-2^', cast.quantity '102kg'\n  try cast.quantity '2e3' catch e then warn rvr e.message\n  T?.throws /not a valid/, -> try cast.quantity '2e3' catch e then warn rvr e.message; throw e\n  T?.throws /not a valid/, -> try cast.quantity 'kg'  catch e then warn rvr e.message; throw e\n  T?.eq ( show create.quantity show { value: 102, unit: 'kg', }              ), { value: 102, unit: 'kg', }\n  # T?.eq ( show create.quantity show cast.quantity '102kg'  ), { value: 102, unit: 'kg', }\n  # x = show cast.quantity '123kg'\n  # T?.eq ( show create.quantity show x  ), { value: 123, unit: 'kg', }\n  T?.eq ( x = cast.rectangle 3, 4 ), { width: { value: 3, unit: 'mm' }, height: { value: 4, unit: 'mm' } }\n  validate.rectangle x\n  T?.eq ( create.rectangle x ), { width: { value: 3, unit: 'mm' }, height: { value: 4, unit: 'mm' } }\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_create_has_correct_binding = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype { errors: false, }\n  collector         = []\n  { declare\n    isa\n    type_of\n    validate\n    create\n    cast          } = types\n  declare.quantity\n    fields:\n      value:         'float'\n      unit:          'nonempty.text'\n    extras:         false\n    default:\n      value:    0\n      unit:     null\n    create: ( x ) ->\n      debug '^3434^', @\n      T?.ok @ instanceof Intertype\n      T?.ok @ is types\n      return x\n  #.........................................................................................................\n  # T?.eq ( type_of types.registry.quantity.cast ), 'function'\n  T?.ok isa.quantity { value: 102, unit: 'kg', }\n  T?.eq ( create.quantity { value: 3, unit: 'mm' } ), { value: 3, unit: 'mm' }\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_create_may_return_frozen_sealed_value = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype { errors: false, }\n  collector         = []\n  { declare\n    isa\n    type_of\n    validate\n    create\n    cast          } = types\n  declare.quantity\n    fields:\n      value:         'float'\n      unit:          'nonempty.text'\n    extras:         false\n    default:\n      value:    0\n      unit:     null\n    create: ( x ) ->\n      return Object.freeze Object.seal x\n  #.........................................................................................................\n  # T?.eq ( type_of types.registry.quantity.cast ), 'function'\n  T?.ok isa.quantity { value: 102, unit: 'kg', }\n  T?.eq ( create.quantity { value: 3, unit: 'mm' } ), { value: 3, unit: 'mm' }\n  T?.ok Object.isFrozen create.quantity { value: 3, unit: 'mm' }\n  T?.ok Object.isSealed create.quantity { value: 3, unit: 'mm' }\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_equals_available_as_module_static_method = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  { equals        } = require '../../../apps/intertype'\n  types             = new Intertype { errors: false, }\n  #.........................................................................................................\n  T?.eq ( _types.type_of        equals ), 'function'\n  T?.eq ( _types.type_of  types.equals ), 'function'\n  T?.ok equals is types.equals\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@intertype_asyncfunction_isnt_a_function = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype { errors: false, }\n  #.........................................................................................................\n  T?.eq ( types.type_of           ( -> 42       ) ), 'function'\n  T?.eq ( types.isa.function      ( -> 42       ) ), true\n  T?.eq ( types.isa.function      ( -> await 42 ) ), false\n  #.........................................................................................................\n  T?.eq ( types.type_of           ( -> await 42 ) ), 'asyncfunction'\n  T?.eq ( types.isa.asyncfunction ( -> await 42 ) ), true\n  T?.eq ( types.isa.asyncfunction ( -> 42       ) ), false\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@override_types_are_honored = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype { errors: false, }\n  { declare }       = types\n  #.........................................................................................................\n  declare.function0\n    isa:        ( x ) -> ( @isa.function x ) and ( x.length is 0 )\n    default:    ->\n    override:   true\n  #.........................................................................................................\n  declare.function1\n    isa:        ( x ) -> ( @isa.function x ) and ( x.length is 1 )\n    default:    ( x ) ->\n    override:   true\n  #.........................................................................................................\n  declare.function2\n    isa:        ( x ) -> ( @isa.function x ) and ( x.length is 2 )\n    default:    ( x, y ) ->\n    override:   true\n  #.........................................................................................................\n  declare.function3\n    isa:        ( x ) -> ( @isa.function x ) and ( x.length is 3 )\n    default:    ( x, y, z ) ->\n    override:   true\n  #.........................................................................................................\n  T?.eq ( types.type_of ->                  ), 'function0'\n  T?.eq ( types.type_of ( x ) ->            ), 'function1'\n  T?.eq ( types.type_of ( x, y ) ->         ), 'function2'\n  T?.eq ( types.type_of ( x, y, z ) ->      ), 'function3'\n  T?.eq ( types.type_of ( x, y, z, a ) ->   ), 'function'\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@can_clone_instance = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types_1           = new Intertype()\n  #.........................................................................................................\n  types_1.declare.function0\n    isa:        ( x ) -> ( @isa.function x ) and ( x.length is 0 )\n    default:    ->\n    override:   true\n  #.........................................................................................................\n  types_1.declare.function1\n    isa:        ( x ) -> ( @isa.function x ) and ( x.length is 1 )\n    default:    ( x ) ->\n    override:   true\n  #.........................................................................................................\n  types_2 = new Intertype types_1\n  #.........................................................................................................\n  # debug '^45-1^', types_1 is types_2\n  # debug '^45-2^', types_1.registry.function0\n  # debug '^45-2^', ( GUY.props.keys types_1.registry.function0, { hidden: true, } )\n  # debug '^45-3^', types_2.registry.function0\n  # debug '^45-4^', types_1.type_of ->\n  # debug '^45-5^', types_1.isa.function0 ->\n  # debug '^45-6^', types_2.type_of ->\n  # debug '^45-7^', types_2.isa.function0 ->\n  # debug '^45-8^', types_2.registry.function0\n  # debug '^45-9^', types_2.registry.function1\n  #.........................................................................................................\n  T?.ok types_1 isnt types_2\n  T?.eq ( types_2.isa.function0 ->        ),  true\n  T?.eq ( types_2.isa.function1 ->        ),  false\n  T?.eq ( types_2.isa.function0 ( x ) ->  ),  false\n  T?.eq ( types_2.isa.function1 ( x ) ->  ),  true\n  T?.eq types_1.registry.function0.override,  true\n  T?.eq types_2.registry.function0.override,  true\n  T?.eq types_1.overrides.length,             2\n  T?.eq types_2.overrides.length,             2\n  #.........................................................................................................\n  T?.eq ( types_1.type_of ->                  ), 'function0'\n  T?.eq ( types_1.type_of ( x ) ->            ), 'function1'\n  T?.eq ( types_1.type_of ( x, y ) ->         ), 'function'\n  #.........................................................................................................\n  T?.eq ( types_2.type_of ->                  ), 'function0'\n  T?.eq ( types_2.type_of ( x ) ->            ), 'function1'\n  T?.eq ( types_2.type_of ( x, y ) ->         ), 'function'\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@can_replace_declarations = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype()\n  { declare\n    type_of\n    isa           } = types\n  #.........................................................................................................\n  declare.explanation_for_everything\n    isa:        ( x ) -> x is null\n    default:    null\n    override:   true\n  #.........................................................................................................\n  declare.other_type\n    isa:        ( x ) -> false\n    override:   true\n  #.........................................................................................................\n  T?.eq ( isa.explanation_for_everything null                 ), true\n  T?.eq ( type_of null                                        ), 'explanation_for_everything'\n  T?.eq ( types.registry.explanation_for_everything.override  ), true\n  T?.eq ( types.overrides.length                              ), 2\n  T?.eq ( types.overrides[ 0 ][ 0 ]                           ), 'other_type'\n  T?.eq ( types.overrides[ 1 ][ 0 ]                           ), 'explanation_for_everything'\n  #.........................................................................................................\n  declare.explanation_for_everything\n    replace:    true\n    isa:        ( x ) -> x is 42\n    default:    42\n    override:   true\n  #.........................................................................................................\n  T?.eq ( isa.explanation_for_everything null                 ), false\n  T?.eq ( type_of null                                        ), 'null'\n  T?.eq ( type_of 42                                          ), 'explanation_for_everything'\n  T?.eq ( types.registry.explanation_for_everything.override  ), true\n  T?.eq ( types.overrides.length                              ), 2\n  T?.eq ( types.overrides[ 0 ][ 0 ]                           ), 'other_type'\n  T?.eq ( types.overrides[ 1 ][ 0 ]                           ), 'explanation_for_everything'\n  #.........................................................................................................\n  declare.explanation_for_everything\n    replace:    true\n    isa:        ( x ) -> x is 42\n    default:    42\n    override:   false\n  #.........................................................................................................\n  T?.eq ( isa.explanation_for_everything 42                   ), true\n  T?.eq ( type_of 42                                          ), 'float'\n  T?.eq ( types.registry.explanation_for_everything.override  ), false\n  T?.eq ( types.overrides[ 0 ][ 0 ]                           ), 'other_type'\n  T?.eq ( types.overrides.length                              ), 1\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@can_delete_and_redeclare_types = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype()\n  { declare\n    type_of\n    isa\n    remove        } = types\n  #.........................................................................................................\n  declare.explanation_for_everything\n    isa:        ( x ) -> x is null\n    default:    null\n    override:   true\n  #.........................................................................................................\n  declare.other_type\n    isa:        ( x ) -> false\n    override:   true\n  #.........................................................................................................\n  T?.eq ( isa.explanation_for_everything null                 ), true\n  T?.eq ( type_of null                                        ), 'explanation_for_everything'\n  T?.eq ( types.registry.explanation_for_everything.override  ), true\n  T?.eq ( types.overrides.length                              ), 2\n  T?.eq ( types.overrides[ 0 ][ 0 ]                           ), 'other_type'\n  T?.eq ( types.overrides[ 1 ][ 0 ]                           ), 'explanation_for_everything'\n  #.........................................................................................................\n  remove.explanation_for_everything()\n  #.........................................................................................................\n  T?.eq ( GUY.props.get types.registry, 'explanation_for_everything', null  ), null\n  T?.eq ( type_of null                                        ), 'null'\n  T?.eq ( types.overrides.length                              ), 1\n  T?.eq ( types.overrides[ 0 ][ 0 ]                           ), 'other_type'\n  #.........................................................................................................\n  declare.explanation_for_everything\n    isa:        ( x ) -> x is null\n    default:    null\n    override:   true\n  #.........................................................................................................\n  T?.eq ( type_of null                                        ), 'explanation_for_everything'\n  T?.eq ( types.overrides.length                              ), 2\n  T?.eq ( types.overrides[ 0 ][ 0 ]                           ), 'explanation_for_everything'\n  T?.eq ( types.overrides[ 1 ][ 0 ]                           ), 'other_type'\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@detect_circular_declarations = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype()\n  { declare\n    type_of\n    isa\n    remove        } = types\n  #.........................................................................................................\n  declare.type_a override: true, isa: ( x ) -> @isa.type_b x\n  declare.type_b override: true, isa: ( x ) -> @isa.type_c x\n  declare.type_c override: true, isa: ( x ) -> @isa.type_d x\n  declare.type_d override: true, isa: ( x ) -> @isa.type_a x\n  #.........................................................................................................\n  debug '^87-1^', type_of null\n  debug '^87-2^', type_of 42\n  debug '^87-3^', type_of 'helo'\n  debug '^87-4^', isa.type_a null\n  debug '^87-5^', isa.type_a 42\n  debug '^87-6^', isa.type_a 'helo'\n  debug '^87-7^', isa.type_b null\n  debug '^87-8^', isa.type_b 42\n  debug '^87-9^', isa.type_b 'helo'\n  debug '^87-9^', isa.text 'helo'\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@strange_naming_bug = ( T, done ) ->\n  # T?.halt_on_error()\n  misfit            = Symbol 'misfit'\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype()\n  { declare       } = types\n  #.........................................................................................................\n  declare.modifiers\n    fields:\n      first:      'anything'\n      last:       'anything'\n    default:\n      first:      misfit\n      last:       misfit\n    create: ( x ) ->\n      return { first: misfit, last: misfit, } unless x?\n      return x unless @isa.object x\n      return { first: ( GUY.props.get x, 'first', misfit ), last: ( GUY.props.get x, 'last',  misfit ), }\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@symbols = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype()\n  #.........................................................................................................\n  T?.eq ( types.type_of     Symbol      'x' ), 'symbol'\n  T?.eq ( types.isa.symbol  Symbol      'x' ), true\n  T?.eq ( types.type_of     Symbol.for  'x' ), 'symbol'\n  T?.eq ( types.isa.symbol  Symbol.for  'x' ), true\n  T?.eq ( types.isa.symbol  'x'             ), false\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@throws_validation_error_for_unfit_arguments = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype()\n  { declare\n    isa\n    type_of\n    create        } = types\n  #.........................................................................................................\n  declare.foobar\n    fields:\n      a:      'integer'\n      b:      'integer'\n    default:\n      a:      0\n      b:      1\n  #.........................................................................................................\n  T?.eq ( create.foobar null  ), { a: 0, b: 1, }\n  T?.eq ( create.foobar {}    ), { a: 0, b: 1, }\n  debug '^46645^', create.foobar 42\n  T?.throws /x/, -> create.foobar 42\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@recognize_classes = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype()\n  { declare\n    isa\n    type_of\n    create        } = types\n  class X\n  T?.eq ( isa.class X       ), true\n  T?.eq ( isa.function X    ), true\n  T?.eq ( isa.class new X() ), false\n  T?.eq ( isa.class ->      ), false\n  T?.eq ( isa.function ->   ), true\n  T?.eq ( type_of X         ), 'class'\n  T?.eq ( type_of new X()   ), 'x'\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@is_extension_of_recognizes_derivatives = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype()\n  { declare\n    is_extension_of\n    isa\n    type_of\n    create        } = types\n  class Base\n  class Derived extends Base\n  class Unrelated\n  T?.eq ( is_extension_of Base, Derived   ), false\n  T?.eq ( is_extension_of Derived, Base   ), true\n  T?.eq ( is_extension_of Unrelated, Base ), false\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@is_extension_of_allows_all_values = ( T, done ) ->\n  # T?.halt_on_error()\n  { Intertype     } = require '../../../apps/intertype'\n  types             = new Intertype()\n  { declare\n    is_extension_of\n    isa\n    type_of\n    create        } = types\n  class Base\n  class Derived extends Base\n  class Unrelated\n  T?.eq ( is_extension_of Base, Derived       ), false\n  T?.eq ( is_extension_of null, Derived       ), false\n  T?.eq ( is_extension_of undefined, Derived  ), false\n  T?.eq ( is_extension_of 42, Derived         ), false\n  T?.eq ( is_extension_of Derived, null       ), false\n  T?.eq ( is_extension_of Derived, undefined  ), false\n  T?.eq ( is_extension_of Derived, 42         ), false\n  T?.eq ( is_extension_of 42, Number          ), false\n  T?.eq ( is_extension_of Derived, Base       ), true\n  T?.eq ( is_extension_of Derived, Derived    ), true\n  T?.eq ( is_extension_of Base, Base          ), true\n  T?.eq ( is_extension_of null, null          ), true\n  T?.eq ( is_extension_of '', ''              ), true\n  T?.eq ( is_extension_of '', 'x'             ), false\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nunless module.parent?\n  # test @is_extension_of_allows_all_values\n  test @\n\n\n"
  ]
}