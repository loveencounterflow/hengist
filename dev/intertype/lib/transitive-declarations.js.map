{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/transitive-declarations.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\n# njs_util                  = require 'util'\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'INTERTYPE/tests/main'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\npraise                    = CND.get_logger 'praise',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"transitive declarations 1\" ] = ( T, done ) ->\n  #.........................................................................................................\n  INTERTYPE                 = require '../../../apps/intertype'\n  { Intertype, }            = INTERTYPE\n  intertype = new Intertype()\n  { isa\n    validate\n    type_of\n    types_of\n    size_of\n    declare\n    sad\n    sadden\n    all_keys_of } = intertype.export()\n  #.........................................................................................................\n  has_only_keys = ( x, keys ) ->\n    for k of x\n      continue if k in keys\n      # urge '^227266^', \"has key #{rpr k}: #{rpr x}\"\n      return false\n    return true\n  #---------------------------------------------------------------------------------------------------------\n  declare 'mixa_flagdefs', tests:\n    \"x is an object of mixa_flagdef\":         ( x ) -> @isa_object_of 'mixa_flagdef', x\n  #---------------------------------------------------------------------------------------------------------\n  declare 'mixa_flagdef', tests:\n    \"x is an object\":                         ( x ) -> @isa.object x\n    \"x.?type is a function\":                  ( x ) -> @isa_optional.function       x.type\n    \"x.?alias is a text\":                     ( x ) -> @isa_optional.text           x.alias\n    \"x.?description is a text\":               ( x ) -> @isa_optional.text           x.description\n    \"x.?multiple is a _mixa_multiple\":        ( x ) -> @isa_optional._mixa_multiple x.multiple\n    \"x.?fallback is anything\":                ( x ) -> true\n    \"x has only keys 'type', 'alias', 'description', 'multiple', 'fallback'\":     \\\n      ( x ) -> has_only_keys x, [ 'type', 'alias', 'description', 'multiple', 'fallback', ]\n  #.........................................................................................................\n  try ( debug '^3334^', validate.mixa_flagdefs { foo: { alias: 'f', }, }  ) catch error then warn error.message\n  try ( debug '^3334^', validate.mixa_flagdefs { foo: { xxx:   'f', }, }  ) catch error then warn error.message\n  try ( debug '^3334^', validate.mixa_flagdef  { xxx:   'f', }            ) catch error then warn error.message\n  #.........................................................................................................\n  done()\n  return null\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n\n  # jsidentifier_pattern = /// ^\n  #   (?: [ $_ ]                    | \\p{ID_Start}    )\n  #   (?: [ $ _ \\u{200c} \\u{200d} ] | \\p{ID_Continue} )*\n  #   $ ///u\n  # debug /\\p{Script=Katakana}/u.test 't'\n  # debug /\\p{Script=Han}/u.test '谷'\n  # debug /\\p{ID_Start}/u.test '谷'\n  # debug /\\p{ID_Start}/u.test '5'\n  # debug jsidentifier_pattern.test 'a'\n  # debug jsidentifier_pattern.test '谷'\n  # debug jsidentifier_pattern.test '5'\n\n\n\n"
  ]
}