{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/intertype-prototype.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTYPE/prototype'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ hide\n  tree }                  = GUY.props\nrvr                       = GUY.trm.reverse\nnameit                    = ( name, f ) -> Object.defineProperty f, 'name', { value: name, }\n#...........................................................................................................\ntest                      = require 'guy-test'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype()\n#...........................................................................................................\nhide @, 'Multimix', ( require '../../../apps/multimix' ).Multimix\nMultimix                  = @Multimix\n\n\n#===========================================================================================================\nclass @Intertype\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    hub           = @\n    clasz         = @constructor\n    handlers      = clasz._get_handlers hub\n    @isa          = new Multimix { hub, handler: handlers.isa,     }\n    @declare      = new Multimix { hub, handler: handlers.declare, }\n    @mmx          = @isa[Multimix.symbol]\n    @state        = @mmx.state\n    @state.trace  = []\n    #---------------------------------------------------------------------------------------------------------\n    ### TAINT this part goes into declarations ###\n    @registry =\n      integer:  ( x ) -> ( Number.isFinite x ) and ( x is Math.floor x )\n      text:     ( x ) -> ( typeof x ) is 'string'\n      #.......................................................................................................\n      even: ( x ) ->\n        if ( Number.isInteger x )     then return ( x % 2  ) is   0\n        else if typeof x is 'bigint'  then return ( x % 2n ) is   0n\n        return false\n      #.......................................................................................................\n      odd: ( x ) ->\n        if ( Number.isInteger x )     then return ( x % 2  ) isnt 0\n        else if typeof x is 'bigint'  then return ( x % 2n ) isnt 0n\n        return false\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _trace: ({ref, level, prop, x, R, }) ->\n    ### [ ref, level, prop, value, R, ] = checkpoint ###\n    # H.types.validate.nonempty_text  ref\n    # H.types.validate.cardinal       level\n    # H.types.validate.nonempty_text  prop\n    # H.types.validate.boolean        R\n    @state.trace.push { ref, level, prop, x, R, }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _reset_trace: -> @state.trace = []\n\n\n#-----------------------------------------------------------------------------------------------------------\n@Intertype._get_handlers = ( hub ) ->\n  R =\n    #-------------------------------------------------------------------------------------------------------\n    isa: ( props, x ) ->\n      unless ( arity = props.length ) > 0\n        throw new Error \"expected at least one property, got #{arity}: #{rpr props}\"\n      # whisper '^321-1^', '---------------------------------------'\n      level = 0 ### !!!!!!!!!!!!!!!! ###\n      hub._reset_trace() if level is 0\n      # debug '^445-1^', { props, x, }\n      advance   = false\n      last_idx  = props.length - 1\n      R         = true\n      idx       = -1\n      # prv_prop  = null\n      prop      = null\n      nxt_prop  = null\n      #.....................................................................................................\n      loop\n        idx++\n        # debug '^445-2^', { idx, prop, R, advance, }\n        return R if idx > last_idx\n        # [ prv_prop, prop, nxt_prop, ] = prop, props[ idx ], props[ idx + 1 ]\n        [ prop, nxt_prop, ] = [ props[ idx ], props[ idx + 1 ], ]\n        #...................................................................................................\n        if advance\n          # debug '^445-3^'\n          if prop is 'or'\n            hub._trace { ref: '▲i1', level, prop, x, R, }\n            return true if R\n            advance = false\n          continue\n        #...................................................................................................\n        if prop is 'or'\n          if nxt_prop is 'or'\n            throw new Error \"cannot have two `or` props in succession, got #{rpr props.join '.'}\"\n          hub._trace { ref: '▲i2', level, prop, x, R, }\n          return true if R\n          # debug '^445-4^'\n          advance = true\n          continue\n        #...................................................................................................\n        unless ( fn = hub.registry[ prop ] )?\n          throw new Error \"unknown type #{rpr prop}\"\n        #...................................................................................................\n        R = R = fn.call hub, x\n        hub._trace { ref: '▲i3', level, prop, x, R, }\n        unless R is true or R is false\n          ### TAINT use this library to determine type: ###\n          throw new Error \"expected test result to be boolean, go a #{typeof R}: #{rpr R}\"\n        # debug '^445-5^', GUY.trm.reverse { idx, prop, R, advance, }\n        advance = not R\n      #.....................................................................................................\n      return R\n\n    #-------------------------------------------------------------------------------------------------------\n    declare: ( props, isa ) ->\n      unless ( arity = props.length ) is 1\n        throw new Error \"expected single property, got #{arity}: #{rpr props}\"\n      [ name, ]             = props\n      hub.registry[ name ]  = R = nameit name, ( props, x ) -> isa x\n      return R\n\n  #---------------------------------------------------------------------------------------------------------\n  return R\n\n\n"
  ]
}