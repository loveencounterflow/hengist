{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/prototype.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\n# njs_util                  = require 'util'\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nGUY                       = require '../../../apps/guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTYPE/tests'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\nrvr                       = GUY.trm.reverse\ntruth                     = GUY.trm.truth.bind GUY.trm\n#...........................................................................................................\ntest                      = require 'guy-test'\n# { intersection_of }       = require '../../../apps/intertype/lib/helpers'\nH                         = require '../../../lib/helpers'\nequals                    = require '../../../apps/intertype/deps/jkroso-equals'\nS                         = ( parts ) -> new Set eval parts.raw[ 0 ]\n{ to_width }              = require 'to-width'\n_types                    = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of }               = _types.export()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@itproto_sample_test_function = ( T, done ) ->\n  TY = require './intertype-prototype'\n  T?.eq ( type_of TY.registry.integer ), 'function'\n  T?.eq TY.registry.integer.length, 1\n  T?.eq ( TY.registry.integer 1 ), true\n  T?.eq ( TY.registry.integer 1.2345678e26 ), true\n  T?.eq ( TY.registry.integer 1.2345678 ), false\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@itproto_isa = ( T, done ) ->\n  TY = require './intertype-prototype'\n  T?.eq ( type_of TY.handlers.isa ), 'function'\n  T?.eq TY.handlers.isa.length, 2\n  #.........................................................................................................\n  T?.eq ( type_of TY.isa ), 'function'\n  T?.eq TY.isa.length, 2\n  T?.eq ( type_of TY.isa.integer ), 'function'\n  T?.eq TY.isa.integer.length, 0 ### function only takes single spread-argument `( P... ) ->` ###\n  T?.eq ( TY.isa.integer 42   ),  true\n  T?.eq ( TY.isa.integer 42.3 ),  false\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@itproto_can_chain_props = ( T, done ) ->\n  TY = require './intertype-prototype'\n  T?.eq ( TY.isa.even.integer 42   ),  true\n  T?.eq ( TY.isa.even.integer 42.3 ),  false\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@itproto_can_access_mmx_state = ( T, done ) ->\n  TY = require './intertype-prototype'\n  T?.eq ( typeof TY.Multimix ), 'function'\n  T?.eq ( typeof TY.Multimix.symbol ), 'symbol'\n  T?.eq ( typeof mmx    = TY.isa[TY.Multimix.symbol]        ), 'object'\n  T?.eq ( typeof state  = TY.isa[TY.Multimix.symbol].state  ), 'object'\n  T?.eq state, { hedges: [], }\n  TY.isa.integer;        T?.eq state, { hedges: [ 'integer' ], }\n  TY.isa.even.integer;   T?.eq state, { hedges: [ 'even', 'integer', ], }\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@itproto_declare_creates_types = ( T, done ) ->\n  TY = require './intertype-prototype'\n  T?.eq ( typeof TY.registry.TEST_float ), 'undefined'\n  T?.throws /expected single property, got 2/, -> TY.declare.even.TEST_float ( x ) -> Number.isFinite x\n  fn = TY.declare.TEST_float ( x ) -> Number.isFinite x\n  T?.eq ( typeof TY.registry.TEST_float ), 'function'\n  T?.ok TY.registry.TEST_float is fn\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@itproto_or = ( T, done ) ->\n  TY = require './intertype-prototype'\n  T?.ok TY.isa.integer 42\n  done?()\n\n\n############################################################################################################\nif module is require.main then do =>\n  test @\n"
  ]
}