{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\ntest                      = require '../../../apps/guy-test'\nTMP_types                 = new ( require 'intertype' ).Intertype()\n#-----------------------------------------------------------------------------------------------------------\n# s                         = ( name ) -> Symbol.for  name\n# ps                        = ( name ) -> Symbol      name\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"_XEMITTER: _\" ] = ( T, done ) ->\n#   { DATOM }                 = require '../../../apps/datom'\n#   { new_datom\n#     select }                = DATOM\n  # { Djehuti }               = require '../../../apps/intertalk'\n#   #.........................................................................................................\n#   probes_and_matchers = [\n#     [['^foo', { time: 1500000, value: \"msg#1\", }],{\"time\":1500000,\"value\":\"msg#1\",\"$key\":\"^foo\"},null]\n#     ]\n#   #.........................................................................................................\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n#       [ key, value, ] = probe\n#       resolve new_datom key, value\n#   done()\n#   return null\n\n\n############################################################################################################\n#\n# #===========================================================================================================\n# isa_object = ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n# as_object = ( x ) ->\n#   return x unless isa_object x\n#   R       = {}\n#   R[ k ]  = as_object v for k, v of x\n#   return R\n\n#===========================================================================================================\nsample_declarations =\n  boolean:                ( x ) -> ( x is true ) or ( x is false )\n  function:               ( x ) -> ( Object::toString.call x ) is '[object Function]'\n  asyncfunction:          ( x ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n  symbol:                 ( x ) -> ( typeof x ) is 'symbol'\n  object:                 ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n  text:                   ( x ) -> ( typeof x ) is 'string'\n  nullary:                ( x ) -> x? and ( ( x.length is 0 ) or ( x.size is 0 ) )\n  unary:                  ( x ) -> x? and ( ( x.length is 1 ) or ( x.size is 1 ) )\n  binary:                 ( x ) -> x? and ( ( x.length is 2 ) or ( x.size is 2 ) )\n  trinary:                ( x ) -> x? and ( ( x.length is 3 ) or ( x.size is 3 ) )\n\n\n#===========================================================================================================\nthrows = ( T, matcher, f ) ->\n  await do =>\n    error = null\n    debug '^992-56^', matcher, TMP_types.type_of matcher\n    try await f() catch error\n      switch matcher_type = TMP_types.type_of matcher\n        when 'text'\n          T?.eq error.message, matcher\n        when 'regex'\n          matcher.lastIndex = 0\n          if matcher.test error.message\n            null\n          else\n            warn '^992-4^', reverse message = \"error #{rpr error.message} doesn't match #{rpr matcher}\"\n            T.fail \"^992-4^ #{message}\"\n        else\n          warn message = \"^992-1^ expected a regex or a text, got a #{matcher_type}\"\n          T.fail message\n    T?.ok error?\n  return null\n\n#===========================================================================================================\ntry_and_show = ( T, f ) ->\n  e = null\n  try ( urge '^992-2^', f() ) catch e then help '^992-3^', reverse \"try_and_show: #{rpr e.message}\"\n  unless e?\n    warn '^992-4^', reverse message = \"expected an error but none was thrown\"\n    T.fail \"^992-5^ expected an error but none was thrown\"\n  return null\n\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@interface = ( T, done ) ->\n  INTERTYPE     = require '../../../apps/intertype'\n  T?.eq ( TMP_types.isa.object    INTERTYPE.types                               ), true\n  T?.eq ( TMP_types.isa.function  INTERTYPE.types.get_isa                       ), true\n  T?.eq ( TMP_types.isa.function  INTERTYPE.types.get_isa_optional              ), true\n  T?.eq ( TMP_types.isa.function  INTERTYPE.types.get_validate                  ), true\n  T?.eq ( TMP_types.isa.function  INTERTYPE.types.get_validate_optional         ), true\n  T?.eq ( TMP_types.isa.object    INTERTYPE.types                               ), true\n  T?.eq ( TMP_types.isa.object    INTERTYPE.types.isa                           ), true\n  T?.eq ( TMP_types.isa.object    INTERTYPE.types.isa.optional                  ), true\n  T?.eq ( TMP_types.isa.object    INTERTYPE.types.validate                      ), true\n  T?.eq ( TMP_types.isa.object    INTERTYPE.types.validate.optional             ), true\n  T?.eq ( TMP_types.isa.function  INTERTYPE.types.isa.boolean                   ), true\n  T?.eq ( TMP_types.isa.function  INTERTYPE.types.isa.optional.boolean          ), true\n  T?.eq ( TMP_types.isa.function  INTERTYPE.types.validate.boolean              ), true\n  T?.eq ( TMP_types.isa.function  INTERTYPE.types.validate.optional.boolean     ), true\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@basic_functionality = ( T, done ) ->\n  # T?.halt_on_error()\n  INTERTYPE     = require '../../../apps/intertype'\n  types         = new INTERTYPE.Intertype sample_declarations\n  T?.eq ( types.isa.boolean           false               ), true\n  T?.eq ( types.isa.boolean           true                ), true\n  T?.eq ( types.isa.boolean           null                ), false\n  T?.eq ( types.isa.boolean           1                   ), false\n  T?.eq ( types.isa.optional.boolean  false               ), true\n  T?.eq ( types.isa.optional.boolean  true                ), true\n  T?.eq ( types.isa.optional.boolean  null                ), true\n  T?.eq ( types.isa.optional.boolean  1                   ), false\n  #.........................................................................................................\n  T?.eq ( types.validate.boolean               false      ), false\n  T?.eq ( types.validate.boolean               true       ), true\n  T?.eq ( types.validate.optional.boolean      true       ), true\n  T?.eq ( types.validate.optional.boolean      false      ), false\n  T?.eq ( types.validate.optional.boolean      undefined  ), undefined\n  T?.eq ( types.validate.optional.boolean      null       ), null\n  try_and_show T,                           -> types.validate.boolean           1\n  try_and_show T,                           -> types.validate.optional.boolean  1\n  throws T, /expected a boolean/,           -> types.validate.boolean           1\n  throws T, /expected an optional boolean/, -> types.validate.optional.boolean  1\n  #.........................................................................................................\n  T?.eq ( types.type_of null            ), 'null'\n  T?.eq ( types.type_of undefined       ), 'undefined'\n  T?.eq ( types.type_of false           ), 'boolean'\n  T?.eq ( types.type_of Symbol 'p'      ), 'symbol'\n  T?.eq ( types.type_of {}              ), 'object'\n  T?.eq ( types.type_of NaN             ), 'unknown'\n  T?.eq ( types.type_of +Infinity       ), 'unknown'\n  T?.eq ( types.type_of -Infinity       ), 'unknown'\n  #.........................................................................................................\n  done?()\n\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  @basic_functionality()\n  await test @\n\n\n"
  ]
}