{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/basics.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATOM/TESTS/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\n# types                     = require '../types'\n# { isa\n#   validate\n#   type_of }               = types\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"HB.shape_text() fails on nonexisting font file\" ] = ( T, done ) ->\n  HB = require '../../../apps/glyphshapes-and-typesetting-with-harfbuzz'\n  probes_and_matchers = [\n    [ { text: 'x', font: { path: 'nosuchfile', }, }, null, \"hb-shape: Couldn't read or find nosuchfile, or it was empty.\", ]\n    ]\n  #.........................................................................................................\n  debug '^3344^', ( k for k of HB )\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      d = HB.shape_text probe\n      resolve d\n      return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"RBW.register_font(), RBW.font_register_is_free()\" ] = ( T, done ) ->\n  RBW             = require '../../../apps/rustybuzz-wasm/pkg'\n  font            = {}\n  # font.path       = 'Ubuntu-R.ttf'\n  font.path       = 'EBGaramond12-Italic.otf'\n  font.path       = PATH.resolve PATH.join __dirname, '../../../assets/jizura-fonts', font.path\n  font.idx        = 12\n  #.........................................................................................................\n  do register_font = =>\n    font_bytes      = FS.readFileSync font.path\n    font_bytes_hex  = font_bytes.toString 'hex'\n    result          = RBW.register_font font.idx, font_bytes_hex\n    matcher         = undefined\n    T.eq result, matcher\n  #.........................................................................................................\n  do check_font_registers = =>\n    ### TAINT result will depend on not using font indexes 10 and 13 in this test suite as RBW is stateful ###\n    result          = ( ( RBW.font_register_is_free idx ) for idx in [ font.idx - 1 .. font.idx + 1 ] )\n    matcher         = [ true, false, true, ]\n    debug '^7483^', result\n    T.eq result, matcher\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"RBW.shape_text()\" ] = ( T, done ) ->\n  T.halt_on_error()\n  RBW             = require '../../../apps/rustybuzz-wasm/pkg'\n  font            = {}\n  # font.path       = 'Ubuntu-R.ttf'\n  font.path       = 'EBGaramond12-Italic.otf'\n  font.path       = PATH.resolve PATH.join __dirname, '../../../assets/jizura-fonts', font.path\n  font.idx        = 12\n  text            = \"Jack jumped over the lazy fox\"\n  #.........................................................................................................\n  do register_font = =>\n    font_bytes      = FS.readFileSync font.path\n    font_bytes_hex  = font_bytes.toString 'hex'\n    RBW.register_font font.idx, font_bytes_hex\n  #.........................................................................................................\n  do shape_text_json = =>\n    format          = 'json'\n    result          = RBW.shape_text { format, text, font_idx: font.idx, }\n    debug '^4456^', format, result\n    # T.eq result, matcher\n  #.........................................................................................................\n  done()\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"RBW.register_font()\" ] = ( T, done ) ->\n#   RBW             = require '../../../apps/rustybuzz-wasm/pkg'\n#   font            = {}\n#   font.path       = PATH.resolve PATH.join __dirname, '../../../assets/jizura-fonts/Ubuntu-R.ttf'\n#   font.idx        = 12\n#   font_bytes      = FS.readFileSync font.path\n#   font_bytes_hex  = font_bytes.toString 'hex'\n#   result          = RBW.register_font font.idx, font_bytes_hex\n#   matcher         = undefined\n#   T.eq result, matcher\n#   done()\n#   return null\n\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # test @[ \"RBW.register_font(), RBW.font_register_is_free()\" ]\n  test @[ \"RBW.shape_text()\" ]\n\n"
  ]
}