{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/rustybuzz-wasm-text-shaping-call-arities.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'RUSTYBUZZ-WASM-TEXT-SHAPING-CALL-ARITIES'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\nguy                       = require 'guy'\n#...........................................................................................................\ngcfg                      =\n  batchsizes:\n    singlebatch:  null\n    smallbatch:   null\n    mediumbatch:  null\n    bigbatch:     null\n  verbose:    false\n\n#-----------------------------------------------------------------------------------------------------------\nshow_result = ( name, result ) ->\n  info '-----------------------------------------------'\n  urge name\n  whisper result\n  info '-----------------------------------------------'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  whisper \"^3373^ fetching data...\"\n  #.........................................................................................................\n  texts       = DATA.get_text_lines cfg\n  font        =\n    path:       'EBGaramond12-Italic.otf'\n    ### TAINT use single type/format for features ###\n    features:   'liga,clig,dlig,hlig'\n    features_obj: { liga: true, clig: true, dlig: true, hlig: true, }\n  font.path   = PATH.resolve PATH.join __dirname, '../../../assets/jizura-fonts', font.path\n  #.........................................................................................................\n  data_cache  = { texts, font, }\n  data_cache  = guy.lft.freeze data_cache\n  whisper \"^3373^ ...done\"\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@_rustybuzz_wasm_shaping = ( cfg, format, batchsize_name ) -> new Promise ( resolve ) =>\n  batchsize         = gcfg.batchsizes[ batchsize_name ]\n  throw new Error \"^34347^ unknown batchsize_name #{rpr batchsize_name}\" unless batchsize?\n  RBW               = require '../../../apps/rustybuzz-wasm/pkg'\n  data              = @get_data cfg\n  count             = 0\n  { font }          = data\n  batches           = []\n  words             = ( data.texts.join ' ' ).split /\\s+/\n  batch             = null\n  font_idx          = 3\n  globalThis.alert ?= alert\n  #.........................................................................................................\n  for word in words\n    ( batches.push batch = [] ) unless batch?\n    batch.push word\n    batch = null if batch.length >= batchsize\n  batchsizes      = ( batch.length for batch in batches )\n  avg_batchsize   = ( batchsizes.reduce ( a, b ) => a + b ) / batchsizes.length\n  info \"average batchsize is #{avg_batchsize}\"\n  batches         = ( [ batch.length, batch.join ' ' ] for batch in batches )\n  #.........................................................................................................\n  # debug '^440020^', ( k for k of RBW )\n  if RBW.font_register_is_free font_idx\n    whisper \"^44766^ sending #{font.path} to rustybuzz-wasm...\"\n    font_bytes      = FS.readFileSync font.path\n    font_bytes_hex  = font_bytes.toString 'hex'\n    RBW.register_font font_idx, font_bytes_hex\n    whisper \"^44766^ done\"\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    for [ word_count, text, ] in batches\n      result  = RBW.shape_text { format, text, font_idx, }\n      show_result 'rustybuzz_wasm_shaping', result if gcfg.verbose\n      count += word_count ### NOTE counting texts (\"slabs\", although they're words in this case) ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@rustybuzz_wasm_json_shaping_bigbatch     = ( cfg ) -> @_rustybuzz_wasm_shaping cfg, 'json', 'bigbatch'\n@rustybuzz_wasm_json_shaping_mediumbatch  = ( cfg ) -> @_rustybuzz_wasm_shaping cfg, 'json', 'mediumbatch'\n@rustybuzz_wasm_json_shaping_smallbatch   = ( cfg ) -> @_rustybuzz_wasm_shaping cfg, 'json', 'smallbatch'\n@rustybuzz_wasm_json_shaping_singlebatch  = ( cfg ) -> @_rustybuzz_wasm_shaping cfg, 'json', 'singlebatch'\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  # gcfg.verbose  = true\n  bench         = BM.new_benchmarks()\n  # n             = 100\n  n             = 10\n  gcfg.verbose  = ( n is 1 )\n  gcfg.batchsizes.singlebatch = 1\n  gcfg.batchsizes.smallbatch  = Math.floor n / 10\n  gcfg.batchsizes.mediumbatch = Math.floor n / 2\n  gcfg.batchsizes.bigbatch    = n\n  cfg           = { line_count: n, word_count: n, }\n  # debug '^889^', gcfg\n  repetitions   = 2\n  test_names    = [\n    'rustybuzz_wasm_json_shaping_bigbatch'\n    'rustybuzz_wasm_json_shaping_smallbatch'\n    'rustybuzz_wasm_json_shaping_mediumbatch'\n    'rustybuzz_wasm_json_shaping_singlebatch'\n    # 'rustybuzz_wasm_short_shaping'\n    # 'rustybuzz_wasm_rusty_shaping'\n    ]\n  global.gc() if global.gc?\n  data_cache = null\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      global.gc() if global.gc?\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n\n\n###\n\n```\n ~/jzr/rustybuzz-wasm  master !5  ~/jzr/nodexh/bin/nodexh ~/jzr/hengist/dev/glyphshapes-and-typesetting-with-harfbuzz/lib/rustybuzz-wasm-text-shaping-call-arities.benchmarks.js\n00:00 RUSTYBUZZ-WASM-TEXT-SHAPING-CALL-ARITIES  ▶  ------------------------------------------------------------------------------------------------------------\n00:00 RUSTYBUZZ-WASM-TEXT-SHAPING-CALL-ARITIES  ▶  ^3373^ fetching data...\n00:04 RUSTYBUZZ-WASM-TEXT-SHAPING-CALL-ARITIES  ▶  ^3373^ ...done\n00:04 RUSTYBUZZ-WASM-TEXT-SHAPING-CALL-ARITIES  ▶  average batchsize is 10\n00:04 RUSTYBUZZ-WASM-TEXT-SHAPING-CALL-ARITIES  ▶  ^44766^ sending /home/flow/jzr/hengist/assets/jizura-fonts/EBGaramond12-Italic.otf to rustybuzz-wasm...\n00:04 RUSTYBUZZ-WASM-TEXT-SHAPING-CALL-ARITIES  ▶  ^44766^ done\nrustybuzz_wasm_json_shaping_smallbatch     0.753 s          10,000 items          13,285⏶Hz          75,271⏷nspc\n00:05 RUSTYBUZZ-WASM-TEXT-SHAPING-CALL-ARITIES  ▶  average batchsize is 1\nrustybuzz_wasm_json_shaping_singlebatch    3.876 s          10,000 items           2,580⏶Hz         387,570⏷nspc\n00:09 RUSTYBUZZ-WASM-TEXT-SHAPING-CALL-ARITIES  ▶  average batchsize is 100\nrustybuzz_wasm_json_shaping_bigbatch       0.381 s          10,000 items          26,263⏶Hz          38,076⏷nspc\n00:09 RUSTYBUZZ-WASM-TEXT-SHAPING-CALL-ARITIES  ▶  average batchsize is 50\nrustybuzz_wasm_json_shaping_mediumbatch    0.397 s          10,000 items          25,193⏶Hz          39,693⏷nspc\n00:10 RUSTYBUZZ-WASM-TEXT-SHAPING-CALL-ARITIES  ▶  ------------------------------------------------------------------------------------------------------------\n00:10 RUSTYBUZZ-WASM-TEXT-SHAPING-CALL-ARITIES  ▶  average batchsize is 50\nrustybuzz_wasm_json_shaping_mediumbatch    0.398 s          10,000 items          25,103⏶Hz          39,835⏷nspc\n00:10 RUSTYBUZZ-WASM-TEXT-SHAPING-CALL-ARITIES  ▶  average batchsize is 10\nrustybuzz_wasm_json_shaping_smallbatch     0.704 s          10,000 items          14,199⏶Hz          70,428⏷nspc\n00:11 RUSTYBUZZ-WASM-TEXT-SHAPING-CALL-ARITIES  ▶  average batchsize is 1\nrustybuzz_wasm_json_shaping_singlebatch    3.774 s          10,000 items           2,650⏶Hz         377,372⏷nspc\n00:15 RUSTYBUZZ-WASM-TEXT-SHAPING-CALL-ARITIES  ▶  average batchsize is 100\nrustybuzz_wasm_json_shaping_bigbatch       0.378 s          10,000 items          26,441⏶Hz          37,820⏷nspc\n00:15 HENGIST/BENCHMARKS  ▶  rustybuzz_wasm_json_shaping_bigbatch              26,352 Hz   100.0 % │████████████▌│\n00:15 HENGIST/BENCHMARKS  ▶  rustybuzz_wasm_json_shaping_mediumbatch           25,148 Hz    95.4 % │███████████▉ │\n00:15 HENGIST/BENCHMARKS  ▶  rustybuzz_wasm_json_shaping_smallbatch            13,742 Hz    52.1 % │██████▌      │\n00:15 HENGIST/BENCHMARKS  ▶  rustybuzz_wasm_json_shaping_singlebatch            2,615 Hz     9.9 % │█▎           │\n```\n\n# Verdicts\n\n* text shaping is 10 times as fast when quering hundreds of words at a time as opposed to a single word at a time\n\n###\n"
  ]
}