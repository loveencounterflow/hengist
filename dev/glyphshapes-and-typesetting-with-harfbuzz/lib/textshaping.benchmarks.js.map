{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/textshaping.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'TEXTSHAPING'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\ngcfg                      = { verbose: false, }\n\n#-----------------------------------------------------------------------------------------------------------\nshow_result = ( name, result ) ->\n  info '-----------------------------------------------'\n  urge name\n  whisper result\n  info '-----------------------------------------------'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  DATOM = require '../../../apps/datom'\n  #.........................................................................................................\n  texts       = DATA.get_text_lines cfg\n  font        =\n    path:       'EBGaramond12-Italic.otf'\n    ### TAINT use single type/format for features ###\n    features:   'liga,clig,dlig,hlig'\n    features_obj: { liga: true, clig: true, dlig: true, hlig: true, }\n  font.path   = PATH.resolve PATH.join __dirname, '../../../assets/jizura-fonts', font.path\n  #.........................................................................................................\n  data_cache  = { texts, font, }\n  data_cache  = DATOM.freeze data_cache\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@harfbuzz_shaping = ( cfg ) -> new Promise ( resolve ) =>\n  HB            = require '../../../apps/glyphshapes-and-typesetting-with-harfbuzz'\n  # HB.ensure_harfbuzz_version() ### NOTE: optional diagnostic ###\n  data          = @get_data cfg\n  count         = 0\n  { texts\n    font }      = data\n  resolve => new Promise ( resolve ) =>\n    for text in texts\n      result  = await HB.shape_text { text, font, }\n      show_result 'harfbuzz_shaping', result if gcfg.verbose\n      count  += text.length ### NOTE counting approximate number of glyphs ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@harfbuzzjs_shaping = ( cfg ) -> new Promise ( resolve ) =>\n  HB            = require '../../../apps/glyphshapes-and-typesetting-with-harfbuzz/lib/demo-harfbuzzjs'\n  # HB.ensure_harfbuzz_version() ### NOTE: optional diagnostic ###\n  data          = @get_data cfg\n  count         = 0\n  { texts\n    font }      = data\n  fs            = HB.new_fontshaper font.path, font.features_obj\n  resolve => new Promise ( resolve ) =>\n    for text in texts\n      result  = await HB.shape_text fs, text\n      show_result 'harfbuzzjs_shaping', result if gcfg.verbose\n      count  += text.length ### NOTE counting approximate number of glyphs ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@opentypejs_shaping = ( cfg ) -> new Promise ( resolve ) =>\n  OT            = require '../../../apps/glyphshapes-and-typesetting-with-harfbuzz/lib/demo-opentypejs'\n  data          = @get_data cfg\n  count         = 0\n  { texts\n    font }      = data\n  otfont        = await OT.otfont_from_path font.path #, font.features_obj\n  resolve => new Promise ( resolve ) =>\n    for text in texts\n      result  = OT.shape_text otfont, text\n      show_result 'opentypejs_shaping', result if gcfg.verbose\n      count  += text.length ### NOTE counting approximate number of glyphs ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@fontkit_shaping = ( cfg ) -> new Promise ( resolve ) =>\n  FK            = require '../../../apps/glyphshapes-and-typesetting-with-harfbuzz/lib/demo-fontkit'\n  data          = @get_data cfg\n  count         = 0\n  { texts\n    font }      = data\n  fkfont        = await FK.fkfont_from_path font.path #, font.features_obj\n  resolve => new Promise ( resolve ) =>\n    for text in texts\n      result  = FK.shape_text fkfont, text\n      show_result 'fontkit_shaping', result if gcfg.verbose\n      count  += text.length ### NOTE counting approximate number of glyphs ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_rustybuzz_wasm_shaping = ( cfg, format ) -> new Promise ( resolve ) =>\n  RBW             = require '../../../apps/rustybuzz-wasm/pkg'\n  data            = @get_data cfg\n  count           = 0\n  { texts\n    font }        = data\n  unless RBW.has_font_bytes()\n    whisper \"^44766^ sending #{font.path} to rustybuzz-wasm...\"\n    font_bytes      = FS.readFileSync font.path\n    font_bytes_hex  = font_bytes.toString 'hex'\n    RBW.set_font_bytes font_bytes_hex\n    whisper \"^44766^ done\"\n  # format          = 'json'\n  # format          = 'short'\n  # format          = 'rusty'\n  resolve => new Promise ( resolve ) =>\n    for text in texts\n      result  = RBW.shape_text { format, text, }\n      show_result 'rustybuzz_wasm_shaping', result if gcfg.verbose\n      count  += text.length ### NOTE counting approximate number of glyphs ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@rustybuzz_wasm_json_shaping  = ( cfg ) -> @_rustybuzz_wasm_shaping cfg, 'json'\n@rustybuzz_wasm_short_shaping = ( cfg ) -> @_rustybuzz_wasm_shaping cfg, 'short'\n@rustybuzz_wasm_rusty_shaping = ( cfg ) -> @_rustybuzz_wasm_shaping cfg, 'rusty'\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  # gcfg.verbose  = true\n  bench         = BM.new_benchmarks()\n  n             = 500\n  gcfg.verbose  = ( n is 1 )\n  cfg           = { line_count: n, word_count: n, }\n  repetitions   = 2\n  test_names    = [\n    'harfbuzz_shaping'\n    # 'harfbuzzjs_shaping'\n    'opentypejs_shaping'\n    'fontkit_shaping'\n    'rustybuzz_wasm_json_shaping'\n    'rustybuzz_wasm_short_shaping'\n    'rustybuzz_wasm_rusty_shaping'\n    ]\n  global.gc() if global.gc?\n  data_cache = null\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      global.gc() if global.gc?\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n\n\n\n"
  ]
}