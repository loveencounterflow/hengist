{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/textshaping.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'TEXTSHAPING'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  DATOM = require '../../../apps/datom'\n  #.........................................................................................................\n  DATA.get_cjk_chr\n  debug DATA.get_words cfg.words_per_line\n  #.........................................................................................................\n  data_cache  = {}\n  data_cache  = DATOM.freeze data_cache\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@_datom_thaw_freeze = ( cfg, datom_cfg ) -> new Promise ( resolve ) =>\n  switch datom_cfg.version\n    when '7' then  DATOM = ( require '../datom@7.0.3' ).new datom_cfg\n    when '8' then  DATOM = ( require '../../../apps/datom' ).new datom_cfg\n    else throw new Error \"^464^ unknown version in datom_cfg: #{rpr datom_cfg}\"\n  { thaw\n    freeze }    = DATOM.export()\n  data          = @get_data cfg\n  count         = 0\n  resolve => new Promise ( resolve ) =>\n    for probe, probe_idx in data.datoms\n      facet_keys    = data.lists_of_facet_keys[   probe_idx ]\n      facet_values  = data.lists_of_facet_values[ probe_idx ]\n      probe         = thaw probe\n      whisper '^331^', probe, Object.isFrozen probe\n      for key, key_idx in facet_keys\n        probe[ key ]  = facet_values[ key_idx ]\n      probe         = freeze probe\n      # whisper '^331^', probe\n      count++ ### NOTE counting datoms, not facets ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_v7_thaw_freeze_f1 = ( cfg ) -> @_datom_thaw_freeze cfg, { version: '7', freeze: true,  }\n@datom_v7_thaw_freeze_f0 = ( cfg ) -> @_datom_thaw_freeze cfg, { version: '7', freeze: false, }\n@datom_v8_thaw_freeze_f1 = ( cfg ) -> @_datom_thaw_freeze cfg, { version: '8', freeze: true,  }\n@datom_v8_thaw_freeze_f0 = ( cfg ) -> @_datom_thaw_freeze cfg, { version: '8', freeze: false, }\n\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  bench       = BM.new_benchmarks()\n  # cfg         = { set_count: 100, datom_length: 5, change_facet_count: 3, }\n  # cfg         = { set_count: 20, datom_length: 5, change_facet_count: 3, }\n  cfg         = { set_count: 3, datom_length: 5, change_facet_count: 3, }\n  repetitions = 10\n  test_names  = [\n    'datom_v8_thaw_freeze_f1'\n    ]\n  global.gc() if global.gc?\n  data_cache = null\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      global.gc() if global.gc?\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  # await @run_benchmarks()\n  cfg         = { words_per_line: 3, }\n  debug @get_data cfg\n\n\n\n"
  ]
}