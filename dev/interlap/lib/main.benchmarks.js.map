{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/home/flow/jzr/hengist/dev/discontinuous-ranges/src/main.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'DISCONTINUOUS-RANGES/BENCHMARKS'\nrpr                       = CND.rpr\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\nassign                    = Object.assign\nafter                     = ( time_s, f ) -> setTimeout f, time_s * 1000\ndefer                     = setImmediate\n#...........................................................................................................\n@types                    = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  cast\n  type_of }               = @types.export()\n#...........................................................................................................\nBM                        = require '../../../lib/benchmarks'\n# DATA                      = require '../data-providers'\n#...........................................................................................................\ntimeout                   = 3 * 1000\nlimit_reached             = ( t0 ) -> Date.now() - t0 > timeout\nFSP                       = ( require 'fs' ).promises\nPATH                      = require 'path'\n#...........................................................................................................\nassets =\n  ok:                 false\n  probes:             []\n  segment_count:      0\n\n\n\n#-----------------------------------------------------------------------------------------------------------\nprepare = ( n ) -> new Promise ( resolve ) ->\n  rnd               = CND.random_integer.bind CND\n  probe_length_min  = 1\n  probe_length_max  = 100\n  first_cid         = 0x0000\n  last_cid          = 0x00ff\n  Δ_min             = 0x00\n  Δ_max             = 0x10\n  return resolve() if assets.ok\n  for probe_nr in [ 1 .. n ]\n    segments = []\n    for segment_nr in [ 1 .. ( rnd probe_length_min, probe_length_max ) ]\n      lo          = rnd first_cid, last_cid\n      hi          = lo + rnd Δ_min, Δ_max\n      [ lo, hi, ] = [ hi, lo, ] if lo > hi\n      segments.push [ lo, hi, ]\n      assets.segment_count++\n    assets.probes.push segments\n  assets.ok = true\n  resolve()\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@merge_dra_oop = ( n, show, name ) -> new Promise ( resolve ) =>\n  DRA = require './discontinuous-range-arithmetics'\n  await prepare n\n  #.........................................................................................................\n  resolve => new Promise merge = ( resolve ) =>\n    for segments in assets.probes\n      urange = new DRA.Urange()\n      for segment in segments\n        urange = urange.union segment\n      result = urange.as_lists()\n      info ( CND.grey segments )\n      info ( CND.yellow result )\n    resolve assets.segment_count\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@merge_dra_fun = ( n, show, name ) -> new Promise ( resolve ) =>\n  DRA = require './discontinuous-range-arithmetics'\n  await prepare n\n  #.........................................................................................................\n  resolve => new Promise merge = ( resolve ) =>\n    for segments in assets.probes\n      urange = DRA.new_range()\n      for segment in segments\n        urange = DRA.union urange, segment\n      info ( CND.grey segments )\n      info ( CND.yellow urange )\n    resolve assets.segment_count\n    return null\n  #.........................................................................................................\n  return null\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@benchmark = ->\n  # always_use_fresh_words    = false\n  bench       = BM.new_benchmarks()\n  # n           = 1e6\n  n           = 10\n  timeout     = n / 50e3 * 1000 + ( 2 * 1000 )\n  show        = false\n  show        = n < 21\n  repetitions = 1\n  # await BM.benchmark n, show, @\n  test_names = [\n    'merge_dra_oop'\n    'merge_dra_fun'\n    ]\n  for _ in [ 1 .. repetitions ]\n    CND.shuffle test_names\n    for test_name in test_names\n      await BM.benchmark bench, n, show, @, test_name\n    echo()\n  BM.show_totals bench\n  return null\n\n# commander                          heap-benchmark fontmirror interplot svgttf mingkwai-typesetter\n############################################################################################################\nif module is require.main then do =>\n  # demo_parse()\n  await @benchmark()\n  return null\n\n"
  ]
}