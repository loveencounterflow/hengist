{
  "version": 3,
  "file": "main.tests.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'InterLap/tests'\nrpr                       = CND.rpr\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\n#...........................................................................................................\ntest                      = require 'guy-test'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ equals\n  isa\n  type_of }               = types.export()\n{ freeze }                = require 'letsfreezethat'\n\n\n#===========================================================================================================\n# VALUE IDs\n#-----------------------------------------------------------------------------------------------------------\nid_of = do =>\n  ### TAINT ideally, should use WeakMap, but won't work with primitive values ###\n  ### NOTE could use sha1sum for strings, value itself for other primitives? use string rather than number? ###\n  ids           = new Map()\n  _last_id      = 0\n  return ( x ) ->\n    return R if ( R = ids.get x )\n    _last_id++\n    ids.set x, _last_id\n    return _last_id\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"new LAP.Interlap\" ] = ( T, done ) ->\n  LAP = require '../../../apps/interlap'\n  probes_and_matchers = [\n    [ null,                   null, \"unable to instantiate from a null\" ]\n    [ 42,                     null, \"unable to instantiate from a float\" ]\n    [ [ 42, ],                null, \"must be a list\" ]\n    [ [ [ 42, ], ],           null, \"length must be 2\" ]\n    [ [ [ 20, 10, ], ],       null, \"lo boundary must be less than or equal to hi boundary\" ]\n    [ [ [ Infinity, 20, ], ], null, \"lo boundary must be less than or equal to hi boundary\" ]\n    [ ( -> ( yield x ) for x in [ [ 5, 6, ], [ 7, 8, ], ] )(), null, \"unable to instantiate from a generator\" ]\n    [ [ [ -Infinity, 20, ], ], [ [ -Infinity, 20, ], ] ]\n    [ [], [], ]\n    [ [ [ 10, 20, ], ], [ [ 10, 20, ], ], ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = new LAP.Interlap probe\n      T.ok Object.isFrozen result\n      resolve LAP.as_list result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"new LAP.Interlap 2\" ] = ( T, done ) ->\n  LAP           = require '../../../apps/interlap'\n  L             = LAP.export().as_list\n  { Segment\n    Interlap }  = LAP.export()\n  do =>\n    result = new Interlap()\n    T.ok Object.isFrozen result\n    T.eq ( L result ), []\n  do =>\n    result = new Interlap new Segment [ 13, 13, ]\n    T.ok Object.isFrozen result\n    T.eq ( L result ), [ [ 13, 13, ], ]\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"LAP.interlap_from_segments\" ] = ( T, done ) ->\n  LAP = require '../../../apps/interlap'\n  probes_and_matchers = [\n    [ null,   null, \"must be a list\" ]\n    [ 42,     null, \"must be a list\" ]\n    [ [ 42, ], null, \"length must be 2\" ]\n    [ [ 10, 20, ], [ [ 10, 20, ], ], ]\n    [ [ 20, 10, ], null, \"lo boundary must be less than or equal to hi boundary\" ]\n    [ [ Infinity, 20, ], null, \"lo boundary must be less than or equal to hi boundary\" ]\n    [ [ -Infinity, 20, ], [ [ -Infinity, 20, ], ] ]\n    [ ( -> ( yield x ) for x in [ [ 5, 6, ], [ 7, 8, ], ] )(), [ [ 5, 8, ], ] ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = LAP.interlap_from_segments probe\n      T.ok Object.isFrozen result\n      resolve LAP.as_list result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"LAP.Interlap properties\" ] = ( T, done ) ->\n  LAP = require '../../../apps/interlap'\n  probes_and_matchers = [\n    [ [ [ 10, 20, ], [ 8, 12, ], [ 25, 30, ] ], [ [ [ 8, 20, ], [ 25, 30, ] ], { first: [ 8, 20 ], last: [ 25, 30 ], size: 19, lo: 8, hi: 30 }, ], null, ]\n    [ [ [ -Infinity, 20 ] ], [ [ [ -Infinity, 20 ] ], { first: [ -Infinity, 20 ], last: [ -Infinity, 20 ], size: Infinity, lo: -Infinity, hi: 20 } ], null ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      range                           = LAP.interlap_from_segments probe...\n      { first, last, size, lo, hi, }  = range\n      T.ok Object.isFrozen range\n      T.ok Object.isFrozen range.first\n      T.ok Object.isFrozen range.last\n      # range.push \"won't work\"\n      resolve [ range, { first, last, size, lo, hi, }, ]\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"LAP.new_segment\" ] = ( T, done ) ->\n  LAP = require '../../../apps/interlap'\n  probes_and_matchers = [\n    [ [ [ 1, 5, ], ], [ 1, 5, ], ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = new LAP.Segment probe...\n      T.ok Object.isFrozen result\n      T.ok result instanceof LAP.Segment\n      T.eq result.lo, result[ 0 ]\n      T.eq result.hi, result[ 1 ]\n      resolve LAP.as_list result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"LAP.Segment.from\" ] = ( T, done ) ->\n  LAP = require '../../../apps/interlap'\n  probes_and_matchers = [\n    [ null, null, \"not implemented\" ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = LAP.Segment.from probe\n      resolve result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"LAP.segment_from_lohi\" ] = ( T, done ) ->\n  LAP = require '../../../apps/interlap'\n  probes_and_matchers = [\n    [ [ 1, 5, ],      [ 1, 5, ], ]\n    [ [ 1, NaN, ],    null, 'hi boundary must be an infnumber', ]\n    [ [ 1, ],         null, 'length must be 2', ]\n    [ [ 100, -100, ], null, 'lo boundary must be less than or equal to hi boundary', ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = LAP.segment_from_lohi probe...\n      T.ok Object.isFrozen result\n      T.ok result instanceof LAP.Segment\n      T.eq result.lo, result[ 0 ]\n      T.eq result.hi, result[ 1 ]\n      resolve LAP.as_list result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"LAP.Interlap.from\" ] = ( T, done ) ->\n  LAP = require '../../../apps/interlap'\n  probes_and_matchers = [\n    [ null, null, \"not implemented\" ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = LAP.Interlap.from probe\n      resolve result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"union with single segment\" ] = ( T, done ) ->\n  LAP = require '../../../apps/interlap'\n  probes_and_matchers = [\n    [ [ [ 10, 20, ], [ 1, 1, ], ], [ [ 1, 1, ], [ 10, 20, ], ], ]\n    [ [ [ 10, 20, ], [ 1, 1, ], [ 5, 5, ], [ 18, 24, ] ], [ [ 1, 1, ], [ 5, 5, ], [ 10, 24, ], ], ]\n    [ [ [ 100, Infinity, ], [ 80, 90, ], ], [ [ 80, 90, ], [ 100, Infinity, ] ] ]\n    [ [ [ 100, Infinity, ], [ 80, 100, ], ], [ [ 80, Infinity, ], ] ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      [ first, segments..., ] = probe\n      result = LAP.interlap_from_segments first\n      T.ok Object.isFrozen result\n      for segment in segments\n        [ lo, hi, ] = segment\n        segment = LAP.segment_from_lohi lo, hi\n        T.eq segment.lo, segment[ 0 ]\n        next_result = LAP.union result, segment\n        T.ok Object.isFrozen next_result\n        T.ok next_result instanceof LAP.Interlap\n        T.ok not equals result, next_result\n        result = next_result\n      resolve LAP.as_list result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"union with multiple segments\" ] = ( T, done ) ->\n  LAP = require '../../../apps/interlap'\n  probes_and_matchers = [\n    [ [ [], [ [ 1, 1, ], [ -3, -1, ], ] ], [ [ -3, -1, ], [ 1, 1, ], ] ]\n    [ [ [], [ [ 1, 1, ], [ -3, 3, ], ] ], [ [ -3, 3, ], ] ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      [ first, segments, ] = probe\n      result = new LAP.Interlap first\n      result = LAP.union result, segments...\n      resolve LAP.as_list result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"union with Interlap\" ] = ( T, done ) ->\n  LAP = require '../../../apps/interlap'\n  probes_and_matchers = [\n    [ [ [], [ [ 1, 1, ], [ -3, -1, ], ] ], [ [ -3, -1, ], [ 1, 1, ], ] ]\n    [ [ [], [ [ 1, 1, ], [ -3, 3, ], ] ], [ [ -3, 3, ], ] ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      [ first, ranges, ] = probe\n      result  = new LAP.Interlap first\n      ranges  = ( ( new LAP.Interlap [ range, ] ) for range in ranges )\n      result  = LAP.union result, ranges...\n      resolve LAP.as_list result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Interlap differences\" ] = ( T, done ) ->\n  LAP           = require '../../../apps/interlap'\n  { Interlap }  = LAP\n  L             = LAP.export().as_list\n  #.........................................................................................................\n  p1            = freeze [ [ 10, 100, ], ]\n  p2            = freeze [ [ 20, 50, ], ]\n  p3            = freeze [ [ 80, 120, ], ]\n  d1            = new Interlap p1\n  d2            = new Interlap p2\n  d3            = new Interlap p3\n  id_of_d1      = id_of d1\n  id_of_d2      = id_of d2\n  id_of_d3      = id_of d3\n  #.........................................................................................................\n  test_invariance = ->\n    T.eq ( id_of d1 ), id_of_d1\n    T.eq ( id_of d2 ), id_of_d2\n    T.eq ( id_of d3 ), id_of_d3\n    T.eq ( L d1 ), p1\n    T.eq ( L d2 ), p2\n    T.eq ( L d3 ), p3\n  #.........................................................................................................\n  info \"#{L d1} without #{L d2}\", L LAP.difference d1, d2; test_invariance()\n  info \"#{L d2} without #{L d1}\", L LAP.difference d2, d1; test_invariance()\n  info \"#{L d1} without #{L d3}\", L LAP.difference d1, d3; test_invariance()\n  info \"#{L d3} without #{L d1}\", L LAP.difference d3, d1; test_invariance()\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"InterLap: DRange example converted\" ] = ( T, done ) ->\n  ### const DRange = require('drange');\n      let allNums = new DRange(1, 100);                       // [ 1-100 ]\n      let badNums = DRange(13).add(8).add(60,80);             // [8, 13, 60-80]\n      let goodNums = allNums.clone().subtract(badNums);\n      console.log(goodNums.toString());                       // [ 1-7, 9-12, 14-59, 81-100 ]\n      let randomGoodNum = goodNums.index(Math.floor(Math.random() * goodNums.length)); ###\n  LAP             = require '../../../apps/interlap'\n  L               = LAP.export().as_list\n  { Interlap\n    Segment\n    union\n    difference }  = LAP.export()\n  allNums         = new Interlap [ [ 1, 100, ], ]\n  allNums_id      = id_of allNums\n  badNums         = new Interlap [ [ 13, 13, ], ]\n  badNums_id      = id_of badNums\n  badNums         = new Interlap new Segment [ 13, 13, ]\n  T.ok not equals ( id_of badNums ), badNums_id\n  badNums         = union badNums, new Segment [ 8, 8, ]\n  badNums         = union badNums, new Segment [ 60, 80, ]\n  goodNums        = difference allNums, badNums\n  T.eq ( id_of allNums ), allNums_id\n  T.eq ( L allNums ), [ [ 1, 100, ], ]\n  T.eq ( L goodNums ), [ [ 1, 7, ], [ 9, 12, ], [ 14, 59, ], [ 81, 100, ], ]\n  info ( L allNums  ); urge ( allNums_list  = LAP.as_numbers allNums   )\n  info ( L badNums  ); urge ( badNums_list  = LAP.as_numbers badNums   )\n  info ( L goodNums ); urge ( goodNums_list = LAP.as_numbers goodNums  )\n  T.eq allNums_list,  [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100 ]\n  T.eq badNums_list,  [ 8, 13, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 ]\n  T.eq goodNums_list, [ 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100 ]\n  info LAP.includes goodNums, 3\n  try info LAP.includes goodNums, [ 1, 7, ] catch error then T.ok ( /got a list/ ).test error.message\n  T.ok error? ### ensure error was thrown ###\n  T.ok     LAP.includes goodNums, new Segment [ 1, 7, ]\n  T.ok     LAP.includes goodNums, new Segment [ 1, 3, ]\n  T.ok     LAP.includes goodNums, new Segment [ 11, 12, ]\n  T.ok not LAP.includes goodNums, new Segment [ 11, 13, ]\n  T.ok LAP.includes goodNums, ( goodNums_list[ CND.random_integer 0, goodNums_list.length - 1 ] )\n  T.ok LAP.includes goodNums, ( goodNums_list[ CND.random_integer 0, goodNums_list.length - 1 ] )\n  T.ok LAP.includes goodNums, ( goodNums_list[ CND.random_integer 0, goodNums_list.length - 1 ] )\n  # info LAP.\n  # d1      = new LAP.Interlap d0\n  # info LAP.types.cast 'interlap', 'list', d1\n  # info LAP.types.cast 'list', 'interlap', d1\n  # info LAP.as_list d1\n  # info new LAP.Interlap [ [ 4, 6 ], [ 7, 7, ], [ 11, 19, ], ]\n  done() if done?\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"InterLap: cast to list\" ] = ( T, done ) ->\n  LAP           = require '../../../apps/interlap'\n  d0      = [ [ 110, 115, ], [ 112, 120, ], [ 300, 310, ], ]\n  d1      = new LAP.Interlap d0\n  info LAP.types.cast 'interlap', 'list', d1\n  info LAP.types.cast 'list', 'interlap', d1\n  info LAP.as_list d1\n  info new LAP.Interlap [ [ 4, 6 ], [ 7, 7, ], [ 11, 19, ], ]\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_equality_between_custom_and_basic_values = ->\n  LAP           = require '../../../apps/interlap'\n  d0      = [ [ 110, 115, ], [ 112, 120, ], [ 300, 310, ], ]\n  d1      = new LAP.Interlap d0\n  d1_list = [ [ 110, 120, ], [ 300, 310, ] ]\n  info d0\n  info d1_list\n  info d0 is d1\n  info equals d0, d1\n  info equals d1, d1_list\n  info d1\n  info [ d1..., ]\n  info ( [ d..., ] for d in d1 )\n  info equals ( [ d..., ] for d in d1 ), d1_list\n  info type_of d0\n  info type_of d1\n  info type_of d1_list\n  info equals ( LAP.as_list d1 ), d1_list\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  LAP = require '../../../apps/interlap'\n  d0  = [ [ 1, 3, ], [ 5, 7, ] ]\n  info d1 = new LAP.Interlap           d0\n  info d2 = LAP.interlap_from_segments d0...\n  info equals d1, d2\n  info type_of               d1\n  info equals d1, d0\n  info equals d1.size, d0.size\n  info d0.size\n  info d1.size\n  # class Xxxx\n  # xxxx = new Xxxx()\n  # info CND.type_of           xxxx\n  # info types.type_of         xxxx\n  # info typeof                xxxx\n  # info Object::toString.call xxxx\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_merge_ranges = ->\n  merge_ranges  = require 'merge-ranges'\n  ranges        = [\n    [ 10, 20, ]\n    [ 15, 30, ]\n    [ 30, 32, ]\n    [ 42, 42, ]\n    [ 88, 99, ]\n    ]\n  a = merge_ranges ranges\n  b = @ranges_from_urange new Urange ranges...\n  info 'merging:', a\n  info 'merging:', b\n  validate.true CND.equals a, b\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_subtract_ranges_DRange = ->\n  ranges_from_drange   = ( drange ) -> ( [ r.low, r.high, ] for r in drange.ranges )\n  numbers_from_drange  = ( drange ) -> ( ( drange.index i ) for i in [ 0 ... drange.length ] )\n  super_rng   = new DRange 1, 100\n  blue_rng    = new DRange 13\n  blue_rng    = blue_rng.add 8\n  blue_rng    = blue_rng.add 60, 80 # [8, 13, 60-80]\n  blue_rng    = blue_rng.add 81\n  blue_rng    = blue_rng.add new DRange 27, 55\n  help '^3332^', ranges_from_drange blue_rng\n  red_rng     = super_rng.clone().subtract blue_rng\n  help '^556^', ranges_from_drange red_rng\n  help '^556^', red_rng.length\n  info '^334^', numbers_from_drange red_rng\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"InterLap: Object methods\" ] = ( T, done ) ->\n  LAP             = require '../../../apps/interlap'\n  L               = LAP.export().as_list\n  { Interlap\n    Segment\n    union\n    difference }  = LAP.export()\n  #.........................................................................................................\n  d0    = new Segment [ 1, 100, ]\n  d1    = new Interlap [ d0, [ 120, 125, ], ]\n  CAT = require '../../../apps/multimix/lib/cataloguing'\n  debug ( k for k of d0 )\n  debug CAT.all_keys_of d0\n  debug d1.join '*'\n  # debug Array::map.call d1, ( s ) -> \"{#{s.lo}|#{s.hi}}\"\n  # debug d1.filter ( s ) -> false # s.lo < 100\n  # debug Array::filter.call d1, ( s ) -> s.lo < 100\n  done()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # demo_1()\n  # demo_equality_between_custom_and_basic_values()\n  test @\n  # test @[ \"InterLap: Object methods\" ]\n  # @[ \"InterLap: Object methods\" ]()\n  # test @[ \"InterLap: DRange example converted\" ]\n  # @[ \"InterLap: DRange example converted\" ]()\n  # test @[ \"Interlap differences\" ]\n  # test @[ \"InterLap: cast to list\" ]\n  # test @[ \"LAP.interlap_from_segments\" ]\n  # test @[ \"LAP.Interlap properties\" ]\n  # test @[ \"LAP.new_segment\" ]\n  # test @[ \"LAP.Segment.from\" ]\n  # test @[ \"LAP.Interlap.from\" ]\n  # test @[ \"LAP.segment_from_lohi\" ]\n  # test @[ \"union with single segment\" ]\n  # test @[ \"new LAP.Interlap\" ]\n  # test @[ \"union with multiple segments\" ]\n  # test @[ \"union with Interlap\" ]\n\n\n"
  ]
}