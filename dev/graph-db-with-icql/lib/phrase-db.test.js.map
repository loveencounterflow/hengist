{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/phrase-db.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\n# on_process_exit           = require 'exit-hook'\n# sleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\n{ SQL, I, L, X, }         = new ( require '../../../apps/icql-dba/lib/sql' ).Sql\njr                        = JSON.stringify\njp                        = JSON.parse\nPATH                      = require 'path'\nH                         = require './test-helpers'\n\n#-----------------------------------------------------------------------------------------------------------\ninsert_kanji_phrases = ( gdb ) ->\n  gdb.dba.execute SQL\"insert into predicates ( p, is_transitive ) values ( 'isa',       false );\"\n  gdb.dba.execute SQL\"insert into predicates ( p, is_transitive ) values ( 'contains',  true );\"\n  #.........................................................................................................\n  nr      = 0\n  containments = [\n    '或口'\n    '或戈'\n    '蟈虫'\n    '戈弋丿'\n    '弋丶'\n    '蟈國'\n    '國或'\n    '口丨'\n    '口一' ]\n  #.........................................................................................................\n  glyphs  = new Set()\n  for containment in containments\n    [ glyph, component, ] = Array.from containment\n    glyphs.add glyph\n    glyphs.add component\n  glyphs  = Array.from glyphs\n  #.........................................................................................................\n  insert_phrase = SQL\"\"\"\n    insert into phrases ( s, p, o, nr, ref )\n      values ( ?, 'isa', 'glyph', ?, ? );\"\"\"\n  #.........................................................................................................\n  insert_containment = SQL\"\"\"\n    insert into phrases ( s, p, o, nr, ref )\n      values ( ?, 'contains', ?, ?, ? );\"\"\"\n  #.........................................................................................................\n  for glyph in glyphs\n    nr++\n    ref = jr nr\n    gdb.dba.run insert_phrase, [ glyph, nr, ref, ]\n  #.........................................................................................................\n  for containment in containments\n    nr++\n    ref = jr nr\n    [ glyph, component, ] = Array.from containment\n    gdb.dba.run insert_containment, [ glyph, component, nr, ref, ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nshow_predicates_table = ( gdb ) ->\n  console.table gdb.dba.list gdb.dba.query SQL\"\"\"select * from predicates;\"\"\"\n\n#-----------------------------------------------------------------------------------------------------------\nshow_phrases_table = ( gdb ) ->\n  console.table gdb.dba.list gdb.dba.query SQL\"\"\"\n    select s, p, o, a, nr, ref, lck from phrases\n      order by\n        s,\n        nr\n        -- vnr_as_hollerith( vnr )\n      ;\"\"\"\n\n#-----------------------------------------------------------------------------------------------------------\nshow_phrase = ( gdb, row ) ->\n  if row.s?\n    info '^982^', \"#{row.s} #{row.p} #{row.o}\"\n  else if row.s2?\n    info '^982^', \"#{row.s1} #{row.p1} #{row.o1}, which #{row.p2} #{row.o2}\"\n  else\n    info '^982^', \"#{row.s1} #{row.p1} #{row.o1}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nshow_phrases_with_first_derivatives = ( gdb ) ->\n  for d from gdb.dba.query SQL\"\"\"\n    select distinct\n        p1.s as s1,\n        p1.p as p1,\n        p1.o as o1,\n        p2.s as s2,\n        p2.p as p2,\n        p2.o as o2\n      from phrases as p1\n      left join phrases as p2 on ( p1.o = p2.s );\"\"\"\n    # debug '^767^', d\n    show_phrase gdb, d\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n_get_containment_formula = ( row ) -> \"#{row.s}∋#{row.o}\"\n\n#-----------------------------------------------------------------------------------------------------------\nshow_phrases_with_derivation = ( gdb ) ->\n  for d from gdb.dba.query SQL\"\"\"select * from phrases order by s, p, nr;\"\"\"\n    continue unless d.p is 'contains'\n    derivation = ''\n    if ( type_of jp d.ref ) is 'list'\n      derivation = d.ref.replace /[0-9]+/g, ( $0 ) =>\n        nr          = jp $0\n        sub_phrase  = gdb.dba.first_row gdb.dba.query SQL\"select * from phrases where nr = ?;\", [ nr, ]\n        return _get_containment_formula sub_phrase\n      derivation = derivation.replace /\\[/g, '( '\n      derivation = derivation.replace /\\]/g, ' )'\n      derivation = derivation.replace /,/g, ' ∧ '\n      derivation = '⇐ ' + derivation\n    info ( _get_containment_formula d ), derivation\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nderive_phrases = ( gdb ) ->\n  gdb.dba.execute SQL\"\"\"update phrases set lck = true;\"\"\"\n  max_nr = gdb.dba.first_value gdb.dba.query SQL\"select max( nr ) from phrases;\"\n  { changes, } = gdb.dba.run SQL\"\"\"\n    insert into phrases ( s, p, o, a, nr, ref )\n      select -- distinct\n          p1.s                                                  as s,\n          p2.p                                                  as p,\n          p2.o                                                  as o,\n          p2.a                                                  as a,\n          -- max( p1.nr ) + 1                                      as nr,\n          row_number() over () + $max_nr                        as nr,\n          -- row_number() over ()                                  as nr,\n          ref_push( p1.ref, p2.ref )                            as ref\n        from phrases    as p1\n        join predicates as pr on ( ( p1.p = pr.p ) and pr.is_transitive )\n        join phrases    as p2 on ( p2.lck and ( p1.p = p2.p ) and ( p1.o = p2.s ) )\n        where p1.lck\n        on conflict do nothing;\n      \"\"\", { max_nr, }\n  # gdb.dba.run SQL\"update phrases set nr = nr + ? where not lck;\", [ max_nr, ]\n  return changes\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Graphdb: phrase DB\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { Graphdb }   = require './graph-db'\n  # path          = '/tmp/icql-graph.db'\n  schema        = 'main'\n  gdb           = new Graphdb { schema, ram: true, }\n  #.........................................................................................................\n  insert_kanji_phrases  gdb\n  whisper '-'.repeat 108; show_phrase gdb, d for d from gdb.dba.query SQL\"\"\"select * from phrases;\"\"\"\n  whisper '-'.repeat 108; show_phrases_with_first_derivatives gdb\n  show_predicates_table gdb\n  #.........................................................................................................\n  lap_count     = 0\n  loop\n    show_phrases_table gdb\n    #.......................................................................................................\n    lap_count++\n    break if lap_count > 10\n    derivative_count  = derive_phrases gdb\n    phrase_count      = gdb.dba.first_value gdb.dba.query SQL\"\"\"select count(*) from phrases;\"\"\"\n    whisper '-'.repeat 108\n    info '^587^', { lap_count, derivative_count, phrase_count, }\n    break if derivative_count is 0\n  #.........................................................................................................\n  show_phrases_with_derivation gdb\n  done?()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # test @, { timeout: 10e3, }\n  # test @[ \"Graphdb: phrase DB\" ]\n  @[ \"Graphdb: phrase DB\" ]()\n\n"
  ]
}