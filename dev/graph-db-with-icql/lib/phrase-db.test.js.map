{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/phrase-db.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\n# on_process_exit           = require 'exit-hook'\n# sleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\n{ SQL, I, L, X, }         = new ( require '../../../apps/icql-dba/lib/sql' ).Sql\njr                        = JSON.stringify\njp                        = JSON.parse\nPATH                      = require 'path'\nH                         = require './test-helpers'\n\n#-----------------------------------------------------------------------------------------------------------\ninsert_kanji_phrases = ( gdb ) ->\n  gdb.dba.execute SQL\"\"\"insert into predicates ( p, is_transitive ) values ( 'isa',       false );\"\"\"\n  gdb.dba.execute SQL\"\"\"insert into predicates ( p, is_transitive ) values ( 'contains',  true );\"\"\"\n  gdb.dba.execute SQL\"\"\"insert into phrases ( s, p, o ) values ( '或', 'isa', 'glyph' );\"\"\"\n  gdb.dba.execute SQL\"\"\"insert into phrases ( s, p, o ) values ( '口', 'isa', 'glyph' );\"\"\"\n  gdb.dba.execute SQL\"\"\"insert into phrases ( s, p, o ) values ( '或', 'contains', '口' );\"\"\"\n  gdb.dba.execute SQL\"\"\"insert into phrases ( s, p, o ) values ( '或', 'contains', '戈' );\"\"\"\n  gdb.dba.execute SQL\"\"\"insert into phrases ( s, p, o ) values ( '國', 'contains', '或' );\"\"\"\n  gdb.dba.execute SQL\"\"\"insert into phrases ( s, p, o ) values ( '口', 'contains', '丨' );\"\"\"\n  gdb.dba.execute SQL\"\"\"insert into phrases ( s, p, o ) values ( '口', 'contains', '一' );\"\"\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nshow_predicates_table = ( gdb ) ->\n  console.table gdb.dba.list gdb.dba.query SQL\"\"\"select * from predicates;\"\"\"\n\n#-----------------------------------------------------------------------------------------------------------\nshow_phrases_table = ( gdb ) ->\n  console.table gdb.dba.list gdb.dba.query SQL\"\"\"select * from phrases;\"\"\"\n\n#-----------------------------------------------------------------------------------------------------------\nshow_phrase = ( gdb, row ) ->\n  if row.s?\n    info '^982^', \"#{row.s} #{row.p} #{row.o}\"\n  else if row.s2?\n    info '^982^', \"#{row.s1} #{row.p1} #{row.o1}, which #{row.p2} #{row.o2}\"\n  else\n    info '^982^', \"#{row.s1} #{row.p1} #{row.o1}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nshow_phrases_with_first_derivatives = ( gdb ) ->\n  for d from gdb.dba.query SQL\"\"\"\n    select distinct\n        p1.s as s1,\n        p1.p as p1,\n        p1.o as o1,\n        p2.s as s2,\n        p2.p as p2,\n        p2.o as o2\n      from phrases as p1\n      left join phrases as p2 on ( p1.o = p2.s );\"\"\"\n    # debug '^767^', d\n    show_phrase gdb, d\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ncopy_derivatives_to_phrases = ( gdb ) ->\n  ### NOTE `where true` clause b/c of [parsing ambiguity](https://sqlite.org/lang_upsert.html) ###\n  { changes, } = gdb.dba.run SQL\"\"\"\n    insert into phrases as p1 ( s, p, o, a )\n      /* ( */ select distinct s, p, o, a from derivatives as ir where true /* ) */\n      on conflict do nothing;\"\"\"\n  return changes\n\n#-----------------------------------------------------------------------------------------------------------\nderive_phrases = ( gdb ) ->\n  gdb.dba.execute SQL\"\"\"delete from derivatives;\"\"\"\n  { changes, } = gdb.dba.run SQL\"\"\"\n    insert into derivatives as ir ( s, p, o, a )\n      select distinct\n          p1.s as s,\n          p2.p as p,\n          p2.o as o,\n          p2.a as a\n        from phrases    as p1\n        join predicates as pr on ( ( p1.p = pr.p ) and pr.is_transitive )\n        join phrases    as p2 on ( ( p1.p = p2.p ) and ( p1.o = p2.s ) )\n        -- returning *;\"\"\"\n  return changes\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Graphdb: phrase DB\" ] = ( T, done ) ->\n  T.halt_on_error()\n  { Graphdb }   = require './graph-db'\n  # path          = '/tmp/icql-graph.db'\n  schema        = 'main'\n  gdb           = new Graphdb { schema, ram: true, }\n  #.........................................................................................................\n  insert_kanji_phrases  gdb\n  whisper '-'.repeat 108; show_phrase gdb, d for d from gdb.dba.query SQL\"\"\"select * from phrases;\"\"\"\n  whisper '-'.repeat 108; show_phrases_with_first_derivatives gdb\n  show_predicates_table gdb\n  #.........................................................................................................\n  lap_count     = 0\n  loop\n    whisper '-'.repeat 108\n    show_phrases_table gdb\n    #.......................................................................................................\n    lap_count++\n    prv_row_count     = gdb.dba.first_value gdb.dba.query SQL\"\"\"select count(*) from phrases;\"\"\"\n    derivative_count  = derive_phrases gdb\n    new_phrase_count  = copy_derivatives_to_phrases gdb\n    info '^587^', { prv_row_count, derivative_count, new_phrase_count, }\n    break if new_phrase_count is 0\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # test @, { timeout: 10e3, }\n  test @[ \"Graphdb: phrase DB\" ]\n"
  ]
}