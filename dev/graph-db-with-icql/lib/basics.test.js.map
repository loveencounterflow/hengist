{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/basics.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\n# on_process_exit           = require 'exit-hook'\n# sleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\n{ SQL, I, L, X, }         = new ( require '../../../apps/icql-dba/lib/sql' ).Sql\njr                        = JSON.stringify\nPATH                      = require 'path'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\ninsert_arithmetic_edges = ( gdb, nr_max ) ->\n  for nr in [ 1 .. nr_max ]\n    gdb.insert_node { id: \"node#{nr}\", nr, text: \"<#{nr}>\", }\n  for nr_1 in [ 1 .. nr_max ]\n    for nr_2 in [ 1 .. nr_max ]\n      id_1 = \"node#{nr_1}\"\n      id_2 = \"node#{nr_2}\"\n      if ( nr_1 isnt 1 ) and ( nr_1 isnt nr_2 ) and ( ( value = nr_2 / nr_1 ) is ( nr_2 // nr_1 ) )\n        gdb.insert_edge id_1, id_2, { type: 'is_divider_of', a: nr_1, b: nr_2, value, }\n      # if ( nr_2 isnt 1 ) and ( nr_1 isnt nr_2 ) and ( ( value = nr_1 / nr_2 ) is ( nr_1 // nr_2 ) )\n        gdb.insert_edge id_2, id_1, { type: 'is_divided_by', a: nr_2, b: nr_1, value, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nreinitialize_db = ( gdb ) ->\n  ### TAINT implement `clear-schema()` ###\n  gdb.dba.pragma SQL\"foreign_keys = off;\"\n  gdb.dba.execute SQL\"drop index if exists id_idx\"\n  gdb.dba.execute SQL\"drop index if exists source_idx\"\n  # gdb.dba.execute SQL\"drop index if exists sqlite_autoindex_nodes_1\"\n  gdb.dba.execute SQL\"drop index if exists target_idx\"\n  gdb.dba.execute SQL\"drop table if exists edges\"\n  gdb.dba.execute SQL\"drop table if exists nodes\"\n  gdb.dba.execute SQL\"drop table if exists edges_g;\"\n  gdb.dba.pragma SQL\"foreign_keys = on;\"\n  gdb.init_db()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Graphdb: create\" ] = ( T, done ) ->\n  T.halt_on_error()\n  { Graphdb } = require './graph-db'\n  path        = '/tmp/icql-graph.db'\n  schema      = 'main'\n  gdb         = new Graphdb { ram: true, schema, }\n  #.........................................................................................................\n  T.eq ( d.name for d from gdb.dba.walk_objects { schema, } ).sort(), [ 'edges', 'id_idx', 'nodes', 'source_idx', 'sqlite_autoindex_nodes_1', 'target_idx' ]\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Graphdb: insert_node()\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Graphdb } = require './graph-db'\n  path        = '/tmp/icql-graph.db'\n  schema      = 'main'\n  gdb         = new Graphdb { ram: true, schema, }\n  #.........................................................................................................\n  # gdb.dba.run SQL\"insert into nodes ( body ) values ( ? )\", [ ( jr { id: '123', } ), ]\n  for nr in [ 1 .. 10 ]\n    gdb.insert_node { id: \"node#{nr}\", nr, text: \"<#{nr}>\", }\n  result = gdb.dba.list gdb.dba.query SQL\"select * from #{I schema}.nodes order by id;\"\n  result = ( [ d.id, ( JSON.parse d.body ).text, ] for d from result )\n  urge result\n  T.eq result, [ [ 'node1', '<1>' ], [ 'node10', '<10>' ], [ 'node2', '<2>' ], [ 'node3', '<3>' ], [ 'node4', '<4>' ], [ 'node5', '<5>' ], [ 'node6', '<6>' ], [ 'node7', '<7>' ], [ 'node8', '<8>' ], [ 'node9', '<9>' ] ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Graphdb: insert_edge()\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Graphdb } = require './graph-db'\n  # path        = '/tmp/icql-graph.db'\n  schema      = 'main'\n  gdb         = new Graphdb { schema, ram: true, }\n  nr_max      = 20\n  #.........................................................................................................\n  # gdb.dba.run SQL\"insert into nodes ( body ) values ( ? )\", [ ( jr { id: '123', } ), ]\n  insert_arithmetic_edges gdb, nr_max\n  urge '^3343^', node for node from gdb.dba.query SQL\"select * from nodes order by id;\"\n  edge_count = 0\n  for edge from gdb.dba.query SQL\"select * from edges order by source, target;\"\n    edge_count++\n    d = JSON.parse edge.properties\n    urge '^3343^', d.a, d.type, d.b\n  # T.eq edge_count, 27\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Graphdb: bfsvtab\" ] = ( T, done ) ->\n  ### https://github.com/abetlen/sqlite3-bfsvtab-ext ###\n  # T.halt_on_error()\n  { Graphdb } = require './graph-db'\n  path        = '/tmp/icql-graph.db'\n  schema      = 'main'\n  gdb         = new Graphdb { path, schema, }\n  nr_max      = 20\n  #.........................................................................................................\n  reinitialize_db gdb\n  #.........................................................................................................\n  gdb.dba.load_extension PATH.resolve PATH.join __dirname, '../bfsvtab.so'\n  insert_arithmetic_edges gdb, nr_max\n  gdb.dba.execute SQL\"create table edges_g ( source integer, target integer );\"\n  edges = [ ( gdb.dba.query SQL\"select * from edges;\" )..., ]\n  for edge from edges\n    debug '^197^', edge\n    source = parseInt ( edge.source.replace 'node', '' ), 10\n    target = parseInt ( edge.target.replace 'node', '' ), 10\n    gdb.dba.run SQL\"insert into edges_g ( source, target ) values ( ?, ? );\", [ source, target, ]\n  debug '^509^', edge for edge from gdb.dba.query SQL\"select * from edges_g order by source, target;\"\n  #.........................................................................................................\n  sql = SQL\"\"\"\n    select\n        b.root            as source,\n        b.id              as target,\n        b.distance        as distance,\n        b.shortest_path   as shortest_path,\n        b.parent          as parent,\n        n.body            as target_node\n      from bfsvtab as b\n      left join nodes as n on ( n.id = 'node' || b.id )\n      where true\n        and tablename  = 'edges_g'\n        and fromcolumn = 'source'\n        and tocolumn   = 'target'\n        and root       = ?\n        -- and id         = 4;\n      order by distance\n    \"\"\"\n  for source in [ 1 .. 20 ]\n    whisper '^665^', '-'.repeat 108\n    for row from gdb.dba.query sql, [ source, ]\n      info '^665^', row\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif module is require.main then do =>\n  # test @, { timeout: 10e3, }\n  # test @[ \"Graphdb: insert_node()\" ]\n  # test @[ \"Graphdb: insert_edge()\" ]\n  # @[ \"Graphdb: insert_node()\" ]()\n  test @[ \"Graphdb: bfsvtab\" ]\n"
  ]
}