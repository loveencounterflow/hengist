{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/advanced-graph.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\n# on_process_exit           = require 'exit-hook'\n# sleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\n{ SQL, I, L, X, }         = new ( require '../../../apps/icql-dba/lib/sql' ).Sql\njr                        = JSON.stringify\nPATH                      = require 'path'\nH                         = require './test-helpers'\n\n\n#-----------------------------------------------------------------------------------------------------------\ninsert_formulas_and_components = ( gdb ) ->\n  #.........................................................................................................\n  glyphs_from_formula = ( formula ) -> Array.from formula\n  walk_glyphs_from_formula = ( formula ) -> yield from glyphs_from_formula\n  cfg =\n    columns:  [ 'glyph', ]\n    rows:     walk_glyphs_from_formula\n  gdb.dba.sqlt.table 'glyphs_from_formula', cfg\n  #.........................................................................................................\n  gdb.dba.function 'echo', { deterministic: true, varargs: false, }, ( x ) ->\n    urge CND.reverse '^344^', x\n    return x\n  #.........................................................................................................\n  gdb.dba.function 'insert_glyph', { deterministic: true, varargs: false, }, ( glyph ) ->\n    urge CND.reverse '^344^ inserting', glyph\n    gdb.dba.run SQL\"\"\"\n      insert into nodes ( body ) values ( '{ \"id\": \"' ? '\", \"type\": \"glyph\" }' )\n        on conflict ( id ) do nothing;\n        \"\"\", [ glyph, ]\n    return null\n  # #.........................................................................................................\n  # sql = SQL\"\"\"\n  #   create trigger insert_nodes_from_edge_source before insert on edges\n  #     when not exists ( select 1 from nodes where id = new.source )\n  #     begin\n  #       select echo( '^562^ auto-inserting ' || new.source );\n  #       insert into nodes ( body ) values ( '{ \"id\": \"' || new.source || '\" }' );\n  #       end;\"\"\"\n  # gdb.dba.execute sql\n  # #.........................................................................................................\n  # sql = SQL\"\"\"\n  #   create trigger insert_nodes_from_edge_target before insert on edges\n  #     when not exists ( select 1 from nodes where id = new.target )\n  #     begin\n  #       select echo( '^562^ auto-inserting ' || new.target );\n  #       insert into nodes ( body ) values ( '{ \"id\": \"' || new.target || '\" }' );\n  #       end;\"\"\"\n  # gdb.dba.execute sql\n  #.........................................................................................................\n  registry          = {}\n  registry[ '來' ]  = '{來|⿻木从}'\n  registry[ '木' ]  = '{木|⿻十人}'\n  registry[ '十' ]  = '{十|⿻一丨}'\n  registry[ '人' ]  = '{人|⿰丿㇏}'\n  # # registry[ '丶' ]  = '{丶|●}'\n  # registry[ '弓' ]  = '{弓|⿱&jzr#xe139;㇉}'\n  # registry[ '' ]  = '{|⿱𠃌一}'\n  # registry[ '从' ]  = '{从|⿰人人}'\n  # registry[ '幺' ]  = '{幺|⿰&jzr#xe10e;丶}'\n  # registry[ '&jzr#xe10e;' ]  = '{&jzr#xe10e;|⿱𠃋𠃋}'\n  # registry[ '𢆰' ]  = '{𢆰|⿱一幺}'\n  # registry[ '𤣥' ]  = '{𤣥|⿱亠&jzr#xe10e;}'\n  # registry[ '亠' ]  = '{亠|⿱丶一}'\n  # registry[ '玄' ]  = '{玄|⿱亠幺|⿱丶𢆰|⿰𤣥丶}'\n  # registry[ '㭹' ]  = '{㭹|⿰杛玄|⿰木弦}'\n  # registry[ '杛' ]  = '{杛|⿰木弓}'\n  # registry[ '弦' ]  = '{弦|⿰弓玄}'\n  #.........................................................................................................\n  for glyph, cformula of registry\n    formulas = ( ( cformula.replace /[{}]/g, '' ).split '|' )[ 1 .. ]\n    gdb.upsert_node { id: glyph, type: 'glyph', }\n    for formula in formulas\n      gdb.upsert_node { id: formula, type: 'formula', }\n      gdb.insert_edge glyph, formula, { type: 'has_formula', }\n      debug '^338^', glyphs_from_formula formula\n      for component in glyphs_from_formula formula\n        debug '^339^', { id: component, type: 'glyph', }\n        gdb.upsert_node { id: component, type: 'glyph', }\n        # gdb.insert_edge glyph, component, { type: 'has_component', }\n  # debug '^334^', row for row from gdb.dba.query SQL\"select * from glyphs_from_formula( '弦|⿰弓玄' );\"\n  # sql = SQL\"\"\"\n  #   insert into edges ( source, target, properties )\n  #     select\n  #         insert_glyph( n.id )        as source,\n  #         insert_glyph( g.glyph )     as target,\n  #         '{ \"type\": \"has_glyph\" }'   as properties\n  #       from\n  #         nodes                       as n,\n  #         glyphs_from_formula( n.id ) as g\n  #       where json_extract( body, '$.type' ) is 'formula';\"\"\"\n  # gdb.dba.execute sql\n    # info '^8751^', row\n    # for component in Array.from row.id\n    #   gdb.upsert_node { id: component, type: 'glyph', }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Graphdb: deleting edges and nodes\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Graphdb } = require './graph-db'\n  # path        = '/tmp/icql-graph.db'\n  schema      = 'main'\n  #.........................................................................................................\n  do =>\n    gdb         = new Graphdb { schema, ram: true, }\n    H.insert_kanji_edges gdb\n    info '^984^', H.get_node_ids gdb\n    info '^984^', H.get_edge_ids gdb\n    T.eq ( H.get_node_ids gdb ), [ '口', '國', '域', '或' ]\n    T.eq ( H.get_edge_ids gdb ), [ [ '口', '或' ], [ '國', '或' ], [ '或', '口' ], [ '或', '國' ], [ '或', '域' ] ]\n    H.show_graph gdb\n    gdb.delete_edges '或', '國'\n    H.show_graph gdb\n    T.eq ( H.get_node_ids gdb ), [ '口', '國', '域', '或' ]\n    T.eq ( H.get_edge_ids gdb ), [ [ '口', '或' ], [ '國', '或' ], [ '或', '口' ], [ '或', '域' ] ]\n  #.........................................................................................................\n  do =>\n    gdb         = new Graphdb { schema, ram: true, }\n    H.insert_kanji_edges gdb\n    gdb.delete_edges '或'\n    H.show_graph gdb\n  # T.eq H.get_edge_ids(), [ [ '或', '國' ], [ '國', '或' ] ]\n    # d = JSON.parse edge.properties\n    # urge '^3343^', d.a, d.type, d.b\n  # T.eq edge_count, 27\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Graphdb: xxx\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Graphdb } = require './graph-db'\n  # path        = '/tmp/icql-graph.db'\n  schema      = 'main'\n  #.........................................................................................................\n  do =>\n    gdb         = new Graphdb { schema, ram: true, }\n    insert_formulas_and_components gdb\n    H.show_graph gdb\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif module is require.main then do =>\n  # test @, { timeout: 10e3, }\n  @[ \"Graphdb: xxx\" ]()\n  # test @[ \"Graphdb: deleting edges and nodes\" ]\n  # test @[ \"Graphdb: insert_node()\" ]\n  # test @[ \"Graphdb: insert_edge()\" ]\n  # @[ \"Graphdb: insert_node()\" ]()\n  # test @[ \"Graphdb: bfsvtab\" ]\n"
  ]
}