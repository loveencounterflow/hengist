{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/graph-db.coffee"
  ],
  "names": [],
  "mappings": "AAGA;EAAA;AAAA,MAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,CAAA,CAAE,GAAF,CAAA,GAA4B,OAAA,CAAQ,wBAAR,CAA5B;;EACA,GAAA,GAA4B,MAAM,CAAC;;EACnC,KAAA,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,GAAA,GAA4B,MAAM,CAAC,IAhBnC;;;EAoBM,IAAC,CAAA,UAAP,MAAA,QAAA,CAAA;;IAGE,WAAa,CAAE,GAAF,CAAA;AACf,UAAA,IAAA;;MACI,GAAA,CAAI,IAAJ,EAAO,OAAP,EAAgB;QAAA,UAAA,EAAY,KAAZ;QAAmB,KAAA,EAAO;MAA1B,CAAhB;MACA,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,mBAAhB,CAAoC,CAAE,GAAA,GAAM,CAAE,GAAA,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,mBAAlB,EAA0C,GAAA,GAA1C,CAAR,CAApC;MACA,IAAC,CAAA,GAAD,GAAY;MACZ,CAAA,CAAE,IAAF,CAAA,GAAY,IAAC,CAAA,GAAb;MACA,GAAA,CAAI,IAAJ,EAAO,KAAP,EAAc;QAAA,UAAA,EAAY,KAAZ;QAAmB,KAAA,EAAO,IAAI,GAAJ,CAAQ,CAAE,IAAF,CAAR;MAA1B,CAAd;MACA,IAAC,CAAA,OAAD,CAAA;AACA,aAAO;IARI,CADf;;;;;IAeE,OAAS,CAAA,CAAA,EAAA;;;AACX,UAAA;MAEI,GAAA,GAAM,GAAG,CAAA;;;;;;;;;;;;;;;uDAAA;MAiBT,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,GAAb;AACA,aAAO;IArBA,CAfX;;;;;IA0CE,WAAa,CAAE,CAAF,EAAK,CAAL,CAAA;AACf,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA,kDAAA;IADE,CA1Cf;;;IA8CE,WAAa,CAAE,EAAF,CAAA;AACf,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA,gCAAA;IADE,CA9Cf;;;IAkDE,WAAa,CAAE,MAAF,EAAU,MAAV,EAAkB,UAAlB,CAAA;AACf,UAAA;MAAI,GAAA,GAAM,GAAG,CAAA,mEAAA;aACT,CAAE,MAAF,EAAU,MAAV,EAAkB,EAAA,CAAG,UAAH,CAAlB;IAFW,CAlDf;;;IAuDE,WAAa,CAAE,IAAF,CAAA;AACf,UAAA;MAAI,GAAA,GAAM,GAAG,CAAA,uCAAA;aACT,CAAE,EAAA,CAAG,IAAH,CAAF;IAFW,CAvDf;;;IA4DE,WAAa,CAAA,CAAA;AACf,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA,4CAAA;IADE,CA5Df;;;IAgEE,oBAAsB,CAAA,CAAA;AACxB,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA,oCAAA;IADW,CAhExB;;;IAoEE,qBAAuB,CAAA,CAAA;AACzB,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA,oCAAA;IADY,CApEzB;;;;;IA2EE,YAAc,CAAA,CAAA;AAChB,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA;;oCAAA;IADG,CA3EhB;;;IAkFE,iBAAmB,CAAA,CAAA,EAAA;;AACrB,UAAA;aACI,GAAA,GAAM,GAAG,CAAA,2DAAA;IAFQ,CAlFrB;;;IAuFE,WAAa,CAAA,CAAA;AACf,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA,4BAAA;IADE,CAvFf;;;;;IA8FE,gBAAkB,CAAA,CAAA;AACpB,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA;;;;0BAAA;IADO,CA9FpB;;;IAuGE,iBAAmB,CAAA,CAAA;AACrB,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA;;;;0BAAA;IADQ,CAvGrB;;;IAgHE,QAAU,CAAA,CAAA;AACZ,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA;;;;;;0BAAA;IADD,CAhHZ;;;IA2HE,4BAA8B,CAAA,CAAA;AAChC,UAAA;aAAM,GAAA,GAAM,GAAG,CAAA;;;;;;iCAAA;IADiB,CA3HhC;;;IAsIE,6BAA+B,CAAA,CAAA;AACjC,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA;;;;;;iCAAA;IADoB,CAtIjC;;;IAiJE,oBAAsB,CAAA,CAAA;AACxB,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA;;;;;;;;iCAAA;IADW;;EAnJxB;AApBA",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GRAPHDB'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ Dba }                   = require '../../../apps/icql-dba'\ndef                       = Object.defineProperty\ntypes                     = require './types'\nSQL                       = String.raw\n\n\n#===========================================================================================================\nclass @Graphdb\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    # super()\n    def @, 'types', enumerable: false, value: types\n    @types.validate.gdb_constructor_cfg ( cfg = { @types.defaults.gdb_constructor_cfg..., cfg..., } )\n    @cfg      = cfg\n    { path }  = @cfg\n    def @, 'dba', enumerable: false, value: new Dba { path, }\n    @init_db()\n    return undefined\n\n\n  #=========================================================================================================\n  # SCHEMA\n  #---------------------------------------------------------------------------------------------------------\n  init_db: () ->\n    ### TAINT edges are modelled as uniquely given by `( node_id_a, node_id_b )` with arbitrary data\n    attached, but could conceivably link two given nodes with any number of edges ###\n    sql = SQL\"\"\"\n      create table if not exists nodes (\n          body json,\n          id   text generated always as ( json_extract( body, '$.id' ) ) virtual not null unique\n        );\n      -- ...................................................................................................\n      create table if not exists edges (\n          source     text,\n          target     text,\n          properties json,\n        foreign key( source ) references nodes( id ),\n        foreign key( target ) references nodes( id )\n        );\n      -- ...................................................................................................\n      create index if not exists id_idx on nodes(id);\n      create index if not exists source_idx on edges(source);\n      create index if not exists target_idx on edges(target);\"\"\"\n    @dba.execute sql\n    return null\n\n\n  #=========================================================================================================\n  # INSERT, UPDATE, DELETE\n  #---------------------------------------------------------------------------------------------------------\n  delete_edge: ( a, b ) ->\n    sql = SQL\"delete from edges where source = $a or target = $b\"\n\n  #---------------------------------------------------------------------------------------------------------\n  delete_node: ( id ) ->\n    sql = SQL\"delete from nodes where id = $id\"\n\n  #---------------------------------------------------------------------------------------------------------\n  insert_edge: ( source, target, properties ) ->\n    sql = SQL\"insert into edges ( source, target, properties ) values ( ?, ?, ? )\"\n    [ source, target, jr properties, ]\n\n  #---------------------------------------------------------------------------------------------------------\n  insert_node: ( body ) ->\n    sql = SQL\"insert into nodes ( body ) values ( ? )\"\n    [ jr body, ]\n\n  #---------------------------------------------------------------------------------------------------------\n  update_node: () ->\n    sql = SQL\"update nodes set body = json(?) where id = ?\"\n\n  #=========================================================================================================\n  search_edges_inbound: () ->\n    sql = SQL\"select * from edges where source = ?\"\n\n  #---------------------------------------------------------------------------------------------------------\n  search_edges_outbound: () ->\n    sql = SQL\"select * from edges where target = ?\"\n\n\n  #=========================================================================================================\n  # SEARCH\n  #---------------------------------------------------------------------------------------------------------\n  search_edges: () ->\n    sql = SQL\"\"\"\n      select * from edges where source = ?\n      union\n      select * from edges where target = ?\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  search_node_by_id: () ->\n    ### TAINT instead of 'json_extract(body, '$.id')', use virtual field(?) ###\n    sql = SQL\"select body from nodes where json_extract(body, '$.id') = ?\"\n\n  #---------------------------------------------------------------------------------------------------------\n  search_node: () ->\n    sql = SQL\"select body from nodes where\"\n\n\n  #=========================================================================================================\n  # TRAVERSE\n  #---------------------------------------------------------------------------------------------------------\n  traverse_inbound: () ->\n    sql = SQL\"\"\"\n      with recursive traverse(id) as (\n        select ?\n        union\n        select source from edges join traverse on target = id\n      ) select id from traverse;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  traverse_outbound: () ->\n    sql = SQL\"\"\"\n      with recursive traverse(id) as (\n        select ?\n        union\n        select target from edges join traverse on source = id\n      ) select id from traverse;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  traverse: () ->\n    sql = SQL\"\"\"\n      with recursive traverse(id) as (\n        select ?\n        union\n        select source from edges join traverse on target = id\n        union\n        select target from edges join traverse on source = id\n      ) select id from traverse;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  traverse_with_bodies_inbound: () ->\n      sql = SQL\"\"\"\n      with recursive traverse(x, y, obj) as (\n        select ?, ?, ?\n        union\n        select id, '()', body from nodes join traverse on id = x\n        union\n        select source, '<-', properties from edges join traverse on target = x\n      ) select x, y, obj from traverse;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  traverse_with_bodies_outbound: () ->\n    sql = SQL\"\"\"\n      with recursive traverse(x, y, obj) as (\n        select ?, ?, ?\n        union\n        select id, '()', body from nodes join traverse on id = x\n        union\n        select target, '->', properties from edges join traverse on source = x\n      ) select x, y, obj from traverse;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  traverse_with_bodies: () ->\n    sql = SQL\"\"\"\n      with recursive traverse(x, y, obj) as (\n        select ?, ?, ?\n        union\n        select id, '()', body from nodes join traverse on id = x\n        union\n        select source, '<-', properties from edges join traverse on target = x\n        union\n        select target, '->', properties from edges join traverse on source = x\n      ) select x, y, obj from traverse;\"\"\"\n\n\n"
  ]
}