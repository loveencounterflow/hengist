{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/graph-db.coffee"
  ],
  "names": [],
  "mappings": "AAE4G;EAAA;AAAA,MAAA;;EACtG,UAAN,MAAA,QAAA,CAAA;;IAGE,WAAa,CAAA,CAAA,EAAA;;AAEX,aAAO;IAFI,CADf;;;;;IAQE,aAAe,CAAA,CAAA,EAAA;;;AACjB,UAAA;aAEI,GAAA,GAAM,GAAG,CAAA;;;;;;;;;;;;;;;uDAAA;IAHI,CARjB;;;;;IAiCE,WAAa,CAAE,CAAF,EAAK,CAAL,CAAA;AACf,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA,kDAAA;IADE,CAjCf;;;IAqCE,WAAa,CAAE,EAAF,CAAA;AACf,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA,gCAAA;IADE,CArCf;;;IAyCE,WAAa,CAAE,MAAF,EAAU,MAAV,EAAkB,UAAlB,CAAA;AACf,UAAA;MAAI,GAAA,GAAM,GAAG,CAAA,mEAAA;aACT,CAAE,MAAF,EAAU,MAAV,EAAkB,EAAA,CAAG,UAAH,CAAlB;IAFW,CAzCf;;;IA8CE,WAAa,CAAE,IAAF,CAAA;AACf,UAAA;MAAI,GAAA,GAAM,GAAG,CAAA,uCAAA;aACT,CAAE,EAAA,CAAG,IAAH,CAAF;IAFW,CA9Cf;;;IAmDE,WAAa,CAAA,CAAA;AACf,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA,4CAAA;IADE,CAnDf;;;IAuDE,oBAAsB,CAAA,CAAA;AACxB,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA,oCAAA;IADW,CAvDxB;;;IA2DE,qBAAuB,CAAA,CAAA;AACzB,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA,oCAAA;IADY,CA3DzB;;;;;IAkEE,YAAc,CAAA,CAAA;AAChB,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA;;oCAAA;IADG,CAlEhB;;;IAyEE,iBAAmB,CAAA,CAAA,EAAA;;AACrB,UAAA;aACI,GAAA,GAAM,GAAG,CAAA,2DAAA;IAFQ,CAzErB;;;IA8EE,WAAa,CAAA,CAAA;AACf,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA,4BAAA;IADE,CA9Ef;;;;;IAqFE,gBAAkB,CAAA,CAAA;AACpB,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA;;;;0BAAA;IADO,CArFpB;;;IA8FE,iBAAmB,CAAA,CAAA;AACrB,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA;;;;0BAAA;IADQ,CA9FrB;;;IAuGE,QAAU,CAAA,CAAA;AACZ,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA;;;;;;0BAAA;IADD,CAvGZ;;;IAkHE,4BAA8B,CAAA,CAAA;AAChC,UAAA;aAAM,GAAA,GAAM,GAAG,CAAA;;;;;;iCAAA;IADiB,CAlHhC;;;IA6HE,6BAA+B,CAAA,CAAA;AACjC,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA;;;;;;iCAAA;IADoB,CA7HjC;;;IAwIE,oBAAsB,CAAA,CAAA;AACxB,UAAA;aAAI,GAAA,GAAM,GAAG,CAAA;;;;;;;;iCAAA;IADW;;EA1IxB;AAD4G",
  "sourcesContent": [
    "\n\n#===========================================================================================================\nclass Graphdb\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    # super()\n    return undefined\n\n  #=========================================================================================================\n  # SCHEMA\n  #---------------------------------------------------------------------------------------------------------\n  create_schema: () ->\n    ### TAINT edges are modelled as uniquely given by `( node_id_a, node_id_b )` with arbitrary data\n    attached, but could conceivably link two given nodes with any number of edges ###\n    sql = SQL\"\"\"\n      create table if not exists nodes (\n          body json,\n          id   text generated always as ( json_extract( body, '$.id' ) ) virtual not null unique\n        );\n      -- ...................................................................................................\n      create table if not exists edges (\n          source     text,\n          target     text,\n          properties json,\n        foreign key( source ) references nodes( id ),\n        foreign key( target ) references nodes( id )\n        );\n      -- ...................................................................................................\n      create index if not exists id_idx on nodes(id);\n      create index if not exists source_idx on edges(source);\n      create index if not exists target_idx on edges(target);\"\"\"\n\n\n  #=========================================================================================================\n  # INSERT, UPDATE, DELETE\n  #---------------------------------------------------------------------------------------------------------\n  delete_edge: ( a, b ) ->\n    sql = SQL\"delete from edges where source = $a or target = $b\"\n\n  #---------------------------------------------------------------------------------------------------------\n  delete_node: ( id ) ->\n    sql = SQL\"delete from nodes where id = $id\"\n\n  #---------------------------------------------------------------------------------------------------------\n  insert_edge: ( source, target, properties ) ->\n    sql = SQL\"insert into edges ( source, target, properties ) values ( ?, ?, ? )\"\n    [ source, target, jr properties, ]\n\n  #---------------------------------------------------------------------------------------------------------\n  insert_node: ( body ) ->\n    sql = SQL\"insert into nodes ( body ) values ( ? )\"\n    [ jr body, ]\n\n  #---------------------------------------------------------------------------------------------------------\n  update_node: () ->\n    sql = SQL\"update nodes set body = json(?) where id = ?\"\n\n  #=========================================================================================================\n  search_edges_inbound: () ->\n    sql = SQL\"select * from edges where source = ?\"\n\n  #---------------------------------------------------------------------------------------------------------\n  search_edges_outbound: () ->\n    sql = SQL\"select * from edges where target = ?\"\n\n\n  #=========================================================================================================\n  # SEARCH\n  #---------------------------------------------------------------------------------------------------------\n  search_edges: () ->\n    sql = SQL\"\"\"\n      select * from edges where source = ?\n      union\n      select * from edges where target = ?\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  search_node_by_id: () ->\n    ### TAINT instead of 'json_extract(body, '$.id')', use virtual field(?) ###\n    sql = SQL\"select body from nodes where json_extract(body, '$.id') = ?\"\n\n  #---------------------------------------------------------------------------------------------------------\n  search_node: () ->\n    sql = SQL\"select body from nodes where\"\n\n\n  #=========================================================================================================\n  # TRAVERSE\n  #---------------------------------------------------------------------------------------------------------\n  traverse_inbound: () ->\n    sql = SQL\"\"\"\n      with recursive traverse(id) as (\n        select ?\n        union\n        select source from edges join traverse on target = id\n      ) select id from traverse;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  traverse_outbound: () ->\n    sql = SQL\"\"\"\n      with recursive traverse(id) as (\n        select ?\n        union\n        select target from edges join traverse on source = id\n      ) select id from traverse;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  traverse: () ->\n    sql = SQL\"\"\"\n      with recursive traverse(id) as (\n        select ?\n        union\n        select source from edges join traverse on target = id\n        union\n        select target from edges join traverse on source = id\n      ) select id from traverse;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  traverse_with_bodies_inbound: () ->\n      sql = SQL\"\"\"\n      with recursive traverse(x, y, obj) as (\n        select ?, ?, ?\n        union\n        select id, '()', body from nodes join traverse on id = x\n        union\n        select source, '<-', properties from edges join traverse on target = x\n      ) select x, y, obj from traverse;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  traverse_with_bodies_outbound: () ->\n    sql = SQL\"\"\"\n      with recursive traverse(x, y, obj) as (\n        select ?, ?, ?\n        union\n        select id, '()', body from nodes join traverse on id = x\n        union\n        select target, '->', properties from edges join traverse on source = x\n      ) select x, y, obj from traverse;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  traverse_with_bodies: () ->\n    sql = SQL\"\"\"\n      with recursive traverse(x, y, obj) as (\n        select ?, ?, ?\n        union\n        select id, '()', body from nodes join traverse on id = x\n        union\n        select source, '<-', properties from edges join traverse on target = x\n        union\n        select target, '->', properties from edges join traverse on source = x\n      ) select x, y, obj from traverse;\"\"\"\n\n\n"
  ]
}