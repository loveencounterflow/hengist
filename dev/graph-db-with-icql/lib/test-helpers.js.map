{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-helpers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# test                      = require '../../../apps/guy-test'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\n# on_process_exit           = require 'exit-hook'\n# sleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\n{ SQL, I, L, X, }         = new ( require '../../../apps/icql-dba/lib/sql' ).Sql\njr                        = JSON.stringify\nPATH                      = require 'path'\nFS                        = require 'fs'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@insert_arithmetic_edges = ( gdb, nr_max ) ->\n  for nr in [ 1 .. nr_max ]\n    gdb.insert_node { id: \"node#{nr}\", nr, text: \"<#{nr}>\", }\n  for nr_1 in [ 1 .. nr_max ]\n    for nr_2 in [ 1 .. nr_max ]\n      id_1 = \"node#{nr_1}\"\n      id_2 = \"node#{nr_2}\"\n      if ( nr_1 isnt 1 ) and ( nr_1 isnt nr_2 ) and ( ( value = nr_2 / nr_1 ) is ( nr_2 // nr_1 ) )\n        gdb.insert_edge id_1, id_2, { type: 'is_divider_of', a: nr_1, b: nr_2, value, }\n      # if ( nr_2 isnt 1 ) and ( nr_1 isnt nr_2 ) and ( ( value = nr_1 / nr_2 ) is ( nr_1 // nr_2 ) )\n        gdb.insert_edge id_2, id_1, { type: 'is_divided_by', a: nr_2, b: nr_1, value, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@insert_kanji_edges = ( gdb ) ->\n  gdb.insert_node { id: '或', }\n  gdb.insert_node { id: '國', }\n  gdb.insert_node { id: '口', }\n  gdb.insert_node { id: '域', }\n  gdb.insert_edge '口', '或', 'is_part_of'\n  gdb.insert_edge '或', '口', 'contains'\n  gdb.insert_edge '或', '域', 'is_part_of'\n  gdb.insert_edge '或', '國', 'is_part_of'\n  gdb.insert_edge '國', '或', 'contains'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@show_graph = ( gdb ) ->\n  whisper '-'.repeat 108\n  for node from gdb.dba.query SQL\"select * from nodes order by id;\"\n    urge '^3343^', node\n  edge_count = 0\n  for edge from gdb.dba.query SQL\"select * from edges order by source, target;\"\n    edge_count++\n    urge '^3343^', edge\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_node_ids = ( gdb ) -> ( d.id for d from gdb.dba.query SQL\"select id from nodes order by id;\" )\n@get_edge_ids = ( gdb ) -> ( [ d.source, d.target, ] for d from gdb.dba.list gdb.dba.query SQL\"select source, target from edges order by source, target;\")\n\n#-----------------------------------------------------------------------------------------------------------\n@reinitialize_db = ( gdb ) ->\n  ### TAINT implement `clear-schema()` ###\n  gdb.dba.pragma SQL\"foreign_keys = off;\"\n  gdb.dba.execute SQL\"drop index if exists id_idx\"\n  gdb.dba.execute SQL\"drop index if exists source_idx\"\n  gdb.dba.execute SQL\"drop index if exists phrase_ref_hollerith_index\"\n  # gdb.dba.execute SQL\"drop index if exists sqlite_autoindex_nodes_1\"\n  gdb.dba.execute SQL\"drop index if exists target_idx\"\n  gdb.dba.execute SQL\"drop table if exists edges\"\n  gdb.dba.execute SQL\"drop table if exists nodes\"\n  gdb.dba.execute SQL\"drop table if exists edges_g;\"\n  gdb.dba.pragma SQL\"foreign_keys = on;\"\n  gdb.init_db()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@try_to_remove_file = ( path ) ->\n  try FS.unlinkSync path catch error\n    return if error.code is 'ENOENT'\n    throw error\n  return null\n"
  ]
}