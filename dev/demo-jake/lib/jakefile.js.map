{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/jakefile.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'JAKE-DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\nassign                    = Object.assign\nafter                     = ( time_s, f ) -> setTimeout f, time_s * 1000\ndefer                     = setImmediate\nasync                     = {}\nsync                      = { concurrency: 1, }\n# async                     = { async: true, }\n#...........................................................................................................\n# types                     = require '../types'\n# { isa\n#   validate\n#   cast\n#   type_of }               = types\nJAKE                      = require 'jake'\nINTERTEXT                 = require 'intertext'\n{ rpr }                   = INTERTEXT.export()\n_sh                       = ( require 'exec-sh' ).promise\n\n#-----------------------------------------------------------------------------------------------------------\nsh = ( P... ) ->\n  try ( R = await _sh P... ) catch error\n    warn '^334^', error.message\n    return null\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\ninvoke  = ( name, P... ) -> await ( JAKE.Task[ name ] ).invoke  P...\nexecute = ( name, P... ) -> await ( JAKE.Task[ name ] ).execute P...\n\n#-----------------------------------------------------------------------------------------------------------\ntask = ( name, P... ) ->\n  JAKE.desc name\n  JAKE.task name, P...\n\n#-----------------------------------------------------------------------------------------------------------\ntask 'A', { async: true, }, -> new Promise ( resolve ) ->\n  help '(A'\n  await after 0.5, -> warn 'A)'; resolve()\n\n#-----------------------------------------------------------------------------------------------------------\ntask 'B', -> new Promise ( resolve ) ->\n  help '(B'\n  await after 0.5, -> warn 'B)'; resolve()\n\n#-----------------------------------------------------------------------------------------------------------\ntask 'C', { async: true, }, ->\n  help '(C'\n  await after 0.5, -> warn 'C)'\n\n#-----------------------------------------------------------------------------------------------------------\ntask 'G', -> new Promise ( resolve ) ->\n  help '(G'\n  await execute 'A'\n  await execute 'B'\n  await execute 'A'\n  await execute 'B'\n  await after 0.5, -> warn 'G)'; resolve()\n\n# task 'K', -> new Promise ( resolve ) ->\n#   help '(K'\n#   debug rpr ( k for k of JAKE.Task[ 'A' ]); process.exit 1\n#   await call 'A'\n#   await call 'B'\n#   await call 'A'\n#   await call 'B'\n#   await after 0.5, -> warn 'K)'; resolve()\n\n#-----------------------------------------------------------------------------------------------------------\ntask 'H', [ 'A', 'B', ], -> new Promise ( resolve ) ->\n  help '(H'\n  await after 0.5, -> warn 'H)'; resolve()\n\n#-----------------------------------------------------------------------------------------------------------\ntask 'git-updates', [\n  'git-update-lib'\n  # 'git-update-readmes'\n  'git-update-dependencies'\n  'git-status' ],\n  -> new Promise ( resolve ) -> resolve()\n\n#-----------------------------------------------------------------------------------------------------------\ntask 'git-update-lib', -> new Promise ( resolve ) ->\n  await sh \"\"\"git add --update lib dev/**/lib && git commit -m'update'\"\"\"\n  resolve()\n\n#-----------------------------------------------------------------------------------------------------------\ntask 'git-update-readmes', -> new Promise ( resolve ) ->\n  await sh \"\"\"doctoc README* dev/**/README* && git add --update README* dev/**/README* && git commit -m'update docs'\"\"\"\n  resolve()\n\n#-----------------------------------------------------------------------------------------------------------\ntask 'git-update-dependencies', -> new Promise ( resolve ) ->\n  await sh \"\"\"git add package* && git commit -m'update dependencies'\"\"\"\n  resolve()\n\n#-----------------------------------------------------------------------------------------------------------\ntask 'git-status', -> new Promise ( resolve ) ->\n  await sh \"\"\"git status\"\"\"\n  resolve()\n\n###\ndoctoc README* && git add README* && git commit -m'update docs' && git push\n###\n\n#-----------------------------------------------------------------------------------------------------------\ntask 'intershop_npm_install', -> new Promise ( resolve ) =>\n  await sh \"\"\"( cd intershop && npm install && npm audit )\"\"\"\n  resolve()\n\n#-----------------------------------------------------------------------------------------------------------\ntask 'gitcollector-show-commits', -> new Promise ( resolve ) =>\n  await sh \"\"\"nodexh dev/gitcollector/lib/main.js | less -SR#5\"\"\"\n  resolve()\n\n#-----------------------------------------------------------------------------------------------------------\ntask 'benchmark', ( P... ) -> new Promise ( resolve ) =>\n  debug '^43^', P\n  # await sh \"\"\"nodexh dev/gitcollector/lib/main.js | less -SR#5\"\"\"\n  resolve()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await @benchmark()\n  return null\n\n\n"
  ]
}