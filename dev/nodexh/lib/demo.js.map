{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'NODEXH/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nFS                        = require 'fs'\nPATH                      = require 'path'\nSMR                       = require 'source-map-resolve'\nSMC                       = require 'source-map'\n\n#-----------------------------------------------------------------------------------------------------------\nread_file_sync = ( path ) -> FS.readFileSync path, { encoding: 'utf-8', }\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  error = new Error \"^hengist/nodexh@4458^ simulated error\"\n  path  = __filename\n  code  = read_file_sync path\n  ref   = PATH.dirname path\n  debug { path, ref, }\n  try\n    d = SMR.resolveSync code, path, read_file_sync\n  catch error\n    # if error.code is 'ENOENT'\n    #   warn \"^4487^ file not found: #{rpr }\"\n    warn error.code, error.name\n    throw error\n  info '^330^', 'd.sourcesResolved:',   d.sourcesResolved\n  info '^330^', 'd.sourcesContent:',    d.sourcesContent\n  info '^330^', 'd.map:',               ( k for k of d.map )\n  info '^330^', 'd.map:',               d.map\n  info '^330^', 'd.url:',               d.url\n  info '^330^', 'd.sourcesRelativeTo:', d.sourcesRelativeTo\n  info '^330^', 'd.sourceMappingURL:',  d.sourceMappingURL\n  debug ( k for k of SMC )\n  # d.map.sourcesContent = d.sourcesContent\n  map = new SMC.SourceMapConsumer d.map\n  # map = await new SMC.SourceMapConsumer d.map\n  # debug '^2772^', map\n  for line in [ 1 .. 120 ]\n    bias1 = SMC.SourceMapConsumerLEAST_UPPER_BOUND\n    bias2 = SMC.SourceMapConsumerGREATEST_LOWER_BOUND\n    # urge '^7764^', { line, }, ( map.originalPositionFor { line, column: 3, bias: bias1, } ), ( map.originalPositionFor { line, column: 3, bias: bias2, } )\n    location =  map.originalPositionFor { line, column: 3, bias: bias1, }\n    continue unless location.line?\n    urge '^7764^', { line, }, location\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_async = ->\n  exit_handler = ( error ) ->\n    setImmediate ->\n      setTimeout ( -> urge 'later' ), 500\n      debug '^33443^', error\n    return null\n  process.on 'uncaughtExceptionMonitor',  exit_handler\n  process.on 'unhandledRejection', exit_handler\n  throw new Error \"^4476^ an error\"\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_sourcemaps = ->\n  ### thx to https://stackoverflow.com/a/24638082/7568091 ###\n  ```\n  var fs = require('fs');\n  var smc = require('source-map');\n\n  var stack = \"TypeError: undefined is not a function\\r\\nat h/min/min.js?1404839824760:9:23048\";\n  stack = stack.split(/\\r\\n/g);\n  var error = stack.shift(); // First line is the actual error\n\n  var errors = [];\n  var file = null;\n  ```\n  debug '^778^', stack\n  ```\n  stack.forEach(function(line){\n      var _trace = line.split('/').pop();\n      var trace = {};\n      trace.filename = _trace.split('?').shift();\n      _trace = _trace.split(':');\n      trace.line = parseInt(_trace[1], 10);\n      trace.column = parseInt(_trace[2], 10);\n      errors.push(trace);\n\n      if(!file)\n          file = trace.filename.split('.').shift();\n\n      trace.filename = __dirname + '/../min/' + trace.filename;\n  });\n\n  // This does not account for multiple files in stack trace right now\n  var map = fs.readFileSync(__dirname + '/../src/' + file + '.js.map');\n  map = JSON.parse(map);\n  var sm = new smc.SourceMapConsumer(map);\n  console.log(sm.originalPositionFor(errors[0]));\n  ```\n\n############################################################################################################\nif module is require.main then do =>\n  await demo()\n  # await demo_async()\n  # await demo_sourcemaps()\n\n\n"
  ]
}