{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sourcemapper-comparison.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'nodexh'\nlog                       = CND.get_logger 'plain',     badge\ndebug                     = CND.get_logger 'debug',     badge\ninfo                      = CND.get_logger 'info',      badge\nwarn                      = CND.get_logger 'warn',      badge\nalert                     = CND.get_logger 'alert',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n# stackman                  = ( require 'stackman' )()\nget_error_callsites       = require 'error-callsites'\nload_source_map           = ( require 'util' ).promisify ( require 'load-source-map' )\nFS                        = require 'fs'\nPATH                      = require 'path'\n#...........................................................................................................\nCSM                       = require 'convert-source-map'\nSMR                       = require 'source-map-resolve'\nSOURCEMAP                 = require 'source-map'\nget_source                = require 'get-source'\nStackTracey               = require 'stacktracey'\ntypes                     = new ( require 'intertype' ).Intertype\nCAT                       = require 'multimix/lib/cataloguing'\n# debug ( k for k of get_source )\n\n# file      = get_source __filename\n# for line in [ 1 .. 20 ]\n#   target    = file.resolve { line, column: 1, }\n#   debug ( k for k of target )\n#   debug target.sourceFile.path\n#   debug target.sourceFile.error\n#   debug target.error\n#   info \"#{target.path} #{target.line}:#{target.column}\"\n# # info target.sourceFile\n# # info target.sourceLine\n\n\n# source    = FS.readFileSync __filename, { encoding: 'utf-8', }\n# x         = CSM.fromMapFileSource( source, __dirname )\n# debug ( k for k of x.sourcemap )\n# debug ( k for k of SOURCEMAP )\n# smc       = new SOURCEMAP.SourceMapConsumer x.sourcemap\n# debug ( k for k of smc )\n# # debug CAT.all_keys_of smc\n\nget_stacktracey = ( error ) ->\n  stack = ( new StackTracey error ).withSources()\n  stack = stack.clean()\n  R     = []\n  for idx in [ stack.items.length - 1 .. 0 ] by -1\n    d = stack.items[ idx ]\n    # debug '^2798^', ( k for k of d )\n    s =\n      # target_path:    d.file\n      relpath:        d.fileRelative # fileShort\n      native:         d.native\n      # is_nodejs:      d.native\n      is_other:       d.thirdParty\n      line:           d.line\n      column:         d.column\n      source:         d.sourceLine\n    # for k in [ 'sourceLine', 'native', 'file', 'line', 'column', 'calleeShort', 'fileRelative', 'fileShort', 'fileName', 'thirdParty', 'name',]\n    #   debug k, rpr d[ k ]\n    R.push s\n  # info '\\n' + stack.asTable()\n  return R\n\nshow_stacktracey = ( error ) ->\n  for d in get_stacktracey error\n    echo d\n  return null\n\nf = ( x ) -> new Promise ( resolve, reject ) =>\n  setImmediate ( -> reject new Error \"ooops\" )\ng = -> await f 108\n\n############################################################################################################\nif module is require.main then do =>\n  try await g() catch error then show_stacktracey error\n\n\n\n\n\n\n"
  ]
}