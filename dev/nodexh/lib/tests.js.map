{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'NODEXH/TESTS'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nFS                        = require 'fs'\nPATH                      = require 'path'\ntest                      = require 'guy-test'\n# { lets\n#   freeze }                = require 'letsfreezethat'\n\n\n############################################################################################################\nprovide = ->\n  types                     = new ( require 'intertype' ).Intertype()\n  { isa\n    type_of\n    validate }              = types\n  StackTracey               = require 'stacktracey'\n  { findSourceMap, SourceMap } = require 'module'\n  unless isa.function findSourceMap\n    ### TAINT consider to fall back to stacktraces w/o sourcemaps ###\n    throw new Error \"^33637^ must run node with `--enable-source-maps`\"\n\n  #-----------------------------------------------------------------------------------------------------------\n  class @Frame    extends Object\n  class @Location extends Object\n\n  #-----------------------------------------------------------------------------------------------------------\n  @_reformat_stacktracey_frame = ( frame ) ->\n    R             = new @Frame()\n    # debug '^554^', typeof R\n    # debug '^554^', type_of R\n    # debug '^554^', isa.frame R\n    R.name        = frame.callee\n    R.path        = frame.file\n    R.line_nr     = frame.line\n    R.column_nr   = frame.column\n    R.line_idx    = frame.line    - 1\n    R.column_idx  = frame.column  - 1\n    return Object.freeze R\n\n  #-----------------------------------------------------------------------------------------------------------\n  @frames_from_error = ( error ) -> ( @_reformat_stacktracey_frame d for d in new StackTracey error )\n\n  #-----------------------------------------------------------------------------------------------------------\n  @new_sourcemap = ( frame, error ) ->\n    ### TAINT wrap return value for type safety? ###\n    validate.frame frame ### TAINT superficial class name check ###\n    validate.nonempty_text frame.path\n    return findSourceMap frame.path, error\n\n  #-----------------------------------------------------------------------------------------------------------\n  @map_frame = ( sourcemap, frame ) ->\n    validate.sourcemap  sourcemap ### TAINT superficial class name check ###\n    validate.frame      frame     ### TAINT superficial class name check ###\n    R = @_map_frame sourcemap, frame.path, frame.line_nr, frame.column_nr\n    Object.freeze R.original\n    Object.freeze R.generated\n    Object.freeze R\n    return R\n\n  #-----------------------------------------------------------------------------------------------------------\n  @_map_frame = ( sourcemap, path, line_nr, column_nr ) ->\n    p                       = sourcemap.findEntry line_nr - 1, column_nr - 1\n    R                       = new @Location()\n    R.original              = {}\n    R.generated             = {}\n    R.original.line_idx     = p.originalLine\n    R.original.column_idx   = p.originalColumn\n    R.original.line_nr      = p.originalLine    + 1\n    R.original.column_nr    = p.originalColumn  + 1\n    R.original.path         = p.originalSource\n    R.generated.line_idx    = p.generatedLine\n    R.generated.column_idx  = p.generatedColumn\n    R.generated.line_nr     = p.generatedLine    + 1\n    R.generated.column_nr   = p.generatedColumn  + 1\n    R.generated.path        = path\n    return R\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"basics\" ] = ( T, done ) ->\n  types                     = new ( require 'intertype' ).Intertype()\n  { isa\n    type_of\n    validate }              = types\n  # SMR                       = require 'source-map-resolve'\n  # SMC                       = require 'source-map'\n  provide.apply NODEXH = {}\n  #.........................................................................................................\n  MODULE = require './assets-file1'\n  T.eq ( MODULE.my_function 42 ), 1764\n  try MODULE.my_function 'helo' catch error\n    # debug '^787^', error\n    frames  = NODEXH.frames_from_error error\n    frame   = frames[ 0 ]\n    T.ok Object.isFrozen frame\n    T.eq ( type_of frame ), 'frame'\n    debug '^558^', frame\n    T.eq frame.name,        'Object.my_function'\n    T.ok frame.path.endsWith '/assets-file1.js'\n    T.eq frame.line_nr,     20\n    T.eq frame.column_nr,   13\n    T.eq frame.line_idx,    19\n    T.eq frame.column_idx,  12\n    sourcemap = NODEXH.new_sourcemap  frame, error\n    p1        = NODEXH.map_frame      sourcemap, frame\n    debug '^5029^', JSON.stringify p1, null, '  '\n    T.ok Object.isFrozen p1.original\n    T.ok Object.isFrozen p1.generated\n    T.ok Object.isFrozen p1\n    T.eq ( type_of p1 ), 'location'\n    T.eq p1.original.line_idx,      16\n    T.eq p1.original.column_idx,    10\n    T.eq p1.original.line_nr,       17\n    T.eq p1.original.column_nr,     11\n    T.eq p1.original.path.endsWith  '/nodexh/src/assets-file1.coffee'\n    T.eq p1.generated.line_idx,     19\n    T.eq p1.generated.column_idx,   12\n    T.eq p1.generated.line_nr,      20\n    T.eq p1.generated.column_nr,    13\n    T.eq p1.generated.path.endsWith '/nodexh/lib/assets-file1.js'\n  unless error?\n    T.fail \"^776^ expected error, got none\"\n  done()\n\n\n############################################################################################################\nif module is require.main then do =>\n  test @\n\n\n"
  ]
}