{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/various-md-parsers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'VARIOUS-MD-PARSERS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# SQL                       = String.raw\n# guy                       = require '../../../apps/guy'\n# { DBay }                  = require '../../../apps/dbay'\n{ width_of\n  to_width }              = require 'to-width'\n{ HDML }                  = require '../../../apps/hdml'\n# X                         = require '../../../lib/helpers'\n\n\n#-----------------------------------------------------------------------------------------------------------\ntabulate = ( db, query ) -> X.tabulate query, db query\n\n#-----------------------------------------------------------------------------------------------------------\nsamples =\n  script_and_xmp: \"\"\"\n    this is *it*\n\n    ```foo\n    <script> do **not** parse this</script>\n    ```\n\n    this is just a <script> do **not** parse this</script>\n\n    <code> do **not** parse this</code>\n\n    <xmp> do **not** parse this</xmp>\n    \"\"\"\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_mdtojsx = ->\n  { Markdown } = require 'markdown-to-jsx'\n  debug '^075^', Markdown\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_marked = ->\n  { marked } = require 'marked'\n  marked.use\n    pedantic:     false\n    gfm:          true\n    breaks:       false\n    sanitize:     false\n    smartLists:   true\n    smartypants:  false\n    xhtml:        false\n    walkTokens: ( d ) -> help d\n  debug '^355^', k for k of marked\n  urge '^355^', '\\n' + marked.parse samples.script_and_xmp\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_find_syntax_stretches = ->\n  _locate = ( text, pattern ) ->\n    R = []\n    for match from text.matchAll pattern\n      R.push { start: match.index, stop: match.index + match[ 0 ].length, }\n    return R\n  locate = ( text ) ->\n    R = []\n    for { name, open, close, } in matchers\n      for [ role, pattern, ] in [ [ 'open', open, ], [ 'close', close, ], ]\n        for hit in _locate text, pattern\n          R.push { name, role, hit..., }\n    return null unless R.length > 0\n    R.sort ( a, b ) ->\n      return +1 if a.start > b.start\n      return -1 if a.start < b.start\n      return  0\n    return R\n  matchers = [\n    { name: 'html_script',    open: /<script\\b/g,  close: /<\\/script>/g, environment: 'html', syntax: 'script', }\n    { name: 'html_xmp',       open: /<xmp\\b/g,     close: /<\\/xmp>/g,    environment: 'html', syntax: 'literal', }\n    { name: 'md_fenced_code', open: /```/g,        close: /```/g,        environment: 'md',   syntax: 'code',   }\n    ]\n  help '^376^', d for d in locate samples.script_and_xmp\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @demo_mdtojsx()\n  # @demo_marked()\n  @demo_find_syntax_stretches()\n\n\n\n\n"
  ]
}