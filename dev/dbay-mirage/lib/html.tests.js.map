{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/html.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\n\n#-----------------------------------------------------------------------------------------------------------\ntext_from_token = ( token ) ->\n  { HDML } = require '../../../apps/hdml'\n  { $key\n    name\n    type\n    text } = token\n  name ?= 'MISSING'\n  R = switch $key\n    when '^text'  then text\n    when '^error' then  ( HDML.create_tag '<', 'error', { token.attrs..., message: token.message } ) \\\n                      + ( HDML.text token.text ? '' ) \\\n                      + ( HDML.create_tag '>', 'error' )\n    when '<tag'   then HDML.create_tag '<', name, token.atrs\n    when '^tag'   then HDML.create_tag '^', name, token.atrs\n    when '>tag'   then HDML.create_tag '>', name\n    when '^entity'\n      \"(NCR:#{type}:#{text})\"\n    else throw new Error \"unknown $key #{rpr $key}\"\n  return \"(#{token.start}-#{token.stop})#{R}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Mirage HTML: Basic functionality\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay  } = require '../../../apps/dbay'\n  { Mrg   } = require '../../../apps/dbay-mirage'\n  db        = new DBay()\n  mrg       = new Mrg { db, }\n  prefix    = 'mrg'\n  probes_and_matchers = []\n  dsk       = 'b'\n  mrg.register_dsk { dsk, url: 'live:', }\n  help '^307^', \"using DB at #{db.cfg.path}\"\n  # debug '^435^1, mrg.append_text { dsk, trk: 1, text: \"\"\"<title id=c1 x=\"Q\"></title>\"\"\", }\n  # debug '^435^2, mrg.append_text { dsk, trk: 1, text: \"\"\"<title id=c2 x='Q'></title>\"\"\", }\n  # debug '^435^3, mrg.append_text { dsk, trk: 1, text: \"\"\"<title id=c3 x='\"Q\"'></title>\"\"\", }\n  # debug '^435^4, mrg.append_text { dsk, trk: 1, text: \"\"\"<title id=c4 x=\"'Q'\"></title>\"\"\", }\n  mrg.append_text { dsk, trk: 1, text: \"\"\"<div id=c1 x=\"Q\"></div>\"\"\", }\n  mrg.append_text { dsk, trk: 1, text: '', }\n  mrg.append_text { dsk, trk: 1, text: \"\"\"<div id=c2 x=\"Q\">Some Text</div>\"\"\", }\n  H.tabulate \"#{prefix}_mirror\",                      db SQL\"select * from #{prefix}_mirror;\"\n  H.tabulate \"#{prefix}_raw_mirror\",                  db SQL\"select * from #{prefix}_raw_mirror;\"\n  H.tabulate \"#{prefix}_paragraphs\",                  db SQL\"select * from #{prefix}_paragraphs;\"\n  H.tabulate \"_#{prefix}_ws_linecounts\",              db SQL\"select * from _#{prefix}_ws_linecounts;\"\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Mirage HTML: quotes in attribute values\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay  } = require '../../../apps/dbay'\n  { Mrg   } = require '../../../apps/dbay-mirage'\n  db        = new DBay()\n  mrg       = new Mrg { db, }\n  prefix    = 'mrg'\n  probes_and_matchers = []\n  dsk       = 'quotedattributes'\n  mrg.register_dsk { dsk, url: 'live:', }\n  # debug '^435^5, mrg.append_text { dsk, trk: 1, text: \"\"\"<title id=c1 x=\"Q\"></title>\"\"\", }\n  # debug '^435^6, mrg.append_text { dsk, trk: 1, text: \"\"\"<title id=c2 x='Q'></title>\"\"\", }\n  # debug '^435^7, mrg.append_text { dsk, trk: 1, text: \"\"\"<title id=c3 x='\"Q\"'></title>\"\"\", }\n  # debug '^435^8, mrg.append_text { dsk, trk: 1, text: \"\"\"<title id=c4 x=\"'Q'\"></title>\"\"\", }\n  text = \"\"\"\n    <title id=c1 x=\"Q\"></title>\n\n    <title id=c2 x='Q'></title>\n\n    <title id=c3 x='\"Q\"'></title>\n\n    <title id=c4 x=\"'Q'\"></title>\"\"\"\n  mrg.append_text { dsk, trk: 1, text, }\n  mrg.html.parse_dsk { dsk, }\n  H.tabulate \"#{prefix}_mirror\",              db SQL\"select * from #{prefix}_mirror;\"\n  H.tabulate \"#{prefix}_raw_mirror\",          db SQL\"select * from #{prefix}_raw_mirror;\"\n  H.tabulate \"#{prefix}_paragraphs\",          db SQL\"select * from #{prefix}_paragraphs;\"\n  H.tabulate \"_#{prefix}_ws_linecounts\",      db SQL\"select * from _#{prefix}_ws_linecounts;\"\n  # H.tabulate \"_#{prefix}_ws_linecounts\",      db SQL\"\"\"select\n  #     *\n  #   from #{prefix}_raw_mirror as raw_mirror\n  #   join #{prefix}_mirror     as mirror using ( dsk, oln, trk, pce );\"\"\"\n  H.tabulate \"#{prefix}_html_mirror\",         db SQL\"select * from #{prefix}_html_mirror;\"\n  H.tabulate \"#{prefix}_html_tags_and_html\",  db SQL\"select * from #{prefix}_html_tags_and_html;\"\n  result = db.all_rows SQL\"\"\"\n    select\n        oln, v\n      from #{prefix}_html_mirror as m\n      join #{prefix}_html_atrs as a using ( atrid )\n      where true\n        and ( m.typ = '<' )\n        and ( m.tag = 'title' )\n        and ( a.k   = 'x' )\n      order by m.dsk, m.oln, m.trk, m.pce;\"\"\"\n  T?.eq result, [\n    { oln: 1, v: \"Q\", }\n    { oln: 3, v: 'Q', }\n    { oln: 5, v: '\"Q\"', }\n    { oln: 7, v: \"'Q'\", }\n    ]\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n  #     url    = mrg._url_from_path probe\n  #     path   = mrg._path_from_url url\n  #     # urge { probe, url, path, }\n  #     resolve [ url, path, ]\n  return done?()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Mirage HTML: tag syntax variants\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay  } = require '../../../apps/dbay'\n  { Mrg   } = require '../../../apps/dbay-mirage'\n  { HDML  } = require '../../../apps/hdml'\n  db        = new DBay()\n  mrg       = new Mrg { db, }\n  # debug '^237^', { text, reveal, } = mrg.html.HTMLISH._tunnel 'foo\\\\';   info rpr reveal text\n  # debug '^237^', { text, reveal, } = mrg.html.HTMLISH._tunnel 'foo\\\\a';  info rpr reveal text\n  # debug '^237^', { text, reveal, } = mrg.html.HTMLISH._tunnel 'foo\\\\\\n';  info rpr reveal text\n  # debug '^237^', { text, reveal, } = mrg.html.HTMLISH._tunnel 'foo\\\\\\\\'; info rpr reveal text\n  # return done()\n  { lets\n    thaw }  = guy.lft\n  # #.........................................................................................................\n  # debug '^33673^', rpr ( mrg.html.HTMLISH._tunnel '\\\\' ).text\n  # debug '^33673^', rpr ( mrg.html.HTMLISH._tunnel '\\\\\\\\' ).text\n  # debug '^33673^', rpr ( mrg.html.HTMLISH._tunnel '\\\\&amp;' ).text\n  # return done?()\n  #.........................................................................................................\n  probes_and_matchers = [\n    # [ '<py/ling3/',         null, ]\n    [ '< title>My Page< /title>', \"(0-8)<error message='extraneous whitespace before tag name'>&lt; title&gt;</error>|(8-15)My Page|(15-18)<error message='extraneous whitespace before tag name'>&lt; /</error>|(17-18)<error message='Expecting token of type --&gt; i_name &lt;-- but found --&gt; &#39;/&#39; &lt;--'>/</error>|(18-24)title>\", null ]\n    [ '<title>My Page</title>', '(0-7)<title>|(7-14)My Page|(14-22)</title>', null ]\n    [ '<title >My Page< /title>', \"(0-8)<title>|(8-15)My Page|(15-18)<error message='extraneous whitespace before tag name'>&lt; /</error>|(17-18)<error message='Expecting token of type --&gt; i_name &lt;-- but found --&gt; &#39;/&#39; &lt;--'>/</error>|(18-24)title>\", null ]\n    [ '<title>My Page< /title>', \"(0-7)<title>|(7-14)My Page|(14-17)<error message='extraneous whitespace before tag name'>&lt; /</error>|(16-17)<error message='Expecting token of type --&gt; i_name &lt;-- but found --&gt; &#39;/&#39; &lt;--'>/</error>|(17-23)title>\", null ]\n    [ '<title>My Page</ title>', \"(0-7)<title>|(7-14)My Page|(14-23)<error message='extraneous whitespace in closing tag'>&lt;/ title&gt;</error>\", null ]\n    [ '<title>My Page</title >', '(0-7)<title>|(7-14)My Page|(14-23)</title>', null ]\n    [ '<title/My\\\\/Your Page/>', '(0-7)<title>|(7-21)My/Your Page|(21-22)</title>|(22-23)>', null ]\n    [ '<title>My Page</>', \"(0-7)<title>|(7-14)My Page|(14-17)</title>|(16-17)<error message='Expecting token of type --&gt; i_name &lt;-- but found --&gt; &#39;&gt;&#39; &lt;--'>&gt;</error>\", null ]\n    [ '<title/My Page/>', '(0-7)<title>|(7-14)My Page|(14-15)</title>|(15-16)>', null ]\n    [ '<title/My/Your Page/>', '(0-7)<title>|(7-9)My|(9-10)</title>|(10-21)Your Page/>', null ]\n    [ '<title/My\\npage/', '(0-7)<title>|(7-14)My\\npage|(14-15)</title>', null ]\n    [ '<title k=v j=w/My Page/', \"(0-15)<title k='v' j='w'>|(15-22)My Page|(22-23)</title>\", null ]\n    [ '<title/<b>My</b> Page/', \"(0-7)<title>|(7-13)<error message='bare active characters'>&lt;b&gt;My&lt;</error>|(13-14)</title>|(14-22)b> Page/\", null ]\n    [ '<title//', '(0-7)<title>|(7-8)</title>', null ]\n    [ '<title/>', '(0-8)<title/>|(0-8)<title/>', null ]\n    [ '<title/My Page/', '(0-7)<title>|(7-14)My Page|(14-15)</title>', null ]\n    [ '<title#c1.x/My Page/', \"(0-12)<title id='c1' class='x'>|(12-19)My Page|(19-20)</title>\", null ]\n    [ '\\\\<title/>', '(0-10)&lt;title/>', null ]\n    [ '\\\\&amp;', '(0-7)&amp;amp;', null ]\n    [ 'foo\\\\bar', '(0-8)foobar', null ]\n    [ '\\\\abc', '(0-5)abc', null ]\n    [ 'foo\\\\\\\\bar', '(0-9)foo\\\\bar', null ]\n    [ 'first\\\\\\nsecond', '(0-14)firstsecond', null ]\n    [ 'xxx&amp;xxx', '(0-3)xxx|(3-8)(NCR:named:&amp;)|(8-11)xxx', null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      # help '^435-12^', rpr probe\n      parts = []\n      for d in mrg.html.HTMLISH.parse probe\n        parts.push text_from_token d\n        d = thaw d\n        delete d.$\n        delete d.$vnr\n        # urge '^435-13^', d\n      result = parts.join '|'\n      # echo CND.blue [ probe, matcher, null, ]\n      resolve result\n      # resolve matcher # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Mirage HTML: XNCR parsing 1\" ] = ( T, done ) ->\n  { Htmlish } = require '../../../apps/dbay-mirage/lib/htmlish-parser'\n  # { DBay  } = require '../../../apps/dbay'\n  # { Mrg   } = require '../../../apps/dbay-mirage'\n  # { HDML  } = require '../../../apps/hdml'\n  # db        = new DBay()\n  # mrg       = new Mrg { db, }\n  #...........................................................................................................\n  probes = [\n    [ 'nothing to see here',  undefined, ]\n    [ '&bar;',                { name: 'bar' },                            ]\n    [ '&#x123;',              { hex: '123' },                             ]\n    [ '&#123;',               { dec: '123' },                             ]\n    [ '&xy#x123;',            { csg: 'xy', hex: '123' }, { name: 'baz' }, ]\n    ]\n  for [ probe, matcher, ] in probes\n    match   = probe.match Htmlish.C.xncr.matcher\n    if match?\n      result = { match.groups..., }\n      delete result[ key ] for key, value of result when not value?\n    # urge '^652^', [ probe, result, ]\n    T?.eq matcher, result\n  #...........................................................................................................\n  done?()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Mirage HTML: XNCR parsing 2\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay  } = require '../../../apps/dbay'\n  { Mrg   } = require '../../../apps/dbay-mirage'\n  { HDML  } = require '../../../apps/hdml'\n  db        = new DBay()\n  mrg       = new Mrg { db, }\n  { lets\n    thaw }  = guy.lft\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ '<b x=\"&\">&lt;<&foo;', \"(0-9)<b x='&amp;'>(0-4)(NCR:named:&lt;)(13-19)<&foo;>(14-19)<error message='Expecting: one of these possible Token sequences:&#10;  1. [i_close]&#10;  2. [i_slash_close]&#10;  3. [stm_slash1]&#10;but found: &#39;&#39;'>&amp;foo;</error>\", null ]\n    [ '&foo;', '(0-5)(NCR:named:&foo;)', null ]\n    [ 'abcdef', '(0-6)abcdef', null ]\n    [ 'xxx&#x123;xxx', '(0-3)xxx(3-10)(NCR:ncr:&#x123;)(10-13)xxx', null ]\n    [ 'xxx&#123;xxx', '(0-3)xxx(3-9)(NCR:ncr:&#123;)(9-12)xxx', null ]\n    [ 'xxx&jzr#xe123;xxx', '(0-3)xxx(3-14)(NCR:xncr:&jzr#xe123;)(14-17)xxx', null ]\n    [ 'xxx&amp;xxx', '(0-3)xxx(3-8)(NCR:named:&amp;)(8-11)xxx', null ]\n    [ 'foo &amp;bar&jzr#xe123; baz', '(0-4)foo (4-9)(NCR:named:&amp;)(9-12)bar(12-23)(NCR:xncr:&jzr#xe123;)(23-27) baz', null ]\n    [ 'xxx&a&mp;xxx', \"(0-3)xxx(3-9)<error message='bare active characters'>&amp;a&amp;mp;</error>(9-12)xxx\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      # help '^435-12^', rpr probe\n      parts = []\n      for d in mrg.html.HTMLISH.parse probe\n        d = thaw d\n        delete d.$\n        delete d.$vnr\n        # urge '^342^', d\n        parts.push text_from_token d\n      result = parts.join ''\n      resolve result\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Mirage HTML: parse stretch with compact tagnames\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay  } = require '../../../apps/dbay'\n  { Mrg   } = require '../../../apps/dbay-mirage'\n  { HDML  } = require '../../../apps/hdml'\n  db        = new DBay()\n  mrg       = new Mrg { db, }\n  { lets\n    thaw }  = guy.lft\n  #.........................................................................................................\n  probes_and_matchers = [\n    # [ '<foo-bar#c55>*xxx*</foo-bar>', '(0-13)<foo-bar>#(13-17)<em>#(17-20)xxx#(20-25)</em>#(25-35)</foo-bar>', null ]\n    [ '<foo-bar#c55>*xxx*</foo-bar>', \"(0-13)<foo-bar id='c55'>#(13-17)<em>#(17-20)xxx#(20-25)</em>#(25-35)</foo-bar>\", null ]\n    [ '1 \\\\< 2', '(0-7)1 &lt; 2', null ]\n    [ '<foo-bar#c55.blah.beep>xxx</foo-bar>', \"(0-23)<foo-bar id='c55' class='blah beep'>#(23-26)xxx#(26-36)</foo-bar>\", null ]\n    [ '<foo-bar#c55>here &amp; there</foo-bar>', \"(0-13)<foo-bar id='c55'>#(0-5)here #(5-10)(NCR:named:&amp;)#(10-16) there#(29-39)</foo-bar>\", null ]\n    [ '<foo-bar#c55>1 < 2</foo-bar>', \"\"\"(0-13)<foo-bar id='c55'>#(13-15)1 #(15-20)<error message='extraneous whitespace before tag name'>&lt; 2&lt;/</error>#(18-19)<error message='extraneous characters on line 1 column 19: \"&lt;\"'>&lt;</error>#(20-28)foo-bar>\"\"\", null ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      tokens  = mrg.html.HTMLISH.parse probe\n      token.message ?= null for token in tokens\n      # H.tabulate probe, tokens\n      parts = []\n      for d in tokens\n        parts.push text_from_token d\n      resolve parts.join '#'\n  #.........................................................................................................\n  done()\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # test @[ \"Mirage HTML: parse stretch with compact tagnames\" ]\n  # @[ \"Mirage HTML: Basic functionality\" ]()\n  @[ \"Mirage HTML: quotes in attribute values\" ]()\n  test @[ \"Mirage HTML: quotes in attribute values\" ]\n  # test @[ \"altering mirrored source lines causes error\" ]\n  # @[ \"altering mirrored source lines causes error\" ]()\n  # test @[ \"Mirage HTML: tag syntax variants\" ]\n  # @[ \"Mirage HTML: XNCR parsing 1\" ]()\n  # test @[ \"Mirage HTML: XNCR parsing 1\" ]\n  # test @[ \"Mirage HTML: XNCR parsing 2\" ]\n  # for match from 'xxxabcxdefxxx'.matchAll /(?<xs>x{2,})|(?<notx>[^x]+)|(?<any>.+?)/g\n  #   text    = match[ 0 ]\n  #   index   = match.index\n  #   result  = { text, index, }\n  #   result[ k ] = v for k, v of match.groups when v?\n  #   info '^904^', result\n\n"
  ]
}