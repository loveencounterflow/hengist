{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/html.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Mirage HTML: Basic functionality\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay  } = require '../../../apps/dbay'\n  { Mrg   } = require '../../../apps/dbay-mirage'\n  db        = new DBay()\n  mrg       = new Mrg { db, }\n  prefix    = 'mrg'\n  probes_and_matchers = []\n  dsk       = 'b'\n  mrg.register_dsk { dsk, url: 'live:', }\n  # debug '^435^', mrg.append_text { dsk, trk: 1, text: \"\"\"<title id=c1 x=\"Q\"></title>\"\"\", }\n  # debug '^435^', mrg.append_text { dsk, trk: 1, text: \"\"\"<title id=c2 x='Q'></title>\"\"\", }\n  # debug '^435^', mrg.append_text { dsk, trk: 1, text: \"\"\"<title id=c3 x='\"Q\"'></title>\"\"\", }\n  # debug '^435^', mrg.append_text { dsk, trk: 1, text: \"\"\"<title id=c4 x=\"'Q'\"></title>\"\"\", }\n  mrg.append_text { dsk, trk: 1, text: \"\"\"<div id=c1 x=\"Q\"></div>\"\"\", }\n  mrg.append_text { dsk, trk: 1, text: '', }\n  mrg.append_text { dsk, trk: 1, text: \"\"\"<div id=c2 x=\"Q\">Some Text</div>\"\"\", }\n  H.tabulate \"#{prefix}_rwnmirror\",                   db SQL\"select * from #{prefix}_rwnmirror;\"\n  H.tabulate \"#{prefix}_parlnrs0\",                    db SQL\"select * from #{prefix}_parlnrs0;\"\n  H.tabulate \"#{prefix}_parlnrs\",                     db SQL\"select * from #{prefix}_parlnrs;\"\n  H.tabulate \"#{prefix}_pars0\",                       db SQL\"select * from #{prefix}_pars0;\"\n  H.tabulate \"#{prefix}_pars\",                        db SQL\"select * from #{prefix}_pars;\"\n  H.tabulate \"#{prefix}_mirror\",                      db SQL\"select * from #{prefix}_mirror;\"\n  H.tabulate \"#{prefix}_raw_mirror\",                  db SQL\"select * from #{prefix}_raw_mirror;\"\n  H.tabulate \"#{prefix}_parmirror\",                   db SQL\"select * from #{prefix}_parmirror;\"\n  # H.tabulate \"#{prefix}_next_free_oln\",               db SQL\"select * from #{prefix}_next_free_oln;\"\n  # H.tabulate \"#{prefix}_datasources\",                 db SQL\"select * from #{prefix}_datasources;\"\n\n  # mrg.html.parse_dsk { dsk, }\n  # H.tabulate \"#{prefix}_mirror\",              db SQL\"select * from #{prefix}_mirror;\"\n  # H.tabulate \"#{prefix}_html_mirror\",         db SQL\"select * from #{prefix}_html_mirror;\"\n  # H.tabulate \"#{prefix}_html_tags_and_html\",  db SQL\"select * from #{prefix}_html_tags_and_html;\"\n  # result = db.all_first_values SQL\"\"\"\n  #   select\n  #       v\n  #     from #{prefix}_html_mirror as m\n  #     join #{prefix}_html_atrs as a using ( atrid )\n  #     where true\n  #       and ( m.typ = '<' )\n  #       and ( m.tag = 'title' )\n  #       and ( a.k   = 'x' )\n  #     order by m.dsk, m.oln, m.trk, m.pce;\"\"\"\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Mirage HTML: quotes in attribute values\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay  } = require '../../../apps/dbay'\n  { Mrg   } = require '../../../apps/dbay-mirage'\n  db        = new DBay()\n  mrg       = new Mrg { db, }\n  prefix    = 'mrg'\n  probes_and_matchers = []\n  dsk       = 'quotedattributes'\n  mrg.register_dsk { dsk, url: 'live:', }\n  # debug '^435^', mrg.append_text { dsk, trk: 1, text: \"\"\"<title id=c1 x=\"Q\"></title>\"\"\", }\n  # debug '^435^', mrg.append_text { dsk, trk: 1, text: \"\"\"<title id=c2 x='Q'></title>\"\"\", }\n  # debug '^435^', mrg.append_text { dsk, trk: 1, text: \"\"\"<title id=c3 x='\"Q\"'></title>\"\"\", }\n  # debug '^435^', mrg.append_text { dsk, trk: 1, text: \"\"\"<title id=c4 x=\"'Q'\"></title>\"\"\", }\n  text = \"\"\"\n    <title id=c1 x=\"Q\"></title>\n\n    <title id=c2 x='Q'></title>\n\n    <title id=c3 x='\"Q\"'></title>\n\n    <title id=c4 x=\"'Q'\"></title>\"\"\"\n  mrg.append_text { dsk, trk: 1, text, }\n  mrg.html.parse_dsk { dsk, }\n  H.tabulate \"#{prefix}_mirror\",              db SQL\"select * from #{prefix}_mirror;\"\n  H.tabulate \"#{prefix}_html_mirror\",         db SQL\"select * from #{prefix}_html_mirror;\"\n  H.tabulate \"#{prefix}_html_tags_and_html\",  db SQL\"select * from #{prefix}_html_tags_and_html;\"\n  result = db.all_first_values SQL\"\"\"\n    select\n        v\n      from #{prefix}_html_mirror as m\n      join #{prefix}_html_atrs as a using ( atrid )\n      where true\n        and ( m.typ = '<' )\n        and ( m.tag = 'title' )\n        and ( a.k   = 'x' )\n      order by m.dsk, m.oln, m.trk, m.pce;\"\"\"\n  T?.eq result, [ 'Q', 'Q', '\"Q\"', \"'Q'\" ]\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n  #     url    = mrg._url_from_path probe\n  #     path   = mrg._path_from_url url\n  #     # urge { probe, url, path, }\n  #     resolve [ url, path, ]\n  return done?()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Mirage HTML: tag syntax variants\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay  } = require '../../../apps/dbay'\n  { Mrg   } = require '../../../apps/dbay-mirage'\n  { HDML  } = require '../../../apps/hdml'\n  db        = new DBay()\n  mrg       = new Mrg { db, }\n  { lets\n    thaw }  = guy.lft\n  # #.........................................................................................................\n  # debug '^33673^', rpr ( mrg.html.HTMLISH._tunnel '\\\\' ).text\n  # debug '^33673^', rpr ( mrg.html.HTMLISH._tunnel '\\\\\\\\' ).text\n  # debug '^33673^', rpr ( mrg.html.HTMLISH._tunnel '\\\\&amp;' ).text\n  # return done?()\n  #.........................................................................................................\n  text_from_token = ( token ) ->\n    { $key\n      name\n      type\n      text } = token\n    name ?= 'MISSING'\n    return switch $key\n      when '^text'  then text\n      when '^error' then  ( HDML.create_tag '<', 'error', { token.attrs..., message: token.message } ) \\\n                        + ( token.text ? '' ) \\\n                        + ( HDML.create_tag '>', 'error' )\n      when '<tag'   then HDML.create_tag '<', name, token.atrs\n      when '^tag'   then HDML.create_tag '^', name, token.atrs\n      when '>tag'   then HDML.create_tag '>', name\n      else throw new Error \"unknown $key #{rpr $key}\"\n  #.........................................................................................................\n  probes_and_matchers = [\n    # [ '<py/ling3/',         null, ]\n    [ '<title>My Page</title>',     '<title>|My Page|</title>', ]\n    [ '<title/My\\\\/Your Page/>',    '<title>|My/Your Page|</title>|>', ]\n    [ '<title>My Page</>', \"<title>|My Page|</title>|<error message='Expecting token of type --&gt; i_name &lt;-- but found --&gt; &#39;&gt;&#39; &lt;--'>></error>\", ]\n    [ '<title/My Page/>',           '<title>|My Page|</title>|>', ]\n    [ '<title/My/Your Page/>',      '<title>|My|</title>|Your Page/>', ]\n    [ '<title/My\\npage/',           '<title>|My\\npage|</title>', ]\n    [ '<title k=v j=w/My Page/',    \"<title k='v' j='w'>|My Page|</title>\", ]\n    [ '<title/<b>My</b> Page/',     \"<title>|<error message='bare active characters'><b>My<</error>|</title>|b> Page/\", ]\n    [ '<title//',                   '<title>|</title>', ]\n    [ '<title/>',                   '<title/>', ]\n    [ '<title/My Page/',            '<title>|My Page|</title>', ]\n    [ '\\\\<title/>',                 '&lt;title/>', ]\n    [ '&amp;',                      '&amp;', ]\n    [ '\\\\&amp;',                    '&amp;amp;', ]\n    [ 'foo\\\\bar',                   'foobar', ]\n    [ 'foo\\\\\\\\bar',                 'foo\\\\bar', ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      help '^435-1^', rpr probe\n      parts = []\n      for d in mrg.html.HTMLISH.parse probe\n        parts.push text_from_token d\n        d = thaw d\n        delete d.$\n        delete d.$vnr\n        urge '^435-2^', d\n      result = parts.join '|'\n      info '^435-3^', rpr result\n      resolve result\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_xncr_matching = ->\n  #===========================================================================================================\n  # PATTERNS\n  #-----------------------------------------------------------------------------------------------------------\n  # G: grouped\n  # O: optional\n  xncr                      = {}\n  xncr.nameG                = ( ///     (?<name>      [a-z][a-z0-9]* )       /// ).source\n  xncr.nameOG               = ( /// (?: (?<csg>   (?: [a-z][a-z0-9]* ) ) | ) /// ).source\n  xncr.hexG                 = ( /// (?:     x  (?<hex> [a-fA-F0-9]+ )      ) /// ).source\n  xncr.decG                 = ( ///            (?<dec> [      0-9]+ )        /// ).source\n  xncr.xncr_csg_cid_matcher = /// (?: & #{xncr.nameOG} \\# (?: #{xncr.hexG} | #{xncr.decG} ) ; ) ///\n  xncr.xncr_csg_cid_matcher = /// & #{xncr.nameG} ; | & #{xncr.nameOG} \\# (?: #{xncr.hexG} | #{xncr.decG} ) ; ///\n  #...........................................................................................................\n  probes = [\n    '&'\n    '&;'\n    'foo &bar; baz'\n    '&bar;'\n    '&#123;'\n    'foo &#123; bar'\n    'foo &xy#x123; bar'\n    ]\n  for probe in probes\n  # debug '^334-1^', probe.match xncr.csg_matcher\n  # debug '^334-2^', probe.match xncr.ncr_matcher\n  # debug '^334-3^', probe.match xncr.xncr_matcher\n  # debug '^334-4^', probe.match xncr.ncr_csg_cid_matcher\n    match = probe.match xncr.xncr_csg_cid_matcher\n    if match?\n      groups = { match.groups..., }\n      delete groups[ key ] for key, value of groups when not value?\n    else\n      groups = null\n    debug '^334-5^', ( rpr probe ), groups\n  #...........................................................................................................\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # test @[ \"altering mirrored source lines causes error\" ]\n  # @[ \"altering mirrored source lines causes error\" ]()\n  # @[ \"Mirage HTML: quotes in attribute values\" ]()\n  # @[ \"Mirage HTML: Basic functionality\" ]()\n  # test @[ \"Mirage HTML: tag syntax variants\" ]\n  demo_xncr_matching()\n\n\n\n"
  ]
}