{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/mixed-md-and-html.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nGUY                       = require '../../../apps/guy'\n# { HDML }                  = require '../../../apps/hdml'\nH                         = require '../../../lib/helpers'\n{ lets\n  freeze }                = GUY.lft\n{ to_width }              = require 'to-width'\nTIME                      = 0\n#-----------------------------------------------------------------------------------------------------------\ntime = ( label, f ) ->\n  t0    = Date.now()\n  console.time label\n  R     = f()\n  console.timeEnd label\n  TIME  = ( Date.now() - t0 ) / 1000\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_transcribe_markdown_to_html = ( cfg ) ->\n  { Moonriver } = require '../../../apps/moonriver'\n  { $ }         = Moonriver\n  mr            = new Moonriver()\n  ###\n    *   (?<c1>[^*]+) ** (?<c2>[^*]+) ** *\n    *   (?<c1>[^*]+) ** (?<c2>[^*]+) **   (?<c3>[^*]+) *\n    **  (?<c1>[^*]+) *  (?<c2>[^*]+) * **\n    **  (?<c1>[^*]+) *  (?<c2>[^*]+) *    (?<c3>[^*]+) **\n    **  (?<c1>[^*]+) *  (?<c2>[^*]+) *    (?<c3>[^*]+) *  (?<c3>[^*]+) * **\n    * ** (?<c1>[^*]+) ** *\n    ** * (?<c1>[^*]+) *  **\n    * ** (?<c1>[^*]+) ** (?<c2>[^*]+) *\n    ** * (?<c1>[^*]+) *  (?<c2>[^*]+) **\n  # mr.push do =>\n  #   return ( d, send ) =>\n  #     for match from d.matchAll /(?<!\\*)\\*(?<content>[^*]+)\\*(?!\\*)/g\n  #       debug '^387^', match.index, rpr match.groups.content\n  #     send d\n  ###\n  mr.push [\n    \"**a**\"\n    \"*a*\"\n    \"A paragraph as a *demonstration* of what **can** be done.\"\n    \"Another *piece* with *several* emphases.\"\n    \"Another ***piece* with *several*** nested emphases.\"\n    \"a [fancy](http://fan.cy) link\"\n    \"a [*fancy*](http://fan.cy) link\"\n    \"wanna **`code` some**?\"\n    ]\n  mr.push $show = ( d ) -> info '^344^', d\n  #---------------------------------------------------------------------------------------------------------\n  mr.push do =>\n    md = ( require 'markdown-it' ) 'zero'\n    md.enable 'emphasis'\n    # md.enable 'autolink'\n    md.enable 'backticks'\n    # md.enable 'entity'\n    # md.enable 'escape'\n    # md.enable 'html_inline'\n    # md.enable 'image'\n    md.enable 'link'\n    # md.enable 'newline'\n    # md.enable 'text'\n    # md.enable 'balance_pairs'\n    # md.enable 'text_collapse'\n    return ( d, send ) =>\n      send md.renderInline d\n  #---------------------------------------------------------------------------------------------------------\n  mr.push $show = ( d ) -> urge '^344^', d\n  mr.drive()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_tunneling_all_htmlish = ( cfg ) ->\n  TIMETUNNEL                = require 'timetunnel'\n  _tunnel = ( text ) ->\n    ### TAINT do not reconstruct tunnel for each call ###\n    # guards    = 'äöüßp'\n    # guards    = '①②③④⑤'\n    guards    = '¥₽₨฿₮'\n    intalph   = '0123456789'\n    tnl       = new TIMETUNNEL.Timetunnel { guards, intalph, }\n    tnl.add_tunnel /// ( < [^>]*? > ) ///sgu\n    # tnl.add_tunnel TIMETUNNEL.tunnels.keep_backslash\n    # tnl.add_tunnel TIMETUNNEL.tunnels.remove_backslash\n    text      = tnl.hide text\n    return { text, reveal: ( tnl.reveal.bind tnl ), }\n  urge rpr ( _tunnel \"helo world\"                                 ).text\n  urge rpr ( _tunnel \"helo <b>world</b>\"                          ).text\n  urge rpr ( _tunnel \"helo <a href='https://foo.com'>world</a>\"   ).text\n  urge rpr ( _tunnel \"helo <span foo='<surprise>'>world</span>\"   ).text\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_mixed_md_and_html = ( cfg ) ->\n  { DBay }        = require '../../../apps/dbay'\n  { Mrg }         = require '../../../apps/dbay-mirage'\n  prefix          = 'mrg'\n  path            = PATH.join DBay.C.autolocation, 'demo-html-parsing.sqlite'\n  db              = new DBay { path, recreate: true, }\n  mrg             = new Mrg { db, prefix, }\n  db.create_stdlib()\n  #.........................................................................................................\n  dsk             = 'md'; path = 'dbay-rustybuzz/mixed-md-and-html.html'\n  # dsk       = 'ne'; path = 'list-of-egyptian-hieroglyphs.html'\n  # dsk       = 'pre'; path = 'python-regexes.html'\n  path            = PATH.resolve PATH.join __dirname, '../../../assets', path\n  db.setv 'dsk', dsk\n  db.setv 'trk', 1\n  time 'register_dsk',        => mrg.register_dsk       { dsk, path, }\n  time 'refresh_datasource',  => mrg.refresh_datasource { dsk, }\n  time 'html.parse_dsk',      => mrg.html.parse_dsk     { dsk, }\n  #.........................................................................................................\n  H.tabulate \"tags\",         db SQL\"\"\"\n      select\n          *\n        from #{prefix}_html_tags\n        where ( syntax != 'html' ) or ( is_empty );\"\"\"\n  # H.tabulate \"#{prefix}_datasources\",         db SQL\"select * from #{prefix}_datasources;\"\n  # H.tabulate \"std_variables()\",               db SQL\"select * from std_variables();\"\n  # H.tabulate \"#{prefix}_html_atrs\",           db SQL\"select * from #{prefix}_html_atrs;\"\n  H.tabulate \"#{prefix}_html_syntaxes\",       db SQL\"select * from #{prefix}_html_syntaxes;\"\n  H.tabulate \"#{prefix}_html_tags_and_html\",  db SQL\"select * from #{prefix}_html_tags_and_html;\"\n  H.tabulate \"#{prefix}_html_mirror\",         db SQL\"select * from #{prefix}_html_mirror;\"\n  # H.tabulate \"#{prefix}_raw_mirror\",          db SQL\"select * from #{prefix}_raw_mirror;\"\n  # H.tabulate \"#{prefix}_html_tags\",           db SQL\"select * from #{prefix}_html_tags;\"\n  H.banner \"render_dsk\";                      echo mrg.html.render_dsk { dsk, }\n  urge '^3243^', \"DB file at #{db.cfg.path}\"\n  #.........................................................................................................\n  return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @demo_mixed_md_and_html()\n  # @demo_tunneling_all_htmlish()\n  @demo_transcribe_markdown_to_html()\n"
  ]
}