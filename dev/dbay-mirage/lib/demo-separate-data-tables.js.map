{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-separate-data-tables.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nGUY                       = require '../../../apps/guy'\n# { HDML }                  = require '../../../apps/hdml'\nH                         = require '../../../lib/helpers'\n{ lets\n  freeze }                = GUY.lft\n{ to_width }              = require 'to-width'\nTIME                      = 0\n#-----------------------------------------------------------------------------------------------------------\ntime = ( label, f ) ->\n  t0    = Date.now()\n  console.time label\n  R     = f()\n  console.timeEnd label\n  TIME  = ( Date.now() - t0 ) / 1000\n  return R\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_datamill = ( cfg ) ->\n  { DBay }        = require '../../../apps/dbay'\n  { Mrg }         = require '../../../apps/dbay-mirage'\n  db              = new DBay()\n  mrg             = new Mrg { db, }\n  db.create_stdlib()\n  dsk       = 'twcm'\n  path      = 'dbay-rustybuzz/template-with-content-markers.html'\n  path      = PATH.resolve PATH.join __dirname, '../../../assets', path\n  #.........................................................................................................\n  mrg.register_dsk { dsk, path, }\n  mrg.refresh_datasource { dsk, }\n  db.setv 'allow_change_on_mirror', 1\n  db mrg.sql.insert_trk_line, { dsk, oln: 2, trk: 2, pce: 1, txt: \"\"\"something\"\"\", }\n  mrg.deactivate { dsk, oln: 2, trk: 2, }\n  db mrg.sql.insert_trk_line, { dsk, oln: 2, trk: 3, pce: 1, txt: \"\"\"<div>\"\"\", }\n  db mrg.sql.insert_trk_line, { dsk, oln: 2, trk: 3, pce: 2, txt: \"\"\"inserted content\"\"\", }\n  db mrg.sql.insert_trk_line, { dsk, oln: 2, trk: 3, pce: 3, txt: \"\"\"</div>\"\"\", }\n  #.........................................................................................................\n  db.setv 'dsk', dsk\n  H.tabulate 'mrg_datasources', db SQL\"select * from mrg_datasources;\"\n  H.tabulate 'mrg_mirror',      db SQL\"select * from mrg_mirror order by dsk, oln, trk, pce;\"\n  H.tabulate 'mrg_lines',       db SQL\"select * from mrg_lines  order by dsk, oln;\"\n  H.banner \"lines of #{dsk}\"\n  urge '^474^', oln, rpr txt for { oln, txt, } from mrg.walk_line_rows { dsk, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_paragraphs_etc = ( cfg ) ->\n  { DBay }        = require '../../../apps/dbay'\n  { Mrg }         = require '../../../apps/dbay-mirage'\n  prefix          = 'mrg'\n  db              = new DBay()\n  mrg             = new Mrg { db, prefix, }\n  db.create_stdlib()\n  dsk       = 'twcm'\n  path      = 'dbay-rustybuzz/htmlish-tags.html'\n  path      = PATH.resolve PATH.join __dirname, '../../../assets', path\n  mrg.register_dsk { dsk, path, }\n  mrg.refresh_datasource { dsk, }\n  #.........................................................................................................\n  db mrg.sql.insert_trk_line, { dsk, oln: 2, trk: 2, pce: 1, txt: \"\"\"something\"\"\", }\n  mrg.deactivate { dsk, oln: 2, trk: 2, }\n  db mrg.sql.insert_trk_line, { dsk, oln: 2, trk: 3, pce: 1, txt: \"\"\"<div>\"\"\", }\n  db mrg.sql.insert_trk_line, { dsk, oln: 2, trk: 3, pce: 2, txt: \"\"\"inserted content\"\"\", }\n  db mrg.sql.insert_trk_line, { dsk, oln: 2, trk: 3, pce: 3, txt: \"\"\"</div>\"\"\", }\n  try\n    db.setv 'allow_change_on_mirror', 1\n    # mrg.deactivate { dsk, oln: 10, trk: 1, }\n  finally\n    db.setv 'allow_change_on_mirror', 0\n  db mrg.sql.insert_trk_line, { dsk, oln: 11, trk: 2, pce: 1, txt: '', }\n  db mrg.sql.insert_trk_line, { dsk, oln: 11, trk: 2, pce: 2, txt: \"\"\"generated paragraph\"\"\", }\n  db mrg.sql.insert_trk_line, { dsk, oln: 11, trk: 2, pce: 3, txt: '', }\n  #.........................................................................................................\n  H.tabulate \"#{prefix}_mirror\",        db SQL\"select * from #{prefix}_mirror           order by dsk, oln, trk, pce;\"\n  # H.tabulate \"#{prefix}_mirror (act)\",  db SQL\"select * from #{prefix}_mirror where act order by dsk, oln, trk, pce;\"\n  H.tabulate \"#{prefix}_rwnmirror\",     db SQL\"select * from #{prefix}_rwnmirror;\"\n  H.tabulate \"#{prefix}_parlnrs0\",      db SQL\"select * from #{prefix}_parlnrs0;\"\n  H.tabulate \"#{prefix}_parlnrs\",       db SQL\"select * from #{prefix}_parlnrs;\"\n  H.tabulate \"#{prefix}_parmirror\",     db SQL\"select * from #{prefix}_parmirror;\"\n  # H.tabulate \"#{prefix}_datasources\",   db SQL\"select * from #{prefix}_datasources;\"\n  # H.tabulate \"mrg.walk_line_rows()\",  mrg.walk_line_rows { dsk, }\n  H.tabulate \"mrg.walk_par_rows()\",   mrg.walk_par_rows { dsk, }\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nnormalize_tokens = ( tokens ) ->\n  keys = [\n    '$vnr'\n    '$key'\n    'type'\n    'prefix'\n    'name'\n    'id'\n    'class'\n    'atrs'\n    'start'\n    'stop'\n    'text'\n    '$'\n    'code'      ### { $key: '^error', } ###\n    # 'chvtname'  ### { $key: '^error', } ###\n    # 'origin'    ### { $key: '^error', } ###\n    'message'   ### { $key: '^error', } ###\n    ]\n  R = []\n  for token in tokens\n    d = {}\n    d[ key ]  = ( token[ key ] ? null ) for key in keys\n    # d.$key    = ( CND.reverse CND.red d.$key ) if d.$key is '^error'\n    d.message = ( to_width d.message, 20 ) if d.message?\n    R.push d\n  return freeze R\n\n#-----------------------------------------------------------------------------------------------------------\nshow_query_plan = ->\n  H.tabulate \"query plan\", db SQL\"explain query plan select * from #{prefix}_wspars;\"\n  rows    = []\n  counts  = {}\n  for row from db SQL\"explain query plan select * from #{prefix}_wspars;\"\n    continue unless /^(SCAN (?!SUBQUERY)|SEARCH)/.test row.detail\n    key =  row.detail.replace /^(\\S+).*$/, '$1'\n    counts[ key ] = ( counts[ key ] ? 0 ) + 1\n    # continue unless /^(SCAN|SEARCH)/.test row.detail\n    rows.push row\n  rows.sort ( a, b ) =>\n    return +1 if a.detail > b.detail\n    return -1 if a.detail < b.detail\n    return  0\n  H.tabulate \"query plan\", rows\n  urge '^44873^', counts\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_html_parsing = ( cfg ) ->\n  { DBay }        = require '../../../apps/dbay'\n  { Mrg }         = require '../../../apps/dbay-mirage'\n  prefix          = 'mrg'\n  path            = PATH.join DBay.C.autolocation, 'demo-html-parsing.sqlite'\n  db              = new DBay { path, recreate: true, }\n  mrg             = new Mrg { db, prefix, }\n  db.create_stdlib()\n  # dsk       = 'demo'\n  # mrg.register_dsk { dsk, url: 'live:', }\n  # dsk       = 'twcm'; path = 'dbay-rustybuzz/htmlish-tags.html'\n  dsk       = 'ne'; path = 'dbay-rustybuzz/no-errors.html'\n  # dsk       = 'ne'; path = 'list-of-egyptian-hieroglyphs.html'\n  # dsk       = 'pre'; path = 'python-regexes.html'\n  path      = PATH.resolve PATH.join __dirname, '../../../assets', path\n  db.setv 'dsk', dsk\n  db.setv 'trk', 1\n  time 'register_dsk',        => mrg.register_dsk { dsk, path, }\n  time 'refresh_datasource',  => mrg.refresh_datasource { dsk, }\n  time 'html.parse_dsk',      => mrg.html.parse_dsk { dsk, }\n  # console.log '---------------------------------'; return null\n  # time 'get_par_rows',        => mrg.get_par_rows { dsk, }\n  # txt = FS.readFileSync path, { encoding: 'utf-8', }; time 'mrg.html.HTMLISH.parse', => mrg.html.HTMLISH.parse txt\n  # H.tabulate \"#{prefix}_raw_mirror limit 25\",       db SQL\"select * from #{prefix}_raw_mirror limit 25;\"\n  # H.tabulate \"_#{prefix}_ws_linecounts limit 25\",       db SQL\"select * from _#{prefix}_ws_linecounts limit 25;\"\n  # H.tabulate \"#{prefix}_paragraphs limit 25\",       db SQL\"select * from #{prefix}_paragraphs limit 25;\"\n  #.........................................................................................................\n  { L, I, } = db.sql\n  timings   = []\n  for { name, } from db SQL\"\"\"\n    with v1 as ( select row_number() over () as nr, name, type from sqlite_schema )\n    select name from v1 where type in ( 'table', 'view' ) order by nr;\"\"\"\n    sql   = SQL\"select count(*) as count from #{I name};\"\n    count = time name, -> db.single_value sql\n    dt    = TIME.toFixed 3\n    timings.push { name, count, dt, }\n  H.tabulate \"timings\", timings\n  #.........................................................................................................\n  # H.tabulate \"#{prefix}_datasources\",         db SQL\"select * from #{prefix}_datasources;\"\n  # H.tabulate \"std_variables()\",               db SQL\"select * from std_variables();\"\n  H.tabulate \"#{prefix}_raw_mirror\",          db SQL\"select * from #{prefix}_raw_mirror;\"\n  # H.tabulate \"#{prefix}_html_atrs\",           db SQL\"select * from #{prefix}_html_atrs;\"\n  H.tabulate \"#{prefix}_html_tags_and_html\",  db SQL\"select * from #{prefix}_html_tags_and_html;\"\n  H.tabulate \"#{prefix}_html_mirror\",         db SQL\"select * from #{prefix}_html_mirror;\"\n  H.tabulate \"#{prefix}_html_tags\",           db SQL\"select * from #{prefix}_html_tags;\"\n  H.banner \"render_dsk\";                      echo mrg.html.render_dsk { dsk, }\n  urge '^3243^', \"DB file at #{db.cfg.path}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_recover_original_text = ( cfg ) ->\n  { DBay }        = require '../../../apps/dbay'\n  { Mrg }         = require '../../../apps/dbay-mirage'\n  prefix          = 'mrg'\n  path            = PATH.join DBay.C.autolocation, 'demo-html-parsing.sqlite'\n  db              = new DBay { path, recreate: true, }\n  mrg             = new Mrg { db, prefix, }\n  db.create_stdlib()\n  #.........................................................................................................\n  dsk             = 'lb'; path = 'dbay-rustybuzz/literal-blocks.html'\n  # dsk       = 'ne'; path = 'list-of-egyptian-hieroglyphs.html'\n  # dsk       = 'pre'; path = 'python-regexes.html'\n  path            = PATH.resolve PATH.join __dirname, '../../../assets', path\n  db.setv 'dsk', dsk\n  db.setv 'trk', 1\n  time 'register_dsk',        => mrg.register_dsk       { dsk, path, }\n  time 'refresh_datasource',  => mrg.refresh_datasource { dsk, }\n  time 'html.parse_dsk',      => mrg.html.parse_dsk     { dsk, }\n  #.........................................................................................................\n  H.tabulate \"tags\",         db SQL\"\"\"\n      select\n          *\n        from #{prefix}_html_tags\n        where ( syntax != 'html' ) or ( is_empty );\"\"\"\n  # H.tabulate \"#{prefix}_datasources\",         db SQL\"select * from #{prefix}_datasources;\"\n  # H.tabulate \"std_variables()\",               db SQL\"select * from std_variables();\"\n  # H.tabulate \"#{prefix}_html_atrs\",           db SQL\"select * from #{prefix}_html_atrs;\"\n  H.tabulate \"#{prefix}_html_syntaxes\",       db SQL\"select * from #{prefix}_html_syntaxes;\"\n  H.tabulate \"#{prefix}_html_tags_and_html\",  db SQL\"select * from #{prefix}_html_tags_and_html;\"\n  H.tabulate \"#{prefix}_html_mirror\",         db SQL\"select * from #{prefix}_html_mirror;\"\n  # H.tabulate \"#{prefix}_raw_mirror\",          db SQL\"select * from #{prefix}_raw_mirror;\"\n  # H.tabulate \"#{prefix}_html_tags\",           db SQL\"select * from #{prefix}_html_tags;\"\n  H.banner \"render_dsk\";                      echo mrg.html.render_dsk { dsk, }\n  urge '^3243^', \"DB file at #{db.cfg.path}\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_parse_markdownish = ( cfg ) ->\n  { DBay }        = require '../../../apps/dbay'\n  { Mrg }         = require '../../../apps/dbay-mirage'\n  prefix          = 'mrg'\n  path            = PATH.join DBay.C.autolocation, 'demo-html-parsing.sqlite'\n  db              = new DBay { path, recreate: true, }\n  mrg             = new Mrg { db, prefix, }\n  db.create_stdlib()\n  #.........................................................................................................\n  dsk             = 'mk'; path = 'dbay-rustybuzz/markdownish-1.md'\n  # dsk       = 'ne'; path = 'list-of-egyptian-hieroglyphs.html'\n  # dsk       = 'pre'; path = 'python-regexes.html'\n  path            = PATH.resolve PATH.join __dirname, '../../../assets', path\n  db.setv 'dsk', dsk\n  db.setv 'trk', 1\n  time 'register_dsk',        => mrg.register_dsk       { dsk, path, }\n  time 'refresh_datasource',  => mrg.refresh_datasource { dsk, }\n  time 'html.parse_dsk',      => mrg.html.parse_dsk     { dsk, }\n  #.........................................................................................................\n  H.tabulate \"tags\",         db SQL\"\"\"\n      select\n          *\n        from #{prefix}_html_tags      as tags\n        join #{prefix}_html_syntaxes  as syntaxes using ( syntax )\n        where ( tags.syntax != 'html' ) or ( tags.is_empty );\"\"\"\n  # H.tabulate \"#{prefix}_datasources\",         db SQL\"select * from #{prefix}_datasources;\"\n  # H.tabulate \"std_variables()\",               db SQL\"select * from std_variables();\"\n  # H.tabulate \"#{prefix}_html_atrs\",           db SQL\"select * from #{prefix}_html_atrs;\"\n  H.tabulate \"#{prefix}_html_swappers\",         db SQL\"select * from #{prefix}_html_swappers;\"\n  H.tabulate \"#{prefix}_html_swapper_matches\",  db SQL\"\"\"\n    select\n        *\n      from #{prefix}_html_swapper_matches\n      order by dsk, oln, trk, pce;\"\"\"\n  # H.tabulate \"#{prefix}_html_swapper_matches\",  db SQL\"\"\"\n  #   select\n  #       *\n  #     from #{prefix}_html_swapper_matches as r1\n  #     join #{prefix}_html_swapper_matches as r2\n  #     order by dsk, oln, trk, pce;\"\"\"\n  H.tabulate \"#{prefix}_raw_mirror\",  db SQL\"\"\"\n    select\n        *\n      from #{prefix}_raw_mirror\n      left join #{prefix}_html_swapper_matches using ( dsk, oln, trk, pce )\n      order by dsk, oln, trk, pce;\"\"\"\n  # H.tabulate \"#{prefix}_html_tags_and_html\",  db SQL\"select * from #{prefix}_html_tags_and_html;\"\n  # H.tabulate \"#{prefix}_html_mirror\",         db SQL\"select * from #{prefix}_html_mirror;\"\n  # H.tabulate \"#{prefix}_raw_mirror\",          db SQL\"select * from #{prefix}_raw_mirror;\"\n  # H.tabulate \"#{prefix}_html_tags\",           db SQL\"select * from #{prefix}_html_tags;\"\n  # H.banner \"render_dsk\";                      echo mrg.html.render_dsk { dsk, }\n  urge '^3243^', \"DB file at #{db.cfg.path}\"\n  #.........................................................................................................\n  return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @demo_html_generation()\n  # @demo_datamill()\n  # @demo_paragraphs_etc()\n  # @demo_html_parsing()\n  # @demo_recover_original_text()\n  @demo_parse_markdownish()\n"
  ]
}