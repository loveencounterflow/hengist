{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-separate-data-tables.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nGUY                       = require '../../../apps/guy'\n# { HDML }                  = require '../../../apps/hdml'\nH                         = require '../../../lib/helpers'\n{ lets\n  freeze }                = GUY.lft\n{ to_width }              = require 'to-width'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_datamill = ( cfg ) ->\n  { DBay }        = require '../../../apps/dbay'\n  { Mrg }         = require '../../../apps/dbay-mirage/lib/main2'\n  db              = new DBay()\n  mrg             = new Mrg { db, }\n  db.create_stdlib()\n  dsk       = 'twcm'\n  path      = 'dbay-rustybuzz/template-with-content-markers.html'\n  path      = PATH.resolve PATH.join __dirname, '../../../assets', path\n  #.........................................................................................................\n  mrg.register_dsk { dsk, path, }\n  mrg.refresh_datasource { dsk, }\n  db.setv 'allow_change_on_mirror', 1\n  db mrg.sql.insert_lnpart, { dsk, oln: 2, trk: 2, pce: 1, txt: \"\"\"something\"\"\", }\n  mrg.deactivate { dsk, oln: 2, trk: 2, }\n  db mrg.sql.insert_lnpart, { dsk, oln: 2, trk: 3, pce: 1, txt: \"\"\"<div>\"\"\", }\n  db mrg.sql.insert_lnpart, { dsk, oln: 2, trk: 3, pce: 2, txt: \"\"\"inserted content\"\"\", }\n  db mrg.sql.insert_lnpart, { dsk, oln: 2, trk: 3, pce: 3, txt: \"\"\"</div>\"\"\", }\n  #.........................................................................................................\n  db.setv 'dsk', dsk\n  H.tabulate 'mrg_datasources', db SQL\"select * from mrg_datasources;\"\n  H.tabulate 'mrg_mirror',      db SQL\"select * from mrg_mirror order by dsk, oln, trk, pce;\"\n  H.tabulate 'mrg_lines',       db SQL\"select * from mrg_lines  order by dsk, oln;\"\n  H.banner \"lines of #{dsk}\"\n  urge '^474^', oln, rpr txt for { oln, txt, } from mrg.walk_line_rows { dsk, }\n  return null\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nHTML                      = ( require 'paragate/lib/htmlish.grammar' ).new_grammar { bare: true, }\n\n#-----------------------------------------------------------------------------------------------------------\nclass Htmlish\n\n  # #---------------------------------------------------------------------------------------------------------\n  # constructor: ->\n  #   return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  parse: ( text ) ->\n    tokens    = HTML.parse text\n    R         = lets tokens, ( tokens ) =>\n      for d, idx in tokens\n        # warn '^44564976^', d if d.$key is '^error'\n        if ( d.$key is '<tag' )\n          if ( d.type is 'otag' )\n            if ( /^<\\s+/.test d.text )\n              @_as_error d, '^ð1^', 'xtraows', \"extraneous whitespace before tag name\"\n        else if ( d.$key is '>tag' )\n          if ( d.type is 'ctag' )\n            if( /^<\\s*\\/\\s+/.test d.text ) or ( /^<\\s+\\/\\s*/.test d.text )\n              @_as_error d, '^ð2^', 'xtracws', \"extraneous whitespace in closing tag\"\n        else if ( d.$key is '^text' )\n          if ( /(?<!\\\\)[<&]/.test d.text )\n            @_as_error d, '^ð1^', 'bareachrs', \"bare active characters\"\n      return null\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _as_error: ( token, ref, code, message ) ->\n    token.$key    = '^error'\n    token.origin  = 'htmlish'\n    token.code    = code\n    token.message = message\n    token.$       = ref\n    return null\n\n\nHTMLISH = new Htmlish()\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_htmlish = ( cfg ) ->\n  { DBay }        = require '../../../apps/dbay'\n  { Mrg }         = require '../../../apps/dbay-mirage/lib/main2'\n  prefix          = 'mrg'\n  db              = new DBay()\n  mrg             = new Mrg { db, prefix, }\n  db.create_stdlib()\n  dsk       = 'twcm'\n  path      = 'dbay-rustybuzz/htmlish-tags.html'\n  path      = PATH.resolve PATH.join __dirname, '../../../assets', path\n  mrg.register_dsk { dsk, path, }\n  mrg.refresh_datasource { dsk, }\n  #.........................................................................................................\n  db mrg.sql.insert_lnpart, { dsk, oln: 2, trk: 2, pce: 1, txt: \"\"\"something\"\"\", }\n  mrg.deactivate { dsk, oln: 2, trk: 2, }\n  db mrg.sql.insert_lnpart, { dsk, oln: 2, trk: 3, pce: 1, txt: \"\"\"<div>\"\"\", }\n  db mrg.sql.insert_lnpart, { dsk, oln: 2, trk: 3, pce: 2, txt: \"\"\"inserted content\"\"\", }\n  db mrg.sql.insert_lnpart, { dsk, oln: 2, trk: 3, pce: 3, txt: \"\"\"</div>\"\"\", }\n  try\n    db.setv 'allow_change_on_mirror', 1\n    # mrg.deactivate { dsk, oln: 10, trk: 1, }\n  finally\n    db.setv 'allow_change_on_mirror', 0\n  db mrg.sql.insert_lnpart, { dsk, oln: 11, trk: 2, pce: 1, txt: '', }\n  db mrg.sql.insert_lnpart, { dsk, oln: 11, trk: 2, pce: 2, txt: \"\"\"generated paragraph\"\"\", }\n  db mrg.sql.insert_lnpart, { dsk, oln: 11, trk: 2, pce: 3, txt: '', }\n  # #.........................................................................................................\n  # for { par, lnr1, lnr2, txt, } from mrg.walk_par_rows { dsk, }\n  #   H.tabulate \"#{par} (#{lnr1}..#{lnr2}) #{rpr txt}\", normalize_tokens HTMLISH.parse txt\n  #.........................................................................................................\n  H.tabulate \"#{prefix}_mirror\",        db SQL\"select * from #{prefix}_mirror           order by dsk, oln, trk, pce;\"\n  # H.tabulate \"#{prefix}_mirror (act)\",  db SQL\"select * from #{prefix}_mirror where act order by dsk, oln, trk, pce;\"\n  H.tabulate \"#{prefix}_rwnmirror\",     db SQL\"select * from #{prefix}_rwnmirror;\"\n  H.tabulate \"#{prefix}_parlnrs0\",      db SQL\"select * from #{prefix}_parlnrs0;\"\n  H.tabulate \"#{prefix}_parlnrs\",       db SQL\"select * from #{prefix}_parlnrs;\"\n  H.tabulate \"#{prefix}_parmirror\",     db SQL\"select * from #{prefix}_parmirror;\"\n  # H.tabulate \"#{prefix}_datasources\",   db SQL\"select * from #{prefix}_datasources;\"\n  # H.tabulate \"mrg.walk_line_rows()\",  mrg.walk_line_rows { dsk, }\n  # H.tabulate \"mrg.walk_par_rows()\",   mrg.walk_par_rows { dsk, }\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nnormalize_tokens = ( tokens ) ->\n  keys = [\n    '$vnr'\n    '$key'\n    'type'\n    'prefix'\n    'name'\n    'id'\n    'class'\n    'atrs'\n    'start'\n    'stop'\n    'text'\n    '$'\n    'code'      ### { $key: '^error', } ###\n    # 'chvtname'  ### { $key: '^error', } ###\n    # 'origin'    ### { $key: '^error', } ###\n    'message'   ### { $key: '^error', } ###\n    ]\n  R = []\n  for token in tokens\n    d = {}\n    d[ key ]  = ( token[ key ] ? null ) for key in keys\n    # d.$key    = ( CND.reverse CND.red d.$key ) if d.$key is '^error'\n    d.message = ( to_width d.message, 20 ) if d.message?\n    R.push d\n  return freeze R\n\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_html_parsing = ( cfg ) ->\n  { DBay }        = require '../../../apps/dbay'\n  { Mrg }         = require '../../../apps/dbay-mirage/lib/main2'\n  { Html }        = require '../../../apps/dbay-mirage/lib/html'\n  prefix          = 'mrg'\n  db              = new DBay()\n  mrg             = new Mrg { db, prefix, }\n  mrg.html        = new Html { mrg, prefix, }\n  db.create_stdlib()\n  dsk       = 'demo'\n  mrg.register_dsk { dsk, url: 'live:', }\n  # mrg.html.statements.insert_datasource.run { dsk, url: 'ram:', digest: null, }\n  mrg.html._append_tag dsk, '^', 'path', { id: 'c1', d: 'M100,100L200,200', }\n  mrg.html._append_tag dsk, '<', 'div', { id: 'c1', class: 'foo bar', }\n  mrg.html._append_tag dsk, '^', '$text', null, \"helo\"\n  mrg.html._append_tag dsk, '>', 'div'\n  mrg.html._append_tag dsk, '^', 'mrg:loc#baselines'\n  #.........................................................................................................\n  db.setv 'dsk', 'demo'\n  H.tabulate \"#{prefix}_html_datasources\",    db SQL\"select * from #{prefix}_html_datasources;\"\n  H.tabulate \"#{prefix}_html_mirror\",         db SQL\"select * from #{prefix}_html_mirror;\"\n  H.tabulate \"#{prefix}_html_atrs\",           db SQL\"select * from #{prefix}_html_atrs;\"\n  H.tabulate \"std_variables()\",               db SQL\"select * from std_variables();\"\n  H.tabulate \"#{prefix}_html_tags_and_html\",  db SQL\"select * from #{prefix}_html_tags_and_html;\"\n  H.banner \"render_dsk\";                      echo mrg.html.render_dsk { dsk, }\n  return null\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @demo_html_generation()\n  # @demo_datamill()\n  @demo_htmlish()\n  # @demo_html_parsing()\n\n"
  ]
}