{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-html2-in-sql.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/DEMO-HDML'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n{ DBay }                  = require '../../../apps/dbay'\n{ width_of\n  to_width }              = require 'to-width'\n{ HDML }                  = require '../../../apps/hdml'\nX                         = require '../../../lib/helpers'\n# { tabulate\n#   summarize }             = require '../../../apps/dbay-tabulator'\n\n# #-----------------------------------------------------------------------------------------------------------\n# tabulate = ( db, query ) -> X.tabulate query, db query\n#-----------------------------------------------------------------------------------------------------------\ntabulate2 = ( title, rows ) -> X.tabulate title, rows\n\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_datamill = ( cfg ) ->\n  path            = '../../../dev-shm/demo-datamill.sqlite'\n  path            = PATH.resolve PATH.join __dirname, path\n  debug '^4497^', path\n  db              = new DBay { path, }\n  db.create_stdlib()\n  db SQL\"\"\"\n    drop view  if exists tags_and_html;\n    drop table if exists atrs;\n    drop table if exists mirror;\n    drop table if exists atrids;\n    drop table if exists datasources;\"\"\"\n  db SQL\"\"\"\n    create table atrids (\n        atrid integer not null,\n      primary key ( atrid ) );\"\"\"\n  db SQL\"\"\"\n    create table atrs (\n        atrid integer not null,\n        k     text    not null,\n        v     text    not null,\n      primary key ( atrid, k ),\n      foreign key ( atrid ) references atrids );\"\"\"\n  db SQL\"\"\"\n    create table mirror (\n        dsk   text    not null,\n        tid   integer not null,\n        sgl   text    not null,      -- sigil, one of `<`, `>`, `^`\n        tag   text    not null,      -- use '$text' for text nodes\n        atrid integer,\n        text  text,\n      primary key ( dsk, tid ),\n      foreign key ( dsk   ) references datasources,\n      foreign key ( atrid ) references atrids );\"\"\"\n  db SQL\"\"\"\n    create table datasources (\n        dsk     text not null,\n        url     text not null,\n        digest  text default null,\n      primary key ( dsk ) );\"\"\"\n      # -- create table #{prefix}_datasources (\n  db SQL\"\"\"\n    create view tags_and_html as select distinct\n        t.tid                                                     as tid,\n        t.sgl                                                     as sgl,\n        t.tag                                                     as tag,\n        t.atrid                                                   as atrid,\n        case t.tag when '$text' then t.text\n        else xxx_create_tag( t.sgl, t.tag, a.k, a.v ) over w end  as xxx\n      from\n        mirror as t\n        left join atrs as a using ( atrid )\n      where true\n        and ( t.dsk = std_getv( 'dsk' ) )\n      window w as (\n        partition by t.tid\n        order by a.k\n        rows between unbounded preceding and unbounded following )\n      order by tid;\"\"\"\n  #.........................................................................................................\n  _insert_atrid       = db.prepare_insert { into: 'atrids',       returning: '*', exclude: [ 'atrid', ], }\n  ### NOTE we don't use `autoincrement` b/c this is the more general solution; details will change when the\n  VNR gets more realistic (dsk, linenr, ...) ###\n  # _insert_content     = db.prepare_insert { into: 'mirror',       returning: '*', exclude: [ 'tid', ], }\n  _insert_content     = db.prepare SQL\"\"\"\n    with v1 as ( select coalesce( max( tid ), 0 ) + 1 as tid from mirror where dsk = $dsk )\n    insert into mirror ( dsk, tid, sgl, tag, atrid, text )\n      values ( $dsk, ( select tid from v1 ), $sgl, $tag, $atrid, $text )\n      returning *;\"\"\"\n  _insert_atr         = db.prepare_insert { into: 'atrs',         returning: null, }\n  _insert_datasource  = db.prepare_insert { into: 'datasources',  returning: '*', }\n  #.........................................................................................................\n  db.create_window_function\n    name:           'xxx_create_tag'\n    varargs:        false\n    deterministic:  true\n    start:          null\n    step:           ( Σ, sgl, tag, k, v ) ->\n      Σ            ?= { sgl, tag, atrs: {}, }\n      Σ.atrs[ k ]   = v if k?\n      return Σ\n    inverse:        ( Σ, dropped ) -> return null unless Σ?; delete Σ.atrs[ k ]; Σ\n    result:         ( Σ ) -> return '' unless Σ?; HDML.create_tag Σ.sgl, Σ.tag, Σ.atrs\n  #.........................................................................................................\n  _append_tag = ( dsk, sgl, tag, atrs = null, text = null ) ->\n    atrid = null\n    if text?\n      validate.null atrs\n    else if atrs?\n      validate.null text\n      { atrid } = db.first_row _insert_atrid\n      for k, v of atrs\n        v = rpr v unless isa.text v\n        _insert_atr.run { atrid, k, v, }\n    urge db.first_row _insert_content, { dsk, sgl, tag, atrid, text, }\n    return null\n  #.........................................................................................................\n  render_dsk = ( cfg ) ->\n    { dsk } = cfg\n    db.setv 'dsk', dsk\n    return ( db.all_first_values SQL\"select xxx from tags_and_html;\" ).join ''\n  #.........................................................................................................\n  dsk = 'demo'\n  _insert_datasource.run { dsk, url: 'ram:', digest: null, }\n  _append_tag dsk, '^', 'path', { id: 'c1', d: 'M100,100L200,200', }\n  _append_tag dsk, '<', 'div', { id: 'c1', class: 'foo bar', }\n  _append_tag dsk, '^', '$text', null, \"helo\"\n  _append_tag dsk, '>', 'div'\n  _append_tag dsk, '^', 'mrg:loc#baselines'\n  #.........................................................................................................\n  db.setv 'dsk', 'demo'\n  X.tabulate \"datasources\",     db.all_rows SQL\"select * from datasources;\"\n  X.tabulate \"mirror\",          db.all_rows SQL\"select * from mirror;\"\n  X.tabulate \"atrs\",            db.all_rows SQL\"select * from atrs;\"\n  X.tabulate \"std_variables()\", db.all_rows SQL\"select * from std_variables();\"\n  X.tabulate \"tags_and_html\",   db.all_rows SQL\"select * from tags_and_html;\"\n  X.banner   \"render_dsk\";      info rpr render_dsk { dsk, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_htmlish = ->\n  { HTMLISH }               = require '../../../apps/dbay-mirage/lib/htmlish-parser'\n  probes = [\n    \"\"\"<h1#c1.foo>Article</h1>\\n<div>Copy <br x=y/> <em>text</em>.</div>\"\"\"\n    \"\"\"<em x=42/what/ is this?\"\"\"\n    ]\n  for html in probes\n    rows = HTMLISH.parse html\n    tabulate2 ( rpr html ), rows\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @demo_datamill()\n  # @demo_html_generation()\n  @demo_htmlish()\n\n\n\n"
  ]
}