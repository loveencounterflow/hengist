{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/basic.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"mrg.refresh_datasource\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay  } = require '../../../apps/dbay'\n  { Mrg   } = require '../../../apps/dbay-mirage'\n  db        = new DBay()\n  mrg       = new Mrg { db, }\n  dsk       = 'sp'\n  path      = 'short-proposal.mkts.md'\n  path      = PATH.resolve PATH.join __dirname, '../../../assets', path\n  mrg.register_dsk { dsk, path, }\n  #.........................................................................................................\n  do =>\n    result  = mrg.refresh_datasource { dsk, }\n    debug '^44498^', result\n    T?.eq result, { files: 1, bytes: 384 }\n  #.........................................................................................................\n  do =>\n    result  = mrg.refresh_datasource { dsk, }\n    debug '^44498^', result\n    T?.eq result, { files: 0, bytes: 0 }\n  #.........................................................................................................\n  do =>\n    mrg._update_digest dsk, null\n    result  = mrg.refresh_datasource { dsk, }\n    debug '^44498^', result\n    T?.eq result, { files: 1, bytes: 384 }\n  #.........................................................................................................\n  do =>\n    result  = mrg.refresh_datasource { dsk, force: true, }\n    debug '^44498^', result\n    T?.eq result, { files: 1, bytes: 384 }\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"altering mirrored source lines causes error\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay  } = require '../../../apps/dbay'\n  { Mrg   } = require '../../../apps/dbay-mirage'\n  db        = new DBay()\n  mrg       = new Mrg { db, }\n  dsk       = 'twcm'\n  path      = 'dbay-rustybuzz/template-with-content-markers.html'\n  path      = PATH.resolve PATH.join __dirname, '../../../assets', path\n  mrg.register_dsk { dsk, path, }\n  mrg.refresh_datasource { dsk, }\n  rows_before = db.all_rows SQL\"select * from mrg_mirror order by dsk, oln, trk, pce;\"\n  console.table rows_before\n  #.........................................................................................................\n  do =>\n    error = null\n    try\n      db SQL\"\"\"insert into mrg_mirror\n        ( dsk, oln, trk, pce, txt )\n        values ( $dsk, $oln, $trk, $pce, $txt )\"\"\", {\n          dsk:      dsk,\n          oln:      10,\n          trk:      1,\n          pce:      0,\n          txt:      \"some text\", }\n    catch error\n      warn CND.reverse error.message\n      throw error unless ( /not allowed to modify table mrg_mirror/ ).test error.message\n      T?.ok true\n    T?.ok error?\n  #.........................................................................................................\n  rows_after = db.all_rows SQL\"select * from mrg_mirror order by dsk, oln, trk, pce;\"\n  console.table rows_after\n  # debug types.equals rows_before, rows_after\n  T?.eq rows_before, rows_after\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"URL/path conversion\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay  } = require '../../../apps/dbay'\n  { Mrg   } = require '../../../apps/dbay-mirage'\n  db        = new DBay()\n  mrg       = new Mrg { db, }\n  probes_and_matchers = [\n    [ '/foo.txt', [ 'file:///foo.txt', '/foo.txt' ], null ]\n    [ '/foo.txt', [ 'file:///foo.txt', '/foo.txt' ], null ]\n    [ '/some weird path.jpg', [ 'file:///some%20weird%20path.jpg', '/some weird path.jpg' ], null ]\n    [ '/some weird path.jpg#oops', [ 'file:///some%20weird%20path.jpg%23oops', '/some weird path.jpg#oops' ], null ]\n    [ '/path/with/folders/to/file.txt', [ 'file:///path/with/folders/to/file.txt', '/path/with/folders/to/file.txt' ], null ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      url    = mrg._url_from_path probe\n      path   = mrg._path_from_url url\n      # urge { probe, url, path, }\n      resolve [ url, path, ]\n  return done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n  # test @[ \"altering mirrored source lines causes error\" ]\n  # @[ \"altering mirrored source lines causes error\" ]()\n"
  ]
}