{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/hollerith-tng.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'IN-MEMORY-SQL'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\ngcfg                      = { verbose: false, }\nHCODECLEGACY              = require '../../../apps/hollerith-codec-legacy'\nHCODECLEGACY_TNG          = ( require '../../../apps/hollerith-codec-legacy/lib/tng' ).HOLLERITH_CODEC\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  defaults\n  validate }              = types.export()\nCHARWISE                  = require 'charwise' ### https://github.com/dominictarr/charwise ###\nBYTEWISE                  = require 'bytewise' ### https://github.com/deanlandolt/bytewise ###\n{ lets\n  freeze }                = require 'letsfreezethat'\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  whisper \"retrieving test data...\"\n  integer_lists = []\n  list_lengths  = DATA.get_integers cfg.list_count, cfg.list_length_min, cfg.list_length_max\n  #.........................................................................................................\n  for list_length in list_lengths\n    # integer_lists.push DATA.get_integers list_length, HOLLERITH.nr_min, HOLLERITH.nr_max\n    integer_lists.push DATA.get_integers list_length, -100, +100\n  #.........................................................................................................\n  data_cache  = { integer_lists, }\n  data_cache  = freeze data_cache\n  whisper \"...done\"\n  return data_cache\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@hollerith_classic = ( cfg ) -> new Promise ( resolve ) =>\n  { integer_lists, } = @get_data cfg\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    for integer_list in integer_lists\n      x = HCODECLEGACY.encode integer_list\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@hollerith_tng = ( cfg ) -> new Promise ( resolve ) =>\n  { integer_lists, } = @get_data cfg\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    for integer_list in integer_lists\n      x = HCODECLEGACY_TNG.encode integer_list\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@hollerith_bcd = ( cfg ) -> new Promise ( resolve ) =>\n  { integer_lists, } = @get_data cfg\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    for integer_list in integer_lists\n      x = HCODECLEGACY_TNG._encode_bcd [ integer_list, ]\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@bytewise = ( cfg ) -> new Promise ( resolve ) =>\n  { integer_lists, } = @get_data cfg\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    for integer_list in integer_lists\n      x = BYTEWISE.encode [ integer_list, ]\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@charwise = ( cfg ) -> new Promise ( resolve ) =>\n  { integer_lists, } = @get_data cfg\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    for integer_list in integer_lists\n      x = CHARWISE.encode [ integer_list, ]\n      count++\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  gcfg.verbose  = true\n  gcfg.verbose  = false\n  bench         = BM.new_benchmarks()\n  mode          = 'standard'\n  mode          = 'functional_test'\n  mode          = 'medium'\n  switch mode\n    when 'standard'\n      cfg           = { list_count: 3e5, list_length_min: 1, list_length_max: HCODECLEGACY_TNG.vnr_width, }\n      repetitions   = 5\n    when 'medium'\n      cfg           = { list_count: 1e3, list_length_min: 1, list_length_max: HCODECLEGACY_TNG.vnr_width, }\n      repetitions   = 3\n    when 'functional_test'\n      cfg           = { list_count: 3, list_length_min: 1, list_length_max: HCODECLEGACY_TNG.vnr_width, }\n      repetitions   = 1\n  test_names    = [\n    ### add benchmarks for Hollerith v2 with and without validation ###\n    'hollerith_classic'\n    'hollerith_tng'\n    'hollerith_bcd'\n    'bytewise'\n    'charwise'\n    ]\n  global.gc() if global.gc?\n  data_cache = null\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      global.gc() if global.gc?\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n  # debug '^787^', type_of CHARWISE.encode 'helo world'\n  # debug '^787^', type_of CHARWISE.encode [ 4, 5, 6, ]\n  # debug '^787^', rpr CHARWISE.buffer\n  # debug '^787^', type_of BYTEWISE.encode 'helo world'\n  # debug '^787^', type_of BYTEWISE.encode [ 4, 5, 6, ]\n\n\n\n"
  ]
}