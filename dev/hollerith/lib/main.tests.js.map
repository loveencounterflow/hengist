{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATOM/TESTS/VNR'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n# #...........................................................................................................\n# types                     = require '../types'\n# { isa\n#   validate\n#   type_of }               = types\n#...........................................................................................................\n{ inspect }               = require 'util'\nrpr = ( P... ) ->\n  return ( \\\n    ( inspect x, { depth: Infinity, maxArrayLength: Infinity, breakLength: Infinity, compact: true, } ) \\\n      for x in P ).join ' '\nhollerith_path            = '../../../apps/hollerith'\n\n\n#-----------------------------------------------------------------------------------------------------------\ntest_basics = ( T, VNR ) ->\n  T.eq ( d = VNR.create()                  ), [ 0, ]\n  T.eq ( d = VNR.create       [ 4, 6, 5, ] ), [ 4, 6, 5, ]\n  T.eq ( d = VNR.deepen       d            ), [ 4, 6, 5, 0, ]\n  T.eq ( d = VNR.deepen       d, 42        ), [ 4, 6, 5, 0, 42, ]\n  T.eq ( d = VNR.advance      d            ), [ 4, 6, 5, 0, 43, ]\n  T.eq ( d = VNR.recede       d            ), [ 4, 6, 5, 0, 42, ]\n  T.ok ( VNR.create   d ) isnt d\n  T.ok ( VNR.deepen   d ) isnt d\n  T.ok ( VNR.advance  d ) isnt d\n  T.ok ( VNR.recede   d ) isnt d\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"HLR basics\" ] = ( T, done ) ->\n  { Hollerith } = require hollerith_path\n  test_basics T, new Hollerith { validate: true, }\n  test_basics T, new Hollerith { validate: false, }\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"HLR sort 2\" ] = ( T, done ) ->\n  matchers = [\n    [ [ 1, 0, -1 ], [ 1 ], [ 1, 0 ], [ 1, 0, 1 ], [ 2, -1 ], [ 2 ], [ 2, 0 ], [ 2, 1 ] ]\n    [ [ 2 ],    [ 2, 0 ], ]\n    [ [ Infinity, -1, ], [ Infinity, ], [ Infinity, 1, ], ]\n    [ [ Infinity, -1, ], [ Infinity, 0, ], [ Infinity, 1, ], ]\n    [ [ 1, ], ]\n    [ [ 1, ], [ 2, ] ]\n    ]\n  HLR       = ( require hollerith_path ).HOLLERITH\n  for matcher in matchers\n    probe   = [ matcher..., ]\n    await T.perform probe, matcher, null, -> return new Promise ( resolve, reject ) ->\n      result  = HLR.sort probe\n      T.ok probe isnt matcher\n      T.ok probe isnt result\n      T.eq result, matcher\n      # debug '^334^', rpr result\n      resolve result\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"HLR sort 3\" ] = ( T, done ) ->\n  HLR       = ( require hollerith_path ).HOLLERITH\n  # info CND.blue   'cmp_total    ', \"[ 1, ],     [ 1, -1, ]\", VNR.cmp_total   [ 1, ],     [ 1, -1, ]\n  # info CND.blue   'cmp_total    ', \"[ 1, ],     [ 1,  0, ]\", VNR.cmp_total   [ 1, ],     [ 1,  0, ]\n  # info CND.blue   'cmp_total    ', \"[ 1, ],     [ 1, +1, ]\", VNR.cmp_total   [ 1, ],     [ 1, +1, ]\n  # info CND.blue   'cmp_total    ', \"----------------------\"\n  # info CND.blue   'cmp_total    ', \"[ 1, 0, ],  [ 1, -1, ]\", VNR.cmp_total   [ 1, 0, ],  [ 1, -1, ]\n  # info CND.blue   'cmp_total    ', \"[ 1, 0, ],  [ 1,  0, ]\", VNR.cmp_total   [ 1, 0, ],  [ 1,  0, ]\n  # info CND.blue   'cmp_total    ', \"[ 1, 0, ],  [ 1, +1, ]\", VNR.cmp_total   [ 1, 0, ],  [ 1, +1, ]\n  # info()\n  # info CND.lime   'cmp_partial  ', \"[ 1, ],     [ 1, -1, ]\", VNR.cmp_partial [ 1, ],     [ 1, -1, ]\n  # info CND.lime   'cmp_partial  ', \"[ 1, ],     [ 1,  0, ]\", VNR.cmp_partial [ 1, ],     [ 1,  0, ]\n  # info CND.lime   'cmp_partial  ', \"[ 1, ],     [ 1, +1, ]\", VNR.cmp_partial [ 1, ],     [ 1, +1, ]\n  # info CND.lime   'cmp_partial  ', \"----------------------\"\n  # info CND.lime   'cmp_partial  ', \"[ 1, 0, ],  [ 1, -1, ]\", VNR.cmp_partial [ 1, 0, ],  [ 1, -1, ]\n  # info CND.lime   'cmp_partial  ', \"[ 1, 0, ],  [ 1,  0, ]\", VNR.cmp_partial [ 1, 0, ],  [ 1,  0, ]\n  # info CND.lime   'cmp_partial  ', \"[ 1, 0, ],  [ 1, +1, ]\", VNR.cmp_partial [ 1, 0, ],  [ 1, +1, ]\n  # info()\n  info CND.steel  'cmp_fair     ', \"[ 1, ],     [ 1, -1, ]\", HLR.cmp    [ 1, ],     [ 1, -1, ]\n  info CND.steel  'cmp_fair     ', \"[ 1, ],     [ 1,  0, ]\", HLR.cmp    [ 1, ],     [ 1,  0, ]\n  info CND.steel  'cmp_fair     ', \"[ 1, ],     [ 1, +1, ]\", HLR.cmp    [ 1, ],     [ 1, +1, ]\n  info CND.steel  'cmp_fair     ', \"----------------------\"\n  info CND.steel  'cmp_fair     ', \"[ 1, 0, ],  [ 1, -1, ]\", HLR.cmp    [ 1, 0, ],  [ 1, -1, ]\n  info CND.steel  'cmp_fair     ', \"[ 1, 0, ],  [ 1,  0, ]\", HLR.cmp    [ 1, 0, ],  [ 1,  0, ]\n  info CND.steel  'cmp_fair     ', \"[ 1, 0, ],  [ 1, +1, ]\", HLR.cmp    [ 1, 0, ],  [ 1, +1, ]\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"test for stable sort 2\" ] = ( T, done ) ->\n  n         = 1e4\n  m         = Math.floor n / 3\n  ds        = ( [ nr, ( CND.random_integer -m, +m ) ] for nr in [ 1 .. n ])\n  ds.sort ( a, b ) -> a[ 1 ] - b[ 1 ]\n  prv_r     = -Infinity\n  prv_nr    = -Infinity\n  is_stable = true\n  for [ nr, r, ] in ds\n    if r is prv_r\n      is_stable = is_stable and nr > prv_nr\n    prv_r   = r\n    prv_nr  = nr\n  T.ok is_stable\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"HLR._first_nonzero_is_negative()\" ] = ( T, done ) ->\n  HLR = ( require hollerith_path ).HOLLERITH\n  #.........................................................................................................\n  probes_and_matchers = [\n    [[ [3,4,0,0,],        2, ], false, ]\n    [[ [3,4,0,-1,],       2, ], true, ]\n    [[ [3,4,0,-1,0,0,],   2, ], true, ]\n    [[ [3,4,0,1,-1,0,0,], 2, ], false, ]\n    [[ [3,4,0,1,-1,0,0,], 0, ], false, ]\n    [[ [3,4,0,0,],        3, ], false, ]\n    [[ [3,4,0,0,],        4, ], false, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ list, first_idx, ] = probe\n      resolve HLR._first_nonzero_is_negative list, first_idx\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"HLR class and instance attributes\" ] = ( T, done ) ->\n  Hollerith = ( require hollerith_path ).Hollerith\n  HLR       = ( require hollerith_path ).HOLLERITH\n  debug Hollerith.cfg\n  debug HLR.cfg\n  debug Hollerith.C\n  C         = { Hollerith.C... }\n  defaults  = Hollerith.C.defaults\n  delete C.defaults\n  T?.eq C, { sign_delta: 2147483648, u32_width: 4, nr_min: -2147483648, nr_max: 2147483647, }\n  T?.eq defaults, { hlr_constructor_cfg: { vnr_width: 5, validate: true } }\n  done()\n  return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n  # test @[ \"HLR._first_nonzero_is_negative()\" ]\n  # test @[ \"HLR class and instance attributes\" ]\n  # test @[ \"HLR basics\" ]\n  # test @[ \"HLR sort 2\" ]\n  # test @[ \"HLR sort 3\" ]\n  # test @[ \"test for stable sort 2\" ]\n\n\n\n\n"
  ]
}