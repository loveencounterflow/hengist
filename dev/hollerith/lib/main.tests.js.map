{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH/TESTS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n# #...........................................................................................................\n# types                     = require '../types'\n# { isa\n#   validate\n#   type_of }               = types\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  defaults\n  validate }              = types.export()\nhollerith_path            = '../../../apps/hollerith'\n\n\n#-----------------------------------------------------------------------------------------------------------\ntest_basics = ( T, VNR ) ->\n  T.eq ( d = VNR.create()                  ), [ 0, ]\n  T.eq ( d = VNR.create       [ 4, 6, 5, ] ), [ 4, 6, 5, ]\n  T.eq ( d = VNR.deepen       d            ), [ 4, 6, 5, 0, ]\n  T.eq ( d = VNR.deepen       d, 42        ), [ 4, 6, 5, 0, 42, ]\n  T.eq ( d = VNR.advance      d            ), [ 4, 6, 5, 0, 43, ]\n  T.eq ( d = VNR.recede       d            ), [ 4, 6, 5, 0, 42, ]\n  T.ok ( VNR.create   d ) isnt d\n  T.ok ( VNR.deepen   d ) isnt d\n  T.ok ( VNR.advance  d ) isnt d\n  T.ok ( VNR.recede   d ) isnt d\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"HLR basics\" ] = ( T, done ) ->\n  { Hollerith } = require hollerith_path\n  test_basics T, new Hollerith { validate: true, }\n  test_basics T, new Hollerith { validate: false, }\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"HLR encode Infinity\" ] = ( T, done ) ->\n  Hollerith = ( require hollerith_path ).Hollerith\n  HLR       = ( require hollerith_path ).HOLLERITH\n  debug '^28974^', Hollerith.C.u32_nr_max\n  debug '^28974^', Hollerith.C.u32_nr_min\n  debug '^28974^', HLR.encode [ +Infinity, ]\n  debug '^28974^', HLR.encode [ -Infinity, ]\n  T?.eq ( HLR._encode_u32 [ +Infinity, ] ), Buffer.from 'ffffffff80000000800000008000000080000000', 'hex'\n  T?.eq ( HLR._encode_u32 [ -Infinity, ] ), Buffer.from '0000000080000000800000008000000080000000', 'hex'\n  T?.eq ( HLR._encode_bcd [ +Infinity, ] ), '+zzzz,+...0,+...0,+...0,+...0'\n  T?.eq ( HLR._encode_bcd [ -Infinity, ] ), '!zzzz,+...0,+...0,+...0,+...0'\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"HLR sort 2\" ] = ( T, done ) ->\n  matchers = [\n    [ [ 1, 0, -1 ], [ 1 ], [ 1, 0 ], [ 1, 0, 1 ], [ 2, -1 ], [ 2 ], [ 2, 0 ], [ 2, 1 ] ]\n    [ [ 2 ],    [ 2, 0 ], ]\n    [ [ Infinity, -1, ], [ Infinity, ], [ Infinity, 1, ], ]\n    [ [ Infinity, -1, ], [ Infinity, 0, ], [ Infinity, 1, ], ]\n    [ [ 1, ], ]\n    [ [ 1, ], [ 2, ] ]\n    ]\n  HLR       = ( require hollerith_path ).HOLLERITH\n  for matcher in matchers\n    probe   = [ matcher..., ]\n    await T.perform probe, true, null, -> return new Promise ( resolve, reject ) ->\n      # probe   = CND.shuffle probe\n      result  = HLR.sort probe\n      T.ok probe isnt matcher\n      T.ok probe isnt result\n      T.eq result, matcher\n      #.....................................................................................................\n      # debug '^31312^', ( HLR._encode_u32 p for p in probe )\n      # debug '^31312^', ( HLR._encode_u32 m for m in matcher)\n      #.....................................................................................................\n      # debug '^334^', rpr result\n      resolve true\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"HLR sort 3\" ] = ( T, done ) ->\n  HLR       = ( require hollerith_path ).HOLLERITH\n  BCD       = new ( require hollerith_path ).Hollerith { format: 'bcd', }\n  #.........................................................................................................\n  cmp_bcd = ( a, b ) ->\n    return  0 if a == b\n    return +1 if a > b\n    return -1\n  #.........................................................................................................\n  info CND.grey   'cmp        ', \"----------------------\"\n  info CND.steel  'cmp        ', \"[ 1, ],     [ 1, -1, ]\", HLR.cmp    [ 1, ],     [ 1, -1, ]\n  info CND.steel  'cmp        ', \"[ 1, ],     [ 1,  0, ]\", HLR.cmp    [ 1, ],     [ 1,  0, ]\n  info CND.steel  'cmp        ', \"[ 1, ],     [ 1, +1, ]\", HLR.cmp    [ 1, ],     [ 1, +1, ]\n  info CND.steel  'cmp        ', \"----------------------\"\n  info CND.steel  'cmp        ', \"[ 1, 0, ],  [ 1, -1, ]\", HLR.cmp    [ 1, 0, ],  [ 1, -1, ]\n  info CND.steel  'cmp        ', \"[ 1, 0, ],  [ 1,  0, ]\", HLR.cmp    [ 1, 0, ],  [ 1,  0, ]\n  info CND.steel  'cmp        ', \"[ 1, 0, ],  [ 1, +1, ]\", HLR.cmp    [ 1, 0, ],  [ 1, +1, ]\n  # #.........................................................................................................\n  # info CND.grey   'cmp2       ', \"----------------------\"\n  # info CND.steel  'cmp2       ', \"[ 1, ],     [ 1, -1, ]\", HLR.cmp2   [ 1, ],     [ 1, -1, ]\n  # info CND.steel  'cmp2       ', \"[ 1, ],     [ 1,  0, ]\", HLR.cmp2   [ 1, ],     [ 1,  0, ]\n  # info CND.steel  'cmp2       ', \"[ 1, ],     [ 1, +1, ]\", HLR.cmp2   [ 1, ],     [ 1, +1, ]\n  # info CND.steel  'cmp2       ', \"----------------------\"\n  # info CND.steel  'cmp2       ', \"[ 1, 0, ],  [ 1, -1, ]\", HLR.cmp2   [ 1, 0, ],  [ 1, -1, ]\n  # info CND.steel  'cmp2       ', \"[ 1, 0, ],  [ 1,  0, ]\", HLR.cmp2   [ 1, 0, ],  [ 1,  0, ]\n  # info CND.steel  'cmp2       ', \"[ 1, 0, ],  [ 1, +1, ]\", HLR.cmp2   [ 1, 0, ],  [ 1, +1, ]\n  #.........................................................................................................\n  info CND.grey   'cmp_blobs  ', \"----------------------\"\n  info CND.steel  'cmp_blobs  ', \"[ 1, ],     [ 1, -1, ]\", HLR.cmp ( HLR.encode [ 1, ] ),    ( HLR.encode [ 1, -1, ] )\n  info CND.steel  'cmp_blobs  ', \"[ 1, ],     [ 1,  0, ]\", HLR.cmp ( HLR.encode [ 1, ] ),    ( HLR.encode [ 1,  0, ] )\n  info CND.steel  'cmp_blobs  ', \"[ 1, ],     [ 1, +1, ]\", HLR.cmp ( HLR.encode [ 1, ] ),    ( HLR.encode [ 1, +1, ] )\n  info CND.steel  'cmp_blobs  ', \"----------------------\"\n  info CND.steel  'cmp_blobs  ', \"[ 1, 0, ],  [ 1, -1, ]\", HLR.cmp ( HLR.encode [ 1, 0, ] ), ( HLR.encode [ 1, -1, ] )\n  info CND.steel  'cmp_blobs  ', \"[ 1, 0, ],  [ 1,  0, ]\", HLR.cmp ( HLR.encode [ 1, 0, ] ), ( HLR.encode [ 1,  0, ] )\n  info CND.steel  'cmp_blobs  ', \"[ 1, 0, ],  [ 1, +1, ]\", HLR.cmp ( HLR.encode [ 1, 0, ] ), ( HLR.encode [ 1, +1, ] )\n  #.........................................................................................................\n  info CND.grey   'cmp bcd    ', \"----------------------\"\n  info CND.steel  'cmp bcd    ', \"[ 1, ],     [ 1, -1, ]\", cmp_bcd ( BCD.encode [ 1, ] ),    ( BCD.encode [ 1, -1, ] )\n  info CND.steel  'cmp bcd    ', \"[ 1, ],     [ 1,  0, ]\", cmp_bcd ( BCD.encode [ 1, ] ),    ( BCD.encode [ 1,  0, ] )\n  info CND.steel  'cmp bcd    ', \"[ 1, ],     [ 1, +1, ]\", cmp_bcd ( BCD.encode [ 1, ] ),    ( BCD.encode [ 1, +1, ] )\n  info CND.steel  'cmp bcd    ', \"----------------------\"\n  info CND.steel  'cmp bcd    ', \"[ 1, 0, ],  [ 1, -1, ]\", cmp_bcd ( BCD.encode [ 1, 0, ] ), ( BCD.encode [ 1, -1, ] )\n  info CND.steel  'cmp bcd    ', \"[ 1, 0, ],  [ 1,  0, ]\", cmp_bcd ( BCD.encode [ 1, 0, ] ), ( BCD.encode [ 1,  0, ] )\n  info CND.steel  'cmp bcd    ', \"[ 1, 0, ],  [ 1, +1, ]\", cmp_bcd ( BCD.encode [ 1, 0, ] ), ( BCD.encode [ 1, +1, ] )\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ [ 1, ],     [ 1, -1, ], ],  +1, ]\n    [ [ [ 1, ],     [ 1,  0, ], ],  0, ]\n    [ [ [ 1, ],     [ 1, +1, ], ],  -1, ]\n    [ [ [ 1, 0, ],  [ 1, -1, ], ],  +1, ]\n    [ [ [ 1, 0, ],  [ 1,  0, ], ],  0, ]\n    [ [ [ 1, 0, ],  [ 1, +1, ], ],  -1, ]\n    ]\n  #.........................................................................................................\n  compare = ( description, a, b, a_blob, b_blob, r1, r2 ) ->\n    return null if equals r1, r2\n    warn \"^34234^ when comparing\"\n    warn description\n    warn \"using\"\n    warn a\n    warn b\n    warn a_blob\n    warn b_blob\n    warn \"r1\", r1\n    warn \"r1\", r2\n    warn \"didn't test equal\"\n    T?.fail \"comparison failed\"\n  #.........................................................................................................\n  for [ probe, matcher, ] in probes_and_matchers\n    await T.perform probe, matcher, null, -> return new Promise ( resolve, reject ) ->\n      [ a, b, ] = probe\n      a_blob    = HLR.encode a\n      b_blob    = HLR.encode b\n      result_1  = HLR.cmp       a, b\n      result_1r = HLR.cmp       b, a\n      result_2  = HLR.cmp_blobs a_blob, b_blob\n      result_2r = HLR.cmp_blobs b_blob, a_blob\n      compare \"result_1,  -result_1r\", a, b, a_blob, b_blob, result_1,  -result_1r\n      compare \"result_2,  -result_2r\", a, b, a_blob, b_blob, result_2,  -result_2r\n      compare \"result_1,   result_2 \", a, b, a_blob, b_blob, result_1,   result_2\n      compare \"result_1r,  result_2r\", a, b, a_blob, b_blob, result_1r,  result_2r\n      # T.eq result, matcher\n      # debug '^334^', { a, b, result_1, result_1r, result_2, result_2r, }\n      resolve result_1\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"test for stable sort\" ] = ( T, done ) ->\n  n         = 1e4\n  m         = Math.floor n / 3\n  ds        = ( [ nr, ( CND.random_integer -m, +m ) ] for nr in [ 1 .. n ])\n  ds.sort ( a, b ) -> a[ 1 ] - b[ 1 ]\n  prv_r     = -Infinity\n  prv_nr    = -Infinity\n  is_stable = true\n  for [ nr, r, ] in ds\n    if r is prv_r\n      is_stable = is_stable and nr > prv_nr\n    prv_r   = r\n    prv_nr  = nr\n  T.ok is_stable\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"HLR class and instance attributes\" ] = ( T, done ) ->\n  Hollerith = ( require hollerith_path ).Hollerith\n  HLR       = ( require hollerith_path ).HOLLERITH\n  debug Hollerith.cfg\n  debug HLR.cfg\n  debug Hollerith.C\n  C         = { Hollerith.C... }\n  defaults  = Hollerith.C.defaults\n  delete C.defaults\n  T?.eq C, {\n    u32_sign_delta:   2147483648\n    u32_width:        4\n    u32_nr_min:       -2147483648\n    u32_nr_max:       2147483647\n    bcd_dpe:          4\n    bcd_base:         36\n    bcd_plus:         '+'\n    bcd_minus:        '!'\n    bcd_padder:       '.'\n    bcd_nr_max:       1679615\n    bcd_nr_min: -1679615 }\n  T?.eq defaults, { hlr_constructor_cfg: { vnr_width: 5, validate: false, format: 'u32' } }\n  done()\n  return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n  # test @[ \"HLR encode Infinity\" ]\n  # test @[ \"HLR class and instance attributes\" ]\n  # test @[ \"HLR basics\" ]\n  # test @[ \"HLR sort 2\" ]\n  # test @[ \"HLR sort 3\" ]\n  # test @[ \"test for stable sort 2\" ]\n\n\n\n\n"
  ]
}