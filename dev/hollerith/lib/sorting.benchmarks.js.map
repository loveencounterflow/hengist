{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sorting.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'IN-MEMORY-SQL'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\ngcfg                      = { verbose: false, }\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  defaults\n  validate }              = types.export()\n{ lets\n  freeze }                = require 'letsfreezethat'\n#-----------------------------------------------------------------------------------------------------------\n{ HOLLERITH\n  Hollerith }             = require '../../../apps/hollerith'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  whisper \"retrieving test data...\"\n  integer_lists = []\n  list_lengths  = DATA.get_integers cfg.list_count, cfg.list_length_min, cfg.list_length_max\n  #.........................................................................................................\n  for list_length in list_lengths\n    # integer_lists.push DATA.get_integers list_length, HOLLERITH.nr_min, HOLLERITH.nr_max\n    integer_lists.push DATA.get_integers list_length, -100, +100\n  #.........................................................................................................\n  data_cache  = { integer_lists, }\n  data_cache  = freeze data_cache\n  whisper \"...done\"\n  return data_cache\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@_hollerith2 = ( cfg, hlr ) -> new Promise ( resolve ) =>\n  { integer_lists, }  = @get_data cfg\n  HLR                 = new Hollerith hlr\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    x = HLR.sort integer_lists\n    if cfg.show\n      whisper '^234-3^', integer_lists\n      urge    '^234-3^', x\n    count += integer_lists.length\n    resolve count\n  return null\n@hollerith2_nv_sort   = ( cfg ) -> @_hollerith2 cfg, { validate: false, }\n\n#-----------------------------------------------------------------------------------------------------------\n@hollerith2_nv_bcd = ( cfg ) -> new Promise ( resolve ) =>\n  { integer_lists, }  = @get_data cfg\n  HLR                 = new Hollerith { validate: false, format: 'bcd', }\n  integer_lists_bcd   = ( HLR.encode d for d in integer_lists )\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    x = integer_lists_bcd.sort()\n    if cfg.show\n      whisper '^234-3^', integer_lists\n      urge    '^234-3^', x\n    count += integer_lists.length\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@hollerith2_nv_u32 = ( cfg ) -> new Promise ( resolve ) =>\n  { integer_lists, }  = @get_data cfg\n  HLR                 = new Hollerith { validate: false, format: 'u32', }\n  integer_lists_bcd   = ( HLR.encode d for d in integer_lists )\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    x = integer_lists_bcd.sort HLR.cmp_blobs\n    if cfg.show\n      whisper '^234-3^', integer_lists\n      urge    '^234-3^', x\n    count += integer_lists.length\n    resolve count\n  return null\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  gcfg.verbose    = true\n  gcfg.verbose    = false\n  bench           = BM.new_benchmarks()\n  mode            = 'medium'\n  mode            = 'functional_test'\n  mode            = 'standard'\n  list_length_max = Hollerith.C.defaults.hlr_constructor_cfg.vnr_width\n  switch mode\n    when 'standard'\n      cfg           = { list_count: 3e5, list_length_min: 1, list_length_max, }\n      repetitions   = 5\n    when 'medium'\n      cfg           = { list_count: 3e4, list_length_min: 1, list_length_max, }\n      repetitions   = 3\n    when 'functional_test'\n      cfg           = { list_count: 3, list_length_min: 1, list_length_max, }\n      repetitions   = 1\n  cfg.show      = cfg.list_count < 10\n  test_names    = [\n    'hollerith2_nv_sort'\n    'hollerith2_nv_bcd'\n    'hollerith2_nv_u32'\n    ]\n  global.gc() if global.gc?\n  data_cache = null\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      global.gc() if global.gc?\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n  # debug '^787^', type_of CHARWISE.encode 'helo world'\n  # debug '^787^', type_of CHARWISE.encode [ 4, 5, 6, ]\n  # debug '^787^', rpr CHARWISE.buffer\n  # debug '^787^', type_of BYTEWISE.encode 'helo world'\n  # debug '^787^', type_of BYTEWISE.encode [ 4, 5, 6, ]\n\n\n\n"
  ]
}