{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/recorder.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/INTERMATIC/RECORDER'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nlog                       = urge\n#...........................................................................................................\ntest                      = require 'guy-test'\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  declare\n  type_of }               = types.export()\n{ freeze\n  lets }                  = require 'letsfreezethat'\n\n\n#-----------------------------------------------------------------------------------------------------------\n# declare\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\nclass Recorder\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( fsm ) ->\n    # validate.fsm fsm\n    @fsm = fsm\n    debug '^3334^', @fsm.triggers\n    tnames = Object.keys @fsm.triggers\n    debug '^3334^', tnames\n    debug '^3334^', @fsm.lstates\n    debug '^3334^', @fsm.fsm_names\n    @_compile_handlers()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_handlers: ->\n    # @_compile_trigger_handlers()\n    @_compile_state_handlers()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_state_handlers: ->\n    entry_point = 'enter'\n    target      = @fsm[ entry_point ]\n    xxx_show    = ( s, P... ) -> debug '^27776^', s\n    ### TAINT where/when to call so we get a line to represent state at recorder initialization? ###\n    xxx_show { $key: '???', to: @fsm.lstate, }\n    for lstate in @fsm.lstates\n      if ( original_handler = target[ lstate ] )?\n        handler = ( s, P... ) ->\n          original_handler s, P...\n          xxx_show s, P...\n      else\n        handler = ( s, P... ) ->\n          xxx_show s, P...\n      target[ lstate ] = handler.bind @fsm\n    return null\n\n\n############################################################################################################\nmodule.exports = Recorder\n\n\n\n############################################################################################################\nif module is require.main then do =>\n\n\n\n\n\n"
  ]
}