{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-toolbox.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,UAAA,EAAA,IAAA,EAAA,QAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,eAAA,EAAA,cAAA,EAAA,aAAA,EAAA,YAAA,EAAA,aAAA,EAAA,eAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,GAAA,GAA4B,KAd5B;;;EAgBA,IAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,EAGE,OAHF,CAAA,GAG4B,KAAK,CAAC,MAAN,CAAA,CAH5B;;EAIA,CAAA,CAAE,MAAF,EACE,IADF,CAAA,GAC4B,OAAA,CAAQ,gBAAR,CAD5B;;EAEA,UAAA,GAA4B,OAAA,CAAQ,0BAAR;;EAC5B,QAAA,GAA4B,OAAA,CAAQ,YAAR,EA1B5B;;;;;EAgCA,OAAA,CAAQ,oBAAR,EAA8B;IAAA,KAAA,EAC5B;MAAA,gBAAA,EAAkB,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT;IAAlB;EAD4B,CAA9B,EAhCA;;;;;EAuCA,YAAA,GAAe,QAAA,CAAA,CAAA;AACf,QAAA,QAAA,EAAA;IAAE,MAAA,GAAY;IACZ,QAAA,GAAY,QAAA,CAAA,GAAE,CAAF,CAAA;AACd,UAAA;MAAI,CAAA,GAAO,CAAC,CAAC,MAAF,KAAY,CAAf,GAAsB,CAAC,CAAE,CAAF,CAAvB,GAAkC;MACtC,OAAA,CAAQ,QAAR,EAAkB,GAAA,CAAI,CAAJ,CAAlB;aACA,MAAM,CAAC,IAAP,CAAY,CAAZ;IAHU;AAIZ,WAAO,CAAE,MAAF,EAAU,QAAV;EANM,EAvCf;;;EAgDA,KAAA,GAAQ,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAAc,QAAA;IAAC,CAAA,GAAI,CAAC,CAAE,IAAF;IAAU,OAAO,CAAC,CAAE,IAAF;AAAU,WAAO;EAAvD,EAhDR;;;;;EAsDA,eAAA,GAAkB,QAAA,CAAE,GAAF,CAAA;AAClB,QAAA,CAAA,EAAA,QAAA;;;;MAEE,MAAY,CAAA;;IACZ,QAAA,GACE;MAAA,QAAA,EAAU,CACR,CAAE,MAAF,EAAc,OAAd,EAA0B,UAA1B,CADQ,EAER,CAAE,GAAF,EAAc,MAAd,EAA0B,MAA1B,CAFQ,EAGR,CAAE,UAAF,EAAc,OAAd,EAA0B,SAA1B,CAHQ,EAIR,CAAE,SAAF,EAAc,SAAd,EAA0B,UAA1B,CAJQ,CAAV;MAKA,OAAA,EACE;QAAA,MAAA,EAAQ,CAAE,UAAF,EAAc,SAAd;MAAR;IANF,EAJJ;;IAYE,CAAA,GAAI,CAAE,GAAA,QAAF,EAAe,GAAA,GAAf;IACJ,IAAoD,oBAApD;MAAA,CAAC,CAAC,QAAF,GAAa,CAAE,GAAA,GAAG,CAAC,QAAN,EAAmB,GAAA,CAAC,CAAC,QAArB,EAAb;;AACA,WAAO;EAfS,EAtDlB;;;EAwEA,cAAA,GAAiB,QAAA,CAAE,GAAF,CAAA;AACjB,QAAA,CAAA,EAAA,MAAA,EAAA,QAAA;;;;MAEE,MAAY,CAAA;;IACZ,QAAA,GACE;MAAA,QAAA,EAAU,CACR,CAAE,MAAF,EAAY,OAAZ,EAAwB,IAAxB,CADQ,EAER,CAAE,GAAF,EAAY,MAAZ,EAAwB,MAAxB,CAFQ;IAAV,EAJJ;;IAQE,CAAA,GAA8B,CAAE,GAAA,QAAF,EAAe,GAAA,GAAf;IAC9B,MAAA,GAA8B,KAAA,CAAM,CAAN,EAAS,QAAT;IAC9B,CAAC,CAAC,QAAQ,CAAE,CAAF,CAAK,CAAE,CAAF,CAAf,GAA8B,MAAM,CAAE,CAAF;IACpC,qBAAE,CAAC,CAAC,UAAF,CAAC,CAAC,UAAW,CAAA,CAAf,CAAmB,CAAC,MAApB,GAA8B;IAC9B,IAAqE,oBAArE;MAAA,CAAC,CAAC,QAAF,GAA8B,CAAE,GAAA,GAAG,CAAC,QAAN,EAAmB,GAAA,CAAC,CAAC,QAArB,EAA9B;;AACA,WAAO;EAdQ,EAxEjB;;;EAyFA,aAAA,GAAgB,QAAA,CAAE,GAAF,CAAA;AAChB,QAAA,CAAA,EAAA,QAAA,EAAA,KAAA;;;;MAEE,MAAY,CAAA;;IACZ,QAAA,GACE;MAAA,QAAA,EAAU,CACR,CAAE,MAAF,EAAY,OAAZ,EAAwB,IAAxB,CADQ,EAER,CAAE,GAAF,EAAY,MAAZ,EAAwB,MAAxB,CAFQ;IAAV,EAJJ;;IAQE,CAAA,GAA8B,CAAE,GAAA,QAAF,EAAe,GAAA,GAAf;IAC9B,KAAA,GAA8B,KAAA,CAAM,CAAN,EAAS,OAAT;IAC9B,CAAC,CAAC,QAAQ,CAAE,CAAF,CAAK,CAAE,CAAF,CAAf,GAA8B,KAAK,CAAE,CAAF;IACnC,qBAAE,CAAC,CAAC,UAAF,CAAC,CAAC,UAAW,CAAA,CAAf,CAAmB,CAAC,MAApB,GAA8B;IAC9B,IAAqE,oBAArE;MAAA,CAAC,CAAC,QAAF,GAA8B,CAAE,GAAA,GAAG,CAAC,QAAN,EAAmB,GAAA,CAAC,CAAC,QAArB,EAA9B;;AACA,WAAO;EAdO,EAzFhB;;;EA0GA,aAAA,GAAgB,QAAA,CAAE,GAAF,CAAA;AAChB,QAAA,CAAA,EAAA,QAAA;;;;MAEE,MAAY,CAAA;;IACZ,QAAA,GACE;MAAA,QAAA,EAAU,CACR,CAAE,MAAF,EAAU,OAAV,EAAsB,MAAtB,CADQ,EAER,CAAE,GAAF,EAAU,MAAV,EAAsB,MAAtB,CAFQ,EAGR,CAAE,MAAF,EAAU,SAAV,EAAsB,KAAtB,CAHQ,EAIR,CAAE,KAAF,EAAU,UAAV,EAAsB,MAAtB,CAJQ,CAAV;MAMA,OAAA,EACE;QAAA,MAAA,EAAQ,CAAE,MAAF,EAAU,KAAV;MAAR;IAPF;IAQF,CAAA,GAAc,CAAE,GAAA,QAAF,EAAe,GAAA,GAAf;IACd,IAAqD,oBAArD;MAAA,CAAC,CAAC,QAAF,GAAc,CAAE,GAAA,GAAG,CAAC,QAAN,EAAmB,GAAA,CAAC,CAAC,QAArB,EAAd;;AACA,WAAO;EAfO,EA1GhB;;;EA4HA,eAAA,GAAkB,QAAA,CAAA,CAAA;AAClB,QAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA;IAAE,CAAA,CAAE,MAAF,EACE,QADF,CAAA,GACkB,YAAA,CAAA,CADlB,EAAF;;IAGE,QAAA,GAAW,eAAA,CACT;MAAA,IAAA,EAAM,GAAN;MACA,KAAA,EACE;QAAA,OAAA,EAAU,QAAA,CAAE,CAAF,CAAA;iBACR,IAAA,CAAK,CAAA,CAAA,CAAG,IAAC,CAAA,EAAE,CAAC,IAAP,CAAA,CAAA,CAAA,CAAe,IAAC,CAAA,IAAhB,CAAA,CAAA,CAAA,CAAwB,IAAC,CAAA,MAAzB,CAAA,CAAL,EAAwC,GAAG,CAAC,MAAJ,CAAY,IAAZ,CAAxC;QADQ,CAAV;;QAGA,QAAA,EAAU,QAAA,CAAE,CAAF,CAAA;iBACR,IAAA,CAAK,CAAA,CAAA,CAAG,IAAC,CAAA,EAAE,CAAC,IAAP,CAAA,CAAA,CAAA,CAAe,IAAC,CAAA,IAAhB,CAAA,CAAA,CAAA,CAAwB,IAAC,CAAA,MAAzB,CAAA,CAAL,EAAwC,GAAG,CAAC,MAAJ,CAAY,mBAAZ,CAAxC;QADQ;MAHV;IAFF,CADS,EAHb;;;;;;;;IAkBE,QAAA,GAAW,eAAA,CACT;MAAA,IAAA,EAAM,GAAN;MACA,KAAA,EACE;QAAA,OAAA,EAAS,QAAA,CAAE,CAAF,CAAA;UACP,QAAA,CAAS,6BAAT,EAAwC,CAAxC,EAAR;;UAEQ,IAAC,CAAA,KAAK,CAAC,KAAK,CAAC,MAAb,CAAA;iBACA,IAAC,CAAA,IAAI,CAAC,KAAK,CAAC,MAAZ,CAAA;QAJO;MAAT,CAFF;;;;;;;;;;;;;;;MAqBA,KAAA,EAAO,QAAA,CAAA,CAAA;QACL,IAAC,CAAA,KAAD,CAAA;eACA,IAAC,CAAA,OAAD,CAAA;MAFK,CArBP;;MAyBA,IAAA,EAEE,CAAA;;QAAA,KAAA,EAAO,cAAA,CACL;UAAA,IAAA,EAAM,GAAN;UACA,MAAA,EAAQ,CAAE,KAAF,EAAS,OAAT;QADR,CADK,CAAP;;;;;;;;QAUA,IAAA,EAAM,aAAA,CACJ;UAAA,IAAA,EAAM,GAAN;UACA,KAAA,EAAO,CAAE,MAAF,EAAU,IAAV;QADP,CADI,CAVN;;;;;;;;QAoBA,IAAA,EAAM,aAAA,CACJ;UAAA,IAAA,EAAM;QAAN,CADI;MApBN;IA3BF,CADS,EAlBb;;;;;;;;;;IA6EE,IAAA,GACE;MAAA,IAAA,EAAM,SAAN;MACA,QAAA,EAAU,CACR,CAAE,MAAF,EAAc,OAAd,EAAwB,SAAxB,CADQ,EAER,CAAE,SAAF,EAAc,MAAd,EAAwB,SAAxB,CAFQ,CADV;MAKA,MAAA,EACE;QAAA,KAAA,EAAO,QAAA,CAAE,CAAF,CAAA,EAAA;;iBAEL,IAAC,CAAA,IAAI,CAAC,OAAN,CAAc,QAAA,CAAE,OAAF,CAAA;mBAAe,OAAO,CAAC,KAAR,CAAA;UAAf,CAAd;QAFK,CAAP;QAGA,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA,EAAA;;iBAEJ,IAAC,CAAA,IAAI,CAAC,OAAN,CAAc,QAAA,CAAE,OAAF,CAAA;mBAAe,OAAO,CAAC,IAAR,CAAA;UAAf,CAAd;QAFI;MAHN,CANF;MAYA,KAAA,EACE;QAAA,KAAA,EAAO,QAAA,CAAE,CAAF,CAAA,EAAA,CAAP;;QAEA,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA,EAAA;MAFN,CAbF;;MAiBA,IAAA,EAAM,CAAE,QAAF,EAAY,QAAZ;IAjBN,EA9EJ;;AAkGE,WAAO,IAAI,UAAJ,CAAe,IAAf;EAnGS,EA5HlB;;;;;EAoOA,IAAA,GAAO,QAAA,CAAA,CAAA;AACP,QAAA,GAAA,EAAA,CAAA,EAAA;IAAE,GAAA,GAAY,eAAA,CAAA;IACZ,QAAA,GAAY,IAAI,QAAJ,CAAa,GAAb,EADd;;IAGE,IAAA,CAAK,QAAL,EAAe,CAAA,IAAA,CAAA,CAAO,GAAA,CAAI,GAAG,CAAC,QAAQ,CAAC,IAAjB,CAAP,CAAA,cAAA,CAAA,CAA6C;;AAAE;AAAA;MAAA,KAAA,qCAAA;;qBAAA,GAAA,CAAI,CAAJ;MAAA,CAAA;;QAAF,CAAyC,CAAC,IAA1C,CAA+C,IAA/C,CAA7C,CAAA,CAAf;IACA,IAAA,CAAK,aAAL;IAAsC,GAAG,CAAC,KAAJ,CAAA;IACtC,IAAA,CAAK,8BAAL;IAAsC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAlB,CAAA,EALxC;;;;;;;;;;;;;AAkBE,WAAO;EAnBF,EApOP;;;EA0PA,MAAA,GAAS,QAAA,CAAA,CAAA;AACT,QAAA,GAAA,EAAA,IAAA,EAAA;IAAE,IAAA,GACE;MAAA,IAAA,EAAM,QAAN;MACA,QAAA,EAAU,CACR,CAAE,MAAF,EAAU,OAAV,EAAmB,OAAnB,CADQ,CADV;MAGA,OAAA,EACE;QAAA,IAAA,EAAM,CAAE,OAAF,EAAW,QAAX,EAAqB,OAArB;MAAN,CAJF;MAKA,MAAA,EACE;QAAA,GAAA,EAAQ,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAA,CAAK,CAAA,EAAA,CAAA,CAAK,IAAC,CAAA,IAAN,CAAA,CAAA,CAAA,CAAc,CAAC,CAAC,GAAhB,CAAA,CAAL;QAAT,CAAR;QACA,KAAA,EAAQ,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAC,CAAA,IAAI,CAAC,KAAN,CAAA;QAAT;MADR,CANF;MAQA,KAAA,EACE;QAAA,GAAA,EAAK,QAAA,CAAE,CAAF,CAAA;iBAAS,OAAA,CAAQ,IAAC,CAAA,MAAT;QAAT;MAAL,CATF;MAUA,KAAA,EACE;QAAA,MAAA,EAAQ,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAC,CAAA,IAAI,CAAC,MAAN,CAAA;QAAT;MAAR,CAXF;MAYA,IAAA,EAEE,CAAA;;QAAA,IAAA,EACE;UAAA,QAAA,EAAU,CACR,CAAE,MAAF,EAAU,OAAV,EAAmB,IAAnB,CADQ,CAAV;UAEA,OAAA,EACE;YAAA,MAAA,EAAQ,CAAE,IAAF,EAAQ,KAAR;UAAR,CAHF;UAIA,KAAA,EACE;YAAA,EAAA,EAAQ,QAAA,CAAE,CAAF,CAAA;qBAAS,IAAC,CAAA,OAAO,CAAC,IAAT,CAAA;YAAT;UAAR,CALF;UAKmC,6BACnC,MAAA,EACE;YAAA,KAAA,EAAQ,QAAA,CAAE,CAAF,CAAA;qBAAS,IAAC,CAAA,OAAO,CAAC,KAAT,CAAA;YAAT,CAAR;YACA,GAAA,EAAQ,QAAA,CAAE,CAAF,CAAA;qBAAS,IAAA,CAAK,CAAA,CAAA,CAAG,IAAC,CAAA,IAAJ,CAAA,CAAA,CAAA,CAAY,CAAC,CAAC,GAAd,CAAA,CAAL;YAAT;UADR,CAPF;;UAUA,IAAA,EACE;YAAA,OAAA,EACE;cAAA,UAAA,EAAY,CAAZ;cACA,QAAA,EAAU,CACR,CAAE,MAAF,EAAU,OAAV,EAAmB,QAAnB,CADQ,CADV;cAGA,OAAA,EACE;gBAAA,IAAA,EAAM,CAAE,QAAF;cAAN,CAJF;cAKA,IAAA,EACE;gBAAA,MAAA,EAAQ,QAAA,CAAE,CAAF,CAAA;kBACN,KAAA,CAAM,IAAN;yBACA,IAAC,CAAA,UAAD;gBAFM;cAAR;YANF;UADF;QAXF;MADF;IAdF,EADJ;;IAsCE,GAAA,GAAY,IAAI,UAAJ,CAAe,IAAf;IACZ,QAAA,GAAY,IAAI,QAAJ,CAAa,GAAb;IACZ,GAAG,CAAC,KAAJ,CAAA;IACA,GAAG,CAAC,IAAJ,CAAA;IACA,GAAG,CAAC,IAAJ,CAAA;IACA,GAAG,CAAC,IAAJ,CAAA;IACA,GAAG,CAAC,IAAJ,CAAA;IACA,GAAG,CAAC,IAAJ,CAAA;AACA,WAAO;EA/CA,EA1PT;;;EA8SA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,KAAA,CAAA,CAAA,GAAA;MAChC,MAAM,IAAA,CAAA;aACN,CAAA,MAAM,MAAA,CAAA,CAAN;IAFgC,CAAA,IAAlC;;AA9SA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/INTERMATIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nlog                       = urge\n#...........................................................................................................\ntest                      = require 'guy-test'\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  declare\n  type_of }               = types.export()\n{ freeze\n  lets }                  = require 'letsfreezethat'\nIntermatic                = require '../../../apps/intermatic'\nRecorder                  = require './recorder'\n\n\n#===========================================================================================================\n# TYPES\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'toolbox_button_cfg', tests:\n  \"x is an object\": ( x ) -> @isa.object x\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\nnew_register = ->\n  result    = []\n  register  = ( P... ) ->\n    x = if P.length is 1 then P[ 0 ] else P\n    whisper '^2321^', rpr x\n    result.push x\n  return { result, register, }\n\n#-----------------------------------------------------------------------------------------------------------\npluck = ( d, name ) -> R = d[ name ]; delete d[ name ]; return R\n\n\n#===========================================================================================================\n# FACTORIES\n#-----------------------------------------------------------------------------------------------------------\nnew_button_fsmd = ( cfg ) ->\n  # validate.toolbox_button_cfg cfg\n  #.........................................................................................................\n  cfg      ?= {}\n  defaults  =\n    triggers: [\n      [ 'void',     'start',    'released',   ]\n      [ '*',        'stop',     'void',       ]\n      [ 'released', 'press',    'pressed',    ]\n      [ 'pressed',  'release',  'released',   ] ]\n    cyclers:\n      toggle: [ 'released', 'pressed', ]\n  #.........................................................................................................\n  R = { defaults..., cfg..., }\n  R.triggers = [ cfg.triggers..., R.triggers..., ] if cfg.triggers?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nnew_color_fsmd = ( cfg ) ->\n  # validate.toolbox_button_cfg cfg\n  #.........................................................................................................\n  cfg      ?= {}\n  defaults  =\n    triggers: [\n      [ 'void',   'start',    null,   ]\n      [ '*',      'stop',     'void', ] ]\n  #.........................................................................................................\n  R                           = { defaults..., cfg..., }\n  colors                      = pluck R, 'colors'\n  R.triggers[ 0 ][ 2 ]        = colors[ 0 ]\n  ( R.cyclers ?= {} ).toggle  = colors\n  R.triggers                  = [ cfg.triggers..., R.triggers..., ] if cfg.triggers?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nnew_text_fsmd = ( cfg ) ->\n  # validate.toolbox_button_cfg cfg\n  #.........................................................................................................\n  cfg      ?= {}\n  defaults  =\n    triggers: [\n      [ 'void',   'start',    null,   ]\n      [ '*',      'stop',     'void', ] ]\n  #.........................................................................................................\n  R                           = { defaults..., cfg..., }\n  texts                       = pluck R, 'texts'\n  R.triggers[ 0 ][ 2 ]        = texts[ 0 ]\n  ( R.cyclers ?= {} ).toggle  = texts\n  R.triggers                  = [ cfg.triggers..., R.triggers..., ] if cfg.triggers?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nnew_lamp_fsmd = ( cfg ) ->\n  # validate.toolbox_button_cfg cfg\n  #.........................................................................................................\n  cfg      ?= {}\n  defaults  =\n    triggers: [\n      [ 'void', 'start',    'dark', ]\n      [ '*',    'stop',     'void', ]\n      [ 'dark', 'turn_on',  'lit',  ]\n      [ 'lit',  'turn_off', 'dark', ]\n      ]\n    cyclers:\n      toggle: [ 'dark', 'lit', ]\n  R           = { defaults..., cfg..., }\n  R.triggers  = [ cfg.triggers..., R.triggers..., ] if cfg.triggers?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nnew_toolbox_fsm = ->\n  { result\n    register }    = new_register()\n  #---------------------------------------------------------------------------------------------------------\n  main_btn = new_button_fsmd\n    goto: '*'\n    enter:\n      pressed:  ( s ) ->\n        echo \"#{@up.name}.#{@name}:#{@lstate}\", CND.yellow  '🔒'\n        # @up.meta_btn.lamp.tryto.turn_on()\n      released: ( s ) ->\n        echo \"#{@up.name}.#{@name}:#{@lstate}\", CND.yellow  '🔓💡🔅🔆❌⏻⏼⏽✓✅⤴⤵⏺'\n        # @up.meta_btn.lamp.tryto.turn_off()\n    # before:\n    #   change: ( s ) -> register '<fsm.main_btn.before.change', s\n    # after:\n    #   change: ( s ) -> register '>fsm.main_btn.after.change', s\n\n  #---------------------------------------------------------------------------------------------------------\n  meta_btn = new_button_fsmd\n    goto: '*'\n    enter:\n      pressed: ( s ) ->\n        register '<fsm.meta_btn.enter.pressed', s\n        # debug '^333443^', @color.can.toggle(), @text.can.toggle()\n        @color.tryto.toggle()\n        @text.tryto.toggle()\n    # before:\n    #   change: ( s ) ->\n    #     echo \"#{@up.name}.#{@name}:#{@lstate}\", CND.white CND.reverse \"[#{@lstate}]\"\n    #     register '<fsm.meta_btn.before.change', s\n    #   start: ( s ) ->\n    #     register '<fsm.meta_btn.before.start', s\n    #     @fsms.forEach ( sub_fsm ) -> sub_fsm.start()\n    #   stop: ( s ) ->\n    #     register '<fsm.meta_btn.before.stop', s\n    #     @fsms.forEach ( sub_fsm ) -> sub_fsm.stop()\n    # after:\n    #   change: ( s ) -> register '>fsm.meta_btn.after.change', s\n    #   start:  ( s ) -> register '>fsm.meta_btn.after.start', s\n    #   stop:   ( s ) -> register '>fsm.meta_btn.after.stop', s\n    click: ->\n      @press()\n      @release()\n    #.......................................................................................................\n    fsms:\n      #.....................................................................................................\n      color: new_color_fsmd\n        goto: '*'\n        colors: [ 'red', 'green', ]\n        # before:\n        #   change: ( s ) ->\n        #     register '<fsm.meta_btn.color.before.change', s\n        #     echo \"#{@up.name}.#{@name}:#{@lstate}\", ( CND[ @lstate ] ? CND.grey )  '██'\n        # after:\n        #   change: ( s ) -> register '>fsm.meta_btn.color.after.change', s\n      #.....................................................................................................\n      text: new_text_fsmd\n        goto: '*'\n        texts: [ 'wait', 'go', ]\n        # before:\n        #   change: ( s ) ->\n        #     register '<fsm.meta_btn.text.before.change', s\n        #     echo \"#{@up.name}.#{@name}:#{@lstate}\", CND.white CND.reverse \"[#{@lstate}]\"\n        # after:\n        #   change: ( s ) -> register '>fsm.meta_btn.text.after.change', s\n      #.....................................................................................................\n      lamp: new_lamp_fsmd\n        goto: '*'\n        # enter:\n        #   lit:    ( s ) -> echo \"#{@up.name}.#{@name}:#{@lstate}\", CND.yellow  '██'\n        #   dark:   ( s ) -> echo \"#{@up.name}.#{@name}:#{@lstate}\", CND.grey    '██'\n        # before:\n        #   change: ( s ) -> register '<fsm.meta_btn.lamp.before.change', s\n        # after:\n        #   change: ( s ) -> register '>fsm.meta_btn.lamp.after.change', s\n\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'toolbox'\n    triggers: [\n      [ 'void',     'start',  'running', ]\n      [ 'running',  'stop',   'stopped', ]\n      ]\n    before:\n      start: ( s ) ->\n        # register '<fsm.before.start', s\n        @fsms.forEach ( sub_fsm ) -> sub_fsm.start()\n      stop: ( s ) ->\n        # register '<fsm.before.stop', s\n        @fsms.forEach ( sub_fsm ) -> sub_fsm.stop()\n    after:\n      start: ( s ) ->\n        # register '>fsm.after.start', s\n      stop: ( s ) ->\n        # register '>fsm.after.stop', s\n    fsms: { meta_btn, main_btn, }\n\n  #---------------------------------------------------------------------------------------------------------\n  return new Intermatic fsmd\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  fsm       = new_toolbox_fsm()\n  recorder  = new Recorder fsm\n  # echo '^33376^', ( require 'util' ).inspect fsm\n  urge '^3334^', \"FSM #{rpr fsm.meta_btn.name} has sub-FSMs #{( rpr n for n in fsm.meta_btn.fsm_names ).join ', '}\"\n  info 'fsm.start()';                   fsm.start()\n  info 'fsm.main_btn.goto.released()';  fsm.main_btn.goto.released()\n  # info 'fsm.meta_btn.press()    ------'; fsm.meta_btn.press()\n  # info 'fsm.meta_btn.release()  ------'; fsm.meta_btn.release()\n  # info 'fsm.meta_btn.click()    ------'; fsm.meta_btn.click()\n  # info 'fsm.meta_btn.click()    ------'; fsm.meta_btn.click()\n  # # fsm.meta_btn.goto.void()\n  # info 'fsm.main_btn.press()    ------'; fsm.main_btn.press()\n  # info 'fsm.main_btn.release()  ------'; fsm.main_btn.release()\n  # info 'fsm.stop()              ------'; fsm.stop()\n  # info '^33378^', fsm.fsm_names\n  # info '^33378^', fsm.meta_btn.fsm_names\n  # fsm.fsms.forEach ( sub_fsm ) -> debug '^2327^', sub_fsm\n  #---------------------------------------------------------------------------------------------------------\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_2 = ->\n  fsmd =\n    name: 'simple'\n    triggers: [\n      [ 'void', 'start', 'first' ] ]\n    cyclers:\n      step: [ 'first', 'second', 'third', ]\n    before:\n      any:    ( s ) -> urge \"█ #{@path}:#{s.via}\"\n      start:  ( s ) -> @lamp.start()\n    after:\n      any: ( s ) -> whisper @cstate\n    enter:\n      second: ( s ) -> @lamp.toggle()\n    fsms:\n      #.....................................................................................................\n      lamp:\n        triggers: [\n          [ 'void', 'start', 'on' ] ]\n        cyclers:\n          toggle: [ 'on', 'off', ]\n        enter:\n          on:     ( s ) -> @counter.tick() ### TAINT totally contrived ###\n        before:\n          start:  ( s ) -> @counter.start()\n          any:    ( s ) -> urge \"#{@path}:#{s.via}\"\n        #...................................................................................................\n        fsms:\n          counter:\n            _XXX_count: 0\n            triggers: [\n              [ 'void', 'start', 'active' ] ]\n            cyclers:\n              tick: [ 'active', ]\n            stay:\n              active: ( s ) ->\n                debug @\n                @_XXX_count++\n  #.........................................................................................................\n  fsm       = new Intermatic fsmd\n  recorder  = new Recorder fsm\n  fsm.start()\n  fsm.step()\n  fsm.step()\n  fsm.step()\n  fsm.step()\n  fsm.step()\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  await demo()\n  await demo_2()\n\n\n\n\n"
  ]
}