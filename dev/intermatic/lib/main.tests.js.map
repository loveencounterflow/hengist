{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/INTERMATIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nlog                       = urge\n#...........................................................................................................\ntest                      = require 'guy-test'\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  declare\n  equals\n  type_of }               = types.export()\n{ freeze\n  lets }                  = require 'letsfreezethat'\n\n\n#-----------------------------------------------------------------------------------------------------------\n# declare\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\nnew_register = ->\n  result      = []\n  register    = ( P... ) ->\n    x = if P.length is 1 then P[ 0 ] else P\n    whisper '^2321^', P...\n    result.push x\n  show_result = ->\n    R = [\n      '  T.eq result, [ '\n      ( ( '    ' + rpr d ) for d in result )...\n      ]\n    echo ( R.join '\\n' ) + ' ]'\n    return null\n  return { result, register, show_result, }\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"___ Intermatic attribute freezing\" ] = ( T, done ) ->\n  d = Object.freeze { foo: 42, }\n  e = {}\n  for pname, propd of Object.getOwnPropertyDescriptors d\n    Object.defineProperty e, pname, propd\n  e.foo = d.foo\n  #d.foo++\n  e.foo++\n  debug d\n  debug e\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic empty FSM\" ] = ( T, done ) ->\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  fsm             = new Intermatic {}\n  T.eq fsm.triggers, { start: { void: 'void' } }\n  T.eq fsm.start(), null\n  T.eq fsm.lstate,   'void'\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic before.start(), after.start()\" ] = ( T, done ) ->\n  { result\n    register }    = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    before:\n      start: -> register \"before start\"\n    after:\n      start: -> register \"after start\"\n  #---------------------------------------------------------------------------------------------------------\n  Intermatic._tid = 0\n  fsm = new Intermatic fsmd\n  T.eq fsm.start(), null\n  T.eq fsm.lstate,  'void'\n  T.eq result,      [ 'before start', 'after start' ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic basics\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'meta_lamp'\n    triggers: [\n      [ 'void',   'start',  'lit',  ]\n      [ '*',      'reset',  'void', ]\n      [ 'lit',    'toggle', 'dark', ]\n      [ 'dark',   'toggle', 'lit',  ]\n      # [ 'void',   'toggle', 'lit',  ]\n      ]\n    after:\n      change:     -> register \"after change\", @cstate\n    enter:\n      dark:       -> register \"enter dark\", @cstate\n    leave:\n      lit:        -> register \"leave lit\", @cstate\n    fail:         -> register \"failed\", @cstate\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register }    = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  fsm             = new Intermatic fsmd\n  info '^44455^', JSON.stringify fsm.triggers, null, 2\n  T.eq fsm.triggers,\n    \"start\":\n      \"void\": \"lit\"\n    \"toggle\":\n      \"lit\": \"dark\",\n      \"dark\": \"lit\"\n    \"reset\":\n      \"void\": \"void\",\n      \"lit\": \"void\",\n      \"dark\": \"void\"\n  fsm.start()\n  fsm.toggle()\n  fsm.reset()\n  fsm.toggle()\n  # fsm.goto 'lit'\n  # fsm.goto 'lit'\n  # fsm.goto 'dark'\n  echo result\n  T.eq result, [\n    [ 'after change', { lstate: 'lit', path: 'meta_lamp', verb: 'start', dpar: 'void', dest: 'lit', changed: true } ],\n    [ 'leave lit', { lstate: 'lit', path: 'meta_lamp', verb: 'toggle', dpar: 'lit', dest: 'dark', changed: true } ],\n    [ 'enter dark', { lstate: 'dark', path: 'meta_lamp', verb: 'toggle', dpar: 'lit', dest: 'dark', changed: true } ],\n    [ 'after change', { lstate: 'dark', path: 'meta_lamp', verb: 'toggle', dpar: 'lit', dest: 'dark', changed: true } ],\n    [ 'after change', { lstate: 'void', path: 'meta_lamp', verb: 'reset', dpar: 'dark', dest: 'void', changed: true } ],\n    [ 'failed', { lstate: 'void', path: 'meta_lamp', verb: 'toggle', dpar: 'void', failed: true, } ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic history\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'meta_lamp'\n    triggers: [\n      [ 'void',     'start',  'lit',  ]\n      [ '*',        'reset',  'void', ]\n      [ '*',        'flash',  'flashing', ]\n      [ 'flashing', 'toggle', 'dark', ]\n      [ 'lit',      'toggle', 'dark', ]\n      [ 'dark',     'toggle', 'lit',  ]\n      ]\n    after:\n      change:     ( P... ) -> register @history\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register }        = new_register()\n  Intermatic          = require '../../../apps/intermatic'\n  Intermatic._tid     = 0\n  fsm                 = new Intermatic fsmd\n  fsm.history_length  = 3\n  fsm.start()\n  fsm.toggle()\n  fsm.toggle()\n  fsm.flash()\n  fsm.toggle()\n  T.eq result, [\n    [ { verb: 'start', dpar: 'void', dest: 'lit' } ],\n    [ { verb: 'start', dpar: 'void', dest: 'lit' }, { verb: 'toggle', dpar: 'lit', dest: 'dark' } ],\n    [ { verb: 'start', dpar: 'void', dest: 'lit' }, { verb: 'toggle', dpar: 'lit', dest: 'dark' }, { verb: 'toggle', dpar: 'dark', dest: 'lit' } ],\n    [ { verb: 'toggle', dpar: 'lit', dest: 'dark' }, { verb: 'toggle', dpar: 'dark', dest: 'lit' }, { verb: 'flash', dpar: 'lit', dest: 'flashing' } ],\n    [ { verb: 'toggle', dpar: 'dark', dest: 'lit' }, { verb: 'flash', dpar: 'lit', dest: 'flashing' }, { verb: 'toggle', dpar: 'flashing', dest: 'dark' } ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic cancel moves\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'boiler'\n    # cascades:\n    #   # start: '*' ### TAINT all FSMs in tree? all sibling FSMs? parent FSMs? ###\n    #   start: [ 'heater', ]\n    before:\n      start: ( P... ) -> @heater.start P...\n    after:\n      change:     ( P... ) -> register @cstate\n    fsms:\n      heater:\n        data: { temparature: 20, }\n        triggers: [\n          [ 'void',     'start',      'idle',     ]\n          [ 'heating',  'switch_off', 'idle',     ]\n          [ 'idle',     'switch_on',  'heating',  ] ]\n        # after:\n        #   change: ( P... ) -> @up.\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register }        = new_register()\n  Intermatic          = require '../../../apps/intermatic'\n  Intermatic._tid     = 0\n  boiler                 = new Intermatic fsmd\n  boiler.start()\n  boiler.heater.switch_on()\n  # boiler.thermo.\n  # T.eq result,\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic goto 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'meta_lamp'\n    triggers: [\n      [ 'void',   'start', 'lit',   ]\n      [ '*',      'reset', 'void',  ]\n      [ 'lit',    'toggle', 'dark', ]\n      [ 'dark',   'toggle', 'lit',  ]\n      # [ 'void',   'toggle', 'lit',  ]\n      ]\n    before:\n      any:        ( P... ) -> register 'before.any',  @cstate, P\n    # after:\n    #   change:     ( P... ) -> register 'after.change',  @cstate\n    # enter:\n    #   dark:       ( P... ) -> register 'enter.dark',    @cstate\n    #   lit:        ( P... ) -> register 'enter.lit',     @cstate\n    goto:         '*'\n    fail:         ( P... ) -> register 'failed',        @cstate, P\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register\n    show_result } = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  fsm             = new Intermatic fsmd\n  # T.eq ( Object.keys fsm ),  [ 'reserved', 'fsmd', 'triggers', 'fsm_names', 'has_subfsms', '_lstate', 'before', 'enter', 'stay', 'leave', 'after', 'up', 'starts_with', 'start', 'toggle', 'reset', 'goto', 'name', 'fail' ]\n  fsm.start         'M1'\n  fsm.toggle        'M2'\n  fsm.goto 'lit',   'M3'\n  fsm.goto.lit      'M4'\n  fsm.goto 'dark',  'M5'\n  fsm.toggle        'M6'\n  fsm.toggle        'M7'\n  fsm.toggle        'M8'\n  show_result()\n  T.eq result, [\n    [ 'before.any', { path: 'meta_lamp', lstate: 'void', verb: 'start', dpar: 'void', dest: 'lit', changed: true }, [ 'M1' ] ]\n    [ 'before.any', { path: 'meta_lamp', lstate: 'lit', verb: 'toggle', dpar: 'lit', dest: 'dark', changed: true }, [ 'M2' ] ]\n    [ 'before.any', { path: 'meta_lamp', lstate: 'dark', verb: 'goto', dpar: 'dark', dest: 'lit', changed: true }, [ 'M3' ] ]\n    [ 'before.any', { path: 'meta_lamp', lstate: 'lit', verb: 'goto', dpar: 'lit', dest: 'lit' }, [ 'M4' ] ]\n    [ 'before.any', { path: 'meta_lamp', lstate: 'lit', verb: 'goto', dpar: 'lit', dest: 'dark', changed: true }, [ 'M5' ] ]\n    [ 'before.any', { path: 'meta_lamp', lstate: 'dark', verb: 'toggle', dpar: 'dark', dest: 'lit', changed: true }, [ 'M6' ] ]\n    [ 'before.any', { path: 'meta_lamp', lstate: 'lit', verb: 'toggle', dpar: 'lit', dest: 'dark', changed: true }, [ 'M7' ] ]\n    [ 'before.any', { path: 'meta_lamp', lstate: 'dark', verb: 'toggle', dpar: 'dark', dest: 'lit', changed: true }, [ 'M8' ] ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic cyclers 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'switch'\n    triggers: [\n      [ 'void', 'start', 'off', ]\n      ]\n    cyclers:\n      toggle: [ 'on', 'off', ]\n      step:   [ 'bar', 'baz', 'gnu', 'doe', ]\n    goto: '*'\n    after:\n      change:     ( ref ) -> register @cstate, ref\n    fail:         ( ref ) -> register @cstate, ref\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register\n    show_result } = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  fsm             = new Intermatic fsmd\n  fsm.start       'X1'\n  fsm.toggle      'X2'\n  fsm.toggle      'X3'\n  fsm.step        'X4'\n  fsm.goto 'doe', 'X5'\n  fsm.step        'X6'\n  fsm.step        'X7'\n  fsm.step        'X8'\n  fsm.step        'X9'\n  fsm.step        'X10'\n  show_result()\n  T.eq result, [\n    [ { path: 'switch', lstate: 'off', verb: 'start', dpar: 'void', dest: 'off', changed: true }, 'X1' ]\n    [ { path: 'switch', lstate: 'on', verb: 'toggle', dpar: 'off', dest: 'on', changed: true }, 'X2' ]\n    [ { path: 'switch', lstate: 'off', verb: 'toggle', dpar: 'on', dest: 'off', changed: true }, 'X3' ]\n    [ { path: 'switch', lstate: 'off', verb: 'step', dpar: 'off', failed: true }, 'X4' ]\n    [ { path: 'switch', lstate: 'doe', verb: 'goto', dpar: 'off', dest: 'doe', changed: true }, 'X5' ]\n    [ { path: 'switch', lstate: 'bar', verb: 'step', dpar: 'doe', dest: 'bar', changed: true }, 'X6' ]\n    [ { path: 'switch', lstate: 'baz', verb: 'step', dpar: 'bar', dest: 'baz', changed: true }, 'X7' ]\n    [ { path: 'switch', lstate: 'gnu', verb: 'step', dpar: 'baz', dest: 'gnu', changed: true }, 'X8' ]\n    [ { path: 'switch', lstate: 'doe', verb: 'step', dpar: 'gnu', dest: 'doe', changed: true }, 'X9' ]\n    [ { path: 'switch', lstate: 'bar', verb: 'step', dpar: 'doe', dest: 'bar', changed: true }, 'X10' ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic data attribute 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'simple'\n    data:\n      counter: 42\n    triggers: [\n      [ 'void', 'start', 'first' ] ]\n    cyclers:\n      step: [ 'first', 'second', ]\n    before:\n      start: ( P... ) -> @sub.start()\n    enter:\n      first: ( P... ) ->\n        T.ok @data.counter?\n        @data.counter++\n        info @data.counter\n        register @cstate\n      second: ( P... ) ->\n        @sub.toggle()\n        register @cstate\n    fsms:\n      sub:\n        data:\n          frobs: 0\n        triggers: [\n          [ 'void', 'start', 'dub' ] ]\n        cyclers:\n          toggle: [ 'dub', 'frob' ]\n        leave:\n          frob: ( P... ) ->\n            @data.frobs++\n            help @data.frobs\n  { result\n    register }    = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  fsm             = new Intermatic fsmd\n  T.eq fsm.data, { counter: 42, }\n  fsm.start();  urge fsm.cstate, fsm.data.counter, fsm.sub.data.frobs\n  fsm.step();   urge fsm.cstate, fsm.data.counter, fsm.sub.data.frobs\n  fsm.step();   urge fsm.cstate, fsm.data.counter, fsm.sub.data.frobs\n  fsm.step();   urge fsm.cstate, fsm.data.counter, fsm.sub.data.frobs\n  # fsm.step();   urge fsm.cstate, fsm.data.counter, fsm.sub.data.frobs\n  # fsm.step();   urge fsm.cstate, fsm.data.counter, fsm.sub.data.frobs\n  info d for d in result\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic catchalls 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'knob'\n    triggers: [\n      [ 'void', 'start', 'bar', ]\n      ]\n    cyclers:\n      step:   [ 'bar', 'baz', 'gnu', 'doe', ]\n    goto: '*'\n    before: any: ( ref ) -> register 'before any',  @lstate, @verb, ref\n    enter:  any: ( ref ) -> register 'enter any',   @lstate, @verb, ref\n    stay:   any: ( ref ) -> register 'stay any',    @lstate, @verb, ref\n    leave:  any: ( ref ) -> register 'leave any',   @lstate, @verb, ref\n    after:  any: ( ref ) -> register 'after any',   @lstate, @verb, ref\n    fail:        ( ref ) -> register 'fail',        @lstate, @verb, ref\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register\n    show_result } = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  fsm             = new Intermatic fsmd\n  info \"fsm.start()     ———\";           fsm.start             'A1'\n  info \"fsm.step()      ———\";           fsm.step              'A2'\n  info \"fsm.goto.#{fsm.lstate}()  ———\"; fsm.goto fsm.lstate,  'A3'\n  show_result()\n  T.eq result, [\n    [ 'before any', 'void', 'start', 'A1' ]\n    [ 'leave any', 'void', 'start', 'A1' ]\n    [ 'enter any', 'bar', 'start', 'A1' ]\n    [ 'after any', 'bar', 'start', 'A1' ]\n    [ 'before any', 'bar', 'step', 'A2' ]\n    [ 'leave any', 'bar', 'step', 'A2' ]\n    [ 'enter any', 'baz', 'step', 'A2' ]\n    [ 'after any', 'baz', 'step', 'A2' ]\n    [ 'before any', 'baz', 'goto', 'A3' ]\n    [ 'stay any', 'baz', 'goto', 'A3' ]\n    [ 'after any', 'baz', 'goto', 'A3' ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic observables during moves 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'knob'\n    triggers: [\n      [ 'void', 'start', 'bar', ]\n      ]\n    cyclers:\n      step:   [ 'bar', 'baz', 'gnu', 'doe', ]\n    goto: '*'\n    before: any: ( P... ) -> register 'before any',  fsm.cstate\n    # enter:  any: ( P... ) -> register 'enter any',   fsm.cstate\n    # stay:   any: ( P... ) -> register 'stay any',    fsm.cstate\n    # leave:  any: ( P... ) -> register 'leave any',   fsm.cstate\n    # after:  any: ( P... ) -> register 'after any',   fsm.cstate\n    fail:        ( P... ) -> register 'fail',        fsm.cstate\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register\n    show_result } = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  fsm             = new Intermatic fsmd\n  register 'first', fsm.cstate\n  info \"fsm.start()     ———\"; fsm.start()\n  register 'mid1', fsm.cstate\n  info \"fsm.step()      ———\"; fsm.step()\n  info \"fsm.goto.#{fsm.lstate}()  ———\"; fsm.goto fsm.lstate\n  register 'last', fsm.cstate\n  show_result()\n  T.eq result, [\n    [ 'first', { path: 'knob', lstate: 'void' } ]\n    [ 'before any', { path: 'knob', lstate: 'void', verb: 'start', dpar: 'void', dest: 'bar', changed: true } ]\n    [ 'mid1', { path: 'knob', lstate: 'bar' } ]\n    [ 'before any', { path: 'knob', lstate: 'bar', verb: 'step', dpar: 'bar', dest: 'baz', changed: true } ]\n    [ 'before any', { path: 'knob', lstate: 'baz', verb: 'goto', dpar: 'baz', dest: 'baz' } ]\n    [ 'last', { path: 'knob', lstate: 'baz' } ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic tryto 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'oneway_switch'\n    triggers: [\n      [ 'void', 'start',  'off', ]\n      [ 'off',  'toggle', 'on', ]\n      ]\n    after:\n      change:     ( P... ) -> register \"success: #{@dpar}>-#{@verb}->#{@dest}\"\n    fail:         ( P... ) -> register \"failure: #{@dpar}>-#{@verb}->?\"\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register\n    show_result } = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  fsm             = new Intermatic fsmd\n  fsm.start()\n  T.eq true,  fsm.can.toggle()\n  T.eq true,  fsm.tryto.toggle()\n  T.eq false, fsm.can   'toggle'\n  T.eq false, fsm.tryto 'toggle'\n  T.throws /unknown trigger \"nonexisting_trigger\"/, -> fsm.can 'nonexisting_trigger'\n  show_result()\n  T.eq result, [ 'success: void>-start->off', 'success: off>-toggle->on' ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic tryto 2\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'oneway_switch'\n    triggers: [\n      [ 'void', 'start',  'one', ]\n      ]\n    cyclers:\n      step: [ 'one', 'two', 'three', ]\n    after:\n      change:     ( P... ) -> register @cstate\n      # step:       ( P... ) -> @step()\n    fail:         ( P... ) -> register @cstate\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register\n    show_result } = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  fsm             = new Intermatic fsmd\n  eq = ( ref, test, outcome ) ->\n    if isa.function test\n      ref  += ' ' + test.toString().replace /\\n/g, ' '\n      test  = test()\n    if equals test, outcome then T.ok true\n    else                T.fail \"test #{rpr ref} failed\"\n  debug ( k for k of CND ).sort()\n  eq '^tt2@1',  ( -> fsm.lstate           ), 'void'\n  eq '^tt2@2',  ( -> fsm.triggers.start   ), { void: 'one', }\n  eq '^tt2@3',  ( -> fsm.can.start()      ), true\n  eq '^tt2@4',  ( -> fsm.can 'start'      ), true\n  eq '^tt2@5',  ( -> fsm.start()          ), null               # one\n  eq '^tt2@6',  ( -> fsm.lstate           ), 'one'\n  eq '^tt2@7',  ( -> fsm.can.start()      ), false\n  eq '^tt2@8',  ( -> fsm.can 'start'      ), false\n  eq '^tt2@9',  ( -> fsm.step()           ), null               # two\n  eq '^tt2@10', ( -> fsm.tryto.step()     ), true               # three\n  eq '^tt2@11', ( -> fsm.step()           ), null               # one\n  eq '^tt2@12', ( -> fsm.tryto.step()     ), true               # two\n  eq '^tt2@13', ( -> fsm.tryto.start()    ), false\n  show_result()\n  T.eq result, [\n    { path: 'oneway_switch', lstate: 'one', verb: 'start', dpar: 'void', dest: 'one', changed: true }\n    { path: 'oneway_switch', lstate: 'two', verb: 'step', dpar: 'one', dest: 'two', changed: true }\n    { path: 'oneway_switch', lstate: 'three', verb: 'step', dpar: 'two', dest: 'three', changed: true }\n    { path: 'oneway_switch', lstate: 'one', verb: 'step', dpar: 'three', dest: 'one', changed: true }\n    { path: 'oneway_switch', lstate: 'two', verb: 'step', dpar: 'one', dest: 'two', changed: true } ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic cFsm 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    #.......................................................................................................\n    triggers: [\n      [ 'void',     'start',    'released',   ]\n      [ '*',        'reset',    'void',       ]\n      [ 'released', 'press',    'pressed',    ]\n      [ 'pressed',  'release',  'released',   ] ]\n    enter:\n      pressed:  ( P... ) -> @lamp.goto 'lit';   register \"button: enter pressed\", @lstate\n      released: ( P... ) -> @lamp.goto 'dark';  register \"button: enter released\", @lstate\n    stay:\n      pressed:  ( P... ) -> register \"button: stay pressed\", @lstate\n      released: ( P... ) -> register \"button: stay released\", @lstate\n    after:\n      start: ( P... ) -> @lamp.start()\n    before:\n      trigger: ( P... ) -> register \"button: before *\", @lstate\n    goto: '*'\n    #.......................................................................................................\n    fsms:\n      #.....................................................................................................\n      lamp:\n        triggers: [\n          [ 'void',   'start',  'lit',  ]\n          [ 'lit',    'toggle', 'dark', ]\n          [ 'dark',   'toggle', 'lit',  ] ]\n        after:\n          change:     ( P... ) -> register \"lamp: after change\", @lstate\n        enter:\n          dark:       ( P... ) -> @up.goto 'released';  register \"lamp: enter dark\", @lstate\n          lit:        ( P... ) -> @up.goto 'pressed';   register \"lamp: enter lit\", @lstate\n        stay:\n          dark:       ( P... ) -> register \"lamp: stay dark\", @lstate\n          lit:        ( P... ) -> register \"lamp: stay lit\", @lstate\n        before:\n          trigger: ( P... ) -> register \"lamp: before *\", @lstate\n        goto: '*'\n        bar:  108\n    #.......................................................................................................\n    after:\n      change: ( P... ) -> register \"root_fsm.change\", @lstate\n    foo: 42\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register\n    show_result } = new_register()\n  #---------------------------------------------------------------------------------------------------------\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  button          = new Intermatic fsmd\n  T.eq button.foo,         42\n  T.eq button.lamp.bar, 108\n  info button.triggers\n  info { button: { $value: button.lstate, lamp: button.lamp.lstate, }, }\n  urge { button: button.lstate, 'button/lamp': button.lamp.lstate, }\n  urge { button: button.lstate, button_lamp: button.lamp.lstate, }\n  urge { root: button.lstate, lamp: button.lamp.lstate, }\n  help [ \"°button:^#{button.lstate}\", \"°button/lamp:^#{button.lamp.lstate}\", ]\n  button.start()\n  info { button: { $value: button.lstate, lamp: button.lamp.lstate, }, }\n  urge { button: button.lstate, 'button/lamp': button.lamp.lstate, }\n  urge { button: button.lstate, button_lamp: button.lamp.lstate, }\n  urge { root: button.lstate, lamp: button.lamp.lstate, }\n  help [ \"°button:^#{button.lstate}\", \"°button/lamp:^#{button.lamp.lstate}\", ]\n  button.press()\n  info { button: { $value: button.lstate, lamp: button.lamp.lstate, }, }\n  urge { button: button.lstate, 'button/lamp': button.lamp.lstate, }\n  urge { button: button.lstate, button_lamp: button.lamp.lstate, }\n  urge { root: button.lstate, lamp: button.lamp.lstate, }\n  help [ \"°button:^#{button.lstate}\", \"°button/lamp:^#{button.lamp.lstate}\", ]\n  show_result()\n  T.eq result, [\n    [ 'button: stay released', 'released' ]\n    [ 'lamp: enter dark', 'dark' ]\n    [ 'lamp: after change', 'dark' ]\n    [ 'button: enter released', 'released' ]\n    [ 'root_fsm.change', 'released' ]\n    [ 'button: stay pressed', 'pressed' ]\n    [ 'lamp: enter lit', 'lit' ]\n    [ 'lamp: after change', 'lit' ]\n    [ 'button: enter pressed', 'pressed' ]\n    [ 'root_fsm.change', 'pressed' ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic cFsm 2\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'cfsm2'\n    fsms:\n      alpha_btn:\n        #.......................................................................................................\n        triggers: [\n          [ 'void',     'start',    'released',   ]\n          [ '*',        'reset',    'void',       ]\n          [ 'released', 'press',    'pressed',    ]\n          [ 'pressed',  'release',  'released',   ] ]\n        # enter:\n        #   pressed:  ( P... ) ->\n        #   released: ( P... ) ->\n        before:\n          start:    ( P... ) -> @lamp.start()\n        after:\n          change:   ( P... ) ->\n            @lamp.toggle()\n            register \"alpha_btn.after.change\", @EXP_cstate\n        #.......................................................................................................\n        fsms:\n          #.....................................................................................................\n          color:\n            triggers: [\n              [ 'red', 'toggle', 'green', ]\n              [ 'green', 'toggle', 'red', ] ]\n            after:\n              change:   ( P... ) -> register \"color.after.change\", @EXP_cstate\n          #.....................................................................................................\n          lamp:\n            triggers: [\n              [ 'void',   'start',  'lit',  ]\n              [ 'lit',    'toggle', 'dark', ]\n              [ 'dark',   'toggle', 'lit',  ] ]\n            before:\n              start:    ( P... ) -> @up.color.start()\n            enter:\n              dark:     ( P... ) -> @up.color.toggle()\n            after:\n              change:   ( P... ) -> register \"lamp.after.change\", @EXP_cstate\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register\n    show_result } = new_register()\n  #---------------------------------------------------------------------------------------------------------\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  fsm             = new Intermatic fsmd\n  # debug '^898922^', fsm\n  # debug '^898922^', ( k for k of fsm )\n  whisper '-----------'\n  whisper 'start'\n  fsm.alpha_btn.start()\n  whisper '-----------'\n  whisper 'press'\n  fsm.alpha_btn.press()\n  whisper '-----------'\n  whisper 'release'\n  fsm.alpha_btn.release()\n  whisper '-----------'\n  whisper 'press'\n  fsm.alpha_btn.press()\n  whisper '-----------'\n  whisper 'release'\n  fsm.alpha_btn.release()\n  whisper '-----------'\n  show_result()\n  T.eq result, [\n    [ 'color.after.change', { lstate: 'green' } ]\n    [ 'lamp.after.change', { lstate: 'lit' } ]\n    [ 'color.after.change', { lstate: 'red' } ]\n    [ 'lamp.after.change', { lstate: 'dark' } ]\n    [ 'alpha_btn.after.change', { lstate: 'released', color: { lstate: 'red' }, lamp: { lstate: 'dark' } } ]\n    [ 'lamp.after.change', { lstate: 'lit' } ]\n    [ 'alpha_btn.after.change', { lstate: 'pressed', color: { lstate: 'red' }, lamp: { lstate: 'lit' } } ]\n    [ 'color.after.change', { lstate: 'green' } ]\n    [ 'lamp.after.change', { lstate: 'dark' } ]\n    [ 'alpha_btn.after.change', { lstate: 'released', color: { lstate: 'green' }, lamp: { lstate: 'dark' } } ]\n    [ 'lamp.after.change', { lstate: 'lit' } ]\n    [ 'alpha_btn.after.change', { lstate: 'pressed', color: { lstate: 'green' }, lamp: { lstate: 'lit' } } ]\n    [ 'color.after.change', { lstate: 'red' } ]\n    [ 'lamp.after.change', { lstate: 'dark' } ]\n    [ 'alpha_btn.after.change', { lstate: 'released', color: { lstate: 'red' }, lamp: { lstate: 'dark' } } ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n\n############################################################################################################\nif module is require.main then do =>\n  # @demo_2()\n  # @toolbox_demo()\n  # test @\n  # test @[ \"Intermatic observables during moves 1\" ]\n  # test @[ \"Intermatic catchalls 1\" ]\n  # test @[ \"Intermatic cyclers 1\" ]\n  # test @[ \"Intermatic goto 1\" ]\n  # test @[ \"Intermatic cancel moves\" ]\n  # test @[ \"Intermatic history\" ]\n  # test @[ \"Intermatic data attribute 1\" ]\n  # @[ \"Intermatic data attribute 1\" ]()\n  # test @[ \"Intermatic attribute freezing\" ]\n  # test @[ \"Intermatic toolbox\" ]\n  # test @[ \"Intermatic tryto 1\" ]\n  # test @[ \"Intermatic tryto 2\" ]\n  # test @[ \"Intermatic cFsm 1\" ]\n  test @[ \"Intermatic cFsm 2\" ]\n  # test @[ \"Intermatic cFsm\" ]\n  # test @[ \"Intermatic empty FSM\" ]\n  # test @[ \"Intermatic before.start(), after.start()\" ]\n  # @[ \"Intermatic empty FSM\" ]()\n\n\n\n"
  ]
}