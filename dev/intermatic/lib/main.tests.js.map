{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/INTERMATIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nlog                       = urge\n#...........................................................................................................\ntest                      = require 'guy-test'\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  declare\n  equals\n  type_of }               = types.export()\n{ freeze\n  lets }                  = require 'letsfreezethat'\n\n\n#-----------------------------------------------------------------------------------------------------------\n# declare\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\nnew_register = ->\n  result      = []\n  register    = ( P... ) ->\n    x = if P.length is 1 then P[ 0 ] else P\n    whisper '^2321^', P...\n    result.push x\n  show_result = ->\n    R = [\n      '  T.eq result, [ '\n      ( ( '    ' + rpr d ) for d in result )...\n      ]\n    echo ( R.join '\\n' ) + ' ]'\n    return null\n  return { result, register, show_result, }\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"___ Intermatic attribute freezing\" ] = ( T, done ) ->\n  d = Object.freeze { foo: 42, }\n  e = {}\n  for pname, propd of Object.getOwnPropertyDescriptors d\n    Object.defineProperty e, pname, propd\n  e.foo = d.foo\n  #d.foo++\n  e.foo++\n  debug d\n  debug e\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic empty FSM\" ] = ( T, done ) ->\n  Intermatic      = require '../../../apps/intermatic'\n  fsm             = new Intermatic {}\n  T.eq fsm.moves,   {}\n  T.eq fsm.start,   undefined\n  T.eq fsm.lstate,  'void'\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic before.start(), after.start()\" ] = ( T, done ) ->\n  { result\n    show_result\n    register }    = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    moves:\n      start: 'void'\n    before:\n      start: -> register \"before start\", @move\n    after:\n      start: -> register \"after start\", @move\n  #---------------------------------------------------------------------------------------------------------\n  fsm = new Intermatic fsmd\n  T.eq fsm.start(), null\n  T.eq fsm.lstate,  'void'\n  show_result()\n  T.eq result, [\n    [ 'before start', { stage: 'before', verb: 'start', dpar: 'void', dest: 'void' } ]\n    [ 'after start', { stage: 'after', verb: 'start', dpar: 'void', dest: 'void' } ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic basics\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'meta_lamp'\n    moves:\n      start:  [ 'void', 'lit',  ]\n      reset:  [ 'any',  'void', ]\n      toggle: [ 'lit',  'dark', 'lit', ]\n    after:\n      change:     -> register \"after change\", @cstate\n    entering:\n      dark:       -> register \"entering dark\", @cstate\n    leaving:\n      lit:        -> register \"leaving lit\", @cstate\n    fail:         -> register \"failed\", @cstate\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    show_result\n    register }    = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  fsm             = new Intermatic fsmd\n  # info '^44455^', JSON.stringify fsm.moves, null, 2\n  T.eq fsm.moves, { start: { void: 'lit' }, reset: { any: 'void' }, toggle: { lit: 'dark', dark: 'lit' } }\n  fsm.start()\n  fsm.toggle()\n  fsm.reset()\n  fsm.toggle()\n  show_result()\n  T.eq result, [\n    [ 'after change', { stage: 'after', verb: 'start', dpar: 'void', dest: 'lit', changed: true, path: 'meta_lamp', lstate: 'lit' } ]\n    [ 'leaving lit', { stage: 'leaving', verb: 'toggle', dpar: 'lit', dest: 'dark', changed: true, path: 'meta_lamp', lstate: 'lit' } ]\n    [ 'entering dark', { stage: 'entering', verb: 'toggle', dpar: 'lit', dest: 'dark', changed: true, path: 'meta_lamp', lstate: 'dark' } ]\n    [ 'after change', { stage: 'after', verb: 'toggle', dpar: 'lit', dest: 'dark', changed: true, path: 'meta_lamp', lstate: 'dark' } ]\n    [ 'after change', { stage: 'after', verb: 'reset', dpar: 'dark', dest: 'void', changed: true, path: 'meta_lamp', lstate: 'void' } ]\n    [ 'failed', { verb: 'toggle', dpar: 'void', failed: true, path: 'meta_lamp', lstate: 'void' } ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic history\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'meta_lamp'\n    moves:\n      start:  'lit'\n      reset:  [ 'any', 'void',     ]\n      flash:  [ 'any', 'flashing', ]\n      toggle: [\n        [ 'lit',      'dark',     'lit',  ]\n        [ 'flashing', 'dark',             ]\n        ]\n    after:\n      change:     ( P... ) -> register @history\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register }        = new_register()\n  Intermatic          = require '../../../apps/intermatic'\n  fsm                 = new Intermatic fsmd\n  fsm.history_length  = 3\n  fsm.start()\n  fsm.toggle()\n  fsm.toggle()\n  fsm.flash()\n  fsm.toggle()\n  T.eq result, [\n    [ { verb: 'start', dpar: 'void', dest: 'lit' } ],\n    [ { verb: 'start', dpar: 'void', dest: 'lit' }, { verb: 'toggle', dpar: 'lit', dest: 'dark' } ],\n    [ { verb: 'start', dpar: 'void', dest: 'lit' }, { verb: 'toggle', dpar: 'lit', dest: 'dark' }, { verb: 'toggle', dpar: 'dark', dest: 'lit' } ],\n    [ { verb: 'toggle', dpar: 'lit', dest: 'dark' }, { verb: 'toggle', dpar: 'dark', dest: 'lit' }, { verb: 'flash', dpar: 'lit', dest: 'flashing' } ],\n    [ { verb: 'toggle', dpar: 'dark', dest: 'lit' }, { verb: 'flash', dpar: 'lit', dest: 'flashing' }, { verb: 'toggle', dpar: 'flashing', dest: 'dark' } ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"__ Intermatic cancel moves\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'boiler'\n    # cascades:\n    #   # start: 'any' ### TAINT all FSMs in tree? all sibling FSMs? parent FSMs? ###\n    #   start: [ 'heater', ]\n    moves:\n      start:  'operating'\n    before:\n      start:  ( P... ) -> @register 'boiler.before.start', @move; @heater.start P...\n    after:\n      change: ( P... ) -> @register 'boiler.after.change', @move\n    fsms:\n      heater:\n        data: { enabled: true, temparature: 20, }\n        moves:\n          start:      [ 'void',     'idle',     ]\n          switch_off: [ 'heating',  'idle',     ]\n          switch_on:  [ 'idle',     'heating',  ]\n        # before:\n        #   any:      -> @register 'heater.before.any', @move, @data\n        entering:\n          heating:  ->\n            if not @data.enabled\n              warn '^3334^', \"heater not enabled; cancelling\"\n              @cancel()\n            debug '^445554^', @lstate\n            debug '^445554^', @move\n            @up.register 'heater.entering.heating', @lstate, @move, @data\n  #---------------------------------------------------------------------------------------------------------\n  Intermatic          = require '../../../apps/intermatic'\n  do =>\n    { result\n      show_result\n      register }        = new_register()\n    boiler = new Intermatic fsmd\n    boiler.register = register\n    boiler.heater.data.enabled = true\n    boiler.start()\n    boiler.heater.switch_on()\n    show_result()\n  do =>\n    { result\n      show_result\n      register }        = new_register()\n    boiler = new Intermatic fsmd\n    boiler.register = register\n    boiler.heater.data.enabled = false\n    boiler.start()\n    boiler.heater.switch_on()\n    show_result()\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic goto 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'meta_lamp'\n    moves:\n      start: 'lit'\n      reset:  [ 'any',  'void',         ]\n      toggle: [ 'lit',  'dark', 'lit',  ]\n    before:\n      any:        ( P... ) -> register 'before.any',  @cstate, P\n    # after:\n    #   change:     ( P... ) -> register 'after.change',  @cstate\n    # entering:\n    #   dark:       ( P... ) -> register 'entering.dark',    @cstate\n    #   lit:        ( P... ) -> register 'entering.lit',     @cstate\n    goto:         'any'\n    fail:         ( P... ) -> register 'failed',        @cstate, P\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register\n    show_result } = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  fsm             = new Intermatic fsmd\n  # T.eq ( Object.keys fsm ),  [ 'reserved', 'fsmd', 'moves', 'fsm_names', 'has_subfsms', '_lstate', 'before', 'entering', 'keeping', 'leaving', 'after', 'up', 'starts_with', 'start', 'toggle', 'reset', 'goto', 'name', 'fail' ]\n  fsm.start         'M1'\n  fsm.toggle        'M2'\n  fsm.goto 'lit',   'M3'\n  fsm.goto.lit      'M4'\n  fsm.goto 'dark',  'M5'\n  fsm.toggle        'M6'\n  fsm.toggle        'M7'\n  fsm.toggle        'M8'\n  show_result()\n  T.eq result, [\n    [ 'before.any', { stage: 'before', verb: 'start', dpar: 'void', dest: 'lit', changed: true, lstate: 'void', path: 'meta_lamp' }, [ 'M1' ] ]\n    [ 'before.any', { stage: 'before', verb: 'toggle', dpar: 'lit', dest: 'dark', changed: true, lstate: 'lit', path: 'meta_lamp' }, [ 'M2' ] ]\n    [ 'before.any', { stage: 'before', verb: 'goto', dpar: 'dark', dest: 'lit', changed: true, lstate: 'dark', path: 'meta_lamp' }, [ 'M3' ] ]\n    [ 'before.any', { stage: 'before', verb: 'goto', dpar: 'lit', dest: 'lit', changed: false, lstate: 'lit', path: 'meta_lamp' }, [ 'M4' ] ]\n    [ 'before.any', { stage: 'before', verb: 'goto', dpar: 'lit', dest: 'dark', changed: true, lstate: 'lit', path: 'meta_lamp' }, [ 'M5' ] ]\n    [ 'before.any', { stage: 'before', verb: 'toggle', dpar: 'dark', dest: 'lit', changed: true, lstate: 'dark', path: 'meta_lamp' }, [ 'M6' ] ]\n    [ 'before.any', { stage: 'before', verb: 'toggle', dpar: 'lit', dest: 'dark', changed: true, lstate: 'lit', path: 'meta_lamp' }, [ 'M7' ] ]\n    [ 'before.any', { stage: 'before', verb: 'toggle', dpar: 'dark', dest: 'lit', changed: true, lstate: 'dark', path: 'meta_lamp' }, [ 'M8' ] ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic data attribute 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'simple'\n    data:\n      counter: 42\n    moves:\n      start:  'first'\n      step:   [ 'first', 'second', 'first', ]\n    before:\n      start: ( P... ) -> @sub.start()\n    entering:\n      first: ( P... ) ->\n        T.ok @data.counter?\n        @data.counter++\n        info @data.counter\n        register @cstate\n      second: ( P... ) ->\n        @sub.toggle()\n        register @cstate\n    fsms:\n      sub:\n        data:\n          frobs: 0\n        moves:\n          start:  'dub'\n          toggle: [ 'dub', 'frob', 'dub', ]\n        leaving:\n          frob: ( P... ) ->\n            @data.frobs++\n            help @data.frobs\n  { result\n    show_result\n    register }    = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  fsm             = new Intermatic fsmd\n  T.eq fsm.data, { counter: 42, }\n  fsm.start();  urge fsm.cstate, fsm.data.counter, fsm.sub.data.frobs\n  fsm.step();   urge fsm.cstate, fsm.data.counter, fsm.sub.data.frobs\n  fsm.step();   urge fsm.cstate, fsm.data.counter, fsm.sub.data.frobs\n  fsm.step();   urge fsm.cstate, fsm.data.counter, fsm.sub.data.frobs\n  # fsm.step();   urge fsm.cstate, fsm.data.counter, fsm.sub.data.frobs\n  # fsm.step();   urge fsm.cstate, fsm.data.counter, fsm.sub.data.frobs\n  show_result()\n  T.eq result, [\n    { stage: 'entering', verb: 'start', dpar: 'void', dest: 'first', changed: true, lstate: 'first', path: 'simple', data: { counter: 43 }, sub: { lstate: 'dub', path: 'simple/sub', data: { frobs: 0 } } }\n    { stage: 'entering', verb: 'step', dpar: 'first', dest: 'second', changed: true, lstate: 'second', path: 'simple', data: { counter: 43 }, sub: { lstate: 'frob', path: 'simple/sub', data: { frobs: 0 } } }\n    { stage: 'entering', verb: 'step', dpar: 'second', dest: 'first', changed: true, lstate: 'first', path: 'simple', data: { counter: 44 }, sub: { lstate: 'frob', path: 'simple/sub', data: { frobs: 0 } } }\n    { stage: 'entering', verb: 'step', dpar: 'first', dest: 'second', changed: true, lstate: 'second', path: 'simple', data: { counter: 44 }, sub: { lstate: 'dub', path: 'simple/sub', data: { frobs: 1 } } } ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic catchalls 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'knob'\n    moves:\n      start:  'bar'\n      step:   [ 'bar', 'baz', 'gnu', 'doe', 'bar', ]\n    goto: 'any'\n    before:\n      any:         ( ref ) -> register 'before.any',    @move, ref\n      change:      ( ref ) -> register 'before.change', @move, ref\n    entering:\n      any:         ( ref ) -> register 'entering.any',  @move, ref\n    keeping:\n      any:         ( ref ) -> register 'keeping.any',   @move, ref\n    leaving:\n      any:         ( ref ) -> register 'leaving.any',   @move, ref\n    after:\n      any:         ( ref ) -> register 'after.any',     @move, ref\n      change:      ( ref ) -> register 'after.change',  @move, ref\n    fail:          ( ref ) -> register 'fail',          @move, ref\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register\n    show_result } = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  fsm             = new Intermatic fsmd\n  info \"fsm.start()     ———\";           fsm.start             'A1'\n  info \"fsm.step()      ———\";           fsm.step              'A2'\n  info \"fsm.goto.#{fsm.lstate}()  ———\"; fsm.goto fsm.lstate,  'A3'\n  show_result()\n  T.eq result, [\n    [ 'before.any',    { stage: 'before',   verb: 'start', dpar: 'void', dest: 'bar', changed: true,  lstate: 'void' }, 'A1' ]\n    [ 'before.change', { stage: 'before',   verb: 'start', dpar: 'void', dest: 'bar', changed: true,  lstate: 'void' }, 'A1' ]\n    [ 'leaving.any',   { stage: 'leaving',  verb: 'start', dpar: 'void', dest: 'bar', changed: true,  lstate: 'void' }, 'A1' ]\n    [ 'entering.any',  { stage: 'entering', verb: 'start', dpar: 'void', dest: 'bar', changed: true,  lstate: 'bar'  }, 'A1' ]\n    [ 'after.any',     { stage: 'after',    verb: 'start', dpar: 'void', dest: 'bar', changed: true,  lstate: 'bar'  }, 'A1' ]\n    [ 'after.change',  { stage: 'after',    verb: 'start', dpar: 'void', dest: 'bar', changed: true,  lstate: 'bar'  }, 'A1' ]\n    [ 'before.any',    { stage: 'before',   verb: 'step',  dpar: 'bar',  dest: 'baz', changed: true,  lstate: 'bar'  }, 'A2' ]\n    [ 'before.change', { stage: 'before',   verb: 'step',  dpar: 'bar',  dest: 'baz', changed: true,  lstate: 'bar'  }, 'A2' ]\n    [ 'leaving.any',   { stage: 'leaving',  verb: 'step',  dpar: 'bar',  dest: 'baz', changed: true,  lstate: 'bar'  }, 'A2' ]\n    [ 'entering.any',  { stage: 'entering', verb: 'step',  dpar: 'bar',  dest: 'baz', changed: true,  lstate: 'baz'  }, 'A2' ]\n    [ 'after.any',     { stage: 'after',    verb: 'step',  dpar: 'bar',  dest: 'baz', changed: true,  lstate: 'baz'  }, 'A2' ]\n    [ 'after.change',  { stage: 'after',    verb: 'step',  dpar: 'bar',  dest: 'baz', changed: true,  lstate: 'baz'  }, 'A2' ]\n    [ 'before.any',    { stage: 'before',   verb: 'goto',  dpar: 'baz',  dest: 'baz', changed: false, lstate: 'baz'  }, 'A3' ]\n    [ 'keeping.any',   { stage: 'keeping',  verb: 'goto',  dpar: 'baz',  dest: 'baz', changed: false, lstate: 'baz'  }, 'A3' ]\n    [ 'after.any',     { stage: 'after',    verb: 'goto',  dpar: 'baz',  dest: 'baz', changed: false, lstate: 'baz'  }, 'A3' ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic observables during moves 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'knob'\n    moves:\n      start:  'bar'\n      step:   [ 'bar', 'baz', 'gnu', 'doe', 'bar', ]\n    goto: 'any'\n    before: any: ( P... ) -> register 'before any',  fsm.move\n    fail:        ( P... ) -> register 'fail',        fsm.move\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register\n    show_result } = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  fsm             = new Intermatic fsmd\n  #.........................................................................................................\n  register 'first', fsm.move\n  info \"fsm.start()\"\n  fsm.start()\n  #.........................................................................................................\n  register 'mid1', fsm.move\n  info \"fsm.step()\"\n  fsm.step()\n  #.........................................................................................................\n  register 'mid2', fsm.move\n  fsm.goto fsm.lstate\n  #.........................................................................................................\n  register 'last', fsm.move\n  #.........................................................................................................\n  show_result()\n  T.eq result, [\n    [ 'first', { lstate: 'void' } ]\n    [ 'before any', { stage: 'before', verb: 'start', dpar: 'void', dest: 'bar', changed: true, lstate: 'void' } ]\n    [ 'mid1', { lstate: 'bar' } ]\n    [ 'before any', { stage: 'before', verb: 'step', dpar: 'bar', dest: 'baz', changed: true, lstate: 'bar' } ]\n    [ 'mid2', { lstate: 'baz' } ]\n    [ 'before any', { stage: 'before', verb: 'goto', dpar: 'baz', dest: 'baz', changed: false, lstate: 'baz' } ]\n    [ 'last', { lstate: 'baz' } ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic can 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'oneway_switch'\n    moves:\n      start:  'off'\n      toggle: [ 'off', 'on', ]\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register\n    show_result } = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  fsm             = new Intermatic fsmd\n  T.eq true,  fsm.can.start()\n  T.eq true,  fsm.can 'start'\n  fsm.start()\n  T.eq false, fsm.can.start()\n  T.eq false, fsm.can 'start'\n  T.eq true,  fsm.can 'toggle'\n  T.eq true,  fsm.can.toggle()\n  fsm.toggle()\n  T.eq false, fsm.can   'toggle'\n  T.eq false, fsm.can.toggle()\n  T.throws /unknown verb \"nonexisting_trigger\"/, -> fsm.can 'nonexisting_trigger'\n  T.throws /unknown verb \"nonexisting_trigger\"/, -> fsm.can.nonexisting_trigger()\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic tryto 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'oneway_switch'\n    moves:\n      start:  'off'\n      toggle: [ 'off', 'on', ]\n    goto: 'any'\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register\n    show_result } = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  fsm             = new Intermatic fsmd\n  T.eq true,  fsm.tryto.start()\n  fsm.goto 'void'\n  T.eq true,  fsm.tryto 'start'\n  T.eq true,  fsm.tryto 'toggle'\n  fsm.goto 'off'\n  T.eq true,  fsm.tryto.toggle()\n  T.eq false, fsm.tryto 'toggle'\n  T.eq false, fsm.tryto.toggle()\n  T.throws /unknown verb \"nonexisting_trigger\"/, -> fsm.tryto 'nonexisting_trigger'\n  T.throws /unknown verb \"nonexisting_trigger\"/, -> fsm.can.nonexisting_trigger()\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic cFsm 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    #.......................................................................................................\n    moves:\n      start:    'released'\n      reset:    [ 'any',       'void',       ]\n      press:    [ 'released',  'pressed',    ]\n      release:  [ 'pressed',   'released',   ]\n    entering:\n      pressed:  ( P... ) -> @lamp.goto 'lit';   register \"button: entering pressed\",  @lstate\n      released: ( P... ) -> @lamp.goto 'dark';  register \"button: entering released\", @lstate\n    keeping:\n      pressed:  ( P... ) -> register \"button: keeping pressed\",  @lstate\n      released: ( P... ) -> register \"button: keeping released\", @lstate\n    after:\n      start: ( P... ) -> @lamp.start()\n    before:\n      trigger: ( P... ) -> register \"button: before *\", @lstate\n    goto: 'any'\n    #.......................................................................................................\n    fsms:\n      #.....................................................................................................\n      lamp:\n        moves:\n          start:    'lit'\n          toggle:   [ 'lit', 'dark', 'lit', ]\n        after:\n          change:     ( P... ) -> register \"lamp: after change\", @lstate\n        entering:\n          dark:       ( P... ) -> @up.goto 'released';  register \"lamp: entering dark\", @lstate\n          lit:        ( P... ) -> @up.goto 'pressed';   register \"lamp: entering lit\", @lstate\n        keeping:\n          dark:       ( P... ) -> register \"lamp: keeping dark\", @lstate\n          lit:        ( P... ) -> register \"lamp: keeping lit\", @lstate\n        before:\n          trigger: ( P... ) -> register \"lamp: before *\", @lstate\n        goto: 'any'\n        bar:  108\n    #.......................................................................................................\n    after:\n      change: ( P... ) -> register \"root_fsm.change\", @lstate\n    foo: 42\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register\n    show_result } = new_register()\n  #---------------------------------------------------------------------------------------------------------\n  Intermatic      = require '../../../apps/intermatic'\n  button          = new Intermatic fsmd\n  T.eq button.foo,         42\n  T.eq button.lamp.bar, 108\n  info button.moves\n  info { button: { $value: button.lstate, lamp: button.lamp.lstate, }, }\n  urge { button: button.lstate, 'button/lamp': button.lamp.lstate, }\n  urge { button: button.lstate, button_lamp: button.lamp.lstate, }\n  urge { root: button.lstate, lamp: button.lamp.lstate, }\n  help [ \"°button:^#{button.lstate}\", \"°button/lamp:^#{button.lamp.lstate}\", ]\n  button.start()\n  info { button: { $value: button.lstate, lamp: button.lamp.lstate, }, }\n  urge { button: button.lstate, 'button/lamp': button.lamp.lstate, }\n  urge { button: button.lstate, button_lamp: button.lamp.lstate, }\n  urge { root: button.lstate, lamp: button.lamp.lstate, }\n  help [ \"°button:^#{button.lstate}\", \"°button/lamp:^#{button.lamp.lstate}\", ]\n  button.press()\n  info { button: { $value: button.lstate, lamp: button.lamp.lstate, }, }\n  urge { button: button.lstate, 'button/lamp': button.lamp.lstate, }\n  urge { button: button.lstate, button_lamp: button.lamp.lstate, }\n  urge { root: button.lstate, lamp: button.lamp.lstate, }\n  help [ \"°button:^#{button.lstate}\", \"°button/lamp:^#{button.lamp.lstate}\", ]\n  show_result()\n  T.eq result, [\n    [ 'button: keeping released', 'released' ]\n    [ 'lamp: entering dark', 'dark' ]\n    [ 'lamp: after change', 'dark' ]\n    [ 'button: entering released', 'released' ]\n    [ 'root_fsm.change', 'released' ]\n    [ 'button: keeping pressed', 'pressed' ]\n    [ 'lamp: entering lit', 'lit' ]\n    [ 'lamp: after change', 'lit' ]\n    [ 'button: entering pressed', 'pressed' ]\n    [ 'root_fsm.change', 'pressed' ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic cFsm 2\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'cfsm2'\n    fsms:\n      alpha_btn:\n        #.......................................................................................................\n        moves:\n          start:    'released'\n          reset:    [ 'any',       'void',       ]\n          press:    [ 'released',  'pressed',    ]\n          release:  [ 'pressed',   'released',   ]\n        cascades: [ 'start', ]\n        after:\n          change:   ( P... ) ->\n            @lamp.toggle()\n            register \"alpha_btn.after.change\", @cstate\n        #.......................................................................................................\n        fsms:\n          #.....................................................................................................\n          color:\n            moves:\n              start:  'red'\n              toggle: [ 'red', 'green', 'red', ]\n            after:\n              change:   ( P... ) -> register \"color.after.change\", @cstate\n          #.....................................................................................................\n          lamp:\n            moves:\n              start:    'lit'\n              toggle:   [ 'lit', 'dark', 'lit', ]\n            entering:\n              dark:     ( P... ) -> @up.color.toggle()\n            after:\n              change:   ( P... ) -> register \"lamp.after.change\", @cstate\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register\n    show_result } = new_register()\n  #---------------------------------------------------------------------------------------------------------\n  Intermatic      = require '../../../apps/intermatic'\n  fsm             = new Intermatic fsmd\n  # debug '^898922^', fsm\n  # debug '^898922^', ( k for k of fsm )\n  whisper '-----------'\n  whisper 'start'\n  fsm.alpha_btn.start()\n  whisper '-----------'\n  whisper 'press'\n  fsm.alpha_btn.press()\n  whisper '-----------'\n  whisper 'release'\n  fsm.alpha_btn.release()\n  whisper '-----------'\n  whisper 'press'\n  fsm.alpha_btn.press()\n  whisper '-----------'\n  whisper 'release'\n  fsm.alpha_btn.release()\n  whisper '-----------'\n  show_result()\n  T.eq result, [\n    [ 'color.after.change', { lstate: 'green' } ]\n    [ 'lamp.after.change', { lstate: 'lit' } ]\n    [ 'color.after.change', { lstate: 'red' } ]\n    [ 'lamp.after.change', { lstate: 'dark' } ]\n    [ 'alpha_btn.after.change', { lstate: 'released', color: { lstate: 'red' }, lamp: { lstate: 'dark' } } ]\n    [ 'lamp.after.change', { lstate: 'lit' } ]\n    [ 'alpha_btn.after.change', { lstate: 'pressed', color: { lstate: 'red' }, lamp: { lstate: 'lit' } } ]\n    [ 'color.after.change', { lstate: 'green' } ]\n    [ 'lamp.after.change', { lstate: 'dark' } ]\n    [ 'alpha_btn.after.change', { lstate: 'released', color: { lstate: 'green' }, lamp: { lstate: 'dark' } } ]\n    [ 'lamp.after.change', { lstate: 'lit' } ]\n    [ 'alpha_btn.after.change', { lstate: 'pressed', color: { lstate: 'green' }, lamp: { lstate: 'lit' } } ]\n    [ 'color.after.change', { lstate: 'red' } ]\n    [ 'lamp.after.change', { lstate: 'dark' } ]\n    [ 'alpha_btn.after.change', { lstate: 'released', color: { lstate: 'red' }, lamp: { lstate: 'dark' } } ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic AAL style FSMDs 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'φ'\n    moves:\n      start:    'a'\n      step:     [ 'a', 'b', 'c', 'c', ]\n      stop:     [ 'c', 'void', ]\n    before:\n      any:      before_any    = -> register \"before.any\",     @move\n      change:   before_change = -> register \"before.change\",  @move\n      start: [\n              ( before_start_1 = -> debug '^7776^', \"before.start 1\", @move )\n              ( before_start_2 = -> debug '^7776^', \"before.start 2\", @move )\n              ( before_start_3 = -> register \"before.start\",          @move ) ]\n      step:     before_step = -> register \"before.step\", @move\n      stop:     before_stop = -> register \"before.stop\", @move\n    after:\n      any:      -> register \"after.any\",          @move\n      change:   -> register \"after.change\",       @move\n      start:    -> register \"after.start\",        @move\n      step:     -> register \"after.step\",         @move\n      stop:     -> register \"after.stop\",         @move\n    entering:\n      any:      -> register \"entering.any\",       @move\n      void:     -> register \"entering.void\",      @move\n      a:        -> register \"entering.a\",         @move\n      b:        -> register \"entering.b\",         @move\n      c:        -> register \"entering.c\",         @move\n    leaving:\n      any:      -> register \"leaving.any\",        @move\n      void:     -> register \"leaving.void\",       @move\n      a:        -> register \"leaving.a\",          @move\n      b:        -> register \"leaving.b\",          @move\n      c:        -> register \"leaving.c\",          @move\n    keeping:\n      any:      -> register \"keeping.any\",        @move\n      c:        -> register \"keeping.c\",          @move\n    fail:       -> register \"fail\",               @move\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register\n    show_result } = new_register()\n  #---------------------------------------------------------------------------------------------------------\n  Intermatic      = require '../../../apps/intermatic'\n  fsm             = new Intermatic fsmd\n  echo '^4455^', CND.inspect fsm\n  urge '^4455^', fsmd.moves\n  help '^4455^', fsm.moves\n  fsm.start()\n  fsm.step()\n  fsm.step()\n  fsm.step()\n  fsm.stop()\n  fsm.step()\n  show_result()\n  T.eq result, [\n    [ 'before.any', { stage: 'before', verb: 'start', dpar: 'void', dest: 'a' } ]\n    [ 'before.change', { stage: 'before', verb: 'start', dpar: 'void', dest: 'a' } ]\n    [ 'before.start', { stage: 'before', verb: 'start', dpar: 'void', dest: 'a' } ]\n    [ 'leaving.void', { stage: 'leaving', verb: 'start', dpar: 'void', dest: 'a' } ]\n    [ 'entering.a', { stage: 'entering', verb: 'start', dpar: 'void', dest: 'a' } ]\n    [ 'after.start', { stage: 'after', verb: 'start', dpar: 'void', dest: 'a' } ]\n    [ 'after.change', { stage: 'after', verb: 'start', dpar: 'void', dest: 'a' } ]\n    [ 'after.any', { stage: 'after', verb: 'start', dpar: 'void', dest: 'a' } ]\n    [ 'before.any', { stage: 'before', verb: 'step', dpar: 'a', dest: 'b' } ]\n    [ 'before.change', { stage: 'before', verb: 'step', dpar: 'a', dest: 'b' } ]\n    [ 'before.step', { stage: 'before', verb: 'step', dpar: 'a', dest: 'b' } ]\n    [ 'leaving.a', { stage: 'leaving', verb: 'step', dpar: 'a', dest: 'b' } ]\n    [ 'entering.b', { stage: 'entering', verb: 'step', dpar: 'a', dest: 'b' } ]\n    [ 'after.step', { stage: 'after', verb: 'step', dpar: 'a', dest: 'b' } ]\n    [ 'after.change', { stage: 'after', verb: 'step', dpar: 'a', dest: 'b' } ]\n    [ 'after.any', { stage: 'after', verb: 'step', dpar: 'a', dest: 'b' } ]\n    [ 'before.any', { stage: 'before', verb: 'step', dpar: 'b', dest: 'c' } ]\n    [ 'before.change', { stage: 'before', verb: 'step', dpar: 'b', dest: 'c' } ]\n    [ 'before.step', { stage: 'before', verb: 'step', dpar: 'b', dest: 'c' } ]\n    [ 'leaving.b', { stage: 'leaving', verb: 'step', dpar: 'b', dest: 'c' } ]\n    [ 'entering.c', { stage: 'entering', verb: 'step', dpar: 'b', dest: 'c' } ]\n    [ 'after.step', { stage: 'after', verb: 'step', dpar: 'b', dest: 'c' } ]\n    [ 'after.change', { stage: 'after', verb: 'step', dpar: 'b', dest: 'c' } ]\n    [ 'after.any', { stage: 'after', verb: 'step', dpar: 'b', dest: 'c' } ]\n    [ 'before.any', { stage: 'before', verb: 'step', dpar: 'c', dest: 'c' } ]\n    [ 'before.step', { stage: 'before', verb: 'step', dpar: 'c', dest: 'c' } ]\n    [ 'keeping.c', { stage: 'keeping', verb: 'step', dpar: 'c', dest: 'c' } ]\n    [ 'after.step', { stage: 'after', verb: 'step', dpar: 'c', dest: 'c' } ]\n    [ 'after.any', { stage: 'after', verb: 'step', dpar: 'c', dest: 'c' } ]\n    [ 'before.any', { stage: 'before', verb: 'stop', dpar: 'c', dest: 'void' } ]\n    [ 'before.change', { stage: 'before', verb: 'stop', dpar: 'c', dest: 'void' } ]\n    [ 'before.stop', { stage: 'before', verb: 'stop', dpar: 'c', dest: 'void' } ]\n    [ 'leaving.c', { stage: 'leaving', verb: 'stop', dpar: 'c', dest: 'void' } ]\n    [ 'entering.void', { stage: 'entering', verb: 'stop', dpar: 'c', dest: 'void' } ]\n    [ 'after.stop', { stage: 'after', verb: 'stop', dpar: 'c', dest: 'void' } ]\n    [ 'after.change', { stage: 'after', verb: 'stop', dpar: 'c', dest: 'void' } ]\n    [ 'after.any', { stage: 'after', verb: 'stop', dpar: 'c', dest: 'void' } ]\n    [ 'fail', { verb: 'step', dpar: 'void' } ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done() if done?\n\n\n############################################################################################################\nif module is require.main then do =>\n  # @demo_2()\n  # @toolbox_demo()\n  # test @\n  # test @[ \"___ Intermatic attribute freezing\"        ]\n  # test @[ \"Intermatic empty FSM\"                     ]\n  # test @[ \"Intermatic before.start(), after.start()\" ]\n  # test @[ \"Intermatic basics\" ]\n  # test @[ \"Intermatic history\" ]\n  # @[ \"Intermatic cancel moves\" ]()\n  # test @[ \"Intermatic cancel moves\" ]\n  # test @[ \"Intermatic goto 1\" ]\n  # test @[ \"Intermatic data attribute 1\" ]\n  # test @[ \"Intermatic catchalls 1\" ]\n  # test @[ \"Intermatic observables during moves 1\" ]\n  # test @[ \"Intermatic can 1\" ]\n  # test @[ \"Intermatic tryto 1\" ]\n  # test @[ \"Intermatic cFsm 1\" ]\n  test @[ \"Intermatic cFsm 2\" ]\n  test @[ \"Intermatic AAL style FSMDs 1\" ]\n"
  ]
}