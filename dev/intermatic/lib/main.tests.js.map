{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/INTERMATIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nlog                       = urge\n#...........................................................................................................\ntest                      = require 'guy-test'\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  declare\n  type_of }               = types.export()\n{ freeze\n  lets }                  = require 'letsfreezethat'\n\n\n#-----------------------------------------------------------------------------------------------------------\n# declare\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\nnew_register = ->\n  result    = []\n  register  = ( x ) ->\n    whisper '^2321^', rpr x\n    result.push x\n  return { result, register, }\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic empty FSM\" ] = ( T, done ) ->\n  Intermatic      = require '../../../apps/intermatic'\n  fsm             = new Intermatic {}\n  T.eq fsm.triggers, { start: { void: 'void' } }\n  T.eq fsm.start(), null\n  T.eq fsm.state,   'void'\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic before.start(), after.start()\" ] = ( T, done ) ->\n  { result\n    register }    = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    before:\n      start: ( s ) -> register \"before start\"\n    after:\n      start: ( s ) -> register \"after start\"\n  #---------------------------------------------------------------------------------------------------------\n  fsm = new Intermatic fsmd\n  T.eq fsm.start(), null\n  T.eq fsm.state,   'void'\n  T.eq result,      [ 'before start', 'after start' ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic basics\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'meta_lamp'\n    triggers: [\n      [ 'void',   'start',  'lit',  ]\n      [ '*',      'reset',  'void', ]\n      [ 'lit',    'toggle', 'dark', ]\n      [ 'dark',   'toggle', 'lit',  ]\n      # [ 'void',   'toggle', 'lit',  ]\n      ]\n    after:\n      change:     ( s ) -> register \"after change:  #{rpr s}\"\n    enter:\n      dark:       ( s ) -> register \"enter dark:    #{rpr s}\"\n    leave:\n      lit:        ( s ) -> register \"leave lit      #{rpr s}\"\n    fail:         ( s ) -> register \"failed: #{rpr s}\"\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register }    = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  fsm             = new Intermatic fsmd\n  info '^44455^', JSON.stringify fsm.triggers, null, 2\n  T.eq fsm.triggers,\n    \"start\":\n      \"void\": \"lit\"\n    \"toggle\":\n      \"lit\": \"dark\",\n      \"dark\": \"lit\"\n    \"reset\":\n      \"void\": \"void\",\n      \"lit\": \"void\",\n      \"dark\": \"void\"\n  fsm.start()\n  fsm.toggle()\n  fsm.reset()\n  fsm.toggle()\n  # fsm.goto 'lit'\n  # fsm.goto 'lit'\n  # fsm.goto 'dark'\n  echo result\n  T.eq result, [\n    \"after change:  { '$key': '^trigger', from: 'void', via: 'start', to: 'lit', changed: true }\"\n    \"leave lit      { '$key': '^trigger', from: 'lit', via: 'toggle', to: 'dark', changed: true }\"\n    \"enter dark:    { '$key': '^trigger', from: 'lit', via: 'toggle', to: 'dark', changed: true }\"\n    \"after change:  { '$key': '^trigger', from: 'lit', via: 'toggle', to: 'dark', changed: true }\"\n    \"after change:  { '$key': '^trigger', from: 'dark', via: 'reset', to: 'void', changed: true }\"\n    \"failed: { '$key': '^trigger', failed: true, from: 'void', via: 'toggle' }\"\n    ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic goto 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'meta_lamp'\n    triggers: [\n      [ 'void',   'start', 'lit',   ]\n      [ '*',      'reset', 'void',  ]\n      [ 'lit',    'toggle', 'dark', ]\n      [ 'dark',   'toggle', 'lit',  ]\n      # [ 'void',   'toggle', 'lit',  ]\n      ]\n    after:\n      change:     ( s ) -> register \"after change:  #{rpr s}\"\n    enter:\n      dark:       ( s ) -> register \"enter dark:    #{rpr s}\"\n    leave:\n      lit:        ( s ) -> register \"leave lit      #{rpr s}\"\n    goto:         '*'\n    fail:         ( s ) -> register \"failed: #{rpr s}\"\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register }    = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  fsm             = new Intermatic fsmd\n  T.eq ( Object.keys fsm ),  [ '_covered_names', 'reserved', 'fsmd', 'triggers', '_state', 'before',\n  'enter', 'stay', 'leave', 'after', 'my', 'up', 'starts_with', 'start', 'toggle', 'reset', 'goto', 'name',\n  'fail' ]\n  fsm.start()\n  fsm.toggle()\n  fsm.reset()\n  fsm.toggle()\n  fsm.goto 'lit'\n  fsm.goto 'lit'\n  fsm.goto 'dark'\n  echo result\n  T.eq result, [\n    \"after change:  { '$key': '^trigger', from: 'void', via: 'start', to: 'lit', changed: true }\"\n    \"leave lit      { '$key': '^trigger', from: 'lit', via: 'toggle', to: 'dark', changed: true }\"\n    \"enter dark:    { '$key': '^trigger', from: 'lit', via: 'toggle', to: 'dark', changed: true }\"\n    \"after change:  { '$key': '^trigger', from: 'lit', via: 'toggle', to: 'dark', changed: true }\"\n    \"after change:  { '$key': '^trigger', from: 'dark', via: 'reset', to: 'void', changed: true }\"\n    \"failed: { '$key': '^trigger', failed: true, from: 'void', via: 'toggle' }\"\n    \"after change:  { '$key': '^trigger', from: 'void', via: 'goto', to: 'lit', changed: true }\"\n    \"leave lit      { '$key': '^trigger', from: 'lit', via: 'goto', to: 'dark', changed: true }\"\n    \"enter dark:    { '$key': '^trigger', from: 'lit', via: 'goto', to: 'dark', changed: true }\"\n    \"after change:  { '$key': '^trigger', from: 'lit', via: 'goto', to: 'dark', changed: true }\" ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic cFsm\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    #.......................................................................................................\n    triggers: [\n      [ 'void',     'start',    'released',   ]\n      [ '*',        'reset',    'void',       ]\n      [ 'released', 'press',    'pressed',    ]\n      [ 'pressed',  'release',  'released',   ] ]\n    enter:\n      pressed:  ( s ) -> @my.lamp.goto 'lit';   register \"button: enter pressed: #{srpr s}\"\n      released: ( s ) -> @my.lamp.goto 'dark';  register \"button: enter released: #{srpr s}\"\n    stay:\n      pressed:  ( s ) -> register \"button: stay pressed: #{srpr s}\"\n      released: ( s ) -> register \"button: stay released: #{srpr s}\"\n    after:\n      start: ( s ) -> @my.lamp.start()\n    before:\n      trigger: ( s ) -> register \"button: before *: #{srpr s}\"\n    goto: '*'\n    #.......................................................................................................\n    my:\n      #.....................................................................................................\n      lamp:\n        triggers: [\n          [ 'void',   'start',  'lit',  ]\n          [ 'lit',    'toggle', 'dark', ]\n          [ 'dark',   'toggle', 'lit',  ] ]\n        after:\n          change:     ( s ) -> register \"lamp: after change:  #{srpr s}\"\n        enter:\n          dark:       ( s ) -> @up.goto 'released';  register \"lamp: enter dark: #{srpr s}\"\n          lit:        ( s ) -> @up.goto 'pressed';   register \"lamp: enter lit: #{srpr s}\"\n        stay:\n          dark:       ( s ) -> register \"lamp: stay dark: #{srpr s}\"\n          lit:        ( s ) -> register \"lamp: stay lit: #{srpr s}\"\n        before:\n          trigger: ( s ) -> register \"lamp: before *: #{srpr s}\"\n        goto: '*'\n        bar:  108\n    #.......................................................................................................\n    after:\n      change: ( s ) -> register \"root_fsm.change\"\n    foo: 42\n  #---------------------------------------------------------------------------------------------------------\n  srpr            = ( s ) -> \"#{s.from}--#{s.via}->#{s.to}\"\n  { result\n    register }    = new_register()\n  #---------------------------------------------------------------------------------------------------------\n  Intermatic      = require '../../../apps/intermatic'\n  button          = new Intermatic fsmd\n  T.eq button.foo,         42\n  T.eq button.my.lamp.bar, 108\n  info button.triggers\n  # info button.my.lamp.up\n  # debug '^3334^', button\n  # debug '^3334^', button.my\n  info { button: { me: button.state, lamp: button.my.lamp.state, }, }\n  button.start()\n  info { button: { me: button.state, lamp: button.my.lamp.state, }, }\n  button.press()\n  info { button: { me: button.state, lamp: button.my.lamp.state, }, }\n  T.eq result, [\n    'button: before *: void--start->released'\n    'lamp: before *: void--goto->dark'\n    'button: before *: released--goto->released'\n    'button: stay released: released--goto->released'\n    'lamp: enter dark: void--goto->dark'\n    'lamp: after change:  void--goto->dark'\n    'button: enter released: void--start->released'\n    'root_fsm.change'\n    'button: before *: released--press->pressed'\n    'lamp: before *: dark--goto->lit'\n    'button: before *: pressed--goto->pressed'\n    'button: stay pressed: pressed--goto->pressed'\n    'lamp: enter lit: dark--goto->lit'\n    'lamp: after change:  dark--goto->lit'\n    'button: enter pressed: released--press->pressed'\n    'root_fsm.change' ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n############################################################################################################\nif module is require.main then do =>\n  # @demo_2()\n  # @toolbox_demo()\n  test @\n  # test @[ \"Intermatic cFsm\" ]\n  # test @[ \"Intermatic empty FSM\" ]\n  # test @[ \"Intermatic before.start(), after.start()\" ]\n  # @[ \"Intermatic empty FSM\" ]()\n\n\n\n"
  ]
}