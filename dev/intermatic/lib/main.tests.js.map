{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,YAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,GAAA,GAA4B,KAd5B;;;EAgBA,IAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,EAGE,OAHF,CAAA,GAG4B,KAAK,CAAC,MAAN,CAAA,CAH5B;;EAIA,CAAA,CAAE,MAAF,EACE,IADF,CAAA,GAC4B,OAAA,CAAQ,gBAAR,CAD5B,EAvBA;;;;;;;;EAiCA,YAAA,GAAe,QAAA,CAAA,CAAA;AACf,QAAA,QAAA,EAAA;IAAE,MAAA,GAAY;IACZ,QAAA,GAAY,QAAA,CAAA,GAAE,CAAF,CAAA;AACd,UAAA;MAAI,CAAA,GAAO,CAAC,CAAC,MAAF,KAAY,CAAf,GAAsB,CAAC,CAAE,CAAF,CAAvB,GAAkC;MACtC,OAAA,CAAQ,QAAR,EAAkB,GAAA,CAAI,CAAJ,CAAlB;aACA,MAAM,CAAC,IAAP,CAAY,CAAZ;IAHU;AAIZ,WAAO,CAAE,MAAF,EAAU,QAAV;EANM,EAjCf;;;;;EA4CA,IAAC,CAAE,sBAAF,CAAD,GAA8B,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC9B,QAAA,UAAA,EAAA;IAAE,UAAA,GAAkB,OAAA,CAAQ,0BAAR;IAClB,UAAU,CAAC,IAAX,GAAkB;IAClB,GAAA,GAAkB,IAAI,UAAJ,CAAe,CAAA,CAAf;IAClB,CAAC,CAAC,EAAF,CAAK,GAAG,CAAC,QAAT,EAAmB;MAAE,KAAA,EAAO;QAAE,IAAA,EAAM;MAAR;IAAT,CAAnB;IACA,CAAC,CAAC,EAAF,CAAK,GAAG,CAAC,KAAJ,CAAA,CAAL,EAAkB,IAAlB;IACA,CAAC,CAAC,EAAF,CAAK,GAAG,CAAC,MAAT,EAAmB,MAAnB;WACA,IAAA,CAAA;EAP4B,EA5C9B;;;EAsDA,IAAC,CAAE,0CAAF,CAAD,GAAkD,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAClD,QAAA,UAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA;IAAE,CAAA,CAAE,MAAF,EACE,QADF,CAAA,GACkB,YAAA,CAAA,CADlB;IAEA,UAAA,GAAkB,OAAA,CAAQ,0BAAR,EAFpB;;IAIE,IAAA,GACE;MAAA,MAAA,EACE;QAAA,KAAA,EAAO,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,cAAT;QAAT;MAAP,CADF;MAEA,KAAA,EACE;QAAA,KAAA,EAAO,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,aAAT;QAAT;MAAP;IAHF,EALJ;;IAUE,UAAU,CAAC,IAAX,GAAkB;IAClB,GAAA,GAAM,IAAI,UAAJ,CAAe,IAAf;IACN,CAAC,CAAC,EAAF,CAAK,GAAG,CAAC,KAAJ,CAAA,CAAL,EAAkB,IAAlB;IACA,CAAC,CAAC,EAAF,CAAK,GAAG,CAAC,MAAT,EAAkB,MAAlB;IACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAkB,CAAE,cAAF,EAAkB,aAAlB,CAAlB,EAdF;;WAgBE,IAAA,CAAA;EAjBgD,EAtDlD;;;EA0EA,IAAC,CAAE,mBAAF,CAAD,GAA2B,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC3B,QAAA,UAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA,MAAA;;IACE,IAAA,GACE;MAAA,IAAA,EAAM,WAAN;MACA,QAAA,EAAU,CACR,CAAE,MAAF,EAAY,OAAZ,EAAsB,KAAtB,CADQ,EAER,CAAE,GAAF,EAAY,OAAZ,EAAsB,MAAtB,CAFQ,EAGR,CAAE,KAAF,EAAY,QAAZ,EAAsB,MAAtB,CAHQ,EAIR,CAAE,MAAF,EAAY,QAAZ,EAAsB,KAAtB,CAJQ,CADV;;MAQA,KAAA,EACE;QAAA,MAAA,EAAY,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,CAAA,eAAA,CAAA,CAAkB,GAAA,CAAI,CAAJ,CAAlB,CAAA,CAAT;QAAT;MAAZ,CATF;MAUA,KAAA,EACE;QAAA,IAAA,EAAY,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,CAAA,eAAA,CAAA,CAAkB,GAAA,CAAI,CAAJ,CAAlB,CAAA,CAAT;QAAT;MAAZ,CAXF;MAYA,KAAA,EACE;QAAA,GAAA,EAAY,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,CAAA,eAAA,CAAA,CAAkB,GAAA,CAAI,CAAJ,CAAlB,CAAA,CAAT;QAAT;MAAZ,CAbF;MAcA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,QAAA,CAAS,CAAA,QAAA,CAAA,CAAW,GAAA,CAAI,CAAJ,CAAX,CAAA,CAAT;MAAT;IAdd,EAFJ;;IAkBE,CAAA,CAAE,MAAF,EACE,QADF,CAAA,GACkB,YAAA,CAAA,CADlB;IAEA,UAAA,GAAkB,OAAA,CAAQ,0BAAR;IAClB,UAAU,CAAC,IAAX,GAAkB;IAClB,GAAA,GAAkB,IAAI,UAAJ,CAAe,IAAf;IAClB,IAAA,CAAK,SAAL,EAAgB,IAAI,CAAC,SAAL,CAAe,GAAG,CAAC,QAAnB,EAA6B,IAA7B,EAAmC,CAAnC,CAAhB;IACA,CAAC,CAAC,EAAF,CAAK,GAAG,CAAC,QAAT,EACE;MAAA,OAAA,EACE;QAAA,MAAA,EAAQ;MAAR,CADF;MAEA,QAAA,EACE;QAAA,KAAA,EAAO,MAAP;QACA,MAAA,EAAQ;MADR,CAHF;MAKA,OAAA,EACE;QAAA,MAAA,EAAQ,MAAR;QACA,KAAA,EAAO,MADP;QAEA,MAAA,EAAQ;MAFR;IANF,CADF;IAUA,GAAG,CAAC,KAAJ,CAAA;IACA,GAAG,CAAC,MAAJ,CAAA;IACA,GAAG,CAAC,KAAJ,CAAA;IACA,GAAG,CAAC,MAAJ,CAAA,EArCF;;;;IAyCE,IAAA,CAAK,MAAL;IACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa,CACX,uGADW,EAEX,wGAFW,EAGX,wGAHW,EAIX,wGAJW,EAKX,wGALW,EAMX,qFANW,CAAb,EA1CF;;WAkDE,IAAA,CAAA;EAnDyB,EA1E3B;;;EAgIA,IAAC,CAAE,mBAAF,CAAD,GAA2B,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC3B,QAAA,UAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA,MAAA;;IACE,IAAA,GACE;MAAA,IAAA,EAAM,WAAN;MACA,QAAA,EAAU,CACR,CAAE,MAAF,EAAY,OAAZ,EAAqB,KAArB,CADQ,EAER,CAAE,GAAF,EAAY,OAAZ,EAAqB,MAArB,CAFQ,EAGR,CAAE,KAAF,EAAY,QAAZ,EAAsB,MAAtB,CAHQ,EAIR,CAAE,MAAF,EAAY,QAAZ,EAAsB,KAAtB,CAJQ,CADV;;MAQA,KAAA,EACE;QAAA,MAAA,EAAY,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,cAAT,EAA0B,CAA1B;QAAT;MAAZ,CATF;MAUA,KAAA,EACE;QAAA,IAAA,EAAY,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,YAAT,EAA0B,CAA1B;QAAT;MAAZ,CAXF;MAYA,KAAA,EACE;QAAA,GAAA,EAAY,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,WAAT,EAA0B,CAA1B;QAAT;MAAZ,CAbF;MAcA,IAAA,EAAc,GAdd;MAeA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,QAAA,CAAS,QAAT,EAA0B,CAA1B;MAAT;IAfd,EAFJ;;IAmBE,CAAA,CAAE,MAAF,EACE,QADF,CAAA,GACkB,YAAA,CAAA,CADlB;IAEA,UAAA,GAAkB,OAAA,CAAQ,0BAAR;IAClB,UAAU,CAAC,IAAX,GAAkB;IAClB,GAAA,GAAkB,IAAI,UAAJ,CAAe,IAAf,EAvBpB;;IAyBE,GAAG,CAAC,KAAJ,CAAA;IACA,GAAG,CAAC,MAAJ,CAAA;IACA,GAAG,CAAC,KAAJ,CAAA;IACA,GAAG,CAAC,MAAJ,CAAA;IACA,GAAG,CAAC,IAAJ,CAAS,KAAT;IACA,GAAG,CAAC,IAAI,CAAC,GAAT,CAAA;IACA,GAAG,CAAC,IAAJ,CAAS,MAAT;IACA,IAAA,CAAK,MAAL;IACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa;MACX;QAAE,cAAF;QAAkB;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,MAAtC;UAA8C,GAAA,EAAK,OAAnD;UAA4D,EAAA,EAAI,KAAhE;UAAuE,OAAA,EAAS;QAAhF,CAAlB;OADW;MAEX;QAAE,WAAF;QAAe;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,KAAtC;UAA6C,GAAA,EAAK,QAAlD;UAA4D,EAAA,EAAI,MAAhE;UAAwE,OAAA,EAAS;QAAjF,CAAf;OAFW;MAGX;QAAE,YAAF;QAAgB;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,KAAtC;UAA6C,GAAA,EAAK,QAAlD;UAA4D,EAAA,EAAI,MAAhE;UAAwE,OAAA,EAAS;QAAjF,CAAhB;OAHW;MAIX;QAAE,cAAF;QAAkB;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,KAAtC;UAA6C,GAAA,EAAK,QAAlD;UAA4D,EAAA,EAAI,MAAhE;UAAwE,OAAA,EAAS;QAAjF,CAAlB;OAJW;MAKX;QAAE,cAAF;QAAkB;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,MAAtC;UAA8C,GAAA,EAAK,OAAnD;UAA4D,EAAA,EAAI,MAAhE;UAAwE,OAAA,EAAS;QAAjF,CAAlB;OALW;MAMX;QAAE,QAAF;QAAY;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,MAAA,EAAQ,IAAxC;UAA8C,IAAA,EAAM,MAApD;UAA4D,GAAA,EAAK;QAAjE,CAAZ;OANW;MAOX;QAAE,cAAF;QAAkB;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,MAAtC;UAA8C,GAAA,EAAK,MAAnD;UAA2D,EAAA,EAAI,KAA/D;UAAsE,OAAA,EAAS;QAA/E,CAAlB;OAPW;MAQX;QAAE,WAAF;QAAe;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,KAAtC;UAA6C,GAAA,EAAK,MAAlD;UAA0D,EAAA,EAAI,MAA9D;UAAsE,OAAA,EAAS;QAA/E,CAAf;OARW;MASX;QAAE,YAAF;QAAgB;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,KAAtC;UAA6C,GAAA,EAAK,MAAlD;UAA0D,EAAA,EAAI,MAA9D;UAAsE,OAAA,EAAS;QAA/E,CAAhB;OATW;MAUX;QAAE,cAAF;QAAkB;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,KAAtC;UAA6C,GAAA,EAAK,MAAlD;UAA0D,EAAA,EAAI,MAA9D;UAAsE,OAAA,EAAS;QAA/E,CAAlB;OAVW;KAAb,EAjCF;;WA6CE,IAAA,CAAA;EA9CyB,EAhI3B;;;EAiLA,IAAC,CAAE,sBAAF,CAAD,GAA8B,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC9B,QAAA,UAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA,MAAA;;IACE,IAAA,GACE;MAAA,IAAA,EAAM,QAAN;MACA,QAAA,EAAU,CACR,CAAE,MAAF,EAAU,OAAV,EAAmB,KAAnB,CADQ,CADV;MAIA,OAAA,EACE;QAAA,MAAA,EAAQ,CAAE,IAAF,EAAQ,KAAR,CAAR;QACA,IAAA,EAAQ,CAAE,KAAF,EAAS,KAAT,EAAgB,KAAhB,EAAuB,KAAvB;MADR,CALF;MAOA,IAAA,EAAM,GAPN;MAQA,KAAA,EACE;QAAA,MAAA,EAAY,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,CAAT;QAAT;MAAZ,CATF;MAUA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,QAAA,CAAS,CAAT;MAAT;IAVd,EAFJ;;IAcE,CAAA,CAAE,MAAF,EACE,QADF,CAAA,GACkB,YAAA,CAAA,CADlB;IAEA,UAAA,GAAkB,OAAA,CAAQ,0BAAR;IAClB,UAAU,CAAC,IAAX,GAAkB;IAClB,GAAA,GAAkB,IAAI,UAAJ,CAAe,IAAf;IAClB,GAAG,CAAC,KAAJ,CAAA;IACA,GAAG,CAAC,MAAJ,CAAA;IACA,GAAG,CAAC,MAAJ,CAAA;IACA,GAAG,CAAC,IAAJ,CAAA;IACA,GAAG,CAAC,IAAJ,CAAS,KAAT;IACA,GAAG,CAAC,IAAJ,CAAA;IACA,GAAG,CAAC,IAAJ,CAAA;IACA,GAAG,CAAC,IAAJ,CAAA;IACA,GAAG,CAAC,IAAJ,CAAA;IACA,GAAG,CAAC,IAAJ,CAAA;IACA,IAAA,CAAK,MAAL;IACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa;MACX;QAAE,MAAA,EAAQ,UAAV;QAAsB,EAAA,EAAI,IAA1B;QAAgC,IAAA,EAAM,MAAtC;QAA8C,GAAA,EAAK,OAAnD;QAA4D,EAAA,EAAI,KAAhE;QAAuE,OAAA,EAAS;MAAhF,CADW;MAEX;QAAE,MAAA,EAAQ,UAAV;QAAsB,EAAA,EAAI,IAA1B;QAAgC,IAAA,EAAM,KAAtC;QAA6C,GAAA,EAAK,QAAlD;QAA4D,EAAA,EAAI,IAAhE;QAAsE,OAAA,EAAS;MAA/E,CAFW;MAGX;QAAE,MAAA,EAAQ,UAAV;QAAsB,EAAA,EAAI,IAA1B;QAAgC,IAAA,EAAM,IAAtC;QAA4C,GAAA,EAAK,QAAjD;QAA2D,EAAA,EAAI,KAA/D;QAAsE,OAAA,EAAS;MAA/E,CAHW;MAIX;QAAE,MAAA,EAAQ,UAAV;QAAsB,EAAA,EAAI,IAA1B;QAAgC,MAAA,EAAQ,IAAxC;QAA8C,IAAA,EAAM,KAApD;QAA2D,GAAA,EAAK;MAAhE,CAJW;MAKX;QAAE,MAAA,EAAQ,UAAV;QAAsB,EAAA,EAAI,IAA1B;QAAgC,IAAA,EAAM,KAAtC;QAA6C,GAAA,EAAK,MAAlD;QAA0D,EAAA,EAAI,KAA9D;QAAqE,OAAA,EAAS;MAA9E,CALW;MAMX;QAAE,MAAA,EAAQ,UAAV;QAAsB,EAAA,EAAI,IAA1B;QAAgC,IAAA,EAAM,KAAtC;QAA6C,GAAA,EAAK,MAAlD;QAA0D,EAAA,EAAI,KAA9D;QAAqE,OAAA,EAAS;MAA9E,CANW;MAOX;QAAE,MAAA,EAAQ,UAAV;QAAsB,EAAA,EAAI,IAA1B;QAAgC,IAAA,EAAM,KAAtC;QAA6C,GAAA,EAAK,MAAlD;QAA0D,EAAA,EAAI,KAA9D;QAAqE,OAAA,EAAS;MAA9E,CAPW;MAQX;QAAE,MAAA,EAAQ,UAAV;QAAsB,EAAA,EAAI,IAA1B;QAAgC,IAAA,EAAM,KAAtC;QAA6C,GAAA,EAAK,MAAlD;QAA0D,EAAA,EAAI,KAA9D;QAAqE,OAAA,EAAS;MAA9E,CARW;MASX;QAAE,MAAA,EAAQ,UAAV;QAAsB,EAAA,EAAI,IAA1B;QAAgC,IAAA,EAAM,KAAtC;QAA6C,GAAA,EAAK,MAAlD;QAA0D,EAAA,EAAI,KAA9D;QAAqE,OAAA,EAAS;MAA9E,CATW;MAUX;QAAE,MAAA,EAAQ,UAAV;QAAsB,EAAA,EAAI,KAA1B;QAAiC,IAAA,EAAM,KAAvC;QAA8C,GAAA,EAAK,MAAnD;QAA2D,EAAA,EAAI,KAA/D;QAAsE,OAAA,EAAS;MAA/E,CAVW;KAAb,EA9BF;;WA0CE,IAAA,CAAA;EA3C4B,EAjL9B;;;EA+NA,IAAC,CAAE,wBAAF,CAAD,GAAgC,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAChC,QAAA,UAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA,MAAA;;IACE,IAAA,GACE;MAAA,IAAA,EAAM,MAAN;MACA,QAAA,EAAU,CACR,CAAE,MAAF,EAAU,OAAV,EAAmB,KAAnB,CADQ,CADV;MAIA,OAAA,EACE;QAAA,IAAA,EAAQ,CAAE,KAAF,EAAS,KAAT,EAAgB,KAAhB,EAAuB,KAAvB;MAAR,CALF;MAMA,IAAA,EAAM,GANN;MAOA,MAAA,EAAQ;QAAA,GAAA,EAAK,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,YAAT,EAAwB,GAAG,CAAC,MAA5B,EAAoC,CAApC;QAAT;MAAL,CAPR;MAQA,KAAA,EAAQ;QAAA,GAAA,EAAK,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,WAAT,EAAwB,GAAG,CAAC,MAA5B,EAAoC,CAApC;QAAT;MAAL,CARR;MASA,IAAA,EAAQ;QAAA,GAAA,EAAK,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,UAAT,EAAwB,GAAG,CAAC,MAA5B,EAAoC,CAApC;QAAT;MAAL,CATR;MAUA,KAAA,EAAQ;QAAA,GAAA,EAAK,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,WAAT,EAAwB,GAAG,CAAC,MAA5B,EAAoC,CAApC;QAAT;MAAL,CAVR;MAWA,KAAA,EAAQ;QAAA,GAAA,EAAK,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,WAAT,EAAwB,GAAG,CAAC,MAA5B,EAAoC,CAApC;QAAT;MAAL,CAXR;MAYA,IAAA,EAAa,QAAA,CAAE,CAAF,CAAA;eAAS,QAAA,CAAS,MAAT,EAAwB,GAAG,CAAC,MAA5B,EAAoC,CAApC;MAAT;IAZb,EAFJ;;IAgBE,CAAA,CAAE,MAAF,EACE,QADF,CAAA,GACkB,YAAA,CAAA,CADlB;IAEA,UAAA,GAAkB,OAAA,CAAQ,0BAAR;IAClB,UAAU,CAAC,IAAX,GAAkB;IAClB,GAAA,GAAkB,IAAI,UAAJ,CAAe,IAAf;IAClB,IAAA,CAAK,qBAAL;IAA4B,GAAG,CAAC,KAAJ,CAAA;IAC5B,IAAA,CAAK,qBAAL;IAA4B,GAAG,CAAC,IAAJ,CAAA;IAC5B,IAAA,CAAK,CAAA,SAAA,CAAA,CAAY,GAAG,CAAC,MAAhB,CAAA,OAAA,CAAL;IAAsC,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,MAAb;IACtC,IAAA,CAAK,MAAL;IACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa;MACX;QAAE,YAAF;QAAgB,MAAhB;QAAwB;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,MAAtC;UAA8C,GAAA,EAAK,OAAnD;UAA4D,EAAA,EAAI,KAAhE;UAAuE,OAAA,EAAS;QAAhF,CAAxB;OADW;MAEX;QAAE,WAAF;QAAe,MAAf;QAAuB;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,MAAtC;UAA8C,GAAA,EAAK,OAAnD;UAA4D,EAAA,EAAI,KAAhE;UAAuE,OAAA,EAAS;QAAhF,CAAvB;OAFW;MAGX;QAAE,WAAF;QAAe,KAAf;QAAsB;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,MAAtC;UAA8C,GAAA,EAAK,OAAnD;UAA4D,EAAA,EAAI,KAAhE;UAAuE,OAAA,EAAS;QAAhF,CAAtB;OAHW;MAIX;QAAE,WAAF;QAAe,KAAf;QAAsB;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,MAAtC;UAA8C,GAAA,EAAK,OAAnD;UAA4D,EAAA,EAAI,KAAhE;UAAuE,OAAA,EAAS;QAAhF,CAAtB;OAJW;MAKX;QAAE,YAAF;QAAgB,KAAhB;QAAuB;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,KAAtC;UAA6C,GAAA,EAAK,MAAlD;UAA0D,EAAA,EAAI,KAA9D;UAAqE,OAAA,EAAS;QAA9E,CAAvB;OALW;MAMX;QAAE,WAAF;QAAe,KAAf;QAAsB;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,KAAtC;UAA6C,GAAA,EAAK,MAAlD;UAA0D,EAAA,EAAI,KAA9D;UAAqE,OAAA,EAAS;QAA9E,CAAtB;OANW;MAOX;QAAE,WAAF;QAAe,KAAf;QAAsB;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,KAAtC;UAA6C,GAAA,EAAK,MAAlD;UAA0D,EAAA,EAAI,KAA9D;UAAqE,OAAA,EAAS;QAA9E,CAAtB;OAPW;MAQX;QAAE,WAAF;QAAe,KAAf;QAAsB;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,KAAtC;UAA6C,GAAA,EAAK,MAAlD;UAA0D,EAAA,EAAI,KAA9D;UAAqE,OAAA,EAAS;QAA9E,CAAtB;OARW;MASX;QAAE,YAAF;QAAgB,KAAhB;QAAuB;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,KAAtC;UAA6C,GAAA,EAAK,MAAlD;UAA0D,EAAA,EAAI,KAA9D;UAAqE,OAAA,EAAS;QAA9E,CAAvB;OATW;MAUX;QAAE,UAAF;QAAc,KAAd;QAAqB;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,KAAtC;UAA6C,GAAA,EAAK,MAAlD;UAA0D,EAAA,EAAI,KAA9D;UAAqE,OAAA,EAAS;QAA9E,CAArB;OAVW;MAWX;QAAE,WAAF;QAAe,KAAf;QAAsB;UAAE,MAAA,EAAQ,UAAV;UAAsB,EAAA,EAAI,IAA1B;UAAgC,IAAA,EAAM,KAAtC;UAA6C,GAAA,EAAK,MAAlD;UAA0D,EAAA,EAAI,KAA9D;UAAqE,OAAA,EAAS;QAA9E,CAAtB;OAXW;KAAb,EAzBF;;WAsCE,IAAA,CAAA;EAvC8B,EA/NhC;;;EAyQA,IAAC,CAAE,oBAAF,CAAD,GAA4B,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC5B,QAAA,UAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA,MAAA;;IACE,IAAA,GACE;MAAA,IAAA,EAAM,eAAN;MACA,QAAA,EAAU,CACR,CAAE,MAAF,EAAU,OAAV,EAAoB,KAApB,CADQ,EAER,CAAE,KAAF,EAAU,QAAV,EAAoB,IAApB,CAFQ,CADV;MAKA,KAAA,EACE;QAAA,MAAA,EAAY,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,CAAT;QAAT;MAAZ,CANF;MAOA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,QAAA,CAAS,CAAT;MAAT;IAPd,EAFJ;;IAWE,CAAA,CAAE,MAAF,EACE,QADF,CAAA,GACkB,YAAA,CAAA,CADlB;IAEA,UAAA,GAAkB,OAAA,CAAQ,0BAAR;IAClB,UAAU,CAAC,IAAX,GAAkB;IAClB,GAAA,GAAkB,IAAI,UAAJ,CAAe,IAAf;IAClB,GAAG,CAAC,KAAJ,CAAA;IACA,CAAC,CAAC,EAAF,CAAK,IAAL,EAAY,GAAG,CAAC,GAAG,CAAC,MAAR,CAAA,CAAZ;IACA,CAAC,CAAC,EAAF,CAAK,IAAL,EAAY,GAAG,CAAC,KAAK,CAAC,MAAV,CAAA,CAAZ;IACA,CAAC,CAAC,EAAF,CAAK,KAAL,EAAY,GAAG,CAAC,GAAJ,CAAU,QAAV,CAAZ;IACA,CAAC,CAAC,EAAF,CAAK,KAAL,EAAY,GAAG,CAAC,KAAJ,CAAU,QAAV,CAAZ;IACA,CAAC,CAAC,MAAF,CAAS,uCAAT,EAAkD,QAAA,CAAA,CAAA;aAAG,GAAG,CAAC,GAAJ,CAAQ,qBAAR;IAAH,CAAlD;IACA,IAAA,CAAK,MAAL;IACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa;MACX;QAAE,MAAA,EAAQ,UAAV;QAAsB,EAAA,EAAI,IAA1B;QAAgC,IAAA,EAAM,MAAtC;QAA8C,GAAA,EAAK,OAAnD;QAA4D,EAAA,EAAI,KAAhE;QAAuE,OAAA,EAAS;MAAhF,CADW;MAEX;QAAE,MAAA,EAAQ,UAAV;QAAsB,EAAA,EAAI,IAA1B;QAAgC,IAAA,EAAM,KAAtC;QAA6C,GAAA,EAAK,QAAlD;QAA4D,EAAA,EAAI,IAAhE;QAAsE,OAAA,EAAS;MAA/E,CAFW;KAAb,EAvBF;;WA2BE,IAAA,CAAA;EA5B0B,EAzQ5B;;;EAwSA,IAAC,CAAE,oBAAF,CAAD,GAA4B,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC5B,QAAA,UAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA,MAAA;;IACE,IAAA,GACE;MAAA,IAAA,EAAM,eAAN;MACA,QAAA,EAAU,CACR,CAAE,MAAF,EAAU,OAAV,EAAoB,KAApB,CADQ,CADV;MAIA,OAAA,EACE;QAAA,IAAA,EAAM,CAAE,KAAF,EAAS,KAAT,EAAgB,OAAhB;MAAN,CALF;MAMA,KAAA,EACE;QAAA,MAAA,EAAY,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,CAAT;QAAT;MAAZ,CAPF;;MASA,IAAA,EAAc,QAAA,CAAE,CAAF,CAAA;eAAS,QAAA,CAAS,CAAT;MAAT;IATd,EAFJ;;IAaE,CAAA,CAAE,MAAF,EACE,QADF,CAAA,GACkB,YAAA,CAAA,CADlB;IAEA,UAAA,GAAkB,OAAA,CAAQ,0BAAR;IAClB,UAAU,CAAC,IAAX,GAAkB;IAClB,GAAA,GAAkB,IAAI,UAAJ,CAAe,IAAf;IAClB,IAAA,CAAK,gCAAL;IAAuC,IAAA,CAAK,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAC,KAAJ,CAAA,CAAV,CAAL;IACvC,IAAA,CAAK,gCAAL;IAAuC,IAAA,CAAK,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAC,IAAJ,CAAA,CAAV,CAAL;IACvC,IAAA,CAAK,gCAAL;IAAuC,IAAA,CAAK,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAC,KAAK,CAAC,IAAV,CAAA,CAAV,CAAL;IACvC,IAAA,CAAK,gCAAL;IAAuC,IAAA,CAAK,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAC,IAAJ,CAAA,CAAV,CAAL;IACvC,IAAA,CAAK,gCAAL;IAAuC,IAAA,CAAK,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAC,KAAK,CAAC,IAAV,CAAA,CAAV,CAAL;IACvC,IAAA,CAAK,gCAAL;IAAuC,IAAA,CAAK,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAC,KAAK,CAAC,KAAV,CAAA,CAAV,CAAL;IACvC,IAAA,CAAK,MAAL;IACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa;MACX;QAAE,MAAA,EAAQ,UAAV;QAAsB,EAAA,EAAI,IAA1B;QAAgC,IAAA,EAAM,MAAtC;QAA8C,GAAA,EAAK,OAAnD;QAA4D,EAAA,EAAI,KAAhE;QAAuE,OAAA,EAAS;MAAhF,CADW;MAEX;QAAE,MAAA,EAAQ,UAAV;QAAsB,EAAA,EAAI,IAA1B;QAAgC,IAAA,EAAM,KAAtC;QAA6C,GAAA,EAAK,MAAlD;QAA0D,EAAA,EAAI,KAA9D;QAAqE,OAAA,EAAS;MAA9E,CAFW;MAGX;QAAE,MAAA,EAAQ,UAAV;QAAsB,EAAA,EAAI,IAA1B;QAAgC,IAAA,EAAM,KAAtC;QAA6C,GAAA,EAAK,MAAlD;QAA0D,EAAA,EAAI,OAA9D;QAAuE,OAAA,EAAS;MAAhF,CAHW;MAIX;QAAE,MAAA,EAAQ,UAAV;QAAsB,EAAA,EAAI,IAA1B;QAAgC,IAAA,EAAM,OAAtC;QAA+C,GAAA,EAAK,MAApD;QAA4D,EAAA,EAAI,KAAhE;QAAuE,OAAA,EAAS;MAAhF,CAJW;MAKX;QAAE,MAAA,EAAQ,UAAV;QAAsB,EAAA,EAAI,IAA1B;QAAgC,IAAA,EAAM,KAAtC;QAA6C,GAAA,EAAK,MAAlD;QAA0D,EAAA,EAAI,KAA9D;QAAqE,OAAA,EAAS;MAA9E,CALW;MAMX;QAAE,MAAA,EAAQ,UAAV;QAAsB,EAAA,EAAI,IAA1B;QAAgC,IAAA,EAAM,KAAtC;QAA6C,GAAA,EAAK,MAAlD;QAA0D,EAAA,EAAI,OAA9D;QAAuE,OAAA,EAAS;MAAhF,CANW;KAAb,EAzBF;;WAiCE,IAAA,CAAA;EAlC0B,EAxS5B;;;EA6UA,IAAC,CAAE,mBAAF,CAAD,GAA2B,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC3B,QAAA,UAAA,EAAA,MAAA,EAAA,IAAA,EAAA,QAAA,EAAA,MAAA,EAAA,IAAA;;IACE,IAAA,GAEE,CAAA;;MAAA,QAAA,EAAU,CACR,CAAE,MAAF,EAAc,OAAd,EAA0B,UAA1B,CADQ,EAER,CAAE,GAAF,EAAc,OAAd,EAA0B,MAA1B,CAFQ,EAGR,CAAE,UAAF,EAAc,OAAd,EAA0B,SAA1B,CAHQ,EAIR,CAAE,SAAF,EAAc,SAAd,EAA0B,UAA1B,CAJQ,CAAV;MAKA,KAAA,EACE;QAAA,OAAA,EAAU,QAAA,CAAE,CAAF,CAAA;UAAS,IAAC,CAAA,IAAI,CAAC,IAAN,CAAW,KAAX;iBAAoB,QAAA,CAAS,CAAA,uBAAA,CAAA,CAA0B,IAAA,CAAK,CAAL,CAA1B,CAAA,CAAT;QAA7B,CAAV;QACA,QAAA,EAAU,QAAA,CAAE,CAAF,CAAA;UAAS,IAAC,CAAA,IAAI,CAAC,IAAN,CAAW,MAAX;iBAAoB,QAAA,CAAS,CAAA,wBAAA,CAAA,CAA2B,IAAA,CAAK,CAAL,CAA3B,CAAA,CAAT;QAA7B;MADV,CANF;MAQA,IAAA,EACE;QAAA,OAAA,EAAU,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,CAAA,sBAAA,CAAA,CAAyB,IAAA,CAAK,CAAL,CAAzB,CAAA,CAAT;QAAT,CAAV;QACA,QAAA,EAAU,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,CAAA,uBAAA,CAAA,CAA0B,IAAA,CAAK,CAAL,CAA1B,CAAA,CAAT;QAAT;MADV,CATF;MAWA,KAAA,EACE;QAAA,KAAA,EAAO,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAC,CAAA,IAAI,CAAC,KAAN,CAAA;QAAT;MAAP,CAZF;MAaA,MAAA,EACE;QAAA,OAAA,EAAS,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,CAAA,kBAAA,CAAA,CAAqB,IAAA,CAAK,CAAL,CAArB,CAAA,CAAT;QAAT;MAAT,CAdF;MAeA,IAAA,EAAM,GAfN;;MAiBA,IAAA,EAEE,CAAA;;QAAA,IAAA,EACE;UAAA,QAAA,EAAU,CACR,CAAE,MAAF,EAAY,OAAZ,EAAsB,KAAtB,CADQ,EAER,CAAE,KAAF,EAAY,QAAZ,EAAsB,MAAtB,CAFQ,EAGR,CAAE,MAAF,EAAY,QAAZ,EAAsB,KAAtB,CAHQ,CAAV;UAIA,KAAA,EACE;YAAA,MAAA,EAAY,QAAA,CAAE,CAAF,CAAA;qBAAS,QAAA,CAAS,CAAA,qBAAA,CAAA,CAAwB,IAAA,CAAK,CAAL,CAAxB,CAAA,CAAT;YAAT;UAAZ,CALF;UAMA,KAAA,EACE;YAAA,IAAA,EAAY,QAAA,CAAE,CAAF,CAAA;cAAS,IAAC,CAAA,EAAE,CAAC,IAAJ,CAAS,UAAT;qBAAsB,QAAA,CAAS,CAAA,kBAAA,CAAA,CAAqB,IAAA,CAAK,CAAL,CAArB,CAAA,CAAT;YAA/B,CAAZ;YACA,GAAA,EAAY,QAAA,CAAE,CAAF,CAAA;cAAS,IAAC,CAAA,EAAE,CAAC,IAAJ,CAAS,SAAT;qBAAsB,QAAA,CAAS,CAAA,iBAAA,CAAA,CAAoB,IAAA,CAAK,CAAL,CAApB,CAAA,CAAT;YAA/B;UADZ,CAPF;UASA,IAAA,EACE;YAAA,IAAA,EAAY,QAAA,CAAE,CAAF,CAAA;qBAAS,QAAA,CAAS,CAAA,iBAAA,CAAA,CAAoB,IAAA,CAAK,CAAL,CAApB,CAAA,CAAT;YAAT,CAAZ;YACA,GAAA,EAAY,QAAA,CAAE,CAAF,CAAA;qBAAS,QAAA,CAAS,CAAA,gBAAA,CAAA,CAAmB,IAAA,CAAK,CAAL,CAAnB,CAAA,CAAT;YAAT;UADZ,CAVF;UAYA,MAAA,EACE;YAAA,OAAA,EAAS,QAAA,CAAE,CAAF,CAAA;qBAAS,QAAA,CAAS,CAAA,gBAAA,CAAA,CAAmB,IAAA,CAAK,CAAL,CAAnB,CAAA,CAAT;YAAT;UAAT,CAbF;UAcA,IAAA,EAAM,GAdN;UAeA,GAAA,EAAM;QAfN;MADF,CAnBF;;MAqCA,KAAA,EACE;QAAA,MAAA,EAAQ,QAAA,CAAE,CAAF,CAAA;iBAAS,QAAA,CAAS,iBAAT;QAAT;MAAR,CAtCF;MAuCA,GAAA,EAAK;IAvCL,EAHJ;;IA4CE,IAAA,GAAkB,QAAA,CAAE,CAAF,CAAA;aAAS,CAAA,CAAA,CAAG,CAAC,CAAC,IAAL,CAAA,EAAA,CAAA,CAAc,CAAC,CAAC,GAAhB,CAAA,EAAA,CAAA,CAAwB,CAAC,CAAC,EAA1B,CAAA;IAAT;IAClB,CAAA,CAAE,MAAF,EACE,QADF,CAAA,GACkB,YAAA,CAAA,CADlB,EA7CF;;IAgDE,UAAA,GAAkB,OAAA,CAAQ,0BAAR;IAClB,UAAU,CAAC,IAAX,GAAkB;IAClB,MAAA,GAAkB,IAAI,UAAJ,CAAe,IAAf;IAClB,CAAC,CAAC,EAAF,CAAK,MAAM,CAAC,GAAZ,EAAyB,EAAzB;IACA,CAAC,CAAC,EAAF,CAAK,MAAM,CAAC,IAAI,CAAC,GAAjB,EAAsB,GAAtB;IACA,IAAA,CAAK,MAAM,CAAC,QAAZ;IACA,IAAA,CAAK;MAAE,MAAA,EAAQ;QAAE,MAAA,EAAQ,MAAM,CAAC,MAAjB;QAAyB,IAAA,EAAM,MAAM,CAAC,IAAI,CAAC;MAA3C;IAAV,CAAL;IACA,IAAA,CAAK;MAAE,MAAA,EAAQ,MAAM,CAAC,MAAjB;MAAyB,aAAA,EAAe,MAAM,CAAC,IAAI,CAAC;IAApD,CAAL;IACA,IAAA,CAAK;MAAE,MAAA,EAAQ,MAAM,CAAC,MAAjB;MAAyB,WAAA,EAAa,MAAM,CAAC,IAAI,CAAC;IAAlD,CAAL;IACA,IAAA,CAAK;MAAE,IAAA,EAAM,MAAM,CAAC,MAAf;MAAuB,IAAA,EAAM,MAAM,CAAC,IAAI,CAAC;IAAzC,CAAL;IACA,IAAA,CAAK,CAAE,CAAA,SAAA,CAAA,CAAY,MAAM,CAAC,MAAnB,CAAA,CAAF,EAA+B,CAAA,cAAA,CAAA,CAAiB,MAAM,CAAC,IAAI,CAAC,MAA7B,CAAA,CAA/B,CAAL;IACA,MAAM,CAAC,KAAP,CAAA;IACA,IAAA,CAAK;MAAE,MAAA,EAAQ;QAAE,MAAA,EAAQ,MAAM,CAAC,MAAjB;QAAyB,IAAA,EAAM,MAAM,CAAC,IAAI,CAAC;MAA3C;IAAV,CAAL;IACA,IAAA,CAAK;MAAE,MAAA,EAAQ,MAAM,CAAC,MAAjB;MAAyB,aAAA,EAAe,MAAM,CAAC,IAAI,CAAC;IAApD,CAAL;IACA,IAAA,CAAK;MAAE,MAAA,EAAQ,MAAM,CAAC,MAAjB;MAAyB,WAAA,EAAa,MAAM,CAAC,IAAI,CAAC;IAAlD,CAAL;IACA,IAAA,CAAK;MAAE,IAAA,EAAM,MAAM,CAAC,MAAf;MAAuB,IAAA,EAAM,MAAM,CAAC,IAAI,CAAC;IAAzC,CAAL;IACA,IAAA,CAAK,CAAE,CAAA,SAAA,CAAA,CAAY,MAAM,CAAC,MAAnB,CAAA,CAAF,EAA+B,CAAA,cAAA,CAAA,CAAiB,MAAM,CAAC,IAAI,CAAC,MAA7B,CAAA,CAA/B,CAAL;IACA,MAAM,CAAC,KAAP,CAAA;IACA,IAAA,CAAK;MAAE,MAAA,EAAQ;QAAE,MAAA,EAAQ,MAAM,CAAC,MAAjB;QAAyB,IAAA,EAAM,MAAM,CAAC,IAAI,CAAC;MAA3C;IAAV,CAAL;IACA,IAAA,CAAK;MAAE,MAAA,EAAQ,MAAM,CAAC,MAAjB;MAAyB,aAAA,EAAe,MAAM,CAAC,IAAI,CAAC;IAApD,CAAL;IACA,IAAA,CAAK;MAAE,MAAA,EAAQ,MAAM,CAAC,MAAjB;MAAyB,WAAA,EAAa,MAAM,CAAC,IAAI,CAAC;IAAlD,CAAL;IACA,IAAA,CAAK;MAAE,IAAA,EAAM,MAAM,CAAC,MAAf;MAAuB,IAAA,EAAM,MAAM,CAAC,IAAI,CAAC;IAAzC,CAAL;IACA,IAAA,CAAK,CAAE,CAAA,SAAA,CAAA,CAAY,MAAM,CAAC,MAAnB,CAAA,CAAF,EAA+B,CAAA,cAAA,CAAA,CAAiB,MAAM,CAAC,IAAI,CAAC,MAA7B,CAAA,CAA/B,CAAL;IACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa,CACX,iDADW,EAEX,oCAFW,EAGX,uCAHW,EAIX,+CAJW,EAKX,iBALW,EAMX,8CANW,EAOX,kCAPW,EAQX,sCARW,EASX,iDATW,EAUX,iBAVW,CAAb,EAvEF;;WAmFE,IAAA,CAAA;EApFyB,EA7U3B;;;EAoaA,IAAC,CAAE,mBAAF,CAAD,GAA2B,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC3B,QAAA,UAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA,MAAA,EAAA,IAAA;;IACE,IAAA,GACE;MAAA,IAAA,EACE;QAAA,SAAA,EAEE,CAAA;;UAAA,QAAA,EAAU,CACR,CAAE,MAAF,EAAc,OAAd,EAA0B,UAA1B,CADQ,EAER,CAAE,GAAF,EAAc,OAAd,EAA0B,MAA1B,CAFQ,EAGR,CAAE,UAAF,EAAc,OAAd,EAA0B,SAA1B,CAHQ,EAIR,CAAE,SAAF,EAAc,SAAd,EAA0B,UAA1B,CAJQ,CAAV;;;;UAQA,MAAA,EACE;YAAA,KAAA,EAAU,QAAA,CAAE,CAAF,CAAA;qBAAS,IAAC,CAAA,IAAI,CAAC,KAAN,CAAA;YAAT;UAAV,CATF;UAUA,KAAA,EACE;YAAA,MAAA,EAAU,QAAA,CAAE,CAAF,CAAA;cACR,IAAC,CAAA,IAAI,CAAC,MAAN,CAAA;qBACA,QAAA,CAAS;gBAAE,IAAA,EAAM,CAAC,CAAC,IAAV;gBAAgB,GAAA,EAAK,CAAC,CAAC,GAAvB;gBAA4B,SAAA,EAAW,IAAC,CAAA,MAAxC;gBAAgD,IAAA,EAAM,IAAC,CAAA,IAAI,CAAC,MAA5D;gBAAoE,KAAA,EAAO,IAAC,CAAA,KAAK,CAAC;cAAlF,CAAT;YAFQ;UAAV,CAXF;;UAeA,IAAA,EAEE,CAAA;;YAAA,KAAA,EACE;cAAA,QAAA,EAAU,CACR,CAAE,KAAF,EAAS,QAAT,EAAmB,OAAnB,CADQ,EAER,CAAE,OAAF,EAAW,QAAX,EAAqB,KAArB,CAFQ,CAAV;cAGA,KAAA,EACE;gBAAA,MAAA,EAAU,QAAA,CAAE,CAAF,CAAA;yBAAS,QAAA,CAAS;oBAAE,IAAA,EAAM,CAAC,CAAC,IAAV;oBAAgB,GAAA,EAAK,CAAC,CAAC,GAAvB;oBAA4B,eAAA,EAAiB,IAAC,CAAA;kBAA9C,CAAT;gBAAT;cAAV;YAJF,CADF;;YAOA,IAAA,EACE;cAAA,QAAA,EAAU,CACR,CAAE,MAAF,EAAY,OAAZ,EAAsB,KAAtB,CADQ,EAER,CAAE,KAAF,EAAY,QAAZ,EAAsB,MAAtB,CAFQ,EAGR,CAAE,MAAF,EAAY,QAAZ,EAAsB,KAAtB,CAHQ,CAAV;cAIA,MAAA,EACE;gBAAA,KAAA,EAAU,QAAA,CAAE,CAAF,CAAA;yBAAS,IAAC,CAAA,EAAE,CAAC,KAAK,CAAC,KAAV,CAAA;gBAAT;cAAV,CALF;cAMA,KAAA,EACE;gBAAA,IAAA,EAAU,QAAA,CAAE,CAAF,CAAA;yBAAS,IAAC,CAAA,EAAE,CAAC,KAAK,CAAC,MAAV,CAAA;gBAAT;cAAV,CAPF;cAQA,KAAA,EACE;gBAAA,MAAA,EAAU,QAAA,CAAE,CAAF,CAAA;yBAAS,QAAA,CAAS;oBAAE,IAAA,EAAM,CAAC,CAAC,IAAV;oBAAgB,GAAA,EAAK,CAAC,CAAC,GAAvB;oBAA4B,cAAA,EAAgB,IAAC,CAAA;kBAA7C,CAAT;gBAAT;cAAV;YATF;UARF;QAjBF;MAFF;IADF,EAFJ;;IAyCE,IAAA,GAAkB,QAAA,CAAE,CAAF,CAAA;aAAS,CAAA,CAAA,CAAG,CAAC,CAAC,IAAL,CAAA,EAAA,CAAA,CAAc,CAAC,CAAC,GAAhB,CAAA,EAAA,CAAA,CAAwB,CAAC,CAAC,EAA1B,CAAA;IAAT;IAClB,CAAA,CAAE,MAAF,EACE,QADF,CAAA,GACkB,YAAA,CAAA,CADlB,EA1CF;;IA6CE,UAAA,GAAkB,OAAA,CAAQ,0BAAR;IAClB,UAAU,CAAC,IAAX,GAAkB;IAClB,GAAA,GAAkB,IAAI,UAAJ,CAAe,IAAf,EA/CpB;;;IAkDE,OAAA,CAAQ,aAAR;IACA,OAAA,CAAQ,OAAR;IACA,GAAG,CAAC,SAAS,CAAC,KAAd,CAAA;IACA,OAAA,CAAQ,aAAR;IACA,OAAA,CAAQ,OAAR;IACA,GAAG,CAAC,SAAS,CAAC,KAAd,CAAA;IACA,OAAA,CAAQ,aAAR;IACA,OAAA,CAAQ,SAAR;IACA,GAAG,CAAC,SAAS,CAAC,OAAd,CAAA;IACA,OAAA,CAAQ,aAAR;IACA,OAAA,CAAQ,OAAR;IACA,GAAG,CAAC,SAAS,CAAC,KAAd,CAAA;IACA,OAAA,CAAQ,aAAR;IACA,OAAA,CAAQ,SAAR;IACA,GAAG,CAAC,SAAS,CAAC,OAAd,CAAA;IACA,OAAA,CAAQ,aAAR,EAjEF;;IAmEE,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa;MACX;QAAE,IAAA,EAAM,MAAR;QAAgB,GAAA,EAAK,OAArB;QAA8B,eAAA,EAAiB;MAA/C,CADW;MAEX;QAAE,IAAA,EAAM,MAAR;QAAgB,GAAA,EAAK,OAArB;QAA8B,cAAA,EAAgB;MAA9C,CAFW;MAGX;QAAE,IAAA,EAAM,OAAR;QAAiB,GAAA,EAAK,QAAtB;QAAgC,eAAA,EAAiB;MAAjD,CAHW;MAIX;QAAE,IAAA,EAAM,KAAR;QAAe,GAAA,EAAK,QAApB;QAA8B,cAAA,EAAgB;MAA9C,CAJW;MAKX;QAAE,IAAA,EAAM,MAAR;QAAgB,GAAA,EAAK,OAArB;QAA8B,SAAA,EAAW,UAAzC;QAAqD,IAAA,EAAM,MAA3D;QAAmE,KAAA,EAAO;MAA1E,CALW;MAMX;QAAE,IAAA,EAAM,MAAR;QAAgB,GAAA,EAAK,QAArB;QAA+B,cAAA,EAAgB;MAA/C,CANW;MAOX;QAAE,IAAA,EAAM,UAAR;QAAoB,GAAA,EAAK,OAAzB;QAAkC,SAAA,EAAW,SAA7C;QAAwD,IAAA,EAAM,KAA9D;QAAqE,KAAA,EAAO;MAA5E,CAPW;MAQX;QAAE,IAAA,EAAM,KAAR;QAAe,GAAA,EAAK,QAApB;QAA8B,eAAA,EAAiB;MAA/C,CARW;MASX;QAAE,IAAA,EAAM,KAAR;QAAe,GAAA,EAAK,QAApB;QAA8B,cAAA,EAAgB;MAA9C,CATW;MAUX;QAAE,IAAA,EAAM,SAAR;QAAmB,GAAA,EAAK,SAAxB;QAAmC,SAAA,EAAW,UAA9C;QAA0D,IAAA,EAAM,MAAhE;QAAwE,KAAA,EAAO;MAA/E,CAVW;MAWX;QAAE,IAAA,EAAM,MAAR;QAAgB,GAAA,EAAK,QAArB;QAA+B,cAAA,EAAgB;MAA/C,CAXW;MAYX;QAAE,IAAA,EAAM,UAAR;QAAoB,GAAA,EAAK,OAAzB;QAAkC,SAAA,EAAW,SAA7C;QAAwD,IAAA,EAAM,KAA9D;QAAqE,KAAA,EAAO;MAA5E,CAZW;MAaX;QAAE,IAAA,EAAM,OAAR;QAAiB,GAAA,EAAK,QAAtB;QAAgC,eAAA,EAAiB;MAAjD,CAbW;MAcX;QAAE,IAAA,EAAM,KAAR;QAAe,GAAA,EAAK,QAApB;QAA8B,cAAA,EAAgB;MAA9C,CAdW;MAeX;QAAE,IAAA,EAAM,SAAR;QAAmB,GAAA,EAAK,SAAxB;QAAmC,SAAA,EAAW,UAA9C;QAA0D,IAAA,EAAM,MAAhE;QAAwE,KAAA,EAAO;MAA/E,CAfW;KAAb,EAnEF;;WAoFE,IAAA,CAAA;EArFyB,EApa3B;;;EA6fA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA;;;aAGhC,IAAA,CAAK,IAAL;IAHgC,CAAA,IAAlC;;;EA7fA;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/INTERMATIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nlog                       = urge\n#...........................................................................................................\ntest                      = require 'guy-test'\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  declare\n  type_of }               = types.export()\n{ freeze\n  lets }                  = require 'letsfreezethat'\n\n\n#-----------------------------------------------------------------------------------------------------------\n# declare\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\nnew_register = ->\n  result    = []\n  register  = ( P... ) ->\n    x = if P.length is 1 then P[ 0 ] else P\n    whisper '^2321^', rpr x\n    result.push x\n  return { result, register, }\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic empty FSM\" ] = ( T, done ) ->\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  fsm             = new Intermatic {}\n  T.eq fsm.triggers, { start: { void: 'void' } }\n  T.eq fsm.start(), null\n  T.eq fsm.lstate,   'void'\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic before.start(), after.start()\" ] = ( T, done ) ->\n  { result\n    register }    = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    before:\n      start: ( s ) -> register \"before start\"\n    after:\n      start: ( s ) -> register \"after start\"\n  #---------------------------------------------------------------------------------------------------------\n  Intermatic._tid = 0\n  fsm = new Intermatic fsmd\n  T.eq fsm.start(), null\n  T.eq fsm.lstate,  'void'\n  T.eq result,      [ 'before start', 'after start' ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic basics\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'meta_lamp'\n    triggers: [\n      [ 'void',   'start',  'lit',  ]\n      [ '*',      'reset',  'void', ]\n      [ 'lit',    'toggle', 'dark', ]\n      [ 'dark',   'toggle', 'lit',  ]\n      # [ 'void',   'toggle', 'lit',  ]\n      ]\n    after:\n      change:     ( s ) -> register \"after change:  #{rpr s}\"\n    enter:\n      dark:       ( s ) -> register \"enter dark:    #{rpr s}\"\n    leave:\n      lit:        ( s ) -> register \"leave lit      #{rpr s}\"\n    fail:         ( s ) -> register \"failed: #{rpr s}\"\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register }    = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  fsm             = new Intermatic fsmd\n  info '^44455^', JSON.stringify fsm.triggers, null, 2\n  T.eq fsm.triggers,\n    \"start\":\n      \"void\": \"lit\"\n    \"toggle\":\n      \"lit\": \"dark\",\n      \"dark\": \"lit\"\n    \"reset\":\n      \"void\": \"void\",\n      \"lit\": \"void\",\n      \"dark\": \"void\"\n  fsm.start()\n  fsm.toggle()\n  fsm.reset()\n  fsm.toggle()\n  # fsm.goto 'lit'\n  # fsm.goto 'lit'\n  # fsm.goto 'dark'\n  echo result\n  T.eq result, [\n    \"after change:  { '$key': '^trigger', id: 't1', from: 'void', via: 'start', to: 'lit', changed: true }\",\n    \"leave lit      { '$key': '^trigger', id: 't2', from: 'lit', via: 'toggle', to: 'dark', changed: true }\",\n    \"enter dark:    { '$key': '^trigger', id: 't2', from: 'lit', via: 'toggle', to: 'dark', changed: true }\",\n    \"after change:  { '$key': '^trigger', id: 't2', from: 'lit', via: 'toggle', to: 'dark', changed: true }\",\n    \"after change:  { '$key': '^trigger', id: 't3', from: 'dark', via: 'reset', to: 'void', changed: true }\",\n    \"failed: { '$key': '^trigger', id: 't4', failed: true, from: 'void', via: 'toggle' }\" ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic goto 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'meta_lamp'\n    triggers: [\n      [ 'void',   'start', 'lit',   ]\n      [ '*',      'reset', 'void',  ]\n      [ 'lit',    'toggle', 'dark', ]\n      [ 'dark',   'toggle', 'lit',  ]\n      # [ 'void',   'toggle', 'lit',  ]\n      ]\n    after:\n      change:     ( s ) -> register 'after change',  s\n    enter:\n      dark:       ( s ) -> register 'enter dark',    s\n    leave:\n      lit:        ( s ) -> register 'leave lit',     s\n    goto:         '*'\n    fail:         ( s ) -> register 'failed',        s\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register }    = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  fsm             = new Intermatic fsmd\n  # T.eq ( Object.keys fsm ),  [ 'reserved', 'fsmd', 'triggers', 'fsm_names', 'has_subfsms', '_lstate', 'before', 'enter', 'stay', 'leave', 'after', 'up', 'starts_with', 'start', 'toggle', 'reset', 'goto', 'name', 'fail' ]\n  fsm.start()\n  fsm.toggle()\n  fsm.reset()\n  fsm.toggle()\n  fsm.goto 'lit'\n  fsm.goto.lit()\n  fsm.goto 'dark'\n  echo result\n  T.eq result, [\n    [ 'after change', { '$key': '^trigger', id: 't1', from: 'void', via: 'start', to: 'lit', changed: true } ],\n    [ 'leave lit', { '$key': '^trigger', id: 't2', from: 'lit', via: 'toggle', to: 'dark', changed: true } ],\n    [ 'enter dark', { '$key': '^trigger', id: 't2', from: 'lit', via: 'toggle', to: 'dark', changed: true } ],\n    [ 'after change', { '$key': '^trigger', id: 't2', from: 'lit', via: 'toggle', to: 'dark', changed: true } ],\n    [ 'after change', { '$key': '^trigger', id: 't3', from: 'dark', via: 'reset', to: 'void', changed: true } ],\n    [ 'failed', { '$key': '^trigger', id: 't4', failed: true, from: 'void', via: 'toggle' } ],\n    [ 'after change', { '$key': '^trigger', id: 't5', from: 'void', via: 'goto', to: 'lit', changed: true } ],\n    [ 'leave lit', { '$key': '^trigger', id: 't6', from: 'lit', via: 'goto', to: 'dark', changed: true } ],\n    [ 'enter dark', { '$key': '^trigger', id: 't6', from: 'lit', via: 'goto', to: 'dark', changed: true } ],\n    [ 'after change', { '$key': '^trigger', id: 't6', from: 'lit', via: 'goto', to: 'dark', changed: true } ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic cyclers 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'switch'\n    triggers: [\n      [ 'void', 'start', 'off', ]\n      ]\n    cyclers:\n      toggle: [ 'on', 'off', ]\n      step:   [ 'bar', 'baz', 'gnu', 'doe', ]\n    goto: '*'\n    after:\n      change:     ( s ) -> register s\n    fail:         ( s ) -> register s\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register }    = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  fsm             = new Intermatic fsmd\n  fsm.start()\n  fsm.toggle()\n  fsm.toggle()\n  fsm.step()\n  fsm.goto 'doe'\n  fsm.step()\n  fsm.step()\n  fsm.step()\n  fsm.step()\n  fsm.step()\n  echo result\n  T.eq result, [\n    { '$key': '^trigger', id: 't1', from: 'void', via: 'start', to: 'off', changed: true },\n    { '$key': '^trigger', id: 't2', from: 'off', via: 'toggle', to: 'on', changed: true },\n    { '$key': '^trigger', id: 't3', from: 'on', via: 'toggle', to: 'off', changed: true },\n    { '$key': '^trigger', id: 't4', failed: true, from: 'off', via: 'step' },\n    { '$key': '^trigger', id: 't5', from: 'off', via: 'goto', to: 'doe', changed: true },\n    { '$key': '^trigger', id: 't6', from: 'doe', via: 'step', to: 'bar', changed: true },\n    { '$key': '^trigger', id: 't7', from: 'bar', via: 'step', to: 'baz', changed: true },\n    { '$key': '^trigger', id: 't8', from: 'baz', via: 'step', to: 'gnu', changed: true },\n    { '$key': '^trigger', id: 't9', from: 'gnu', via: 'step', to: 'doe', changed: true },\n    { '$key': '^trigger', id: 't10', from: 'doe', via: 'step', to: 'bar', changed: true } ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic catchalls 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'knob'\n    triggers: [\n      [ 'void', 'start', 'bar', ]\n      ]\n    cyclers:\n      step:   [ 'bar', 'baz', 'gnu', 'doe', ]\n    goto: '*'\n    before: any: ( s ) -> register 'before any',  fsm.lstate, s\n    enter:  any: ( s ) -> register 'enter any',   fsm.lstate, s\n    stay:   any: ( s ) -> register 'stay any',    fsm.lstate, s\n    leave:  any: ( s ) -> register 'leave any',   fsm.lstate, s\n    after:  any: ( s ) -> register 'after any',   fsm.lstate, s\n    fail:        ( s ) -> register 'fail',        fsm.lstate, s\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register }    = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  fsm             = new Intermatic fsmd\n  info \"fsm.start()     ———\"; fsm.start()\n  info \"fsm.step()      ———\"; fsm.step()\n  info \"fsm.goto.#{fsm.lstate}()  ———\"; fsm.goto fsm.lstate\n  echo result\n  T.eq result, [\n    [ 'before any', 'void', { '$key': '^trigger', id: 't1', from: 'void', via: 'start', to: 'bar', changed: true } ],\n    [ 'leave any', 'void', { '$key': '^trigger', id: 't1', from: 'void', via: 'start', to: 'bar', changed: true } ],\n    [ 'enter any', 'bar', { '$key': '^trigger', id: 't1', from: 'void', via: 'start', to: 'bar', changed: true } ],\n    [ 'after any', 'bar', { '$key': '^trigger', id: 't1', from: 'void', via: 'start', to: 'bar', changed: true } ],\n    [ 'before any', 'bar', { '$key': '^trigger', id: 't2', from: 'bar', via: 'step', to: 'baz', changed: true } ],\n    [ 'leave any', 'bar', { '$key': '^trigger', id: 't2', from: 'bar', via: 'step', to: 'baz', changed: true } ],\n    [ 'enter any', 'baz', { '$key': '^trigger', id: 't2', from: 'bar', via: 'step', to: 'baz', changed: true } ],\n    [ 'after any', 'baz', { '$key': '^trigger', id: 't2', from: 'bar', via: 'step', to: 'baz', changed: true } ],\n    [ 'before any', 'baz', { '$key': '^trigger', id: 't3', from: 'baz', via: 'goto', to: 'baz', changed: false } ],\n    [ 'stay any', 'baz', { '$key': '^trigger', id: 't3', from: 'baz', via: 'goto', to: 'baz', changed: false } ],\n    [ 'after any', 'baz', { '$key': '^trigger', id: 't3', from: 'baz', via: 'goto', to: 'baz', changed: false } ] ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic tryto 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'oneway_switch'\n    triggers: [\n      [ 'void', 'start',  'off', ]\n      [ 'off',  'toggle', 'on', ]\n      ]\n    after:\n      change:     ( s ) -> register s\n    fail:         ( s ) -> register s\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register }    = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  fsm             = new Intermatic fsmd\n  fsm.start()\n  T.eq true,  fsm.can.toggle()\n  T.eq true,  fsm.tryto.toggle()\n  T.eq false, fsm.can   'toggle'\n  T.eq false, fsm.tryto 'toggle'\n  T.throws /unknown trigger \"nonexisting_trigger\"/, -> fsm.can 'nonexisting_trigger'\n  echo result\n  T.eq result, [\n    { '$key': '^trigger', id: 't1', from: 'void', via: 'start', to: 'off', changed: true },\n    { '$key': '^trigger', id: 't2', from: 'off', via: 'toggle', to: 'on', changed: true } ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic tryto 2\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'oneway_switch'\n    triggers: [\n      [ 'void', 'start',  'one', ]\n      ]\n    cyclers:\n      step: [ 'one', 'two', 'three', ]\n    after:\n      change:     ( s ) -> register s\n      # step:       ( s ) -> @step()\n    fail:         ( s ) -> register s\n  #---------------------------------------------------------------------------------------------------------\n  { result\n    register }    = new_register()\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  fsm             = new Intermatic fsmd\n  info 'fsm.start()       ------------'; info CND.truth fsm.start()\n  info 'fsm.step()        ------------'; info CND.truth fsm.step()\n  info 'fsm.tryto.step()  ------------'; info CND.truth fsm.tryto.step()\n  info 'fsm.step()        ------------'; info CND.truth fsm.step()\n  info 'fsm.tryto.step()  ------------'; info CND.truth fsm.tryto.step()\n  info 'fsm.tryto.start() ------------'; info CND.truth fsm.tryto.start()\n  echo result\n  T.eq result, [\n    { '$key': '^trigger', id: 't1', from: 'void', via: 'start', to: 'one', changed: true },\n    { '$key': '^trigger', id: 't2', from: 'one', via: 'step', to: 'two', changed: true },\n    { '$key': '^trigger', id: 't3', from: 'two', via: 'step', to: 'three', changed: true },\n    { '$key': '^trigger', id: 't4', from: 'three', via: 'step', to: 'one', changed: true },\n    { '$key': '^trigger', id: 't5', from: 'one', via: 'step', to: 'two', changed: true },\n    { '$key': '^trigger', id: 't6', from: 'two', via: 'step', to: 'three', changed: true } ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic cFsm 1\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    #.......................................................................................................\n    triggers: [\n      [ 'void',     'start',    'released',   ]\n      [ '*',        'reset',    'void',       ]\n      [ 'released', 'press',    'pressed',    ]\n      [ 'pressed',  'release',  'released',   ] ]\n    enter:\n      pressed:  ( s ) -> @lamp.goto 'lit';   register \"button: enter pressed: #{srpr s}\"\n      released: ( s ) -> @lamp.goto 'dark';  register \"button: enter released: #{srpr s}\"\n    stay:\n      pressed:  ( s ) -> register \"button: stay pressed: #{srpr s}\"\n      released: ( s ) -> register \"button: stay released: #{srpr s}\"\n    after:\n      start: ( s ) -> @lamp.start()\n    before:\n      trigger: ( s ) -> register \"button: before *: #{srpr s}\"\n    goto: '*'\n    #.......................................................................................................\n    fsms:\n      #.....................................................................................................\n      lamp:\n        triggers: [\n          [ 'void',   'start',  'lit',  ]\n          [ 'lit',    'toggle', 'dark', ]\n          [ 'dark',   'toggle', 'lit',  ] ]\n        after:\n          change:     ( s ) -> register \"lamp: after change:  #{srpr s}\"\n        enter:\n          dark:       ( s ) -> @up.goto 'released';  register \"lamp: enter dark: #{srpr s}\"\n          lit:        ( s ) -> @up.goto 'pressed';   register \"lamp: enter lit: #{srpr s}\"\n        stay:\n          dark:       ( s ) -> register \"lamp: stay dark: #{srpr s}\"\n          lit:        ( s ) -> register \"lamp: stay lit: #{srpr s}\"\n        before:\n          trigger: ( s ) -> register \"lamp: before *: #{srpr s}\"\n        goto: '*'\n        bar:  108\n    #.......................................................................................................\n    after:\n      change: ( s ) -> register \"root_fsm.change\"\n    foo: 42\n  #---------------------------------------------------------------------------------------------------------\n  srpr            = ( s ) -> \"#{s.from}--#{s.via}->#{s.to}\"\n  { result\n    register }    = new_register()\n  #---------------------------------------------------------------------------------------------------------\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  button          = new Intermatic fsmd\n  T.eq button.foo,         42\n  T.eq button.lamp.bar, 108\n  info button.triggers\n  info { button: { $value: button.lstate, lamp: button.lamp.lstate, }, }\n  urge { button: button.lstate, 'button/lamp': button.lamp.lstate, }\n  urge { button: button.lstate, button_lamp: button.lamp.lstate, }\n  urge { root: button.lstate, lamp: button.lamp.lstate, }\n  help [ \"°button:^#{button.lstate}\", \"°button/lamp:^#{button.lamp.lstate}\", ]\n  button.start()\n  info { button: { $value: button.lstate, lamp: button.lamp.lstate, }, }\n  urge { button: button.lstate, 'button/lamp': button.lamp.lstate, }\n  urge { button: button.lstate, button_lamp: button.lamp.lstate, }\n  urge { root: button.lstate, lamp: button.lamp.lstate, }\n  help [ \"°button:^#{button.lstate}\", \"°button/lamp:^#{button.lamp.lstate}\", ]\n  button.press()\n  info { button: { $value: button.lstate, lamp: button.lamp.lstate, }, }\n  urge { button: button.lstate, 'button/lamp': button.lamp.lstate, }\n  urge { button: button.lstate, button_lamp: button.lamp.lstate, }\n  urge { root: button.lstate, lamp: button.lamp.lstate, }\n  help [ \"°button:^#{button.lstate}\", \"°button/lamp:^#{button.lamp.lstate}\", ]\n  T.eq result, [\n    'button: stay released: released--goto->released',\n    'lamp: enter dark: void--goto->dark',\n    'lamp: after change:  void--goto->dark',\n    'button: enter released: void--start->released',\n    'root_fsm.change',\n    'button: stay pressed: pressed--goto->pressed',\n    'lamp: enter lit: dark--goto->lit',\n    'lamp: after change:  dark--goto->lit',\n    'button: enter pressed: released--press->pressed',\n    'root_fsm.change' ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Intermatic cFsm 2\" ] = ( T, done ) ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    fsms:\n      alpha_btn:\n        #.......................................................................................................\n        triggers: [\n          [ 'void',     'start',    'released',   ]\n          [ '*',        'reset',    'void',       ]\n          [ 'released', 'press',    'pressed',    ]\n          [ 'pressed',  'release',  'released',   ] ]\n        # enter:\n        #   pressed:  ( s ) ->\n        #   released: ( s ) ->\n        before:\n          start:    ( s ) -> @lamp.start()\n        after:\n          change:   ( s ) ->\n            @lamp.toggle()\n            register { from: s.from, via: s.via, alpha_btn: @lstate, lamp: @lamp.lstate, color: @color.lstate, }\n        #.......................................................................................................\n        fsms:\n          #.....................................................................................................\n          color:\n            triggers: [\n              [ 'red', 'toggle', 'green', ]\n              [ 'green', 'toggle', 'red', ] ]\n            after:\n              change:   ( s ) -> register { from: s.from, via: s.via, alpha_btn_color: @lstate, }\n          #.....................................................................................................\n          lamp:\n            triggers: [\n              [ 'void',   'start',  'lit',  ]\n              [ 'lit',    'toggle', 'dark', ]\n              [ 'dark',   'toggle', 'lit',  ] ]\n            before:\n              start:    ( s ) -> @up.color.start()\n            enter:\n              dark:     ( s ) -> @up.color.toggle()\n            after:\n              change:   ( s ) -> register { from: s.from, via: s.via, alpha_btn_lamp: @lstate, }\n  #---------------------------------------------------------------------------------------------------------\n  srpr            = ( s ) -> \"#{s.from}--#{s.via}->#{s.to}\"\n  { result\n    register }    = new_register()\n  #---------------------------------------------------------------------------------------------------------\n  Intermatic      = require '../../../apps/intermatic'\n  Intermatic._tid = 0\n  fsm             = new Intermatic fsmd\n  # debug '^898922^', fsm\n  # debug '^898922^', ( k for k of fsm )\n  whisper '-----------'\n  whisper 'start'\n  fsm.alpha_btn.start()\n  whisper '-----------'\n  whisper 'press'\n  fsm.alpha_btn.press()\n  whisper '-----------'\n  whisper 'release'\n  fsm.alpha_btn.release()\n  whisper '-----------'\n  whisper 'press'\n  fsm.alpha_btn.press()\n  whisper '-----------'\n  whisper 'release'\n  fsm.alpha_btn.release()\n  whisper '-----------'\n  # debug result\n  T.eq result, [\n    { from: 'void', via: 'start', alpha_btn_color: 'green' }\n    { from: 'void', via: 'start', alpha_btn_lamp: 'lit' }\n    { from: 'green', via: 'toggle', alpha_btn_color: 'red' }\n    { from: 'lit', via: 'toggle', alpha_btn_lamp: 'dark' }\n    { from: 'void', via: 'start', alpha_btn: 'released', lamp: 'dark', color: 'red' }\n    { from: 'dark', via: 'toggle', alpha_btn_lamp: 'lit' }\n    { from: 'released', via: 'press', alpha_btn: 'pressed', lamp: 'lit', color: 'red' }\n    { from: 'red', via: 'toggle', alpha_btn_color: 'green' }\n    { from: 'lit', via: 'toggle', alpha_btn_lamp: 'dark' }\n    { from: 'pressed', via: 'release', alpha_btn: 'released', lamp: 'dark', color: 'green' }\n    { from: 'dark', via: 'toggle', alpha_btn_lamp: 'lit' }\n    { from: 'released', via: 'press', alpha_btn: 'pressed', lamp: 'lit', color: 'green' }\n    { from: 'green', via: 'toggle', alpha_btn_color: 'red' }\n    { from: 'lit', via: 'toggle', alpha_btn_lamp: 'dark' }\n    { from: 'pressed', via: 'release', alpha_btn: 'released', lamp: 'dark', color: 'red' } ]\n  #---------------------------------------------------------------------------------------------------------\n  done()\n\n\n############################################################################################################\nif module is require.main then do =>\n  # @demo_2()\n  # @toolbox_demo()\n  test @\n  # test @[ \"Intermatic catchalls 1\" ]\n  # test @[ \"Intermatic toolbox\" ]\n  # test @[ \"Intermatic tryto 1\" ]\n  # test @[ \"Intermatic tryto 2\" ]\n  # test @[ \"Intermatic cyclers 1\" ]\n  # test @[ \"Intermatic cFsm 1\" ]\n  # test @[ \"Intermatic cFsm\" ]\n  # test @[ \"Intermatic empty FSM\" ]\n  # test @[ \"Intermatic before.start(), after.start()\" ]\n  # @[ \"Intermatic empty FSM\" ]()\n\n\n\n"
  ]
}