{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-regulator.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/WATERTOWER'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nlog                       = urge\n#...........................................................................................................\ntest                      = require 'guy-test'\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  equals\n  validate\n  declare\n  type_of }               = types.export()\n{ freeze\n  lets }                  = require 'letsfreezethat'\n{ Intermatic, }           = require '../../../apps/intermatic'\nRecorder                  = require './recorder'\nafter                     = ( dts, f ) -> setTimeout  f, dts * 1000\nevery                     = ( dts, f ) -> setInterval f, dts * 1000\nsleep                     = ( dts ) -> new Promise ( done ) -> after dts, done\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nnew_regulator_fsm = ->\n  #---------------------------------------------------------------------------------------------------------\n  fsmd =\n    name: 'regulator'\n    moves:\n      start:        'idle'\n      chill:        'idle'\n      stop:\n        idle:       'stopped'\n      tick:\n        idle:       'idle'\n        growing:    'growing'\n        declare:    'declare'\n      set:\n        idle:       'idle'\n        growing:    'idle'\n      inc:\n        idle:       'growing'\n        growing:    'growing'\n      inc:\n        idle:       'shrinking'\n        shrinking:  'shrinking'\n    #.......................................................................................................\n    data:\n      tps:        5 # ticks per second\n      delta:     10\n      target:     0\n      value:      0\n    #.......................................................................................................\n    after:\n      # #.....................................................................................................\n      # tick: ( d ) -> whisper '^332^', \"tick\", d\n      #.....................................................................................................\n      inc: ( timer, handler ) ->\n        @data.value += @data.delta\n        # urge '^44445^', @EXP_dstate\n        if @data.value >= @data.target\n          clearInterval timer\n          @chill()\n          handler()\n      #.....................................................................................................\n      dec: ( timer, handler ) ->\n        @data.value -= @data.delta\n        # urge '^44445^', @EXP_dstate\n        if @data.value <= @data.target\n          clearInterval timer\n          @chill()\n          handler()\n      #.....................................................................................................\n      set: ( target, handler ) ->\n        @stop_all_timers()\n        @data.target  = target\n        delta         = Math.sign target - @data.value\n        # warn '^22332^', @move, @EXP_dstate\n        #...................................................................................................\n        if @data.value is target\n          return handler()\n        if @data.value < target then  timer = every 1 / @data.tps, => @inc timer, handler\n        else                          timer = every 1 / @data.tps, => @dec timer, handler\n        #...................................................................................................\n        @timers.push timer\n        return null\n    #.......................................................................................................\n    stop_all_timers: ->\n      for timer in @timers\n        clearInterval timer\n      return null\n    timers: []\n  #---------------------------------------------------------------------------------------------------------\n  return new Intermatic fsmd\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_regulator = ->\n  BAR = require '../../../apps/intertext/lib/bar'\n  new_spinner = require 'ora' ### https://www.skypack.dev/view/ora ###\n  # spinner     = new_spinner { spinner: 'boxBounce2', }\n  # spinner     = new_spinner { spinner: 'noise', }\n  spinner     = new_spinner { spinner: 'growVertical', }\n  # spinner     = new_spinner { spinner: 'moon', }\n  # spinner     = new_spinner { spinner: 'bouncingBall', }\n  # spinner     = new_spinner { spinner: 'material', }\n  spinner.start()\n  # after 1, ->\n  #   spinner.color = 'yellow'\n  #   # spinner.text  = 'Loading rainbows'\n  fsm       = new_regulator_fsm()\n  # recorder  = new Recorder fsm\n  prv_value = null\n  every 0.21, ->\n    return if fsm.data.value is prv_value\n    # spinner.succeed()\n    prv_value = fsm.data.value\n    bar       = BAR.percentage_bar fsm.data.value\n    help bar, fsm.EXP_dstate\n  fsm.start()\n  fsm.scoobydoo = ( verb, P... ) ->\n    p = ( require 'util' ).promisify\n    ( p @[ verb ] ) P...\n  # await ( p fsm.set ) 10\n  fsm.scoobydoo 'set', 100\n  after 2, -> fsm.scoobydoo 'set', 30\n  after 5, -> fsm.scoobydoo 'set', 80\n  # ( p fsm.set ) 10\n  info fsm.EXP_dstate\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_watertower()\n  await demo_regulator()\n\n\n\n"
  ]
}