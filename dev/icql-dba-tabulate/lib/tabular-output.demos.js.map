{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/tabular-output.demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/DEMOS/TABULATE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# test                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\n# on_process_exit           = require 'exit-hook'\n# sleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\nSQL                       = String.raw\nH =\n  icql_dba_path: '../../../apps/icql-dba'\n\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ndemo_intertext_tabulate_3 = -> new Promise ( resolve, reject ) =>\n  { Tbl, }    = require '../../../apps/icql-dba-tabulate'\n  { Dba, }    = require H.icql_dba_path\n  db_path     = PATH.resolve PATH.join __dirname, '../../../data/dpan.sqlite'\n  urge \"^487^ using DB at #{db_path}\"\n  dba         = new Dba()\n  dba.open { path: db_path, }\n  dbatbl      = new Tbl { dba, }\n  for line from dbatbl.walk_relation_lines { name: 'dpan_tags', }\n    echo CND.lime line\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_intertext_tabulate_2 = -> new Promise ( resolve, reject ) =>\n  { Tbl, }    = require '../../../apps/icql-dba-tabulate'\n  { Dba, }    = require H.icql_dba_path\n  db_path     = PATH.resolve PATH.join __dirname, '../../../data/dpan.sqlite'\n  urge \"^487^ using DB at #{db_path}\"\n  dba         = new Dba()\n  dba.open { path: db_path, }\n  dbatbl      = new Tbl { dba, }\n  query       = dba.query SQL\"select * from dpan_tags limit 500;\"\n  urge '^337^', dbatbl._tabulate query\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_intertext_tabulate_1()\n  demo_intertext_tabulate_2()\n  demo_intertext_tabulate_3()\n  # demo_intertext_tabulate_5()\n\n\n\n\n\n\n\n"
  ]
}