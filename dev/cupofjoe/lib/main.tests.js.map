{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'CUPOFJOE/TESTS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\n#...........................................................................................................\n# # types                     = require '../types'\n# { isa\n#   validate\n#   type_of }               = ( new ( require 'intertype' ).Intertype() ).export()\n#...........................................................................................................\n# CUPOFJOE                 = require '../../../apps/cupofjoe'\n{ jr }                    = CND\ntest                      = require 'guy-test'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"CUP demo 1\" ] = ( T, done ) ->\n  # debug ( k for k of ( require '../../../apps/cupofjoe' ) ); process.exit 1\n  { Cupofjoe }  = require '../../../apps/cupofjoe'\n  cupofjoe      = new Cupofjoe()\n  { cram\n    expand }    = cupofjoe.export()\n  #.........................................................................................................\n  cram null, ->\n    cram 'pre1'\n    cram 'pre2', 'wat'\n    cram 'one', ->\n      cram 'two', 42\n      cram 'three', ->\n        cram 'four', ->\n          cram 'five', ->\n            cram 'six'\n    cram 'post'\n  help rpr cupofjoe\n  ds = expand()\n  info rpr ds\n  info jr ds.flat Infinity\n  # urge '^4443^', ds\n  T.eq ds, [\n    [ 'pre1' ],\n    [ 'pre2', 'wat' ],\n    [ 'one',\n      [ 'two', 42 ],\n      [ 'three',\n        [ 'four', [ 'five', [ 'six' ] ] ] ] ],\n    [ 'post' ] ]\n  #.........................................................................................................\n  done() if done?\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"CUP demo 2\" ] = ( T, done ) ->\n  cupofjoe = new ( require '../../../apps/cupofjoe' ).Cupofjoe()\n  { cram\n    expand }  = cupofjoe.export()\n  #.........................................................................................................\n  DATOM                     = new ( require 'datom' ).Datom { dirty: false, }\n  { new_datom\n    lets\n    select }                = DATOM.export()\n  #.........................................................................................................\n  h = ( tagname, content... ) ->\n    if content.length is 0\n      d = new_datom \"^#{tagname}\"\n      return cram d, content...\n    d1 = new_datom \"<#{tagname}\"\n    d2 = new_datom \">#{tagname}\"\n    return cram d1, content..., d2\n  #.........................................................................................................\n  cram null, ->\n    h 'pre1'\n    cram null\n    h 'pre2', 'wat'\n    h 'one', ->\n      h 'two', ( new_datom '^text', text: '42' )\n      h 'three', ->\n        h 'four', ->\n          h 'five', ->\n            h 'six', ->\n              cram ( new_datom '^text', text: 'bottom' )\n    h 'post'\n  urge rpr cupofjoe.collector\n  ds = expand()\n  info jr ds\n  T.eq ds, [\n    [ { '$key': '^pre1' } ],\n    [ { '$key': '<pre2' }, 'wat', { '$key': '>pre2' } ],\n    [ { '$key': '<one' },\n      [ { '$key': '<two' },\n        { text: '42', '$key': '^text' },\n        { '$key': '>two' } ],\n      [ { '$key': '<three' },\n        [ { '$key': '<four' },\n          [ { '$key': '<five' },\n            [ { '$key': '<six' },\n              [ { text: 'bottom', '$key': '^text' } ],\n              { '$key': '>six' } ],\n            { '$key': '>five' } ],\n          { '$key': '>four' } ],\n        { '$key': '>three' } ],\n      { '$key': '>one' } ],\n    [ { '$key': '^post' } ] ]\n  #.........................................................................................................\n  done() if done?\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"CUP demo 2 flat\" ] = ( T, done ) ->\n  cupofjoe = new ( require '../../../apps/cupofjoe' ).Cupofjoe { flatten: true, }\n  { cram\n    expand }  = cupofjoe.export()\n  #.........................................................................................................\n  DATOM                     = new ( require 'datom' ).Datom { dirty: false, }\n  { new_datom\n    lets\n    select }                = DATOM.export()\n  #.........................................................................................................\n  h = ( tagname, content... ) ->\n    if content.length is 0\n      d = new_datom \"^#{tagname}\"\n      return cram d, content...\n    d1 = new_datom \"<#{tagname}\"\n    d2 = new_datom \">#{tagname}\"\n    return cram d1, content..., d2\n  #.........................................................................................................\n  cram null, ->\n    h 'pre1'\n    cram null\n    h 'pre2', 'wat'\n    h 'one', ->\n      h 'two', ( new_datom '^text', text: '42' )\n      h 'three', ->\n        h 'four', ->\n          h 'five', ->\n            h 'six', ->\n              cram ( new_datom '^text', text: 'bottom' )\n    h 'post'\n  urge rpr cupofjoe.collector\n  ds = expand()\n  info jr ds\n  T.eq ds, [\n    { '$key': '^pre1' }\n    { '$key': '<pre2' }\n    'wat',\n    { '$key': '>pre2' }\n    { '$key': '<one' }\n    { '$key': '<two' }\n    { text: '42', '$key': '^text' }\n    { '$key': '>two' }\n    { '$key': '<three' }\n    { '$key': '<four' }\n    { '$key': '<five' }\n    { '$key': '<six' }\n    { text: 'bottom', '$key': '^text' }\n    { '$key': '>six' }\n    { '$key': '>five' }\n    { '$key': '>four' }\n    { '$key': '>three' }\n    { '$key': '>one' }\n    { '$key': '^post' } ]\n  #.........................................................................................................\n  done() if done?\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"CUP demo 3\" ] = ( T, done ) ->\n  cupofjoe = new ( require '../../../apps/cupofjoe' ).Cupofjoe()\n  { cram\n    expand\n    expand_async } = cupofjoe.export()\n  #.........................................................................................................\n  sleep   = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\n  request = -> await sleep 0; return 'request complete'\n  #.........................................................................................................\n  cram null, ->\n    cram 'pre'\n    cram 'one', ->\n      cram 'two', await request()\n  # urge rpr CUP.collector\n  ds = await expand_async()\n  info jr ds\n  T.eq ds, [ [ 'pre' ], [ 'one', [ 'two', 'request complete' ] ] ]\n  #.........................................................................................................\n  done() if done?\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"CUP demo reformat\" ] = ( T, done ) ->\n  cupofjoe = new ( require '../../../apps/cupofjoe' ).Cupofjoe { flatten: true, }\n  { cram\n    expand } = cupofjoe.export()\n  #.........................................................................................................\n  h = ( tagname, content... ) ->\n    return cram content...      if ( not tagname? ) or ( tagname is 'text' )\n    return cram \"<#{tagname}/>\" if content.length is 0\n    return cram \"<#{tagname}>\", content..., \"</#{tagname}>\"\n  #.........................................................................................................\n  h 'paper', ->\n    h 'article', ->\n      h 'title', \"Some Thoughts on Nested Data Structures\"\n      h 'par', ->\n        h 'text',   \"A interesting \"\n        h 'em',     \"fact\"\n        h 'text',   \" about CupOfJoe is that you \"\n        h 'em',     \"can\"\n        h 'text',   \" nest with both sequences and function calls.\"\n    h 'conclusion', ->\n      h 'text',   \"With CupOfJoe, you don't need brackets.\"\n  html = expand().join '|'\n  info jr html\n  # info html\n  T.eq html, \"<paper>|<article>|<title>|Some Thoughts on Nested Data Structures|</title>|<par>|A interesting |<em>|fact|</em>| about CupOfJoe is that you |<em>|can|</em>| nest with both sequences and function calls.|</par>|</article>|<conclusion>|With CupOfJoe, you don't need brackets.|</conclusion>|</paper>\"\n  #.........................................................................................................\n  done() if done?\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"_CUP cram w/out functions\" ] = ( T, done ) ->\n#   # debug ( k for k of ( require '../../../apps/cupofjoe' ) ); process.exit 1\n#   cupofjoe = new ( require '../../../apps/cupofjoe' ).Cupofjoe()\n#   { cram\n#     expand }  = cupofjoe.export()\n#   #.........................................................................................................\n#   cram null\n#   cram null, null\n#   cram 'first'\n#   cram [ 'one', ]\n#   cram 'two', 'three', 'four'\n#   cram undefined, null\n#   cram 'five', 'six', 'seven', 'eight'\n#   result = expand()\n#   urge '^7777^', result\n#   T.eq result, [\"first\",\"one\",[\"two\",\"three\",\"four\"],[\"five\",\"six\",\"seven\",\"eight\"]]\n#   cram 'ten'\n#   result = expand()\n#   T.eq result, [\"first\",\"one\",[\"two\",\"three\",\"four\"],[\"five\",\"six\",\"seven\",\"eight\"],[\"ten\"]]\n#   #.........................................................................................................\n#   done() if done?\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"CUP _unwrap\" ] = ( T, done ) ->\n  cupofjoe = new ( require '../../../apps/cupofjoe' ).Cupofjoe()\n  { _unwrap\n    expand }  = cupofjoe.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [], [], null ]\n    [ [ null ], [ null ], null ]\n    [ [ null, null ], [ null, null ], null ]\n    [ [ null, null, undefined ], [ null, null, undefined ], null ]\n    [ [ null, null, [] ], [ null, null, [] ], null ]\n    [ [ null, null, [ [] ] ], [ null, null, [ [] ] ], null ]\n    [ [ [ 'foo' ] ], [ 'foo' ], null ]\n    [ [ 'a', 'b', [ 'c' ] ], [ 'a', 'b', [ 'c' ] ], null ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      resolve _unwrap probe\n  #.........................................................................................................\n  done()\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  test @\n  # test @[ \"CUP cram w/out functions\" ]\n  # @[ \"CUP demo 1\" ]()\n  # test @[ \"expand()\" ]\n  # test @[ \"CUP configuration\" ]\n  # test @[ \"CUP demo 2\" ]\n  # test @[ \"CUP demo 3\" ]\n\n\n"
  ]
}