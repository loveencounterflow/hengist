{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/basic.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-CMUDICT/TESTS/BASIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# H                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nr                         = String.raw\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY-CMUDICT object creation\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require '../../../apps/dbay'\n  { Cmud }          = require '../../../apps/dbay-cmudict'\n  path              = PATH.resolve PATH.join __dirname, '../../../data/dbay-cmudict.sqlite'\n  db                = new DBay { temporary: true, }\n  cmud              = new Cmud { db, path, rebuild: true, max_entry_count: 10000, }\n  debug '^3344^', cmud.cfg\n  { schema,   } = cmud.cfg\n  { I, L, V,  } = db.sql\n  #.........................................................................................................\n  info db.all_rows SQL\"\"\"select * from sqlite_schema;\"\"\"\n  info db.all_first_values SQL\"\"\"select name from #{I schema}.sqlite_schema;\"\"\"\n  #.........................................................................................................\n  done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"DBAY-CMUDICT ipa rewriting\" ] = ( T, done ) ->\n#   # T?.halt_on_error()\n#   path              = PATH.resolve PATH.join __dirname, '../../../data/dbay-cmudict.sqlite'\n#   { DBay }          = require '../../../apps/dbay'\n#   { Cmud }          = require '../../../apps/dbay-cmudict'\n#   db                = new DBay { temporary: true, }\n#   cmud              = new Cmud { db, path, rebuild: false, }\n#   #.........................................................................................................\n#   probes_and_matchers = [\n#     [ 'k ɝ0 ɪ1 r',          null, ]\n#     [ 'b ɪ1 r m ʌ0 n',      null, ]\n#     ]\n#   #.........................................................................................................\n#   for [ probe, matcher, ] in probes_and_matchers\n#     debug probe.match /ɝ0/g #   'ə0 r'\n#     info cmud.ipa_from_ipa_raw probe\n#   #.........................................................................................................\n#   done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY-CMUDICT _rewrite_beep_word\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require '../../../apps/dbay'\n  { Cmud }          = require '../../../apps/dbay-cmudict'\n  path              = PATH.resolve PATH.join __dirname, '../../../data/dbay-cmudict.sqlite'\n  db                = new DBay { temporary: true, }\n  cmud              = new Cmud { db, path, rebuild: false, }\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'b\\\\^ete',                  \"bête\",           ]\n    [ \"caf\\\\'e\",                  \"café\",           ]\n    [ \"brassi\\\\`ere\",             \"brassière\",      ]\n    [ \"ch\\\\^ateau\",               \"château\",        ]\n    [ \"\\\\'ep\\\\'ees\",              \"épées\",          ]\n    [ \"table_d'h\\\\^ote\",          \"table d'hôte\",   ]\n    [ \"t\\\\^ete-\\\\`a-t\\\\^ete\",     \"tête-à-tête\",    ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, ] in probes_and_matchers\n    result = ( cmud._rewrite_beep_word probe )\n    info result\n    T?.eq result, matcher\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # test @, { timeout: 10e3, }\n  # @[ \"DBAY-CMUDICT ipa rewriting\" ]()\n  test @[ \"DBAY-CMUDICT _rewrite_beep_word\" ]\n\n\n\n\n\n\n"
  ]
}