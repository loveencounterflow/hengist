{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demos.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,yBAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,MAAF,EACE,GADF,EAEE,OAFF,EAGE,QAHF,EAIE,gBAJF,CAAA,GAI4B,KAAK,CAAC,MAAN,CAAA,CAJ5B;;EAKA,GAAA,GAA4B,MAAM,CAAC;;EACnC,GAAA,GAA4B,OAAA,CAAQ,mBAAR,EAvB5B;;;EA0BA,MAAA,GAAS,QAAA,CAAA,CAAA;AACT,QAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA;IAAE,CAAA,CAAE,IAAF,CAAA,GAAoB,OAAA,CAAQ,oBAAR,CAApB;IACA,CAAA,CAAE,IAAF,CAAA,GAAoB,OAAA,CAAQ,4BAAR,CAApB;IACA,EAAA,GAAoB,IAAI,IAAJ,CAAA;IACpB,IAAA,GAAoB,IAAI,IAAJ,CAAS;MAAE,EAAF;MAAM,MAAA,EAAQ;IAAd,CAAT;IACpB,IAAA,CAAK,IAAL;AACA,WAAO;EANA,EA1BT;;;EAmCA,yBAAA,GAA4B,QAAA,CAAA,CAAA;AAC5B,QAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA;IAAE,CAAA,CAAE,IAAF,CAAA,GAAoB,OAAA,CAAQ,oBAAR,CAApB;IACA,CAAA,CAAE,IAAF,CAAA,GAAoB,OAAA,CAAQ,4BAAR,CAApB;IACA,EAAA,GAAoB,IAAI,IAAJ,CAAA;IACpB,EAAE,CAAC,aAAH,CAAA;IACA,IAAA,GAAoB,IAAI,IAAJ,CAAS,CAAE,EAAF,CAAT;IACpB,CAAA,CAAE,GAAF,CAAA,GAAoB,OAAA,CAAQ,iCAAR,CAApB;IACA,IAAA,GAAkB,IAAI,GAAJ,CAAc;MAAE,GAAA,EAAK;IAAP,CAAd,EANpB;;IAQE,EAAA,CAAG,QAAA,CAAA,CAAA;MACD,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,EAAA,CAAG,GAAG,CAAA;;;;;;YAAA,CAAN,CAAf,CAAL;AAQA,aAAO;IATN,CAAH;AAUA,WAAO;EAnBmB,EAnC5B;;;EA2DA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA;;;aAGhC,yBAAA,CAAA;IAHgC,CAAA,IAAlC;;AA3DA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-CMUDICT/DEMOS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype\n{ equals\n  isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  { DBay }          = require '../../../apps/dbay'\n  { Cmud }          = require '../../../apps/dbay-cmudict'\n  db                = new DBay()\n  cmud              = new Cmud { db, create: true, }\n  info cmud\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_count_transcriptions = ->\n  { DBay }          = require '../../../apps/dbay'\n  { Cmud }          = require '../../../apps/dbay-cmudict'\n  db                = new DBay()\n  db.create_stdlib()\n  cmud              = new Cmud { db, }\n  { Tbl, }          = require '../../../apps/icql-dba-tabulate'\n  dtab            = new Tbl       { dba: db, }\n  # echo dtab._tabulate db SQL\"select 42;\"\n  db ->\n    echo dtab._tabulate db SQL\"\"\"\n      select\n          word as word,\n          abs1 as abs1\n        from entries\n        where word glob 'n*'\n        order by word\n        limit 100;\"\"\"\n    return null\n  return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # await demo_f()\n  # demo_1()\n  demo_count_transcriptions()\n"
  ]
}