{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-class-api.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER/TESTS/TOPOSORT'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate }              = types\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nshow = ( topograph ) ->\n  LTSORT                    = require '../../../apps/ltsort'\n  try dependencies = LTSORT.group topograph catch error\n    throw error unless ( error.message.match /detected cycle involving node/ )?\n    warn GUY.trm.reverse error.message\n    warn '^08-1^', GUY.trm.reverse error.message\n    # throw new DBay_sqlm_circular_references_error '^dbay/dbm@4^', name, ref_name\n  info '^08-2^', dependencies\n  try ordering = LTSORT.linearize topograph catch error\n    throw error unless ( error.message.match /detected cycle involving node/ )?\n    warn '^08-3^', GUY.trm.reverse error.message\n    # throw new DBay_sqlm_circular_references_error '^dbay/dbm@4^', name, ref_name\n  table = []\n  for [ name, precedents, ] from topograph.precedents.entries()\n    precedents = precedents.join ', '\n    table.push { name, precedents, }\n  H.tabulate \"topograph\", table\n  info '^08-4^', ( GUY.trm.yellow x for x in ordering ).join GUY.trm.grey ' => '\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@instantiation = ( T, done ) ->\n  { Ltsort }  = require '../../../apps/ltsort'\n  g           = new Ltsort()\n  debug '^40-1^', g\n  T?.eq ( rpr g ), \"Ltsort { cfg: { loners: true } }\"\n  T?.eq g.cfg.loners, true\n  T?.eq g.linearize(), []\n  T?.eq ( g.linearize { groups: true, } ), [[]]\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@add_nodes = ( T, done ) ->\n  { Ltsort }  = require '../../../apps/ltsort'\n  g           = new Ltsort()\n  T?.eq ( type_of g.add ), 'function'\n  #.........................................................................................................\n  g.add { name: 'first', }\n  g.add { name: 'second', }\n  g.add { name: 'third', }\n  #.........................................................................................................\n  do ->\n    result      = g.linearize()\n    T?.eq result, [ 'first', 'second', 'third', ]\n  #.........................................................................................................\n  do ->\n    result      = g.linearize { groups: true, }\n    T?.eq result, [ [ 'first', 'second', 'third' ] ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@use_relatives = ( T, done ) ->\n  { Ltsort }  = require '../../../apps/ltsort'\n  g           = new Ltsort()\n  #.........................................................................................................\n  g.add { name: 'getup',                                    }\n  g.add { name: 'brushteeth',                               }\n  g.add { name: 'shop',                                     }\n  g.add { name: 'cook',                   precedes: 'eat',    }\n  g.add { name: 'serve',  needs: 'cook',  precedes: 'eat',    }\n  g.add { name: 'dishes', needs: 'eat',   precedes: 'sleep',  }\n  g.add { name: 'loner1',                                   }\n  g.add { name: 'loner2',                                   }\n  g.add { name: 'loner3',                                   }\n  g.add { name: 'sleep',                                    }\n  g.add { name: 'eat',    needs: [ 'cook', 'shop', ],       }\n  #.........................................................................................................\n  do ->\n    result      = g.linearize()\n    T?.eq result, [ 'getup', 'brushteeth', 'shop', 'cook', 'serve', 'eat', 'dishes', 'sleep', 'loner1', 'loner2', 'loner3' ]\n  #.........................................................................................................\n  do ->\n    result      = g.linearize { groups: true, }\n    T?.eq result, [ [ 'getup', 'brushteeth', 'loner1', 'loner2', 'loner3' ], [ 'shop', 'cook' ], [ 'serve' ], [ 'eat' ], [ 'dishes' ], [ 'sleep' ] ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@use_global_relatives = ( T, done ) ->\n  { Ltsort }  = require '../../../apps/ltsort'\n  g           = new Ltsort()\n  #.........................................................................................................\n  g.add { name: 'cook',                       precedes: 'eat',  }\n  g.add { name: 'serve',      needs: 'cook',  precedes: 'eat',  }\n  g.add { name: 'eat',        needs: [ 'cook', 'shop', ],     }\n  g.add { name: 'shop',                       precedes: '*',    }\n  g.add { name: 'brushteeth',                 precedes: '*',    }\n  g.add { name: 'getup',                      precedes: '*',    }\n  g.add { name: 'dishes',     needs: '*',                     }\n  g.add { name: 'sleep',      needs: '*',                     }\n  g.add { name: 'loner1',                                     }\n  g.add { name: 'loner2',                                     }\n  g.add { name: 'loner3',                                     }\n  #.........................................................................................................\n  do ->\n    result      = g.linearize()\n    T?.eq result, [ 'getup', 'brushteeth', 'shop', 'cook', 'serve', 'eat', 'dishes', 'sleep', 'loner1', 'loner2', 'loner3' ]\n  #.........................................................................................................\n  do ->\n    result      = g.linearize { groups: true, }\n    T?.eq result, [ [ 'loner1', 'loner2', 'loner3' ], [ 'getup' ], [ 'brushteeth' ], [ 'shop' ], [ 'cook' ], [ 'serve' ], [ 'eat' ], [ 'dishes' ], [ 'sleep' ] ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@before_and_after_with_antecedents_and_subsequents_1 = ( T, done ) ->\n  { Ltsort }  = require '../../../apps/ltsort'\n  #.........................................................................................................\n  g           = new Ltsort()\n  g.add { name: 't1',   precedes: '*',    }\n  g.add { name: 't2',   precedes: '*',    }\n  g.add { name: 't3',   precedes: '*',    }\n  g.add { name: 'middle',               }\n  T?.eq g.linearize(),  [ 't3', 't2', 't1', 'middle' ]\n  g.add { name: 'bully-t3-precedes', precedes: 't3',  }\n  g.add { name: 'bully-t3-needs', needs: 't3',  }\n  debug '^23-1^', g.precedents\n  T?.eq ( g.linearize() ), [ 'bully-t3-precedes', 't3', 't2', 't1', 'bully-t3-needs', 'middle' ]\n  #.........................................................................................................\n  done?()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@before_and_after_with_antecedents_and_subsequents_2 = ( T, done ) ->\n  { Ltsort }  = require '../../../apps/ltsort'\n  #.........................................................................................................\n  g           = new Ltsort()\n  g.add { name: 't3',   needs: '*',    }\n  g.add { name: 't2',   needs: '*',    }\n  g.add { name: 't1',   needs: '*',    }\n  g.add { name: 'middle',               }\n  T?.eq ( g.linearize() ), [ 't3', 't2', 't1', 'middle', ]\n  g.add { name: 'middle', needs: 't3', precedes: 't2', }\n  T?.eq ( g.linearize() ), [ 't3', 'middle', 't2', 't1', ]\n  g.add { name: 'bully-t1-needs', needs: 't1',  }\n  g.add { name: 'bully-t1-precedes', precedes: 't1',  }\n  T?.eq ( g.linearize() ), [ 't3', 'middle', 't2', 'bully-t1-precedes', 't1', 'bully-t1-needs' ]\n  #.........................................................................................................\n  done?()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@before_and_after_with_antecedents_and_subsequents_3 = ( T, done ) ->\n  { Ltsort }  = require '../../../apps/ltsort'\n  #.........................................................................................................\n  g           = new Ltsort()\n  g.add { name: 'top3',     precedes: '*',  }\n  g.add { name: 'top2',     precedes: '*',  }\n  g.add { name: 'top1',     precedes: '*',  }\n  g.add { name: 'bottom3',  needs: '*',   }\n  g.add { name: 'bottom2',  needs: '*',   }\n  g.add { name: 'bottom1',  needs: '*',   }\n  g.add { name: 'middle',   needs: 'top3', precedes: 'bottom3', }\n  T?.eq g.linearize(),  [ 'top1', 'top2', 'top3', 'middle', 'bottom3', 'bottom2', 'bottom1' ]\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @_toposort()\n  test @\n  # @instantiation()\n  # test @instantiation\n  # test @add_nodes\n  # @use_global_relatives()\n  # test @use_global_relatives\n  # test @before_and_after_with_antecedents_and_subsequents_3\n\n"
  ]
}