{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/configurator.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'CONFIGURATOR'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nflatten                   = require 'flat'\nH                         = require '../../../lib/helpers'\nOSPATH                    = require 'ospath'\nTOML                      = require '@iarna/toml'\nmodule_name               = 'hengist'\nfilename                  = \".#{module_name}.toml\"\nFINDUP                    = require 'find-up'\n# { findUp\n#   pathExists} from 'find-up'\n\n#-----------------------------------------------------------------------------------------------------------\nget_cfg_search_path = ->\n  R     = []\n  path  = FINDUP.sync filename, { cwd: process.cwd(), };  R.push path if path?\n  path  = PATH.join OSPATH.home(), filename;              R.push path if FINDUP.sync.exists path\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nread_cfg = ->\n  R = { $routes: [], }\n  for route, route_idx in get_cfg_search_path()\n    try\n      partial_cfg = TOML.parse FS.readFileSync route\n    catch error\n      throw error unless error.code is 'ENOENT'\n      warn \"^cfg@1^ no such file: #{rpr path}, skipping\"\n      continue\n    R.$routes.push route\n    partial_cfg   = flatten partial_cfg, { delimiter: '.', safe: true, }\n    R             = { R..., partial_cfg..., }\n  return R\n\n\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  cfg           = read_cfg()\n  cfg           = ( { key, value, } for key, value of cfg )\n  H.tabulate \"cfg\", cfg\n\n\n\n\n\n\n\n"
  ]
}