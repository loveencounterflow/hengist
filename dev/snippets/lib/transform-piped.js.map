{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/transform-piped.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "#!node\n\nCND                       = require 'cnd'\nbadge                     = 'TP'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\n# urge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ stdin\n  stdout\n  stderr }                = process\nSP                        = require 'steampipes'\n{ $\n  $watch\n  $drain\n  $show }                 = SP.export()\nurge = ( P... ) -> stderr.write CND.gold ( ( p.toString() for p in P ).join ' ' ) + '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\n$transform = ->\n  return $ ( line, send ) =>\n    line  = line.replace /(<!DOCTYPE html>)/g, '$1\\n'\n    line  = line.replace /(<meta [^>]+>)/g, '$1\\n'\n    line  = line.replace /(<\\/[^>]+>)/g, '$1\\n'\n    line  = line.replace /(\\x20\\/>)/g, '$1\\n'\n    send line\n\n#-----------------------------------------------------------------------------------------------------------\n$tee_to_stdout = ->\n  return $ ( line, send ) =>\n    stdout.write line + '\\n'\n    send line\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = -> new Promise ( resolve, reject ) ->\n  source    = SP.new_push_source()\n  pipeline  = []\n  #.........................................................................................................\n  pipeline.push source\n  pipeline.push SP.$split()\n  pipeline.push $transform()\n  pipeline.push $tee_to_stdout()\n  # pipeline.push $show()\n  pipeline.push $drain ->\n    # urge \"stdin ended\"\n    resolve()\n  #.........................................................................................................\n  stdin.on 'data', ( data ) ->\n    source.send data\n    lines = ( data.toString 'utf-8' )\n  #.........................................................................................................\n  stdin.on 'end', ->\n    source.end()\n  #.........................................................................................................\n  stdin.on 'error', ( error ) ->\n    warn \"**************\" + error\n  #.........................................................................................................\n  stdin.resume()\n  SP.pull pipeline...\n\n\n############################################################################################################\nif module is require.main then do =>\n  await demo()\n\n\n"
  ]
}