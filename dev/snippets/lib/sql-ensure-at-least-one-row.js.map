{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sql-ensure-at-least-one-row.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/ENSURE-ONE-ROW'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require '../../../apps/guy'\n# { HDML }                  = require '../../../apps/hdml'\nX                         = require '../../../lib/helpers'\n{ lets\n  freeze }                = GUY.lft\n{ to_width }              = require 'to-width'\n{ DBay }                  = require '../../../apps/dbay'\n{ Sql }                   = require '../../../apps/dbay/lib/sql'\n{ SQL }                   = DBay\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ntabulate = ( db, query ) -> X.tabulate query, db query\n\n#-----------------------------------------------------------------------------------------------------------\nprovide_db_infrastructure = ( db ) ->\n  db.create_stdlib()\n  db SQL\"\"\"\n    create table rawfs (\n        nid   integer not null primary key,\n        upid  integer references rawfs ( nid ),\n        upath text    not null,\n        name  text    not null );\n    insert into rawfs ( nid, upid, upath, name ) values ( 0, null, '', '' );\n    \"\"\"\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_ensure_one_row = ->\n  db = new DBay()\n  provide_db_infrastructure db\n  #.........................................................................................................\n  insert_node = db.prepare SQL\"\"\"\n    insert into rawfs ( upid, upath, name )\n      select\n          $upid,\n          -- coalesce( upath, '' ) || name || '/',\n          upath || case upath when '/' then '' else '/' end || name,\n          $name\n        from rawfs\n        where true\n          and nid = $upid\n      returning *;\"\"\"\n  #.........................................................................................................\n  { nid: upid, } = insert_node.get  { upid: 0, name: 'lib',   }\n  insert_node.get                   { upid, name: 'main.js',  }\n  insert_node.get                   { upid, name: 'foo.js',   }\n  { nid: upid, } = insert_node.get  { upid, name: 'tests',    }\n  insert_node.get                   { upid, name: 'bar.js',   }\n  tabulate db, SQL\"\"\"select * from rawfs;\"\"\"\n  # tabulate db, SQL\"\"\"select * from fs;\"\"\"\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  @demo_ensure_one_row()\n\n\n\n"
  ]
}