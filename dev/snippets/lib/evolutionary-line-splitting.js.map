{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/evolutionary-line-splitting.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/SNIPPETS/EVOLUTIONARY-LINE-SPLITTING'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\n#...........................................................................................................\nDATOM                     = new ( require 'datom' ).Datom { dirty: false, }\n{ new_datom\n  lets\n  select }                = DATOM.export()\n#...........................................................................................................\n# test                      = require 'guy-test'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  declare\n  validate\n  cast\n  type_of }               = types.export()\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'EVO_population', tests:\n  \"x is an object\":                       ( x ) -> @isa.object x\n  \"x.players is a list_of EVO_player\":    ( x ) -> @isa.list_of 'EVO_player', x.players\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'EVO_player', tests:\n  \"x is an object\":                       ( x ) -> @isa.object x\n  \"x.dna is a EVO_dna\":                   ( x ) -> @isa.EVO_dna x.dna\n  \"x.score is a float\":                   ( x ) -> @isa.float x.score\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'EVO_dna', tests:\n  \"x is a nonempty_text\":                 ( x ) -> @isa.nonempty_text x\n  \"x consists of letters, pipes, spaces\": ( x ) -> /^[a-zA-Z.,|\\x20]+$/.test x\n  \"no pipe symbol next to space\":         ( x ) -> not /// ( \\s [|] ) | ( [|] \\s ) ///.test x\n\n#-----------------------------------------------------------------------------------------------------------\n@score_from_dna = ( line_width, dna ) ->\n  validate.positive_integer line_width\n  validate.EVO_dna dna\n  R         = 0\n  lines     = dna.split '|'\n  last_idx  = lines.length - 1\n  for line, line_idx in lines\n    score         = 0\n    is_last_line  = line_idx is last_idx\n    delta         = line_width - line.length\n    line_too_long = delta < 0\n    # return null if line_too_long\n    delta         = Math.abs delta\n    exponent      = if line_too_long then 4 else 2\n    score         = -( delta ** exponent )\n    # if is_last_line\n    #   if line_too_long\n    #     score = -100 * delta ** 2\n    #   else\n    #     score = 0 # -10 * delta\n    # else\n    #   if line_too_long\n    #     score = -100 * delta ** 2\n    #   else\n    #     score     = -10 * delta\n    #     nxt_line  = lines[ line_idx ]\n    #     match     = nxt_line.match /^[^\\x20|]+/\n    #     if ( match[ 0 ].length + line.length ) < line_width\n    #       score = -500000\n    R      += score\n  # for line, line_idx in lines\n  #   delta   = line_width - line.length\n  #   if delta < 0  then  delta *= 1.5\n  #   else                delta *= 1\n  #   delta   = 0 if line_idx is last_idx and delta > 0\n  #   delta   = delta ** 4\n  #   score   = -delta\n  #   R      += score\n  return R / lines.length\n  #   score  *= overshoot_factor\n  # return ( R / lines.length ** 2 ) * 100\n\n#-----------------------------------------------------------------------------------------------------------\n@mutate_dna = ( dna ) ->\n  validate.EVO_dna dna\n  threshold   = 0.1\n  lo          = 0\n  hi          = dna.length\n  separators  = [ '\\x20', '|', ]\n  for chr, idx in chrs = Array.from dna\n    continue unless chr in separators\n    continue unless Math.random() > threshold\n    chrs[ idx ] = if chr is '\\x20' then '|' else '\\x20'\n  return chrs.join ''\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo = ->\n  dna = 'foo bar buzz|blah dang sux hey'\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await @_demo()\n  # debug @score_from_dna line_width, 'xxx'\n  # debug @score_from_dna line_width, 'xxx|xxx'\n  # debug @score_from_dna line_width, 'xxx|xxx|xxx'\n  # debug @score_from_dna line_width, 'xxx|xx|x|AAAxxx'\n  # debug @score_from_dna line_width, 'xxx|xxxy|xxx'\n  # debug @score_from_dna line_width, 'foo bar buzz a b'\n  # debug @score_from_dna line_width, 'foo bar|buzz a b'\n  # debug @score_from_dna line_width, 'foo|bar buzz|a b'\n  # debug @score_from_dna line_width, 'foo|bar|buzz|a b'\n  # debug @score_from_dna line_width, 'foo|bar|buzz|a|b'\n  # prv_dna           = 'the best we can do is grappling on and on'\n  prv_dna           = 'Based on the fitness we can tell which sentence is good and which one is not. For this example, a small fitness means a sentence has a small distance to the objective sentence, therefore, the smallest the fitness is, the better. We will try to minimize this fitness to get closer and closer to the objective sentence.'\n  # prv_dna           = 'a few short words plus then a few more'\n  # prv_dna           = 'ab cd ef gh ij kl mn op qr'\n  # line_width        = 10 + Math.floor prv_dna.length / 5 + 0.5\n  line_width        = 30\n  prv_score         = @score_from_dna line_width, prv_dna\n  info ( rpr prv_dna ), @score_from_dna line_width, prv_dna\n  generation_count  = 1500\n  last_active       = null\n  active_count      = 0\n  #.........................................................................................................\n  for generation_idx in [ 0 .. generation_count ]\n    nxt_dna   = @mutate_dna prv_dna\n    nxt_score = @score_from_dna line_width, nxt_dna\n    unless nxt_score? and nxt_score > prv_score\n      # whisper ( rpr nxt_dna ), @score_from_dna line_width, nxt_dna\n      continue\n    active_count++\n    last_active = generation_idx\n    prv_dna     = nxt_dna\n    prv_score   = nxt_score\n    # urge ( rpr nxt_dna ), @score_from_dna line_width, nxt_dna\n  #.........................................................................................................\n  border = ( CND.yellow CND.reverse '│' )\n  for line in lines = prv_dna.split '|'\n    help border + ( CND.yellow CND.reverse line.padEnd line_width ) + border\n  #.........................................................................................................\n  info { last_active, active_count, }\n  return null\n\n"
  ]
}