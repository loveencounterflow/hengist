{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/cnd-ansi-vt100-analyzer-for-the-browser.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nansi_vt100_cc_matcher = /(?:\\x1b\\x5b)([\\?=;0-9]*?)([ABCDHJKfhlmnpsu])/g\n\nclass VT100_analyzer\n\n  #---------------------------------------------------------------------------------------------------------\n  escape_html: ( text ) ->\n    ### Given a `text`, return the same with all characters critical in HTML (`&`, `<`, `>`) properly\n    escaped. ###\n    R = text\n    R = R.replace /&/g, '&amp;'\n    R = R.replace /</g, '&lt;'\n    R = R.replace />/g, '&gt;'\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  rgb_hex_by_vt100_colorcode =\n    # Primary 3-bit 8 colors. Unique representation!\n    '0':    '000000'\n    '1':    '800000'\n    '2':    '008000'\n    '3':    '808000'\n    '4':    '000080'\n    '5':    '800080'\n    '6':    '008080'\n    '7':    'c0c0c0'\n    # Equivalent \"bright\" versions of original 8 colors.\n    '8':    '808080'\n    '9':    'ff0000'\n    '10':   '00ff00'\n    '11':   'ffff00'\n    '12':   '0000ff'\n    '13':   'ff00ff'\n    '14':   '00ffff'\n    '15':   'ffffff'\n    # Strictly ascending.\n    '16':   '000000'\n    '17':   '00005f'\n    '18':   '000087'\n    '19':   '0000af'\n    '20':   '0000d7'\n    '21':   '0000ff'\n    '22':   '005f00'\n    '23':   '005f5f'\n    '24':   '005f87'\n    '25':   '005faf'\n    '26':   '005fd7'\n    '27':   '005fff'\n    '28':   '008700'\n    '29':   '00875f'\n    '30':   '008787'\n    '31':   '0087af'\n    '32':   '0087d7'\n    '33':   '0087ff'\n    '34':   '00af00'\n    '35':   '00af5f'\n    '36':   '00af87'\n    '37':   '00afaf'\n    '38':   '00afd7'\n    '39':   '00afff'\n    '40':   '00d700'\n    '41':   '00d75f'\n    '42':   '00d787'\n    '43':   '00d7af'\n    '44':   '00d7d7'\n    '45':   '00d7ff'\n    '46':   '00ff00'\n    '47':   '00ff5f'\n    '48':   '00ff87'\n    '49':   '00ffaf'\n    '50':   '00ffd7'\n    '51':   '00ffff'\n    '52':   '5f0000'\n    '53':   '5f005f'\n    '54':   '5f0087'\n    '55':   '5f00af'\n    '56':   '5f00d7'\n    '57':   '5f00ff'\n    '58':   '5f5f00'\n    '59':   '5f5f5f'\n    '60':   '5f5f87'\n    '61':   '5f5faf'\n    '62':   '5f5fd7'\n    '63':   '5f5fff'\n    '64':   '5f8700'\n    '65':   '5f875f'\n    '66':   '5f8787'\n    '67':   '5f87af'\n    '68':   '5f87d7'\n    '69':   '5f87ff'\n    '70':   '5faf00'\n    '71':   '5faf5f'\n    '72':   '5faf87'\n    '73':   '5fafaf'\n    '74':   '5fafd7'\n    '75':   '5fafff'\n    '76':   '5fd700'\n    '77':   '5fd75f'\n    '78':   '5fd787'\n    '79':   '5fd7af'\n    '80':   '5fd7d7'\n    '81':   '5fd7ff'\n    '82':   '5fff00'\n    '83':   '5fff5f'\n    '84':   '5fff87'\n    '85':   '5fffaf'\n    '86':   '5fffd7'\n    '87':   '5fffff'\n    '88':   '870000'\n    '89':   '87005f'\n    '90':   '870087'\n    '91':   '8700af'\n    '92':   '8700d7'\n    '93':   '8700ff'\n    '94':   '875f00'\n    '95':   '875f5f'\n    '96':   '875f87'\n    '97':   '875faf'\n    '98':   '875fd7'\n    '99':   '875fff'\n    '100':  '878700'\n    '101':  '87875f'\n    '102':  '878787'\n    '103':  '8787af'\n    '104':  '8787d7'\n    '105':  '8787ff'\n    '106':  '87af00'\n    '107':  '87af5f'\n    '108':  '87af87'\n    '109':  '87afaf'\n    '110':  '87afd7'\n    '111':  '87afff'\n    '112':  '87d700'\n    '113':  '87d75f'\n    '114':  '87d787'\n    '115':  '87d7af'\n    '116':  '87d7d7'\n    '117':  '87d7ff'\n    '118':  '87ff00'\n    '119':  '87ff5f'\n    '120':  '87ff87'\n    '121':  '87ffaf'\n    '122':  '87ffd7'\n    '123':  '87ffff'\n    '124':  'af0000'\n    '125':  'af005f'\n    '126':  'af0087'\n    '127':  'af00af'\n    '128':  'af00d7'\n    '129':  'af00ff'\n    '130':  'af5f00'\n    '131':  'af5f5f'\n    '132':  'af5f87'\n    '133':  'af5faf'\n    '134':  'af5fd7'\n    '135':  'af5fff'\n    '136':  'af8700'\n    '137':  'af875f'\n    '138':  'af8787'\n    '139':  'af87af'\n    '140':  'af87d7'\n    '141':  'af87ff'\n    '142':  'afaf00'\n    '143':  'afaf5f'\n    '144':  'afaf87'\n    '145':  'afafaf'\n    '146':  'afafd7'\n    '147':  'afafff'\n    '148':  'afd700'\n    '149':  'afd75f'\n    '150':  'afd787'\n    '151':  'afd7af'\n    '152':  'afd7d7'\n    '153':  'afd7ff'\n    '154':  'afff00'\n    '155':  'afff5f'\n    '156':  'afff87'\n    '157':  'afffaf'\n    '158':  'afffd7'\n    '159':  'afffff'\n    '160':  'd70000'\n    '161':  'd7005f'\n    '162':  'd70087'\n    '163':  'd700af'\n    '164':  'd700d7'\n    '165':  'd700ff'\n    '166':  'd75f00'\n    '167':  'd75f5f'\n    '168':  'd75f87'\n    '169':  'd75faf'\n    '170':  'd75fd7'\n    '171':  'd75fff'\n    '172':  'd78700'\n    '173':  'd7875f'\n    '174':  'd78787'\n    '175':  'd787af'\n    '176':  'd787d7'\n    '177':  'd787ff'\n    '178':  'd7af00'\n    '179':  'd7af5f'\n    '180':  'd7af87'\n    '181':  'd7afaf'\n    '182':  'd7afd7'\n    '183':  'd7afff'\n    '184':  'd7d700'\n    '185':  'd7d75f'\n    '186':  'd7d787'\n    '187':  'd7d7af'\n    '188':  'd7d7d7'\n    '189':  'd7d7ff'\n    '190':  'd7ff00'\n    '191':  'd7ff5f'\n    '192':  'd7ff87'\n    '193':  'd7ffaf'\n    '194':  'd7ffd7'\n    '195':  'd7ffff'\n    '196':  'ff0000'\n    '197':  'ff005f'\n    '198':  'ff0087'\n    '199':  'ff00af'\n    '200':  'ff00d7'\n    '201':  'ff00ff'\n    '202':  'ff5f00'\n    '203':  'ff5f5f'\n    '204':  'ff5f87'\n    '205':  'ff5faf'\n    '206':  'ff5fd7'\n    '207':  'ff5fff'\n    '208':  'ff8700'\n    '209':  'ff875f'\n    '210':  'ff8787'\n    '211':  'ff87af'\n    '212':  'ff87d7'\n    '213':  'ff87ff'\n    '214':  'ffaf00'\n    '215':  'ffaf5f'\n    '216':  'ffaf87'\n    '217':  'ffafaf'\n    '218':  'ffafd7'\n    '219':  'ffafff'\n    '220':  'ffd700'\n    '221':  'ffd75f'\n    '222':  'ffd787'\n    '223':  'ffd7af'\n    '224':  'ffd7d7'\n    '225':  'ffd7ff'\n    '226':  'ffff00'\n    '227':  'ffff5f'\n    '228':  'ffff87'\n    '229':  'ffffaf'\n    '230':  'ffffd7'\n    '231':  'ffffff'\n    # Gray-scale range\n    '232':  '080808'\n    '233':  '121212'\n    '234':  '1c1c1c'\n    '235':  '262626'\n    '236':  '303030'\n    '237':  '3a3a3a'\n    '238':  '444444'\n    '239':  '4e4e4e'\n    '240':  '585858'\n    '241':  '626262'\n    '242':  '6c6c6c'\n    '243':  '767676'\n    '244':  '808080'\n    '245':  '8a8a8a'\n    '246':  '949494'\n    '247':  '9e9e9e'\n    '248':  'a8a8a8'\n    '249':  'b2b2b2'\n    '250':  'bcbcbc'\n    '251':  'c6c6c6'\n    '252':  'd0d0d0'\n    '253':  'dadada'\n    '254':  'e4e4e4'\n    '255':  'eeeeee'\n\n  #---------------------------------------------------------------------------------------------------------\n  analyze: ( text ) ->\n    ### Parse ANSI control codes out of `text` and return a list of alternating text / opcode chunks; the\n    first element of the list and all elements with even indexes will represent (possibly empty) literal\n    texts, while elements with even indexes will be sub-lists representing control codes. Each control\n    code looks like `[ 'm', 38, 5, 199 ]` or `[ 'm', 0 ]`, with the opcode letter coming first, followed\n    by the integer parameters.\n\n    Adapted from https://github.com/atdt/escapes.js/blob/master/escapes.js ###\n    R = []\n    #.......................................................................................................\n    loop\n      position  = ansi_vt100_cc_matcher.lastIndex\n      match     = ansi_vt100_cc_matcher.exec text\n      if match isnt null\n        R.push text.slice position, match.index\n        parameters  = [ match[ 2 ], ]\n        parameters.push parseInt x, 10 for x in match[ 1 ].split ';'\n        R.push parameters\n      break if ansi_vt100_cc_matcher.lastIndex is 0\n    #.......................................................................................................\n    R.push text.slice position if position < text.length\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  as_html: ( text, options ) ->\n    return ( @_as_html text, options ).join ''\n\n  #---------------------------------------------------------------------------------------------------------\n  _as_html: ( text, options ) ->\n    is_ansicode     = yes\n    R               = []\n    open_span_count = 0\n    css_prefix      = if options? and options[ 'css-prefix' ]? then options[ 'css-prefix' ] else 'ansi'\n    vt100_reset     = css_prefix.concat '-m-0'\n    vt100_clear     = css_prefix.concat '-K'\n    #.......................................................................................................\n    for chunk in @analyze text\n      is_ansicode = not is_ansicode\n      if is_ansicode\n        color_code = chunk[ chunk.length - 1 ]\n        css_class = css_prefix.concat '-', chunk.join '-'\n        if css_class is vt100_reset or css_class is vt100_clear\n          R.push '</span>'\n          open_span_count -= 1\n        else\n          R.push \"<span style='color:##{rgb_hex_by_vt100_colorcode[ color_code ]};'>\"\n          # R.push \"<span class='#{css_class}'>\"\n          open_span_count += 1\n        continue\n      else\n        ### TAINT must escape ###\n        R.push @escape_html chunk\n    #.......................................................................................................\n    if open_span_count > 0 and ( options? and options[ 'close-spans' ] )\n      R.push '</span>' for n in [ 0 ... open_span_count ]\n    #.......................................................................................................\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  get_css_source: ( options ) ->\n    R           = []\n    css_prefix  = if options? and options[ 'css-prefix' ]? then options[ 'css-prefix' ] else 'ansi'\n    for color_code, rgb_hex of rgb_hex_by_vt100_colorcode\n      R.push \".#{css_prefix}-m-38-5-#{color_code} { color: #{rgb_hex}; }\"\n    #.......................................................................................................\n    return R.join '\\n'\n\nglobalThis.VT100 = new VT100_analyzer()\n\n\n\n\n\n\n\n\n"
  ]
}