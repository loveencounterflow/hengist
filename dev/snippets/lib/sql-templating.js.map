{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sql-templating.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SQL-TEMPLATING'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_sql_tokenizer = ->\n  cfg           =\n    regExp: ( require 'mysql-tokenizer/lib/regexp-sql92' )\n  tokenize      = ( require 'mysql-tokenizer' ) cfg\n  sql           = \"\"\"select *, 'helo world' as \"text\" from blah order by 1; insert sfksi 1286982342 &/$/&;\"\"\"\n  tokens        = tokenize sql + '\\n'\n  colors        = [ ( ( P... ) -> CND.reverse CND.blue P... ), ( ( P... ) -> CND.reverse CND.yellow P... ), ]\n  color_count   = colors.length\n  tokens        = ( colors[ idx %% color_count ] token for token, idx in tokens )\n  info tokens.join ''\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_sql_templating_pgsqwell = ->\n  SQL = require 'pgsqwell'\n  { escapeSQLIdentifier\n    sqlPart\n    emptySQLPart\n    joinSQLValues } = SQL\n  SQL = SQL.default\n  #.........................................................................................................\n  limit     = null\n  limit     = 10\n  limit_sql = if limit? then sqlPart\"LIMIT #{limit}\" else emptySQLPart\n  query     = SQL\"\"\"SELECT id FROM users WHERE name=#{'toto'} #{limit_sql}\"\"\"\n  query2    = SQL\"\"\"SELECT id FROM #{escapeSQLIdentifier('table')}\"\"\"\n  query3    = SQL\"\"\"SELECT id FROM users WHERE id IN #{joinSQLValues([1, 2])}\"\"\"\n  mergedQuery = SQL\"\"\"\n  #{query}\n  UNION\n  #{query2}\n  UNION\n  #{query3}\n  \"\"\"\n  { text, values, } = query;        info '^337^', { text, values, }\n  { text, values, } = query2;       info '^337^', { text, values, }\n  { text, values, } = query3;       info '^337^', { text, values, }\n  { text, values, } = mergedQuery;  info '^337^', { text, values, }\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_sql_template = ->\n  SQL = require 'sql-template'\n  show = ( fragment ) -> help ( rpr fragment.text ), ( CND.gold rpr fragment.values )\n  show SQL\"select * from foo\"\n  show SQL\"select * from foo where age > #{22}\"\n  conditions = { name:'John Doe', }\n  show SQL\"select * from foo $where#{conditions}\"\n  conditions = { id: [ 1, 2, 3, ], type:'snow', }\n  show SQL\"select * from foo $where#{conditions}\"\n  show SQL\"update foo $set#{ {joe: 22, bar: 'ok'} }\"\n  show SQL\"insert into foo $keys#{[\"joe\", \"bar\"]} values (#{22}, #{'ok'})}\"\n  show SQL\"insert into foo ( joe, bar ) $values#{ {joe: 22, bar: 'ok'} }\"\n  obj = { first: 'John', last: 'Doe', }\n  show SQL\"insert into foo $keys#{Object.keys(obj)} $values#{obj}\"\n  show SQL\"select * from $id#{'foo'}\"\n  show SQL\"select * from $id#{'foo'} where id $in#{[1,2,3]}\"\n  return null\n\n\n#=========================================================================================================\nclass Sql\n\n  #-------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    # super()\n    @types  = new ( require 'intertype' ).Intertype()\n    @cfg    = cfg ### TAINT freeze ###\n    return undefined\n\n  #-------------------------------------------------------------------------------------------------------\n  SQL: String.raw\n  # SQL: ( parts, values... ) =>\n  #   debug '^557^', [ parts, values, @cfg, ]\n  #   return \"your SQL string: #{rpr parts}, values: #{rpr values}\"\n\n  #-------------------------------------------------------------------------------------------------------\n  I: ( name ) => '\"' + ( name.replace /\"/g, '\"\"' ) + '\"'\n\n  #-------------------------------------------------------------------------------------------------------\n  L: ( x ) =>\n    return 'null' unless x?\n    switch type = @types.type_of x\n      when 'text'       then return  \"'\" + ( x.replace /'/g, \"''\" ) + \"'\"\n      # when 'list'       then return \"'#{@list_as_json x}'\"\n      when 'float'      then return x.toString()\n      when 'boolean'    then return ( if x then '1' else '0' )\n      when 'list'\n        throw new Error \"^dba@23^ use `X()` for lists\"\n    throw new Error '^dba@323^', type, x\n    # throw new E.Dba_sql_value_error '^dba@323^', type, x\n\n  #-------------------------------------------------------------------------------------------------------\n  X: ( x ) =>\n    throw new Error \"^dba@132^ expected a list, got a #{type}\" unless ( type = @types.type_of x ) is 'list'\n    return '( ' + ( ( @L e for e in x ).join ', ' ) + ' )'\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_Xxx = ->\n  sql       = new Sql { this_setting: true, that_setting: 123, }\n  { SQL\n    I\n    L\n    X }     = sql\n  table     = 'that other \"table\"'\n  a_max     = 123\n  limit     = 10\n  truth     = true\n  strange   = \"strange 'value'%\"\n  selection = [ 'the', 'one', 'or', 'other', ]\n  info '^3344^\\n', SQL\"\"\"\n    select\n        a, b, c\n      from #{I table}\n      where #{truth}\n        and ( a > #{L a_max} )\n        and ( b like #{L strange} )\n        and ( c in #{X selection} )\n      limit #{L limit};\n    \"\"\"\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # @demo_sql_tokenizer()\n  # @demo_sql_templating_pgsqwell()\n  # @demo_sql_template()\n  @demo_Xxx()\n\n  \n"
  ]
}