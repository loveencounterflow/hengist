{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sql-templating.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SQL-TEMPLATING'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_sql_tokenizer = ->\n  cfg           =\n    regExp: ( require 'mysql-tokenizer/lib/regexp-sql92' )\n  tokenize      = ( require 'mysql-tokenizer' ) cfg\n  sql           = \"\"\"select *, 'helo world' as \"text\" from blah order by 1; insert sfksi 1286982342 &/$/&;\"\"\"\n  tokens        = tokenize sql + '\\n'\n  colors        = [ ( ( P... ) -> CND.reverse CND.blue P... ), ( ( P... ) -> CND.reverse CND.yellow P... ), ]\n  color_count   = colors.length\n  tokens        = ( colors[ idx %% color_count ] token for token, idx in tokens )\n  info tokens.join ''\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_sql_templating_pgsqwell = ->\n  SQL = require 'pgsqwell'\n  { escapeSQLIdentifier\n    sqlPart\n    emptySQLPart\n    joinSQLValues } = SQL\n  SQL = SQL.default\n  #.........................................................................................................\n  limit = 10\n  query = SQL\"\"\"SELECT id FROM users WHERE name=#{'toto'} #{\n    if limit? then sqlPart\"LIMIT #{limit}\" else emptySQLPart\n  }\"\"\"\n  query2 = SQL\"\"\"SELECT id FROM #{escapeSQLIdentifier('table')}\"\"\"\n  query3 = SQL\"\"\"SELECT id FROM users WHERE id IN #{joinSQLValues([1, 2])}}\"\"\"\n  mergedQuery = SQL\"\"\"\n  #{query}\n  UNION\n  #{query2}\n  UNION\n  #{query3}\n  \"\"\"\n  info '^337^', query\n  info '^337^', query2\n  info '^337^', query3\n  info '^337^', mergedQuery\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # @demo_sql_tokenizer()\n  @demo_sql_templating_pgsqwell()\n\n  \n"
  ]
}