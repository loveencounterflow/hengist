{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/array-like-object.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PSEUDO-ARRAY'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nGUY                       = require 'guy'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate }              = types\n# { Moonriver }             = require '../../../apps/moonriver'\nUTIL                      = require 'util'\nmisfit                    = Symbol 'misfit'\n\n\n#-----------------------------------------------------------------------------------------------------------\nadd_length_prop = ( target, key ) ->\n  Object.defineProperty target, 'length',\n    get:        -> @[ key ].length\n    set: ( x )  -> @[ key ].length = x\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Pond\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: GUY.lft.freeze\n    misfit:       misfit\n    defaults:\n      constructor:\n        on_change:  null\n        devnull:    false\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg        = GUY.lft.freeze { @constructor.C.defaults.constructor..., cfg..., }\n    @on_change  = @cfg.on_change if @cfg.on_change?\n    @d          = []\n    @delta      = 0\n    @rear       = null\n    @fore       = null\n    @pipeline   = null\n    @prv_length = 0\n    add_length_prop @, 'd'\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _on_change: ->\n    @delta      = @length - @prv_length\n    info '^348^', @length, ( @delta ), rpr @\n    @prv_length = @length\n    @pipeline?.on_change delta\n    @on_change?()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  set_rear:  ( x ) ->\n    # validate.pond x\n    @rear = x\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  set_fore: ( x ) ->\n    # validate.pond x\n    @fore = x\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  push: ( x ) ->\n    return null if @devnull\n    R = @d.push x\n    @_on_change()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  pop: ( fallback = misfit ) ->\n    if @d.length is 0\n      return fallback unless fallback is misfit\n      throw new Error \"^XXX@1^ cannot pop() from empty list\"\n    R = @d.pop()\n    @_on_change()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  unshift: ( x ) ->\n    return null if @devnull\n    R = @d.unshift x\n    @_on_change()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  shift: ( fallback = misfit ) ->\n    if @d.length is 0\n      return fallback unless fallback is misfit\n      throw new Error \"^XXX@1^ cannot shift() from empty list\"\n    return null if @devnull\n    R = @d.shift()\n    @_on_change()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  clear: ->\n    @d.length = 0\n    @_on_change()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  toString:               -> rpr @d\n  [UTIL.inspect.custom]:  -> rpr @d\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Segment\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( input, output ) ->\n    return undefined\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Pipeline\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( segments ) ->\n    @data_count   = 0\n    @segments     = []\n    @last_segment = null\n    add_length_prop @, 'segments'\n    @push segment for segment in segments\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  push: ( segment ) ->\n    @segments.push segment\n    @last_segment = segment\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  on_change: ( delta ) ->\n    @data_count += delta\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  [Symbol.iterator]: -> yield segment for segment in @segments; return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  d = new Pond on_change: ( delta ) ->\n    return null\n\n  d.push 42\n  d.push 43\n  d.push 44\n  d.shift()\n  # d.splice 1, 0, 'a', 'b', 'c'\n  urge '^948^', d\n  urge '^948^', d.length\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  demo()\n\n\n\n\n\n"
  ]
}