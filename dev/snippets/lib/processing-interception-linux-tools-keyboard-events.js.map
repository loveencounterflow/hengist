{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/processing-interception-linux-tools-keyboard-events.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,mBAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,qDAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC,EAdA;;;;;;;;;;;;;;;;;;;EAwCA,IAAA,GAAO,MAAA,QAAA,CAAA,CAAA;AACP,QAAA,KAAA,EAAA;IAAE,IAAA,CAAK,SAAL,EAAgB,MAAhB;IACA,OAAO,CAAC,KAAK,CAAC,MAAd,CAAA;AACA;IAAA,wBAAA;MACE,KAAA,CAAM,SAAN,EAAiB,IAAI,CAAC,GAAL,CAAA,CAAjB,EAA6B,GAAA,CAAI,KAAK,CAAC,QAAN,CAAe,KAAf,CAAJ,CAA7B;MACA,KAAA,CAAM,SAAN,EAAiB,KAAK,CAAC,MAAvB,EADJ;;MAGI,OAAO,CAAC,MAAM,CAAC,KAAf,CAAqB,KAArB;IAJF;AAKA,WAAO;EARF;;EAmCP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAuJA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,KAAA,CAAA,CAAA,GAAA,EAAA;;;aAGhC,CAAA,MAAM,IAAA,CAAA,CAAN;IAHgC,CAAA,IAAlC;;;EAlOA;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require '../../../apps/guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'processing-interception-linux-tools-keyboard-events'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n\n\n\n# stdin.setEncoding 'utf8'\n\n# use_events = ->\n#   help '^409-1^', \"use_events\"\n#   # process.stdin.on 'readable', () ->\n#   #   warn '^409-2^', \"readable!\"\n#   #   return null\n#   process.stdin.on 'data', (chunk) ->\n#     info '^409-3^', rpr chunk\n#     return null\n#   process.stdin.resume()\n\n# # stdin.on('end', () ->\n# #   console.log(\"Hello \" + data)\n# # })\n\n# stdin.on 'error', console.error\n\n\nmain = ->\n  help '^409-4^', \"main\"\n  process.stdin.resume()\n  for await chunk from process.stdin\n    debug '^409-5^', Date.now(), rpr chunk.toString 'hex'\n    debug '^409-5^', chunk.length\n    # event = new InputEvent chunk\n    process.stdout.write chunk\n  return null\n\n\n# use_linux_input_device = ->\n#   LinuxInputListener        = require 'linux-input-device'\n#   SW_LID = 0x00;\n#   input = new LinuxInputListener '/dev/input/by-path/platform-i8042-serio-0-event-kbd'\n\n#   input.on 'state', ( value, key, kind ) ->\n#     help '^409-6^', \"State:\", { value, key, kind, }\n\n#   input.on 'error', console.error\n\n#   # //start by querying for the initial state.\n#   # input.on 'open', () => input.query 'EV_SW', SW_LID\n#   input.on 'open', () => input.query 'EV_KEY', SW_LID\n#   return null\n\n# use_input_event = ->\n#   InputEvent  = require 'input-event'\n#   input       = new InputEvent '/dev/input/by-path/platform-i8042-serio-0-event-kbd'\n#   keyboard    = new InputEvent.Keyboard input\n\n#   keyboard.on 'keyup'   , ( P... ) -> help '^409-7^', \"keyup:     \", P\n#   keyboard.on 'keydown' , ( P... ) -> help '^409-8^', \"keydown:   \", P\n#   keyboard.on 'keypress', ( P... ) -> help '^409-9^', \"keypress:  \", P\n\n```\n// =========================================================================================================\n// adapted from https://github.com/song940/input-event/blob/master/lib/index.js\nconst EVENT_TYPES = {\n  EV_SYN: 0x00,\n  EV_KEY: 0x01, // [joystick] JS_EVENT_BUTTON\n  EV_REL: 0x02, // [joystick] JS_EVENT_AXIS\n  EV_ABS: 0x03,\n  EV_MSC: 0x04,\n  EV_SW: 0x05,\n  EV_LED: 0x11,\n  EV_SND: 0x12,\n  EV_REP: 0x14,\n  EV_FF: 0x15,\n  EV_PWR: 0x16,\n  EV_FF_STATUS: 0x17,\n  EV_MAX: 0x1f,\n  EV_INIT: 0x80 // [joystick] JS_EVENT_INIT\n};\n\nconst KEY_STATUS = {\n  KEY_UP    : 0x00,\n  KEY_PRESS : 0x01,\n  KEY_DOWN  : 0x02\n};\n\nclass InputEvent {\n\n\n\n  constructor( chunk ) {\n    this.chunk = chunk;\n    this.event = this.process();\n    this.assign_key_event_type();\n    debug( '^409-10^', this.event );\n    return undefined; }\n\n  process() {\n    var event;\n    /**\n     * Sometimes (modern Linux), multiple key events will be in the triggered at once for the same timestamp.\n     * The first 4 bytes will be repeated for every event, so we use that knowledge to actually split it.\n     * We assume event structures of 3 bytes, 8 bytes, 16 bytes or 24 bytes.\n     */\n    if (this.chunk.length > 8) {\n      var t = this.chunk.readUInt32LE(0);\n      var lastPos = 0;\n      for (var i = 8, n = this.chunk.length; i < n; i += 8) {\n        if (this.chunk.readUInt32LE(i) === t) {\n          var part = this.chunk.slice(lastPos, i);\n          event = this.parse(part);\n          if (event) urge( \"event\", 'data', event, part);\n          lastPos = i;\n        }\n      }\n      var part = this.chunk.slice(lastPos, i);\n      event = this.parse(part);\n      if (event) urge( \"event\", 'data', event, part);\n      return event;\n    } else {\n      event = this.parse(this.chunk);\n      if (event) urge( \"event\", 'data', event, this.chunk);\n      return event;\n    }\n  }\n  parse() {\n    debug( '^39837459^', \"chunk.length\", this.chunk.length, this.chunk.toString( 'hex' ) );\n    if (this.chunk.length >= 24) {\n      // unsigned long time structure.\n      return {\n        tssec:  this.chunk.readUInt32LE(0),\n        tsusec: this.chunk.readUInt32LE(8),\n        type:   this.chunk.readUInt16LE(16),\n        code:   this.chunk.readUInt16LE(18),\n        value:  this.chunk.readInt32LE(20)\n      };\n    }\n    if (this.chunk.length >= 16) {\n      // https://www.kernel.org/doc/Documentation/input/input.txt\n      // is inconsistent with linux/input.h\n      // 'value' is a signed 32 bit int in input.h.\n      // code is truth, and this also makes more sense for negative\n      // axis movement\n      // struct input_event {\n      //   struct timeval time;\n      //   __u16 type;\n      //   __u16 code;\n      //   __s32 value;\n      // };\n      return {\n        tssec: this.chunk.readUInt32LE(0),\n        tsusec: this.chunk.readUInt32LE(4),\n        type: this.chunk.readUInt16LE(8),\n        code: this.chunk.readUInt16LE(10),\n        value: this.chunk.readInt32LE(12)\n      };\n    } else if (this.chunk.length == 8) {\n      // https://www.kernel.org/doc/Documentation/input/joystick-api.txt\n      // struct js_event {\n      //  __u32 time;     /* event timestamp in milliseconds */\n      //  __s16 value;    /* value */\n      //  __u8 type;      /* event type */\n      //  __u8 number;    /* axis/button number */\n      // };\n      return {\n        time: this.chunk.readUInt32LE(0),\n        value: this.chunk.readInt16LE(4),\n        type: this.chunk.readUInt8(6),\n        number: this.chunk.readUInt8(7)\n      };\n    } else if (this.chunk.length == 3) {\n      // mice mouse\n      return {\n        t: this.chunk.readInt8(0),\n        x: this.chunk.readInt8(1),\n        y: this.chunk.readInt8(2)\n      };\n    }\n  }\n  // =======================================================================================================\n  // adapted from https://github.com/song940/input-event/blob/master/lib/keyboard.js\n  assign_key_event_type() {\n    // filting key event\n    // debug( '^39837459^', this.event.type, EVENT_TYPES.EV_KEY );\n    debug( '^39837459^', this.event.value, KEY_STATUS );\n    // if ( this.event.type === EVENT_TYPES.EV_KEY ) {\n    // ### TAINT needs some clarification why not EV_KEY but EV_MSC\n    if ( this.event.type === EVENT_TYPES.EV_MSC ) {\n      switch ( this.event.value ) {\n        case KEY_STATUS.KEY_UP:\n          this.event.key_event_type = 'keyup';\n          break;\n        case KEY_STATUS.KEY_DOWN:\n          this.event.key_event_type = 'keydown';\n          break;\n        case KEY_STATUS.KEY_PRESS:\n          this.event.key_event_type = 'keypress';\n          break;\n      }\n    }\n  }\n}\n\nInputEvent.EVENT_TYPES = EVENT_TYPES;\n\n\n\n\n\n```\n\nif require.main is module then do =>\n  # debug new InputEvent()\n  # use_input_event()\n  await main()\n  # use_events()\n  # use_linux_input_device()\n"
  ]
}