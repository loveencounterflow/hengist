{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/running-psql-from-node.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAd5B;;;EAgBA,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,eAAR,EAlB5B;;;EAqBA,IAAC,CAAA,IAAD,GAAQ,QAAA,CAAA,CAAA;AACR,QAAA,OAAA,EAAA,EAAA,EAAA;IAAE,KAAA,CAAM,QAAN,EAAF;;IAEE,OAAA,GAAY,CAAA,iFAAA;IACZ,QAAA,GAEE,CAAA;;MAAA,aAAA,EAAgB,MAAhB;;MAEA,KAAA,EAAgB,IAFhB;MAGA,KAAA,EAAO,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB;IAHP;IAIF,EAAA,GAAY,EAAE,CAAC,KAAH,CAAS,OAAT,EAAkB,IAAlB,EAAwB,QAAxB,EATd;;;;;;;IAgBE,KAAA,CAAM,OAAN;WACA,KAAA,CAAM,EAAE,CAAC,OAAT;EAlBM;;EAoBR,IAAC,CAAA,CAAD,GAAK,QAAA,CAAA,CAAA;IACH;;;;;;;;;;;;;;;;WAgBA,KAAA,CAAM,OAAN;EAjBG,EAzCL;;;EA8DA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA;aAChC,IAAC,CAAA,IAAD,CAAA;IADgC,CAAA,IAAlC;;;EA9DA;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SNIPPETS/PSQL'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nCP                        = require 'child_process'\n\n#-----------------------------------------------------------------------------------------------------------\n@demo = ->\n  debug 'before'\n  # command = \"\"\"psql -U interplot -d interplot -c \"select * from U.variables where key ~ 'harfb' order by key\" \"\"\"\n  command   = \"\"\"psql -U interplot -d interplot -f \"/home/flow/jzr/interplot/db/100-harfbuzz.sql\" \"\"\"\n  settings  =\n    # cwd:\n    serialization:  'json'\n    # serialization:  'advanced'\n    shell:          true\n    stdio: ['inherit', 'inherit', 'inherit', ]\n  cp        = CP.spawn command, null, settings\n  # cp.stdout.on 'data', ( data ) ->\n  #   data = data.toString 'utf-8'\n  #   help rpr data\n  # cp.stdout.on 'error', ( error ) -> warn \"stdout.on 'error'  \", rpr error\n  # cp.stderr.on 'data',  ( data )  -> warn \"stderr.on 'data'   \", rpr data.toString 'utf-8'\n  # cp.stderr.on 'error', ( error ) -> warn \"stderr.on 'error'  \", rpr error\n  debug 'after'\n  debug cp.channel\n\n@d = ->\n  ```\n  const { spawn } = require('child_process');\n  const ls = spawn('ls', ['-lh', '/usr']);\n\n  ls.stdout.on('data', (data) => {\n    console.log(`stdout: ${data}`);\n  });\n\n  ls.stderr.on('data', (data) => {\n    console.error(`stderr: ${data}`);\n  });\n\n  ls.on('close', (code) => {\n    console.log(`child process exited with code ${code}`);\n  });\n  ```\n  debug 'after'\n\n\n############################################################################################################\nif module is require.main then do =>\n  @demo()\n  # @d()\n\n\n"
  ]
}