{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-compose-regexp.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DEMO-COMPOSE-REGEXP'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\ntruth                     = GUY.trm.truth.bind GUY.trm\n#...........................................................................................................\n{ equals\n  copy_regex }            = GUY.samesame\n{ to_width }              = require 'to-width'\n#...........................................................................................................\n{ atomic\n  bound\n  capture\n  charSet\n  either\n  flags\n  lookAhead\n  lookBehind\n  maybe\n  namedCapture\n  noBound\n  notAhead\n  notBehind\n  ref\n  sequence\n  suffix                } = require 'compose-regexp-commonjs'\nsticky                    = flags.add 'y'\ndot_matchall              = flags.add 's'\nH                         = require '../../../lib/helpers'\n\n\n#-----------------------------------------------------------------------------------------------------------\nunicode = ( x ) ->\n  return copy_regex x, { unicode: true, } if ( x instanceof RegExp )\n  return flags.add 'u', x\n\n\n#===========================================================================================================\nclass Lexer\n\n  #---------------------------------------------------------------------------------------------------------\n  _token_from_match: ( prv_last_idx, match, mode = null ) ->\n    x = null\n    R = { mode, }\n    for key, value of match.groups\n      continue unless value?\n      if key.startsWith '$'\n        R.key     = key[ 1 .. ]\n        R.mk      = if mode? then \"#{mode}:#{R.key}\" else R.key\n        R.value   = value\n      else\n        ( x ?= {} )[ key ]  = if value is '' then null else value\n    R.start = prv_last_idx\n    R.stop  = prv_last_idx + match[ 0 ].length\n    R.x     = x\n    return R\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  lexemes = []\n  n       = namedCapture\n  #.........................................................................................................\n  lexemes.push n '$escchr',       /\\\\(?<chr>.)/u\n  lexemes.push n '$backslash',    '\\\\'\n  lexemes.push n '$backtick1',    ( notBehind '`' ), '`',   ( notAhead '`' )\n  lexemes.push n '$backtick3',    ( notBehind '`' ), '```', ( notAhead '`' )\n  lexemes.push n '$E_backticks',  /`+/\n  lexemes.push n '$digits',       /\\d+/\n  lexemes.push n '$tag',          /<[^>]+>/\n  lexemes.push n '$nl',           /\\n/u\n  #.........................................................................................................\n  lexemes.push n '$ws',           /// [ \\u{000b}-\\u{000d}\n                                        \\u{2000}-\\u{200a}\n                                        \\u{0009}\\u{0020}\\u{0085}\\u{00a0}\\u{2028}\\u{2029}\\u{202f}\\u{205f}\n                                        \\u{3000} ]+ ///u\n  lexemes.push n '$letters',      /\\p{L}+/u\n  lexemes.push n '$other',        /./u\n  lexemes.push n '$other_digits', /[0-9]+/\n  #.........................................................................................................\n  pattern       = sticky unicode dot_matchall either lexemes...\n  source        = \"\"\"\n    foo `bar` <i>1234\\\\</i>\\n\\\\\n    foo ``bar``\n    foo ```bar```\n    \\\\`\\x20\\x20\n    \\\\\"\"\"\n  lexer = new Lexer()\n  prv_last_idx = 0\n  info '^30-33^', 0\n  while ( match = source.match pattern )?\n    if pattern.lastIndex is prv_last_idx\n      warn '^30-33^', GUY.trm.reverse \"detected loop, stopping\"\n      break\n    token = lexer._token_from_match prv_last_idx, match\n    info '^30-33^', pattern.lastIndex, token\n    echo() if token.key is 'nl'\n    prv_last_idx = pattern.lastIndex\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_flags = ->\n  info '^19-1^', unicode dot_matchall /a/\n  info '^19-2^', dot_matchall unicode /a/\n  info '^19-3^', flags.add 'u', /a/\n  try info '^19-4^', flags.add 'u', /./ catch error then warn GUY.trm.reverse error.message\n  try info '^19-5^', ( unicode /./ ) catch error then warn GUY.trm.reverse error.message\n  info '^19-6^', copy_regex /./, { unicode: true, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_htmlish = ->\n  n       = namedCapture\n  modes   = {}\n  #.........................................................................................................\n  add_lexeme = ( lexemes, mode, name, pattern ) ->\n    help '^31-1^', ( to_width \"#{mode}:#{name}\", 20 ), GUY.trm.white pattern\n    lexemes.push n name, pattern\n    return null\n  #.........................................................................................................\n  do =>\n    lexemes = []\n    mode    = 'plain'\n    add_lexeme lexemes, mode, '$escchr',      /\\\\(?<chr>.)/u\n    add_lexeme lexemes, mode, '$plain',       suffix '+', charSet.complement /[<`\\\\]/u\n    add_lexeme lexemes, mode, '$start_tag',   sequence ( notBehind '\\\\' ), /<(?<lslash>\\/?)/u\n    add_lexeme lexemes, mode, '$E_backticks', /`+/\n    add_lexeme lexemes, mode, '$other',       /./u\n    modes[ mode ] = sticky unicode dot_matchall either lexemes...\n  #.........................................................................................................\n  do =>\n    lexemes = []\n    mode    = 'tag'\n    add_lexeme lexemes, mode, '$stop_tag',    sequence ( notBehind '\\\\' ), />/u\n    add_lexeme lexemes, mode, '$plain',       suffix '+', charSet.complement />/u\n    add_lexeme lexemes, mode, '$other',       /./u\n    modes[ mode ] = sticky unicode dot_matchall either lexemes...\n  #.........................................................................................................\n  probes        = [\n    \"helo <bold>`world`</bold>\"\n    \"helo \\\\<bold>`world`</bold>\"\n    ]\n  #.......................................................................................................\n  for probe in probes\n    lexer   = new Lexer()\n    prv_last_idx = 0\n    mode    = 'plain' # 'tag'\n    stack   = []\n    pattern = modes[ mode ]\n    tokens  = []\n    #.......................................................................................................\n    loop\n      match = probe.match pattern\n      unless match?\n        ### TAINT complain if not at end or issue error token ###\n        break\n      if pattern.lastIndex is prv_last_idx\n        if match?\n          warn '^31-2^', { match.groups..., }\n          warn '^31-3^', token  = lexer._token_from_match prv_last_idx, match, mode\n          ### TAINT uses code units, should use codepoints ###\n          center = token.stop\n          left   = Math.max 0, center - 11\n          right  = Math.min probe.length, center + 11\n          before = probe[ left ... center ]\n          after  = probe[ center + 1 .. right ]\n          mid    = probe[ center ]\n          warn '^31-7^', { before, mid, after, }\n          warn '^31-9^', GUY.trm.reverse \"pattern #{rpr token.key} matched empty string; stopping\"\n        else\n          warn '^31-10^', GUY.trm.reverse \"nothing matched; detected loop, stopping\"\n        break\n      token = lexer._token_from_match prv_last_idx, match, mode\n      tokens.push token\n      # info '^31-11^', pattern.lastIndex, token\n      #.....................................................................................................\n      if token.key.startsWith 'start_'\n        stack.push mode\n        mode              = token.key.replace 'start_', ''\n        old_last_idx      = pattern.lastIndex\n        pattern           = modes[ mode ]\n        pattern.lastIndex = old_last_idx\n      #.....................................................................................................\n      else if token.key.startsWith 'stop_'\n        # error if stack.length < 1\n        mode              = stack.pop()\n        old_last_idx      = pattern.lastIndex\n        pattern           = modes[ mode ]\n        pattern.lastIndex = old_last_idx\n      #.....................................................................................................\n      echo() if token.key is 'nl'\n      prv_last_idx = pattern.lastIndex\n    H.tabulate \"tokens of #{rpr probe}\", tokens\n  #.......................................................................................................\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # demo_1()\n  # demo_flags()\n  demo_htmlish()\n\n\n"
  ]
}