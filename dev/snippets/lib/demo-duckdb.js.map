{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-duckdb.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAKA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAd5B;;;EAgBA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,MADF,EAEE,OAFF,EAGE,QAHF,EAIE,gBAJF,CAAA,GAI4B,KAAK,CAAC,MAAN,CAAA,CAJ5B;;EAKA,GAAA,GAA4B,MAAM,CAAC;;EACnC,GAAA,GAA4B,OAAA,CAAQ,mBAAR,EAzB5B;;;EA2BA,CAAA,GAA4B,OAAA,CAAQ,sBAAR;;EAC5B,CAAA,CAAE,IAAF,EACE,MADF,CAAA,GAC4B,GAAG,CAAC,GADhC;;EAEA,CAAA,CAAE,QAAF,CAAA,GAA4B,OAAA,CAAQ,UAAR,CAA5B;;EACA,IAAA,GAA4B,EA/B5B;;;EAiCA,IAAA,GAAO,QAAA,CAAE,KAAF,EAAS,CAAT,CAAA;AACP,QAAA,CAAA,EAAA;IAAE,EAAA,GAAQ,IAAI,CAAC,GAAL,CAAA;IACR,OAAO,CAAC,IAAR,CAAa,KAAb;IACA,CAAA,GAAQ,CAAA,CAAA;IACR,OAAO,CAAC,OAAR,CAAgB,KAAhB;IACA,IAAA,GAAQ,CAAE,IAAI,CAAC,GAAL,CAAA,CAAA,GAAa,EAAf,CAAA,GAAsB;AAC9B,WAAO;EANF,EAjCP;;;;;EA4CA,IAAC,CAAA,WAAD,GAAe,QAAA,CAAE,GAAF,CAAA;AACf,QAAA,QAAA;;;;;;;;;IAQE,CAAA,CAAE,QAAF,CAAA,GAAe,OAAA,CAAQ,QAAR,CAAf;IACA,KAAA,CAAM,OAAN,EAAe,IAAI,QAAJ,CAAa,UAAb,CAAf;AACA,WAAO;EAXM,EA5Cf;;;EA2DA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA;aAChC,IAAC,CAAA,WAAD,CAAA;IADgC,CAAA,IAAlC;;AA3DA",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DUCKDB/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nGUY                       = require '../../../apps/guy'\n# { HDML }                  = require '../../../apps/hdml'\nH                         = require '../../../lib/helpers'\n{ lets\n  freeze }                = GUY.lft\n{ to_width }              = require 'to-width'\nTIME                      = 0\n#-----------------------------------------------------------------------------------------------------------\ntime = ( label, f ) ->\n  t0    = Date.now()\n  console.time label\n  R     = f()\n  console.timeEnd label\n  TIME  = ( Date.now() - t0 ) / 1000\n  return R\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_duckdb = ( cfg ) ->\n  # { DBay }        = require '../../../apps/dbay'\n  # { Mrg }         = require '../../../apps/dbay-mirage'\n  # db              = new DBay()\n  # mrg             = new Mrg { db, }\n  # db.create_stdlib()\n  # dsk       = 'twcm'\n  # path      = 'dbay-rustybuzz/template-with-content-markers.html'\n  # path      = PATH.resolve PATH.join __dirname, '../../../assets', path\n  { Database } = require 'duckdb'\n  debug '^352^', new Database ':memory:'\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  @demo_duckdb()\n\n\n"
  ]
}