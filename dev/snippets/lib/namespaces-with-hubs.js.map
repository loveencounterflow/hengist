{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/namespaces-with-hubs.coffee"
  ],
  "names": [],
  "mappings": "AAGA;EAAA;AAAA,MAAA,GAAA,EAAA,IAAA,EAAA,SAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,WAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC,EAdA;;;;;;;;;;;;;;;;EAqCM,OAAN,MAAA,KAAA,CAAA;;IAGE,WAAa,CAAA,CAAA;MACX,IAAC,CAAA,CAAD,GAAK,IAAI,SAAJ,CAAc,IAAd;AACL,aAAO;IAFI,CADf;;;IAME,IAAM,CAAA,CAAA;MACJ,IAAA,CAAK,SAAL,EAAgB,IAAhB;MACA,IAAA,CAAK,SAAL,EAAgB,IAAC,CAAA,CAAjB;MACA,IAAA,CAAK,SAAL,EAAgB,IAAC,CAAA,CAAC,CAAC,IAAnB;AACA,aAAO;IAJH;;EARR,EArCA;;;EAoDM,YAAN,MAAA,UAAA,CAAA;;IAGE,WAAa,CAAE,IAAF,CAAA,EAAA;;MAEX,IAAC,CAAA,CAAD,GAAK;AACL,aAAO;IAHI,CADf;;;IAOE,IAAM,CAAA,CAAA;MACJ,IAAA,CAAK,SAAL,EAAgB,IAAhB;MACA,IAAA,CAAK,SAAL,EAAgB,IAAC,CAAA,CAAjB;MACA,IAAA,CAAK,SAAL,EAAgB,IAAC,CAAA,CAAC,CAAC,IAAnB;MACA,IAAA,CAAK,SAAL,EAAgB,IAAC,CAAA,CAAC,CAAC,IAAH,CAAA,CAAhB;AACA,aAAO;IALH;;EATR,EApDA;;;EAsEA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAA+B,MAAS,CAAA,CAAA,CAAA,GAAA;AACxC,UAAA;MAAE,CAAA,GAAI,IAAI,IAAJ,CAAA;aACJ,CAAC,CAAC,CAAC,CAAC,IAAJ,CAAA;IAFsC,CAAA,IAAxC;;AAtEA",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertalk'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n# WG                        = require '../../../apps/webguy'\n# hub_s                     = Symbol.for 'hub'\n\n\n###\n\n**Note**: I first had in mind to use an ingenious / tricky / treacherous construction that would allow the\n'secondary' to reference methods on the host / primary using `this` / `@`; this would have allowed both the\nprimary and the secondary to use a unified notation like `@f`, `@$.f` to reference `f` on the primary and on\nthe secondary. However this also would be surprising because now `this` means not the secondary, but the\nprimary instance in methods of the secondary instance which is too surprising to sound right.\n\nInstead, we're using composition, albeit with a backlink.\n\n###\n\n\n\n#===========================================================================================================\nclass Host\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @$ = new Secondary @\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  show: ->\n    help '^650-1^', @\n    help '^650-2^', @$\n    help '^650-3^', @$.show\n    return null\n\n#===========================================================================================================\nclass Secondary\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( host ) ->\n    # WG.props.hide @, '_', host\n    @_ = host\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  show: ->\n    urge '^650-4^', @\n    urge '^650-5^', @_\n    urge '^650-6^', @_.show\n    urge '^650-7^', @_.show()\n    return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  h = new Host()\n  h.$.show()\n\n"
  ]
}