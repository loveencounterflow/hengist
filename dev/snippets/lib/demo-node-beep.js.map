{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-node-beep.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DEMO-NODE-BEEP'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nspawn                     = ( require 'child_process' ).spawn\n\n\n\nclass Audioplayer\n  play: ( path ) -> new Promise ( resolve, reject ) =>\n    ### throw error if file not exists or is no playable file ###\n    cp              = spawn '/usr/bin/play', [ path, ]\n    cp.on 'close', ->\n      return resolve null if ( exit_code = cp.exitCode ) is 0\n      warn '^Audioplayer@1^', { exit_code, }\n      reject new Error \"command `play #{rpr path}` exited with code #{exit_code}\"\n    cp.on 'error', ( error ) -> warn '^Audioplayer@1^', error; reject error\n    cp.stderr.on 'error', ( error ) -> warn '^Audioplayer@2^', error; reject error\n    return cp\n  every: ( dts, f ) ->                         setInterval f,    dts * 1000\n  after: ( dts, f ) ->                         setTimeout  f,    dts * 1000\n  sleep: ( dts    ) -> new Promise ( done ) => setTimeout  done, dts * 1000\n\n@AUDIOPLAYER = AUDIOPLAYER = new Audioplayer()\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  # ```\n  # var player = require('play-sound')(opts = {})\n\n  # // $ mplayer foo.mp3\n  # player.play(path, function(err){\n  #   if (err) throw err\n  # })\n\n  # // { timeout: 300 } will be passed to child process\n  # player.play(path, { timeout: 300 }, function(err){\n  #   if (err) throw err\n  # })\n\n  # // configure arguments for executable if any\n  # player.play(path, { afplay: ['-v', 1 ] /* lower volume for afplay on OSX */ }, function(err){\n  #   if (err) throw err\n  # })\n\n  # // access the node child_process in case you need to kill it on demand\n  # var audio = player.play(path, function(err){\n  #   if (err && !err.killed) throw err\n  # })\n  # audio.kill()\n  # ```\n  AUDIOPLAYER.play '/usr/share/sounds/LinuxMint/stereo/button-pressed.ogg'\n  await AUDIOPLAYER.sleep 0.5\n  AUDIOPLAYER.play '/usr/share/sounds/LinuxMint/stereo/button-pressed.ogg'\n  await AUDIOPLAYER.sleep 0.5\n  AUDIOPLAYER.play '/usr/share/sounds/LinuxMint/stereo/dialog-error.ogg'\n  await AUDIOPLAYER.sleep 0.5\n  AUDIOPLAYER.play '/usr/share/sounds/LinuxMint/stereo/dialog-information.ogg'\n  await AUDIOPLAYER.sleep 0.5\n  AUDIOPLAYER.play '/usr/share/sounds/LinuxMint/stereo/dialog-question.ogg'\n  await AUDIOPLAYER.sleep 0.5\n  AUDIOPLAYER.play '/usr/share/sounds/LinuxMint/stereo/dialog-question.wav'\n  await AUDIOPLAYER.sleep 0.5\n  AUDIOPLAYER.play '/usr/share/sounds/LinuxMint/stereo/dialog-warning.ogg'\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  demo()\n\n\n"
  ]
}