{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sync-or-async.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,6BAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,EAGE,QAHF,EAIE,OAJF,EAKE,OALF,EAME,OANF,CAAA,GAM4B,KAN5B;;EAOA,GAAA,GAA4B,OAAA,CAAQ,mBAAR,EAvB5B;;;EA2BA,6BAAA,GAAgC,QAAA,CAAE,IAAF,CAAA;AAC9B,YAAO,IAAP;AAAA,WACO,MADP;AAEI,eAAO,QAAA,CAAA,CAAA;UAAG,IAAA,CAAK,WAAL;AAAkB,iBAAO;QAA5B;AAFX,WAGO,OAHP;AAKI,eAAO,MAAA,QAAA,CAAA,CAAA,EAAA;UAAG,MAAM,GAAG,CAAC,KAAK,CAAC,KAAV,CAAgB,GAAhB;UAAqB,IAAA,CAAK,YAAL;AAAmB,iBAAO;QAAxD;AALX;IAMA,MAAM,IAAI,KAAJ,CAAU,CAAA,gCAAA,CAAA,CAAmC,GAAA,CAAI,IAAJ,CAAnC,CAAA,CAAV;EAPwB,EA3BhC;;;EAqCA,IAAA,GAAO,MAAA,QAAA,CAAA,CAAA;AACP,QAAA;IAAE,KAAA,CAAM,QAAN,EAAgB,OAAA,CAAQ,6BAAR,CAAhB;IACA,KAAA,CAAM,QAAN,EAAiB,OAAA,CAAQ,CAAA,GAAI,6BAAA,CAA8B,MAA9B,CAAZ,CAAjB;IACA,CAAA,CAAA;IACA,KAAA,CAAM,QAAN,EAAiB,OAAA,CAAQ,CAAA,GAAI,6BAAA,CAA8B,OAA9B,CAAZ,CAAjB;IACA,MAAM,CAAA,CAAA;AACN,WAAO;EANF,EArCP;;;EA+CA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA;aAChC,IAAA,CAAA;IADgC,CAAA,IAAlC;;AA/CA",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SYNC-OR-ASYNC'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  declare\n  first_of\n  last_of\n  size_of\n  type_of }               = types\nguy                       = require '../../../apps/guy'\n\n\n#-----------------------------------------------------------------------------------------------------------\ncreate_sync_or_async_function = ( type ) ->\n  switch type\n    when 'sync'\n      return -> urge \"it's sync\"; return null\n    when 'async'\n      # return -> new Promise ( resolve ) => defer -> ( urge \"it's sync\"; resolve null )\n      return -> await guy.async.sleep 0.1; urge \"it's async\"; return null\n  throw new Error \"expected 'sync' or 'async', got #{rpr type}\"\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  debug '^3378^', type_of create_sync_or_async_function\n  debug '^3378^',  type_of f = create_sync_or_async_function 'sync'\n  f()\n  debug '^3378^',  type_of f = create_sync_or_async_function 'async'\n  await f()\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  demo()\n\n\n\n\n\n"
  ]
}