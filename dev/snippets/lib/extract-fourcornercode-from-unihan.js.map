{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/extract-fourcornercode-from-unihan.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/NG'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  validate_optional }     = types\n\n\n#===========================================================================================================\nclass Segment\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @input  = []\n    @output = []\n    return undefined\n\n############################################################################################################\nif module is require.main then do =>\n  PATH = require 'node:path'\n  #.........................................................................................................\n  path = PATH.resolve PATH.join __dirname, '../../../../../io/mingkwai-rack/jzrds/unicode.org-ucd-v14.0/Unihan_DictionaryLikeData.txt'\n  count = 0\n  entries = []\n  for line from GUY.fs.walk_lines path\n    # result.push line\n    [ ucid_text, cat, value, ] = line.split '\\t'\n    continue unless cat is 'kFourCornerCode'\n    continue unless value?\n    count++\n    codes = value.split /\\s+/\n    cid_hex = ucid_text[ 2 .. ]\n    cid     = parseInt cid_hex, 16\n    chr     = String.fromCodePoint cid\n    for code in codes\n      # debug { count, cid_hex, chr, code, }\n      entries.push [ code, chr, ]\n  entries.sort ( a, b ) ->\n    return +1 if a[ 0 ] > b[ 0 ]\n    return -1 if a[ 0 ] < b[ 0 ]\n    return null\n  # info entry for entry in entries\n  chrs    = ( e[ 1 ] for e in entries ).join ''\n  probes  = Array.from '厂厃厄厅历厇厈厉厊压厌厍厎厏厐厑厒厓厔厕厖厗厘厙厚厛厜厝厞原'\n  for probe in probes\n    continue unless ( match = chrs.match ///^.*(.{0}#{probe}.{25}).*///u )?\n    help match[ 1 ]\n  return null\n\n\n\n"
  ]
}