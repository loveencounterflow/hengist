{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/find-duplicate-substrings.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,SAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,CAAA,CAAE,MAAF,EACE,EADF,CAAA,GAC4B,GAD5B,EAfA;;;EAkBA,CAAA,CAAE,IAAF,EACE,MADF,CAAA,GAC4B,CAAE,IAAI,CAAE,OAAA,CAAQ,OAAR,CAAF,CAAmB,CAAC,KAAxB,CAA8B;IAAE,KAAA,EAAO;EAAT,CAA9B,CAAF,CAAmD,CAAC,MAApD,CAAA,CAD5B,EAlBA;;;;;;EAwBA,SAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,CAAA,CAAE,GAAF,CAAA,GAA4B,SAAS,CAAC,MAAV,CAAA,CAA5B,EAzBA;;;;;EAgCA,IAAC,CAAA,IAAD,GAAQ,QAAA,CAAE,IAAF,CAAA;AACR,QAAA,EAAA,EAAA,IAAA,EAAA,QAAA,EAAA,GAAA,EAAA,OAAA,EAAA;IAAE,EAAA,GAAK,OAAA,CAAQ,SAAR;IACL,CAAA,CAAE,QAAF,EAAY,IAAZ,CAAA,GAAsB,EAAE,CAAC,MAAH,CAAU,IAAV,CAAtB;IACA,IAAA,CAAK,GAAA,CAAI,QAAJ,CAAL;IACA,IAAA,CAAK,GAAA,CAAI,CAAE,MAAM,CAAC,IAAP,CAAY,QAAZ,CAAF,CAAwB,CAAC,QAAzB,CAAA,CAAJ,CAAL;AACA;IAAA,KAAA,WAAA;;mBACE,IAAA,CAAK,GAAL,EAAU,GAAA,CAAI,KAAJ,CAAV;IADF,CAAA;;EALM,EAhCR;;;;;EA0CA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA;;aAEhC,IAAC,CAAA,IAAD,CAAM,wLAAN;IAFgC,CAAA,IAAlC;;AA1CA",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'SNIPPETS/DUPLICATES'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ assign\n  jr }                    = CND\n# CHVTN                     = require 'chevrotain'\n{ lets\n  freeze }                = ( new ( require 'datom' ).Datom { dirty: false, } ).export()\n# types                     = require '../paragate/lib/types'\n# { isa\n#   type_of\n#   validate }              = types\nINTERTEXT                 = require 'intertext'\n{ rpr }                   = INTERTEXT.export()\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo = ( text ) ->\n  LZ = require '../lz78'\n  { finalArr, dict, } = LZ.encode text\n  urge rpr finalArr\n  urge rpr ( Buffer.from finalArr ).toString()\n  for key, value of dict\n    info key, rpr value\n  # help rpr decoded = LZ.decode encoded\n\n############################################################################################################\nif module is require.main then do =>\n  # @demo \"highly, highly repepepetititive text\"\n  @demo \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"\n\n\n\n\n\n"
  ]
}