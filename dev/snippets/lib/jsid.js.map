{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/jsid.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JSID'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\njr                        = JSON.stringify\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate }              = types.export()\n#...........................................................................................................\nCRYPTO                    = require 'crypto'\n#...........................................................................................................\n@registry     = new WeakMap()\n@object_count = 0\n@salt         = 'arbitrary'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@id_of = ( x ) ->\n  return 'null:0'         if x is null\n  return 'undefined:0'    if x is undefined\n  return 'boolean:f'      if x is false\n  return 'boolean:t'      if x is true\n  return 'infinity:p'     if x is +Infinity\n  return 'infinity:n'     if x is -Infinity\n  return 'nan:0'          if Number.isNaN x\n  return R if ( R = @registry.get x )?\n  @object_count++\n  R = \"object:#{@object_count}\"\n  try\n    @registry.set x, R\n    return R\n  catch error\n    throw error unless error.name is 'TypeError'\n  @object_count--\n  switch type = type_of x\n    when 'text' then v = ( ( CRYPTO.createHash 'sha1' ).update x ).digest 'hex'\n    else v = rpr x\n  return \"#{type}:#{v}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@demo = ( x ) ->\n  help ( CND.yellow rpr x ), ( CND.blue rpr @id_of x )\n\n############################################################################################################\nif module is require.main then do =>\n  @demo 'helo'\n  @demo '42'\n  @demo 42\n  @demo Infinity\n  @demo -Infinity\n  @demo new Date()\n  @demo undefined\n  d = { x: 42, }\n  @demo d\n  @demo { x: 42, }\n  @demo Object.freeze d\n  @demo true\n  @demo false\n  @demo NaN\n  @demo NaN\n  @demo new Boolean true\n  @demo new Boolean true\n  @demo new Boolean false\n\n\n\n\n"
  ]
}