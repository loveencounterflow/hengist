{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/push-and-pull-queries.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PUSH&PULL'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n\n\n#-----------------------------------------------------------------------------------------------------------\ncustomers = [\n  { id: 1, firstName: \"justin\", balance: 10 },\n  { id: 2, firstName: \"sissel\", balance: 0 },\n  { id: 3, firstName: \"justin\", balance: -3 },\n  { id: 4, firstName: \"smudge\", balance: 2 },\n  { id: 5, firstName: \"smudge\", balance: 0 },\n  ]\n\n#===========================================================================================================\npull_query = ->\n\n  #---------------------------------------------------------------------------------------------------------\n  Scan = ( collection ) ->\n    for x from collection\n      yield x\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  Select = ( filter, iterator ) ->\n    for x from iterator\n      continue unless filter x\n      yield x\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  Map = ( f, iterator ) ->\n    for x from iterator\n      yield f x\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  Distinct = ( iterator ) ->\n    seen = new Set()\n    for x from iterator\n      continue if seen.has x\n      seen.add x\n      yield x\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  ### SELECT DISTINCT customer_first_name FROM customers WHERE customer_balance > 0 ###\n  info [ ( Distinct \\\n    ( Map \\\n      ( ( c ) => c.firstName ),\n      ( Select ( ( c ) => c.balance > 0 ), ( Scan customers ) ) ) \\\n    )... ]\n\n  #---------------------------------------------------------------------------------------------------------\n  return null\n\n\n#===========================================================================================================\npush_query = ->\n\n  #---------------------------------------------------------------------------------------------------------\n  Scan = ( relation, send ) ->\n    for r from relation\n      send r\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  Select = ( test, send ) -> ( x ) => send x if test x\n\n  #---------------------------------------------------------------------------------------------------------\n  Map = ( f, send ) -> ( x ) => send f x\n\n  #---------------------------------------------------------------------------------------------------------\n  Distinct = ( send ) ->\n    seen = new Set()\n    return ( x ) =>\n      return null if seen.has x\n      seen.add x\n      send x\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  result = []\n  ( Scan \\\n    customers,\n    ( Select \\\n      ( ( c ) => c.balance > 0 ),\n      Map(\n        ( ( c ) => c.firstName ),\n        ( Distinct ( ( r ) => result.push(r) ) )\n        )\n      )\n    )\n  help result\n\n  #---------------------------------------------------------------------------------------------------------\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  pull_query()\n  push_query()\n\n\n\n\n\n"
  ]
}