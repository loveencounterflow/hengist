{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/diff.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "#!node\n\nCND                       = require 'cnd'\nbadge                     = 'DIFF'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ stdin\n  stdout\n  stderr }                = process\n{ Intertype, }            = require 'intertype'\ntypes                     = new Intertype()\n{ isa\n  validate\n  type_of  }              = types.export()\n{ to_width, width_of, }   = require 'to-width'\nCAT                       = require 'multimix/lib/cataloguing'\n\n\n\n\n\n#-----------------------------------------------------------------------------------------------------------\ncolorize = ( delta_code, text ) ->\n  lines = text.split '\\n'\n  color = switch delta_code\n    when -1 then CND.orange\n    when  0 then CND.white\n    when +1 then CND.lime\n  return ( CND.reverse color line for line in lines ).join '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\nget_tty_width = ->\n  return R if ( R = process.stdout.columns )?\n  { execSync, } = require 'child_process'\n  return parseInt ( execSync \"tput cols\", { encoding: 'utf-8', } ), 10\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_diff_match_patch = ( old_text, new_text ) ->\n  DMP   = require 'diff-match-patch'\n  # width = Math.min 500, process.stdout.columns ? 108\n  width = Math.min 500, get_tty_width() ? 108\n  _cnd  = require 'cnd/lib/TRM-CONSTANTS'\n  # debug CAT.all_keys_of DMP\n  # debug type_of DMP.diff_match_patch\n  # debug CAT.all_keys_of DMP.diff_match_patch\n  type_of dmp = new DMP.diff_match_patch()\n  # debug CAT.all_keys_of new DMP.diff_match_patch()\n  # debug diff = dmp.diff_main 'dogs bark', 'cats bark'\n  # debug diff = dmp.diff_main 'mouse', 'sofas'\n  diff = dmp.diff_main old_text, new_text\n  whisper dmp.diff_prettyHtml diff\n  dmp.diff_cleanupSemantic diff\n  whisper dmp.diff_prettyHtml diff\n  help diff\n  colorized = ( colorize dd, text for [ dd, text, ] in diff ).join ''\n  lines     = colorized.split '\\n'\n  for line in lines\n    # line += ' '.repeat Math.max 0, line.replace //\n    line += _cnd.reverse + _cnd.colors.white\n    line  = ( to_width line, width ) + '\\n'\n    process.stdout.write line\n    # process.stdout.write ( to_width width, line ) + '\\n'\n  process.stdout.write CND.white CND.reverse ( ' '.repeat width ) + '\\n'\n  # { Diff, } = DMP\n  # dmp   = new Diff()\n  # debug CAT.all_keys_of dmp\n  # debug ( k for k of dmp )\n  # diff  = dmp.diff_main 'dogs bark', 'cats bark'\n  # // You can also use the following properties:\n  # urge DMP.DIFF_DELETE\n  # urge DMP.DIFF_INSERT\n  # urge DMP.DIFF_EQUAL\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo()\n  FS = require 'fs'\n  old_text  = FS.readFileSync '/tmp/old-galley-main.html', { encoding: 'utf-8', }\n  new_text  = FS.readFileSync '/tmp/new-galley-main.html', { encoding: 'utf-8', }\n  await demo_diff_match_patch old_text, new_text\n\n\n"
  ]
}