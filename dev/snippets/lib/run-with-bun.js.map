{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/run-with-bun.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,QAAA,EAAA,gBAAA,EAAA,QAAA,EAAA,CAAA,EAAA,GAAA,EAAA,YAAA;;;EAGA,QAAA,GAA4B,CAAE,OAAA,CAAQ,MAAR,CAAF,CAAkB,CAAC;;EAC/C,QAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,OAAO,CAAT,CAAA,KAAgB;EAAzB,EAJ5B;;;EAOA,YAAA,GACE;IAAA,KAAA,EAAkB,KAAlB;IACA,cAAA,EAAkB,KADlB;IAEA,WAAA,EAAkB,KAFlB;IAGA,OAAA,EAAkB,IAHlB;IAIA,MAAA,EAAkB;EAJlB;;EAKF,IAAC,CAAA,GAAD,GAAO,GAAA,GAAM,QAAA,CAAA,GAAE,CAAF,CAAA;AAAW,QAAA;WAAC;;AAAE;MAAA,KAAA,mCAAA;;qBAAE,QAAA,CAAS,CAAT,EAAY,YAAZ;MAAF,CAAA;;QAAF,CAA2C,CAAC,IAA5C,CAAiD,GAAjD;EAAZ,EAbb;;;EAgBA,gBAAA,GACE;IAAA,KAAA,EAAkB,KAAlB;IACA,cAAA,EAAkB,KADlB;IAEA,WAAA,EAAkB,KAFlB;IAGA,OAAA,EAAkB,KAHlB;IAIA,MAAA,EAAkB;EAJlB;;EAKF,IAAC,CAAA,OAAD,GAAW,QAAA,CAAA,GAAE,CAAF,CAAA;AAAW,QAAA;WAAC;;AAAE;MAAA,KAAA,mCAAA;;qBAAE,QAAA,CAAS,CAAT,EAAY,gBAAZ;MAAF,CAAA;;QAAF,CAA+C,CAAC,IAAhD,CAAqD,GAArD;EAAZ,EAtBX;;;EAyBA,IAAC,CAAA,iBAAD,GAAqB,QAAA,CAAE,MAAF,EAAU,OAAV,CAAA;AACnB,WAAO,CAAA,GAAE,CAAF,CAAA,GAAA;aAAY,MAAM,CAAC,KAAP,CAAa,IAAC,CAAA,GAAD,CAAK,GAAA,CAAL,CAAb;IAAZ;EADY,EAzBrB;;;EA6BA,IAAC,CAAA,GAAD,GAAO,QAAA,CAAA,GAAE,CAAF,CAAA,EAAA;;;AAGL,WAAO,CAAE,IAAC,CAAA,IAAD,CAAM,GAAA,CAAN,CAAF,CAAc,CAAC,MAAf,CAAsB,IAAtB;EAHF,EA7BP;;;EAmCA,IAAC,CAAA,IAAD,GAAQ,QAAA,CAAA,GAAE,CAAF,CAAA,EAAA;;AACR,QAAA,CAAA,EAAA;IACE,CAAA;;AAAM;MAAA,KAAA,mCAAA;;qBAAK,QAAA,CAAS,CAAT,CAAH,GAAmB,CAAnB,GAA0B,IAAC,CAAA,GAAD,CAAK,CAAL;MAA5B,CAAA;;;AACN,WAAO,CAAC,CAAC,IAAF,CAAO,IAAC,CAAA,SAAR;EAHD,EAnCR;;;EAyCA,IAAC,CAAA,GAAD,GAA4B,IAAC,CAAA,iBAAD,CAAmB,OAAO,CAAC,MAA3B;;EAC5B,IAAC,CAAA,IAAD,GAA4B,IAAC,CAAA,iBAAD,CAAmB,OAAO,CAAC,MAA3B;;EAG5B,OAAO,CAAC,GAAR,CAAY,OAAZ;;EACA,OAAO,CAAC,GAAR;;AAAc;IAAA,KAAA,YAAA;mBAAA;IAAA,CAAA;;MAAd;;EACA,OAAO,CAAC,GAAR,CAAY,OAAO,CAAC,MAApB;;EACA,OAAO,CAAC,GAAR,CAAY,OAAO,CAAC,MAApB;;EACA,IAAC,CAAA,GAAD,CAAK,MAAL;;EACA,IAAC,CAAA,IAAD,CAAM,MAAN;AAlDA",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\n_inspect                  = ( require 'util' ).inspect\nisa_text                  = ( x ) -> ( typeof x ) is 'string'\n\n#-----------------------------------------------------------------------------------------------------------\nrpr_settings =\n  depth:            Infinity\n  maxArrayLength:   Infinity\n  breakLength:      Infinity\n  compact:          true\n  colors:           false\n@rpr = rpr = ( P... ) -> ( ( _inspect x, rpr_settings ) for x in P ).join ' '\n\n#-----------------------------------------------------------------------------------------------------------\ninspect_settings =\n  depth:            Infinity\n  maxArrayLength:   Infinity\n  breakLength:      Infinity\n  compact:          false\n  colors:           true\n@inspect = ( P... ) -> ( ( _inspect x, inspect_settings ) for x in P ).join ' '\n\n#-----------------------------------------------------------------------------------------------------------\n@get_output_method = ( target, options ) ->\n  return ( P... ) => target.write @pen P...\n\n#-----------------------------------------------------------------------------------------------------------\n@pen = ( P... ) ->\n  ### Given any number of arguments, return a text representing the arguments as seen fit for output\n  commands like `log`, `echo`, and the colors. ###\n  return ( @_pen P... ).concat '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\n@_pen = ( P... ) ->\n  ### ... ###\n  R = ( ( if isa_text p then p else @rpr p ) for p in P )\n  return R.join @separator\n\n#-----------------------------------------------------------------------------------------------------------\n@log                      = @get_output_method process.stderr\n@echo                     = @get_output_method process.stdout\n\n\nconsole.log process\nconsole.log ( k for k of process )\nconsole.log process.stdout\nconsole.log process.stderr\n@log 'helo'\n@echo 'helo'\n\n\n\n\n\n"
  ]
}