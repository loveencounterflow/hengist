{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/zhaziwubifa-numerics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '札字五筆法/numerics'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nE                         = require './errors'\n{ misfit }                = require './common'\n\n#-----------------------------------------------------------------------------------------------------------\n@Import_export_mixin = ( clasz = Object ) => class extends clasz\n\n  #---------------------------------------------------------------------------------------------------------\n  import: ( cfg ) ->\n    cfg         = { @types.defaults.dba_import_cfg..., cfg..., }\n    cfg.format ?= @_format_from_path cfg.path\n    @types.validate.dba_import_cfg cfg\n    switch cfg.format\n      when 'db'   then @_import_db  cfg\n      when 'sql'  then @_import_sql cfg\n      when 'csv'  then @_import_csv cfg\n      else\n        throw new E.Dba_format_unknown '^dba@309^', format\n    return null\n\n\n  #=========================================================================================================\n  # FORMAT GUESSING\n  #---------------------------------------------------------------------------------------------------------\n  _extension_from_path: ( path ) -> if ( R = PATH.extname path ) is '' then null else R[ 1 .. ]\n  _format_from_path:    ( path ) -> @_formats[ @._extension_from_path path ] ? null\n\n\n  #---------------------------------------------------------------------------------------------------------\n  _import_db: ( cfg ) ->\n    tmp_schema = @_get_free_temp_schema()\n    @_attach { schema: tmp_schema, path: cfg.path, }\n    # debug '^469465^', @list_schemas()\n    @_attach { schema: cfg.schema, path: '', }\n    # debug '^469465^', @list_schemas()\n    @copy_schema { from_schema: tmp_schema, to_schema: cfg.schema, }\n    @_detach { schema: tmp_schema, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _import_sql: ( cfg ) ->\n    throw new E.Dba_format_unknown '^dba@310^', 'sql'\n    # switch cfg.method\n    #   when 'single' then return @_import_sql_single cfg\n    #   when 'batch'  then return @_import_sql_batch  cfg\n    # return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _import_csv: ( cfg ) ->\n    ### TAINT always requires `ram: true` ###\n    ### TAINT no streaming, no batching ###\n    ### TAINT no configurable CSV parsing ###\n    parse       = require 'csv-parse/lib/sync'\n    cfg         = {\n      @types.defaults.dba_import_csv_cfg...,\n      @types.defaults.dba_import_csv_cfg_extra...,\n      cfg..., }\n    @types.validate.dba_import_csv_cfg cfg\n    { path\n      schema\n      transform\n      table }   = cfg\n    csv_cfg     =\n      columns:          true\n      skip_empty_lines: true\n    source  = FS.readFileSync path, { encoding: 'utf-8', }\n    rows    = parse source, csv_cfg\n    #.......................................................................................................\n    unless rows.length > 0\n      throw new E.Dba_empty_csv '^dba@333^', path\n    #.......................................................................................................\n    columns = ( k for k of rows[ 0 ] )\n    columns = transform { columns, } if transform?\n    @_attach { schema, ram: true, }\n    insert  = @_create_csv_table { schema, table, columns, }\n    #.......................................................................................................\n    for row in rows\n      if transform?\n        if @types.isa.list ( subrows = transform { row, } )\n          for subrow in subrows\n            insert.run ( subrow[ column ] for column in columns )\n        else\n          insert.run ( subrows[ column ] for column in columns )\n        continue\n      insert.run ( row[ column ] for column in columns )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_csv_table: ( cfg ) ->\n    { schema\n      table\n      columns }     = cfg\n    schema_i        = @as_identifier schema\n    table_i         = @as_identifier table\n    columns_i       = ( @as_identifier d for d in columns )\n    columns_sql     = ( \"#{ci} text\"  for ci in columns_i ).join ', '\n    placeholder_sql = ( \"?\"           for ci in columns_i ).join ', '\n    create_sql      = \"create table #{schema_i}.#{table_i} ( #{columns_sql} );\"\n    @execute create_sql\n    #.......................................................................................................\n    return @prepare \"insert into #{schema_i}.#{table_i} values ( #{placeholder_sql} );\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _import_sql_single: ( cfg ) ->\n    @execute FS.readFileSync cfg.path, { encoding: 'utf-8', }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _import_sql_batch: ( cfg ) ->\n    for statements from @_walk_batches ( @_walk_statements_from_path cfg.path ), cfg.batch_size\n      compound_statement  = statements.join ''\n      count              += compound_statement.length\n      @execute compound_statement\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_statements_from_path: ( sql_path ) ->\n    ### Given a path, iterate over SQL statements which are signalled by semicolons (`;`) that appear outside\n    of literals and comments (and the end of input). ###\n    ### thx to https://stackabuse.com/reading-a-file-line-by-line-in-node-js/ ###\n    ### thx to https://github.com/nacholibre/node-readlines ###\n    readlines       = new ( require 'n-readlines' ) sql_path\n    #.......................................................................................................\n    cfg           =\n      regExp: ( require 'mysql-tokenizer/lib/regexp-sql92' )\n    tokenize      = ( require 'mysql-tokenizer' ) cfg\n    collector     = null\n    # stream        = FS.createReadStream sql_path\n    #.......................................................................................................\n    flush = ->\n      R         = collector.join ''\n      collector = null\n      return R\n    #.......................................................................................................\n    while ( line = readlines.next() ) isnt false\n      for token, cur_idx in tokenize line + '\\n'\n        if token is ';'\n          ( collector ?= [] ).push token\n          yield flush()\n          continue\n        # if token.startsWith '--'\n        #   continue\n        ( collector ?= [] ).push token\n    #.......................................................................................................\n    yield flush() if collector?\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_batches: ( iterator, batch_size = 1 ) ->\n    ### Given an iterator and a batch size, iterate over lists of values yielded by the iterator. ###\n    batch = null\n    for d from iterator\n      ( batch ?= [] ).push d\n      if batch.length >= batch_size\n        yield batch\n        batch = null\n    yield batch if batch?\n    return null\n"
  ]
}