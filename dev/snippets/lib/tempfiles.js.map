{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/tempfiles.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,UAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAZ5B;;;EAcA,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR,EAhB5B;;;EAkBA,QAAA,GAAW,QAAA,CAAA,CAAA;AACX,QAAA;IAAE,CAAA,GAAI,OAAO,CAAC,MAAR,CAAA;AACJ,WAAO,CAAA,CAAA,CAAG,CAAC,CAAE,CAAF,CAAJ,CAAA,CAAA,GAAc,CAAA,CAAA,CAAG,CAAC,CAAE,CAAF,CAAJ,CAAA,CAAW,CAAC,QAAZ,CAAqB,CAArB,EAAwB,GAAxB;EAFZ,EAlBX;;;EAuBA,UAAA,GAAa,QAAA,CAAA,CAAA;AACb,QAAA,GAAA,EAAA,OAAA,EAAA,WAAA,EAAA;IAAE,KAAA,GAAc,OAAA,CAAQ,OAAR;IACd,GAAA,GAAc,OAAA,CAAQ,OAAR;IACd,WAAA,GAAc,KAFhB;;;;IAME,OAAA,GAAU,QAAA,CAAE,WAAF,CAAA;MACR,IAAA,CAAK,CAAE,WAAF,CAAL;MACA,EAAE,CAAC,aAAH,CAAmB,IAAI,CAAC,IAAL,CAAU,WAAV,EAAuB,aAAvB,CAAnB,EAA2D,MAA3D;MACA,IAAA,CAAK,IAAI,CAAC,IAAL,CAAU,IAAI,CAAC,IAAL,CAAU,WAAV,EAAuB,IAAvB,CAAV,CAAL;AACA,aAAO;IAJC;AAKV;MACE,IAAA,CAAK,QAAL;MAEA,KAAA,CAAM,WAAA,GAAc,GAAG,CAAC,SAAJ,CAAc;QAAE,IAAA,EAAM;MAAR,CAAd,CAApB;MACA,IAAA,CAAK,OAAA,CAAQ,WAAR,CAAL;MACA,IAAA,CAAK,OAAL,EALF;KAAA;MAOE,IAAA,CAAK,CAAA,SAAA,CAAA,CAAY,WAAZ,CAAA,CAAL;MACA,KAAA,CAAM,WAAN,EARF;;AAQoB,wDACpB,WAAO;EArBI,EAvBb;;;EAgDA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA;AAClC,UAAA;MAAE,KAAA,CAAM,WAAA,GAAc,UAAA,CAAA,CAApB;aACA,IAAA,CAAK,IAAI,CAAC,IAAL,CAAU,IAAI,CAAC,IAAL,CAAU,WAAV,EAAuB,IAAvB,CAAV,CAAL;IAFgC,CAAA,IAAlC;;AAhDA",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'TEMPFILES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nglob                      = require 'glob'\n#-----------------------------------------------------------------------------------------------------------\ntime_now = ->\n  t = process.hrtime()\n  return \"#{t[ 0 ]}\" + \"#{t[ 1 ]}\".padStart 9, '0'\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_tempy = ->\n  trash       = require 'trash'\n  TMP         = require 'tempy'\n  tmpdir_path = null\n  # debug path = TMP.file { name: 'abc.db', }\n  # debug path = TMP.file { name: 'abc.db', }\n  # debug path = TMP.file { name: 'abc.db', }\n  do_work = ( tmpdir_path ) ->\n    info { tmpdir_path, }\n    FS.writeFileSync ( PATH.join tmpdir_path, 'somefile.db' ), 'text'\n    info glob.sync PATH.join tmpdir_path, '**'\n    return 42\n  try\n    help 'before'\n\n    debug tmpdir_path = TMP.directory { name: 'abc.db', }\n    help do_work tmpdir_path\n    help 'after'\n  finally\n    warn \"removing #{tmpdir_path}\"\n    trash tmpdir_path ### NOTE `trash` command is async, consider to `await` ###\n  return tmpdir_path\n\n\n############################################################################################################\nif module is require.main then do =>\n  debug tmpdir_path = demo_tempy()\n  info glob.sync PATH.join tmpdir_path, '**'\n\n"
  ]
}