{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/tempfiles.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'TEMPFILES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nglob                      = require 'glob'\n#-----------------------------------------------------------------------------------------------------------\ntime_now = ->\n  t = process.hrtime()\n  return \"#{t[ 0 ]}\" + \"#{t[ 1 ]}\".padStart 9, '0'\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_tempy_directory = ->\n  trash       = require 'trash'\n  TMP         = require 'tempy'\n  prefix      = 'TEMPFILES-DEMO-'\n  do_work = ( tmpdir_path ) ->\n    info { tmpdir_path, }\n    FS.writeFileSync ( PATH.join tmpdir_path, 'somefile.db' ), 'text'\n    info glob.sync PATH.join tmpdir_path, '**'\n    return 42\n  do =>\n    try\n      tmpdir_path = null\n      help 'before'\n      debug tmpdir_path = TMP.directory { name: 'abc.db', prefix, }\n      help do_work tmpdir_path\n      help 'after'\n    finally\n      info '^4484^', glob.sync PATH.join tmpdir_path, '**'\n      warn \"removing #{tmpdir_path}\"\n      await trash tmpdir_path ### NOTE `trash` command is async, consider to `await` ###\n      info '^4484^', glob.sync PATH.join tmpdir_path, '**'\n    return null\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_tempy_file = ->\n  trash       = require 'trash'\n  TMP         = require 'tempy'\n  extension   = 'db'\n  do =>\n    try\n      tmpfile_path = null\n      help 'before'\n      debug tmpfile_path = TMP.file { extension, }\n      # debug tmpfile_path = TMP.file { name: 'fgsjdh.xy', }\n      # help do_work tmpfile_path\n      help 'after'\n    finally\n      # info '^4484^', glob.sync PATH.join tmpfile_path, '**'\n      warn \"removing #{tmpfile_path}\"\n      await trash tmpfile_path ### NOTE `trash` command is async, consider to `await` ###\n      # info '^4484^', glob.sync PATH.join tmpfile_path, '**'\n    return null\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_temp = ->\nTEMP  = require 'temp'\nFS    = require 'fs'\nUTIL  = require 'util'\ndata  = \"foo\\nbar\\nfoo\\nbaz\"\n# exec  = ( require 'child_process' ).exec\n# Automatically track and cleanup files at exit\n# TEMP.track()\nTEMP.cleanupSync()\ndebug temp = TEMP.openSync { dir: '/dev/shm', prefix: 'dbay-', suffix: '.sqlite' }\nFS.writeSync temp.fd, data\ndebug rpr FS.readFileSync temp.path, { encoding: 'utf-8', }\n#   if (!err) {\n#     fs.write(info.fd, data, (err) => {\n#         console.log(err)\n#     })\n#     fs.close(info.fd, function(err) {\n#       exec(\"grep foo '\" + info.path + \"' | wc -l\", function(err, stdout) {\n#         util.puts(stdout.trim())\n#   return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_tempy_directory()\n  # await demo_tempy_file()\n  demo_temp()\n"
  ]
}