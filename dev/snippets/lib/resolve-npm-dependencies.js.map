{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/resolve-npm-dependencies.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'RESOLVE-NPM-DEPS'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\n# FS                        = require 'fs'\n#...........................................................................................................\n# types                     = require './types'\n# { isa\n#   validate\n#   cast\n#   check\n#   declare\n#   declare_check\n#   is_sad\n#   type_of }               = types.export()\nget_tree                  = require 'npm-logical-tree'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@get_package_dependencies = ( path )  ->\n  ### Given a `path` to an npm  module that should contain a `package.json` and a `package-lock.json` file,\n  return a report of transitive dependencies. The report will be an object with three fields:\n\n  * **`packages`**—a list of pairs of package names and versions (`[ 'name', '1.1.0', ]`); these are in\n    their installation order, i.e. each versioned package appears earlier than the packages that depend on\n    it.\n\n  * **`parents`**—an object whose keys are JSON representations os the values of `packages`, so like\n    `'[\"opentype.js\",\"1.3.3\"]'`, and whose values are pairs of package names and versions as above.\n\n  * **`duplicates`**—An object whose keys are unversioned package names and whose values are lists of\n    versions in no particular order.\n\n  ###\n  pkg             = require PATH.join path, 'package.json'\n  pkgLock         = require PATH.join path, 'package-lock.json'\n  tree            = get_tree pkg, pkgLock\n  { packages\n    parents  }    = @_get_package_dependencies tree\n  #.........................................................................................................\n  # Assemble a string `parent@version, parent@version, ...` for each package:\n  for key, value of parents\n    value           = [ value..., ]\n    value           = ( JSON.parse k for k in value )\n    parents[ key ]  = value\n  #.........................................................................................................\n  # Keep only first appearance of each versioned package in dependency-sorted list:\n  packages        = [ ( new Set packages )..., ]\n  packages        = ( ( JSON.parse d ) for d in packages )\n  #.........................................................................................................\n  # Based on the packages list, find dependencies with more than a single version:\n  duplicates      = {}\n  for [ name, version, ] in packages\n    ( duplicates[ name ] ?= new Set() ).add version\n  for name, versions of duplicates\n    if versions.size < 2\n      delete duplicates[ name ]\n      continue\n    duplicates[ name ] = [ versions..., ]\n  #.........................................................................................................\n  return { packages, parents, duplicates, }\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_package_dependencies = ( tree, R = null, seen = null, level = 0 )  ->\n  seen       ?= new WeakSet()\n  R          ?= { packages: [], parents: {}, }\n  # dent        = '  '.repeat level ### verbose ###\n  parent_key  = JSON.stringify [ tree.name, tree.version, ]\n  seen.add tree\n  if level > 0\n    R.packages.unshift parent_key\n    # urge \"#{dent}#{parent_key}\" ### verbose ###\n  for [ name, sub_tree, ] from tree.dependencies.entries()\n    sub_key = JSON.stringify [ sub_tree.name, sub_tree.version, ]\n    target  = R.parents[ sub_key ] ?= new Set()\n    target.add parent_key\n    if seen.has sub_tree\n      R.packages.unshift sub_key\n      # whisper \"#{dent}#{sub_key} (circular)\" ### verbose ###\n      continue\n    @_get_package_dependencies sub_tree, R, seen, level + 1\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@get_intershop_addon_installation_order = ( path ) ->\n  dependencies    = @get_package_dependencies path\n  { packages\n    parents\n    duplicates }  = dependencies\n  info packages\n  urge parents\n  info duplicates\n  @_complain_about_duplicates dependencies\n  return ( [ name, version, ] for [ name, version, ] in packages when /^intershop-/.test name )\n\n#-----------------------------------------------------------------------------------------------------------\n@_complain_about_duplicates = ( dependencies ) ->\n  # Complain about duplicates (only one version of a given InterShop Addon can be installed as they all\n  # write to the same DB):\n  { packages\n    parents\n    duplicates }  = dependencies\n  duplicate_names = []\n  for package_name, versions of duplicates\n    continue unless /^intershop-/.test package_name\n    warn \"multiple versions of package #{rpr package_name} detected:\"\n    duplicate_names.push package_name\n    for version in versions\n      key         = JSON.stringify [ package_name, version, ]\n      required_by = parents[ key ] ? [ [ \"UNKNOWN\", \"UNKNOWN\", ], ]\n      required_by = ( \"#{p}@#{v}\" for [ p, v, ] in required_by )\n      required_by = required_by.join ', '\n      warn \"  version #{version} required_by by #{required_by}\"\n  if duplicate_names.length > 0\n    throw new Error \"duplicate versions for packages #{duplicate_names.join ', '} detected; see details above\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo =  ->\n  # path            = PATH.resolve PATH.join __dirname, '../../..'\n  # path            = PATH.resolve PATH.join __dirname, '../../../../intershop-intertext'\n  path            = PATH.resolve PATH.join __dirname, '../../../../ucdb'\n  debug @get_intershop_addon_installation_order path\n  return null\n\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  @demo()\n\n"
  ]
}