{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/async-to-sync-with-atomics-wait.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n###\n\nSee\n  * [*A future for SQL on the web*](https://lobste.rs/s/1ylnel/future_for_sql_on_web)\n  * [*A future for SQL on the web* by James Long (August 12, 2021)](https://jlongster.com/future-sql-web)\n\n> The biggest problem is when sqlite does a read or write, the API is totally synchronous because it’s based\n> on the C API. Accessing IndexedDB is always async, so how do we get around that?\n>\n> We spawn a worker process and give it a SharedArrayBuffer and then use the\n> [`Atomics`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics) API\n> to communicate via the buffer. For example, our backend writes a read request into the shared buffer, and\n> the worker reads it, performs the read async, and then writes the result back.\n>\n> I wrote a small [channel\n> abstraction](https://github.com/jlongster/absurd-sql/blob/master/src/indexeddb/shared-channel.js) to send\n> different types of data across a SharedArrayBuffer.\n>\n> The real magic is the\n> [`Atomics.wait`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait)\n> API. It’s a beautiful thing. When you call it, it completely blocks JS until the condition is met. You use\n> it to wait on some data in the SharedArrayBuffer, and this is what enables us to turn the async read/write\n> into a sync one. The backend calls it to wait on the result from the worker and blocks until it’s\n> done.—[*A future for SQL on the web* by James Long (August 12,\n> 2021)](https://jlongster.com/future-sql-web)\n\n\n\n\n###\n\n\n\n\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DPAN/TESTS/BASIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ndefer                     = setImmediate\nafter                     = ( dts, f ) -> setTimeout  f, dts * 1000\n{ isMainThread\n  Worker\n  workerData            } = require 'worker_threads'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_A = ->\n  debug '^3486^', CND.reverse isMainThread, workerData\n  shared_data_idx     = 0\n  shared_data_value   = 54321\n  shared_data_signal  = 123456\n  shared_data_proceed = 64\n  #.........................................................................................................\n  release = ->\n    warn '^879-1^', \"release\"\n    shared_data = new Int32Array workerData\n    warn '^879-2^', \"waiting a bit in worker thread...\"\n    Atomics.wait shared_data, shared_data_idx, shared_data_value\n    after 1, ->\n      warn '^879-3^', Atomics.store  shared_data, shared_data_idx, shared_data_signal\n      warn '^879-4^', Atomics.notify shared_data, shared_data_idx, 1\n    return null\n  #.........................................................................................................\n  lock = ( shared_ram ) ->\n    info '^879-5^', \"lock\"\n    shared_data = new Int32Array shared_ram\n    timeout     = 1000\n    shared_data[ shared_data_idx ] = shared_data_value\n    info '^879-6^', shared_data[ shared_data_idx ]\n    whisper '^879-7^', '-------------------------------------------------------'\n    #.......................................................................................................\n    ( require 'fs' ).readFile __filename, ( error, data ) ->\n      info '^879-x^', \"read file\"\n      throw error if error?\n      info '^879-x^', \"read #{data.length} bytes\"\n      Atomics.store shared_data, shared_data_idx, shared_data_proceed\n    #.......................................................................................................\n    info '^879-8^', CND.reverse Atomics.wait shared_data, shared_data_idx, shared_data_value #, timeout\n    info '^879-9^', \"received shared_data_signal:\", shared_data[ shared_data_idx ]\n    return null\n  #.........................................................................................................\n  if isMainThread\n    info '^879-10^', \"main thread\"\n    shared_ram  = new SharedArrayBuffer Int32Array.BYTES_PER_ELEMENT\n    worker      = new Worker __filename, { workerData: shared_ram }\n    lock shared_ram\n  else\n    warn '^879-11^', \"worker thread\"\n    release()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_B = ->\n  ### thx to https://stackoverflow.com/a/53923671/256361 ###\n  debug '^447-1^', 'isMainThread', isMainThread\n  worker_count = 3\n  if isMainThread\n    # main thread, create shared memory to share between threads\n    debug '^447^', 'isMainThread'\n    shared_ram = new SharedArrayBuffer Int32Array.BYTES_PER_ELEMENT\n    process.on 'exit', () =>\n      # print final counter\n      result = new Int32Array shared_ram\n      urge '^778^', result\n      urge '^778^', result[0] # expected 5 * 500,000 = 2,500,000\n      return null\n    workers = []\n    for _ in [ 1 .. worker_count ]\n      worker = new Worker __filename, { workerData: shared_ram }\n      debug ( k for k of worker )\n  else\n    shared_data = new Int32Array workerData\n    for i in [ 0 ... 3 ]\n      # debug '^445^', shared_data\n      debug '^445^', shared_data[ 0 ]++\n  return null\n\n\n#===========================================================================================================\n# DEASYNC\n#-----------------------------------------------------------------------------------------------------------\ndemo_deasync_1 = ->\n  deasync = require 'deasync'\n  cp      = require 'child_process'\n  exec    = deasync cp.exec\n  # output result of ls -la\n  try\n      info '^434-1^', exec 'ls -la'\n  catch error\n      info '^434-2^', error\n  # done is printed last, as supposed, with cp.exec wrapped in deasync first without.\n  info '^434-3^', 'done'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_deasync_2 = ->\n  after                 = ( dts, f ) -> setTimeout  f, dts * 1000\n  deasync_callbackable  = require 'deasync'\n  #.........................................................................................................\n  deasync_awaitable = ( fn_with_promise ) ->\n    return deasync_callbackable ( P..., handler ) =>\n      result = await fn_with_promise P...\n      handler null, result\n      return null\n  #.........................................................................................................\n  frob_async = ( P... ) -> new Promise ( resolve ) =>\n    debug '^455-x^', P\n    after 1, -> warn '^455-1^', \"frob_async done\"; resolve()\n  #.........................................................................................................\n  frob_sync = deasync_awaitable frob_async\n  frob_sync 1, 2, 3\n  info '^455-3^', \"call to frob_sync done\"\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_A()\n  # await demo_B()\n  # await demo_deasync_1()\n  demo_deasync_2()\n  urge '^803-1^', \"demo_deasync_2 done\"\n\n\n"
  ]
}