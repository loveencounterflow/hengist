{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-svg-shape-unions.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,MADF,EAEE,OAFF,EAGE,QAHF,EAIE,gBAJF,CAAA,GAI4B,KAAK,CAAC,MAAN,CAAA,CAJ5B;;EAKA,GAAA,GAA4B,OAAA,CAAQ,mBAAR,EAvB5B;;;EAyBA,IAAA,GAA4B,OAAA,CAAQ,MAAR,EAzB5B;;;EA6BA,MAAA,GAAS,QAAA,CAAA,CAAA;AACT,QAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA;IAAE,MAAA,GAAU;IACV,MAAA,GAAU;IACV,GAAA,GAAU,EAAE,CAAC,YAAH,CAAgB,MAAhB,EAAwB;MAAE,QAAA,EAAU;IAAZ,CAAxB;IACV,GAAA,GACE;MAAA,IAAA,EAAY,MAAZ;MACA,MAAA,EAAY,IADZ;MAEA,SAAA,EAAY;IAFZ;IAGF,MAAA,GAAU,IAAI,CAAC,QAAL,CAAc,GAAd,EAAmB,GAAnB;IACV,IAAA,CAAK,OAAL,EAAc,IAAA,GAAO,MAAM,CAAC,IAA5B;IACA,IAAA,CAAK,OAAL,EAAc,MAAM,CAAC,IAArB,EATF;;AAWE,WAAO;EAZA,EA7BT;;;EA6CA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA;aAChC,MAAA,CAAA;IADgC,CAAA,IAAlC;;AA7CA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/TESTS/BASIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nguy                       = require '../../../apps/guy'\n# MMX                       = require '../../../apps/multimix/lib/cataloguing'\nSVGO                      = require 'svgo'\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  fspath  = '/home/flow/temp/svg-path-optimization/unoptimized-two-shapes.svg'\n  fspath  = '/home/flow/temp/svg-path-optimization/unoptimized-two-paths.svg'\n  svg     = FS.readFileSync fspath, { encoding: 'utf-8', }\n  cfg     =\n    path:       fspath\n    pretty:     true\n    multipass:  true\n  result  = SVGO.optimize svg, cfg\n  urge '^778^', '\\n' + result.data\n  info '^778^', result.info\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  demo_1()"
  ]
}