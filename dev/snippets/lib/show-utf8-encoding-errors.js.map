{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/show-utf8-encoding-errors.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'IN-MEMORY-SQL'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nFSP                       = require 'fs/promises'\nSP                        = require '../../../apps/steampipes'\n{ $\n  $async\n  $watch\n  $show\n  $split\n  $drain }                = SP.export()\nRe2                       = require 're2' ### https://github.com/uhop/node-re2 ###\nexecall                   = require 'execall' ### https://github.com/sindresorhus/execall ###\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@get_utf8_pattern = ->\n  # see http://www.unicode.org/versions/Unicode13.0.0/ch03.pdf#G7404\n  _utf8_byte_pattern  = ''\n  _utf8_byte_pattern += '[\\\\x01-\\\\x7F]|'\n  _utf8_byte_pattern += '[\\\\xC2-\\\\xDF][\\\\x80-\\\\xBF]|'\n  _utf8_byte_pattern += '[\\\\xE0][\\\\xA0-\\\\xBF][\\\\x80-\\\\xBF]|'\n  _utf8_byte_pattern += '[\\\\xE1-\\\\xEC][\\\\x80-\\\\xBF][\\\\x80-\\\\xBF]|'\n  _utf8_byte_pattern += '[\\\\xED][\\\\x80-\\\\x9F][\\\\x80-\\\\xBF]|'\n  _utf8_byte_pattern += '[\\\\xEE-\\\\xEF][\\\\x80-\\\\xBF][\\\\x80-\\\\xBF]|'\n  _utf8_byte_pattern += '[\\\\xF0][90-\\\\xBF][\\\\x80-\\\\xBF][\\\\x80-\\\\xBF]|'\n  _utf8_byte_pattern += '[\\\\xF1-\\\\xF3][\\\\x80-\\\\xBF][\\\\x80-\\\\xBF][\\\\x80-\\\\xBF]|'\n  _utf8_byte_pattern += '[\\\\xF4][\\\\x80-\\\\x8F][\\\\x80-\\\\xBF][\\\\x80-\\\\xBF]'\n  # see https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md#binary-data\n  # legal_utf8_byte_pattern   = ''\n  # # legal_utf8_byte_pattern   = '(?-u)'\n  # legal_utf8_byte_pattern  += '^('\n  # legal_utf8_byte_pattern  += _utf8_byte_pattern\n  # legal_utf8_byte_pattern  += ')*$'\n  return \"(?:#{_utf8_byte_pattern})+\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$find_error = ( do_echo ) ->\n  lnr     = 0\n  pattern = @get_utf8_pattern()\n  re2     = new Re2     pattern, 'g'\n  re0     = new RegExp  pattern, 'g'\n  return $ ( buffer, send ) ->\n    lnr++\n    text = buffer.toString 'utf-8'\n    unless 'ï¿½' in text\n      echo text if do_echo\n      send text\n      return null\n    parts     = execall re0, text\n    new_text  = ( part.match for part in parts ).join 'ðŸ”¶'\n    echo new_text if do_echo\n    send new_text\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@show_encoding_errors = ( path ) -> new Promise ( resolve, reject ) =>\n  source    = SP.read_from_file path\n  pipeline = []\n  pipeline.push source\n  pipeline.push $split '\\n', false\n  pipeline.push @$find_error true\n  # pipeline.push $watch ( d ) ->\n  #   echo d if show > 0\n  #   show--\n  pipeline.push $drain -> resolve()\n  SP.pull pipeline...\n  return null\n\n# iconv -f UTF-8 -t UTF-8//IGNORE \"$1\" > \"$2\"\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # debug '^56686^', process.argv\n  ### TAINT use mixa ###\n  path = process.argv[ 2 ]\n  @show_encoding_errors path\n  # debug @get_utf8_pattern()\n  # info execall /./, 'abcd'\n  # info execall /./g, 'abcd'\n  # help match for match in execall /\\d+/g, \"100, 23 and 42\"\n  # info()\n  # help match for match in execall /((\\d+))/g, \"100, 23 and 42\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  ]
}