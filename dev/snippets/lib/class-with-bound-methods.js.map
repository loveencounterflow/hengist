{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/class-with-bound-methods.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,OAFF,EAGE,QAHF,CAAA,GAG4B,KAH5B,EAfA;;;;;EAwBM,IAAN,MAAA,EAAA;IAEE,WAAa,CAAA,CAAA;UAMb,CAAA,wBAAA,CAAA,6BALF;;MACI,IAAC,CAAA,kBAAD,GAAsB;MACtB,IAAC,CAAA,iBAAD,GAAsB;AACtB,aAAO;IAJI;;IAMb,iBAAoB,CAAA,CAAA;aAAG,IAAC,CAAA;IAAJ;;IACpB,gBAAoB,CAAA,CAAA;aAAG,IAAC,CAAA;IAAJ;;EATtB;;EAWA,CAAA,GAAI,MAAM,CAAC,MAAP,CAAc,CAAd,EAnCJ;;;EAsCM,IAAN,MAAA,EAAA,QAAgB,EAAhB;IAEE,WAAa,CAAA,CAAA;WACX,CAAA;MACA,IAAC,CAAA,kBAAD,GAAsB;MACtB,IAAC,CAAA,iBAAD,GAAsB;AACtB,aAAO;IAJI;;EAFf,EAtCA;;;EA+CA,IAAA,GAAO,QAAA,CAAE,CAAF,CAAA;AACP,QAAA,iBAAA,EAAA,KAAA,EAAA;IAAE,OAAA,CAAQ,gDAAR;IACA,KAAA,CAAM,CAAN;IACA,KAAA,CAAM,OAAA,CAAQ,CAAR,CAAN,EAFF;;;IAKE,IAAA,CAAK,CAAC,CAAC,iBAAF,CAAA,CAAL;IACA,IAAA,CAAK,CAAC,CAAC,gBAAF,CAAA,CAAL;IACA,CAAA,CAAE,iBAAF,EACE,gBADF,CAAA,GACuB,CADvB;IAEA,IAAA,CAAK,iBAAA,CAAA,CAAL;AACA;aAAI,IAAA,CAAK,gBAAA,CAAA,CAAL,EAAJ;KAA4B,cAAA;MAAM;aAAW,IAAA,CAAK,GAAG,CAAC,OAAJ,CAAY,KAAK,CAAC,OAAlB,CAAL,EAAjB;;EAXvB,EA/CP;;;EA8DA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA;MAChC,IAAA,CAAK,IAAI,CAAJ,CAAA,CAAL;MACA,IAAA,CAAK,IAAI,CAAJ,CAAA,CAAL;aACA,CAAC,CAAC,CAAF,GAAM;IAH0B,CAAA,IAAlC;;AA9DA",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'CLASS-WITH-BOUND-METHODS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  declare\n  validate }              = types\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass A\n\n  constructor: ->\n    # super()\n    @property_for_bound = 'bound_method_on_a'\n    @property_for_free  = 'free_method_on_a'\n    return undefined\n\n  bound_method_on_a:  => @property_for_bound\n  free_method_on_a:   -> @property_for_free\n\nA = Object.freeze A\n\n#-----------------------------------------------------------------------------------------------------------\nclass B extends A\n\n  constructor: ->\n    super()\n    @property_for_bound = 'bound_method_on_b'\n    @property_for_free  = 'free_method_on_b'\n    return undefined\n\n#-----------------------------------------------------------------------------------------------------------\nshow = ( x ) ->\n  whisper '----------------------------------------------'\n  debug x\n  debug type_of x\n  # urge type_of x.bound_method_on_a\n  # urge type_of x.free_method_on_a\n  info x.bound_method_on_a()\n  info x.free_method_on_a()\n  { bound_method_on_a\n    free_method_on_a } = x\n  help bound_method_on_a()\n  try help free_method_on_a() catch error then warn CND.reverse error.message\n\n\n############################################################################################################\nif module is require.main then do =>\n  show new A()\n  show new B()\n  A.x = 42\n\n\n\n\n\n\n\n"
  ]
}