{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/line-breaking-with-dynamic-programming.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,SAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA;;;;;;;;;;;;;;;;EAkBA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EA1B5B;;;EA4BA,EAAA,GAA4B,IAAI,CAAC,UA5BjC;;;EA8BA,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,IAFF,EAGE,OAHF,CAAA,GAG4B,KAH5B,EA/BA;;;;;;;;EAyCA,SAAA,GAA4B,OAAA,CAAQ,yBAAR,EAzC5B;;;EA8CA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,KAAA,CAAA,CAAA,GAAA;AAElC,UAAA;MAAE,IAAA,GAAO,CAAA;;qGAAA;MAGP,IAAA,GAAO;MACP,IAAA,GAAO;MACP,IAAA,GAAO,IAAI,CAAC,OAAL,CAAa,KAAb,EAAoB,GAApB;MACP,IAAA,GAAO,IAAI,CAAC,OAAL,CAAa,MAAb,EAAqB,GAArB,EANT;;aAQE,CAAA,MAAM,IAAC,CAAA,WAAD,CAAa,IAAb,CAAN;IAVgC,CAAA,IAAlC;;AA9CA",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n###\n\n* MIT 6.006 Introduction to Algorithms, Fall 2011, View the complete course: http://ocw.mit.edu/6-006F11\n  Instructor: Erik Demaine; [20. Dynamic Programming II: Text Justification,\n  Blackjack](https://youtu.be/ENyox7kNKeY?t=1027)\n\n* [Text Justification Dynamic Programming (Tushar Roy - Coding Made\n  Simple)](https://www.youtube.com/watch?v=RORuwHiblPc). Given a sequence of words, and a limit on the\n  number of characters that can be put in one line (line width). Put line breaks in the given sequence such\n  that the lines are printed neatly. See code at\n  https://github.com/mission-peace/interview/blob/master/src/com/interview/dynamic/TextJustification.java\n\n###\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/SNIPPETS/DP-LINE-BREAKING'\ndebug                     = CND.get_logger 'debug',     badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nhelp                      = CND.get_logger 'help',      badge\nwarn                      = CND.get_logger 'warn',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\njr                        = JSON.stringify\n# test                      = require 'guy-test'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  cast\n  type_of }               = types\n# SP                        = require '../../../apps/steampipes'\n# { $\n#   $async\n#   $watch\n#   $show\n#   $drain }                = SP.export()\nINTERTEXT                 = require '../../../apps/intertext'\n\n\n\n############################################################################################################\nif module is require.main then do =>\n\n  text = \"\"\"Hercules (/ˈhɜːrkjuliːz, -jə-/) is a Roman hero and god. He was the Roman equivalent of the\n  Greek divine hero Heracles, who was the son of Zeus (Roman equivalent Jupiter) and the mortal Alcmene. In\n  classical mythology, Hercules is famous for his strength and for his numerous far-ranging adventures.\"\"\"\n  text = \"very short example\"\n  text = \"Zentral/Dezentral, Innenorientierung/Kundenzentrierung und Fremdsteuerung/Selbstverantwortung\"\n  text = text.replace /\\n/g, ' '\n  text = text.replace /\\s+/g, ' '\n  # await @demo_looping text\n  await @demo_piping text\n\n\n\n\n\n\n\n\n\n\n\n"
  ]
}