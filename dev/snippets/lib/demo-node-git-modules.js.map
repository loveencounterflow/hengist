{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-node-git-modules.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DEMO-NODE-GIT-MODULES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n{ to_width }              = require 'to-width'\nglob                      = require 'glob'\nPATH                      = require 'path'\nFS                        = require 'fs'\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_nodegit = ->\n  NodeGit             = require 'nodegit'\n  pkg_fspath          = '../../../'\n  pkg_fspath          = PATH.resolve PATH.join __dirname, pkg_fspath\n  repo                = await NodeGit.Repository.open pkg_fspath\n  status              = await repo.getStatus()\n  for d in status\n    info d\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_gitutils = ->\n  GU                  = require 'git-utils'\n  pkg_fspath          = '../../../'\n  pkg_fspath          = PATH.resolve PATH.join __dirname, pkg_fspath\n  help '^353^', { pkg_fspath, }\n  repo                = GU.open pkg_fspath\n  urge repo\n  #.........................................................................................................\n  status_from_snr = ( snr ) =>\n    R     = {}\n    count = 0\n    ( R.ignored   = true; count++ ) if repo.isStatusIgnored  snr\n    ( R.modified  = true; count++ ) if repo.isStatusModified snr\n    ( R.new       = true; count++ ) if repo.isStatusNew      snr\n    ( R.deleted   = true; count++ ) if repo.isStatusDeleted  snr\n    ( R.staged    = true; count++ ) if repo.isStatusStaged   snr\n    R.unknown   = true if count is 0\n    return R\n  #.........................................................................................................\n  # refs = repo.getReferences()\n  # for remote in refs.remotes\n  #   info remote\n  abc         = repo.getAheadBehindCount 'HEAD'\n  acc         = abc.ahead   ### ACC, ahead-commit  count ###\n  bcc         = abc.behind  ### BCC, behind-commit count ###\n  dfc         = 0           ### DFC, dirty file    count ###\n  for obj_fspath, snr of repo.getStatus()\n    dfc++\n    info snr, obj_fspath, status_from_snr snr\n  help \"dfc:            \", dfc\n  help \"acc:            \", acc\n  help \"bcc:            \", bcc\n  help \"head:           \", repo.getHead()\n  urge repo.getUpstreamBranch()\n  # urge repo.getReferenceTarget 'refs/remotes/origin/HEAD'\n  # help 'commits:',        repo.getCommitCount()\n  repo.release()\n  # debug ( k for k of repo ).sort()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_gitlog = ->\n  gitlog              = ( require 'gitlog' ).default\n  pkg_fspath          = '../../../'\n  pkg_fspath          = PATH.resolve PATH.join __dirname, pkg_fspath\n  cfg                 =\n    repo:       pkg_fspath\n    number:     1e6\n    # fields: [\"hash\", \"abbrevHash\", \"subject\", \"authorName\", \"authorDateRel\"],\n    execOptions: { maxBuffer: 1000 * 1024 },\n  commits       = gitlog cfg\n  commit_count  = commits.length\n  info \"commit_count:\", commit_count\n  for commit in commits[ .. 10 ]\n    file_count  = commit.files.length\n    short_hash  = commit.abbrevHash\n    date        = commit.authorDate\n    subject     = to_width commit.subject, 100\n    urge file_count, short_hash, date, subject\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_nodegit()\n  await demo_gitutils()\n  await demo_gitlog()\n\n\n"
  ]
}