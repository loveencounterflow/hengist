{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/perceptual-image-hash-phash.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,cAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC,EAdA;;;EAmBA,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,QAFF,EAGE,iBAHF,CAAA,GAG4B,KAH5B;;EAIA,KAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR,EAzB5B;;;EA6BA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAA+B,MAAS,CAAA,KAAA,CAAA,CAAA,GAAA;AACxC,UAAA,IAAA,EAAA,MAAA,EAAA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,GAAA,EAAA;MAAE,IAAA,GAAO,OAAA,CAAQ,WAAR,EAAT;;MAEE,OAAA,GAAU,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,8BAArB,CAAb;MACV,MAAA,GAAS;AACT;MAAA,KAAA,qCAAA;;QACE,KAAgB,KAAK,CAAC,QAAN,CAAe,MAAf,CAAhB;AAAA,mBAAA;;QACA,MAAA;QACA,IAAA,CAAK,OAAL,EAAc,KAAd;QACA,EAAA,GAAK,CAAA,MAAM,KAAK,CAAC,OAAN,CAAc,KAAd,CAAN;QACL,IAAS,MAAA,GAAS,CAAlB;AAAA,gBAAA;;QACA,MAAA,GAAS;AACT;QAAA,KAAA,wCAAA;;UACE,KAAgB,KAAK,CAAC,QAAN,CAAe,MAAf,CAAhB;AAAA,qBAAA;;UACA,MAAA;UACA,IAAS,MAAA,GAAS,CAAlB;AAAA,kBAAA;;UACA,IAAA,CAAK,OAAL,EAAc,KAAd;UACA,EAAA,GAAK,CAAA,MAAM,KAAK,CAAC,OAAN,CAAc,KAAd,CAAN;UACL,IAAA,CAAK,OAAL,EAAc,CAAA,MAAM,KAAK,CAAC,OAAN,CAAc,EAAd,EAAkB,EAAlB,CAAN,CAAd;QANF;MAPF;AAcA,aAAO;IAnB+B,CAAA,IAAxC;;AA7BA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/NG'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  validate_optional }     = types\nPHASH                     = require 'phash-im'\nglob                      = require 'glob'\n\n\n############################################################################################################\nif module is require.main then await do =>\n  PATH = require 'node:path'\n  #.........................................................................................................\n  pattern = PATH.resolve PATH.join __dirname, '../../../../../Downloads/b/*'\n  count1 = 0\n  for path1 in glob.sync pattern\n    continue unless path1.endsWith '.jpg'\n    count1++\n    urge '^423^', path1\n    h1 = await PHASH.compute path1\n    break if count1 > 5\n    count2 = 0\n    for path2 in glob.sync pattern\n      continue unless path2.endsWith '.jpg'\n      count2++\n      break if count2 > 5\n      help '^423^', path2\n      h2 = await PHASH.compute path2\n      info '^423^', await PHASH.compare h1, h2\n  return null\n\n"
  ]
}