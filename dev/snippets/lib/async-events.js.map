{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/async-events.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'subsidiary'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# test                      = require 'guy-test'\n#...........................................................................................................\nresolved_promise          = Promise.resolve()\ns                         = ( name ) -> Symbol.for  name\nps                        = ( name ) -> Symbol      name\n\n\n#===========================================================================================================\nisa =\n  anything:               ( x ) -> true\n  nothing:                ( x ) -> not x?\n  something:              ( x ) -> x?\n  boolean:                ( x ) -> ( x is true ) or ( x is false )\n  function:               ( x ) -> ( Object::toString.call x ) is '[object Function]'\n  asyncfunction:          ( x ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n  symbol:                 ( x ) -> ( typeof x ) is 'symbol'\n  object:                 ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n  text:                   ( x ) -> ( typeof x ) is 'string'\n  event_listener:         ( x ) -> ( @function x ) or ( @asyncfunction x )\n  event_key:              ( x ) -> ( @text x ) or ( @symbol x )\n  nullary:                ( x ) -> x? and ( x.length is 0 )\n  unary:                  ( x ) -> x? and ( x.length is 1 )\n  binary:                 ( x ) -> x? and ( x.length is 2 )\n  unary_or_binary:        ( x ) -> x? and ( ( x.length is 1 ) or ( x.length is 2 ) )\n  $freeze:                ( x ) -> isa.boolean x\n\n\n#===========================================================================================================\n{ isa_optional\n  validate\n  validate_optional } = do =>\n  isa_optional      = {}\n  validate          = {}\n  validate_optional = {}\n  #.........................................................................................................\n  for type, test of isa\n    do ( type, test ) =>\n      isa_optional[       type ] = ( x ) => if x? then ( test x )             else true\n      validate_optional[  type ] = ( x ) => if x? then ( validate[ type ] x ) else x\n      validate[           type ] = ( x ) =>\n        return x if test.call isa, x\n        ### TAINT `typeof` will give some strange results ###\n        throw new Error \"expected a #{type}, got a #{typeof x}\"\n  #.........................................................................................................\n  return { isa_optional, validate, validate_optional, }\n\n#===========================================================================================================\nclass Datom\n  ### all API methods should start with `$` like `$key` and `$value` ###\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( $key, $value = null ) ->\n    throw new Error \"expected 1 or 2 arguments, got #{arguments.length}\" unless isa.unary_or_binary arguments\n    #.......................................................................................................\n    if arguments.length is 1\n      if isa.object $key\n        $value = $key\n        $key   = $value.$key ? null\n    #.......................................................................................................\n    @$key = $key\n    if isa.object $value\n      values = { $value..., }\n      delete values.$key ### special case: ensure we don't overwrite 'explicit' `$key` ###\n      Object.assign @, values\n    else\n      @$value = $value if $value?\n    #.......................................................................................................\n    $freeze = ( validate_optional.$freeze @$freeze ) ? true\n    delete @$freeze\n    Object.freeze @ if $freeze\n    #.......................................................................................................\n    validate.event_key @$key\n    return undefined\n\n\n#===========================================================================================================\nclass Event extends Datom\n\n#===========================================================================================================\nclass Event_results extends Datom\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( event, results ) ->\n    throw new Error \"expected 2 arguments, got #{arguments.length}\" unless isa.binary arguments\n    super 'event-results', { event, results, }\n    return undefined\n\n\n#===========================================================================================================\nclass Async_events\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @symbols    = {}\n    @listeners  = new WeakMap()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  on: ( key, receiver ) ->\n    ### TAINT prevent from registering a listener more than once per event key ###\n    throw new Error \"expected 2 arguments, got #{arguments.length}\" unless isa.binary arguments\n    validate.event_key key\n    validate.something receiver\n    #.......................................................................................................\n    ### TAINT is this necessary and does it what it intends to do? ###\n    ### use Symbol, WeakMap to allow for garbage collection when `Async_events` instance gets out of scope: ###\n    @symbols[ key ]           = ( key_symbol  = Symbol key  ) unless ( key_symbol = @symbols[ key ]           )?\n    @listeners.set key_symbol,  ( registry    = []          ) unless ( registry   = @listeners.get key_symbol )?\n    #.......................................................................................................\n    ### if receiver is a callable, use it; else, try to retrieve a suitably named method and use that: ###\n    if isa.event_listener receiver\n      listener      = receiver\n    else\n      listener_name = \"on_#{key}\"\n      listener0     = validate.event_listener receiver[ listener_name ]\n      listener      = ( P... ) -> await listener0.call receiver, P...\n    #.......................................................................................................\n    registry[ key_symbol ] = listener\n    unsubscribe = ->\n    return unsubscribe\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT pass arguments to new Datom / new Event ###\n  emit: ( key, data = null ) ->\n    throw new Error \"expected 1 or 2 arguments, got #{arguments.length}\" unless isa.unary_or_binary arguments\n    event = new Event key, data\n    listeners = ( AE.listeners.get AE.symbols[ key ] ) ? []\n    help '^992-1^', listener for listener from listeners\n    help '^992-2^', await listener key, data for listener from listeners\n    await resolved_promise ### as per https://github.com/sindresorhus/emittery/blob/main/index.js#L363 ###\n    results = await Promise.all ( ( -> await listener key, data )() for listener from listeners )\n    return new Event_results event, results\n\n  # #---------------------------------------------------------------------------------------------------------\n  # matches: ( matcher, candidate ) ->\n\n\n#===========================================================================================================\nAE = new Async_events()\n\n#===========================================================================================================\ndemo_1 = ->\n  receiver =\n    on_blah:  ( key, data ) -> info '^992-3^', key, data, @; JSON.stringify { key, data, }\n    on_foo:   ( key, data ) -> info '^992-4^', key, data, @; JSON.stringify { key, data, }\n    on_dig:   ( key, data ) -> info '^992-5^', key, data, @; JSON.stringify { key, data, }\n  AE.on 'blah', receiver\n  AE.on 'foo',  receiver\n  AE.on 'dig',  receiver.on_dig\n  debug '^992-6^', AE\n  debug '^992-7^', AE.symbols[ 'blah' ]\n  debug '^992-8^', AE.listeners\n  debug '^992-9^', AE.listeners.get AE.symbols[ 'blah' ]\n  debug '^992-10^', await AE.emit 'blah'\n  debug '^992-11^', await AE.emit 'foo'\n  debug '^992-12^', await AE.emit 'dig'\n  ### TAINT should not be accepted, emit 1 object or 1 key plus 0-1 data: ###\n  try ( debug '^992-13^', await AE.emit 'foo', 3, 4, 5, 6      ) catch e then warn '^992-14^', reverse e.message\n  try ( debug '^992-15^', await AE.emit 'foo', 3, [ 4, 5, 6, ] ) catch e then warn '^992-16^', reverse e.message\n  debug '^992-17^', await AE.emit 'foo', [ 3, 4, 5, 6, ]\n  return null\n\n#===========================================================================================================\ndemo_2 = ->\n  class A\n  class B extends Object\n  urge '^992-18^', A\n  urge '^992-19^', A.freeze\n  urge '^992-20^', new A()\n  urge '^992-21^', B\n  urge '^992-22^', new B()\n  urge '^992-23^', isa.object A\n  urge '^992-24^', isa.object B\n  urge '^992-25^', isa.object new A()\n  urge '^992-26^', isa.object new B()\n  try new Datom()     catch e then warn '^992-27^', reverse e.message\n  try new Datom 5     catch e then warn '^992-28^', reverse e.message\n  try new Datom null  catch e then warn '^992-29^', reverse e.message\n  try new Datom {}    catch e then warn '^992-30^', reverse e.message\n  urge '^992-31^', new Datom 'foo'\n  urge '^992-32^', new Datom 'foo', null\n  urge '^992-33^', new Datom 'foo', undefined\n  urge '^992-34^', new Datom 'foo', 56\n  urge '^992-35^', new Datom 'foo', { bar: 56, }\n  urge '^992-36^', new Datom 'foo', { bar: 56, $key: 'other', }\n  urge '^992-37^', new Datom s'foo', { bar: 56, $key: 'other', }\n  urge '^992-38^', new Datom { bar: 56, $key: 'other', }\n  urge '^992-39^', new Datom { bar: 56, $key: 'other', $freeze: false, }\n  urge '^992-40^', new Datom { bar: 56, $key: 'other', $freeze: true, }\n  urge '^992-41^', new Datom { bar: 56, $key: 'other', $freeze: null, }\n  urge '^992-42^', new Datom 'something', { $freeze: false, }\n  urge '^992-43^', new Datom 'something', { $freeze: true,  }\n  urge '^992-44^', new Datom 'something', { $freeze: null,  }\n  #.........................................................................................................\n  ### must set `{ $freeze: false, }` explicitly else datom will be (superficially) frozen: ###\n  do =>\n    d = new Datom 'o', { $freeze: false, }\n    d.p = 7\n    urge '^992-45^', d\n    return null\n  #.........................................................................................................\n  ### passing in an existing datom (or event) `d` into `new Datom d` (or `new Event d`) results in a copy\n  of `d`: ###\n  do =>\n    d = new Datom 'o', { $freeze: false, }\n    e = new Datom d\n    urge '^992-46^', d, e, d is e\n    return null\n  #.........................................................................................................\n  ### events are just `Datom`s: ###\n  urge '^992-47^', new Event s'foo', { bar: 56, }\n  #.........................................................................................................\n  ### calls to `emit` are just calls to `new Event()`: ###\n  await do =>\n    AE.on 'myevent', ( event ) -> info '^992-48^', event; event.n ** 2\n    help '^992-49^', await AE.emit 'myevent', { n: 16, }\n    return null\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  await demo_1()\n  # await demo_2()\n  # await demo_3()\n  # urge '^992-50^', await Promise.all (\n  #   # new Promise ( ( resolve, reject ) -> resolve i ) for i in [ 1 .. 10 ]\n  #   ( ( ( count ) -> await count ) i + 1 ) for i in [ 1 .. 10 ]\n  #   )\n\n\n\n"
  ]
}