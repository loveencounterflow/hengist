{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/functions-with-sync-and-async-variants.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'CUPOFJOE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\n#...........................................................................................................\n@types                    = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  type_of }               = @types.export()\ndefer                     = setImmediate\nafter                     = ( dts, f ) -> setTimeout f, dts * 1000\nsleep                     = ( dts ) -> new Promise ( done ) -> after dts, done\n\n\n###\n\n* You have a function `f()` that may work synchronously or asynchronously, depending on runtime\n  factors.\n* As such, making it the consumer's responsibility to choose bewteen `f_sync ...` or `await f_async ...` is\n  not the problem;\n* but the implementations for `f_sync()` and `f_async()` would be almost identical save for one or a few\n  conditional branches\n\n###\n\n#===========================================================================================================\nclass Exp1\n\n  #---------------------------------------------------------------------------------------------------------\n  expand_sync: ( list ) ->\n    for element, idx in list\n      debug 'expand_sync', { idx, element, }\n      switch type = type_of element\n        when 'function'       then list[ idx ] = element()\n        when 'asyncfunction'  then throw new Error \"unable to resolve async function synchronously\"\n      if isa.promise list[ idx ] then throw new Error \"unable to resolve async function synchronously (item #{idx}): #{rpr list[ idx ]}\"\n    return list\n\n  #---------------------------------------------------------------------------------------------------------\n  expand_async: ( list ) ->\n    for element, idx in list\n      debug 'expand_async', { idx, element, }\n      switch type = type_of element\n        when 'function'       then list[ idx ] =        element()\n        when 'asyncfunction'  then list[ idx ] = await  element()\n      # if type_of list[ idx ] is 'promise' then list[ idx ] = await list[ idx ]\n      if isa.promise list[ idx ] then list[ idx ] = await list[ idx ]\n    return list\n\n  #---------------------------------------------------------------------------------------------------------\n  demo: ->\n    sync_f  = -> 'sync'\n    async_f = -> new Promise ( done ) -> await sleep 0; done 'async!'\n    debug '^223^', \"type_of async_f:\", type_of async_f\n    debug '^223^', \"async_f():\",       async_f()\n    debug '^223^', \"await async_f():\", await async_f()\n    info @expand_sync [ 4, sync_f, 8, ]\n    try @expand_sync [ sync_f, async_f, 8, ] catch error\n      warn CND.reverse \"^3334^ error (ok): #{rpr error.message}\"\n    info await @expand_async [ sync_f, async_f, 8, ]\n    return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  exp1 = new Exp1()\n  await exp1.demo()\n\n\n\n"
  ]
}