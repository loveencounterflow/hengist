{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/home/flow/jzr/hengist/dev/snippets/src/write-font-configuration-for-kitty-terminal.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n###\n\nCSS rules in general (and CSS3 Unicode Range rules in particular) work by the 'backwards early worm'\nprinciple (i.e. who comes late takes the cake), analogous to JS `Object.assign( a, b, c )` where any\nattribute in the later argument, say `c.x`, will override (shadow) any homonymous attribute in both `a` and\n`b`.\n\n> This is the right way to do it: When doing configurations, we want to start with defaults and end with\n> specific overrides. Linux' Font-Config got this backwars which is one reason it sucks so terribly:\n> you can't make one of your own rules become effective unless you wrestle against a system that believes\n> earlier settings must override later ones. Anyhoo.\n\n\n```\n═════════════════ ══════════════════════════  ══════════════════════════════════════════════════════════════\nsuperset          ABCDEFGHIJKLMNOPQRSTUVWXYZ  │ CSS-like Configuration with Overlapping Ranges\n————————————————— ——————————————————————————  ——————————————————————————————————————————————————————————————\nfont1             BCDEFGH J L NOPQRSTUVWX    │ [B-H] [J] [L] [N-X]                      ◮ least precedence\nfont2             BCD                        │ [B-D]                                    │\nfont3                  GHI                   │ [G-I]                                    │\nfont4                        MNOPQ           │ [M-Q]                                    │\nfont5                        M OPQRST        │ [M] [O-T]                                │\nfont6                        M       U  XY   │ [M] [U] [X-Y]                            │ most precedence\n═════════════════ ══════════════════════════  ══════════════════════════════════════════════════════════════\nsuperset          ABCDEFGHIJKLMNOPQRSTUVWXYZ  │\n————————————————— ——————————————————————————  ——————————————————————————————————————————————————————————————\nfont1              ┼┼┼EF┼┼│J L│┼┼┼┼┼┼┼┼VW┼│   │                                          ◮ least precedence\nfont2              BCD  │││   │││││││││  ││   │                                          │\nfont3                   GHI   │││││││││  ││   │                                          │\nfont4                         ┼N┼┼┼││││  ││   │                                          │\nfont5                         ┼ OPQRST│  ││   │                                          │\nfont6                         M       U  XY   │                                          │ most precedence\n═════════════════ ══════════════════════════  ══════════════════════════════════════════════════════════════\nsuperset          ABCDEFGHIJKLMNOPQRSTUVWXYZ  │ Kiitty-like Configuration with Disjunct Ranges\n————————————————— ——————————————————————————  ——————————————————————————————————————————————————————————————\nfont1                 EF   J L         VW     │ [E-F] [J] [L] [V-W]                      ◮ least precedence\nfont2              BCD                        │ [B-D]                                    │\nfont3                   GHI                   │ [G-I]                                    │\nfont4                          N              │ [N]                                      │\nfont5                           OPQRST        │ [O-T]                                    │\nfont6                         M       U  XY   │ [M] [U] [X-Y]                            │ most precedence\n\nNB\n* first mentioned => 'most fallback' => least precedence\n* last  mentioned => 'least fallback' => most precedence\n```\n\n[The Kitty terminal emulator](https://sw.kovidgoyal.net/kitty/index.html) is special for a terminal emulator\nin that **Kitty allows to configue fonts by codepoints and codepoint ranges** similar to what is possible on\nweb pages using CSS3 Unicode Ranges; in fact, its syntax—example:\n\n```\nsymbol_map U+4E00-U+9FFF  HanaMinA Regular\nsymbol_map U+4D00-U+9FFF  EPSON 行書体Ｍ\n```\n\n—is so similar to CSS that one might believe the semantics will likewise be compatible.\n\nAlas, this is not so, and it also looks like Kitty's interpretation can't possibly have been meant to work\nthe way it does. For example, when I configure\n\n```\n# Note: do *not* use inline comments as shown below, they will not be parsed correctly\nfont_family               IosevkaNerdFontCompleteM-Thin\nsymbol_map U+61-U+7a      Iosevka-Slab-Heavy  # (1) /[a-z]/\nsymbol_map U+51-U+5a      Iosevka-Slab-Heavy  # (2) /[Q-Z]/\nsymbol_map U+61           LastResort          # (3) /[a]/\nsymbol_map U+65           LastResort          # (4) /[e]/\nsymbol_map U+69           LastResort          # (5) /[i]/\nsymbol_map U+6F           LastResort          # (6) /[o]/\nsymbol_map U+75           LastResort          # (7) /[u]/\nsymbol_map U+51-U+53      LastResort          # (8) /[QRS]/\nsymbol_map U+59-U+5a      LastResort          # (9) /[YZ]/\n```\n\nI'd expect the outcome to be as follows:\n\n* **(1)** Use `IosevkaNerdFontCompleteM-Thin` as default,\n* **(2)** except for the lower case `[a-z]` range, for which use `Iosevka-Slab-Heavy`,\n* **(3)** except for the upper case `[Q-Z]` range, for which likewise use `Iosevka-Slab-Heavy`; of these,\n* **(4-7)** use LastResort for `/[aeiou]/`, overriding **(1)**,\n* **(8)** use LastResort for `/[QRS]/` overriding **(2)**,\n* **(9)** use LastResort for `/[YZ]/`, likewise overriding **(2)**.\n\nWhat happens in reality is that Kitty applies the only rules **(1)**, **(2)**, **(3)**, **(8)**, but\ndiscards **(4)**, **(5)**, **(6)**, **(7)** and **(9)**; it so happens that both the ranges / single\ncodepoints addressed in the shadowing rules that *were* honored (**(3)** and **(8)**), their first\ncodepoints (`a` = `U+61` and `Q` = `U+51`) coincided with the first codepoints of the rules they shadowed.\nObserve that while e.g. codepoint `e` = `U+65` of rule **(4)** is indeed the first (and only) codepoint of\nthat rule, that is not what matters; what matters is where that shadowing codepoint falls within the rule it\nis intended to supplant, namely rule **(1)**. Since there it is the 5th, not the 1st codepoint of the range\ngiven, it does—erroneuosly, one should think—not succeed.\n\nThis is a somewhat weird and at any rate unexpected behavior that cannot possibly have been the intent of\nthe developers. There is no way users could be expected to follow or profit from such strange rules, so I\nassume this must be a bug.\n\nThe **solution** to this problematic behavior would seem to consist in **only using disjunct `symbol_map`\nranges** by avoiding to mention any codepoint more than once.\n\nReferences:\n\n* [Extension Kitty graphics protocol to support fonts #2259](https://github.com/kovidgoyal/kitty/issues/2259)\n* [Symbol map problem #1948](https://github.com/kovidgoyal/kitty/issues/1948)\n\n\n\n\n\n\n* Do not use an all-boxes fallback font such as LastResort as standard font as one could do in CSS; the font\n  named under in `font_family` [is used to calculate cell metrics, this happens before any\n  fallback](https://github.com/kovidgoyal/kitty/issues/2396#issuecomment-590639250)\n\n\n###\n\n\n\n\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'kittyfonts'\nrpr                       = CND.rpr\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nhex                       = ( n ) -> ( n.toString 16 ).toUpperCase().padStart 4, '0'\nLAP                       = require '../../../apps/interlap'\n{ type_of\n  validate\n  equals    }             = LAP.types.export()\n\n#-----------------------------------------------------------------------------------------------------------\nto_width = ( text, width ) ->\n  ### TAINT use `to_width` module ###\n  validate.text text\n  validate.positive_integer width\n  return text[ .. width ].padEnd width, ' '\n\n#===========================================================================================================\n# PERTAINING TO SPECIFIC SETTINGS / FONT CHOICES\n#-----------------------------------------------------------------------------------------------------------\nS =\n  # source_path:  '../../../assets/write-font-configuration-for-kitty-terminal.sample-data.json'\n  paths:\n    # configured_cid_ranges:  '../../../../ucdb/cfg/styles-codepoints-and-fontnicks.txt'\n    configured_cid_ranges:  '../../../assets/ucdb/styles-codepoints-and-fontnicks.short.txt'\n    cid_ranges_by_rsgs:     '../../../../ucdb/cfg/rsgs-and-blocks.txt'\n\n  psname_by_fontnicks:\n    babelstonehan:              'BabelStoneHan'\n    cwtexqheibold:              'cwTeXQHei-Bold'\n    dejavuserif:                'DejaVuSerif'\n    hanaminaotf:                'HanaMinA'\n    hanaminbotf:                'HanaMinB'\n    ipamp:                      'IPAPMincho'\n    jizurathreeb:               'jizura3b'\n    nanummyeongjo:              'NanumMyeongjo'\n    sunexta:                    'Sun-ExtA'\n    thtshynpone:                'TH-Tshyn-P1'\n    thtshynptwo:                'TH-Tshyn-P2'\n    thtshynpzero:               'TH-Tshyn-P0'\n    umingttcone:                'UMingCN'\n    # @default\n    # asanamath\n    # ebgaramondtwelveregular:    ''\n    # hanaminexatwootf:           ''\n    lmromantenregular:          'Iosevka-Slab'\n    iosevkaslab:                'Iosevka-Slab'\n    # sourcehanserifheavytaiwan:  ''\n    # unifonttwelve:              ''\n    lastresort:                 'LastResort'\n\n\n#===========================================================================================================\n# GENERIC STUFF\n#-----------------------------------------------------------------------------------------------------------\ncid_range_pattern = ///^ 0x (?<first_cid_txt> [0-9a-fA-F]+ ) \\.\\. 0x (?<last_cid_txt> [0-9a-fA-F]+ ) $ ///\nparse_cid_hex_range_txt = ( cid_range_txt ) ->\n  unless ( match = cid_range_txt.match cid_range_pattern )?\n    throw new Error \"^33736^ illegal line #{rpr line} (unable to parse CID range #{rpr cid_range_txt})\"\n  { first_cid_txt\n    last_cid_txt  } = match.groups\n  first_cid         = parseInt first_cid_txt, 16\n  last_cid          = parseInt last_cid_txt,  16\n  return [ first_cid, last_cid, ]\n\n#-----------------------------------------------------------------------------------------------------------\nsegment_from_cid_hex_range_txt = ( cid_range_txt ) -> new LAP.Segment parse_cid_hex_range_txt cid_range_txt\n\n#-----------------------------------------------------------------------------------------------------------\n@_read_cid_ranges_by_rsgs = ( settings ) ->\n  return R if ( R = settings.cid_ranges_by_rsgs )?\n  R                 = settings.cid_ranges_by_rsgs = {}\n  source_path       = PATH.resolve PATH.join __dirname, settings.paths.cid_ranges_by_rsgs\n  lines             = ( FS.readFileSync source_path, { encoding: 'utf-8', } ).split '\\n'\n  for line in lines\n    line = line.replace /^\\s+$/g, ''\n    continue if ( line.length is 0 ) or ( /^\\s*#/.test line )\n    [ icgroup, rsg, is_cjk_txt, cid_range_txt, range_name..., ] = line.split /\\s+/\n    continue if rsg.startsWith 'u-x-'\n    R[ rsg ] = segment_from_cid_hex_range_txt cid_range_txt\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_read_configured_cid_ranges = ( settings ) ->\n  return R if ( R = settings.configured_cid_ranges )?\n  cid_ranges_by_rsgs  = @_read_cid_ranges_by_rsgs settings\n  R                   = settings.cid_ranges_by_rsgs = []\n  source_path         = PATH.resolve PATH.join __dirname, settings.paths.configured_cid_ranges\n  lines               = ( FS.readFileSync source_path, { encoding: 'utf-8', } ).split '\\n'\n  unknown_fontnicks   = new Set()\n  unknown_rsgs        = new Set()\n  for line in lines\n    line = line.replace /^\\s+$/g, ''\n    continue if ( line.length is 0 ) or ( /^\\s*#/.test line )\n    [ styletag, cid_literal, fontnick, glyphstyle..., ] = line.split /\\s+/\n    glyphstyle = glyphstyle.join ' '\n    validate.nonempty_text styletag\n    validate.nonempty_text cid_literal\n    validate.nonempty_text fontnick\n    validate.text glyphstyle\n    # continue unless fontnick?\n    # continue unless first_cid?\n    # continue unless last_cid?\n    continue unless styletag is '+style:ming'\n    continue if     glyphstyle? and /\\bglyph\\b/.test glyphstyle\n    #.......................................................................................................\n    unless ( psname = settings.psname_by_fontnicks[ fontnick ] )?\n      unless unknown_fontnicks.has fontnick\n        unknown_fontnicks.add fontnick\n        warn \"unknown fontnick #{rpr fontnick}\"\n      continue\n    #.......................................................................................................\n    if cid_literal is '*'\n      first_cid = 0x000000\n      last_cid  = 0x10ffff\n    else if ( cid_literal.startsWith \"'\" ) and ( cid_literal.endsWith \"'\" )\n      validate.chr chr = cid_literal[ 1 ... cid_literal.length - 1 ]\n      first_cid = last_cid = chr.codePointAt 0\n    else if ( cid_literal.startsWith 'rsg:' )\n      rsg = cid_literal[ 4 .. ]\n      validate.nonempty_text rsg\n      unless ( segment = cid_ranges_by_rsgs[ rsg ] )?\n        unknown_rsgs.add rsg\n        warn \"unknown rsg #{rpr rsg}\"\n    else\n      [ first_cid\n        last_cid    ] = parse_cid_hex_range_txt cid_literal\n    #.......................................................................................................\n    ### NOTE for this particular file format, we could use segments inbstead of laps since there can be only\n    one segment per record; however, for consistency with those cases where several disjunct segments per\n    record are allowed, we use laps. ###\n    ### TAINT consider to use a non-committal name like `cids` instead of `lap`, which is bound to a\n    particular data type; allow to use segments and laps for this and similar attributes. ###\n    lap = new LAP.Interlap new LAP.Segment [ first_cid, last_cid, ]\n    R.push { fontnick, psname, lap, }\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_read_disjunct_cid_ranges = ( settings ) ->\n  overlaps          = @_read_configured_cid_ranges settings\n  R                 = settings.disjunct_cid_ranges = []\n  org_by_fontnicks  = {}\n  exclusion         = new LAP.Interlap()\n  disjuncts         = []\n  exclusions        = []\n  for idx in [ overlaps.length - 1 .. 0 ] by -1\n    rule                = overlaps[ idx ]\n    { fontnick\n      psname\n      lap       }       = rule\n    disjunct            = LAP.difference  lap, exclusion\n    exclusion           = LAP.union       lap, exclusion\n    R.unshift [ fontnick, disjunct, ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@write_font_configuration_for_kitty_terminal = ( settings ) ->\n  fontnicks_and_laps = @_read_disjunct_cid_ranges S\n  for [ fontnick, lap, ] in fontnicks_and_laps\n    psname = settings.psname_by_fontnicks[ fontnick ] ? \"UNKNOWN-FONTNICK:#{fontnick}\"\n    debug lap\n    for segment in lap\n      # help fontnick, LAP.as_unicode_range lap\n      unicode_range_txt = ( LAP.as_unicode_range segment ).padEnd 30\n      echo \"symbol_map      #{unicode_range_txt} #{psname}\"\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  pseudo_css_configuration = [\n    [ 'font1', '[B-H] [J] [L] [N-X]          ', ]\n    [ 'font2', '[B-D]                        ', ]\n    [ 'font3', '[G-I]                        ', ]\n    [ 'font4', '[M-Q]                        ', ]\n    [ 'font5', '[M] [O-T]                    ', ]\n    [ 'font6', '[M] [U] [X-Y]                ', ]\n    ]\n\n  #-----------------------------------------------------------------------------------------------------------\n  overlapping_laps_from_pseudo_css = ( pseudo_css ) ->\n    R = []\n    for [ fontnick, ranges_txt, ] in pseudo_css\n      matches         = ranges_txt.matchAll /// \\[ (?<range_literal> [^ \\] ]+ ) \\]///g\n      range_literals  = ( match.groups.range_literal for match from matches )\n      range_endpoints = ( range_literal.trim().split /\\s*-\\s*/ for range_literal in range_literals )\n      segments        = []\n      for range_endpoint in range_endpoints\n        first_chr = range_endpoint[ 0 ]\n        last_chr  = range_endpoint[ 1 ] ? first_chr\n        lo        = first_chr.codePointAt 0\n        hi        = last_chr.codePointAt  0\n        segments.push [ lo, hi, ]\n      lap = new LAP.Interlap segments\n      R.push [ fontnick, lap, ]\n    return R\n\n  #.........................................................................................................\n  chr_from_cid = ( cid ) -> String.fromCodePoint cid\n\n  #.........................................................................................................\n  segment_as_demo_text = ( segment ) ->\n    validate.segment segment\n    return \"[#{chr_from_cid segment.lo}]\" if segment.lo is segment.hi\n    return \"[#{chr_from_cid segment.lo}-#{chr_from_cid segment.hi}]\"\n\n  #.........................................................................................................\n  interlap_as_demo_text = ( interlap ) ->\n    validate.interlap interlap\n    return ( segment_as_demo_text s for s in interlap ).join ' '\n\n  #.........................................................................................................\n  overlaps = overlapping_laps_from_pseudo_css pseudo_css_configuration\n  for [ fontnick, lap, ] from overlaps\n    fontnick_txt  = to_width ( fontnick                   ), 20\n    lap_txt       = to_width ( interlap_as_demo_text lap  ), 20\n    info ( CND.lime fontnick_txt ), ( CND.gold lap_txt )\n  #.........................................................................................................\n  info()\n  exclusion   = new LAP.Interlap()\n  disjuncts   = []\n  exclusions  = []\n  for idx in [ overlaps.length - 1 .. 0 ] by -1\n    [ fontnick, lap, ]  = overlaps[ idx ]\n    disjunct            = LAP.difference  lap, exclusion\n    exclusion           = LAP.union       lap, exclusion\n    disjuncts.unshift disjunct\n    exclusions.unshift exclusion\n  for exclusion in exclusions\n    info ( CND.yellow interlap_as_demo_text exclusion )\n  for [ fontnick, lap, ], idx in overlaps\n    disjunct      = disjuncts[ idx ]\n    fontnick_txt  = to_width ( fontnick                       ), 20\n    lap_txt       = to_width ( interlap_as_demo_text lap      ), 20\n    disjunct_txt  = to_width ( interlap_as_demo_text disjunct ), 20\n    info ( CND.lime fontnick_txt ), ( CND.gold lap_txt ), ( CND.blue disjunct_txt ), ( CND.steel LAP.as_unicode_range disjunct )\n    for segment in disjunct\n      unicode_range = LAP.as_unicode_range segment\n      help \"symbol_map \\t#{unicode_range} \\t#{fontnick}\"\n  disjuncts_uranges = ( LAP.as_unicode_range d for d in disjuncts ).join '\\n'\n  validate.true equals disjuncts_uranges, \"\"\"U+0045-U+0046,U+004a-U+004a,U+004c-U+004c,U+0056-U+0057\n    U+0042-U+0044\n    U+0047-U+0049\n    U+004e-U+004e\n    U+004f-U+0054\n    U+004d-U+004d,U+0055-U+0055,U+0058-U+0059\"\"\"\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # urge @_read_cid_ranges_by_rsgs S\n  # urge @_read_configured_cid_ranges S\n  @write_font_configuration_for_kitty_terminal S\n  # demo()\n\n\n\n"
  ]
}