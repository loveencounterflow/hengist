{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/custom-errors.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,OAAA,EAAA,cAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,QAFF,EAGE,gBAHF,CAAA,GAG4B,KAAK,CAAC,MAAN,CAAA,CAH5B,EAfA;;;EAuBM,UAAN,MAAA,QAAA,QAAsB,MAAtB;IACE,WAAa,CAAE,GAAF,EAAO,OAAP,CAAA,EAAA;;WAEX,CAAM,GAAA,GAAM,GAAN,GAAY,OAAlB;MACA,IAAC,CAAA,GAAD,GAAY;MACZ,IAAC,CAAA,QAAD,GAAY;MACZ,IAAC,CAAA,IAAD,GAAY,IAAC,CAAA,WAAW,CAAC,IAAI,CAAC,WAAlB,CAAA;AACZ,aAAO,MAAU;IANN;;EADf,EAvBA;;;EAiCM,iBAAN,MAAA,eAAA,QAA6B,QAA7B,CAAA,EAjCA;;;EAoCA,IAAA,GAAO,QAAA,CAAA,CAAA;AACP,QAAA,KAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA;AAAE;IAAA,KAAA,sCAAA;;AACE;QACE,MAAM,IAAI,KAAJ,CAAU,OAAV,EAAmB,CAAA,iBAAA,CAAA,CAAoB,KAAK,CAAC,IAA1B,CAAA,KAAA,CAAnB,EADR;OAEA,cAAA;QAAM;QACJ,IAAA,CAAA;QACA,IAAA,CAAK,QAAL,EAAe,gBAAf,EAAiC,KAAK,CAAC,OAAvC;QACA,IAAA,CAAK,QAAL,EAAe,gBAAf,EAAiC,KAAK,CAAC,QAAvC;QACA,IAAA,CAAK,QAAL,EAAe,gBAAf,EAAiC,KAAK,CAAC,IAAvC;QACA,IAAA,CAAK,QAAL,EAAe,gBAAf,EAAiC,OAAA,CAAQ,KAAR,CAAjC,EALF;;IAHF;AASA,WAAO;EAVF,EApCP;;;EAkDA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,KAAA,CAAA,CAAA,GAAA;aAChC,CAAA,MAAM,IAAA,CAAA,CAAN;IADgC,CAAA,IAAlC;;AAlDA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'CUSTOM-ERRORS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n\n\n\n#-----------------------------------------------------------------------------------------------------------\nclass X_error extends Error\n  constructor: ( ref, message ) ->\n    # super ( CND.grey ref ) + ' ' + ( CND.red CND.reverse message )\n    super ref + ' ' + message\n    @ref      = ref\n    @_message = message\n    @type     = @constructor.name.toLowerCase()\n    return undefined ### always return `undefined` from constructor ###\n\n#-----------------------------------------------------------------------------------------------------------\nclass X_snytax_error extends X_error\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  for clasz in [ X_error, X_snytax_error, ]\n    try\n      throw new clasz '^123^', \"your message for #{clasz.name} here\"\n    catch error\n      info()\n      info '^1345^', \"message:      \", error.message\n      info '^1345^', \"_message:     \", error._message\n      info '^1345^', \"type:         \", error.type\n      info '^1345^', \"type_of:      \", type_of error\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  await demo()\n\n\n\n"
  ]
}