{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/multiply-composed-classes-with-chained-inheritance.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'TEMPFILES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nmisfit                    = Symbol 'misfit'\nBM                        = require '../../../lib/benchmarks'\n\n\n#===========================================================================================================\n# DEMO\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  ### thx to https://alligator.io/js/class-composition/ ###\n  #-----------------------------------------------------------------------------------------------------------\n  class Base\n    constructor: ->\n      help '^343-1^', known_names = new Set ( k for k of @ )\n  #-----------------------------------------------------------------------------------------------------------\n  class A_mixin extends Base\n    constructor: ->\n      super()\n      # help '^343-1^', known_names = new Set ( k for k of @ )\n      @a_mixin  = true\n      @name     = 'a_mixin'\n    introduce_yourself: -> urge \"helo from class #{@name}\"\n    violate_stratification: -> 1 + @method_from_downstream()\n  #-----------------------------------------------------------------------------------------------------------\n  class B_mixin extends A_mixin\n    constructor: ->\n      super()\n      # help '^343-2^', known_names = new Set ( k for k of @ )\n      @b_mixin  = true\n      @name     = 'b_mixin'\n    method_from_downstream: -> 42\n  #-----------------------------------------------------------------------------------------------------------\n  class C_mixin extends B_mixin\n    constructor: ->\n      super()\n      # help '^343-3^', known_names = new Set ( k for k of @ )\n      @c_mixin  = true\n      @name     = 'c_mixin'\n  #-----------------------------------------------------------------------------------------------------------\n  class D_mixin extends C_mixin\n    constructor: ->\n      super()\n      # help '^343-4^', known_names = new Set ( k for k of @ )\n      @d_mixin  = true\n      @name     = 'd_mixin'\n  #-----------------------------------------------------------------------------------------------------------\n  # class Main extends D_mixin C_mixin B_mixin A_mixin Base ### unnecessary class `Base` ###\n  # class Main extends D_mixin C_mixin B_mixin A_mixin Object ### the default ###\n  # class Main extends D_mixin C_mixin B_mixin A_mixin null ### doesn't work ###\n  class Main extends D_mixin\n    constructor: ( x = misfit ) ->\n      super()\n      @x        = x\n      @main     = true\n      @name     = 'main'\n  debug d = new Main()\n  d.introduce_yourself()\n  info d.violate_stratification()\n\n\n#===========================================================================================================\n# BENCHMARKS\n#-----------------------------------------------------------------------------------------------------------\nconstruct_chained_mixins = ( cfg ) =>\n\n#-----------------------------------------------------------------------------------------------------------\n@chained_mixins = ( cfg ) -> new Promise ( resolve ) =>\n  # { integer_lists, } = @get_data cfg\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 1\n    # for integer_list in integer_lists\n    #   x = CHARWISE.encode integer_list\n    #   urge '^234-6^', x if cfg.show\n    #   count++\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  bench           = BM.new_benchmarks()\n  mode            = 'standard'\n  mode            = 'medium'\n  mode            = 'functional_test'\n  switch mode\n    when 'standard'\n      cfg           = { list_count: 3e5, list_length_min: 1, list_length_max, }\n      repetitions   = 5\n    when 'medium'\n      cfg           = { list_count: 5e4, list_length_min: 1, list_length_max, }\n      repetitions   = 3\n    when 'functional_test'\n      cfg           = { depth: 3, functions_per_class: 3, fnr_min: 1, fnr_max: 10, }\n      repetitions   = 1\n  cfg.show      = cfg.list_count < 10\n  test_names    = [\n    'chained_mixins'\n    ]\n  global.gc() if global.gc?\n  data_cache = null\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      global.gc() if global.gc?\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif module is require.main then do =>\n  # demo()\n  @run_benchmarks()\n"
  ]
}