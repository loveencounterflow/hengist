{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/multiply-composed-classes-with-chained-inheritance.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,OAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,EAAA,OAAA,EAAA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,MAAA,GAA4B,MAAA,CAAO,QAAP,EAb5B;;;;EAkBM,OAAN,MAAA,KAAA;IACE,WAAa,CAAA,CAAA;AACf,UAAA,CAAA,EAAA;MAAI,IAAA,CAAK,SAAL,EAAgB,WAAA,GAAc,IAAI,GAAJ;;AAAU;QAAA,KAAA,SAAA;uBAAA;QAAA,CAAA;;mBAAV,CAA9B;IADW;;EADf,EAlBA;;;EAuBM,UAAN,MAAA,QAAA,QAAsB,KAAtB;IACE,WAAa,CAAA,CAAA;WACX,CAAA,EAAJ;;MAEI,IAAC,CAAA,OAAD,GAAY;MACZ,IAAC,CAAA,IAAD,GAAY;IAJD;;IAMb,kBAAoB,CAAA,CAAA;aAAG,IAAA,CAAK,CAAA,gBAAA,CAAA,CAAmB,IAAC,CAAA,IAApB,CAAA,CAAL;IAAH;;IACpB,sBAAwB,CAAA,CAAA;aAAG,CAAA,GAAI,IAAC,CAAA,sBAAD,CAAA;IAAP;;EAR1B,EAvBA;;;EAkCM,UAAN,MAAA,QAAA,QAAsB,QAAtB;IACE,WAAa,CAAA,CAAA;WACX,CAAA,EAAJ;;MAEI,IAAC,CAAA,OAAD,GAAY;MACZ,IAAC,CAAA,IAAD,GAAY;IAJD;;IAKb,sBAAwB,CAAA,CAAA;aAAG;IAAH;;EAN1B,EAlCA;;;EA2CM,UAAN,MAAA,QAAA,QAAsB,QAAtB;IACE,WAAa,CAAA,CAAA;WACX,CAAA,EAAJ;;MAEI,IAAC,CAAA,OAAD,GAAY;MACZ,IAAC,CAAA,IAAD,GAAY;IAJD;;EADf,EA3CA;;;EAmDM,UAAN,MAAA,QAAA,QAAsB,QAAtB;IACE,WAAa,CAAA,CAAA;WACX,CAAA,EAAJ;;MAEI,IAAC,CAAA,OAAD,GAAY;MACZ,IAAC,CAAA,IAAD,GAAY;IAJD;;EADf,EAnDA;;;;;;EA+DM,OAAN,MAAA,KAAA,QAAmB,QAAnB;IACE,WAAa,CAAE,IAAI,MAAN,CAAA;WACX,CAAA;MACA,IAAC,CAAA,CAAD,GAAY;MACZ,IAAC,CAAA,IAAD,GAAY;MACZ,IAAC,CAAA,IAAD,GAAY;IAJD;;EADf,EA/DA;;;EAwEA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA;AAClC,UAAA;MAAE,KAAA,CAAM,CAAA,GAAI,IAAI,IAAJ,CAAA,CAAV;MACA,CAAC,CAAC,kBAAF,CAAA;aACA,IAAA,CAAK,CAAC,CAAC,sBAAF,CAAA,CAAL;IAHgC,CAAA,IAAlC;;AAxEA",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'TEMPFILES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nmisfit                    = Symbol 'misfit'\n\n### thx to https://alligator.io/js/class-composition/ ###\n\n#-----------------------------------------------------------------------------------------------------------\nclass Base\n  constructor: ->\n    help '^343-1^', known_names = new Set ( k for k of @ )\n\n#-----------------------------------------------------------------------------------------------------------\nclass A_mixin extends Base\n  constructor: ->\n    super()\n    # help '^343-1^', known_names = new Set ( k for k of @ )\n    @a_mixin  = true\n    @name     = 'a_mixin'\n\n  introduce_yourself: -> urge \"helo from class #{@name}\"\n  violate_stratification: -> 1 + @method_from_downstream()\n\n#-----------------------------------------------------------------------------------------------------------\nclass B_mixin extends A_mixin\n  constructor: ->\n    super()\n    # help '^343-2^', known_names = new Set ( k for k of @ )\n    @b_mixin  = true\n    @name     = 'b_mixin'\n  method_from_downstream: -> 42\n\n#-----------------------------------------------------------------------------------------------------------\nclass C_mixin extends B_mixin\n  constructor: ->\n    super()\n    # help '^343-3^', known_names = new Set ( k for k of @ )\n    @c_mixin  = true\n    @name     = 'c_mixin'\n\n#-----------------------------------------------------------------------------------------------------------\nclass D_mixin extends C_mixin\n  constructor: ->\n    super()\n    # help '^343-4^', known_names = new Set ( k for k of @ )\n    @d_mixin  = true\n    @name     = 'd_mixin'\n\n\n#-----------------------------------------------------------------------------------------------------------\n# class Main extends D_mixin C_mixin B_mixin A_mixin Base ### unnecessary class `Base` ###\n# class Main extends D_mixin C_mixin B_mixin A_mixin Object ### the default ###\n# class Main extends D_mixin C_mixin B_mixin A_mixin null ### doesn't work ###\nclass Main extends D_mixin\n  constructor: ( x = misfit ) ->\n    super()\n    @x        = x\n    @main     = true\n    @name     = 'main'\n\n\n############################################################################################################\nif module is require.main then do =>\n  debug d = new Main()\n  d.introduce_yourself()\n  info d.violate_stratification()\n\n\n"
  ]
}