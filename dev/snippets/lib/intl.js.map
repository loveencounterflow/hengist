{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/intl.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTL'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nH                         = require '../../../lib/helpers'\nMMX                       = require 'multimix/lib/cataloguing'\n\ndebug '^474^', MMX.all_keys_of Intl\n\n###\ngetCanonicalLocales\nDateTimeFormat\nNumberFormat\nCollator\nPluralRules\nRelativeTimeFormat\nListFormat\nLocale\nDisplayNames\nSegmenter\n###\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_segmenter = ->\n  do =>\n    segmenterFr = new Intl.Segmenter 'fr', { granularity: 'word' }\n    string1 = 'Que ma joie demeure'\n    iterator1 = segmenterFr.segment(string1)[Symbol.iterator]();\n    # console.log(iterator1.next().value.segment);\n    # console.log(iterator1.next().value.segment);\n    H.tabulate 'segments', iterator1\n    # for d from iterator1\n    #   help d\n    return null\n  do =>\n    segmenter = new Intl.Segmenter 'ja-JP', { granularity: 'word' }\n    text      = \"吾輩は猫である。名前はたぬき。\"\n    iterator1 = segmenter.segment text\n    H.tabulate 'segments', iterator1\n  do =>\n    segmenter = new Intl.Segmenter 'ko-KR', { granularity: 'grapheme' }\n    text      = \"서울특별시는 대한민국의 수도이자 최대 도시이다.\"\n    # text      = text.normalize 'NFC'\n    # text      = text.normalize 'NFKD'\n    text      = text.normalize 'NFD'\n    help Array.from text\n    iterator1 = segmenter.segment text\n    H.tabulate 'segments', iterator1\n  do =>\n    segmenter = new Intl.Segmenter 'ko-KR', { granularity: 'word' }\n    text      = \"吾輩は猫である。名前はたぬき。서울특별시는 대한민국의 수도이자 최대 도시이다.\"\n    iterator1 = segmenter.segment text\n    H.tabulate 'segments', iterator1\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  demo_segmenter()\n"
  ]
}