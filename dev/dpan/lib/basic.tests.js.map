{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/basic.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DPAN/TESTS/BASIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\n\n\n#-----------------------------------------------------------------------------------------------------------\ntest_fs_fetch_pkg_info = ( T, fallback ) ->\n  { Dpan }          = require H.dpan_path\n  { Dba }           = require H.dba_path\n  dba               = new Dba()\n  dpan              = new Dpan { dba, }\n  dba.pragma SQL\"journal_mode=memory\"\n  has_fallback      = fallback isnt undefined\n  #.........................................................................................................\n  pkg_fspath  = __filename\n  depth       = ( __filename.replace /[^\\/]/g, '' ).length\n  count       = 0\n  loop\n    count++\n    break if count >= depth\n    error = null\n    debug '^3736^', pkg_fspath, count, depth\n    try\n      if has_fallback then  pkg_json_info = await dpan.fs_fetch_pkg_info { pkg_fspath, fallback, }\n      else                  pkg_json_info = await dpan.fs_fetch_pkg_info { pkg_fspath, }\n    catch error\n      T?.eq ( type_of error ), 'dba_fs_pkg_json_not_found'\n      throw error unless ( type_of error ) is 'dba_fs_pkg_json_not_found'\n      break\n    unless error?\n      # debug '^477^', pkg_json_info\n      if pkg_json_info is fallback\n        T.ok true\n      else\n        pkg_name      = pkg_json_info?.pkg_name\n        debug '^3736^', CND.blue pkg_name\n        T?.eq pkg_name, 'hengist'\n        pkg_fspath    = PATH.dirname pkg_fspath\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"dpan.fs_fetch_pkg_info 1\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  await test_fs_fetch_pkg_info T, undefined\n  await test_fs_fetch_pkg_info T, null\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\npopulate_db_with_hengist_deps = ( dpan ) ->\n  glob                  = require 'glob'\n  skipped               = []\n  home_path             = PATH.resolve PATH.join __dirname, '../../../../'\n  project_path_pattern  = PATH.join home_path, '*/package.json'\n  debug '^488^', project_path_pattern\n  for project_path in glob.sync project_path_pattern\n    pkg_fspath  = PATH.dirname project_path\n    try\n      pkg_info = await dpan.fs_fetch_pkg_info { pkg_fspath, }\n      dpan.db_add_pkg_info pkg_info\n    catch error\n      warn \"error occurred when trying to add #{pkg_fspath}: #{error.message}; skipping\"\n      skipped.push pkg_fspath\n      continue\n    # whisper '^564^', pkg_info\n    info '^564^', pkg_info.pkg_name, pkg_info.pkg_version\n  #.........................................................................................................\n  if skipped.length > 0\n    warn \"some paths looked like projects but caused errors (see above):\"\n    warn '  ' + entry for entry in skipped\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"dpan.db_add_pkg_info 1\" ] = ( T, done ) ->\n  { Dpan }              = require H.dpan_path\n  # dpan                  = new Dpan_next { recreate: true, }\n  { Dba }               = require H.dba_path\n  db_path               = PATH.resolve PATH.join __dirname, '../../../data/dpan.sqlite'\n  dba                   = new Dba()\n  dba.open { path: db_path, }\n  dba.pragma SQL\"journal_mode=memory\"\n  dpan                  = new Dpan { dba, recreate: true, }\n  await populate_db_with_hengist_deps dpan\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"dpan.dba.clear 1\" ] = ( T, done ) ->\n  { Dpan }              = require H.dpan_path\n  # dpan                  = new Dpan_next { recreate: true, }\n  { Dba }               = require H.dba_path\n  db_path               = PATH.resolve PATH.join __dirname, '../../../data/dpan.sqlite'\n  dba                   = new Dba()\n  dba.open { path: db_path, }\n  dba.pragma SQL\"journal_mode=memory\"\n  dpan                  = new Dpan { dba, recreate: true, }\n  await populate_db_with_hengist_deps dpan\n  dba.clear { schema: 'main', }\n  T?.eq ( dba.list dba.query SQL\"select * from sqlite_schema;\" ), []\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"dpan.fs_resolve_dep_fspath 1\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { Dpan }          = require H.dpan_path\n  { Dba }           = require H.dba_path\n  dba               = new Dba()\n  dpan              = new Dpan { dba, }\n  dep_name          = 'cnd'\n  # pkg_fspath        = '../../../lib/main.js'\n  pkg_fspath        = '../../..'\n  pkg_fspath        = PATH.resolve PATH.join __dirname, pkg_fspath\n  debug '^3488^', { pkg_fspath, }\n  dep_fspath        = dpan.fs_resolve_dep_fspath { pkg_fspath, dep_name, }\n  debug '^3488^', { dep_fspath, }\n  T.ok ( require dep_name ) is ( require dep_fspath )\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"dpan variables 1\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  debug '^5543^', { dpan_path: H.dpan_path, }\n  { Dpan }          = require H.dpan_path\n  { Dba }           = require H.dba_path\n  db_path           = PATH.resolve PATH.join __dirname, '../../../data/dpan.sqlite'\n  urge \"^4858^ using DB at #{db_path}\"\n  dba               = new Dba()\n  dba.open { path: db_path, }\n  dba.pragma SQL\"journal_mode=memory\"\n  dpan              = new Dpan { dba, recreate: true, }\n  T.eq dba, dpan.dba\n  T.eq dba, dpan.vars.dba\n  funny             = Math.floor Math.random() * 1e6\n  T.eq ( dpan.vars.set 'myvariable', \"some value\"  ), \"some value\"\n  T.eq ( dpan.vars.set 'distance', funny           ), funny\n  # console.table dba.list dba.query SQL\"select name, type from sqlite_schema where type in ( 'table', 'view' ) order by name;\"\n  T.eq ( dba.list dba.query SQL\"select * from dpan_variables\" ), [ { key: 'myvariable', value: '\"some value\"' }, { key: 'distance', value: funny, } ]\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"dpan tagging 1\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dpan }          = require H.dpan_path\n  { Dba }           = require H.dba_path\n  db_path           = PATH.resolve PATH.join __dirname, '../../../data/dpan.sqlite'\n  pkg_fspath        = __filename\n  urge \"^4858^ using DB at #{db_path}\"\n  dba               = new Dba()\n  dba.open { path: db_path, }\n  dba.pragma SQL\"journal_mode=memory\"\n  dpan              = new Dpan { dba, pkg_fspath, recreate: true, }\n  # console.table dba.list dba.query SQL\"select name, type from sqlite_schema where type in ( 'table', 'view' ) order by name;\"\n  # debug '^3343^', ( k for k of dpan.tags )\n  seen_tags = new Set()\n  for await dep from dpan.fs_walk_dep_infos { pkg_fspath, }\n    # debug '^3398^', dep.pkg_keywords\n    for tag in dep.pkg_keywords\n      tag = tag.replace /[-\\s]/g, '_'\n      tag = tag.replace /['\"]/g, ''\n      tag = tag.toLowerCase()\n      unless seen_tags.has tag\n        seen_tags.add tag\n        dpan.tags.add_tag { tag, }\n  # debug '^445^', dba.list dba.query SQL\".tables\"\n  done?()\n\n\n############################################################################################################\nif module is require.main then do =>\n  test @, { timeout: 60e3, }\n  # test @[ \"dpan.fs_fetch_pkg_info 1\" ]\n  # test @[ \"dpan.db_add_pkg_info 1\" ], { timeout: 60e3, }\n  # @[ \"dpan.dba.clear 1\" ]()\n  # test @[ \"dpan tagging 1\" ]\n\n\n\n\n\n\n\n"
  ]
}