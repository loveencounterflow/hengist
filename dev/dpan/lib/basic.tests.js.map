{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/basic.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DPAN/TESTS/BASIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n\n#-----------------------------------------------------------------------------------------------------------\ntest_fs_fetch_pkg_json_info = ( T, fallback ) ->\n  { Dpan }          = require H.dpan_path\n  dpan              = new Dpan()\n  has_fallback      = fallback isnt undefined\n  #.........................................................................................................\n  pkg_fspath  = __filename\n  depth       = ( __filename.replace /[^\\/]/g, '' ).length\n  count       = 0\n  loop\n    count++\n    break if count >= depth\n    error = null\n    debug '^3736^', pkg_fspath, count, depth\n    try\n      if has_fallback\n        pkg_json_info = await dpan.fs_fetch_pkg_json_info { pkg_fspath, fallback, }\n      else\n        pkg_json_info = await dpan.fs_fetch_pkg_json_info { pkg_fspath, }\n    catch error\n      T?.eq ( type_of error ), 'dba_fs_pkg_json_not_found'\n      throw error unless ( type_of error ) is 'dba_fs_pkg_json_not_found'\n      break\n      # unless error.\n    unless error?\n      if pkg_json_info is fallback\n        T.ok true\n      else\n        pkg_name      = pkg_json_info?.pkg_json?.name\n        debug '^3736^', CND.blue pkg_name\n        T?.eq pkg_name, 'hengist'\n        pkg_fspath    = PATH.dirname pkg_fspath\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"dpan.fs_fetch_pkg_json_info 1\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  await test_fs_fetch_pkg_json_info T, undefined\n  await test_fs_fetch_pkg_json_info T, null\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"dpan.fs_resolve_dep_fspath 1\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { Dpan }          = require H.dpan_path\n  dpan              = new Dpan()\n  dep_name          = 'cnd'\n  # pkg_fspath        = '../../../lib/main.js'\n  pkg_fspath        = '../../..'\n  pkg_fspath        = PATH.resolve PATH.join __dirname, pkg_fspath\n  debug '^3488^', { pkg_fspath, }\n  dep_fspath        = dpan.fs_resolve_dep_fspath { pkg_fspath, dep_name, }\n  debug '^3488^', { dep_fspath, }\n  T.ok ( require dep_name ) is ( require dep_fspath )\n  done?()\n\n\n############################################################################################################\nif module is require.main then do =>\n  test @, { timeout: 10e3, }\n  # test @[ \"DBA: concurrent UDFs\" ]\n\n\n\n"
  ]
}