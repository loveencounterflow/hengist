{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/_old.coffee"
  ],
  "names": [],
  "mappings": "AACA;AAAA,MAAA,CAAA,EAAA;;EAAA,CAAA,GAAI,QAAA,CAAA,CAAA;WAIF,CAAA;;;;MAAA,iBAAA,EAAmB,SAAA,CAAA,CAAA;AACrB,YAAA,QAAA,EAAA,cAAA,EAAA,QAAA,EAAA,WAAA,EAAA,KAAA,EAAA,SAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,YAAA,EAAA,YAAA,EAAA,kBAAA,EAAA,YAAA,EAAA,YAAA,EAAA,oBAAA,EAAA,eAAA,EAAA,GAAA,EAAA;QAAI,SAAA,GAAwB,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,IAArB,CAAb;QACxB,oBAAA,GAAwB,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,yBAArB,EAD5B;;;QAII,KAAA,CAAM,OAAN,EAAe,oBAAf;AACA;QAAA,KAAA,qCAAA;;UACE,YAAA,GAAsB,OAAA,CAAQ,YAAR;UACtB,eAAA,GAAsB,YAAY,CAAC;UACnC,YAAA,GAAsB,IAAI,CAAC,OAAL,CAAa,YAAb;UACtB,YAAA,GAAsB,IAAI,CAAC,QAAL,CAAc,YAAd;UACtB,YAAA,uDAAkD,CAAA;UAClD,kBAAA,GAAsB,MAAM,CAAC,IAAP,CAAY,YAAZ;UACtB,IAAgB,iBAAkB,mBAAlB,iBAAmC,eAAnD;AAAA,qBAAA;;UACA,KAAA,CAAQ,GAAG,CAAC,IAAJ,CAAS,YAAT,CAAR,EAAmC,GAAG,CAAC,IAAJ,CAAS,YAAT,CAAnC,EAA8D,GAAG,CAAC,IAAJ,CAAS,eAAT,CAA9D,EAPN;;UASM,IAAG,kBAAkB,CAAC,MAAnB,KAA6B,CAAhC;YACE,MAAM,CAAA;cAAE,YAAF;cAAgB,eAAhB;cAAiC,QAAjC;cAA2C,WAA3C;cAAwD,cAAA,EAAgB;YAAxE,CAAA;AACN,qBAFF;WATN;;;UAcM,KAAA,kEAAA;;YACE,cAAA,GAAiB,IAAI,CAAC,IAAL,CAAU,YAAV,EAAwB,cAAxB,EAAwC,QAAxC,EAAkD,cAAlD;AACjB;cACE,QAAA,GAAW,OAAA,CAAQ,cAAR,EADb;aAEA,cAAA;cAAM;cACJ,MAAM,MADR;aAHR;;YAMQ,WAAA,GAAmB,QAAQ,CAAC;YAC5B,IAAK,GAAA,KAAO,CAAZ;cACE,MAAM,CAAA;gBAAE,YAAF;gBAAgB,eAAhB;gBAAiC,QAAjC;gBAA2C,WAA3C;gBAAwD,cAAA,EAAgB;cAAxE,CAAA,EADR;aAAA,MAAA;cAGE,MAAM,CAAA,CAAE,YAAF,EAAgB,eAAhB,EAAiC,QAAjC,EAA2C,WAA3C,CAAA,EAHR;;YAIA,KAAA,CAAM,GAAN,EAAa,GAAG,CAAC,IAAJ,CAAS,QAAT,CAAb,EAAoC,GAAG,CAAC,IAAJ,CAAS,WAAT,CAApC;UAZF;QAfF,CALJ;;AAkCI,eAAO;MAnCU;IAAnB;EAJE;;EAwCE,IAAN,MAAA,EAAA,CAAA;;;;IAME,8BAAgC,CAAE,QAAF,CAAA;AAC9B,aAAO,CAAE,IAAC,CAAA,GAAG,CAAC,YAAY,CAAC,OAAlB,CAA0B,KAA1B,EAAiC,EAAjC,CAAF,CAAA,GAA0C,GAA1C,GAAgD;IADzB,CAHlC;;;IAOsC,MAApC,kCAAoC,CAAE,QAAF,CAAA;AACtC,UAAA;MAAI,MAAA,GAAgB,IAAC,CAAA,8BAAD,CAAgC,QAAhC;AAChB,aAAO,CAAA,MAAM,CAAE,GAAA,CAAI,MAAJ,CAAF,CAAc,CAAC,IAAf,CAAA,CAAN;IAF2B,CAPtC;;;IAYE,yCAA2C,CAAE,SAAF,EAAa,OAAb,CAAA;AAC7C,UAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA;MAAI,CAAA,GAAI,CAAA;MACJ,CAAC,CAAC,QAAF,GAAoB,SAAS,CAAC;MAC9B,CAAC,CAAC,WAAF,GAAoB;MACpB,CAAC,CAAC,QAAF;;AAAsB;QAAA,KAAA,kDAAA;uBAAA;QAAA,CAAA;;;MACtB,CAAC,CAAC,GAAF,GAAoB,IAAC,CAAA,eAAD,CAAiB,SAAjB,EAA4B,OAA5B;MACpB,CAAC,CAAC,WAAF,oGAAkE;MAClE,CAAC,CAAC,YAAF,uGAAkE;MAClE,CAAC,CAAC,MAAF,GAAoB;AACpB,aAAO;IATkC,CAZ7C;;;IAwBuB,MAArB,mBAAqB,CAAE,QAAF,EAAY,OAAZ,CAAA;AACvB,UAAA;MAAI,SAAA,GAAY,CAAA,MAAM,IAAC,CAAA,kCAAD,CAAoC,QAApC,CAAN,EAAhB;;;;;AAKI,aAAO,IAAC,CAAA,yCAAD,CAA2C,SAA3C,EAAsD,OAAtD;IANY;;EA3BvB;;EAoCA,CAAA,GAAI,MAAA,QAAA,CAAA,CAAA;AACJ,QAAA,IAAA,EAAA,CAAA,EAAA,SAAA,EAAA,YAAA,EAAA;IAAE,IAAA,GAAgB,IAAI,IAAJ,CAAA;IAChB,QAAA,GAAY;IACZ,QAAA,GAAY;IACZ,SAAA,GAAgB,CAAA,MAAM,IAAI,CAAC,kCAAL,CAAwC,QAAxC,CAAN;IAChB,KAAA,CAAM,OAAN;;AAAiB;MAAA,KAAA,cAAA;qBAAA;MAAA,CAAA;;QAAjB;IACA,KAAA,CAAM,OAAN;;AAAiB;MAAA,KAAA,uBAAA;qBAAA;MAAA,CAAA;;QAAjB;IACA,IAAA,CAAK,OAAL;;AAAgB;MAAA,KAAA,gCAAA;qBAAA;MAAA,CAAA;;QAAhB;IACA,KAAA,CAAM,OAAN;;AAAiB;MAAA,KAAA,6CAAA;qBAAA;MAAA,CAAA;;QAAjB;IACA,YAAA,GAAgB,IAAI,CAAC,yCAAL,CAA+C,SAA/C,EAA0D,OAA1D;WAChB,IAAA,CAAK,OAAL,EAAc,IAAI,CAAC,SAAL,CAAe,YAAf,EAA6B,IAA7B,EAAmC,IAAnC,CAAd;EAVE;;EAYJ,CAAA,GAAI,QAAA,CAAA,CAAA,EAAA;;AACJ,QAAA,CAAA,EAAA,SAAA,EAAA,SAAA,EAAA;AACE;;IAAA,KAAA,QAAA;MACE,KAAA,CAAM,OAAN,EAAe,CAAf;MAEA,SAAA,GAAY,CAAA,CAAA,CAAG,CAAC,CAAC,YAAL,CAAA,CAAA,CAAA,CAAqB,CAAC,CAAC,eAAvB,CAAA;MACZ,SAAA,GAAgB,CAAA,CAAA,CAAG,CAAC,CAAC,QAAL,CAAA,CAAA,CAAA,CAAiB,CAAC,CAAC,WAAnB,CAAA,EAHpB;;MAKI,IAAI,CAAC,GAAG,CAAC,GAAT,CAAa,GAAG,CAAA,YAAA,CAAA,CAAiB,MAAjB,CAAA;;uBAAA,CAAhB,EAE8B;QAAE,IAAA,EAAM,CAAC,CAAC,YAAV;QAAwB,OAAA,EAAS,CAAC,CAAC;MAAnC,CAF9B;MAGA,IAAI,CAAC,GAAG,CAAC,GAAT,CAAa,GAAG,CAAA,YAAA,CAAA,CAAiB,MAAjB,CAAA;;uBAAA,CAAhB,EAE8B;QAAE,IAAA,EAAM,CAAC,CAAC,QAAV;QAAoB,OAAA,EAAS,CAAC,CAAC;MAA/B,CAF9B;MAGA,IAAI,CAAC,GAAG,CAAC,GAAT,CAAa,GAAG,CAAA,YAAA,CAAA,CAAiB,MAAjB,CAAA;;uBAAA,CAAhB,EAE8B;QAAE,OAAA,EAAS,SAAX;QAAsB,UAAA,EAAY;MAAlC,CAF9B;IAZF,CADF;;AAiBE,WAAO;EAlBL;AAxFJ",
  "sourcesContent": [
    "\nf = ->\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  walk_dependencies: ->\n    home_path             = PATH.resolve PATH.join __dirname, '..'\n    project_path_pattern  = PATH.join home_path, '../../../*/package.json'\n    # pattern   = PATH.join home_path, '../../../*/node_modules/*'\n    # pattern   = PATH.join home_path, '../../../*/node_modules/*/package.json'\n    debug '^488^', project_path_pattern\n    for project_path in glob.sync project_path_pattern\n      package_json        = require project_path\n      project_version     = package_json.version\n      project_path        = PATH.dirname project_path\n      project_name        = PATH.basename project_path\n      project_deps        = package_json.dependencies ? {}\n      project_deps_names  = Object.keys project_deps\n      continue unless project_name in [ 'icql-dba-tags', 'icql-dba-vars', ]\n      debug ( CND.grey project_path ), ( CND.gold project_name ), ( CND.lime project_version )\n      #.....................................................................................................\n      if project_deps_names.length is 0\n        yield { project_name, project_version, dep_name, dep_version, is_new_project: true, }\n        continue\n      #.....................................................................................................\n      ### TAINT issue one datom in case no dependencies found ###\n      for dep_name, idx in project_deps_names\n        dep_jsonb_path = PATH.join project_path, 'node_modules', dep_name, 'package.json'\n        try\n          dep_json = require dep_jsonb_path\n        catch error\n          throw error\n        # debug dep_path\n        dep_version      = dep_json.version\n        if ( idx is 0 )\n          yield { project_name, project_version, dep_name, dep_version, is_new_project: true, }\n        else\n          yield { project_name, project_version, dep_name, dep_version, }\n        debug ' ', ( CND.gold dep_name ), ( CND.lime dep_version )\n        # debug ( CND.grey dep_path ), ( CND.gold dep_name ), ( CND.lime dep_version )\n    return null\nclass X\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  _npm_api_url_from_package_name: ( pkg_name ) ->\n    return ( @cfg.registry_url.replace /\\/$/, '' ) + '/' + pkg_name\n\n  #---------------------------------------------------------------------------------------------------------\n  _fetch_package_d_from_package_name: ( pkg_name ) ->\n    rq_url        = @_npm_api_url_from_package_name pkg_name\n    return await ( got rq_url ).json()\n\n  #---------------------------------------------------------------------------------------------------------\n  _package_infos_from_package_d_and_version: ( package_d, version ) ->\n    R = {}\n    R.pkg_name        = package_d.name\n    R.pkg_version     = version\n    R.versions        = ( k for k of package_d.versions ? [] )\n    R.url             = @get_package_url package_d, version\n    R.description     = package_d.versions[ version ]?.description  ? null\n    R.dependencies    = package_d.versions[ version ]?.dependencies ? null\n    R.fspath          = null\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  fetch_package_infos: ( pkg_name, version ) ->\n    package_d = await @_fetch_package_d_from_package_name pkg_name\n    # debug '^443^', ( k for k of package_d )\n    # debug '^443^', ( k for k of package_d.versions )\n    # urge '^443^', ( k for k of package_d.versions[ '0.2.1' ] )\n    # debug '^443^', ( k for k of package_d.versions[ '0.2.1' ].dependencies )\n    return @_package_infos_from_package_d_and_version package_d, version\n\n\nf = ->\n  dpan          = new Dpan()\n  pkg_name  = 'icql-dba-vars'\n  pkg_name  = 'icql-dba-tags'\n  package_d     = await dpan._fetch_package_d_from_package_name pkg_name\n  debug '^443^', ( k for k of package_d )\n  debug '^443^', ( k for k of package_d.versions )\n  urge '^443^', ( k for k of package_d.versions[ '0.2.1' ] )\n  debug '^443^', ( k for k of package_d.versions[ '0.2.1' ].dependencies )\n  package_info  = dpan._package_infos_from_package_d_and_version package_d, '0.2.1'\n  info '^677^', JSON.stringify package_info, null, '  '\n\nf = ->\n  #.........................................................................................................\n  for d from dpan.walk_dependencies()\n    debug '^684^', d\n    ### TAINT code duplication, same logic in SQL ###\n    pkg_vname = \"#{d.project_name}@#{d.project_version}\"\n    dep_vname     = \"#{d.dep_name}@#{d.dep_version}\"\n    # if d.is_new_project\n    dpan.dba.run SQL\"\"\"insert into #{prefix}pkgs ( name, version )\n      values ( $name, $version )\n      on conflict do nothing;\"\"\", { name: d.project_name, version: d.project_version, }\n    dpan.dba.run SQL\"\"\"insert into #{prefix}pkgs ( name, version )\n      values ( $name, $version )\n      on conflict do nothing;\"\"\", { name: d.dep_name, version: d.dep_version, }\n    dpan.dba.run SQL\"\"\"insert into #{prefix}dependencies ( package, depends_on )\n      values ( $package, $depends_on )\n      on conflict do nothing;\"\"\", { package: pkg_vname, depends_on: dep_vname, }\n  #.........................................................................................................\n  return null\n\n\n\n\n\n\n\n\n"
  ]
}