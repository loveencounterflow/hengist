{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/_old.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nf = ->\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  walk_dependencies: ->\n    home_path             = PATH.resolve PATH.join __dirname, '..'\n    project_path_pattern  = PATH.join home_path, '../../../*/package.json'\n    # pattern   = PATH.join home_path, '../../../*/node_modules/*'\n    # pattern   = PATH.join home_path, '../../../*/node_modules/*/package.json'\n    debug '^488^', project_path_pattern\n    for project_path in glob.sync project_path_pattern\n      package_json        = require project_path\n      project_version     = package_json.version\n      project_path        = PATH.dirname project_path\n      project_name        = PATH.basename project_path\n      project_deps        = package_json.dependencies ? {}\n      project_deps_names  = Object.keys project_deps\n      continue unless project_name in [ 'icql-dba-tags', 'icql-dba-vars', ]\n      debug ( CND.grey project_path ), ( CND.gold project_name ), ( CND.lime project_version )\n      #.....................................................................................................\n      if project_deps_names.length is 0\n        yield { project_name, project_version, dep_name, dep_version, is_new_project: true, }\n        continue\n      #.....................................................................................................\n      ### TAINT issue one datom in case no dependencies found ###\n      for dep_name, idx in project_deps_names\n        dep_jsonb_path = PATH.join project_path, 'node_modules', dep_name, 'package.json'\n        try\n          dep_json = require dep_jsonb_path\n        catch error\n          throw error\n        # debug dep_path\n        dep_version      = dep_json.version\n        if ( idx is 0 )\n          yield { project_name, project_version, dep_name, dep_version, is_new_project: true, }\n        else\n          yield { project_name, project_version, dep_name, dep_version, }\n        debug ' ', ( CND.gold dep_name ), ( CND.lime dep_version )\n        # debug ( CND.grey dep_path ), ( CND.gold dep_name ), ( CND.lime dep_version )\n    return null\nclass X\n  #=========================================================================================================\n  # RETRIEVE CANONICAL PACKAGE URL\n  #---------------------------------------------------------------------------------------------------------\n  _url_from_vpackage_d_homepage: ( vpackage_d ) ->\n    if ( R = vpackage_d.homepage ? null )?\n      return R.replace /#readme$/, ''\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _url_from_vpackage_d_repository: ( vpackage_d ) ->\n    if ( R = vpackage_d.repository?.url  ? null )?\n      return R.replace /^(git\\+)?(.+?)(\\.git)?$/, '$2'\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _url_from_vpackage_d_bugs: ( vpackage_d ) ->\n    if ( R = vpackage_d.bugs?.url        ? null )?\n      return R.replace /\\/issues$/, ''\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  get_package_url: ( package_d, version ) ->\n    unless ( vpackage_d = package_d.versions?[ version ] ? null )?\n      throw new Error \"^37596^ unknown version: #{rpr version}\"\n    return R if ( R = @_url_from_vpackage_d_homepage    vpackage_d )?\n    return R if ( R = @_url_from_vpackage_d_repository  vpackage_d )?\n    return R if ( R = @_url_from_vpackage_d_bugs        vpackage_d )?\n    return null\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  _npm_api_url_from_package_name: ( pkg_name ) ->\n    return ( @cfg.registry_url.replace /\\/$/, '' ) + '/' + pkg_name\n\n  #---------------------------------------------------------------------------------------------------------\n  _fetch_package_d_from_package_name: ( pkg_name ) ->\n    rq_url        = @_npm_api_url_from_package_name pkg_name\n    return await ( got rq_url ).json()\n\n  #---------------------------------------------------------------------------------------------------------\n  _package_infos_from_package_d_and_version: ( package_d, version ) ->\n    R = {}\n    R.pkg_name        = package_d.name\n    R.pkg_version     = version\n    R.versions        = ( k for k of package_d.versions ? [] )\n    R.url             = @get_package_url package_d, version\n    R.description     = package_d.versions[ version ]?.description  ? null\n    R.dependencies    = package_d.versions[ version ]?.dependencies ? null\n    R.fspath          = null\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  fetch_package_infos: ( pkg_name, version ) ->\n    package_d = await @_fetch_package_d_from_package_name pkg_name\n    # debug '^443^', ( k for k of package_d )\n    # debug '^443^', ( k for k of package_d.versions )\n    # urge '^443^', ( k for k of package_d.versions[ '0.2.1' ] )\n    # debug '^443^', ( k for k of package_d.versions[ '0.2.1' ].dependencies )\n    return @_package_infos_from_package_d_and_version package_d, version\n\n#-----------------------------------------------------------------------------------------------------------\nregister_package = ( dpan, pkg_name, pkg_version ) ->\n  prefix          = dpan.cfg.prefix\n  ### TAINT code duplication, same logic in SQL ###\n  pkg_vname   = \"#{pkg_name}@#{pkg_version}\"\n  #.........................................................................................................\n  dpan._add_package_name = ( pkg_name ) ->\n    @dba.run SQL\"\"\"insert into #{prefix}pkg_names ( pkg_name )\n      values ( $pkg_name )\n      on conflict do nothing;\"\"\", { pkg_name, }\n    return null\n  #.........................................................................................................\n  dpan._add_package_version = ( pkg_version ) ->\n    @dba.run SQL\"\"\"insert into #{prefix}pkg_versions ( pkg_version )\n      values ( $pkg_version )\n      on conflict do nothing;\"\"\", { pkg_version, }\n    return null\n  #.........................................................................................................\n  dpan._add_package = ( package_info ) ->\n    @dba.run @sql.add_pkg_name,     package_info\n    @dba.run @sql.add_pkg_version,  package_info\n    @dba.run @sql.add_pkg,          package_info\n    # @_add_package_name    package_info.pkg_name\n    # @_add_package_version package_info.pkg_version\n    # @dba.run SQL\"\"\"insert into #{prefix}pkgs ( pkg_name, pkg_version )\n    #   values ( $pkg_name, $pkg_version )\n    #   on conflict do nothing;\"\"\", package_info\n    #.......................................................................................................\n    for dep_name, dep_version of package_info.dependencies\n      ### TAINT code duplication, same logic in SQL ###\n      dep_vname   = \"#{dep_name}@#{dep_version}\"\n      @_add_package_name    dep_name\n      @_add_package_version dep_version\n      @dba.run SQL\"\"\"insert into #{prefix}pkgs ( pkg_name, pkg_version )\n        values ( $pkg_name, $pkg_version )\n        on conflict do nothing;\"\"\", { pkg_name: dep_name, pkg_version: dep_version, }\n      @dba.run SQL\"\"\"insert into #{prefix}deps ( pkg_vname, dep_vname )\n        values ( $pkg_vname, $dep_vname )\n        on conflict do nothing;\"\"\", { pkg_vname, dep_vname, }\n    #.......................................................................................................\n    return null\n  #.........................................................................................................\n  package_info = await dpan.fetch_package_infos pkg_name, pkg_version\n  info '^677^', JSON.stringify package_info, null, '  '\n  #.........................................................................................................\n  dpan._add_package package_info\n  # for version in package_info.versions\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  dpan            = new Dpan { recreate: true, }\n  pkgs = [\n    { pkg_name: 'cnd',                pkg_version: '9.2.2', }\n    # { pkg_name: 'csv-parser',         pkg_version: '3.0.0', }\n    # { pkg_name: 'del',                pkg_version: '6.0.0', }\n    # { pkg_name: 'hollerith-codec',    pkg_version: '3.0.1', }\n    # { pkg_name: 'icql-dba',           pkg_version: '7.2.0', }\n    # { pkg_name: 'icql-dba-tags',      pkg_version: '0.2.1', }\n    # { pkg_name: 'intertype',          pkg_version: '7.6.7', }\n    # { pkg_name: 'is-stream',          pkg_version: '2.0.0', }\n    # { pkg_name: 'jsx-number-format',  pkg_version: '0.1.4', }\n    # { pkg_name: 'letsfreezethat',     pkg_version: '3.1.0', }\n    # { pkg_name: 'multimix',           pkg_version: '5.0.0', }\n    # { pkg_name: 'mysql-tokenizer',    pkg_version: '1.0.7', }\n    # { pkg_name: 'n-readlines',        pkg_version: '1.0.1', }\n    # { pkg_name: 'temp-dir',           pkg_version: '2.0.0', }\n    # { pkg_name: 'tempy',              pkg_version: '1.0.1', }\n    # { pkg_name: 'type-fest',          pkg_version: '0.16.0', }\n    { pkg_name: 'unique-string',      pkg_version: '2.0.0', }\n    ]\n  for { pkg_name, pkg_version, } in pkgs\n    await register_package dpan, pkg_name, pkg_version\n  debug '^577^', dpan.dba.list dpan.dba.query SQL\"select semver_satisfies( '1.2.5', '^1.2' );\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_custom_require = ->\n  RPKGUP = await import( 'read-pkg-up' )\n  debug ( k for k of RPKGUP )\n  pkg_names_and_svranges = [\n    [ '@ef-carbon/deep-freeze',    '^1.0.1', ]\n    [ '@scotttrinh/number-ranges', '^2.1.0', ]\n    [ 'argparse',                  '^2.0.1', ]\n    [ 'better-sqlite3',            '7.4.0', ]\n    [ 'chance',                    '^1.1.7', ]\n    [ 'cnd',                       '^9.2.1', ]\n    ]\n  path  = '../../../lib/main.js'\n  path  = PATH.resolve PATH.join __dirname, path\n  { createRequire, } = require 'module'\n  rq    = createRequire path\n  for [ pkg_name, svrange, ] in pkg_names_and_svranges\n    dep_fspath        = rq.resolve pkg_name\n    dep_json_info     = RPKGUP.readPackageUpSync { cwd: dep_fspath, normalize: true, }\n    dep_json          = dep_json_info.packageJson\n    dep_version       = dep_json.version\n    dep_description   = dep_json.description\n    dep_keywords      = dep_json.keywords ? []\n    dep_json_fspath   = dep_json_info.path\n    info()\n    info ( CND.yellow pkg_name )\n    info ( CND.blue dep_fspath )\n    info ( CND.gold dep_keywords )\n    # info ( CND.lime dep_pkgj_fspath )\n    info dep_version\n    info dep_description\n    # info ( CND.lime FS.realpathSync dep_fspath )\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo()\n  await demo_custom_require()\n  # CP = require 'child_process'\n  # debug '^33442^', CP.execSync \"npm view icql-dba@^6 dependencies\", { encoding: 'utf-8', }\n  # debug '^33442^', CP.execSync \"npm view icql-dba dependencies\", { encoding: 'utf-8', }\n\nf = ->\n  dpan          = new Dpan()\n  pkg_name  = 'icql-dba-vars'\n  pkg_name  = 'icql-dba-tags'\n  package_d     = await dpan._fetch_package_d_from_package_name pkg_name\n  debug '^443^', ( k for k of package_d )\n  debug '^443^', ( k for k of package_d.versions )\n  urge '^443^', ( k for k of package_d.versions[ '0.2.1' ] )\n  debug '^443^', ( k for k of package_d.versions[ '0.2.1' ].dependencies )\n  package_info  = dpan._package_infos_from_package_d_and_version package_d, '0.2.1'\n  info '^677^', JSON.stringify package_info, null, '  '\n\nf = ->\n  #.........................................................................................................\n  for d from dpan.walk_dependencies()\n    debug '^684^', d\n    ### TAINT code duplication, same logic in SQL ###\n    pkg_vname = \"#{d.project_name}@#{d.project_version}\"\n    dep_vname     = \"#{d.dep_name}@#{d.dep_version}\"\n    # if d.is_new_project\n    dpan.dba.run SQL\"\"\"insert into #{prefix}pkgs ( name, version )\n      values ( $name, $version )\n      on conflict do nothing;\"\"\", { name: d.project_name, version: d.project_version, }\n    dpan.dba.run SQL\"\"\"insert into #{prefix}pkgs ( name, version )\n      values ( $name, $version )\n      on conflict do nothing;\"\"\", { name: d.dep_name, version: d.dep_version, }\n    dpan.dba.run SQL\"\"\"insert into #{prefix}dependencies ( package, depends_on )\n      values ( $package, $depends_on )\n      on conflict do nothing;\"\"\", { package: pkg_vname, depends_on: dep_vname, }\n  #.........................................................................................................\n  return null\n\n\n\n\n\n\n\n\n"
  ]
}