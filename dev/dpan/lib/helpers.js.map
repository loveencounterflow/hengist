{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/helpers.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;IAAA,oBAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,wBAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,QAFF,EAGE,gBAHF,CAAA,GAG4B,KAAK,CAAC,MAAN,CAAA,CAH5B;;EAKG,CAAA,CAAA,CAAA,GAAA,EAAA;AACH,QAAA;IAAE,iBAA6B,OAAO,CAAC,MAAlC,4BAAH;MACE,CAAC,CAAC,kBAAF,GAA4B;MAC5B,CAAC,CAAC,SAAF,GAA4B;MAC5B,OAAA,GAA4B,kCAH9B;KAAA,MAAA;MAKE,CAAC,CAAC,kBAAF,GAA4B;MAC5B,CAAC,CAAC,SAAF,GAA4B,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,oBAArB,CAAb;MAC5B,OAAA,GAA4B,oBAP9B;;IAQA,KAAA,CAAM,QAAN,EAAgB,GAAG,CAAC,OAAJ,CAAY,OAAZ,CAAhB;IACA,OAAO,CAAC,EAAR,CAAW,MAAX,EAAmB,QAAA,CAAA,CAAA;aACjB,KAAA,CAAM,QAAN,EAAgB,GAAG,CAAC,OAAJ,CAAY,OAAZ,CAAhB;IADiB,CAAnB;AAEA,WAAO;EAZN,CAAA,IAxBH;;;EAsCA,CAAA,CAAE,IAAF,CAAA,GAA4B,OAAA,CAAQ,CAAC,CAAC,SAAV,CAA5B;;EAtCA;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DPAN/TESTS/HELPERS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n#-----------------------------------------------------------------------------------------------------------\ndo =>\n  if '--dpan-use-installed' in process.argv\n    H.dpan_use_installed      = true\n    H.dpan_path               = 'dpan'\n    message                   = \"using installed version of dpan\"\n  else\n    H.dpan_use_installed      = false\n    H.dpan_path               = PATH.resolve PATH.join __dirname, '../../../apps/dpan'\n    message                   = \"using linked dpan\"\n  debug '^3337^', CND.reverse message\n  process.on 'exit', ->\n    debug '^3337^', CND.reverse message\n  return null\n#-----------------------------------------------------------------------------------------------------------\n{ Dpan }                  = require H.dpan_path\n# dpan_types                = require H.dpan_path + '/lib/types'\n"
  ]
}