{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DPAN/DEMOS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n{ to_width }              = require 'to-width'\nSQL                       = String.raw\n{ lets\n  freeze }                = require 'letsfreezethat'\n{ Dba, }                  = require 'icql-dba'\ndef                       = Object.defineProperty\nglob                      = require 'glob'\nPATH                      = require 'path'\nFS                        = require 'fs'\ngot                       = require 'got'\nsemver_satisfies          = require 'semver/functions/satisfies'\nsemver_cmp                = require 'semver/functions/cmp'\nH                         = require './helpers'\nchalk                     = require 'chalk'\nhashbow                   = require 'hashbow'\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# class Dpan_next extends Dpan\n\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_db_add_pkg_info = ->\n  { Dpan }            = require H.dpan_path\n  # dpan                = new Dpan_next()\n  dpan                = new Dpan()\n  pkg_fspath          = '../../../'\n  pkg_fspath          = PATH.resolve PATH.join __dirname, pkg_fspath\n  pkg_name            = PATH.basename pkg_fspath ### TAINT not strictly true ###\n  pkg_info            = await dpan.fs_fetch_pkg_info { pkg_fspath, }\n  dpan.db_add_pkg_info pkg_info\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_db_add_pkg_infos = ->\n  { Dpan, }             = require H.dpan_path\n  { Tbl, }              = require '../../../apps/icql-dba-tabulate'\n  { Dba, }              = require H.dba_path\n  db_path               = PATH.resolve PATH.join __dirname, '../../../data/dpan.sqlite'\n  dba                   = new Dba()\n  dba.open { path: db_path, }\n  dba.pragma SQL\"journal_mode=memory\"\n  dpan                  = new Dpan { dba, recreate: true, }\n  # dpan                  = new Dpan_next { recreate: true, }\n  skipped               = []\n  # home_path             = PATH.resolve PATH.join __dirname, '../../../../'\n  # project_path_pattern  = PATH.join home_path, '*/package.json'\n  # home_path             = PATH.resolve PATH.join __dirname, '../../../../dpan'\n  home_path             = PATH.resolve PATH.join __dirname, '../../../apps/dpan'\n  project_path_pattern  = PATH.join home_path, './package.json'\n  debug '^488^', project_path_pattern\n  for project_path in glob.sync project_path_pattern\n    pkg_fspath  = PATH.dirname project_path\n    try\n      pkg_info = await dpan.fs_fetch_pkg_info { pkg_fspath, }\n      # debug '^336^', pkg_info\n      dpan.db_add_pkg_info pkg_info\n    catch error\n      warn \"error occurred when trying to add #{pkg_fspath}: #{error.message}; skipping\"\n      skipped.push pkg_fspath\n      continue\n    # whisper '^564^', pkg_info\n    info '^564^', pkg_info.pkg_name, pkg_info.pkg_version\n  #.........................................................................................................\n  if skipped.length > 0\n    warn \"some paths looked like projects but caused errors (see above):\"\n    warn '  ' + entry for entry in skipped\n  #.........................................................................................................\n  dbatbl      = new Tbl { dba, }\n  dbatbl.dump_db()\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nget_gitlog = ( pkg_fspath ) ->\n  debug '^353455^', pkg_fspath\n  # if pkg_fspath.endsWith '/cxltx'\n  #   warn \"^439342344^ skipping #{pkg_fspath}\"\n  #   return []\n  gitlog              = ( require 'gitlog' ).default\n  cfg                 =\n    repo:         pkg_fspath\n    number:       1e6\n    execOptions:  { maxBuffer: 40096 * 1024, },\n    fields:       [ 'abbrevHash', 'authorDate', 'files', 'subject', ],\n  try commits = gitlog cfg catch error\n    # throw error\n    warn \"^347834^ when trying to get git logs for #{pkg_fspath}, an error occurred:\"\n    warn \"#{error.code} #{error.message}\"\n    return []\n  commit_count  = commits.length\n  info \"commit_count:\", commit_count, pkg_fspath\n  ### NOTE commits are ordered newest first ###\n  for commit in commits[ .. 3 ]\n    file_count  = commit.files.length\n    short_hash  = commit.abbrevHash\n    date        = commit.authorDate\n    subject     = to_width commit.subject, 100\n    subject     = subject.trim()\n    urge file_count, short_hash, date, subject\n  #.........................................................................................................\n  R               = []\n  for commit in commits[ .. 100 ]\n    name    = PATH.basename pkg_fspath\n    date    = commit.authorDate.replace /:[^:]+$/, ''\n    subject = commit.subject.trim()\n    R.push { name, date, subject, }\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nget_pkg_infos = ( dpan ) ->\n  R                     = []\n  ref_path              = process.cwd()\n  home_path             = process.env.HOME\n  sub_paths             = [\n    'temp/linuxtimemachine-backups/enceladus/jzr/*/package.json'\n    # 'jzr/*/package.json'\n    # 'io/*/package.json'\n    # 'io/mingkwai-rack/*/package.json'\n    ]\n  for sub_path in sub_paths\n    project_path_pattern  = PATH.join home_path, sub_path\n    R                     = [ R..., ( _get_pkg_infos dpan, ref_path, project_path_pattern )..., ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n_get_pkg_infos = ( dpan, ref_path, project_path_pattern ) ->\n  R                     = []\n  for project_path in glob.sync project_path_pattern, { follow: false, realpath: true, }\n    pkg_fspath      = PATH.dirname project_path\n    unless ( dcs = dpan.git_get_dirty_counts { pkg_fspath, fallback: null, } )?\n      warn \"not a git repo: #{pkg_fspath}\"\n      continue\n    pkg_rel_fspath  = PATH.relative ref_path, pkg_fspath\n    pkg_name        = PATH.basename pkg_fspath\n    R.push { pkg_fspath, pkg_rel_fspath, pkg_name, dcs, }\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_git_get_dirty_counts = ->\n  { Dpan, }             = require H.dpan_path\n  { Tbl, }              = require '../../../apps/icql-dba-tabulate'\n  { Dba, }              = require H.dba_path\n  db_path               = PATH.resolve PATH.join __dirname, '../../../data/dpan.sqlite'\n  dba                   = new Dba()\n  dba.open { path: db_path, }\n  #.........................................................................................................\n  dpan                  = new Dpan { dba, recreate: true, }\n  pkgs                  = get_pkg_infos dpan\n  help '^46456^', \"using DB at #{db_path}\"\n  whisper \"ACC: ahead-commit  count\"\n  whisper \"BCC: behind-commit count\"\n  whisper \"DFC: dirty file    count\"\n  #.........................................................................................................\n  for { pkg_fspath, pkg_rel_fspath, pkg_name, dcs, } in pkgs\n    sum = dcs.sum\n    delete dcs.sum\n    if sum > 0\n      delete dcs[ k ] for k, v of dcs when v is 0\n      help '^334-2^', ( to_width pkg_rel_fspath, 50 ), ( CND.yellow CND.reverse \" #{sum} \" ), ( CND.grey dcs )\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_show_recent_commits = ->\n  { Dpan, }             = require H.dpan_path\n  { Tbl, }              = require '../../../apps/icql-dba-tabulate'\n  { Dba, }              = require H.dba_path\n  db_path               = PATH.resolve PATH.join __dirname, '../../../data/dpan.sqlite'\n  dba                   = new Dba()\n  dba.open { path: db_path, }\n  dpan                  = new Dpan { dba, recreate: true, }\n  recent_commits        = []\n  pkgs                  = get_pkg_infos dpan\n  help '^46456^', \"using DB at #{db_path}\"\n  #.........................................................................................................\n  for { pkg_fspath, pkg_rel_fspath, pkg_name, } in pkgs\n    for commit in get_gitlog pkg_fspath\n      recent_commits.push commit\n  #.........................................................................................................\n  recent_commits.sort ( a, b ) ->\n    return -1 if a.date < b.date\n    return +1 if a.date > b.date\n    return 0\n  #.........................................................................................................\n  for commit in recent_commits\n    name    = to_width commit.name, 20\n    subject = to_width commit.subject, 100\n    echo ( CND.white commit.date ), ( chalk.inverse.bold.hex hashbow name ) name + ' ' + subject\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_fs_walk_dep_infos = ->\n  { Dpan }            = require H.dpan_path\n  dpan                = new Dpan()\n  pkg_fspath          = '../../../'\n  pkg_fspath          = PATH.resolve PATH.join __dirname, pkg_fspath\n  pkg_name            = PATH.basename pkg_fspath ### TAINT not strictly true ###\n  fallback            = null\n  count               = 0\n  count_max           = 20\n  for await dep from dpan.fs_walk_dep_infos { pkg_fspath, }\n    count++\n    break if count > count_max\n    # whisper '^850^', dep\n    info '^850^', dep.pkg_name, dep.pkg_version, \"(#{dep.dep_svrange})\", ( CND.yellow dep.pkg_keywords.join ' ' )\n    urge '^850^', dep.pkg_deps\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_git_fetch_pkg_status = ->\n  { Dpan }            = require H.dpan_path\n  { Dba, }            = require H.dba_path\n  db_path             = PATH.resolve PATH.join __dirname, '../../../data/dpan.sqlite'\n  dba                 = new Dba()\n  dba.open { path: db_path, }\n  dba.pragma SQL\"journal_mode=memory\"\n  dpan                = new Dpan { dba, recreate: true, }\n  pkg_fspath          = '../../../'\n  pkg_fspath          = PATH.resolve PATH.join __dirname, pkg_fspath\n  dpan.git_fetch_pkg_status { pkg_fspath, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_variables = ->\n  { Dba }             = require H.dba_path\n  { Dpan }            = require H.dpan_path\n  dba                 = new Dba()\n  dpan                = new Dpan { dba, }\n  debug '^4443^', dpan.vars.set 'myvariable', \"some value\"\n  debug '^4443^', dpan.vars.set 'distance', 12\n  debug '^4443^', dpan.vars.get 'myvariable'\n  debug '^4443^', dpan.vars.get 'distance'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_staged_file_paths = ->\n  { Dba }             = require H.dba_path\n  { Dpan }            = require H.dpan_path\n  dba                 = new Dba()\n  dpan                = new Dpan { dba, }\n  GU                  = require 'git-utils'\n  pkg_fspath          = PATH.resolve PATH.join __dirname, '../../../apps/git-expanded-commit-messages'\n  repo                = GU.open pkg_fspath\n  unless repo?\n    throw new Error \"^43487^ no repo at #{pkg_fspath}\"\n  debug '^3324^', repo.getStatus() ### missing untracked files ###\n  debug '^3324^',( pkg_fspath for pkg_fspath, status of repo.getStatus() when status is 1 ) ### missing untracked files ###\n  info '^5909^', dpan.git_get_staged_file_paths { pkg_fspath, }\n  return null\n\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_fs_walk_dep_infos()\n  # await demo_db_add_package()\n  # await demo_db_add_pkg_info()\n  # await demo_db_add_pkg_infos()\n  # await demo_git_fetch_pkg_status()\n  await demo_show_recent_commits()\n  await demo_git_get_dirty_counts()\n  # await demo_variables()\n  # await demo_staged_file_paths()\n\n\n"
  ]
}