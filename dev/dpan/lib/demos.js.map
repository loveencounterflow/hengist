{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DPAN/DEMOS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\nSQL                       = String.raw\n{ lets\n  freeze }                = require 'letsfreezethat'\n{ Dba, }                  = require 'icql-dba'\ndef                       = Object.defineProperty\nglob                      = require 'glob'\nPATH                      = require 'path'\nFS                        = require 'fs'\ngot                       = require 'got'\nsemver_satisfies          = require 'semver/functions/satisfies'\nsemver_cmp                = require 'semver/functions/cmp'\n{ Dpan, }                 = require '../../../apps/dpan'\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_fs_walk_dep_infos = ->\n  RPKGUP  = await import( 'read-pkg-up' )\n  dpan        = new Dpan()\n  pkg_fspath          = '../../../'\n  pkg_fspath          = PATH.resolve PATH.join __dirname, pkg_fspath\n  pkg_name            = PATH.basename pkg_fspath ### TAINT not strictly true ###\n  fallback            = null\n  count               = 0\n  count_max           = 20\n  for await dep from dpan.fs_walk_dep_infos { pkg_fspath, }\n    count++\n    break if count > count_max\n    # whisper '^850^', dep\n    info '^850^', dep.pkg_name, dep.pkg_version, \"(#{dep.dep_svrange})\", ( CND.yellow dep.pkg_keywords.join ' ' )\n    urge '^850^', dep.pkg_deps\n    continue\n    ###\n    dep_fspath        = dpan.fs_resolve_dep_fspath { pkg_fspath, dep_name, }\n    dep_json_info     = await dpan.fs_fetch_pkg_json_info { pkg_fspath: dep_fspath, fallback, }\n    unless dep_json_info?\n      warn \"unable to fetch package.json for #{dep_fspath}\"\n      continue\n    debug '^33344^', ( k for k of dep_json_info )\n    dep_json          = dep_json_info.pkg_json\n    dep_version       = dep_json.version\n    dep_description   = dep_json.description\n    dep_keywords      = dep_json.keywords ? []\n    dep_json_fspath   = dep_json_info.path\n    info()\n    info ( CND.yellow dep_name )\n    info ( CND.blue dep_fspath )\n    info ( CND.gold dep_keywords )\n    # info ( CND.lime dep_pkgj_fspath )\n    info dep_version\n    info dep_description\n    # info ( CND.lime FS.realpathSync dep_fspath )\n    ###\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo()\n  await demo_fs_walk_dep_infos()\n  # CP = require 'child_process'\n  # debug '^33442^', CP.execSync \"npm view icql-dba@^6 dependencies\", { encoding: 'utf-8', }\n  # debug '^33442^', CP.execSync \"npm view icql-dba dependencies\", { encoding: 'utf-8', }\n"
  ]
}