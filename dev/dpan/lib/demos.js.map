{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DPAN/DEMOS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\nSQL                       = String.raw\n{ lets\n  freeze }                = require 'letsfreezethat'\n{ Dba, }                  = require 'icql-dba'\ndef                       = Object.defineProperty\nglob                      = require 'glob'\nPATH                      = require 'path'\nFS                        = require 'fs'\ngot                       = require 'got'\nsemver_satisfies          = require 'semver/functions/satisfies'\nsemver_cmp                = require 'semver/functions/cmp'\n{ Dpan, }                 = require '../../../apps/dpan'\n\n\n#-----------------------------------------------------------------------------------------------------------\nclass Dpan_next extends Dpan\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _db_add_pkg_name: ( pkg_name ) ->\n  #   @dba.run SQL\"\"\"insert into #{prefix}pkg_names ( pkg_name )\n  #     values ( $pkg_name )\n  #     on conflict do nothing;\"\"\", { pkg_name, }\n  #   return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _db_add_pkg_version: ( pkg_version ) ->\n  #   @dba.run SQL\"\"\"insert into #{prefix}pkg_versions ( pkg_version )\n  #     values ( $pkg_version )\n  #     on conflict do nothing;\"\"\", { pkg_version, }\n  #   return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _db_add_pkg_svrange: ( pkg_svrange ) ->\n  #   @dba.run SQL\"\"\"insert into #{prefix}pkg_svranges ( pkg_svrange )\n  #     values ( $pkg_svrange )\n  #     on conflict do nothing;\"\"\", { pkg_svrange, }\n  #   return null\n\n  #---------------------------------------------------------------------------------------------------------\n  db_add_pkg_info: ( cfg ) ->\n    ### TAINT validate ###\n    { pkg_info, } = cfg\n    @dba.run @sql.add_pkg_name,     pkg_info\n    @dba.run @sql.add_pkg_version,  pkg_info\n    @dba.run @sql.add_pkg,          pkg_info\n    # @_db_add_pkg_name    pkg_info.pkg_name\n    # @_db_add_pkg_version pkg_info.pkg_version\n    # @dba.run SQL\"\"\"insert into #{prefix}pkgs ( pkg_name, pkg_version )\n    #   values ( $pkg_name, $pkg_version )\n    #   on conflict do nothing;\"\"\", pkg_info\n    #.......................................................................................................\n    for dep_name, dep_svrange of pkg_info.pkg_deps\n      @dba.run @sql.add_pkg_name,     { pkg_name: dep_name, }\n      @dba.run @sql.add_pkg_svrange,  { pkg_svrange: dep_svrange, }\n      @dba.run @sql.add_pkg_dep,      { pkg_info..., dep_name, dep_svrange, }\n    #.......................................................................................................\n    return null\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_db_add_pkg_info = ->\n  dpan                = new Dpan_next()\n  pkg_fspath          = '../../../'\n  pkg_fspath          = PATH.resolve PATH.join __dirname, pkg_fspath\n  pkg_name            = PATH.basename pkg_fspath ### TAINT not strictly true ###\n  pkg_info            = await dpan.fs_fetch_pkg_info { pkg_fspath, }\n  debug '^476^', ( k for k of pkg_info )\n  dpan.db_add_pkg_info { pkg_info, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_fs_walk_dep_infos = ->\n  dpan                = new Dpan()\n  pkg_fspath          = '../../../'\n  pkg_fspath          = PATH.resolve PATH.join __dirname, pkg_fspath\n  pkg_name            = PATH.basename pkg_fspath ### TAINT not strictly true ###\n  fallback            = null\n  count               = 0\n  count_max           = 20\n  for await dep from dpan.fs_walk_dep_infos { pkg_fspath, }\n    count++\n    break if count > count_max\n    # whisper '^850^', dep\n    info '^850^', dep.pkg_name, dep.pkg_version, \"(#{dep.dep_svrange})\", ( CND.yellow dep.pkg_keywords.join ' ' )\n    urge '^850^', dep.pkg_deps\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_fs_walk_dep_infos()\n  # await demo_db_add_package()\n  await demo_db_add_pkg_info()\n\n\n"
  ]
}