{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/in-memory-sql.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'IN-MEMORY-SQL'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\ngcfg                      = { verbose: false, }\n\n#-----------------------------------------------------------------------------------------------------------\nshow_result = ( name, result ) ->\n  info '-----------------------------------------------'\n  urge name\n  whisper result\n  info '-----------------------------------------------'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  DATOM = require '../../../apps/datom'\n  #.........................................................................................................\n  texts       = DATA.get_text_lines cfg\n  font        =\n    path:       'EBGaramond12-Italic.otf'\n    ### TAINT use single type/format for features ###\n    features:   'liga,clig,dlig,hlig'\n    features_obj: { liga: true, clig: true, dlig: true, hlig: true, }\n  font.path   = PATH.resolve PATH.join __dirname, '../../../assets/jizura-fonts', font.path\n  #.........................................................................................................\n  data_cache  = { texts, font, }\n  data_cache  = DATOM.freeze data_cache\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@pgmem = ( cfg ) -> new Promise ( resolve ) =>\n  db            = ( require 'pg-mem' ).newDb()\n  # HB.ensure_harfbuzz_version() ### NOTE: optional diagnostic ###\n  # data          = @get_data cfg\n  count         = 0\n  resolve => new Promise ( resolve ) =>\n    sql = \"\"\"\n      create table foo ( n integer not null );\n      insert into foo values ( 1 ), ( 2 ), ( 3 ), ( 4 ), ( 5 ), ( 6 ), ( 7 ), ( 8 );\n      \"\"\"\n    debug '^22233^', db.public.none sql\n    resolve count\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  # gcfg.verbose  = true\n  bench         = BM.new_benchmarks()\n  n             = 10\n  gcfg.verbose  = ( n is 1 )\n  cfg           = { line_count: n, word_count: n, }\n  repetitions   = 2\n  test_names    = [\n    'pgmem'\n    ]\n  global.gc() if global.gc?\n  data_cache = null\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      global.gc() if global.gc?\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n\n\n\n"
  ]
}