{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/in-memory-sql.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'IN-MEMORY-SQL'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\ngcfg                      = { verbose: false, }\n\n#-----------------------------------------------------------------------------------------------------------\ntry_to_remove_file = ( path ) ->\n  try FS.unlinkSync path catch error\n    return if error.code is 'ENOENT'\n    throw error\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nshow_result = ( name, result ) ->\n  info '-----------------------------------------------'\n  urge name\n  whisper result\n  info '-----------------------------------------------'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  whisper \"retrieving test data...\"\n  DATOM = require '../../../apps/datom'\n  #.........................................................................................................\n  texts       = DATA.get_words cfg.word_count\n  #.........................................................................................................\n  data_cache  = { texts, }\n  data_cache  = DATOM.freeze data_cache\n  whisper \"...done\"\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@pgmem = ( cfg ) -> new Promise ( resolve ) =>\n  db            = ( require 'pg-mem' ).newDb()\n  PGM           = require 'pg-mem'\n  data          = @get_data cfg\n  count         = 0\n  #.........................................................................................................\n  ### PGM data types:\n  array, bigint, bool, box, bytea, circlecitext, date, decimal, float, inet, integer, interval, json,\n  jsonb, line, lseg, null, path, point, polygon, record, regclass, regtype, text, time, timestamp,\n  timestampz, uuid ###\n  # generate_series = ( first_n, last_n ) => 42\n  # generate_series_des = {\n  #   name:             'generate_series',\n  #   args:             [ PGM.DataType.integer, PGM.DataType.integer, ],\n  #   returns:          PGM.DataType.integer,\n  #   implementation:   generate_series, }\n  # db.public.registerFunction generate_series\n  # debug db.public.many \"\"\"select * from generate_series( 1, 10 ) as n;\"\"\"\n  #.........................................................................................................\n  db.public.none \"\"\"\n    create table test(\n      id    integer generated by default as identity primary key,\n      nr    integer not null,\n      text  text );\"\"\"\n  table = db.public.getTable 'test'\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    nr      = 0\n    for text in data.texts\n      nr++\n      table.insert { nr, text, }\n    result  = db.public.many \"\"\"select * from test order by text;\"\"\"\n    count  += result.length\n    show_result 'pgmem', result if gcfg.verbose\n    # db.close()\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@bettersqlite3_membacked = ( cfg, use_membacked = true ) -> new Promise ( resolve ) =>\n  Db            = require 'better-sqlite3'\n  # db_cfg        = { verbose: ( CND.get_logger 'whisper', '^33365^ SQLite3' ), }\n  #.........................................................................................................\n  do populate_file = =>\n    db_cfg        = null\n    db_path       = \"/tmp/hengist-in-memory-sql.benchmarks.membacked.db\"\n    filedb        = new Db db_path, db_cfg\n    data          = @get_data cfg\n    count         = 0\n    #.........................................................................................................\n    # filedb.unsafeMode true\n    # filedb.pragma 'cache_size = 32000'\n    filedb.pragma 'synchronous = OFF' # makes file-based DBs much faster\n    #.........................................................................................................\n    filedb.exec \"\"\"drop table if exists test;\"\"\"\n    filedb.exec \"\"\"\n      create table test(\n        id    integer primary key,\n        nr    integer not null,\n        text  text );\"\"\"\n    # debug '^22233^', filedb.exec \"\"\"insert into test ( nr, text ) values ( 1, '2' );\"\"\"\n    insert        = filedb.prepare \"\"\"insert into test ( nr, text ) values ( ?, ? );\"\"\"\n    retrieve      = filedb.prepare \"\"\"select * from test order by text;\"\"\"\n    nr      = 0\n    for text in data.texts\n      nr++\n      insert.run [ nr, text, ]\n    filedb.backup ':memory:'\n    return null\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    result  = retrieve.all()\n    count  += result.length\n    show_result 'bettersqlite3', result if gcfg.verbose\n    if do_backup\n      await db.backup ':memory:'\n    db.close()\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_bettersqlite3 = ( cfg ) -> new Promise ( resolve ) =>\n  Db            = require 'better-sqlite3'\n  # db_cfg        = { verbose: ( CND.get_logger 'whisper', '^33365^ SQLite3' ), }\n  defaults      = { do_backup: false, pragmas: [], }\n  cfg           = { defaults..., cfg..., }\n  db_cfg        = null\n  try_to_remove_file cfg.db_path if cfg.db_path isnt ':memory:'\n  db            = new Db cfg.db_path, db_cfg\n  data          = @get_data cfg\n  count         = 0\n  #.........................................................................................................\n  # db.unsafeMode true\n  # db.pragma 'cache_size = 32000'\n  db.pragma 'synchronous = OFF' # makes file-based DBs much faster\n  for pragma in cfg.pragmas\n    db.pragma pragma\n  #.........................................................................................................\n  # db.exec \"\"\"drop table if exists test;\"\"\"\n  db.exec \"\"\"\n    create table test(\n      id    integer primary key,\n      nr    integer not null,\n      text  text );\"\"\"\n  # debug '^22233^', db.exec \"\"\"insert into test ( nr, text ) values ( 1, '2' );\"\"\"\n  insert        = db.prepare \"\"\"insert into test ( nr, text ) values ( ?, ? );\"\"\"\n  retrieve      = db.prepare \"\"\"select * from test order by text;\"\"\"\n  retrieve.raw true\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    nr      = 0\n    # db.transaction =>\n    for text in data.texts\n      nr++\n      insert.run [ nr, text, ]\n    result  = retrieve.all()\n    count  += result.length\n    show_result 'bettersqlite3', result if gcfg.verbose\n    if cfg.do_backup\n      await db.backup \"/tmp/hengist-in-memory-sql.benchmarks.backup-#{Date.now()}.db\"\n    db.close()\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@bettersqlite3_memory = ( cfg ) => @_bettersqlite3 { cfg..., db_path: ':memory:', }\n@bettersqlite3_backup = ( cfg ) => @_bettersqlite3 { cfg..., db_path: ':memory:', do_backup: true, }\n@bettersqlite3_file   = ( cfg ) => @_bettersqlite3 { cfg..., db_path: '/tmp/hengist-in-memory-sql.benchmarks.db', }\n#...........................................................................................................\n@bettersqlite3_jmdel    = ( cfg ) => @_bettersqlite3 { cfg..., db_path: '/tmp/hengist-in-memory-sql.jmdel.benchmarks.db',   pragmas: [ 'journal_mode = DELETE;', ] }\n@bettersqlite3_jmtrunc  = ( cfg ) => @_bettersqlite3 { cfg..., db_path: '/tmp/hengist-in-memory-sql.jmtrunc.benchmarks.db', pragmas: [ 'journal_mode = TRUNCATE;', ] }\n@bettersqlite3_jmpers   = ( cfg ) => @_bettersqlite3 { cfg..., db_path: '/tmp/hengist-in-memory-sql.jmpers.benchmarks.db',  pragmas: [ 'journal_mode = PERSIST;', ] }\n@bettersqlite3_jmmem    = ( cfg ) => @_bettersqlite3 { cfg..., db_path: '/tmp/hengist-in-memory-sql.jmmem.benchmarks.db',   pragmas: [ 'journal_mode = MEMORY;', ] }\n@bettersqlite3_jmwal    = ( cfg ) => @_bettersqlite3 { cfg..., db_path: '/tmp/hengist-in-memory-sql.jmwal.benchmarks.db',   pragmas: [ 'journal_mode = WAL;', ] }\n@bettersqlite3_jmoff    = ( cfg ) => @_bettersqlite3 { cfg..., db_path: '/tmp/hengist-in-memory-sql.jmoff.benchmarks.db',   pragmas: [ 'journal_mode = OFF;', ] }\n@bettersqlite3_mmap     = ( cfg ) => @_bettersqlite3 { cfg..., db_path: '/tmp/hengist-in-memory-sql.mmap.benchmarks.db',    pragmas: [ 'mmap_size = 2147418112;', ] }\n@bettersqlite3_tmpm     = ( cfg ) => @_bettersqlite3 { cfg..., db_path: '/tmp/hengist-in-memory-sql.tmpm.benchmarks.db',    pragmas: [ 'temp_store = MEMORY;', ] }\n@bettersqlite3_thrds    = ( cfg ) => @_bettersqlite3 { cfg..., db_path: '/tmp/hengist-in-memory-sql.thrds.benchmarks.db',   pragmas: [ 'threads = 4;', ] }\n\n#-----------------------------------------------------------------------------------------------------------\n@bettersqlite3_memory_noprepare = ( cfg ) -> new Promise ( resolve ) =>\n  Db            = require 'better-sqlite3'\n  # db_cfg        = { verbose: ( CND.get_logger 'whisper', '^33365^ SQLite3' ), }\n  db_cfg        = null\n  db            = new Db ':memory:', db_cfg\n  data          = @get_data cfg\n  count         = 0\n  #.........................................................................................................\n  # db.unsafeMode true\n  # db.pragma 'cache_size = 32000'\n  db.pragma 'synchronous = OFF' # makes file-based DBs much faster\n  #.........................................................................................................\n  db.exec \"\"\"drop table if exists test;\"\"\"\n  db.exec \"\"\"\n    create table test(\n      id    integer primary key,\n      nr    integer not null,\n      text  text );\"\"\"\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    nr      = 0\n    for text in data.texts\n      nr++\n      insert = db.prepare \"\"\"insert into test ( nr, text ) values ( ?, ? );\"\"\"\n      insert.run [ nr, text, ]\n    retrieve  = db.prepare \"\"\"select * from test order by text;\"\"\"\n    result    = retrieve.all()\n    count    += result.length\n    show_result 'bettersqlite3', result if gcfg.verbose\n    db.close()\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_bettersqlite3_memory_icql = ( cfg, icql_version ) -> new Promise ( resolve ) =>\n  Db            = require 'better-sqlite3'\n  icql_path     = PATH.resolve PATH.join __dirname, '../demo-frp.icql'\n  ICQL          = require switch icql_version\n    when 'icql_latest'  then '../../../apps/icql'\n    when 'icql515'      then 'icql515'\n    else throw new Error \"^45458^ unknown icql_version: #{rpr icql_version}\"\n  icql_cfg =\n    connector:    Db\n    db_path:      ':memory:'\n    icql_path:    icql_path\n  db            = ICQL.bind icql_cfg\n  db.create_table_text()\n  data          = @get_data cfg\n  count         = 0\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    linenr = 0\n    for line in data.texts\n      linenr++\n      db.insert_line { linenr, line, }\n    result  = db.$.all_rows db.get_all_texts()\n    count  += result.length\n    show_result 'bettersqlite3_memory_icql', result if gcfg.verbose\n    db.$.db.close()\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@bettersqlite3_memory_icql515     = ( cfg ) -> @_bettersqlite3_memory_icql cfg, 'icql515'\n@bettersqlite3_memory_icql_latest = ( cfg ) -> @_bettersqlite3_memory_icql cfg, 'icql_latest'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@sqljs = ( cfg ) -> new Promise ( resolve ) =>\n  # initSqlJs            = require 'sql.js/dist/sql-asm-debug.js'\n  # initSqlJs            = require 'sql.js/dist/sql-asm-memory-growth.js'\n  # initSqlJs            = require 'sql.js/dist/sql-asm.js'\n  # initSqlJs            = require 'sql.js/dist/sql-wasm-debug.js'\n  initSqlJs   = require 'sql.js/dist/sql-wasm.js' ### NOTE this is the default import ###\n  DB          = await initSqlJs()\n  # debug ( k for k of require 'sql.js')\n  # debug ( k for k of DB)\n  # debug DB\n  # debug ( k for k of DB.default)\n  # debug ( k for k of DB.default.default)\n  db            = new DB.Database()\n  data          = @get_data cfg\n  count         = 0\n  #.........................................................................................................\n  db.run \"\"\"\n    create table test(\n      id    integer primary key,\n      nr    integer not null,\n      text  text );\"\"\"\n  # debug '^22233^', db.exec \"\"\"insert into test ( nr, text ) values ( 1, '2' );\"\"\"\n  insert        = db.prepare \"\"\"insert into test ( nr, text ) values ( ?, ? );\"\"\"\n  retrieve      = db.prepare \"\"\"select * from test order by text;\"\"\"\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    nr      = 0\n    for text in data.texts\n      nr++\n      ### TAINT use prepared statement ###\n      # db.run \"\"\"insert into test ( nr, text ) values ( ?, ? );\"\"\", [ nr, text, ]\n      insert.bind [ nr, text, ]\n      insert.get() while insert.step()\n    # debug (k for k of retrieve)\n    # retrieve.bind(); result = []; result.push retrieve.getAsObject()  while retrieve.step()\n    result = []; db.each \"\"\"select * from test order by text;\"\"\", [], ( row ) -> result.push row\n    # retrieve.bind(); result = []; result.push retrieve.get()          while retrieve.step()\n    count  += result.length\n    show_result 'sqljs', result if gcfg.verbose\n    db.close()\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@porsagerpostgres = ( cfg ) -> new Promise ( resolve ) =>\n  postgres      = require 'postgres'\n  sql           = postgres 'postgres://interplot@localhost:5432/interplot'\n  count         = 0\n  data          = @get_data cfg\n  #.........................................................................................................\n    # await sql\"\"\"begin transaction;\"\"\"\n  await sql\"\"\"drop table if exists test cascade;\"\"\"\n  await sql\"\"\"\n    create table test(\n      id    integer generated by default as identity primary key,\n      nr    integer not null,\n      text  text );\"\"\"\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    # { rows }     = await sql\"select * from MIRAGE.mirror order by dsk, dsnr, linenr limit 10;\"\n    nr      = 0\n    await sql.begin ( sql ) =>\n      for text in data.texts\n        nr++\n        await sql\"\"\"insert into test ( nr, text ) values ( #{nr}, #{text} );\"\"\"\n    result  = await sql\"\"\"select * from test order by text;\"\"\"\n    show_result 'bettersqlite3', result if gcfg.verbose\n    count  += result.length\n    await sql.end { timeout: 0 }\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@briancpg = ( cfg ) -> new Promise ( resolve ) =>\n  db_cfg        = { database: 'interplot', user: 'interplot', port: 5432, }\n  pool          = new ( require 'pg' ).Pool db_cfg\n  db            = await pool.connect()\n  count         = 0\n  data          = @get_data cfg\n  #.........................................................................................................\n    # await sql\"\"\"begin transaction;\"\"\"\n  await db.query \"\"\"drop table if exists test cascade;\"\"\"\n  await db.query \"\"\"\n    create table test(\n      id    integer generated by default as identity primary key,\n      nr    integer not null,\n      text  text );\"\"\"\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    try\n      await db.query 'begin'\n      q =\n        text:     \"\"\"insert into test ( nr, text ) values ( $1, $2 );\"\"\"\n        rowMode:  'array' ### TAINT does not seem to work ###\n        values:   [ 0, '', ]\n      nr = 0\n      for text in data.texts\n        nr++\n        q.values = [ nr, text, ]\n        await db.query q\n      result  = await db.query \"\"\"select * from test order by text;\"\"\"\n      await db.query 'rollback'\n      show_result 'briancpg', result.rows if gcfg.verbose\n      count  += result.rows.length\n      await resolve count\n    finally\n      db.release()\n      pool.end()\n    resolve 1\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  gcfg.verbose  = true\n  gcfg.verbose  = false\n  bench         = BM.new_benchmarks()\n  cfg           = { word_count: 1000, }\n  repetitions   = 3\n  test_names    = [\n    'bettersqlite3_jmdel'\n    'bettersqlite3_jmtrunc'\n    'bettersqlite3_jmpers'\n    'bettersqlite3_jmmem'\n    'bettersqlite3_jmwal'\n    'bettersqlite3_jmoff'\n    'bettersqlite3_mmap'\n    'bettersqlite3_memory'\n    'bettersqlite3_memory_icql_latest'\n    'bettersqlite3_memory_icql515'\n    'bettersqlite3_backup'\n    'bettersqlite3_file'\n    'bettersqlite3_memory_noprepare'\n    'bettersqlite3_tmpm'\n    'bettersqlite3_thrds'\n    # 'pgmem'\n    # 'sqljs'\n    # 'porsagerpostgres'\n    # 'briancpg'\n    ]\n  global.gc() if global.gc?\n  data_cache = null\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      global.gc() if global.gc?\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n"
  ]
}