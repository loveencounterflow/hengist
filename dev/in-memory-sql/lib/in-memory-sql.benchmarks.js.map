{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/in-memory-sql.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'IN-MEMORY-SQL'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\ngcfg                      = { verbose: false, }\n\n#-----------------------------------------------------------------------------------------------------------\nshow_result = ( name, result ) ->\n  info '-----------------------------------------------'\n  urge name\n  whisper result\n  info '-----------------------------------------------'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  whisper \"retrieving test data...\"\n  DATOM = require '../../../apps/datom'\n  #.........................................................................................................\n  texts       = DATA.get_words cfg.word_count\n  #.........................................................................................................\n  data_cache  = { texts, }\n  data_cache  = DATOM.freeze data_cache\n  whisper \"...done\"\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@pgmem = ( cfg ) -> new Promise ( resolve ) =>\n  db            = ( require 'pg-mem' ).newDb()\n  PGM           = require 'pg-mem'\n  data          = @get_data cfg\n  count         = 0\n  #.........................................................................................................\n  ### PGM data types:\n  array, bigint, bool, box, bytea, circlecitext, date, decimal, float, inet, integer, interval, json,\n  jsonb, line, lseg, null, path, point, polygon, record, regclass, regtype, text, time, timestamp,\n  timestampz, uuid ###\n  # generate_series = ( first_n, last_n ) => 42\n  # generate_series_des = {\n  #   name:             'generate_series',\n  #   args:             [ PGM.DataType.integer, PGM.DataType.integer, ],\n  #   returns:          PGM.DataType.integer,\n  #   implementation:   generate_series, }\n  # db.public.registerFunction generate_series\n  # debug db.public.many \"\"\"select * from generate_series( 1, 10 ) as n;\"\"\"\n  #.........................................................................................................\n  db.public.none \"\"\"\n    create table test(\n      id    integer generated by default as identity primary key,\n      nr    integer not null,\n      text  text );\"\"\"\n  table = db.public.getTable 'test'\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    nr      = 0\n    for text in data.texts\n      nr++\n      table.insert { nr, text, }\n    result  = db.public.many \"\"\"select * from test order by text;\"\"\"\n    count  += result.length\n    show_result 'pgmem', result if gcfg.verbose\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@bettersqlite3 = ( cfg ) -> new Promise ( resolve ) =>\n  Db            = require 'better-sqlite3'\n  # db_cfg        = { verbose: ( CND.get_logger 'whisper', '^33365^ SQLite3' ), }\n  db_cfg        = null\n  db            = new Db ':memory:', db_cfg\n  data          = @get_data cfg\n  count         = 0\n  #.........................................................................................................\n  db.exec \"\"\"\n    create table test(\n      id    integer primary key,\n      nr    integer not null,\n      text  text );\"\"\"\n  # debug '^22233^', db.exec \"\"\"insert into test ( nr, text ) values ( 1, '2' );\"\"\"\n  insert        = db.prepare \"\"\"insert into test ( nr, text ) values ( ?, ? );\"\"\"\n  retrieve      = db.prepare \"\"\"select * from test order by text;\"\"\"\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    nr      = 0\n    for text in data.texts\n      nr++\n      insert.run [ nr, text, ]\n    result  = retrieve.all()\n    count  += result.length\n    show_result 'bettersqlite3', result if gcfg.verbose\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@sqljs = ( cfg ) -> new Promise ( resolve ) =>\n  # DB            = require 'sql.js'\n  # DB            = require 'sql.js/dist/sql-asm-debug.js'\n  # DB            = require 'sql.js/dist/sql-asm-memory-growth.js'\n  # DB            = require 'sql.js/dist/sql-asm.js'\n  # DB            = require 'sql.js/dist/sql-wasm-debug.js'\n  initSqlJs  = require 'sql.js/dist/sql-wasm.js' ### NOTE this is the default import ###\n  DB = await initSqlJs()\n  # debug ( k for k of require 'sql.js')\n  # debug ( k for k of DB)\n  # debug DB\n  # debug ( k for k of DB.default)\n  # debug ( k for k of DB.default.default)\n  db            = new DB.Database()\n  data          = @get_data cfg\n  count         = 0\n  #.........................................................................................................\n  db.run \"\"\"\n    create table test(\n      id    integer primary key,\n      nr    integer not null,\n      text  text );\"\"\"\n  # debug '^22233^', db.exec \"\"\"insert into test ( nr, text ) values ( 1, '2' );\"\"\"\n  insert        = db.prepare \"\"\"insert into test ( nr, text ) values ( ?, ? );\"\"\"\n  retrieve      = db.prepare \"\"\"select * from test order by text;\"\"\"\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    nr      = 0\n    for text in data.texts\n      nr++\n      ### TAINT use prepared statement ###\n      # db.run \"\"\"insert into test ( nr, text ) values ( ?, ? );\"\"\", [ nr, text, ]\n      insert.bind [ nr, text, ]\n      insert.get() while insert.step()\n    # debug (k for k of retrieve)\n    retrieve.bind(); result = []; result.push retrieve.getAsObject()  while retrieve.step()\n    # retrieve.bind(); result = []; result.push retrieve.get()          while retrieve.step()\n    count  += result.length\n    show_result 'sqljs', result if gcfg.verbose\n    resolve count\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  gcfg.verbose  = true\n  gcfg.verbose  = false\n  bench         = BM.new_benchmarks()\n  cfg           = { word_count: 5000, }\n  repetitions   = 1\n  test_names    = [\n    'pgmem'\n    'bettersqlite3'\n    'sqljs'\n    ]\n  global.gc() if global.gc?\n  data_cache = null\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      global.gc() if global.gc?\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n\n\n\n"
  ]
}