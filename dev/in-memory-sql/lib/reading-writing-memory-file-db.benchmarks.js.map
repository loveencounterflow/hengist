{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/reading-writing-memory-file-db.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'IN-MEMORY-SQL/READING-WRITING-MEMORY-FILE-DB'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\ngcfg                      = { verbose: false, }\n\n#-----------------------------------------------------------------------------------------------------------\nresolve_path = ( path ) -> PATH.resolve PATH.join __dirname, '../../../', path\n\n#-----------------------------------------------------------------------------------------------------------\nshow_result = ( name, result ) ->\n  info '-----------------------------------------------'\n  urge name\n  whisper result\n  info '-----------------------------------------------'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  whisper \"retrieving test data...\"\n  DATOM = require '../../../apps/datom'\n  #.........................................................................................................\n  texts       = DATA.get_words cfg.word_count\n  #.........................................................................................................\n  data_cache  = { texts, }\n  data_cache  = DATOM.freeze data_cache\n  whisper \"...done\"\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@_cli_pipe = ( cfg, sql_key ) -> new Promise ( resolve ) =>\n  ### TAINT should escape command line strings ###\n  CP            = require 'child_process'\n  sql_path      = cfg.sql[ sql_key ]\n  db_path       = cfg.db.path\n  file_length   = ( FS.statSync sql_path ).size\n  count         = 0\n  pragmas       = 'PRAGMA journal_mode = OFF; PRAGMA synchronous = OFF;'\n  resolve cli_pipe_fn = => new Promise ( resolve ) =>\n    FS.unlinkSync db_path\n    CP.execSync \"( echo '#{pragmas}' ; cat #{sql_path} ) | sqlite3 #{db_path}\"\n    count = file_length\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@cli_pipe_small   = ( cfg ) => @_cli_pipe cfg, 'small'\n@cli_pipe_big     = ( cfg ) => @_cli_pipe cfg, 'big'\n# @cli_pipe_bignp   = ( cfg ) => @_cli_pipe cfg, 'bignp'\n\n#-----------------------------------------------------------------------------------------------------------\n@_bettersqlite3 = ( cfg ) -> new Promise ( resolve ) =>\n  Db            = require 'better-sqlite3'\n  # db_cfg        = { verbose: ( CND.get_logger 'whisper', '^33365^ SQLite3' ), }\n  db_cfg        = null\n  db            = new Db ':memory:', db_cfg\n  data          = @get_data cfg\n  count         = 0\n  sql_path      = cfg.sql[ cfg.use ]\n  debug '^96833^', { sql_path, }\n  #.........................................................................................................\n  # db.unsafeMode true\n  # db.pragma 'cache_size = 32000'\n  db.pragma 'synchronous = OFF' # makes file-based DBs much faster\n  #.........................................................................................................\n  # db.exec \"\"\"drop table if exists test;\"\"\"\n  # db.exec \"\"\"\n  #   create table test(\n  #     id    integer primary key,\n  #     nr    integer not null,\n  #     text  text );\"\"\"\n  # # debug '^22233^', db.exec \"\"\"insert into test ( nr, text ) values ( 1, '2' );\"\"\"\n  # insert        = db.prepare \"\"\"insert into test ( nr, text ) values ( ?, ? );\"\"\"\n  # retrieve      = db.prepare \"\"\"select * from test order by text;\"\"\"\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    db.exec \".read #{sql_path}\"\n    # nr      = 0\n    # for text in data.texts\n    #   nr++\n    #   insert.run [ nr, text, ]\n    # result  = retrieve.all()\n    # count  += result.length\n    # show_result 'bettersqlite3', result if gcfg.verbose\n    # if do_backup\n    #   await db.backup \"/tmp/hengist-in-memory-sql.benchmarks.backup-#{Date.now()}.db\"\n    # db.close()\n    resolve 1 # count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  gcfg.verbose  = true\n  gcfg.verbose  = false\n  bench         = BM.new_benchmarks()\n  cfg           =\n    db:\n      path:   resolve_path 'data/icql/reading-writing-memory-file-db.db'\n    sql:\n      small:  resolve_path 'assets/icql/small-datamill.sql'\n      big:    resolve_path 'assets/icql/Chinook_Sqlite_AutoIncrementPKs.sql'\n      bignp:  resolve_path 'assets/icql/Chinook_Sqlite_AutoIncrementPKs.no-pragmas.sql'\n    # use: 'small'\n    # use: [ 'big', 'small', ]\n    # use: 'bignp'\n  repetitions   = 3\n  test_names    = [\n    'cli_pipe_small'\n    'cli_pipe_big'\n    # 'cli_pipe_bignp'\n    # '_bettersqlite3'\n    ]\n  global.gc() if global.gc?\n  data_cache = null\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      global.gc() if global.gc?\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n"
  ]
}