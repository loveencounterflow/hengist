{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/reading-writing-memory-file-db.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'IN-MEMORY-SQL/READING-WRITING-MEMORY-FILE-DB'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\ngcfg                      = { verbose: false, }\n\n#-----------------------------------------------------------------------------------------------------------\nresolve_path = ( path ) -> PATH.resolve PATH.join __dirname, '../../../', path\n\n#-----------------------------------------------------------------------------------------------------------\ntry_to_remove_file = ( path ) ->\n  try FS.unlinkSync path catch error\n    return if error.code is 'ENOENT'\n    throw error\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nshow_result = ( name, result ) ->\n  info '-----------------------------------------------'\n  urge name\n  whisper result\n  info '-----------------------------------------------'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  whisper \"retrieving test data...\"\n  DATOM = require '../../../apps/datom'\n  #.........................................................................................................\n  texts       = DATA.get_words cfg.word_count\n  #.........................................................................................................\n  data_cache  = { texts, }\n  data_cache  = DATOM.freeze data_cache\n  whisper \"...done\"\n  return data_cache\n\n# #-----------------------------------------------------------------------------------------------------------\n# backup_to_memory = =>\n#   ### TAINT should escape command line strings ###\n#   CP            = require 'child_process'\n#   sql_path      = cfg.readsql[ sql_key ]\n#   db_path       = cfg.db[ sql_key ]\n#   pragmas       = 'PRAGMA journal_mode = OFF; PRAGMA synchronous = OFF;'\n#   resolve readsql_clipipe_fn = => new Promise ( resolve ) =>\n#     try_to_remove_file db_path\n#     CP.execSync \"( echo '#{pragmas}' ; cat #{sql_path} ) | sqlite3 #{db_path}\"\n#     resolve ( FS.statSync sql_path ).size\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_readsql_clipipe = ( cfg, sql_key ) -> new Promise ( resolve ) =>\n  ### TAINT should escape command line strings ###\n  CP            = require 'child_process'\n  sql_path      = cfg.readsql[ sql_key ]\n  db_path       = cfg.db[ sql_key ]\n  pragmas       = 'PRAGMA journal_mode = OFF; PRAGMA synchronous = OFF;'\n  resolve readsql_clipipe_fn = => new Promise ( resolve ) =>\n    try_to_remove_file db_path\n    CP.execSync \"( echo '#{pragmas}' ; cat #{sql_path} ) | sqlite3 #{db_path}\"\n    resolve ( FS.statSync sql_path ).size\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_readsql_bsqlt3 = ( cfg, sql_key, fsmode ) -> new Promise ( resolve ) =>\n  Db            = require 'better-sqlite3'\n  db_cfg        = null\n  db            = new Db ':memory:', db_cfg\n  sql_path      = cfg.readsql[ sql_key ]\n  FSP           = require 'fs/promises'\n  resolve readsql_bsqlt3 = => new Promise ( resolve ) =>\n    db.pragma 'journal_mode = OFF;'\n    db.pragma 'synchronous = OFF;'\n    switch fsmode\n      when 'sync'\n        sql = FS.readFileSync     sql_path, { encoding: 'utf-8', }\n        db.exec sql\n        return resolve sql.length\n      when 'promise'\n        sql = await FSP.readFile  sql_path, { encoding: 'utf-8', }\n        db.exec sql\n        return resolve sql.length\n      when 'callback'\n        FS.readFile sql_path, { encoding: 'utf-8', }, ( error, sql ) =>\n          throw error if error?\n          db.exec sql\n          return resolve sql.length\n        return\n    throw new Error \"^_readsql_bsqlt3@5587^ unknown fsmode #{rpr fsmode}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_writesql_clipipe = ( cfg, sql_key ) -> new Promise ( resolve ) =>\n  ### TAINT should escape command line strings ###\n  CP            = require 'child_process'\n  sql_path      = cfg.writesql[ sql_key ]\n  db_path       = cfg.db[ sql_key ]\n  resolve readsql_clipipe_fn = => new Promise ( resolve ) =>\n    CP.execSync \"sqlite3 #{db_path} -cmd '.dump' > #{sql_path}\"\n    resolve ( FS.statSync sql_path ).size\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@readsql_clipipe_small          = ( cfg ) => @_readsql_clipipe   cfg, 'small'\n@readsql_clipipe_big            = ( cfg ) => @_readsql_clipipe   cfg, 'big'\n@readsql_bsqlt3_small_promise   = ( cfg ) => @_readsql_bsqlt3    cfg, 'small',  'promise'\n@readsql_bsqlt3_big_promise     = ( cfg ) => @_readsql_bsqlt3    cfg, 'big',    'promise'\n@readsql_bsqlt3_small_sync      = ( cfg ) => @_readsql_bsqlt3    cfg, 'small',  'sync'\n@readsql_bsqlt3_big_sync        = ( cfg ) => @_readsql_bsqlt3    cfg, 'big',    'sync'\n@readsql_bsqlt3_small_callback  = ( cfg ) => @_readsql_bsqlt3    cfg, 'small',  'callback'\n@readsql_bsqlt3_big_callback    = ( cfg ) => @_readsql_bsqlt3    cfg, 'big',    'callback'\n@writesql_clipipe_small         = ( cfg ) => @_writesql_clipipe  cfg, 'small'\n@writesql_clipipe_big           = ( cfg ) => @_writesql_clipipe  cfg, 'big'\n\n#-----------------------------------------------------------------------------------------------------------\n@_bettersqlite3 = ( cfg ) -> new Promise ( resolve ) =>\n  Db            = require 'better-sqlite3'\n  # db_cfg        = { verbose: ( CND.get_logger 'whisper', '^33365^ SQLite3' ), }\n  db_cfg        = null\n  db            = new Db ':memory:', db_cfg\n  data          = @get_data cfg\n  count         = 0\n  sql_path      = cfg.sql[ cfg.use ]\n  debug '^96833^', { sql_path, }\n  #.........................................................................................................\n  # db.unsafeMode true\n  # db.pragma 'cache_size = 32000'\n  db.pragma 'synchronous = OFF' # makes file-based DBs much faster\n  #.........................................................................................................\n  # db.exec \"\"\"drop table if exists test;\"\"\"\n  # db.exec \"\"\"\n  #   create table test(\n  #     id    integer primary key,\n  #     nr    integer not null,\n  #     text  text );\"\"\"\n  # # debug '^22233^', db.exec \"\"\"insert into test ( nr, text ) values ( 1, '2' );\"\"\"\n  # insert        = db.prepare \"\"\"insert into test ( nr, text ) values ( ?, ? );\"\"\"\n  # retrieve      = db.prepare \"\"\"select * from test order by text;\"\"\"\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    db.exec \".read #{sql_path}\"\n    # nr      = 0\n    # for text in data.texts\n    #   nr++\n    #   insert.run [ nr, text, ]\n    # result  = retrieve.all()\n    # count  += result.length\n    # show_result 'bettersqlite3', result if gcfg.verbose\n    # if do_backup\n    #   await db.backup \"/tmp/hengist-in-memory-sql.benchmarks.backup-#{Date.now()}.db\"\n    # db.close()\n    resolve 1 # count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  gcfg.verbose  = true\n  gcfg.verbose  = false\n  bench         = BM.new_benchmarks()\n  cfg           =\n    db:\n      small:  resolve_path 'data/icql/small-datamill.db'\n      big:    resolve_path 'data/icql/Chinook_Sqlite_AutoIncrementPKs.db'\n    readsql:\n      small:  resolve_path 'assets/icql/small-datamill.sql'\n      big:    resolve_path 'assets/icql/Chinook_Sqlite_AutoIncrementPKs.sql'\n    writesql:\n      small:  resolve_path 'data/icql/small-datamill.sql'\n      big:    resolve_path 'data/icql/Chinook_Sqlite_AutoIncrementPKs.sql'\n    # use: 'small'\n    # use: [ 'big', 'small', ]\n    # use: 'bignp'\n  repetitions   = 3\n  #.........................................................................................................\n  run_phase = ( test_names ) =>\n    global.gc() if global.gc?\n    data_cache = null\n    for _ in [ 1 .. repetitions ]\n      whisper '-'.repeat 108\n      for test_name in CND.shuffle test_names\n        global.gc() if global.gc?\n        await BM.benchmark bench, cfg, false, @, test_name\n    BM.show_totals bench\n    return null\n  # #.........................................................................................................\n  # test_names    = [\n  #   'readsql_clipipe_small'\n  #   'readsql_clipipe_big'\n  #   ]\n  # await run_phase test_names\n  #.........................................................................................................\n  test_names    = [\n    'readsql_bsqlt3_small_promise'\n    'readsql_bsqlt3_big_promise'\n    'readsql_bsqlt3_small_sync'\n    'readsql_bsqlt3_big_sync'\n    'readsql_bsqlt3_small_callback'\n    'readsql_bsqlt3_big_callback'\n    ]\n  await run_phase test_names\n  # #.........................................................................................................\n  # test_names    = [\n  #   'writesql_clipipe_small'\n  #   'writesql_clipipe_big'\n  #   ]\n  # await run_phase test_names\n  #.........................................................................................................\n  # await run_phase [ 'readsql_bsqlt3_small_promise', ]\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n  xxx = ->\n    Db            = require 'better-sqlite3'\n    db_cfg        = null\n    db            = new Db '/tmp/foo.db', db_cfg\n    db.exec \"drop table if exists x;\"\n    db.exec \"create table x ( n integer );\"\n    for n in [ 1 .. 10 ]\n      db.exec \"insert into x ( n ) values ( #{n} );\"\n    # db.exec \"vacuum into '/tmp/foo2.db';\"\n    db.exec \"vacuum into ':memory:';\"\n    for n in [ 11 .. 20 ]\n      db.exec \"insert into x ( n ) values ( #{n} );\"\n    debug '^333344^', db.memory = true\n    debug '^333344^', db.memory\n    return null\n  return null\n\n\n"
  ]
}