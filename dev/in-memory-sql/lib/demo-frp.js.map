{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-frp.coffee"
  ],
  "names": [],
  "mappings": "AAiBG;EAAA;;;;;;;;;;;;;;;EAEH;AAFG,MAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,UAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,WAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAKH,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAhBzB;;;EAkBH,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,qCAAR;;EAC5B,CAAA,CAAE,EAAF,CAAA,GAA4B,GAA5B;;EACA,UAAA,GAA4B;;EAC5B,IAAA,GAA4B;IAAE,OAAA,EAAS;EAAX,EAvBzB;;;EA0BH,WAAA,GAAc,QAAA,CAAE,IAAF,EAAQ,MAAR,CAAA;IACZ,IAAA,CAAK,iDAAL;IACA,IAAA,CAAK,IAAL;IACA,OAAA,CAAQ,MAAR;IACA,IAAA,CAAK,iDAAL;AACA,WAAO;EALK,EA1BX;;;EAkCH,IAAC,CAAA,QAAD,GAAY,QAAA,CAAE,GAAF,CAAA;AACZ,QAAA,KAAA,EAAA;IAAE,IAAqB,kBAArB;AAAA,aAAO,WAAP;;IACA,OAAA,CAAQ,yBAAR;IACA,KAAA,GAAQ,OAAA,CAAQ,qBAAR,EAFV;;IAIE,KAAA,GAAc,IAAI,CAAC,SAAL,CAAe,GAAG,CAAC,UAAnB,EAJhB;;IAME,UAAA,GAAc,CAAE,KAAF;IACd,UAAA,GAAc,KAAK,CAAC,MAAN,CAAa,UAAb;IACd,OAAA,CAAQ,SAAR;AACA,WAAO;EAVG,EAlCT;;;EA+CH,IAAC,CAAA,QAAD,GAAY,QAAA,CAAE,GAAF,CAAA;WAAW,IAAI,OAAJ,CAAY,CAAE,OAAF,CAAA,GAAA;AACnC,UAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,CAAA,EAAA,QAAA,EAAA,SAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA,QAAA,EAAA;MAAE,GAAA,GAAgB,OAAA,CAAQ,qDAAR;MAChB,EAAA,GAAgB,OAAA,CAAQ,gBAAR,EADlB;;MAGE,MAAA,GAAgB;MAChB,EAAA,GAAgB,IAAI,EAAJ,CAAO,GAAG,CAAC,OAAX,EAAoB,MAApB;MAChB,IAAA,GAAgB,IAAC,CAAA,QAAD,CAAU;QAAE,UAAA,EAAY;MAAd,CAAV,EALlB;;MAOE,SAAA,GAAgB,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,kBAArB,CAAb;MAChB,IAAA,GAAgB,OAAA,CAAQ,oBAAR;MAChB,QAAA,GACE;QAAA,SAAA,EAAc,EAAd;QACA,OAAA,EAAc,UADd;QAEA,SAAA,EAAc;MAFd;MAGF,EAAA,GAAK,IAAI,CAAC,IAAL,CAAU,QAAV,EAbP;;;MAgBE,EAAE,CAAC,iBAAH,CAAA;AACA;MAAA,KAAA,QAAA;QAAA,KAAA,CAAM,QAAN,EAAgB,CAAhB;MAAA;MACA,EAAE,CAAC,WAAH,CAAe;QAAE,EAAA,EAAI,EAAN;QAAU,IAAA,EAAM;MAAhB,CAAf,EAlBF;;;;MAsBE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,MAAR,CAAe,mBAAf,EAtBF;MAuBE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,aAAR,CAAsB,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,aAArB,CAAb,CAAtB,EAvBF;;MAyBE,MAAA,GAAgB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,OAAR,CAAgB,CAAA,8CAAA,CAAhB;MAChB,QAAA,GAAgB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,OAAR,CAAgB,CAAA,iCAAA,CAAhB,EA1BlB;;MA4BE,EAAA,GAAU;AACV;MAAA,KAAA,sCAAA;;QACE,EAAA;QACA,MAAM,CAAC,GAAP,CAAW,CAAE,EAAF,EAAM,IAAN,CAAX;MAFF;MAGA,MAAA,GAAU,QAAQ,CAAC,GAAT,CAAA;MACV,WAAA,CAAY,eAAZ,EAA6B,MAA7B,EAjCF;;;MAoCE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,KAAR,CAAA;AACA,aAAO;IAtC0B,CAAZ;EAAX,EA/CT;;;EAwFH,IAAC,CAAA,oBAAD,GAAwB,CAAE,GAAF,CAAA,GAAA;WAAW,IAAC,CAAA,cAAD,CAAgB,GAAhB,EAAqB,UAArB;EAAX;;EACxB,IAAC,CAAA,oBAAD,GAAwB,CAAE,GAAF,CAAA,GAAA;WAAW,IAAC,CAAA,cAAD,CAAgB,GAAhB,EAAqB,UAArB,EAAiC,IAAjC;EAAX;;EACxB,IAAC,CAAA,kBAAD,GAAwB,CAAE,GAAF,CAAA,GAAA;WAAW,IAAC,CAAA,cAAD,CAAgB,GAAhB,EAAqB,0CAArB;EAAX,EA1FrB;;;EA+FH,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,KAAA,CAAA,CAAA,GAAA;AAClC,UAAA;MAAE,GAAA,GACE;QAAA,OAAA,EAAS;MAAT;aACF,CAAA,MAAM,IAAC,CAAA,QAAD,CAAU,GAAV,CAAN;IAHgC,CAAA,IAAlC;;AA/FG",
  "sourcesContent": [
    "\n\n###\n\n**Note** 'FRP' here is 'Functional *Relational* Programming' whereas it's most often used for 'Functional\n*Reactive* Programming' these days, so maybe better call it **FunRelPro** or something like that.\n\n\n> In FRP all *essential state* takes the form of relations, and the *essential logic* is expressed using\n> relational algebra extended with (pure) user defined functions.—\n\n> https://softwareengineering.stackexchange.com/a/170566/281585\n\n[*A Relational Database Machine Based on Functional Programming Concepts* by Yasushi KIYOKI, Kazuhiko KATO\nand Takashi MASUDA, University of Tsukuba, ca.\n1985—1995](https://thelackthereof.org/docs/library/cs/database/KIYOKI,%20Yasushi%20et%20al:%20A%20Relational%20Database%20Machine%20Based%20on%20Functional%20Programming%20Concepts.pdf)\n\n###\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'FRP'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\n{ jr }                    = CND\ndata_cache                = null\ngcfg                      = { verbose: false, }\n\n#-----------------------------------------------------------------------------------------------------------\nshow_result = ( name, result ) ->\n  info '-----------------------------------------------'\n  urge name\n  whisper result\n  info '-----------------------------------------------'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  whisper \"retrieving test data...\"\n  DATOM = require '../../../apps/datom'\n  #.........................................................................................................\n  texts       = DATA.get_words cfg.word_count\n  #.........................................................................................................\n  data_cache  = { texts, }\n  data_cache  = DATOM.freeze data_cache\n  whisper \"...done\"\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_frp = ( cfg ) -> new Promise ( resolve ) =>\n  RBW           = require '../../../apps/rustybuzz-wasm/demo-nodejs-using-wasm'\n  Db            = require 'better-sqlite3'\n  # db_cfg        = { verbose: ( CND.get_logger 'whisper', '^33365^ SQLite3' ), }\n  db_cfg        = null\n  db            = new Db cfg.db_path, db_cfg\n  data          = @get_data { word_count: 10, }\n  #.........................................................................................................\n  icql_path     = PATH.resolve PATH.join __dirname, '../demo-frp.icql'\n  ICQL          = require '../../../apps/icql'\n  icql_cfg =\n    connector:    Db\n    db_path:      ':memory:'\n    icql_path:    icql_path\n  db = ICQL.bind icql_cfg\n  # debug '^3334^', db.sql\n  # info k, v for k, v of db.sql\n  db.create_table_test()\n  debug '^3334^', d for d from db.sqlite_index_infos()\n  db.insert_text { nr: 42, text: \"a good number\", }\n  #.........................................................................................................\n  # db.unsafeMode true\n  # db.pragma 'cache_size = 32000'\n  db.$.db.pragma 'synchronous = OFF' # makes file-based DBs much faster\n  db.$.db.loadExtension PATH.resolve PATH.join __dirname, '../json1.so'\n  #.........................................................................................................\n  insert        = db.$.db.prepare \"\"\"insert into test ( nr, text ) values ( ?, ? );\"\"\"\n  retrieve      = db.$.db.prepare \"\"\"select * from test order by text;\"\"\"\n  #.........................................................................................................\n  nr      = 0\n  for text in data.texts\n    nr++\n    insert.run [ nr, text, ]\n  result  = retrieve.all()\n  show_result 'bettersqlite3', result\n  # if do_backup\n  #   await db.backup \"/tmp/hengist-in-memory-sql.benchmarks.backup-#{Date.now()}.db\"\n  db.$.db.close()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@bettersqlite3_memory = ( cfg ) => @_bettersqlite3 cfg, ':memory:'\n@bettersqlite3_backup = ( cfg ) => @_bettersqlite3 cfg, ':memory:', true\n@bettersqlite3_file   = ( cfg ) => @_bettersqlite3 cfg, '/tmp/hengist-in-memory-sql.benchmarks.db'\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  cfg =\n    db_path: ':memory:'\n  await @demo_frp cfg\n\n"
  ]
}