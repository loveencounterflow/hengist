{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-frp.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n###\n\n**Note** 'FRP' here is 'Functional *Relational* Programming' whereas it's most often used for 'Functional\n*Reactive* Programming' these days, so maybe better call it **FunRelPro** or something like that.\n\n\n> In FRP all *essential state* takes the form of relations, and the *essential logic* is expressed using\n> relational algebra extended with (pure) user defined functions.—\n\n> https://softwareengineering.stackexchange.com/a/170566/281585\n\n[*A Relational Database Machine Based on Functional Programming Concepts* by Yasushi KIYOKI, Kazuhiko KATO\nand Takashi MASUDA, University of Tsukuba, ca.\n1985—1995](https://thelackthereof.org/docs/library/cs/database/KIYOKI,%20Yasushi%20et%20al:%20A%20Relational%20Database%20Machine%20Based%20on%20Functional%20Programming%20Concepts.pdf)\n\n###\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'FRP'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nRBW                       = require '../../../apps/rustybuzz-wasm/demo-nodejs-using-wasm'\nICQL                      = require '../../../apps/icql'\nconnector                 = require 'better-sqlite3'\nicql_path                 = PATH.resolve PATH.join __dirname, '../demo-frp.icql'\ndb_path                   = ':memory:'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@new_db = ( cfg ) ->\n  db = ICQL.bind { connector, db_path, icql_path, }\n  # db.pragma 'cache_size = 32000'\n  # db.pragma 'synchronous = OFF' # makes file-based DBs much faster\n  return db\n\n#-----------------------------------------------------------------------------------------------------------\n@create_tables = ( cfg ) ->\n  cfg.db.create_table_text()\n\n#-----------------------------------------------------------------------------------------------------------\n@insert_text = ( cfg ) ->\n  linenr = 0\n  for line in cfg.text.split /\\n/\n    linenr++\n    cfg.db.insert_text { linenr, line, }\n  return linenr\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_frp = ( cfg ) ->\n  cfg    ?= {}\n  cfg.db  = @new_db cfg\n  @create_tables  cfg\n  @insert_text    cfg\n  debug '^3334^', d for d from cfg.db.sqlite_index_infos()\n  #.........................................................................................................\n  for row from cfg.db.get_all_texts()\n    info row\n  cfg.db.$.close()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@bettersqlite3_memory = ( cfg ) => @_bettersqlite3 cfg, ':memory:'\n@bettersqlite3_backup = ( cfg ) => @_bettersqlite3 cfg, ':memory:', true\n@bettersqlite3_file   = ( cfg ) => @_bettersqlite3 cfg, '/tmp/hengist-in-memory-sql.benchmarks.db'\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  cfg =\n    db_path:  ':memory:'\n    text:     \"\"\"Knuth–Liang hyphenation operates at the level of individual words, but there can be\n      ambiguity as to what constitutes a word. All hyphenation dictionaries handle the expected set of\n      word-forming graphemes\"\"\"\n\n\n  await @demo_frp cfg\n\n"
  ]
}