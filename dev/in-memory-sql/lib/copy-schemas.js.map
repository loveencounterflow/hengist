{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/copy-schemas.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'IN-MEMORY-SQL'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nFSP                       = require 'fs/promises'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  validate }              = types.export()\n#-----------------------------------------------------------------------------------------------------------\ngcfg                      = { verbose: false, echo: false, }\nLFT                       = require 'letsfreezethat'\n\n#-----------------------------------------------------------------------------------------------------------\nresolve_path = ( path ) -> PATH.resolve PATH.join __dirname, '../../../', path\n\n#-----------------------------------------------------------------------------------------------------------\ntry_to_remove_file = ( path ) ->\n  try FS.unlinkSync path catch error\n    return if error.code is 'ENOENT'\n    throw error\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@is_new = ( x ) ->\n  R = not @is_new.cache.has x\n  @is_new.cache.set x, true\n  return R\n@is_new.cache = new Map()\n\n#-----------------------------------------------------------------------------------------------------------\nshow_result = ( name, result ) ->\n  info '-----------------------------------------------'\n  urge name\n  whisper result\n  info '-----------------------------------------------'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  whisper \"retrieving test data...\"\n  DATOM = require '../../../apps/datom'\n  #.........................................................................................................\n  texts       = DATA.get_words cfg.word_count\n  #.........................................................................................................\n  data_cache  = { texts, }\n  data_cache  = DATOM.freeze data_cache\n  whisper \"...done\"\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@_btsql3 = ( cfg ) -> new Promise ( resolve ) =>\n  # data          = @get_data cfg\n  _icql             = ( LFT._deep_copy require '../../../apps/icql' )._local_methods\n  Db                = require 'better-sqlite3'\n  defaults          = { pragmas: [], size: 'small', }\n  cfg               = { defaults..., cfg..., }\n  db_work_path      = cfg.db.work[ cfg.mode ].replaceAll '${0}', cfg.ref\n  validate.nonempty_text cfg.ref\n  db_template_path  = cfg.db.templates[ cfg.size ].replaceAll '${0}', cfg.ref\n  db_target_path    = cfg.db.target[      cfg.size ].replaceAll '${0}', cfg.ref\n  validate.nonempty_text db_template_path\n  validate.nonempty_text db_target_path\n  db_cfg            = null\n  # db_size           = ( FS.statSync db_template_path ).size\n  count             = 0\n  data              = @get_data cfg\n  if gcfg.verbose\n    help \"^44433^ template  DB:\", db_template_path\n    help \"^44433^ work      DB:\", db_work_path\n    help \"^44433^ target    DB:\", db_target_path\n  try_to_remove_file db_target_path\n  try_to_remove_file db_work_path unless db_work_path is ':memory:'\n  await FSP.copyFile db_template_path, db_target_path\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) => # ^777854^\n    #=======================================================================================================\n    db              = new Db db_target_path, db_cfg\n    _icql.settings  = { echo: gcfg.echo ? false, verbose: gcfg.verbose ? false, }\n    _icql.db        = db\n    _icql.pragma 'synchronous = OFF' # makes file-based DBs much faster\n    fle_schema      = 'main'\n    work_schema     = 'x'\n    work_schema_x   = _icql.as_identifier 'x'\n    _icql.attach db_work_path, work_schema\n    _icql.copy_schema fle_schema, work_schema\n    #-------------------------------------------------------------------------------------------------------\n    db.exec \"\"\"drop table if exists #{work_schema_x}.test;\"\"\"\n    db.exec \"\"\"\n      create table #{work_schema_x}.test(\n        id    integer primary key,\n        nr    integer not null,\n        text  text );\"\"\"\n    insert  = db.prepare \"\"\"insert into #{work_schema_x}.test ( nr, text ) values ( ?, ? );\"\"\"\n    nr      = 0\n    for text in data.texts\n      nr++\n      insert.run [ nr, text, ]\n    retrieve  = db.prepare \"\"\"select * from #{work_schema_x}.test order by text;\"\"\"\n    result    = retrieve.all()\n    count     = result.length\n    #-------------------------------------------------------------------------------------------------------\n    _icql.close()\n    return resolve count\n    # resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@btsql3_mem_small          = ( cfg ) => @_btsql3 { cfg..., ref: 'small', mode: 'mem', size: 'small', }\n@btsql3_mem_big            = ( cfg ) => @_btsql3 { cfg..., ref: 'big',   mode: 'mem', size: 'big',   }\n@btsql3_fle_small          = ( cfg ) => @_btsql3 { cfg..., ref: 'small', mode: 'fle', size: 'small', }\n@btsql3_fle_big            = ( cfg ) => @_btsql3 { cfg..., ref: 'big',   mode: 'fle', size: 'big',   }\n# @btsql3_mem_thrds    = ( cfg ) => @_btsql3 { cfg..., db_path: ':memory:', pragmas: [ 'threads = 4;', ] }\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  gcfg.verbose  = true\n  gcfg.verbose  = false\n  bench         = BM.new_benchmarks()\n  cfg           =\n    word_count: 1000\n    db:\n      templates:\n        small:  resolve_path 'assets/icql/small-datamill.db'\n        big:    resolve_path 'assets/icql/Chinook_Sqlite_AutoIncrementPKs.db'\n      target:\n        small:  resolve_path 'data/icql/copy-schemas-benchmarks-${0}.db'\n        big:    resolve_path 'data/icql/copy-schemas-benchmarks-${0}.db'\n      work:\n        mem:    ':memory:'\n        fle:    'data/icql/copy-schemas-work-${0}.db'\n  repetitions   = 3\n  test_names    = [\n    'btsql3_mem_big'\n    'btsql3_mem_small'\n    'btsql3_fle_big'\n    'btsql3_fle_small'\n    ]\n  global.gc() if global.gc?\n  data_cache = null\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      global.gc() if global.gc?\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n"
  ]
}