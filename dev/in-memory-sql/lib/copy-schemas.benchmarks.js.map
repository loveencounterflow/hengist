{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/copy-schemas.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'IN-MEMORY-SQL'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nFSP                       = require 'fs/promises'\nDATA                      = require '../../../lib/data-providers-nocache'\n# test                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  validate\n  validate_list_of }      = types.export()\n#-----------------------------------------------------------------------------------------------------------\ngcfg                      = { verbose: false, echo: false, }\nLFT                       = require 'letsfreezethat'\n\n\n#-----------------------------------------------------------------------------------------------------------\nresolve_path = ( path ) -> PATH.resolve PATH.join __dirname, '../../../', path\n\n#-----------------------------------------------------------------------------------------------------------\ntry_to_remove_file = ( path ) ->\n  try FS.unlinkSync path catch error\n    return if error.code is 'ENOENT'\n    throw error\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@is_new = ( x ) ->\n  R = not @is_new.cache.has x\n  @is_new.cache.set x, true\n  return R\n@is_new.cache = new Map()\n\n#-----------------------------------------------------------------------------------------------------------\nshow_result = ( name, result ) ->\n  info '-----------------------------------------------'\n  urge name\n  whisper result\n  info '-----------------------------------------------'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  whisper \"retrieving test data...\"\n  DATOM = require '../../../apps/datom'\n  #.........................................................................................................\n  texts       = DATA.get_words cfg.word_count\n  #.........................................................................................................\n  data_cache  = { texts, }\n  data_cache  = DATOM.freeze data_cache\n  whisper \"...done\"\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@_btsql3 = ( cfg ) -> new Promise ( resolve ) =>\n  # data          = @get_data cfg\n  _icql             = ( LFT._deep_copy require '../../../apps/icql' )._local_methods\n  Db                = require 'better-sqlite3'\n  defaults          = { pragmas: [], size: 'small', save: null, }\n  cfg               = { defaults..., cfg..., }\n  #.........................................................................................................\n  ### TAINT use proper string interpolation ###\n  validate.nonempty_text cfg.ref\n  db_work_path      = cfg.db.work[      cfg.mode ].replaceAll '{ref}',  cfg.ref\n  db_template_path  = cfg.db.templates[ cfg.size ].replaceAll '{ref}',  cfg.ref\n  db_target_path    = cfg.db.target[    cfg.size ].replaceAll '{ref}',  cfg.ref\n  db_temp_path      = cfg.db.temp[      cfg.size ].replaceAll '{ref}',  cfg.ref\n  #.........................................................................................................\n  validate.nonempty_text db_template_path\n  validate.nonempty_text db_target_path\n  validate.nonempty_text db_temp_path\n  #.........................................................................................................\n  pragmas           = cfg.pragma_sets[ cfg.pragmas ]\n  validate_list_of.nonempty_text pragmas\n  #.........................................................................................................\n  db_cfg            = null\n  # db_size           = ( FS.statSync db_template_path ).size\n  count             = 0\n  data              = @get_data cfg\n  if gcfg.verbose\n    help \"^44433^ template  DB:\", db_template_path\n    help \"^44433^ work      DB:\", db_work_path\n    help \"^44433^ target    DB:\", db_target_path\n    help \"^44433^ temp      DB:\", db_temp_path\n  try_to_remove_file db_target_path\n  try_to_remove_file db_temp_path\n  try_to_remove_file db_work_path unless db_work_path is ':memory:'\n  await FSP.copyFile db_template_path, db_target_path\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) => # ^777854^\n    #=======================================================================================================\n    db              = new Db db_target_path, db_cfg\n    _icql.settings  = { echo: gcfg.echo ? false, verbose: gcfg.verbose ? false, }\n    _icql.db        = db\n    _icql.pragma pragma for pragma in cfg.pragmas\n    fle_schema      = 'main'\n    switch cfg.mode\n      when 'mem'\n        work_schema     = 'x'\n        _icql.attach db_work_path, work_schema\n        _icql.copy_schema fle_schema, work_schema\n      when 'fle'\n        work_schema     = 'main'\n      else throw new Error \"^44788^ unknown value for `cfg.mode`: #{rpr cfg.mode}\"\n    #-------------------------------------------------------------------------------------------------------\n    work_schema_x = _icql.as_identifier work_schema\n    db.exec \"\"\"drop table if exists #{work_schema_x}.test;\"\"\"\n    db.exec \"\"\"\n      create table #{work_schema_x}.test(\n        id    integer primary key,\n        nr    integer not null,\n        text  text );\"\"\"\n    insert  = db.prepare \"\"\"insert into #{work_schema_x}.test ( nr, text ) values ( ?, ? );\"\"\"\n    nr      = 0\n    for text in data.texts\n      nr++\n      insert.run [ nr, text, ]\n    retrieve  = db.prepare \"\"\"select * from #{work_schema_x}.test order by text;\"\"\"\n    result    = retrieve.all()\n    count     = result.length\n    #-------------------------------------------------------------------------------------------------------\n    if cfg.mode is 'mem'\n      ### TAINT must unlink original DB file, replace with temp file ###\n      switch cfg.save\n        when 'copy'\n          temp_schema = 't'\n          # temp_schema_x   = _icql.as_identifier 'x'\n          _icql.attach db_temp_path, temp_schema\n          _icql.copy_schema fle_schema, temp_schema\n        when 'backup'\n          throw new Error \"^844483^ save method 'backup' deprecated\"\n          await _icql.backup db_temp_path\n        when 'vacuum'\n          _icql.execute \"vacuum #{work_schema_x} into #{_icql.as_sql db_temp_path};\"\n        else throw new Error \"^44747^ unknown value for `cfg.save`: #{rpr cfg.save}\"\n    #-------------------------------------------------------------------------------------------------------\n    _icql.close()\n    return resolve count\n    # resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@btsql3_mem_small_backup   = ( cfg ) => @_btsql3 { cfg..., ref: 'mem_small_backup', mode: 'mem', size: 'small', pragmas: 'mem', save: 'backup', }\n@btsql3_mem_big_backup     = ( cfg ) => @_btsql3 { cfg..., ref: 'mem_big_backup',   mode: 'mem', size: 'big',   pragmas: 'mem', save: 'backup', }\n@btsql3_mem_small_vacuum   = ( cfg ) => @_btsql3 { cfg..., ref: 'mem_small_vacuum', mode: 'mem', size: 'small', pragmas: 'mem', save: 'vacuum', }\n@btsql3_mem_big_vacuum     = ( cfg ) => @_btsql3 { cfg..., ref: 'mem_big_vacuum',   mode: 'mem', size: 'big',   pragmas: 'mem', save: 'vacuum', }\n@btsql3_mem_small_copy     = ( cfg ) => @_btsql3 { cfg..., ref: 'mem_small_copy',   mode: 'mem', size: 'small', pragmas: 'mem', save: 'copy', }\n@btsql3_mem_big_copy       = ( cfg ) => @_btsql3 { cfg..., ref: 'mem_big_copy',     mode: 'mem', size: 'big',   pragmas: 'mem', save: 'copy', }\n@btsql3_fle_small          = ( cfg ) => @_btsql3 { cfg..., ref: 'fle_small',        mode: 'fle', size: 'small', pragmas: 'fle', }\n@btsql3_fle_big            = ( cfg ) => @_btsql3 { cfg..., ref: 'fle_big',          mode: 'fle', size: 'big',   pragmas: 'fle', }\n@btsql3_fle_small_bare     = ( cfg ) => @_btsql3 { cfg..., ref: 'fle_small_bare',   mode: 'fle', size: 'small', pragmas: 'bare', }\n@btsql3_fle_big_bare       = ( cfg ) => @_btsql3 { cfg..., ref: 'fle_big_bare',     mode: 'fle', size: 'big',   pragmas: 'bare', }\n# @btsql3_mem_thrds    = ( cfg ) => @_btsql3 { cfg..., db_path: ':memory:', pragmas: [ 'threads = 4;', ] }\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  gcfg.verbose  = true\n  gcfg.verbose  = false\n  gcfg.echo     = true\n  gcfg.echo     = false\n  bench         = BM.new_benchmarks()\n  #.........................................................................................................\n  cfg           =\n    # word_count: 10_000\n    word_count: 10\n    db:\n      templates:\n        small:  resolve_path 'assets/icql/small-datamill.db'\n        big:    resolve_path 'assets/icql/Chinook_Sqlite_AutoIncrementPKs.db'\n      target:\n        small:  resolve_path 'data/icql/copy-schemas-benchmarks-{ref}.db'\n        big:    resolve_path 'data/icql/copy-schemas-benchmarks-{ref}.db'\n      work:\n        mem:    ':memory:'\n        fle:    'data/icql/copy-schemas-work-{ref}.db'\n      temp:\n        small:  resolve_path 'data/icql/copy-schemas-benchmarks-temp-{ref}.db'\n        big:    resolve_path 'data/icql/copy-schemas-benchmarks-temp-{ref}.db'\n    pragma_sets:\n      #.....................................................................................................\n      ### thx to https://forum.qt.io/topic/8879/solved-saving-and-restoring-an-in-memory-sqlite-database/2 ###\n      fle: [\n        'page_size = 4096'\n        'cache_size = 16384'\n        'temp_store = MEMORY'\n        'journal_mode = WAL'\n        'locking_mode = EXCLUSIVE'\n        'synchronous = OFF' ]\n      #.....................................................................................................\n      mem: []\n      bare: []\n  #.........................................................................................................\n  repetitions   = 3\n  test_names    = [\n    # 'btsql3_mem_small_backup'\n    # 'btsql3_mem_big_backup'\n    'btsql3_mem_small_vacuum'\n    'btsql3_mem_big_vacuum'\n    'btsql3_fle_small'\n    'btsql3_fle_big'\n    # 'btsql3_mem_small_copy'\n    # 'btsql3_mem_big_copy'\n    'btsql3_fle_small_bare'\n    'btsql3_fle_big_bare'\n    ]\n  global.gc() if global.gc?\n  data_cache = null\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      global.gc() if global.gc?\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n  warn \"^3442342^ add benchmarks to test clearing and copying back of data?\"\n\n###\n\n ~/jzr/hengist  master !3  nodexh ~/jzr/hengist/dev/in-memory-sql/lib/copy-schemas.js                                                            ✔\n00:00 IN-MEMORY-SQL  ▶  ------------------------------------------------------------------------------------------------------------\n00:01 IN-MEMORY-SQL  ▶  retrieving test data...\n00:01 IN-MEMORY-SQL  ▶  ...done\nbtsql3_fle_big                             0.640 s          10,000 items          15,622⏶Hz          64,012⏷nspc\nbtsql3_fle_small                           0.643 s          10,000 items          15,551⏶Hz          64,303⏷nspc\nbtsql3_mem_small_backup                    0.386 s          10,000 items          25,934⏶Hz          38,560⏷nspc\nbtsql3_mem_big_backup                      0.420 s          10,000 items          23,796⏶Hz          42,024⏷nspc\n00:03 IN-MEMORY-SQL  ▶  ------------------------------------------------------------------------------------------------------------\nbtsql3_fle_small                           0.649 s          10,000 items          15,417⏶Hz          64,865⏷nspc\nbtsql3_mem_big_backup                      0.422 s          10,000 items          23,672⏶Hz          42,245⏷nspc\nbtsql3_fle_big                             0.630 s          10,000 items          15,884⏶Hz          62,955⏷nspc\nbtsql3_mem_small_backup                    0.364 s          10,000 items          27,478⏶Hz          36,393⏷nspc\n00:05 IN-MEMORY-SQL  ▶  ------------------------------------------------------------------------------------------------------------\nbtsql3_mem_big_backup                      0.425 s          10,000 items          23,509⏶Hz          42,536⏷nspc\nbtsql3_fle_big                             0.630 s          10,000 items          15,870⏶Hz          63,012⏷nspc\nbtsql3_mem_small_backup                    0.371 s          10,000 items          26,937⏶Hz          37,124⏷nspc\nbtsql3_fle_small                           0.635 s          10,000 items          15,742⏶Hz          63,525⏷nspc\n00:07 HENGIST/BENCHMARKS  ▶  btsql3_mem_small_backup                           26,783 Hz ≙ 1 ÷ 1.0       100.0 % │████████████▌│\n00:07 HENGIST/BENCHMARKS  ▶  btsql3_mem_big_backup                             23,659 Hz ≙ 1 ÷ 1.1        88.3 % │███████████  │\n00:07 HENGIST/BENCHMARKS  ▶  btsql3_fle_big                                    15,792 Hz ≙ 1 ÷ 1.7        59.0 % │███████▍     │\n00:07 HENGIST/BENCHMARKS  ▶  btsql3_fle_small                                  15,570 Hz ≙ 1 ÷ 1.7        58.1 % │███████▎     │\n\n ~/jzr/hengist  master !3  nodexh ~/jzr/hengist/dev/in-memory-sql/lib/copy-schemas.js                                                       ✔  8s\n00:00 IN-MEMORY-SQL  ▶  ------------------------------------------------------------------------------------------------------------\n00:01 IN-MEMORY-SQL  ▶  retrieving test data...\n00:01 IN-MEMORY-SQL  ▶  ...done\nbtsql3_mem_big_backup                      3.453 s         100,000 items          28,961⏶Hz          34,529⏷nspc\nbtsql3_fle_big                             5.991 s         100,000 items          16,692⏶Hz          59,909⏷nspc\nbtsql3_mem_small_backup                    3.410 s         100,000 items          29,328⏶Hz          34,097⏷nspc\nbtsql3_fle_small                           5.904 s         100,000 items          16,937⏶Hz          59,043⏷nspc\n00:20 IN-MEMORY-SQL  ▶  ------------------------------------------------------------------------------------------------------------\nbtsql3_fle_big                             5.914 s         100,000 items          16,908⏶Hz          59,142⏷nspc\nbtsql3_fle_small                           5.927 s         100,000 items          16,872⏶Hz          59,271⏷nspc\nbtsql3_mem_big_backup                      3.495 s         100,000 items          28,611⏶Hz          34,952⏷nspc\nbtsql3_mem_small_backup                    3.406 s         100,000 items          29,363⏶Hz          34,056⏷nspc\n00:39 IN-MEMORY-SQL  ▶  ------------------------------------------------------------------------------------------------------------\nbtsql3_mem_big_backup                      3.482 s         100,000 items          28,717⏶Hz          34,823⏷nspc\nbtsql3_fle_big                             5.905 s         100,000 items          16,935⏶Hz          59,050⏷nspc\nbtsql3_mem_small_backup                    3.421 s         100,000 items          29,234⏶Hz          34,207⏷nspc\nbtsql3_fle_small                           5.921 s         100,000 items          16,889⏶Hz          59,211⏷nspc\n00:58 HENGIST/BENCHMARKS  ▶  btsql3_mem_small_backup                           29,309 Hz ≙ 1 ÷ 1.0       100.0 % │████████████▌│\n00:58 HENGIST/BENCHMARKS  ▶  btsql3_mem_big_backup                             28,763 Hz ≙ 1 ÷ 1.0        98.1 % │████████████▎│\n00:58 HENGIST/BENCHMARKS  ▶  btsql3_fle_small                                  16,899 Hz ≙ 1 ÷ 1.7        57.7 % │███████▎     │\n00:58 HENGIST/BENCHMARKS  ▶  btsql3_fle_big                                    16,845 Hz ≙ 1 ÷ 1.7        57.5 % │███████▏     │\n\n###"
  ]
}