{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/basic.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n{ to_width }              = require 'to-width'\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: open()\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  DBA               = L = require '../../../apps/icql-dba'\n  #.........................................................................................................\n  class DBAX extends DBA.Dba\n  #.........................................................................................................\n  cfg               = H.get_cfg()\n  cfg.ref           = 'multicon'\n  #.........................................................................................................\n  cfg.size          = 'small'\n  cfg.mode          = 'fle'\n  template_path_1   = H.interpolate cfg.db.templates[ cfg.size ], cfg\n  work_path_1       = H.interpolate cfg.db.work[      cfg.mode ], cfg\n  help \"^77-300^ work_path_1:  \", work_path_1\n  #.........................................................................................................\n  cfg.size          = 'big'\n  cfg.mode          = 'fle'\n  template_path_2   = H.interpolate cfg.db.templates[ cfg.size ], cfg\n  work_path_2       = H.interpolate cfg.db.work[      cfg.mode ], cfg\n  help \"^77-300^ work_path_2:  \", work_path_2\n  #.........................................................................................................\n  cfg.size          = 'new'\n  cfg.mode          = 'fle'\n  work_path_3       = H.interpolate cfg.db.work[      cfg.mode ], cfg\n  help \"^77-300^ work_path_3:  \", work_path_3\n  #.........................................................................................................\n  await do =>\n    path    = work_path_1\n    schema  = null\n    await H.copy_over template_path_1, path\n    dba     = DBAX.open { path, schema, }\n    T.eq dba.get_schemas(), { main: path, }\n    T.eq dba.is_empty(), false\n    T.eq ( d.name for d from dba.walk_objects { schema, } ), [ 'sqlite_autoindex_keys_1', 'sqlite_autoindex_realms_1', 'sqlite_autoindex_sources_1', 'keys', 'main', 'realms', 'sources', 'dest_changes_backward', 'dest_changes_forward' ]\n  #.........................................................................................................\n  await do =>\n    path    = work_path_1\n    schema  = 'foo'\n    await H.copy_over template_path_1, path\n    dba     = DBAX.open { path, schema, }\n    help '^298789^', dba.get_schemas()\n    T.eq dba.get_schemas(), { main: '', [schema]: path, }\n    T.eq dba.is_empty { schema: 'main', }, true\n    T.eq dba.is_empty { schema, }, false\n    T.eq ( d.name for d from dba.walk_objects { schema, } ), [ 'sqlite_autoindex_keys_1', 'sqlite_autoindex_realms_1', 'sqlite_autoindex_sources_1', 'keys', 'main', 'realms', 'sources', 'dest_changes_backward', 'dest_changes_forward' ]\n  #.........................................................................................................\n  await do =>\n    schema_1  = 'datamill'\n    schema_2  = 'chinook'\n    await H.copy_over template_path_1, work_path_1\n    await H.copy_over template_path_2, work_path_2\n    dba       = DBAX.open { path: work_path_1, schema: schema_1, }\n    debug '^567^', dba\n    debug '^567^', ( k for k of dba )\n    debug '^567^', dba.open { path: work_path_2, schema: schema_2, }\n    help '^58733^', dba.get_schemas()\n    # T.eq dba.get_schemas(), { main: '', [schema]: path, }\n    T.eq dba.is_empty { schema: 'main', }, true\n    T.eq dba.is_empty { schema: schema_1, }, false\n    T.eq dba.is_empty { schema: schema_2, }, false\n    T.eq ( d.name for d from dba.walk_objects { schema: schema_1, } ), [ 'sqlite_autoindex_keys_1', 'sqlite_autoindex_realms_1', 'sqlite_autoindex_sources_1', 'keys', 'main', 'realms', 'sources', 'dest_changes_backward', 'dest_changes_forward' ]\n  #.........................................................................................................\n  await do =>\n    ### use `Dba.open()` without arguments, get empty RAM DB in schema `main` ###\n    schema_1  = 'datamill'\n    schema_2  = 'chinook'\n    schema_3  = 'new'\n    await H.copy_over template_path_1, work_path_1\n    await H.copy_over template_path_2, work_path_2\n    await H.try_to_remove_file work_path_3\n    dba       = DBAX.open()\n    dba.open { path: work_path_1, schema: schema_1, }\n    dba.open { path: work_path_2, schema: schema_2, }\n    dba.open { path: work_path_3, schema: schema_3, }\n    help '^58733^', dba.get_schemas()\n    # T.eq dba.get_schemas(), { main: '', [schema]: path, }\n    T.eq dba.is_empty { schema: 'main', }, true\n    T.eq dba.is_empty { schema: schema_1, }, false\n    T.eq dba.is_empty { schema: schema_2, }, false\n    T.eq ( d.name for d from dba.walk_objects { schema: schema_1, } ), [ 'sqlite_autoindex_keys_1', 'sqlite_autoindex_realms_1', 'sqlite_autoindex_sources_1', 'keys', 'main', 'realms', 'sources', 'dest_changes_backward', 'dest_changes_forward' ]\n    dba.execute \"create table new.t ( id integer );\"\n    dba.execute \"insert into new.t values ( #{n} );\" for n in [ 1 .. 9 ]\n    T.eq ( dba.list dba.first_values dba.query \"select * from new.t;\" ), [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n  #.........................................................................................................\n  await do =>\n    ### test whether data from previous test was persisted ###\n    schema_3  = 'new'\n    dba       = DBAX.open()\n    dba.open { path: work_path_3, schema: schema_3, }\n    T.eq ( dba.list dba.first_values dba.query \"select * from new.t;\" ), [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n  #.........................................................................................................\n  done()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: _walk_all_objects()\" ] = ( T, done ) ->\n  T.halt_on_error()\n  { Dba, }          = require '../../../apps/icql-dba'\n  #.........................................................................................................\n  cfg               = H.get_cfg()\n  cfg.ref           = 'icqldba_schema'\n  #.........................................................................................................\n  cfg.size          = 'small'\n  cfg.mode          = 'fle'\n  template_path_1   = H.interpolate cfg.db.templates[ cfg.size ], cfg\n  work_path_1       = H.interpolate cfg.db.work[      cfg.mode ], cfg\n  help \"^77-300^ work_path_1:  \", work_path_1\n  #.........................................................................................................\n  cfg.size          = 'big'\n  cfg.mode          = 'fle'\n  template_path_2   = H.interpolate cfg.db.templates[ cfg.size ], cfg\n  work_path_2       = H.interpolate cfg.db.work[      cfg.mode ], cfg\n  help \"^77-300^ work_path_2:  \", work_path_2\n  #.........................................................................................................\n  await do =>\n    await H.copy_over template_path_1, work_path_1\n    await H.copy_over template_path_2, work_path_2\n    dba     = Dba.open { path: work_path_1, schema: 'd1', }\n    dba.open { path: work_path_2, schema: 'd2', }\n    debug '^44433^', dba.get_schemas()\n    result = []\n    for row from dba.walk_objects()\n      row.sql = to_width row.sql, 20\n      info '^44433^', row\n      delete row.sql\n      result.push row\n    debug '^33443^', result\n    T.eq result, [\n      { seq: 2, schema: 'd1', name: 'sqlite_autoindex_keys_1', type: 'index' },\n      { seq: 2, schema: 'd1', name: 'sqlite_autoindex_realms_1', type: 'index' },\n      { seq: 2, schema: 'd1', name: 'sqlite_autoindex_sources_1', type: 'index' },\n      { seq: 2, schema: 'd1', name: 'keys', type: 'table' },\n      { seq: 2, schema: 'd1', name: 'main', type: 'table' },\n      { seq: 2, schema: 'd1', name: 'realms', type: 'table' },\n      { seq: 2, schema: 'd1', name: 'sources', type: 'table' },\n      { seq: 2, schema: 'd1', name: 'dest_changes_backward', type: 'view' },\n      { seq: 2, schema: 'd1', name: 'dest_changes_forward', type: 'view' },\n      { seq: 3, schema: 'd2', name: 'IFK_AlbumArtistId', type: 'index' },\n      { seq: 3, schema: 'd2', name: 'IFK_CustomerSupportRepId', type: 'index' },\n      { seq: 3, schema: 'd2', name: 'IFK_EmployeeReportsTo', type: 'index' },\n      { seq: 3, schema: 'd2', name: 'IFK_InvoiceCustomerId', type: 'index' },\n      { seq: 3, schema: 'd2', name: 'IFK_InvoiceLineInvoiceId', type: 'index' },\n      { seq: 3, schema: 'd2', name: 'IFK_InvoiceLineTrackId', type: 'index' },\n      { seq: 3, schema: 'd2', name: 'IFK_PlaylistTrackTrackId', type: 'index' },\n      { seq: 3, schema: 'd2', name: 'IFK_TrackAlbumId', type: 'index' },\n      { seq: 3, schema: 'd2', name: 'IFK_TrackGenreId', type: 'index' },\n      { seq: 3, schema: 'd2', name: 'IFK_TrackMediaTypeId', type: 'index' },\n      { seq: 3, schema: 'd2', name: 'sqlite_autoindex_PlaylistTrack_1', type: 'index' },\n      { seq: 3, schema: 'd2', name: 'Album', type: 'table' },\n      { seq: 3, schema: 'd2', name: 'Artist', type: 'table' },\n      { seq: 3, schema: 'd2', name: 'Customer', type: 'table' },\n      { seq: 3, schema: 'd2', name: 'Employee', type: 'table' },\n      { seq: 3, schema: 'd2', name: 'Genre', type: 'table' },\n      { seq: 3, schema: 'd2', name: 'Invoice', type: 'table' },\n      { seq: 3, schema: 'd2', name: 'InvoiceLine', type: 'table' },\n      { seq: 3, schema: 'd2', name: 'MediaType', type: 'table' },\n      { seq: 3, schema: 'd2', name: 'Playlist', type: 'table' },\n      { seq: 3, schema: 'd2', name: 'PlaylistTrack', type: 'table' },\n      { seq: 3, schema: 'd2', name: 'Track', type: 'table' },\n      { seq: 3, schema: 'd2', name: 'sqlite_sequence', type: 'table' } ]\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: as_sql\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA           = require '../../../apps/icql-dba'\n  dba               = new ICQLDBA.Dba()\n  probes_and_matchers = [\n    [true,'1',]\n    [false,'0',]\n    [42,'42',]\n    ['text',\"'text'\",]\n    [\"text with 'quotes'\",\"'text with ''quotes'''\",]\n    [[1,2,3],\"'[1,2,3]'\",]\n    [[],\"'[]'\",]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      resolve dba.as_sql probe\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: interpolate\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA           = require '../../../apps/icql-dba'\n  dba               = new ICQLDBA.Dba()\n  probes_and_matchers = [\n    [[\"foo, $bar, baz\",{bar:42,}],\"foo, 42, baz\"]\n    [[\"select * from t where d = $d;\",{bar:42,}],null,\"unable to express 'undefined' as SQL literal\"]\n    [[\"select * from t where d = $d;\",{d:true,}],\"select * from t where d = 1;\"]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ sql, Q, ] = probe\n      resolve dba.interpolate sql, Q\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: toposort is removed\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA           = require '../../../apps/icql-dba'\n  dba               = new ICQLDBA.Dba()\n  T.eq dba.get_toposort, undefined\n  ### removed b/c stops working when tables refer to each other cyclical fashion:\n  dba.execute \"create table main.k1 ( id integer primary key, fk_k2 integer references k2 ( id ) );\"\n  dba.execute \"create table main.k2 ( id integer primary key, fk_k1 integer references k1 ( id ) );\"\n  debug '^568^', dba.get_toposort()\n  # => \"Error: detected cycle involving node 'K1'\"\n  ###\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: clear()\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA           = require '../../../apps/icql-dba'\n  dba               = new ICQLDBA.Dba()\n  #.........................................................................................................\n  # Create tables, indexes:\n  dba.execute \"create table main.k1 ( id integer primary key, fk_k2 integer unique references k2 ( id ) );\"\n  dba.execute \"create table main.k2 ( id integer primary key, fk_k1 integer unique references k1 ( id ) );\"\n  #.........................................................................................................\n  for d from dba.walk_objects()\n    info \"^557-300^\", { type: d.type, name: d.name, }\n  #.........................................................................................................\n  # Insert rows:\n  T.eq dba.get_foreign_key_state(), true\n  dba.set_foreign_key_state off\n  T.eq dba.get_foreign_key_state(), false\n  for id in [ 1 .. 9 ]\n    dba.execute \"insert into main.k1 values ( #{id}, #{id} );\"\n    dba.execute \"insert into main.k2 values ( #{id}, #{id} );\"\n  dba.set_foreign_key_state on\n  T.eq dba.get_foreign_key_state(), true\n  #.........................................................................................................\n  debug '^544734^', ( d.name for d from dba.walk_objects() )\n  T.eq ( d.name for d from dba.walk_objects() ), [ 'sqlite_autoindex_k1_1', 'sqlite_autoindex_k2_1', 'k1', 'k2' ]\n  T.eq ( dba.list dba.query \"select * from k1 join k2 on ( k1.fk_k2 = k2.id );\" ), [\n    { id: 1, fk_k2: 1, fk_k1: 1 },\n    { id: 2, fk_k2: 2, fk_k1: 2 },\n    { id: 3, fk_k2: 3, fk_k1: 3 },\n    { id: 4, fk_k2: 4, fk_k1: 4 },\n    { id: 5, fk_k2: 5, fk_k1: 5 },\n    { id: 6, fk_k2: 6, fk_k1: 6 },\n    { id: 7, fk_k2: 7, fk_k1: 7 },\n    { id: 8, fk_k2: 8, fk_k1: 8 },\n    { id: 9, fk_k2: 9, fk_k1: 9 } ]\n  #.........................................................................................................\n  dba.clear()\n  T.eq ( d.name for d from dba.walk_objects() ), []\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: open from DB file\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA               = require '../../../apps/icql-dba'\n  cfg                   = H.get_cfg()\n  cfg.size              = 'small'\n  cfg.mode              = 'fle'\n  cfg.ref               = 'dba-open-from-file'\n  cfg.pragmas           = 'fle'\n  cfg.db_template_path  = H.interpolate cfg.db.templates[  cfg.size ], cfg\n  cfg.db_work_path      = H.interpolate cfg.db.work[       cfg.mode ], cfg\n  path                  = cfg.db_work_path\n  help \"^77-300^ cfg.db_template_path:  \", cfg.db_template_path\n  help \"^77-300^ cfg.db_work_path:      \", cfg.db_work_path\n  await H.copy_over cfg.db_template_path, cfg.db_work_path\n  dba                   = new ICQLDBA.Dba { path, }\n  #.........................................................................................................\n  T.eq ( type_of ( s = dba.walk_objects() ) ), 'statementiterator'\n  ignore            = [ s..., ]\n  objects           = ( \"#{d.type}:#{d.name}\" for d from dba.walk_objects { schema: 'main', } )\n  T.eq objects, [\n    'index:sqlite_autoindex_keys_1',\n    'index:sqlite_autoindex_realms_1',\n    'index:sqlite_autoindex_sources_1',\n    'table:keys',\n    'table:main',\n    'table:realms',\n    'table:sources',\n    'view:dest_changes_backward',\n    'view:dest_changes_forward' ]\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_DBA: copy file DB to memory\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA               = require '../../../apps/icql-dba'\n  cfg                   = H.get_cfg()\n  cfg.size              = 'small'\n  cfg.mode              = 'fle'\n  cfg.ref               = 'dba-open-from-file'\n  cfg.pragmas           = 'fle'\n  cfg.db_template_path  = H.interpolate cfg.db.templates[  cfg.size ], cfg\n  cfg.db_work_path      = H.interpolate cfg.db.work[       cfg.mode ], cfg\n  path                  = cfg.db_work_path\n  await H.copy_over cfg.db_template_path, cfg.db_work_path\n  cfg.mem_schema        = 'x'\n  info JSON.stringify cfg, null, '  '\n  dba                   = new ICQLDBA.Dba { path, echo: true, debug: true, }\n  #.........................................................................................................\n  debug '^300^', cfg\n  debug '^301^', dba.get_schemas()\n  dba.attach { path: ':memory:', schema: cfg.mem_schema, }\n  debug '^302^', dba.get_schemas()\n  for d from dba.walk_objects()\n    debug '^303^', \"#{d.type}:#{d.name}\"\n  dba.copy_schema { to_schema: cfg.mem_schema, }\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\nshow_schemas_and_objects = ( ref, dba ) ->\n  for schema of dba.get_schemas()\n    urge \"#{ref} schema: #{schema}\"\n    count = 0\n    for d from dba.walk_objects { schema, }\n      count++\n      info \"#{ref}    #{schema}/#{d.type}:#{d.name}\"\n    if count is 0\n      whisper \"#{ref}    (empty)\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: copy file DB to memory\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA               = require '../../../apps/icql-dba'\n  #.........................................................................................................\n  cfg                   =\n    pragmas: [\n      'page_size = 4096'\n      'cache_size = 16384'\n      'temp_store = MEMORY'\n      'journal_mode = WAL'\n      'locking_mode = EXCLUSIVE'\n      'synchronous = OFF' ]\n    template_path:    H.resolve_path 'assets/icql/small-datamill.db'\n    work_path:        H.resolve_path 'data/icql/icql-dba-copy-schema.db'\n    # mem_schema:       'x'\n    # mem_path:         ':memory:'\n    # { schema: 'main', path: ( H.resolve_path 'data/icql/icql-dba-copy-schema.db' ), }\n    # { schema: 'q',    path: ':memory:', }\n    schemas:\n      main:   ( H.resolve_path 'data/icql/icql-dba-copy-schema.db' )\n      q:      ':memory:'\n    mem_schema: 'q'\n  #.........................................................................................................\n  help '^754-1^', \"cfg.mem_schema:    \", cfg.mem_schema\n  help '^754-2^', \"cfg.template_path: \", cfg.template_path\n  help '^754-3^', \"cfg.work_path:     \", cfg.work_path\n  await H.copy_over cfg.template_path, cfg.work_path\n  #.........................................................................................................\n  dba_cfg               = { path: cfg.mem_path, }\n  # dba_cfg               = { path: cfg.work_path, echo: true, debug: true, }\n  dba                   = new ICQLDBA.Dba dba_cfg\n  #.........................................................................................................\n  info '^754-4^', { path: cfg.work_path, schema: cfg.mem_schema, }\n  dba.attach { path: cfg.work_path, schema: cfg.mem_schema, }\n  show_schemas_and_objects '^754-5^', dba\n  dba.copy_schema { from_schema: cfg.mem_schema, to_schema: 'main', }\n  show_schemas_and_objects '^754-6^', dba\n  #.........................................................................................................\n  to_schema_objects     = dba.list dba.walk_objects { schema: cfg.mem_schema, }\n  schema_x              = dba.as_identifier cfg.mem_schema\n  result                = {}\n  for d in to_schema_objects\n    obj_name_x            = dba.as_identifier d.name\n    switch d.type\n      when 'index'\n        result[ d.name ] = 'index'\n      when 'table', 'view'\n        sql                   = \"select count(*) from #{schema_x}.#{obj_name_x};\"\n        count                 = dba.single_value dba.query sql\n        debug '^33432^', { name: d.name, count, }\n        result[ d.name ] = \"#{d.type}|#{count}\"\n      else throw new Error \"^45687^ unknown DB object type #{rpr d.type}\"\n  # debug '^448978^', result\n  T.eq result, {\n    sqlite_autoindex_keys_1:    'index'\n    sqlite_autoindex_realms_1:  'index'\n    sqlite_autoindex_sources_1: 'index'\n    keys:                       'table|15'\n    main:                       'table|327'\n    realms:                     'table|2'\n    sources:                    'table|1'\n    dest_changes_backward:      'view|320'\n    dest_changes_forward:       'view|320' }\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: in-memory DB API\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA               = require '../../../apps/icql-dba'\n  { isa\n    validate }          = ICQLDBA.types.export()\n  #-----------------------------------------------------------------------------------------------------------\n  class Dba extends ICQLDBA.Dba\n\n    #---------------------------------------------------------------------------------------------------------\n    copy_db: ( cfg ) ->\n      from_path         = pick cfg, 'from_path',    null\n      from_schema       = pick cfg, 'from_schema',  'file'\n      to_path           = pick cfg, 'to_path',      null\n      to_schema         = pick cfg, 'to_schema',    'file'\n      # validate.icqldba_file_path\n      # validate.icqldba_db_path\n      validate.icqldba_path from_path\n      validate.icqldba_path to_path\n      @_copy_db from_path, from_schema, to_path, to_schema\n      return null\n\n    #---------------------------------------------------------------------------------------------------------\n    _copy_db: ( from_path, from_schema, to_path, to_schema ) ->\n      @attach { path: from_path, schema: from_schema, }\n      @copy_schema { from_schema, to_schema, }\n      return null\n\n    #---------------------------------------------------------------------------------------------------------\n    move_db: ( cfg ) ->\n      from_path         = pick cfg, 'from_path',    null\n      from_schema       = pick cfg, 'from_schema',  'file'\n      to_path           = pick cfg, 'to_path',      null\n      to_schema         = pick cfg, 'to_schema',    'file'\n      validate.icqldba_path from_path\n      validate.icqldba_path to_path\n      @_copy_db from_path, from_schema, to_path, to_schema\n      @detach { schema: from_schema, }\n      return null\n\n  #.........................................................................................................\n  done()\n\n\n\n############################################################################################################\nunless module.parent?\n  test @\n  # test @[ \"DBA: copy file DB to memory\" ]\n  # test @[ \"DBA: open()\" ]\n  test @[ \"DBA: _walk_all_objects()\" ]\n  # @[ \"DBA: open()\" ]()\n  # test @[ \"DBA: in-memory DB API\" ]\n  # test @[ \"DBA: as_sql\" ]\n  # test @[ \"DBA: interpolate\" ]\n  # test @[ \"DBA: clear()\" ]\n  # test @[ \"toposort with schema\" ]\n  # @[ \"toposort with schema\" ]()\n\n\n"
  ]
}