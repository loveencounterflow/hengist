{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/basic.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: as_sql\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA           = require '../../../apps/icql-dba'\n  dba               = new ICQLDBA.Dba()\n  probes_and_matchers = [\n    [true,'1',]\n    [false,'0',]\n    [42,'42',]\n    ['text',\"'text'\",]\n    [\"text with 'quotes'\",\"'text with ''quotes'''\",]\n    [[1,2,3],\"'[1,2,3]'\",]\n    [[],\"'[]'\",]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      resolve dba.as_sql probe\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: interpolate\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA           = require '../../../apps/icql-dba'\n  dba               = new ICQLDBA.Dba()\n  probes_and_matchers = [\n    [[\"foo, $bar, baz\",{bar:42,}],\"foo, 42, baz\"]\n    [[\"select * from t where d = $d;\",{bar:42,}],null,\"unable to express 'undefined' as SQL literal\"]\n    [[\"select * from t where d = $d;\",{d:true,}],\"select * from t where d = 1;\"]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ sql, Q, ] = probe\n      resolve dba.interpolate sql, Q\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: toposort is removed\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA           = require '../../../apps/icql-dba'\n  dba               = new ICQLDBA.Dba()\n  T.eq dba.get_toposort, undefined\n  ### removed b/c stops working when tables refer to each other cyclical fashion:\n  dba.execute \"create table main.k1 ( id integer primary key, fk_k2 integer references k2 ( id ) );\"\n  dba.execute \"create table main.k2 ( id integer primary key, fk_k1 integer references k1 ( id ) );\"\n  debug '^568^', dba.get_toposort()\n  # => \"Error: detected cycle involving node 'K1'\"\n  ###\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: clear()\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA           = require '../../../apps/icql-dba'\n  dba               = new ICQLDBA.Dba()\n  #.........................................................................................................\n  # Create tables, indexes:\n  dba.execute \"create table main.k1 ( id integer primary key, fk_k2 integer unique references k2 ( id ) );\"\n  dba.execute \"create table main.k2 ( id integer primary key, fk_k1 integer unique references k1 ( id ) );\"\n  #.........................................................................................................\n  for d from dba.walk_objects()\n    info \"^557-300^\", { type: d.type, name: d.name, }\n  #.........................................................................................................\n  # Insert rows:\n  T.eq dba.get_foreign_key_state(), true\n  dba.set_foreign_key_state off\n  T.eq dba.get_foreign_key_state(), false\n  for id in [ 1 .. 9 ]\n    dba.execute \"insert into main.k1 values ( #{id}, #{id} );\"\n    dba.execute \"insert into main.k2 values ( #{id}, #{id} );\"\n  dba.set_foreign_key_state on\n  T.eq dba.get_foreign_key_state(), true\n  #.........................................................................................................\n  debug '^544734^', ( d.name for d from dba.walk_objects() )\n  T.eq ( d.name for d from dba.walk_objects() ), [ 'sqlite_autoindex_k1_1', 'sqlite_autoindex_k2_1', 'k1', 'k2' ]\n  T.eq ( dba.list dba.query \"select * from k1 join k2 on ( k1.fk_k2 = k2.id );\" ), [\n    { id: 1, fk_k2: 1, fk_k1: 1 },\n    { id: 2, fk_k2: 2, fk_k1: 2 },\n    { id: 3, fk_k2: 3, fk_k1: 3 },\n    { id: 4, fk_k2: 4, fk_k1: 4 },\n    { id: 5, fk_k2: 5, fk_k1: 5 },\n    { id: 6, fk_k2: 6, fk_k1: 6 },\n    { id: 7, fk_k2: 7, fk_k1: 7 },\n    { id: 8, fk_k2: 8, fk_k1: 8 },\n    { id: 9, fk_k2: 9, fk_k1: 9 } ]\n  #.........................................................................................................\n  dba.clear()\n  T.eq ( d.name for d from dba.walk_objects() ), []\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: open from DB file\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA               = require '../../../apps/icql-dba'\n  cfg                   = H.get_cfg()\n  cfg.size              = 'small'\n  cfg.mode              = 'fle'\n  cfg.ref               = 'dba-open-from-file'\n  cfg.pragmas           = 'fle'\n  cfg.db_template_path  = H.interpolate cfg.db.templates[  cfg.size ], cfg\n  cfg.db_work_path      = H.interpolate cfg.db.work[       cfg.mode ], cfg\n  path                  = cfg.db_work_path\n  help \"^77-300^ cfg.db_template_path:  \", cfg.db_template_path\n  help \"^77-300^ cfg.db_work_path:      \", cfg.db_work_path\n  await H.copy_over cfg.db_template_path, cfg.db_work_path\n  dba                   = new ICQLDBA.Dba { path, }\n  #.........................................................................................................\n  T.eq ( type_of ( s = dba.walk_objects() ) ), 'statementiterator'\n  ignore            = [ s..., ]\n  objects           = ( \"#{d.type}:#{d.name}\" for d from dba.walk_objects { schema: 'main', } )\n  T.eq objects, [\n    'index:sqlite_autoindex_keys_1',\n    'index:sqlite_autoindex_realms_1',\n    'index:sqlite_autoindex_sources_1',\n    'table:keys',\n    'table:main',\n    'table:realms',\n    'table:sources',\n    'view:dest_changes_backward',\n    'view:dest_changes_forward' ]\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_DBA: copy file DB to memory\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA               = require '../../../apps/icql-dba'\n  cfg                   = H.get_cfg()\n  cfg.size              = 'small'\n  cfg.mode              = 'fle'\n  cfg.ref               = 'dba-open-from-file'\n  cfg.pragmas           = 'fle'\n  cfg.db_template_path  = H.interpolate cfg.db.templates[  cfg.size ], cfg\n  cfg.db_work_path      = H.interpolate cfg.db.work[       cfg.mode ], cfg\n  path                  = cfg.db_work_path\n  await H.copy_over cfg.db_template_path, cfg.db_work_path\n  cfg.mem_schema        = 'x'\n  info JSON.stringify cfg, null, '  '\n  dba                   = new ICQLDBA.Dba { path, echo: true, debug: true, }\n  #.........................................................................................................\n  debug '^300^', cfg\n  debug '^301^', dba.get_schemas()\n  dba.attach { path: ':memory:', schema: cfg.mem_schema, }\n  debug '^302^', dba.get_schemas()\n  for d from dba.walk_objects()\n    debug '^303^', \"#{d.type}:#{d.name}\"\n  dba.copy_schema { to_schema: cfg.mem_schema, }\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\nshow_schemas_and_objects = ( ref, dba ) ->\n  for schema of dba.get_schemas()\n    urge \"#{ref} schema: #{schema}\"\n    count = 0\n    for d from dba.walk_objects { schema, }\n      count++\n      info \"#{ref}    #{schema}/#{d.type}:#{d.name}\"\n    if count is 0\n      whisper \"#{ref}    (empty)\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: copy file DB to memory\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA               = require '../../../apps/icql-dba'\n  #.........................................................................................................\n  cfg                   =\n    pragmas: [\n      'page_size = 4096'\n      'cache_size = 16384'\n      'temp_store = MEMORY'\n      'journal_mode = WAL'\n      'locking_mode = EXCLUSIVE'\n      'synchronous = OFF' ]\n    template_path:    H.resolve_path 'assets/icql/small-datamill.db'\n    work_path:        H.resolve_path 'data/icql/icql-dba-copy-schema.db'\n    # mem_schema:       'x'\n    # mem_path:         ':memory:'\n    # { schema: 'main', path: ( H.resolve_path 'data/icql/icql-dba-copy-schema.db' ), }\n    # { schema: 'q',    path: ':memory:', }\n    schemas:\n      main:   ( H.resolve_path 'data/icql/icql-dba-copy-schema.db' )\n      q:      ':memory:'\n  #.........................................................................................................\n  help '^3387^', \"cfg.template_path: \", cfg.template_path\n  help '^3387^', \"cfg.work_path:     \", cfg.work_path\n  await H.copy_over cfg.template_path, cfg.work_path\n  #.........................................................................................................\n  dba_cfg               = { path: cfg.mem_path, }\n  # dba_cfg               = { path: cfg.work_path, echo: true, debug: true, }\n  dba                   = new ICQLDBA.Dba dba_cfg\n  #.........................................................................................................\n  dba.attach { path: cfg.work_path, schema: cfg.mem_schema, }\n  show_schemas_and_objects '^754-2^', dba\n  dba.copy_schema { from_schema: cfg.mem_schema, to_schema: 'main', }\n  show_schemas_and_objects '^754-3^', dba\n  #.........................................................................................................\n  to_schema_objects     = dba.list dba.walk_objects { schema: cfg.mem_schema, }\n  schema_x              = dba.as_identifier cfg.mem_schema\n  result                = {}\n  for d in to_schema_objects\n    obj_name_x            = dba.as_identifier d.name\n    switch d.type\n      when 'index'\n        result[ d.name ] = 'index'\n      when 'table', 'view'\n        sql                   = \"select count(*) from #{schema_x}.#{obj_name_x};\"\n        count                 = dba.single_value dba.query sql\n        debug d.name, count\n        result[ d.name ] = \"#{d.type}|#{count}\"\n      else throw new Error \"^45687^ unknown DB object type #{rpr d.type}\"\n  debug '^448978^', result\n  T.eq result, {\n    sqlite_autoindex_keys_1:    'index'\n    sqlite_autoindex_realms_1:  'index'\n    sqlite_autoindex_sources_1: 'index'\n    keys:                       'table|15'\n    main:                       'table|327'\n    realms:                     'table|2'\n    sources:                    'table|1'\n    dest_changes_backward:      'view|320'\n    dest_changes_forward:       'view|320' }\n  #.........................................................................................................\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: in-memory DB API\" ] = ( T, done ) ->\n  T.halt_on_error()\n  ICQLDBA               = require '../../../apps/icql-dba'\n  { isa\n    validate }          = ICQLDBA.types.export()\n  #-----------------------------------------------------------------------------------------------------------\n  class Dba extends ICQLDBA.Dba\n\n    #---------------------------------------------------------------------------------------------------------\n    copy_db: ( cfg ) ->\n      from_path         = pick cfg, 'from_path',    null\n      from_schema       = pick cfg, 'from_schema',  'file'\n      to_path           = pick cfg, 'to_path',      null\n      to_schema         = pick cfg, 'to_schema',    'file'\n      # validate.icqldba_file_path\n      # validate.icqldba_db_path\n      validate.icqldba_path from_path\n      validate.icqldba_path to_path\n      @_copy_db from_path, from_schema, to_path, to_schema\n      return null\n\n    #---------------------------------------------------------------------------------------------------------\n    _copy_db: ( from_path, from_schema, to_path, to_schema ) ->\n      @attach { path: from_path, schema: from_schema, }\n      @copy_schema { from_schema, to_schema, }\n      return null\n\n    #---------------------------------------------------------------------------------------------------------\n    move_db: ( cfg ) ->\n      from_path         = pick cfg, 'from_path',    null\n      from_schema       = pick cfg, 'from_schema',  'file'\n      to_path           = pick cfg, 'to_path',      null\n      to_schema         = pick cfg, 'to_schema',    'file'\n      validate.icqldba_path from_path\n      validate.icqldba_path to_path\n      @_copy_db from_path, from_schema, to_path, to_schema\n      @detach { schema: from_schema, }\n      return null\n\n  #.........................................................................................................\n  done()\n\n\n\n############################################################################################################\nunless module.parent?\n  # test @\n  # test @[ \"DBA: copy file DB to memory\" ]\n  test @[ \"DBA: in-memory DB API\" ]\n  # test @[ \"DBA: as_sql\" ]\n  # test @[ \"DBA: interpolate\" ]\n  # test @[ \"DBA: clear()\" ]\n  # test @[ \"toposort with schema\" ]\n  # @[ \"toposort with schema\" ]()\n\n\n"
  ]
}