{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/functions.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/FUNCTIONS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\non_process_exit           = require 'exit-hook'\nsleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\nSQL                       = String.raw\njr                        = JSON.stringify\njp                        = JSON.parse\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: window functions etc.\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  dba               = new Dba()\n  schema            = 'main'\n  { template_path\n    work_path }     = await H.procure_db { size: 'nnt', ref: 'fn', }\n  debug { template_path, work_path, }\n  dba.open { path: work_path, schema, }\n  numbers           = dba.all_first_values dba.query SQL\"select n from nnt order by n;\"\n  # console.table dba.list dba.walk_objects { schema, }\n  #.........................................................................................................\n  await do =>\n    ### single-valued function ###\n    dba.create_function name: 'square', deterministic: true, varargs: false, call: ( n ) -> n ** 2\n    matcher = ( ( n * n ) for n in numbers )\n    result  = dba.list dba.query SQL\"select *, square( n ) as square from nnt order by square;\"\n    console.table result\n    result  = ( row.square for row in result )\n    T.eq result, matcher\n  #.........................................................................................................\n  await do =>\n    ### aggregate function ###\n    dba.create_aggregate_function\n      name:           'product'\n      start:          -> null\n      step:           ( total, element ) -> debug '^4476^', { total, element, }; ( total ? 1 ) * element\n      # inverse:        ( total, dropped ) -> total.pop(); total\n      # result:         ( total ) -> total\n    # matcher = ( ( n * n ) for n in numbers )\n    #.......................................................................................................\n    do =>\n      result  = dba.list dba.query SQL\"select product( n ) as product from nnt where n != 0;\"\n      console.table result\n      matcher = [ 5122922112, ]\n      result  = ( row.product for row in result )\n      T.eq result, matcher\n    #.......................................................................................................\n    do =>\n      result  = dba.list dba.query SQL\"select product( n ) as product from nnt where n > 100;\"\n      console.table result\n      matcher = [ null, ]\n      result  = ( row.product for row in result )\n      T.eq result, matcher\n    #.......................................................................................................\n    do =>\n      try\n        dba.query SQL\"select product( n ) over () as product from nnt;\"\n      catch error\n        T.eq error.code, 'SQLITE_ERROR'\n        T.eq error.name, 'SqliteError'\n        T.eq error.message, 'product() may not be used as a window function'\n      unless error?\n        T.fail \"expected error\"\n      # console.table result\n      # matcher = [ null, ]\n      # result  = ( row.product for row in result )\n      # T.eq result, matcher\n  #.........................................................................................................\n  await do =>\n    ### window function ###\n    dba.create_window_function\n      name:           'array_agg'\n      varargs:        false\n      deterministic:  true\n      start:          -> [] # must be new object for each partition, therefore use function, not constant\n      step:           ( total, element ) -> total.push element; total\n      inverse:        ( total, dropped ) -> total.pop(); total\n      result:         ( total ) -> jr total\n    #.......................................................................................................\n    do =>\n      result  = dba.list dba.query SQL\"select array_agg( t ) as names from nnt;\"\n      console.table result\n      matcher = [ '[\"naught\",\"one\",\"one point five\",\"two\",\"two point three\",\"three\",\"three point one\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"eleven\",\"twelve\"]' ]\n      result  = ( row.names for row in result )\n      T.eq result, matcher\n    #.......................................................................................................\n    do =>\n      result  = dba.list dba.query SQL\"\"\"\n        select distinct\n            array_agg( t ) over w as names\n          from nnt\n          window w as (\n            partition by substring( t, 1, 1 )\n            order by t\n            range between unbounded preceding and unbounded following\n            );\"\"\"\n      console.table result\n      matcher = [ '[\"eight\",\"eleven\"]', '[\"five\",\"four\"]', '[\"naught\",\"nine\"]', '[\"one\",\"one point five\"]', '[\"seven\",\"six\"]', '[\"ten\",\"three\",\"three point one\",\"twelve\",\"two\",\"two point three\"]' ]\n      result  = ( row.names for row in result )\n      debug '^878^', result\n      T.eq result, matcher\n  #.........................................................................................................\n  await do =>\n    ### table-valued function ###\n    dba.create_table_function\n      name:         're_matches'\n      columns:      [ 'match', 'capture', ]\n      parameters:   [ 'text', 'pattern', ]\n      rows: ( text, pattern ) ->\n        regex = new RegExp pattern, 'g'\n        while ( match = regex.exec text )?\n          yield [ match[ 0 ], match[ 1 ], ]\n        return null\n    await do =>\n      result  = dba.list dba.query SQL\"\"\"\n        select\n            *\n          from\n            nnt,\n            re_matches( t, '^.*([aeiou].e).*$' ) as rx\n          order by rx.match;\"\"\"\n      console.table result\n      matcher = [ 'eleven:eve', 'five:ive', 'nine:ine', 'one:one', 'one point five:ive', 'seven:eve', 'three point one:one' ]\n      result  = ( \"#{row.t}:#{row.capture}\" for row in result )\n      debug '^984^', result\n      T.eq result, matcher\n    await do =>\n      result  = dba.list dba.query SQL\"\"\"\n        select\n            *\n          from\n            nnt,\n            re_matches( t, 'o' ) as rx\n          order by t;\"\"\"\n      console.table result\n      matcher = [ 'four', 'one', 'one point five', 'one point five', 'three point one', 'three point one', 'two', 'two point three', 'two point three' ]\n      result  = ( row.t for row in result )\n      debug '^984^', result\n      T.eq result, matcher\n  #.........................................................................................................\n  await do =>\n    ### virtual table ###\n    FS = require 'fs'\n    dba.create_virtual_table\n      name:   'file_contents'\n      create: ( filename, P... ) ->\n        urge '^46456^', { filename, P, }\n        R =\n          columns: [ 'path', 'lnr', 'line', ],\n          rows: ->\n            path  = PATH.resolve PATH.join __dirname, '../../../assets/icql', filename\n            lines = ( FS.readFileSync path, { encoding: 'utf-8', } ).split '\\n'\n            for line, line_idx in lines\n              yield { path, lnr: line_idx + 1, line, }\n            return null\n        return R\n    dba.execute SQL\"\"\"\n      create virtual table contents_of_wbftsv\n        using file_contents( ncrglyphwbf.tsv, any stuff goes here, and more here );\"\"\"\n    result  = dba.list dba.query SQL\"select * from contents_of_wbftsv where lnr between 10 and 14 order by 1, 2, 3;\"\n    console.table result\n    matcher = [ 'u-cjk-xa-3417\\t㐗\\t<1213355>', '', 'u-cjk-xa-34ab\\t㒫\\t<121135>', 'u-cjk-xa-342a\\t㐪\\t<415234>', 'u-cjk-xa-342b\\t㐫\\t<413452>' ]\n    result  = ( row.line for row in result )\n    debug '^984^', result\n    T.eq result, matcher\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: User-Defined Window Function\" ] = ( T, done ) ->\n  ### see https://github.com/nalgeon/sqlean/blob/main/docs/vsv.md ###\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  schema            = 'main'\n  dba               = new Dba()\n  dba.load_extension PATH.resolve PATH.join __dirname, '../../../assets/sqlite-extensions/json1.so'\n  # dba.sqlt.unsafeMode true\n  { I, L, V, }      = new ( require '../../../apps/icql-dba/lib/sql' ).Sql\n  #.........................................................................................................\n  dba.create_window_function\n    name:           'udf_json_array_agg'\n    varargs:        false\n    deterministic:  true\n    start:          -> [] # must be new object for each partition, therefore use function, not constant\n    step:           ( total, element ) -> total.push element; total\n    inverse:        ( total, dropped ) -> total.pop(); total\n    result:         ( total ) -> jr total\n  #.........................................................................................................\n  await do =>\n    #.......................................................................................................\n    dba.execute SQL\"\"\"\n      create view multiples as select distinct\n          n                                               as n,\n          udf_json_array_agg( multiple ) over w           as multiples\n        from multiples_idx\n        window w as ( partition by n order by idx range between unbounded preceding and unbounded following )\n        order by n;\n      -- ...................................................................................................\n      create table multiples_idx (\n        n         integer not null,\n        idx       integer not null,\n        multiple  integer not null,\n        primary key ( n, idx ) );\n      create index multiples_idx_idx_idx on multiples_idx ( idx );\n      create index multiples_idx_multiple_idx on multiples_idx ( multiple );\n      -- ...................................................................................................\n      create trigger multiple_instead_insert instead of insert on multiples begin\n        insert into multiples_idx( n, idx, multiple )\n          select new.n, j.key, j.value from json_each( new.multiples ) as j;\n        end;\n      -- ...................................................................................................\n      create trigger multiple_instead_delete instead of delete on multiples begin\n        delete from multiples_idx where n = old.n;\n        end;\n      -- ...................................................................................................\n      create trigger multiple_instead_update instead of update on multiples begin\n        delete from multiples_idx where n = old.n;\n        insert into multiples_idx( n, idx, multiple )\n          select new.n, j.key, j.value from json_each( new.multiples ) as j;\n        end;\n      \"\"\"\n    #.......................................................................................................\n    for n in [ 1 .. 3 ]\n      multiples = jr ( n * idx for idx in [ 0 .. 9 ] )\n      dba.run SQL\"\"\"insert into multiples ( n, multiples ) values ( $n, $multiples )\"\"\", { n, multiples, }\n    dba.execute SQL\"insert into multiples ( n, multiples ) values ( 5, '[0,5,10,15,20]' );\"\n    #.......................................................................................................\n    console.table dba.list dba.query SQL\"select * from multiples_idx;\"\n    console.table dba.list dba.query SQL\"select * from multiples;\"\n    T.eq ( dba.list dba.query SQL\"select * from multiples_idx order by n, idx;\" ), [ { n: 1, idx: 0, multiple: 0 }, { n: 1, idx: 1, multiple: 1 }, { n: 1, idx: 2, multiple: 2 }, { n: 1, idx: 3, multiple: 3 }, { n: 1, idx: 4, multiple: 4 }, { n: 1, idx: 5, multiple: 5 }, { n: 1, idx: 6, multiple: 6 }, { n: 1, idx: 7, multiple: 7 }, { n: 1, idx: 8, multiple: 8 }, { n: 1, idx: 9, multiple: 9 }, { n: 2, idx: 0, multiple: 0 }, { n: 2, idx: 1, multiple: 2 }, { n: 2, idx: 2, multiple: 4 }, { n: 2, idx: 3, multiple: 6 }, { n: 2, idx: 4, multiple: 8 }, { n: 2, idx: 5, multiple: 10 }, { n: 2, idx: 6, multiple: 12 }, { n: 2, idx: 7, multiple: 14 }, { n: 2, idx: 8, multiple: 16 }, { n: 2, idx: 9, multiple: 18 }, { n: 3, idx: 0, multiple: 0 }, { n: 3, idx: 1, multiple: 3 }, { n: 3, idx: 2, multiple: 6 }, { n: 3, idx: 3, multiple: 9 }, { n: 3, idx: 4, multiple: 12 }, { n: 3, idx: 5, multiple: 15 }, { n: 3, idx: 6, multiple: 18 }, { n: 3, idx: 7, multiple: 21 }, { n: 3, idx: 8, multiple: 24 }, { n: 3, idx: 9, multiple: 27 }, { n: 5, idx: 0, multiple: 0 }, { n: 5, idx: 1, multiple: 5 }, { n: 5, idx: 2, multiple: 10 }, { n: 5, idx: 3, multiple: 15 }, { n: 5, idx: 4, multiple: 20 } ]\n    T.eq ( dba.list dba.query SQL\"select * from multiples order by n;\" ), [ { n: 1, multiples: '[0,1,2,3,4,5,6,7,8,9]' }, { n: 2, multiples: '[0,2,4,6,8,10,12,14,16,18]' }, { n: 3, multiples: '[0,3,6,9,12,15,18,21,24,27]' }, { n: 5, multiples: '[0,5,10,15,20]' } ]\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: view with UDF\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  dba               = new Dba()\n  schema            = 'main'\n  { template_path\n    work_path }     = await H.procure_db { size: 'nnt', ref: 'fnsquareview', }\n  dba.open { path: work_path, schema, }\n  numbers           = dba.all_first_values dba.query SQL\"select n from nnt order by n;\"\n  #.........................................................................................................\n  dba.create_function name: 'square', deterministic: true, varargs: false, call: ( n ) -> n ** 2\n  dba.execute SQL\"create view squares as select n, square( n ) as square from nnt order by n;\"\n  matcher = [ 0, 1, 2.25, 4, 5.289999999999999, 9, 9.610000000000001, 16, 25, 36, 49, 64, 81, 100, 121, 144 ]\n  result  = dba.list dba.query SQL\"select * from squares;\"\n  console.table result\n  result  = ( row.square for row in result )\n  debug '^984^', result\n  T.eq result, matcher\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: typing\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  dba               = new Dba()\n  schema            = 'main'\n  { template_path\n    work_path }     = await H.procure_db { size: 'small', ref: 'typing', }\n  dba.open { path: work_path, schema, }\n  #.........................................................................................................\n  ### In 'simple' cases, there's meaningful type information present: ###\n  statement = dba.sqlt.prepare SQL\"select stamped as d from main;\"\n  iterator  = statement.iterate []\n  [ iterator..., ] ### NOTE: consume iterator to free connection ###\n  d         = ( [ d.name, d.type, ] for d in statement.columns() )\n  T.eq d, [ [ 'd', 'boolean' ] ]\n  #.........................................................................................................\n  ### But as soon as any operation is done on data: that typing information vanishes: ###\n  statement = dba.sqlt.prepare SQL\"select ( stamped and not stamped ) as d from main;\"\n  iterator  = statement.iterate []\n  [ iterator..., ] ### NOTE: consume iterator to free connection ###\n  d         = ( [ d.name, d.type, ] for d in statement.columns() )\n  T.eq d, [ [ 'd', null ] ]\n  #.........................................................................................................\n  ### We can even explicitly cast results but that does not bring back typing: ###\n  statement = dba.sqlt.prepare SQL\"select cast( stamped and not stamped as boolean ) as d from main;\"\n  iterator  = statement.iterate []\n  [ iterator..., ] ### NOTE: consume iterator to free connection ###\n  d         = ( [ d.name, d.type, ] for d in statement.columns() )\n  T.eq d, [ [ 'd', null ] ]\n  #.........................................................................................................\n  ### We can enforce better type checking in SQLite by using `check` constraints and UDFs: ###\n  as_boolean = ( d ) -> if d then 1 else 0\n  dba.create_function name: 'validate_integer', call: ( n ) ->\n    debug '^534^', \"validating #{rpr n}\"\n    return as_boolean types.isa.integer n\n  dba.execute SQL\"create table x( n integer, check ( validate_integer( n ) ) );\"\n  dba.execute SQL\"insert into x ( n ) values ( 42 );\"; T.ok true\n  try dba.execute SQL\"insert into x ( n ) values ( 1.23 );\" catch error then T.ok error.message is \"CHECK constraint failed: validate_integer( n )\"\n  try dba.execute SQL\"insert into x ( n ) values ( 'foobar' );\" catch error then T.ok error.message is \"CHECK constraint failed: validate_integer( n )\"\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: virtual tables\" ] = ( T, done ) ->\n  ### new in 7.4.0, see https://github.com/JoshuaWise/better-sqlite3/issues/581 ###\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  FS                = require 'fs'\n  #.........................................................................................................\n  dba               = new Dba()\n  # schema            = 'csv'\n  # schema_i          = dba.sql.I schema\n  transform         = null\n  is_first          = true\n  #.........................................................................................................\n  cfg =\n    columns: [ 'path', 'data', ],\n    rows: ->\n      for filename in FS.readdirSync __dirname\n        path  = PATH.resolve PATH.join __dirname, filename\n        data  = ( FS.readFileSync path, { encoding: 'utf-8', } ).trim()[ .. 50 ]\n        yield { path, data }\n      return null\n  dba.sqlt.table \"files\", cfg\n  matcher = dba.list dba.query \"select * from files order by data;\"\n  console.table matcher\n  #.........................................................................................................\n  cfg =\n    columns: [ 'match', 'capture', ]\n    parameters: [ 'pattern', 'text', ]\n    rows: ( pattern, text ) ->\n      regex = new RegExp pattern, 'g'\n      while ( match = regex.exec text )?\n        yield [ match[ 0 ], match[ 1 ], ]\n      return null\n  dba.sqlt.table 're_matches', cfg\n  sql     = \"select pattern, text, match, capture from re_matches( ?, ? ) order by 1, 2, 3, 4;\"\n  matcher = dba.list dba.query sql, [ '€([-,.0-9]+)', \"between €30,-- and €40,--\", ]\n  console.table matcher\n  #.........................................................................................................\n  cfg = ( filename, P... ) ->\n    urge '^46456^', { filename, P, }\n    columns: [ 'path', 'lnr', 'line', ],\n    rows: ->\n      path  = PATH.resolve PATH.join __dirname, '../../../assets/icql', filename\n      lines = ( FS.readFileSync path, { encoding: 'utf-8', } ).split '\\n'\n      for line, line_idx in lines\n        yield { path, lnr: line_idx + 1, line, }\n      return null\n  dba.sqlt.table 'file_contents', cfg\n  dba.execute \"create virtual table contents_of_wbftsv using file_contents( ncrglyphwbf.tsv, any stuff goes here, and more here );\"\n  sql     = \"select * from contents_of_wbftsv order by 1, 2, 3;\"\n  matcher = dba.list dba.query sql\n  console.table matcher\n  #.........................................................................................................\n  cfg =\n    columns: [ 'n', ]\n    parameters: [ 'start', 'stop', 'step', ]\n    rows: ( start, stop, step = null ) ->\n      # stop ?= start\n      step ?= 1\n      n     = start\n      loop\n        break if n > stop\n        # if n %% 2 is 0 then yield [ \"*#{n}*\", ]\n        # else                yield [ n, ]\n        yield [ n, ]\n        n += step\n      return null\n  dba.sqlt.table 'generate_series', cfg\n  console.table dba.list dba.query \"select * from generate_series( ?, ? )\", [ 1, 5, ]\n  console.table dba.list dba.query \"select * from generate_series( ?, ?, ? )\", [ 1, 10, 2, ]\n  console.table dba.list dba.query \"select * from generate_series( ?, ?, ? ) limit 10;\", [ 500, Infinity, 1234, ]\n  #.........................................................................................................\n  cfg =\n    columns: [ 'path', 'vnr', 'line', 'vnr_h', ]\n    parameters: [ '_path', ]\n    rows: ( path ) ->\n      readlines = new ( require 'n-readlines' ) path\n      lnr       = 0\n      while ( bytes = readlines.next() ) isnt false\n        lnr++\n        vnr       = [ lnr, ]\n        vnr_json  = JSON.stringify vnr\n        line      = bytes.toString 'utf-8'\n        vnr_h     = dba.as_hollerith vnr\n        yield [ path, vnr_json, line, vnr_h, ]\n      return null\n  dba.sqlt.table 'readlines', cfg\n  path = H.get_cfg().tsv.micro\n  urge \"^44558^ reading from #{path}\"\n  dba.execute \"create table foolines ( path text, vnr json, line text, vnr_h bytea );\"\n  # dba.execute \"insert into foolines select * from readlines( ? );\", [ path, ]\n  dba.execute \"insert into foolines select * from readlines( #{dba.sql.L path} );\"\n  # console.table dba.list dba.query \"select * from readlines( ? ) order by vnr_h;\", [ path, ]\n  console.table dba.list dba.query \"select * from foolines;\"\n  #.........................................................................................................\n  export_path       = H.nonexistant_path_from_ref 'export-virtual-tables'\n  schema            = 'main'\n  dba.export { schema, path: export_path, }\n  urge \"^35345^ schema #{rpr schema} exported to #{export_path}\"\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: concurrent UDFs\" ] = ( T, done ) ->\n  ###\n  See\n    * https://github.com/JoshuaWise/better-sqlite3/issues/338\n    * https://github.com/JoshuaWise/better-sqlite3/pull/367\n    * https://github.com/JoshuaWise/better-sqlite3/issues/203\n    * https://github.com/JoshuaWise/better-sqlite3/issues/368\n    * https://github.com/JoshuaWise/better-sqlite3/pull/371\n\n      > I'm not sure if any of the use-cases that had been discussed actually require\n      > SQLITE_DBCONFIG_DEFENSIVE to be disabled? That might cross the border of what is sensible. I think\n      > all we need was to allow behavior that SQLIte3 considers undefined but I don't think that means you\n      > can corrupt the database.\n      >\n      > Unfortunately unsafeMode does not solve #338, which I believe is even allowed by SQLite3 and not\n      > even considered undefined behavior. What I had in mind with this PR was to disable the checks that\n      > better-sqlite3 puts in place that might not even be needed by SQLite3 itself.\n      >\n      > This is a stupid example, but you get the gist. I cannot execute queries inside user-defined\n      > functions even though everything is even read-only and cannot possibly cause damage. Sure currently\n      > better-sqlite3 currently catches things like endless recursions this way, but that's the kind of\n      > responsibility I'm willing to take when going into unsafeMode.\n\n    * https://github.com/JoshuaWise/better-sqlite3/issues/483\n\n      > The string passed to the Database constructor is passed directly to the underlying SQLite3 library.\n      > The reason you can't use file: is because the default build configuration bundled in better-sqlite3\n      > uses the SQLITE_USE_URI=0 option. You can get around this by supplying your own build configuration\n      > instead.\n\n  From v7.1.0 on ICQL/DBA uses a recent algamation from https://sqlite.com/download.html with\n  `SQLITE_USE_URI` set to `1` so concurrent UDFs are possible.\n\n  ###\n  # T?.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  schema            = 'main'\n  { template_path\n    work_path }     = await H.procure_db { size: 'small', ref: 'typing', }\n  #.........................................................................................................\n  f1 = =>\n    error             = null\n    dba               = new Dba()\n    dba.open { path: work_path, schema, }\n    dba.create_function name: 'udf', call: -> [ ( dba.query SQL\"select 42 as x;\" )..., ][ 0 ].x\n    try\n      dba.with_unsafe_mode call: -> console.table dba.list dba.query SQL\"select udf();\"\n      console.table dba.list dba.query SQL\"select udf();\"\n    catch error\n      if error.message is 'This database connection is busy executing a query'\n        T?.ok true\n      else\n        throw error\n    unless error?\n      T?.fail \"expected an error, but none was thrown; this could mean that better-sqlite3 has been updated to accept queries in UDFs using the same connection\"\n    return null\n  #.........................................................................................................\n  f2 = =>\n    new_sqlt          = require '../../../apps/icql-dba/node_modules/better-sqlite3'\n    sqlt1             = new_sqlt work_path\n    sqlt2             = new_sqlt work_path\n    urge '^4453^', { work_path, }\n    sqlt1.function 'udf', ->\n      s = sqlt2.prepare SQL\"select 42 as x;\"\n      return [ s.iterate()..., ][ 0 ].x\n    statement         = sqlt1.prepare SQL\"select udf();\"\n    result            = [ statement.iterate()..., ]\n    T.eq result, [ { 'udf()': 42 } ]\n    return null\n  #.........................................................................................................\n  f3 = =>\n    Db                = require '../../../apps/icql-dba/node_modules/better-sqlite3'\n    path              = 'file:memdb1?mode=memory&cache=shared'\n    sqlt1             = new Db path\n    sqlt2             = new Db path\n    urge '^4453^', { path, }\n    sqlt1.function 'udf', ->\n      s = sqlt2.prepare SQL\"select 42 as x;\"\n      return [ s.iterate()..., ][ 0 ].x\n    statement         = sqlt1.prepare SQL\"select udf();\"\n    result            = [ statement.iterate()..., ]\n    T.eq result, [ { 'udf()': 42 } ]\n    return null\n  #.........................................................................................................\n  f4 = =>\n    path              = 'file:memdb1?mode=memory&cache=shared'\n    dba               = new Dba(); dba.open { path, schema, }\n    dba2              = new Dba(); dba2.open { path, schema, }\n    urge '^4453^', { path, }\n    dba.create_function name: 'udf', call: ->\n      R = dba2.query SQL\"select 42 as x;\"\n      return [ R..., ][ 0 ].x\n    result            = dba.list dba.query SQL\"select udf();\"\n    T.eq result, [ { 'udf()': 42 } ]\n    return null\n  #.........................................................................................................\n  f1()\n  f2()\n  f3()\n  f4()\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: create_with_transaction()\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  #.........................................................................................................\n  do =>\n    dba = new Dba()\n    T?.throws /not a valid dba_create_with_transaction_cfg/, -> dba.create_with_transaction()\n  #.........................................................................................................\n  do =>\n    error = null\n    dba   = new Dba()\n    # dba.open { schema: 'main', }\n    create_table = dba.create_with_transaction call: ( cfg ) ->\n      help '^70^', \"creating a table with\", cfg\n      dba.execute SQL\"create table foo ( bar integer );\"\n      throw new Error \"oops\" if cfg.throw_error\n    #.......................................................................................................\n    try create_table { throw_error: true, } catch error\n      T?.ok error.message is \"oops\"\n      T?.eq ( dba.list dba.query \"select * from sqlite_schema;\" ), []\n    T.fail \"expected error but none was thrown\" unless error?\n    #.......................................................................................................\n    create_table { throw_error: false, }\n    T?.eq ( dba.all_first_values dba.query \"select name from sqlite_schema;\" ), [ 'foo', ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: with_transaction()\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  #.........................................................................................................\n  do =>\n    dba = new Dba()\n    T?.throws /not a valid dba_with_transaction_cfg/, -> dba.with_transaction()\n  #.........................................................................................................\n  do =>\n    error = null\n    dba   = new Dba()\n    try\n      dba.with_transaction call: ->\n        help '^70^', \"creating a table\"\n        dba.execute SQL\"create table foo ( bar integer );\"\n        throw new Error \"oops\"\n    catch error\n      warn error.message\n      T?.ok error.message is \"oops\"\n    T.fail \"expected error but none was thrown\" unless error?\n    T?.eq ( dba.list dba.query \"select * from sqlite_schema;\" ), []\n    #.......................................................................................................\n    dba.with_transaction call: ->\n      help '^70^', \"creating a table\"\n      dba.execute SQL\"create table foo ( bar integer );\"\n    #.......................................................................................................\n    T?.eq ( dba.all_first_values dba.query SQL\"select name from sqlite_schema;\" ), [ 'foo', ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: create_with_unsafe_mode()\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  #.........................................................................................................\n  do =>\n    dba = new Dba()\n    T?.throws /not a valid dba_create_with_unsafe_mode_cfg/, -> dba.create_with_unsafe_mode()\n  #.........................................................................................................\n  do =>\n    error = null\n    dba   = new Dba()\n    # dba.open { schema: 'main', }\n    dba.execute SQL\"create table foo ( n integer, is_new boolean default false );\"\n    for n in [ 10 .. 19 ]\n      dba.run SQL\"insert into foo ( n ) values ( $n );\", { n, }\n    do_more_inserts = dba.create_with_unsafe_mode call: ( cfg ) ->\n      for row from dba.query SQL\"select * from foo where not is_new;\"\n        dba.run SQL\"insert into foo ( n, is_new ) values ( $n, $is_new );\", { n: row.n * 3, is_new: 1, }\n      dba.execute SQL\"update foo set is_new = false where is_new;\"\n    #.......................................................................................................\n    do_more_inserts()\n    console.table rows = dba.list dba.query SQL\"select * from foo order by n;\"\n    result = ( d.n for d in rows )\n    T?.eq result, [ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57 ]\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # test @, { timeout: 10e3, }\n  # debug f '𠖏'\n  # test @[ \"DBA: concurrent UDFs\" ]\n  # @[ \"DBA: create_with_transaction()\" ]()\n  test @[ \"DBA: create_with_unsafe_mode()\" ]\n  # @[ \"DBA: with_transaction()\" ]()\n  # test @[ \"DBA: with_transaction()\" ]\n  # @[ \"DBA: concurrent UDFs\" ]()\n  # debug process.env[ 'icql-dba-use' ]\n  # debug process.argv\n"
  ]
}