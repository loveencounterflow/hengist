{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/extensions.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n{ to_width }              = require 'to-width'\nSQL                       = String.raw\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"load_extension\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  #---------------------------------------------------------------------------------------------------------\n  do =>\n    dba     = new Dba()\n    cfg     = H.get_cfg()\n    # dba.load_extension PATH.resolve PATH.join '/home/flow/jzr/hengist/dev/in-memory-sql/json1.so'\n    # # dba.load_extension PATH.resolve PATH.join '/home/flow/3rd-party-repos/sqlite/ext/fts5/fts5'\n    #.......................................................................................................\n    info '^334-1^', r1 = dba.list dba.query SQL\"\"\"select json(' { \"this\" : \"is\", \"a\": [ \"test\" ] } ') as d;\"\"\"\n    info '^334-1^', r2 = dba.list dba.query SQL\"\"\"select json_array(1,2,'3',4) as d;\"\"\"\n    T?.eq r1, [ { d: '{\"this\":\"is\",\"a\":[\"test\"]}' } ]\n    T?.eq r2, [ { d: '[1,2,\"3\",4]' } ]\n    return null\n  #---------------------------------------------------------------------------------------------------------\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SQLite math functions\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  #---------------------------------------------------------------------------------------------------------\n  do =>\n    dba     = new Dba()\n    cfg     = H.get_cfg()\n    # dba.load_extension PATH.resolve PATH.join '/home/flow/jzr/hengist/dev/in-memory-sql/json1.so'\n    # # dba.load_extension PATH.resolve PATH.join '/home/flow/3rd-party-repos/sqlite/ext/fts5/fts5'\n    #.......................................................................................................\n    info '^334-1^', r1 = dba.list dba.query SQL\"\"\"select sin( ? ) as d;\"\"\", [ Math.PI, ]\n    T?.eq r1, [ { d: 1.2246467991473532e-16 } ]\n    return null\n  #---------------------------------------------------------------------------------------------------------\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: sqlean vsv extension\" ] = ( T, done ) ->\n  ### see https://github.com/nalgeon/sqlean/blob/main/docs/vsv.md ###\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  schema            = 'main'\n  dba               = new Dba()\n  extension_path    = PATH.resolve PATH.join __dirname, '../../../assets/sqlite-extensions/vsv.so'\n  csv_path          = H.get_cfg().csv.holes\n  work_path         = await H.procure_file { path: csv_path, name: 'vsv-sample.csv', }\n  # debug '^857^', { csv_path, work_path, }\n  { I, L, V, }      = new ( require '../../../apps/icql-dba/lib/sql' ).Sql\n  #.........................................................................................................\n  await do =>\n    dba.load_extension extension_path\n    dba.run SQL\"\"\"\n      create virtual table myvsv using vsv(\n        filename  = #{L work_path},      -- the filename, passed to the Operating System\n        -- data=STRING         -- alternative data\n        -- schema=STRING       -- Alternate Schema to use\n        -- columns=N           -- columns parsed from the VSV file\n        -- header=BOOL         -- whether or not a header row is present\n        -- skip=N              -- number of leading data rows to skip\n        -- rsep=STRING         -- record separator\n        -- fsep=STRING         -- field separator\n        -- validatetext=BOOL   -- validate UTF-8 encoding of text fields\n        -- affinity=AFFINITY   -- affinity to apply to each returned value\n        nulls     = true                -- empty fields are returned as NULL\n        );\n      \"\"\" #, { csv_path, }\n    for row from dba.query SQL\"select * from myvsv;\"\n      info '^5554^', row\n    # dba.execute SQL\"insert into myvsv ( c0 ) values ( '1111' );\"\n  #.........................................................................................................\n  done()\n\n\n############################################################################################################\nunless module.parent?\n  # test @\n  # test @[ \"load_extension\" ]\n  test @[ \"SQLite math functions\" ]\n\n"
  ]
}