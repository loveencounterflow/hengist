{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/save-and-export.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n{ to_width }              = require 'to-width'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: save()\" ] = ( T, done ) ->\n  T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  #.........................................................................................................\n  cfg               = H.get_cfg()\n  cfg.ref           = 'save-export'\n  #.........................................................................................................\n  cfg.size          = 'small'\n  cfg.mode          = 'fle'\n  template_path_1   = H.interpolate cfg.db.templates[ cfg.size ], cfg\n  work_path_1       = H.interpolate cfg.db.work[      cfg.mode ], cfg\n  help \"^77-300^ work_path_1:  \", work_path_1\n  #.........................................................................................................\n  cfg.size          = 'big'\n  cfg.mode          = 'fle'\n  template_path_2   = H.interpolate cfg.db.templates[ cfg.size ], cfg\n  work_path_2       = H.interpolate cfg.db.work[      cfg.mode ], cfg\n  help \"^77-300^ work_path_2:  \", work_path_2\n  #.........................................................................................................\n  cfg.size          = 'new'\n  cfg.mode          = 'fle'\n  work_path_3       = H.interpolate cfg.db.work[      cfg.mode ], cfg\n  help \"^77-300^ work_path_3:  \", work_path_3\n  #.........................................................................................................\n  await do =>\n    path    = work_path_1\n    schema  = 's1'\n    await H.copy_over template_path_1, path\n    dba     = new Dba()\n    dba.open { path, schema, }\n    debug '^74487^', { template_path_1, }\n    debug '^74487^', { path, }\n    debug '^74487^', dba.sqlt\n\n  #   T.eq dba.get_schemas(), { main: '', s1: path, }\n  #   T.eq ( dba.is_empty { schema: 'main', } ), true\n  #   T.eq ( dba.is_empty { schema: 's1', } ), false\n  #   T.eq ( d.name for d from dba.walk_objects { schema, } ), [ 'sqlite_autoindex_keys_1', 'sqlite_autoindex_realms_1', 'sqlite_autoindex_sources_1', 'keys', 'main', 'realms', 'sources', 'dest_changes_backward', 'dest_changes_forward' ]\n  # #.........................................................................................................\n  # await do =>\n  #   path    = work_path_1\n  #   schema  = 'foo'\n  #   await H.copy_over template_path_1, path\n  #   dba     = new Dba()\n  #   dba.open { path, schema, }\n  #   help '^298789^', dba.get_schemas()\n  #   T.eq dba.get_schemas(), { main: '', [schema]: path, }\n  #   T.eq dba.is_empty { schema: 'main', }, true\n  #   T.eq dba.is_empty { schema, }, false\n  #   T.eq ( d.name for d from dba.walk_objects { schema, } ), [ 'sqlite_autoindex_keys_1', 'sqlite_autoindex_realms_1', 'sqlite_autoindex_sources_1', 'keys', 'main', 'realms', 'sources', 'dest_changes_backward', 'dest_changes_forward' ]\n  # #.........................................................................................................\n  # await do =>\n  #   schema_1  = 'datamill'\n  #   schema_2  = 'chinook'\n  #   await H.copy_over template_path_1, work_path_1\n  #   await H.copy_over template_path_2, work_path_2\n  #   dba       = new Dba { path: work_path_1, schema: schema_1, }\n  #   debug '^567^', dba\n  #   debug '^567^', ( k for k of dba )\n  #   debug '^567^', dba.open { path: work_path_2, schema: schema_2, }\n  #   help '^58733^', dba.get_schemas()\n  #   # T.eq dba.get_schemas(), { main: '', [schema]: path, }\n  #   T.eq dba.is_empty { schema: 'main', }, true\n  #   T.eq dba.is_empty { schema: schema_1, }, false\n  #   T.eq dba.is_empty { schema: schema_2, }, false\n  #   T.eq ( d.name for d from dba.walk_objects { schema: schema_1, } ), [ 'sqlite_autoindex_keys_1', 'sqlite_autoindex_realms_1', 'sqlite_autoindex_sources_1', 'keys', 'main', 'realms', 'sources', 'dest_changes_backward', 'dest_changes_forward' ]\n  # #.........................................................................................................\n  # await do =>\n  #   ### use `Dba.open()` without arguments, get empty RAM DB in schema `main` ###\n  #   schema_1  = 'datamill'\n  #   schema_2  = 'chinook'\n  #   schema_3  = 'new'\n  #   await H.copy_over template_path_1, work_path_1\n  #   await H.copy_over template_path_2, work_path_2\n  #   await H.try_to_remove_file work_path_3\n  #   dba       = new Dba()\n  #   dba.open { path: work_path_1, schema: schema_1, }\n  #   dba.open { path: work_path_2, schema: schema_2, }\n  #   dba.open { path: work_path_3, schema: schema_3, }\n  #   help '^58733^', dba.get_schemas()\n  #   # T.eq dba.get_schemas(), { main: '', [schema]: path, }\n  #   T.eq dba.is_empty { schema: 'main', }, true\n  #   T.eq dba.is_empty { schema: schema_1, }, false\n  #   T.eq dba.is_empty { schema: schema_2, }, false\n  #   T.eq ( d.name for d from dba.walk_objects { schema: schema_1, } ), [ 'sqlite_autoindex_keys_1', 'sqlite_autoindex_realms_1', 'sqlite_autoindex_sources_1', 'keys', 'main', 'realms', 'sources', 'dest_changes_backward', 'dest_changes_forward' ]\n  #   dba.execute \"create table new.t ( id integer );\"\n  #   dba.execute \"insert into new.t values ( #{n} );\" for n in [ 1 .. 9 ]\n  #   T.eq ( dba.list dba.first_values dba.query \"select * from new.t;\" ), [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n  # #.........................................................................................................\n  # await do =>\n  #   ### test whether data from previous test was persisted ###\n  #   schema_3  = 'new'\n  #   dba       = new Dba()\n  #   dba.open { path: work_path_3, schema: schema_3, }\n  #   T.eq ( dba.list dba.first_values dba.query \"select * from new.t;\" ), [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n  # #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"dba has associated property path\" ] = ( T, done ) ->\n  T.halt_on_error()\n  trash             = require 'trash'\n  TMP               = require 'tempy'\n  { Dba }           = require '../../../apps/icql-dba'\n  #.........................................................................................................\n  help \"#1\"\n  await do =>\n    try\n      path = TMP.file { extension: 'db', }\n      help \"^4758^ opening DB at #{rpr path}\"\n      dba   = new Dba { path, }\n      debug '^868943^', dba\n      T.eq dba._schemas.main.path, path\n    finally\n      warn \"removing #{path}\"\n      await trash path ### NOTE `trash` command is async, consider to `await` ###\n      warn \"... done removing #{path}\"\n    return null\n  #.........................................................................................................\n  help \"#2\"\n  await do =>\n    path  = ''\n    dba   = new Dba { path, }\n    debug '^868943^', dba\n    T.eq dba._schemas.main.path, path\n    return null\n  #.........................................................................................................\n  help \"#3\"\n  await do =>\n    cfg               = H.get_cfg()\n    cfg.ref           = 'save-export'\n    cfg.size          = 'small'\n    cfg.mode          = 'fle'\n    template_path_1   = H.interpolate cfg.db.templates[ cfg.size ], cfg\n    work_path_1       = H.interpolate cfg.db.work[      cfg.mode ], cfg\n    await H.copy_over template_path_1, work_path_1\n    # debug '^868943^', cfg\n    path  = ':memory:'\n    dba   = new Dba { path, }\n    dba.open { path: work_path_1, schema: 'datamill', }\n    debug '^868943^', dba._schemas\n    T.eq dba._schemas.main.path, path\n    return null\n  #.........................................................................................................\n  done()\n\n\n############################################################################################################\nunless module.parent?\n  # test @\n  # test @[ \"DBA: save()\" ]\n  test @[ \"dba has associated property path\" ]\n\n\n\n\n"
  ]
}