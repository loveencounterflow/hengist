{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/save-and-export.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/SAVE-AND-EXPORT'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n{ to_width }              = require 'to-width'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: save() RAM DB\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  ramdb_path        = null\n  matcher           = null\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    dba               = new Dba()\n    { template_path\n      work_path }     = await H.procure_db { size: 'micro', ref: 'F-save-1', }\n    schema            = 'ramdb'\n    ramdb_path        = work_path\n    digest_1          = CND.id_from_route work_path\n    dba.open { path: work_path, schema, ram: true, }\n    debug '^422423^', dba._schemas\n    T.ok dba.is_ram_db { schema, }\n    #.......................................................................................................\n    dba.execute \"create table ramdb.d ( id integer, t text );\"\n    for id in [ 1 .. 9 ]\n      dba.run \"insert into d values ( ?, ? );\", [ id, \"line Nr. #{id}\", ]\n    matcher           = dba.list dba.query \"select * from ramdb.d order by id;\"\n    #.......................................................................................................\n    digest_2          = CND.id_from_route work_path\n    T.eq digest_1, digest_2\n    T.throws /\\(Dba_argument_not_allowed\\) argument path not allowed/, =>\n      dba.save { path: '/tmp/x', schema: 'xxx' }\n    dba.save { schema, }\n    #.......................................................................................................\n    digest_3          = CND.id_from_route work_path\n    T.ok not types.equals digest_1, digest_3\n    #.......................................................................................................\n    T.ok dba.is_ram_db { schema, }\n    return null\n  #.........................................................................................................\n  await do =>\n    ### Check whether file DB was updated by `dba.save()` ###\n    dba               = new Dba()\n    schema            = 'filedb'\n    dba.open { path: ramdb_path, schema, ram: false, }\n    probe             = dba.list dba.query \"select * from filedb.d order by id;\"\n    T.eq probe, matcher\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: export() RAM DB\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  ramdb_path        = null\n  matcher           = null\n  export_path       = H.nonexistant_path_from_ref 'export-ram-db'\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    dba               = new Dba()\n    { template_path\n      work_path }     = await H.procure_db { size: 'micro', ref: 'F-save-1', }\n    schema            = 'ramdb'\n    ramdb_path        = work_path\n    dba.open { path: work_path, schema, ram: true, }\n    #.......................................................................................................\n    dba.execute \"create table ramdb.d ( id integer, t text );\"\n    for id in [ 1 .. 9 ]\n      dba.run \"insert into d values ( ?, ? );\", [ id, \"line Nr. #{id}\", ]\n    matcher           = dba.list dba.query \"select * from ramdb.d order by id;\"\n    #.......................................................................................................\n    T.throws /\\(Dba_argument_not_allowed\\) argument path not allowed/, =>\n      dba.save { path: '/tmp/x', schema: 'xxx' }\n    dba.export { schema, path: export_path, }\n    #.......................................................................................................\n    return null\n  # #.........................................................................................................\n  # await do =>\n  #   ### Check whether file DB was updated by `dba.save()` ###\n  #   dba               = new Dba()\n  #   schema            = 'filedb'\n  #   dba.open { path: ramdb_path, schema, ram: false, }\n  #   probe             = dba.list dba.query \"select * from filedb.d order by id;\"\n  #   T.eq probe, matcher\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: import() CSV\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  # ramdb_path        = null\n  matcher           = null\n  export_path       = H.nonexistant_path_from_ref 'import-csv'\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    dba               = new Dba()\n    import_path       = H.get_cfg().csv.small\n    schema            = 'chlex'\n    columns           = null\n    seen_chrs         = new Set()\n    table_columns     = [\n      'C1'\n      'C1Type'\n      'C1Pinyin'\n      'C1PRPinyin'\n      'C1Strokes'\n      'C1Pixels'\n      'C1PictureSize'\n      'C1SR'\n      'C1PR'\n      ]\n    transform         = ( d ) ->\n      return [] if seen_chrs.has d.row.C1\n      seen_chrs.add d.row.C1\n      return d.stop if seen_chrs.size > 100\n      # debug '^4454^', d.row\n      row       = {}\n      for column in table_columns\n        value         = d.row[ column ]\n        value         = if value is 'NA' then null else value\n        # debug '^4448^', column, value, r\n        # switch column\n        #   # when 'C1Pixels'       then ( parseFloat value ) / 1000\n        #   # when 'C1PictureSize'  then ( parseFloat value ) / 1000\n        #   when 'complexity'\n        #     value = ( parseFloat row.C1Pixels ) * ( parseFloat row.C1PictureSize ) * ( parseFloat row.C1Strokes )\n        #     value = value / 1e6\n        #     value = Math.max value, 1\n        #     value = value.toFixed 0\n        #     value = value.padStart 5, '0'\n        #   else null\n        row[ column ] = value\n      return [ row, ]\n    #.......................................................................................................\n    cfg =\n      schema:         schema\n      transform:      transform\n      path:           import_path\n      format:         'csv'\n      input_columns:  true\n      table_columns:  table_columns\n      skip_first:     true\n      ram:            true\n    await dba.import cfg\n    #.......................................................................................................\n    dba.execute \"alter table chlex.main add column cpx_raw integer;\"\n    dba.execute \"alter table chlex.main add column cpx integer;\"\n    dba.execute \"update chlex.main set cpx_raw = C1Strokes * C1Pixels * C1PictureSize;\"\n    cpxr_max    = dba.single_value dba.query \"select max( cpx_raw ) from chlex.main;\"\n    cpxr_min    = dba.single_value dba.query \"select min( cpx_raw ) from chlex.main;\"\n    cpxr_delta  = cpxr_max - cpxr_min\n    # cpx_min     = 10\n    cpx_min     = 0\n    cpx_max     = 99\n    precision   = 0\n    cpx_delta   = cpx_max - cpx_min\n    debug '^7946^', { cpxr_max, }\n    update  = dba.prepare \"\"\"\n      update chlex.main set\n        cpx = round(\n          ( cpx_raw - $cpxr_min ) / $cpxr_delta * $cpx_delta + $cpx_min,\n          $precision );\n      \"\"\"\n    # update  = dba.prepare \"update chlex.main set cpx = max( round( cpx_raw / ? * 99, 0 ), 1 );\"\n    # update  = dba.prepare \"update chlex.main set cpx = cpx_raw / ?;\"\n    update.run { cpxr_min, cpxr_max, cpxr_delta, cpx_min, cpx_max, cpx_delta, precision, }\n    #.......................................................................................................\n    # matcher = dba.list dba.query \"\"\"select C1Type, C1, C1SR, C1PR, cpx from chlex.main order by cpx, cpx_raw asc;\"\"\"\n    matcher = dba.list dba.query \"\"\"select C1Type, C1, cpx from chlex.main order by cpx, cpx_raw asc;\"\"\"\n    # matcher = dba.list dba.query \"\"\"select * from chlex.main order by cpx, cpx_raw asc;\"\"\"\n    # for row in matcher\n    console.table matcher\n    dba.export { schema, path: export_path, }\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: import() TSV\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  # ramdb_path        = null\n  matcher           = null\n  export_path       = H.nonexistant_path_from_ref 'import-tcsv'\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    dba               = new Dba()\n    import_path       = H.get_cfg().tsv.micro\n    schema            = 'tsv'\n    transform         = ( d ) ->\n      # return d.stop if seen_chrs.size > 10\n      { row } = d\n      info '^4454^', row\n      return null unless row.ncr? and row.glyph? and row.wbf?\n      row.wbf = row.wbf.replace /^<(.*)>$/, '$1'\n      return row\n    #.......................................................................................................\n    cfg =\n      schema:         schema\n      transform:      transform\n      path:           import_path\n      format:         'csv'\n      input_columns:  true\n      # input_columns:  [ 'a', 'b', 'c', ]\n      # table_columns:  [ 'a', 'b', 'c', ]\n      # table_columns:  { a: 'integer', b: 'integer', c: 'text', }\n      skip_first:     true\n      ram:            true\n      _extra:\n        # headers:    true\n        separator:  '\\t'\n        # mapHeaders: ( { header, index, } ) -> header.toUpperCase()\n    urge '^22432^', await dba.import cfg\n    #.......................................................................................................\n    matcher = dba.list dba.query \"\"\"select * from tsv.main order by 1, 2, 3;\"\"\"\n    console.table matcher\n    dba.export { schema, path: export_path, }\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"___ DBA: import() (big file)\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  # ramdb_path        = null\n  matcher           = null\n  export_path       = H.nonexistant_path_from_ref 'import-csv'\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    dba               = new Dba()\n    import_path       = PATH.resolve PATH.join __dirname, '../../../assets/jizura-datasources/data/flat-files/shape/shape-strokeorder-zhaziwubifa.txt'\n    # import_path       = PATH.resolve PATH.join __dirname, '../../../assets/icql/ncrglyphwbf.tsv'\n    schema            = 'wbf'\n    columns           = null\n    seen_chrs         = new Set()\n    count             = 0\n    transform         = null\n    #.......................................................................................................\n    transform         = ( d ) ->\n      count++\n      { ncr\n        glyph\n        wbf } = d.row\n      return null if ( not ncr? ) or ( not glyph? ) or ( not wbf? )\n      return null unless ( match = wbf.match /^<(?<wbf>[0-9]+)>$/ )?\n      { wbf, } = match.groups\n      return d.stop if count > 1000\n      return { ncr, glyph, wbf, }\n    #.......................................................................................................\n    _extra =\n      delimiter:                '\\t'\n      # columns:                  [ 'ncr', 'glyph', 'wbf', ]\n      relax_column_count:       true\n      # relax_column_count_less:  true\n      # relax_column_count_more:  true\n    columns = [ 'ncr', 'glyph', 'wbf', ]\n    t0 = Date.now()\n    dba.import { path: import_path, format: 'csv', schema, ram: true, transform, _extra, columns, }\n    t1 = Date.now()\n    debug '^44545^', \"dt:\", ( t1 - t0 ) / 1000\n    matcher = dba.list dba.query \"\"\"select * from wbf.main order by wbf limit 1000;\"\"\"\n    for row in matcher\n      info row\n    #.......................................................................................................\n    sql = \"\"\"\n      select\n        glyph as glyph,\n        cast( substring( wbf, 1, 1 ) as integer ) +\n          cast( substring( wbf, -1, 1 ) as integer ) as wbfs\n      from wbf.main\n      order by wbfs;\n      \"\"\"\n    for row from dba.query sql\n      info row\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"___ DBA: import() (four corner)\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  # ramdb_path        = null\n  matcher           = null\n  export_path       = H.nonexistant_path_from_ref 'import-csv'\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    dba               = new Dba()\n    import_path       = PATH.resolve PATH.join __dirname, '../../../../../io/mingkwai-rack/jizura-datasources/data/flat-files/shape/shape-fourcorner-wikipedia.txt'\n    # import_path       = PATH.resolve PATH.join __dirname, '../../../assets/icql/ncrglyphwbf.tsv'\n    schema            = 'fc'\n    columns           = null\n    seen_chrs         = new Set()\n    count             = 0\n    transform         = null\n    #.......................................................................................................\n    transform         = ( d ) ->\n      # debug '^44554^', d\n      count++\n      # return d.stop if count > 100\n      ### TAINT must specify columns for source, target separately ###\n      { fc4\n        fcx } = d.row\n      { lnr } = d\n      return null if ( not fc4? ) or ( not fcx? )\n      fc      = fc4\n      glyphs  = fcx\n      glyphs  = Array.from glyphs\n      unless ( match = fc.match /^(?<fc4>[0-9]+)(-(?<fcx>[0-9]))?$/ )?\n        warn \"^334^ omitted: #{rpr d}\"\n        return null\n      { fc4\n        fcx } = match.groups\n      return ( { fc4, fcx, glyph, } for glyph in glyphs )\n    #.......................................................................................................\n    _extra =\n      delimiter:                '\\t'\n      # columns:                  [ 'ncr', 'glyph', 'wbf', ]\n      relax_column_count:       true\n      # relax_column_count_less:  true\n      # relax_column_count_more:  true\n    ### TAINT must specify columns for source, target separately ###\n    columns = [ 'fc4', 'fcx', 'glyph', ]\n    t0 = Date.now()\n    dba.import { path: import_path, format: 'csv', schema, ram: true, transform, _extra, columns, }\n    t1 = Date.now()\n    debug '^44545^', \"dt:\", ( t1 - t0 ) / 1000\n    #.......................................................................................................\n    matcher = dba.list dba.query \"\"\"select * from fc.main where fc4 like '_3__' order by fc4, fcx limit 10;\"\"\"\n    for row in matcher\n      info \"#{row.fc4} #{row.glyph}\"\n    #.......................................................................................................\n    clauses       = []\n    with_clauses  = []\n    for idx in [ 0 .. 3 ]\n      for digit in [ 0 .. 9 ]\n        position  = idx + 1\n        pattern   = ( '_'.repeat idx ) + ( \"#{digit}\" ) + ( '_'.repeat 3 - idx )\n        with_clauses.push \"v#{position}#{digit} as ( select count(*) as c from fc.main where fc4 like '#{pattern}' )\"\n    clauses.push \"with #{with_clauses.join ',\\n'}\\n\"\n    clauses.push \"\"\"select null as c, null as p1, null as p2, null as p3, null as p4 where false union all\"\"\"\n    for digit in [ 0 .. 9 ]\n      clauses.push \"\"\"select #{digit}, v1#{digit}.c, v2#{digit}.c, v3#{digit}.c, v4#{digit}.c from v1#{digit}, v2#{digit}, v3#{digit}, v4#{digit} union all\"\"\"\n    clauses.push \"\"\"select null, null, null, null, null where false;\"\"\"\n    sql = clauses.join '\\n'\n    # debug '^348^', sql\n    for row from dba.query sql\n      info row\n  #.........................................................................................................\n  done()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: import TSV; cfg variants 1\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  matcher           = null\n  import_path       = H.get_cfg().tsv.micro\n  #.........................................................................................................\n  whisper '-'.repeat 108\n  dba               = new Dba()\n  schema            = 'tsv'\n  # input_columns     = null\n  table_columns     = [ 'c1', 'c2', 'c3', ]\n  transform         = null\n  is_first          = true\n  #.........................................................................................................\n  transform         = ( d ) ->\n    debug '^58471^', d.row\n    T.eq ( type_of d.row ), 'object'\n    { ncr, glyph, wbf, } = d.row\n    return null if ( not ncr? ) or ( not glyph? ) or ( not wbf? )\n    return null unless ( match = wbf.match /^<(?<wbf>[0-9]+)>$/ )?\n    wbf = match.groups.wbf\n    return { c1: ncr, c2: glyph, c3: wbf, }\n    # return { ncr, glyph, wbf, }\n  #.........................................................................................................\n  cfg =\n    schema:         schema\n    transform:      transform\n    path:           import_path\n    format:         'csv'\n    input_columns:  true\n    table_columns:  { c1: 'text', c2: 'text', c3: 'text', }\n    # columns = [ 'ncr', 'glyph', 'wbf', ]\n    # skip_first:     true\n    ram:            true\n    _extra:\n      separator:                '\\t'\n      # columns:                  [ 'ncr', 'glyph', 'wbf', ]\n      # quotes:                   false ?????????\n      # relax_column_count:       true\n  await dba.import cfg\n  #.........................................................................................................\n  matcher = dba.list dba.query \"\"\"select * from tsv.main order by 1, 2, 3;\"\"\"\n  # debug '^5697^', matcher\n  console.table matcher\n  T.eq matcher.length,      12\n  T.eq matcher[ 0 ].c1,     'u-cjk-xa-3413'\n  T.eq matcher[ 0 ].c2,     '㐓'\n  T.eq matcher[ 0 ].c3,     '125125'\n  # T.eq matcher[ 0 ].ncr,    'u-cjk-xa-3413'\n  # T.eq matcher[ 0 ].glyph,  '㐓'\n  # T.eq matcher[ 0 ].wbf,    '125125'\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: import TSV; cfg variants 2\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  matcher           = null\n  import_path       = H.get_cfg().tsv.micro\n  #.........................................................................................................\n  whisper '-'.repeat 108\n  dba               = new Dba()\n  schema            = 'tsv'\n  transform         = null\n  is_first          = true\n  #.........................................................................................................\n  transform         = ( d ) ->\n    urge '^58472^', d.row\n    { ncr, glyph, wbf, } = d.row\n    T.eq ( type_of d.row ), 'object'\n    # return null if ( not ncr? ) or ( not glyph? ) or ( not wbf? )\n    # if not wbf? then T.fail \"^3455^ invalid row #{rpr d.row}\"; return null\n    return null unless ( match = wbf.match /^<(?<wbf>[0-9]+)>$/ )?\n    wbf = match.groups.wbf\n    return { c1: ncr, c2: glyph, c3: wbf, }\n  #.........................................................................................................\n  cfg =\n    schema:         schema\n    transform:      transform\n    path:           import_path\n    format:         'tsv'\n    skip_any_null:  true\n    # skip_all_null:  true\n    input_columns:  true\n    table_columns:  { c1: 'text', c2: 'text', c3: 'text', }\n    ram:            true\n  await dba.import cfg\n  #.........................................................................................................\n  matcher = dba.list dba.query \"\"\"select * from tsv.main order by 1, 2, 3;\"\"\"\n  # matcher = dba.list dba.query \"\"\"select * from tsv.main;\"\"\"\n  # debug '^5697^', matcher\n  console.table matcher\n  T.eq matcher.length,      12\n  T.eq matcher[ 0  ].c1,    'u-cjk-xa-3413'\n  T.eq matcher[ 0  ].c2,    '㐓'\n  T.eq matcher[ 0  ].c3,    '125125'\n  T.eq matcher[ 11 ].c1,    'u-cjk-xa-3566'\n  T.eq matcher[ 11 ].c2,    '㕦'\n  T.eq matcher[ 11 ].c3,    '251134'\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: import TSV; cfg variants 3\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  matcher           = null\n  import_path       = H.get_cfg().tsv.micro\n  #.........................................................................................................\n  whisper '-'.repeat 108\n  dba               = new Dba()\n  schema            = 'tsv'\n  transform         = null\n  is_first          = true\n  #.........................................................................................................\n  transform         = ( d ) ->\n    urge '^58472^', d.row\n    { ncr, glyph, wbf, } = d.row\n    T.eq ( type_of d.row ), 'object'\n    # return null if ( not ncr? ) or ( not glyph? ) or ( not wbf? )\n    if not wbf? then T.fail \"^3455^ invalid row #{rpr d.row}\"; return null\n    return null unless ( match = wbf.match /^<(?<wbf>[0-9]+)>$/ )?\n    wbf = match.groups.wbf\n    return { ncr, glyph, wbf, }\n  #.........................................................................................................\n  cfg =\n    schema:         schema\n    transform:      transform\n    path:           import_path\n    format:         'tsv'\n    skip_all_null:  true\n    skip_comments:  true\n    input_columns:  true\n    ram:            true\n  await dba.import cfg\n  #.........................................................................................................\n  matcher = dba.list dba.query \"\"\"select * from tsv.main order by 1, 2, 3;\"\"\"\n  # matcher = dba.list dba.query \"\"\"select * from tsv.main;\"\"\"\n  # debug '^5697^', matcher\n  console.table matcher\n  T.eq matcher.length,      12\n  T.eq matcher[ 0  ].ncr,   'u-cjk-xa-3413'\n  T.eq matcher[ 0  ].glyph, '㐓'\n  T.eq matcher[ 0  ].wbf,   '125125'\n  T.eq matcher[ 11 ].ncr,   'u-cjk-xa-3566'\n  T.eq matcher[ 11 ].glyph, '㕦'\n  T.eq matcher[ 11 ].wbf,   '251134'\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: import TSV; cfg variants 4\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  matcher           = null\n  import_path       = H.get_cfg().tsv.holes\n  #.........................................................................................................\n  whisper '-'.repeat 108\n  dba               = new Dba()\n  schema            = 'tsv'\n  transform         = null\n  is_first          = true\n  #.........................................................................................................\n  transform         = ( d ) ->\n    urge '^58472^', d.row\n    { lnr, ncr, glyph, wbf, } = d.row\n    lnr = parseInt lnr, 10\n    return { lnr, ncr, glyph, wbf, }\n  #.........................................................................................................\n  cfg =\n    schema:         schema\n    transform:      transform\n    path:           import_path\n    # skip_all_null:  true\n    skip_comments:  false\n    default_value:  'EMPTY'\n    input_columns:  true\n    table_columns:  { lnr: 'integer', ncr: 'text', glyph: 'text', wbf: 'text', }\n    ram:            true\n  await dba.import cfg\n  #.........................................................................................................\n  matcher = dba.list dba.query \"\"\"select * from tsv.main order by 1, 2, 3;\"\"\"\n  # matcher = dba.list dba.query \"\"\"select * from tsv.main;\"\"\"\n  debug '^5697^', matcher\n  console.table matcher\n  T.eq matcher, [\n    { lnr: 1, ncr: 'EMPTY', glyph: 'EMPTY', wbf: 'EMPTY' }\n    { lnr: 2, ncr: '# this line to be discarded', glyph: 'EMPTY', wbf: 'EMPTY' }\n    { lnr: 3, ncr: 'EMPTY', glyph: 'EMPTY', wbf: 'EMPTY' }\n    { lnr: 4, ncr: '\"a line with \\\\\"quotes\\\\\"\"', glyph: 'nothing', wbf: 'empty' }\n    { lnr: 5, ncr: 'u-cjk-xa-3413', glyph: '㐓', wbf: '<125125>' }\n    { lnr: 6, ncr: 'u-cjk-xa-3414', glyph: '㐔', wbf: '<412515>' }\n    { lnr: 7, ncr: 'u-cjk-xa-3415', glyph: '㐕', wbf: '<251215>' }\n    { lnr: 8, ncr: 'u-cjk-xa-3416', glyph: '㐖', wbf: '<1212515>' }\n    { lnr: 9, ncr: 'EMPTY', glyph: '㐗', wbf: '<1213355>' }\n    { lnr: 10, ncr: 'u-cjk-xa-34ab', glyph: 'EMPTY', wbf: '<121135>' }\n    { lnr: 11, ncr: 'u-cjk-xa-342a', glyph: '㐪', wbf: 'EMPTY' }\n    { lnr: 12, ncr: 'u-cjk-xa-342b', glyph: '㐫', wbf: '<413452>' }\n    { lnr: 13, ncr: 'u-cjk-xa-3563', glyph: '㕣', wbf: '<34251>' }\n    { lnr: 14, ncr: 'u-cjk-xa-3564', glyph: '㕤', wbf: '<25135>' }\n    { lnr: 15, ncr: 'u-cjk-xa-3565', glyph: '㕥', wbf: '<25134>' }\n    { lnr: 16, ncr: 'u-cjk-xa-3566', glyph: '㕦', wbf: '<251134>' }\n    { lnr: 17, ncr: 'EMPTY', glyph: 'EMPTY', wbf: 'EMPTY' } ]\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: import CSV; cfg variants 5\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  matcher           = null\n  import_path       = H.get_cfg().csv.holes\n  #.........................................................................................................\n  whisper '-'.repeat 108\n  dba               = new Dba()\n  schema            = 'csv'\n  transform         = null\n  is_first          = true\n  #.........................................................................................................\n  transform         = ( d ) ->\n    urge '^58472^', d.row\n    { lnr, ncr, glyph, wbf, } = d.row\n    lnr = parseInt lnr, 10\n    return { lnr, ncr, glyph, wbf, }\n  #.........................................................................................................\n  cfg =\n    schema:         schema\n    transform:      transform\n    path:           import_path\n    # skip_all_null:  true\n    skip_comments:  true\n    default_value:  null\n    input_columns:  true\n    table_columns:  { lnr: 'integer', ncr: 'text', glyph: 'text', wbf: 'text', }\n    ram:            true\n  await dba.import cfg\n  #.........................................................................................................\n  matcher = dba.list dba.query \"\"\"select * from csv.main order by 1, 2, 3;\"\"\"\n  # matcher = dba.list dba.query \"\"\"select * from csv.main;\"\"\"\n  debug '^5697^', matcher\n  console.table matcher\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: import TSV; big file\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  matcher           = null\n  import_path       = '../../../assets/jzrds/shape/shape-breakdown-formula-v2.txt'\n  import_path       = PATH.resolve PATH.join __dirname, import_path\n  debug '^343^', import_path\n  #.........................................................................................................\n  whisper '-'.repeat 108\n  dba               = new Dba()\n  schema            = 'formulas'\n  transform         = null\n  is_first          = true\n  count             = 0\n  transform         = null\n  #.........................................................................................................\n  transform         = ( d ) ->\n    count++\n    # return null if count < 15_000\n    return d.stop if count > 15_100\n    urge '^346664^', count if count %% 1000 is 0\n    { ncr, glyph, formula, } = d.row\n    elements = null\n    elements = formula.replace ///(&[a-z0-9\\x23]+;|.)///gu, '\"$1\",'\n    elements = elements[ ... elements.length - 1 ]\n    elements = \"[#{elements}]\"\n    # debug '^4697^', { ncr, glyph, formula, elements, }\n    return { ncr, glyph, formula, elements, }\n  #.........................................................................................................\n  import_cfg =\n    schema:         schema\n    transform:      transform\n    format:         'tsv'\n    path:           import_path\n    # skip_all_null:  true\n    skip_comments:  true\n    default_value:  null\n    input_columns:  [ 'ncr', 'glyph', 'formula', ]\n    table_columns:  [ 'ncr', 'glyph', 'formula', 'elements', ]\n    # table_columns:  { lnr: 'integer', ncr: 'text', glyph: 'text', wbf: 'text', }\n    ram:            true\n  await dba.import import_cfg\n  console.table dba.list dba.query \"\"\"select * from formulas.main limit 10;\"\"\"\n  #.........................................................................................................\n  urge '^4486^', \"updating...\"\n  #.........................................................................................................\n  non_components = new Set Array.from \"()[]§'≈'●⿰⿱⿲⿳⿴⿵⿶⿷⿸⿹⿺⿻〓≈ ↻↔ ↕ ▽\"\n  spread_cfg =\n    columns: [ 'nr', 'element', ]\n    parameters: [ 'elements', ]\n    rows: ( elements ) ->\n      elements    = JSON.parse elements\n      # components  = ( d for d in components when not non_components.has d )\n      for element, idx in elements\n        yield [ idx + 1, element, ]\n      return null\n  dba.sqlt.table 'spread', spread_cfg\n  # console.table dba.list dba.query \"\"\"select glyph, formula, spread( elements ) from main;\"\"\"\n  dba.execute \"\"\"create table formulas.elements (\n    glyph text    not null,\n    nr1   integer not null,\n    nr2   integer default 0,\n    nr3   integer default 0,\n    nr4   integer default 0,\n    nr5   integer default 0,\n    nr6   integer default 0,\n    e1    text    not null,\n    e2    text,\n    e3    text,\n    e4    text,\n    e5    text,\n    e6    text );\"\"\"\n  urge '^4486^', \"inserting elements level 1\"\n  dba.execute \"\"\"\n    insert into formulas.elements ( glyph, nr1, e1 ) select\n        v1.glyph    as glyph,\n        v2.nr       as nr1,\n        v2.element  as e1\n      from\n        main                  as v1,\n        spread( v1.elements ) as v2\n      -- limit 500\n      ;\"\"\"\n  urge '^4486^', \"inserting elements level 2\"\n  dba.execute \"\"\"\n    insert into formulas.elements ( glyph, nr1, nr2, e1, e2 ) select\n        v1.glyph    as glyph,\n        v1.nr1      as nr1,\n        v2.nr1      as nr2,\n        v1.e1       as e1,\n        v2.e1       as e2\n      from\n        formulas.elements     as v1\n      join\n        formulas.elements     as v2\n        on ( true\n          and ( v1.glyph  = v2.glyph  )\n          and ( v1.nr1    = v2.nr1    ) )\n      limit 500\n      ;\"\"\"\n  console.table dba.list dba.query \"\"\"select * from formulas.elements limit 10;\"\"\"\n  console.table dba.list dba.query \"\"\"select * from formulas.elements where glyph in ( '凁', '凂', '一', '凃', '丁', '凄', '丂', '凲', '並' ) order by nr1, nr2;\"\"\"\n  # console.table dba.list dba.query \"\"\"\n  #   select\n  #       v1.ncr,\n  #       v1.glyph,\n  #       v1.formula,\n  #       v2.nr,\n  #       v2.element\n  #     from\n  #       main                  as v1,\n  #       spread( v1.elements ) as v2\n  #     limit 500;\"\"\"\n  # dba.execute \"\"\"\n  #   create view formulas.occurrences as select 1;\"\"\"\n  # dba.execute \"\"\"update formulas.main set xformula0 = glyph || '[' || formula || ']';\"\"\"\n  # dba.execute \"\"\"update formulas.main set xformula = glyph || '[' || formula || ']';\"\"\"\n  #.........................................................................................................\n  # matcher = dba.list dba.query \"\"\"\n  #   select\n  #       *\n  #     from formulas.main\n  #     where true\n  #       and ( glyph not like '&%' )\n  #       and ( formula not in ( '∅', '▽', '●' ) )\n  #       and ( formula not like '%(%' )\n  #       and ( formula not like '%&%' )\n  #     order by formula\n  #     limit 300;\"\"\"\n  # debug '^5697^', matcher\n  formula_count     = dba.first_value dba.query \"\"\"select count(*) from formulas.main;\"\"\"\n  export_path       = H.nonexistant_path_from_ref 'export-formulas'\n  help \"^343589^ exporting #{formula_count} formulas to #{export_path}\"\n  dba.export { schema, path: export_path, }\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"___ DBA: safe eventual persistency\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  matcher           = null\n  import_path       = H.get_cfg().csv.holes\n  #.........................................................................................................\n  dba               = new Dba()\n  schema            = 'csv'\n  transform         = null\n  is_first          = true\n  #.........................................................................................................\n  transform         = ( d ) ->\n    urge '^58472^', d.row\n    { lnr, ncr, glyph, wbf, } = d.row\n    lnr = parseInt lnr, 10\n    return { lnr, ncr, glyph, wbf, }\n  #.........................................................................................................\n  cfg =\n    schema:         schema\n    transform:      transform\n    path:           import_path\n    # skip_all_null:  true\n    skip_comments:  true\n    default_value:  null\n    input_columns:  true\n    table_columns:  { lnr: 'integer', ncr: 'text', glyph: 'text', wbf: 'text', }\n    ram:            true\n  await dba.import cfg\n  #.........................................................................................................\n  matcher = dba.list dba.query \"\"\"select * from csv.main order by 1, 2, 3;\"\"\"\n  # matcher = dba.list dba.query \"\"\"select * from csv.main;\"\"\"\n  debug '^5697^', matcher\n  console.table matcher\n  process.once 'uncaughtException',  exit_handler\n  process.once 'unhandledRejection', exit_handler\n  #.........................................................................................................\n  done()\n\n\n############################################################################################################\nunless module.parent?\n  test @\n  # test @[ \"DBA: save()\" ]\n  # test @[ \"dba has associated property path\" ]\n\n\n\n\n"
  ]
}