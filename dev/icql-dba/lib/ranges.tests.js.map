{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/ranges.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\non_process_exit           = require 'exit-hook'\nsleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\nSQL                       = String.raw\njr                        = JSON.stringify\njp                        = JSON.parse\n\n\n#===========================================================================================================\nclass Tags\n  tag_pattern: ///\n    ^\n    (?<mode>  [ - + ] )\n    (?<key>   [ a-z A-Z _ \\/ \\$ ] [ - a-z A-Z 0-9 _ \\/ \\$ ]* )\n    ( : (?<value> [^ - + ]+ | ' .* ' | \" .* \" ) )?\n    $\n    ///\n\n  #---------------------------------------------------------------------------------------------------------\n  tags_from_tagchain: ( tagchain ) ->\n    validate_list_of.text tagchain\n    R = {}\n    return R if tagchain.length is 0\n    for tag_expression in tagchain\n      unless ( match = tag_expression.match @tag_pattern )?\n        throw new Error \"^tags_from_tagchain@448^ tag expression not recognized: #{rpr tag_expression}\"\n      # debug '^9458^', match\n      { mode, key, value, }   = match.groups\n      switch mode\n        when '+'\n          unless value?                       then value = true\n          else if value[ 0 ] in [ '\"', \"'\", ] then value = value[ 1 ... value.length - 1 ]\n          R[ key ] = value\n        when '-'\n          delete R[ key ]\n    return R\nTAGS = new Tags()\n\n\n#===========================================================================================================\nclass Ncr\n  # constructor: ->\n  #---------------------------------------------------------------------------------------------------------\n  parse_multirange_declaration: ( range_declaration ) ->\n    validate.text range_declaration\n    R = []\n    return R if range_declaration is ''\n    for part in range_declaration.split /,\\s+/\n      if ( match = part.match /^(?<lo>.+)\\.\\.(?<hi>.+)/ )?\n        lo  = match.groups.lo.codePointAt 0\n        hi  = match.groups.hi.codePointAt 0\n      else\n        validate.chr part\n        lo = hi = part.codePointAt 0\n      R.push { lo, hi, }\n    return R\nNCR = new Ncr()\n\n\n############################################################################################################\n@[ \"TAGS: tags_from_tagchain\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ '+foo',                             ],  { foo: true,          }, ]\n    [ [ '+foo:abc',                         ],  { foo: 'abc',         }, ]\n    [ [ '+font:superset',                   ],  { font: 'superset',   }, ]\n    [ [ '+font:font1',                      ],  { font: 'font1',      }, ]\n    [ [ '+font:\"font1\"',                    ],  { font: 'font1',      }, ]\n    [ [ \"+font:'font1'\",                    ],  { font: 'font1',      }, ]\n    [ [ '+font:font1',  '+font:Arial'       ],  { font: 'Arial',      }, ]\n    [ [ '+rounded', '-rounded',             ],  {},                      ]\n    [ [ '+shape/ladder', '+shape/pointy',   ],  { 'shape/ladder': true, 'shape/pointy': true, },                      ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = TAGS.tags_from_tagchain probe\n      resolve result\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: ranges (1)\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  E                 = require '../../../apps/icql-dba/lib/errors'\n  dba               = new Dba()\n  cid_from_chr      = ( chr ) -> chr.codePointAt 0\n  chr_from_cid      = ( cid ) -> String.fromCodePoint cid\n  dba.create_function name: 'chr_from_cid', call: chr_from_cid\n  first_cid         = cid_from_chr 'A'\n  last_cid          = cid_from_chr 'Z'\n  #.........................................................................................................\n  dba.create_table_function\n    name:         'generate_series'\n    columns:      [ 'n', ]\n    parameters:   [ 'start', 'stop', 'step', ]\n    rows: ( start, stop, step = null ) ->\n      step ?= 1\n      n     = start\n      loop\n        break if n > stop\n        yield [ n, ]\n        n += step\n      return null\n  #.........................................................................................................\n  dba.execute SQL\"\"\"\n    create table tags ( tag text unique not null primary key );\n    create table tagged_cid_ranges (\n        nr      integer not null primary key,\n        cid_lo  integer not null,\n        cid_hi  integer not null,\n        chr_lo  text generated always as ( chr_from_cid( cid_lo ) ) virtual not null,\n        chr_hi  text generated always as ( chr_from_cid( cid_hi ) ) virtual not null,\n        tag     text    not null references tags ( tag ) );\n    create index cidlohi_idx on tagged_cid_ranges ( cid_lo, cid_hi );\n    create index cidhi_idx on   tagged_cid_ranges ( cid_hi );\n    create table tagged_cids (\n        cid     integer not null,\n        chr     text    not null,\n        tag     text    not null,\n        value   json    not null,\n      primary key ( cid, tag ) );\n    \"\"\"\n  #.........................................................................................................\n  dba.execute SQL\"\"\"\n    create view tags_by_id as\n      with\n      v1 as ( select min( cid_lo ) as first_cid from tagged_cid_ranges ),\n      v2 as ( select max( cid_hi ) as last_cid  from tagged_cid_ranges )\n      select\n        r1.n                      as cid,\n        chr_from_cid( r1.n )      as chr,\n        r2.nr                     as nr,\n        r2.cid_lo                 as cid_lo,\n        r2.cid_hi                 as cid_hi,\n        r2.chr_lo                 as chr_lo,\n        r2.chr_hi                 as chr_hi,\n        r2.tag                    as tag\n      from\n        v1,\n        v2,\n        generate_series( v1.first_cid, v2.last_cid ) as r1\n        left join tagged_cid_ranges as r2 on ( r1.n between r2.cid_lo and r2.cid_hi )\n      order by r1.n, r2.nr\n      ;\n    \"\"\"\n  #.........................................................................................................\n  tags_from_cid = ( cid ) ->\n    R   = []\n    sql = SQL\"\"\"\n      select\n          tag\n        from tagged_cid_ranges\n        where $cid between cid_lo and cid_hi\n        order by nr asc;\"\"\"\n    R.push row.tag for row from dba.query sql, { cid, }\n    return R\n  dba.create_function name: 'tags_from_cid', call: tags_from_cid\n  #.........................................................................................................\n  tag_from_cid = ( cid ) ->\n    sql = SQL\"\"\"\n      select\n          tag\n        from tagged_cid_ranges\n        where $cid between cid_lo and cid_hi\n        order by nr desc\n        limit 1;\"\"\"\n    return dba.first_value dba.query sql, { cid, }\n  dba.create_function name: 'tag_from_cid', call: tag_from_cid\n  #.........................................................................................................\n  insert_tag = SQL\"\"\"\n    insert into tags ( tag )\n      values ( $tag )\n      on conflict ( tag ) do nothing;\"\"\"\n  insert_range = SQL\"\"\"\n    insert into tagged_cid_ranges ( nr, cid_lo, cid_hi, tag )\n      values ( $nr, $cid_lo, $cid_hi, $tag )\"\"\"\n  rules = [\n    # [ '+superset',      'A..Z',               ]\n    [ '+font:fallback', 'A..Z',               ]\n    # [ '+script:latin',  'A..Z',               ]\n    [ '+font:font1',    'B..H, J, L, N..X',   ]\n    [ '+font:font2',    'B..D',               ]\n    [ '+font:font3',    'G..I',               ]\n    [ '+font:font4',    'M..Q',               ]\n    [ '+font:font5',    'M, O..T',            ]\n    [ '+font:font6',    'M, U, X..Y',         ]\n    [ '+vowel',         'A, E, I, O, U',      ]\n    [ '+shape/pointy',  'A, V',               ]\n    [ '+shape/crossed', 'X',                  ]\n    [ '+shape/ladder',  'A, H',               ]\n    ]\n  nr = 0\n  for [ tag, ranges, ] in rules\n    dba.run insert_tag, { tag, }\n    for { lo: cid_lo, hi: cid_hi, } in NCR.parse_multirange_declaration ranges\n      nr++\n      dba.run insert_range, { nr, tag, cid_lo, cid_hi, }\n  #.........................................................................................................\n  console.table dba.list dba.query SQL\"\"\"\n    select\n        nr                      as nr,\n        tag                     as tag,\n        chr_lo                  as chr_lo,\n        chr_hi                  as chr_hi\n      from tagged_cid_ranges\n      order by nr;\"\"\"\n  console.table dba.list dba.query SQL\"\"\"select * from tags order by tag;\"\"\"\n  console.table dba.list dba.query SQL\"\"\"select * from tags_by_id order by tag, cid, nr;\"\"\"\n  #.........................................................................................................\n  for cid in [ first_cid .. last_cid ]\n    chr       = String.fromCodePoint cid\n    tags      = TAGS.tags_from_tagchain tags_from_cid cid\n    info ( CND.gold chr ), ( CND.blue tags )\n    for tag, value of tags\n      value = JSON.stringify value\n      dba.run SQL\"\"\"\n        insert into tagged_cids ( cid, chr, tag, value )\n          values ( $cid, $chr, $tag, $value );\"\"\", { cid, chr, tag, value, }\n  console.table dba.list dba.query SQL\"\"\"select * from tagged_cids order by cid, tag;\"\"\"\n  done?() #..................................................................................................\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # test @, { timeout: 10e3, }\n  # test @[ \"DBA: ranges (1)\" ]\n  # test @[ \"TAGS: tags_from_tagchain\" ]\n  @[ \"DBA: ranges (1)\" ]()\n\n\n\n\n###\n# from https://github.com/loveencounterflow/hengist/tree/master/dev/kitty-font-config-writer-kfcw\n\nsuperset          ABCDEFGHIJKLMNOPQRSTUVWXYZ  │ CSS-like Configuration with Overlapping Ranges\n————————————————— ——————————————————————————  ——————————————————————————————————————————————————————————————\nfont1             BCDEFGH J L NOPQRSTUVWX    │ [B-H] [J] [L] [N-X]                      ◮ least precedence\nfont2             BCD                        │ [B-D]                                    │\nfont3                  GHI                   │ [G-I]                                    │\nfont4                        MNOPQ           │ [M-Q]                                    │\nfont5                        M OPQRST        │ [M] [O-T]                                │\nfont6                        M       U  XY   │ [M] [U] [X-Y]                            │ most precedence\n###\n\n\n\n\n"
  ]
}