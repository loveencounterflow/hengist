{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/ranges.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\non_process_exit           = require 'exit-hook'\nsleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\nSQL                       = String.raw\njr                        = JSON.stringify\njp                        = JSON.parse\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: ranges (1)\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  E                 = require '../../../apps/icql-dba/lib/errors'\n  dba               = new Dba()\n  cid_from_chr      = ( chr ) -> chr.codePointAt 0\n  chr_from_cid      = ( cid ) -> String.fromCodePoint cid\n  dba.create_function name: 'chr_from_cid', call: chr_from_cid\n  first_cid         = cid_from_chr 'A'\n  last_cid          = cid_from_chr 'Z'\n  #.........................................................................................................\n  dba.create_table_function\n    name:         'generate_series'\n    columns:      [ 'n', ]\n    parameters:   [ 'start', 'stop', 'step', ]\n    rows: ( start, stop, step = null ) ->\n      step ?= 1\n      n     = start\n      loop\n        break if n > stop\n        yield [ n, ]\n        n += step\n      return null\n  #.........................................................................................................\n  dba.execute SQL\"\"\"\n    create table settings ( setting text unique not null primary key );\n    create table css_ranges (\n        nr      integer not null primary key,\n        cid_lo  integer not null,\n        cid_hi  integer not null,\n        chr_lo  text generated always as ( chr_from_cid( cid_lo ) ) virtual not null,\n        chr_hi  text generated always as ( chr_from_cid( cid_hi ) ) virtual not null,\n        setting text    not null references settings ( setting ) );\n    create index cidlohi_idx on css_ranges ( cid_lo, cid_hi );\n    create index cidhi_idx on   css_ranges ( cid_hi );\n    \"\"\"\n  #.........................................................................................................\n  dba.execute SQL\"\"\"\n    create view settings_by_id as\n      with\n      v1 as ( select min( cid_lo ) as first_cid from css_ranges ),\n      v2 as ( select max( cid_hi ) as last_cid  from css_ranges )\n      select\n        r1.n                      as cid,\n        chr_from_cid( r1.n )      as chr,\n        r2.nr                     as nr,\n        r2.cid_lo                 as cid_lo,\n        r2.cid_hi                 as cid_hi,\n        r2.chr_lo                 as chr_lo,\n        r2.chr_hi                 as chr_hi,\n        r2.setting                as setting\n      from\n        v1,\n        v2,\n        generate_series( v1.first_cid, v2.last_cid ) as r1\n        left join css_ranges as r2 on ( r1.n between r2.cid_lo and r2.cid_hi )\n      order by r1.n, r2.nr\n      ;\n    \"\"\"\n  #.........................................................................................................\n  settings_from_cid = ( cid ) ->\n    R   = []\n    sql = SQL\"\"\"\n      select\n          setting\n        from css_ranges\n        where $cid between cid_lo and cid_hi\n        order by nr desc;\"\"\"\n    R.push row.setting for row from dba.query sql, { cid, }\n    return R\n  dba.create_function name: 'settings_from_cid', call: settings_from_cid\n  #.........................................................................................................\n  setting_from_cid = ( cid ) ->\n    sql = SQL\"\"\"\n      select\n          setting\n        from css_ranges\n        where $cid between cid_lo and cid_hi\n        order by nr desc\n        limit 1;\"\"\"\n    return dba.first_value dba.query sql, { cid, }\n  dba.create_function name: 'setting_from_cid', call: setting_from_cid\n  #.........................................................................................................\n  insert_setting = SQL\"\"\"\n    insert into settings ( setting )\n      values ( $setting )\n      on conflict ( setting ) do nothing;\"\"\"\n  insert_range = SQL\"\"\"\n    insert into css_ranges ( nr, cid_lo, cid_hi, setting )\n      values ( $nr, $cid_lo, $cid_hi, $setting )\"\"\"\n  rules = [\n    [ '=font:superset', [ 'A', 'Z', ],                                      ]\n    [ '=font:font1',    [ 'B', 'H', ], [ 'J', ], [ 'L', ], [ 'N', 'X', ],   ]\n    [ '=font:font2',    [ 'B', 'D', ],                                      ]\n    [ '=font:font3',    [ 'G', 'I', ],                                      ]\n    [ '=font:font4',    [ 'M', 'Q', ],                                      ]\n    [ '=font:font5',    [ 'M', ], [ 'O', 'T', ],                            ]\n    [ '=font:font6',    [ 'M', ], [ 'U', ], [ 'X', 'Y', ],                  ]\n    ]\n  nr = 0\n  for [ setting, ranges..., ] in rules\n    dba.run insert_setting, { setting, }\n    for [ chr_lo, chr_hi, ] in ranges\n      chr_hi ?= chr_lo\n      cid_lo  = cid_from_chr chr_lo\n      cid_hi  = cid_from_chr chr_hi\n      nr++\n      dba.run insert_range, { nr, setting, cid_lo, cid_hi, }\n  #.........................................................................................................\n  console.table dba.list dba.query SQL\"\"\"\n    select\n        nr                      as nr,\n        setting                 as setting,\n        chr_lo                  as chr_lo,\n        chr_hi                  as chr_hi\n      from css_ranges\n      order by nr;\"\"\"\n  console.table dba.list dba.query SQL\"\"\"select * from settings order by setting;\"\"\"\n  console.table dba.list dba.query SQL\"\"\"select * from settings_by_id;\"\"\"\n  #.........................................................................................................\n  for cid in [ first_cid .. last_cid ]\n    chr       = String.fromCodePoint cid\n    settings  = settings_from_cid cid\n    setting   = setting_from_cid cid\n    info ( CND.gold chr ), ( CND.lime setting ), ( CND.blue settings )\n  done?() #..................................................................................................\n  #   sql     = SQL\"select $:col_a, $:col_b where $:col_b in $V:choices\"\n  #   d       = { col_a: 'foo', col_b: 'bar', choices: [ 1, 2, 3, ], }\n  #   result  = dba.sql.interpolate sql, d\n  #   info '^23867^', result\n  #   T.eq result, \"\"\"select \"foo\", \"bar\" where \"bar\" in ( 1, 2, 3 )\"\"\"\n  # do => #...................................................................................................\n  #   sql     = SQL\"select ?:, ?: where ?: in ?V:\"\n  #   d       = [ 'foo', 'bar', 'bar', [ 1, 2, 3, ], ]\n  #   result  = dba.sql.interpolate sql, d\n  #   info '^23867^', result\n  #   T.eq result, \"\"\"select \"foo\", \"bar\" where \"bar\" in ( 1, 2, 3 )\"\"\"\n  # T.throws /unknown interpolation format 'X'/, => #.........................................................\n  #   sql     = SQL\"select ?:, ?X: where ?: in ?V:\"\n  #   d       = [ 'foo', 'bar', 'bar', [ 1, 2, 3, ], ]\n  #   result  = dba.sql.interpolate sql, d\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # test @, { timeout: 10e3, }\n  # test @[ \"DBA: ranges (1)\" ]\n  @[ \"DBA: ranges (1)\" ]()\n\n\n\n\n###\n# from https://github.com/loveencounterflow/hengist/tree/master/dev/kitty-font-config-writer-kfcw\n\nsuperset          ABCDEFGHIJKLMNOPQRSTUVWXYZ  │ CSS-like Configuration with Overlapping Ranges\n————————————————— ——————————————————————————  ——————————————————————————————————————————————————————————————\nfont1             BCDEFGH J L NOPQRSTUVWX    │ [B-H] [J] [L] [N-X]                      ◮ least precedence\nfont2             BCD                        │ [B-D]                                    │\nfont3                  GHI                   │ [G-I]                                    │\nfont4                        MNOPQ           │ [M-Q]                                    │\nfont5                        M OPQRST        │ [M] [O-T]                                │\nfont6                        M       U  XY   │ [M] [U] [X-Y]                            │ most precedence\n###\n\n\n\n\n"
  ]
}