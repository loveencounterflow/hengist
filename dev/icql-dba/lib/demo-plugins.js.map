{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-plugins.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/DEMO/PLUGINS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\n{ Dba }                   = require H.icql_dba_path\n\n\n#===========================================================================================================\nclass Dba_plugins\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    { dba }   = cfg\n    throw new Error \"must provide `dba: new Dba()` instance\" unless dba?\n    @dba = dba\n    delete cfg.dba\n    return undefined\n\n\n#===========================================================================================================\nclass Dbsquares extends Dba_plugins\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super cfg\n    defaults  = { first: 0, last: 10, step: 1, prefix: 'sq_', dba: null, }\n    @cfg      = { defaults..., cfg..., }\n    @_create_sql_functions?()\n    @_create_db_structure?()\n    @_compile_sql?()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure: ->\n    { prefix } = @cfg\n    @dba.execute SQL\"\"\"\n      create table if not exists #{prefix}squares (\n        n     integer not null unique primary key,\n        p     integer not null,\n        p1    integer generated always as ( #{prefix}square_plus_one( n ) ) virtual not null unique );\n      create unique index if not exists #{prefix}squares_p1_idx on #{prefix}squares ( p1 );\n      \"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    { prefix } = @cfg\n    @dba.create_function name: prefix + 'square_plus_one', call: ( n ) => n ** 2 + 1\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  populate_db: ->\n    { prefix } = @cfg\n    for n in [ @cfg.first .. @cfg.last ] by @cfg.step\n      p = n ** 2\n      @dba.run SQL\"insert into #{prefix}squares ( n, p ) values ( $n, $p );\", { n, p, }\n    return null\n\n\n#===========================================================================================================\nclass Dba_user\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @dba  = new Dba { ram: true, }\n    @cfg  =\n      prefix:     'usr_'\n    @dbsq1 = new Dbsquares { dba: @dba, prefix: ( @cfg.prefix + 'sq1_' ), first: 10, last: 15, }\n    @dbsq2 = new Dbsquares { dba: @dba, prefix: ( @cfg.prefix + 'sq2_' ), first: 20, last: 25, }\n    @dbsq1.populate_db()\n    @dbsq2.populate_db()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  list_relations: ->\n    for row from @dba.query SQL\"\"\"select\n        name,\n        type\n      from sqlite_schema\n      where type in ( 'table', 'view' )\n      order by name;\"\"\"\n      urge '^556^', row\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  show_squares: ->\n    for row from @dba.query SQL\"select * from #{@cfg.prefix}sq1_squares order by n;\"\n      info '^887^', row\n    whisper '--------------------'\n    for row from @dba.query SQL\"select * from #{@cfg.prefix}sq2_squares order by n;\"\n      info '^887^', row\n    return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  dbu = new Dba_user()\n  dbu.show_squares()\n  dbu.list_relations()\n\n\n"
  ]
}