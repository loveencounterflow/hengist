{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/transactions.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TRANSACTIONS/BENCHMARKS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nH                         = require './helpers'\nDATA                      = require '../../../lib/data-providers-nocache'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\n{ lets\n  freeze }                = require 'letsfreezethat'\nSQL                       = String.raw\n\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  whisper \"retrieving test data...\"\n  #.........................................................................................................\n  texts       = DATA.get_words cfg.list_length\n  #.........................................................................................................\n  data_cache  = { texts, }\n  data_cache  = freeze data_cache\n  whisper \"...done\"\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@tx0_idx0_insert_adhoc = ( cfg ) -> new Promise ( resolve ) =>\n  { texts, }  = @get_data cfg\n  { Dba }     = require H.icql_dba_path\n  dba         = new Dba()\n  schema      = 'main'\n  dba.open { schema, ram: true, }\n  dba.execute SQL\"\"\"\n    create table texts (\n      id    integer not null primary key,\n      word  text not null );\n    \"\"\"\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    if cfg.show\n      debug '^3888^', texts\n    for word in texts\n      dba.run SQL\"insert into texts ( word ) values ( $word )\", { word, }\n    count += texts.length\n    if cfg.show then debug '^3888^', dba.list dba.query SQL\"select * from texts;\"\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@tx1_idx0_insert_adhoc = ( cfg ) -> new Promise ( resolve ) =>\n  { texts, }  = @get_data cfg\n  { Dba }     = require H.icql_dba_path\n  dba         = new Dba()\n  schema      = 'main'\n  dba.open { schema, ram: true, }\n  dba.execute SQL\"\"\"\n    create table texts (\n      id    integer not null primary key,\n      word  text not null );\n    \"\"\"\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    if cfg.show\n      debug '^3888^', texts\n    dba.execute SQL\"begin transaction;\"\n    for word in texts\n      dba.run SQL\"insert into texts ( word ) values ( $word )\", { word, }\n    dba.execute SQL\"commit;\"\n    count += texts.length\n    if cfg.show then debug '^3888^', dba.list dba.query SQL\"select * from texts;\"\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@tx1_idx0_insert_prep = ( cfg ) -> new Promise ( resolve ) =>\n  { texts, }  = @get_data cfg\n  { Dba }     = require H.icql_dba_path\n  dba         = new Dba()\n  schema      = 'main'\n  dba.open { schema, ram: true, }\n  dba.execute SQL\"\"\"\n    create table texts (\n      id    integer not null primary key,\n      word  text not null );\n    \"\"\"\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    if cfg.show\n      debug '^3888^', texts\n    dba.execute SQL\"begin transaction;\"\n    insert = dba.prepare SQL\"insert into texts ( word ) values ( $word )\"\n    for word in texts\n      insert.run { word, }\n    dba.execute SQL\"commit;\"\n    count += texts.length\n    if cfg.show then debug '^3888^', dba.list dba.query SQL\"select * from texts;\"\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@tx1_idx_before_insert_prep = ( cfg ) -> new Promise ( resolve ) =>\n  { texts, }  = @get_data cfg\n  { Dba }     = require H.icql_dba_path\n  dba         = new Dba()\n  schema      = 'main'\n  dba.open { schema, ram: true, }\n  dba.execute SQL\"\"\"\n    create table texts (\n      id    integer not null primary key,\n      word  text not null );\n    \"\"\"\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    if cfg.show\n      debug '^3888^', texts\n    dba.execute SQL\"begin transaction;\"\n    dba.execute SQL\"create index texts_word_idx on texts ( word );\"\n    insert = dba.prepare SQL\"insert into texts ( word ) values ( $word )\"\n    for word in texts\n      insert.run { word, }\n    dba.execute SQL\"commit;\"\n    count += texts.length\n    if cfg.show then debug '^3888^', dba.list dba.query SQL\"select * from texts;\"\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@tx1_idx_after_insert_prep = ( cfg ) -> new Promise ( resolve ) =>\n  { texts, }  = @get_data cfg\n  { Dba }     = require H.icql_dba_path\n  dba         = new Dba()\n  schema      = 'main'\n  dba.open { schema, ram: true, }\n  dba.execute SQL\"\"\"\n    create table texts (\n      id    integer not null primary key,\n      word  text not null );\n    \"\"\"\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    if cfg.show\n      debug '^3888^', texts\n    dba.execute SQL\"begin transaction;\"\n    insert = dba.prepare SQL\"insert into texts ( word ) values ( $word )\"\n    for word in texts\n      insert.run { word, }\n    dba.execute SQL\"create index texts_word_idx on texts ( word );\"\n    dba.execute SQL\"commit;\"\n    count += texts.length\n    if cfg.show then debug '^3888^', dba.list dba.query SQL\"select * from texts;\"\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@tx0_idx0_insert_prep = ( cfg ) -> new Promise ( resolve ) =>\n  { texts, }  = @get_data cfg\n  { Dba }     = require H.icql_dba_path\n  dba         = new Dba()\n  schema      = 'main'\n  dba.open { schema, ram: true, }\n  dba.execute SQL\"\"\"\n    create table texts (\n      id    integer not null primary key,\n      word  text not null );\n    \"\"\"\n  insert = dba.prepare SQL\"insert into texts ( word ) values ( $word )\"\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    if cfg.show\n      debug '^3888^', texts\n    for word in texts\n      insert.run { word, }\n    count += texts.length\n    if cfg.show then debug '^3888^', dba.list dba.query SQL\"select * from texts;\"\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  bench           = BM.new_benchmarks()\n  mode            = 'functional_test'\n  mode            = 'medium'\n  mode            = 'standard'\n  switch mode\n    when 'standard'\n      cfg           = { list_length: 3e5, }\n      repetitions   = 5\n    when 'medium'\n      cfg           = { list_length: 3e4, }\n      repetitions   = 3\n    when 'functional_test'\n      cfg           = { list_length: 3, }\n      repetitions   = 1\n  cfg.show      = cfg.list_length < 10\n  test_names    = [\n    'tx0_idx0_insert_adhoc'\n    'tx0_idx0_insert_prep'\n    'tx1_idx0_insert_adhoc'\n    'tx1_idx0_insert_prep'\n    'tx1_idx_before_insert_prep'\n    'tx1_idx_after_insert_prep'\n    ]\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n\n\n###\n\nResults\n\n\ntx1_idx0_insert_prep         4.411 s  300,000 items  68,013⏶Hz  14,703⏷nspc\ntx1_idx_after_insert_prep    5.009 s  300,000 items  59,896⏶Hz  16,696⏷nspc\ntx1_idx_before_insert_prep   6.234 s  300,000 items  48,124⏶Hz  20,779⏷nspc\ntx1_idx0_insert_adhoc        6.309 s  300,000 items  47,551⏶Hz  21,030⏷nspc\ntx0_idx0_insert_prep        13.103 s  300,000 items  22,895⏶Hz  43,678⏷nspc\ntx0_idx0_insert_adhoc       14.953 s  300,000 items  20,063⏶Hz  49,844⏷nspc\n\ntx1_idx0_insert_prep                                  67,061 Hz ≙ 1 ÷ 1.0  100.0 % │████████████▌│\ntx1_idx_after_insert_prep                             60,210 Hz ≙ 1 ÷ 1.1   89.8 % │███████████▎ │\ntx1_idx0_insert_adhoc                                 47,615 Hz ≙ 1 ÷ 1.4   71.0 % │████████▉    │\ntx1_idx_before_insert_prep                            47,574 Hz ≙ 1 ÷ 1.4   70.9 % │████████▉    │\ntx0_idx0_insert_prep                                  22,877 Hz ≙ 1 ÷ 2.9   34.1 % │████▎        │\ntx0_idx0_insert_adhoc                                 20,173 Hz ≙ 1 ÷ 3.3   30.1 % │███▊         │\n\n\n###"
  ]
}