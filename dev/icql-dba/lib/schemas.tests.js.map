{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/schemas.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/FUTURE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\non_process_exit           = require 'exit-hook'\nsleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\nSQL                       = String.raw\njr                        = JSON.stringify\njp                        = JSON.parse\nDATA                      = require '../../../lib/data-providers-nocache'\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"DBA: default schema is 'icql'\" ] = ( T, done ) ->\n#   T?.halt_on_error()\n#   { Dba } = require H.icql_dba_path\n#   dba     = new Dba { debug: true, readonly: true, }\n#   #.........................................................................................................\n#   await do =>\n#     { template_path\n#       work_path }     = await H.procure_db { size: 'small', ref: 'F-open', }\n#     dba.open { path: work_path, schema: 'main', }\n#     dba.open { ram: true,       schema: 'ram', }\n#   #.........................................................................................................\n#   debug '^878^', dba\n#   debug '^878^', dba.sqlt\n#   T?.eq dba.sqlt.readonly, true\n#   debug '^878^', dba.list_schemas()\n#   debug '^878^', dba.list_schema_names()\n#   info 'main', dba.list dba.query SQL\"select name from main.sqlite_schema where type = 'table';\"\n#   info 'ram ', dba.list dba.query SQL\"select name from ram.sqlite_schema where type = 'table';\"\n#   # info 'dm1 ', dba.list dba.query SQL\"select name from dm1.sqlite_schema where type = 'table';\"\n#   #.........................................................................................................\n#   dba.execute SQL\"create table a1 ( n integer not null primary key );\"\n#   #.........................................................................................................\n#   urge 'main', dba.list dba.query SQL\"select name from main.sqlite_schema where type = 'table';\"\n#   urge 'ram ', dba.list dba.query SQL\"select name from ram.sqlite_schema where type = 'table';\"\n#   # info 'dm1 ', dba.list dba.query SQL\"select name from dm1.sqlite_schema where type = 'table';\"\n#   #.........................................................................................................\n#   done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: open()\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { Dba } = require H.icql_dba_path\n  dba     = new Dba()\n  schemas = {}\n  #.........................................................................................................\n  T.eq dba.sqlt.name,           ''\n  T.eq dba.sqlt.open,           true\n  T.eq dba.sqlt.inTransaction,  false\n  T.eq dba.sqlt.readonly,       false\n  T.eq dba.sqlt.memory,         true\n  #.........................................................................................................\n  await do =>\n    { template_path\n      work_path }     = await H.procure_db { size: 'small', ref: 'F-open', }\n    schema            = 'dm1'\n    schemas[ schema ] = { path: work_path, }\n    urge '^344-1^', { template_path, work_path, schema, }\n    dba.open { path: work_path, schema, }\n    T.ok H.types.isa.datamill_db_lookalike { dba, schema, }\n  #.........................................................................................................\n  await do =>\n    ### Possible to attach same file for Continuous Peristency DB multiple times ###\n    { template_path\n      work_path }     = await H.procure_db { size: 'small', ref: 'F-open', reuse: true, }\n    schema            = 'dm2'\n    schema_i          = dba.sql.I schema\n    schemas[ schema ] = { path: work_path, }\n    urge '^344-1^', { template_path, work_path, schema, }\n    dba.open { path: work_path, schema, }\n    T.ok H.types.isa.datamill_db_lookalike { dba, schema, }\n    dba.execute \"create table dm1.extra ( id integer );\"\n    dba.execute \"insert into dm1.extra values ( 1 ), ( 2 ), ( 3 );\"\n    info dba.list dba.query \"select * from dm1.extra order by id;\"\n    help ( d.name for d from ( dba.walk_objects { schema: 'dm1', } ) )\n    help ( d.name for d from ( dba.walk_objects { schema: 'dm2', } ) )\n    T.ok 'extra' in ( d.name for d from ( dba.walk_objects { schema: 'dm1', } ) )\n    T.ok 'extra' in ( d.name for d from ( dba.walk_objects { schema: 'dm2', } ) )\n    T.eq ( dba.list dba.query \"select * from dm1.extra order by id;\" ), [ { id: 1, }, { id: 2, }, { id: 3, }, ]\n    T.eq ( dba.list dba.query \"select * from dm2.extra order by id;\" ), [ { id: 1, }, { id: 2, }, { id: 3, }, ]\n    T.ok not dba.is_ram_db { schema, }\n  #.........................................................................................................\n  await do =>\n    { template_path\n      work_path }     = await H.procure_db { size: 'small', ref: 'F-open', }\n    schema            = 'dm1'\n    # schemas[ schema ] = { path: work_path, }\n    urge '^344-2^', { template_path, work_path, schema, }\n    try dba.open { path: work_path, schema, } catch error\n      warn '^3234^', error\n      warn '^3234^', error.message\n    # dba.open { path: work_path, schema, }\n    T.throws /schema 'dm1' already exists/, => dba.open { path: work_path, schema, }\n    T.ok not dba.is_ram_db { schema, }\n  #.........................................................................................................\n  await do =>\n    { template_path\n      work_path }     = await H.procure_db { size: 'big', ref: 'F-open', }\n    schema            = 'chinook'\n    schemas[ schema ] = { path: work_path, }\n    urge '^344-3^', { template_path, work_path, schema, }\n    dba.open { path: work_path, schema, }\n    T.ok not H.types.isa.datamill_db_lookalike { dba, schema, }\n    T.ok H.types.isa.chinook_db_lookalike { dba, schema, }\n    T.ok not dba.is_ram_db { schema, }\n  #.........................................................................................................\n  await do =>\n    { template_path\n      work_path }     = await H.procure_db { size: 'micro', ref: 'F-open', }\n    schema            = 'micro'\n    schemas[ schema ] = { path: work_path, }\n    urge '^344-3^', { template_path, work_path, schema, }\n    dba.open { path: work_path, schema, }\n    T.ok not H.types.isa.datamill_db_lookalike { dba, schema, }\n    T.ok H.types.isa.micro_db_lookalike { dba, schema, }\n    T.ok not dba.is_ram_db { schema, }\n  #.........................................................................................................\n  T.eq dba._schemas, schemas\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: open() RAM DB\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dba } = require H.icql_dba_path\n  dba     = new Dba()\n  schemas = {}\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    { template_path\n      work_path }     = await H.procure_db { size: 'small', ref: 'F-open-2', }\n    schema            = 'ramdb'\n    schemas[ schema ] = { path: work_path, }\n    urge '^344-3^', { template_path, work_path, schema, ram: true, }\n    dba.open { path: work_path, schema, ram: true, }\n    T.ok H.types.isa.datamill_db_lookalike { dba, schema, }\n    # help '^43451^', dba.list dba.query \"select * from ramdb.sqlite_schema;\"\n    # info d for d from dba.query \"select * from pragma_database_list order by seq;\"\n    db_path           = dba.first_value dba.query \"select file from pragma_database_list where name = ?;\", [ schema, ]\n    T.eq db_path, ''\n    T.eq db_path, dba._path_of_schema schema\n    T.ok dba.is_ram_db { schema, }\n  #.........................................................................................................\n  await do =>\n    ### Opening an empty RAM DB ###\n    schema            = 'r2'\n    ram               = true\n    schemas[ schema ] = { path: null, }\n    dba.open { schema, ram, }\n    # help '^43451^', dba.list dba.query \"select * from ramdb.sqlite_schema;\"\n    # info d for d from dba.query \"select * from pragma_database_list order by seq;\"\n    db_path           = dba.first_value dba.query \"select file from pragma_database_list where name = ?;\", [ schema, ]\n    T.eq db_path, ''\n    T.ok dba.is_ram_db { schema, }\n  #.........................................................................................................\n  await do =>\n    # dba.is_ram_db { schema: 'nosuchschema', }\n    T.throws /\\(Dba_schema_unknown\\) schema 'nosuchschema' does not exist/, => dba.is_ram_db { schema: 'nosuchschema', }\n  #.........................................................................................................\n  info '^35345^', dba._schemas\n  T.eq dba._schemas, schemas\n  #.........................................................................................................\n  done()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: open() file DB in schema main\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  schemas           = {}\n  { template_path\n    work_path }     = await H.procure_db { size: 'small', ref: 'F-open-in-main', }\n  schema            = 'main'\n  #.........................................................................................................\n  await do =>\n    urge '^344-3^', { template_path, work_path, schema, }\n    # dba     = new Dba()\n    dba = new Dba()\n    dba.open { path: work_path, }\n    T.ok H.types.isa.datamill_db_lookalike { dba, schema, }\n    # help '^43451^', dba.list dba.query \"select * from ramdb.sqlite_schema;\"\n    info d for d from dba.query SQL\"select * from pragma_database_list order by seq;\"\n    db_path = dba.first_value dba.query SQL\"select file from pragma_database_list where name = ?;\", [ schema, ]\n    T.eq db_path, work_path\n    T.eq db_path, dba._path_of_schema schema\n    T.ok not dba.is_ram_db { schema, }\n    info '^35345^', dba._schemas\n    dba.execute SQL\"create table main.x ( id int primary key ); insert into x ( id ) values ( 123 );\"\n    return null\n  #.........................................................................................................\n  await do =>\n    dba = new Dba()\n    dba.open { path: work_path, }\n    info '^35345^', dba._schemas\n    info '^334^', \"#{d.type}:#{d.schema}.#{d.name}\" for d in dba.list dba.walk_objects { schema, }\n    T.eq ( dba.list dba.query SQL\"select * from main.x;\" ), [ { id: 123, }, ]\n    debug '^3334^', dba\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: open() RAM DB from file in schema main\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  schemas           = {}\n  { template_path\n    work_path }     = await H.procure_db { size: 'small', ref: 'F-open-in-main', }\n  schema            = 'main'\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    urge '^344-3^', { template_path, work_path, schema, }\n    # dba     = new Dba()\n    dba = new Dba()\n    dba.open { path: work_path, ram: true, }\n    T.ok H.types.isa.datamill_db_lookalike { dba, schema, }\n    # help '^43451^', dba.list dba.query \"select * from ramdb.sqlite_schema;\"\n    info d for d from dba.query SQL\"select * from pragma_database_list order by seq;\"\n    db_path = dba.first_value dba.query SQL\"select file from pragma_database_list where name = ?;\", [ schema, ]\n    T.eq db_path, ''\n    T.ok dba.is_ram_db { schema, }\n    db_path = dba.first_value dba.query SQL\"select file from pragma_database_list where name = ?;\", [ schema, ]\n    T.ok dba._schemas.main?.path?.endsWith 'data/icql/icql-F-open-in-main-small.db'\n    T.eq ( dba.first_value dba.query SQL\"select count(*) from main.main;\" ), 327\n    return null\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: open() many RAM DBs\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  schema            = 'main'\n  dba               = new Dba()\n  #.........................................................................................................\n  SQLITE_MAX_ATTACHED = 125\n  for nr in [ 1 .. SQLITE_MAX_ATTACHED ] then do =>\n    schema    = \"s#{nr}\"\n    schema_i  = dba.sql.I schema\n    dba.open { schema, ram: true, }\n    dba.run SQL\"\"\"\n      create table #{schema_i}.numbers (\n        schema  text    not null,\n        nr      integer not null,\n        n       integer not null unique primary key,\n        rnd     integer not null );\"\"\"\n    for idx in [ 0 .. 5 ]\n      n   = idx + 1\n      rnd = nr * n\n      dba.run SQL\"\"\"\n        insert into #{schema_i}.numbers ( schema, nr, n, rnd )\n          values ( $schema, $nr, $n, $rnd );\"\"\", { schema, nr, n, rnd, }\n    return null\n  #.........................................................................................................\n  sql = []\n  for nr in [ 1 .. SQLITE_MAX_ATTACHED ]\n    schema    = \"s#{nr}\"\n    schema_i  = dba.sql.I schema\n    sql.push SQL\"select * from #{schema_i}.numbers\"\n  sql = sql.join '\\n' + SQL\"union all \"\n  sql += '\\n' + SQL\"order by nr, n;\"\n  console.table dba.list dba.query sql\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: open() empty RAM DB in schema main\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  schema            = 'main'\n  #.........................................................................................................\n  await do =>\n    ### Opening an empty RAM DB ###\n    dba = new Dba()\n    dba.open { ram: true, }\n    T.eq dba._schemas, { main: { path: null } }\n    T.eq ( dba.list dba.walk_objects { schema, } ), []\n    dba.execute SQL\"create table main.x ( id int primary key ); insert into x ( id ) values ( 123 );\"\n    info '^443^', dba.list dba.walk_objects { schema, }\n    T.eq ( dba.list dba.walk_objects { schema, } ), [ { seq: 0, schema: 'main', name: 'sqlite_autoindex_x_1', type: 'index', sql: null }, { seq: 0, schema: 'main', name: 'x', type: 'table', sql: 'CREATE TABLE x ( id int primary key )' } ]\n    debug '^3334^', dba\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: clear()\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  ICQLDBA           = require H.icql_dba_path\n  dba               = new ICQLDBA.Dba()\n  schema            = 'main'\n  #.........................................................................................................\n  # Create tables, indexes:\n  dba.execute \"create table main.k1 ( id integer primary key, fk_k2 integer unique references k2 ( id ) );\"\n  dba.execute \"create table main.k2 ( id integer primary key, fk_k1 integer unique references k1 ( id ) );\"\n  #.........................................................................................................\n  for d from dba.walk_objects { schema, }\n    info \"^557-300^\", { type: d.type, name: d.name, }\n  #.........................................................................................................\n  # Insert rows:\n  T?.eq dba.get_foreign_keys_state(), true\n  dba.set_foreign_keys_state off\n  T?.eq dba.get_foreign_keys_state(), false\n  for id in [ 1 .. 9 ]\n    dba.execute \"insert into main.k1 values ( #{id}, #{id} );\"\n    dba.execute \"insert into main.k2 values ( #{id}, #{id} );\"\n  dba.set_foreign_keys_state on\n  T?.eq dba.get_foreign_keys_state(), true\n  #.........................................................................................................\n  debug '^544734^', ( d.name for d from dba.walk_objects { schema, } )\n  T?.eq ( d.name for d from dba.walk_objects { schema, } ), [ 'sqlite_autoindex_k1_1', 'sqlite_autoindex_k2_1', 'k1', 'k2' ]\n  T?.eq ( dba.list dba.query \"select * from k1 join k2 on ( k1.fk_k2 = k2.id );\" ), [\n    { id: 1, fk_k2: 1, fk_k1: 1 },\n    { id: 2, fk_k2: 2, fk_k1: 2 },\n    { id: 3, fk_k2: 3, fk_k1: 3 },\n    { id: 4, fk_k2: 4, fk_k1: 4 },\n    { id: 5, fk_k2: 5, fk_k1: 5 },\n    { id: 6, fk_k2: 6, fk_k1: 6 },\n    { id: 7, fk_k2: 7, fk_k1: 7 },\n    { id: 8, fk_k2: 8, fk_k1: 8 },\n    { id: 9, fk_k2: 9, fk_k1: 9 } ]\n  #.........................................................................................................\n  dba.clear { schema, }\n  T?.eq ( d.name for d from dba.walk_objects { schema, } ), []\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif module is require.main then do =>\n  # test @, { timeout: 10e3, }\n  test @[ \"DBA: default schema is 'icql'\" ]\n  # @[ \"DBA: default schema is 'icql'\" ]()\n\n\n\n"
  ]
}