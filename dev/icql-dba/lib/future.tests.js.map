{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/future.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: open()\" ] = ( T, done ) ->\n  T.halt_on_error()\n  { Dba } = require '../../../apps/icql-dba'\n  dba     = new Dba()\n  schemas = {}\n  #.........................................................................................................\n  T.eq dba.sqlt.name,           ''\n  T.eq dba.sqlt.open,           true\n  T.eq dba.sqlt.inTransaction,  false\n  T.eq dba.sqlt.readonly,       false\n  T.eq dba.sqlt.memory,         true\n  #.........................................................................................................\n  await do =>\n    { template_path\n      work_path }     = await H.procure_db { size: 'small', ref: 'F-open', }\n    schema            = 'dm1'\n    schemas[ schema ] = { path: work_path, }\n    urge '^344-1^', { template_path, work_path, schema, }\n    dba.open { path: work_path, schema, }\n    T.ok H.types.isa.datamill_db_lookalike { dba, schema, }\n  #.........................................................................................................\n  await do =>\n    ### Possible to attach same file for Continuous Peristency DB multiple times ###\n    { template_path\n      work_path }     = await H.procure_db { size: 'small', ref: 'F-open', reuse: true, }\n    schema            = 'dm2'\n    schema_i          = dba.as_identifier schema\n    schemas[ schema ] = { path: work_path, }\n    urge '^344-1^', { template_path, work_path, schema, }\n    dba.open { path: work_path, schema, }\n    T.ok H.types.isa.datamill_db_lookalike { dba, schema, }\n    dba.execute \"create table dm1.extra ( id integer );\"\n    dba.execute \"insert into dm1.extra values ( 1 ), ( 2 ), ( 3 );\"\n    info dba.list dba.query \"select * from dm1.extra order by id;\"\n    help ( d.name for d from ( dba.walk_objects { schema: 'dm1', } ) )\n    help ( d.name for d from ( dba.walk_objects { schema: 'dm2', } ) )\n    T.ok 'extra' in ( d.name for d from ( dba.walk_objects { schema: 'dm1', } ) )\n    T.ok 'extra' in ( d.name for d from ( dba.walk_objects { schema: 'dm2', } ) )\n    T.eq ( dba.list dba.query \"select * from dm1.extra order by id;\" ), [ { id: 1, }, { id: 2, }, { id: 3, }, ]\n    T.eq ( dba.list dba.query \"select * from dm2.extra order by id;\" ), [ { id: 1, }, { id: 2, }, { id: 3, }, ]\n    T.ok not dba.is_ram_db { schema, }\n  #.........................................................................................................\n  await do =>\n    { template_path\n      work_path }     = await H.procure_db { size: 'small', ref: 'F-open', }\n    schema            = 'dm1'\n    # schemas[ schema ] = { path: work_path, }\n    urge '^344-2^', { template_path, work_path, schema, }\n    try dba.open { path: work_path, schema, } catch error\n      warn '^3234^', error\n      warn '^3234^', error.message\n    # dba.open { path: work_path, schema, }\n    T.throws /schema 'dm1' already exists/, => dba.open { path: work_path, schema, }\n    T.ok not dba.is_ram_db { schema, }\n  #.........................................................................................................\n  await do =>\n    { template_path\n      work_path }     = await H.procure_db { size: 'big', ref: 'F-open', }\n    schema            = 'chinook'\n    schemas[ schema ] = { path: work_path, }\n    urge '^344-3^', { template_path, work_path, schema, }\n    dba.open { path: work_path, schema, }\n    T.ok not H.types.isa.datamill_db_lookalike { dba, schema, }\n    T.ok H.types.isa.chinook_db_lookalike { dba, schema, }\n    T.ok not dba.is_ram_db { schema, }\n  #.........................................................................................................\n  await do =>\n    { template_path\n      work_path }     = await H.procure_db { size: 'micro', ref: 'F-open', }\n    schema            = 'micro'\n    schemas[ schema ] = { path: work_path, }\n    urge '^344-3^', { template_path, work_path, schema, }\n    dba.open { path: work_path, schema, }\n    T.ok not H.types.isa.datamill_db_lookalike { dba, schema, }\n    T.ok H.types.isa.micro_db_lookalike { dba, schema, }\n    T.ok not dba.is_ram_db { schema, }\n  #.........................................................................................................\n  T.eq dba._schemas, schemas\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: open() RAM DB\" ] = ( T, done ) ->\n  T.halt_on_error()\n  { Dba } = require '../../../apps/icql-dba'\n  dba     = new Dba()\n  schemas = {}\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    { template_path\n      work_path }     = await H.procure_db { size: 'small', ref: 'F-open-2', }\n    schema            = 'ramdb'\n    schemas[ schema ] = { path: work_path, }\n    urge '^344-3^', { template_path, work_path, schema, ram: true, }\n    dba.open { path: work_path, schema, ram: true, }\n    T.ok H.types.isa.datamill_db_lookalike { dba, schema, }\n    # help '^43451^', dba.list dba.query \"select * from ramdb.sqlite_schema;\"\n    # info d for d from dba.query \"select * from pragma_database_list order by seq;\"\n    db_path           = dba.first_value dba.query \"select file from pragma_database_list where name = ?;\", [ schema, ]\n    T.eq db_path, ''\n    T.eq db_path, dba._path_of_schema schema\n    T.ok dba.is_ram_db { schema, }\n  #.........................................................................................................\n  await do =>\n    ### Opening an empty RAM DB ###\n    schema            = 'r2'\n    ram               = true\n    schemas[ schema ] = { path: null, }\n    dba.open { schema, ram, }\n    # help '^43451^', dba.list dba.query \"select * from ramdb.sqlite_schema;\"\n    # info d for d from dba.query \"select * from pragma_database_list order by seq;\"\n    db_path           = dba.first_value dba.query \"select file from pragma_database_list where name = ?;\", [ schema, ]\n    T.eq db_path, ''\n    T.ok dba.is_ram_db { schema, }\n  #.........................................................................................................\n  await do =>\n    # dba.is_ram_db { schema: 'nosuchschema', }\n    T.throws /\\(Dba_schema_unknown\\) schema 'nosuchschema' does not exist/, => dba.is_ram_db { schema: 'nosuchschema', }\n  #.........................................................................................................\n  info '^35345^', dba._schemas\n  T.eq dba._schemas, schemas\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: save() RAM DB\" ] = ( T, done ) ->\n  T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  ramdb_path        = null\n  matcher           = null\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    dba               = new Dba()\n    { template_path\n      work_path }     = await H.procure_db { size: 'micro', ref: 'F-save-1', }\n    schema            = 'ramdb'\n    ramdb_path        = work_path\n    digest_1          = CND.id_from_route work_path\n    dba.open { path: work_path, schema, ram: true, }\n    debug '^422423^', dba._schemas\n    T.ok dba.is_ram_db { schema, }\n    #.......................................................................................................\n    dba.execute \"create table ramdb.d ( id integer, t text );\"\n    for id in [ 1 .. 9 ]\n      dba.run \"insert into d values ( ?, ? );\", [ id, \"line Nr. #{id}\", ]\n    matcher           = dba.list dba.query \"select * from ramdb.d order by id;\"\n    #.......................................................................................................\n    digest_2          = CND.id_from_route work_path\n    T.eq digest_1, digest_2\n    T.throws /\\(Dba_argument_not_allowed\\) argument path not allowed/, =>\n      dba.save { path: '/tmp/x', schema: 'xxx' }\n    dba.save { schema, }\n    #.......................................................................................................\n    digest_3          = CND.id_from_route work_path\n    T.ok not types.equals digest_1, digest_3\n    #.......................................................................................................\n    T.ok dba.is_ram_db { schema, }\n    return null\n  #.........................................................................................................\n  await do =>\n    ### Check whether file DB was updated by `dba.save()` ###\n    dba               = new Dba()\n    schema            = 'filedb'\n    dba.open { path: ramdb_path, schema, ram: false, }\n    probe             = dba.list dba.query \"select * from filedb.d order by id;\"\n    T.eq probe, matcher\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: export() RAM DB\" ] = ( T, done ) ->\n  T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  ramdb_path        = null\n  matcher           = null\n  export_path       = H.nonexistant_path_from_ref 'export-ram-db'\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    dba               = new Dba()\n    { template_path\n      work_path }     = await H.procure_db { size: 'micro', ref: 'F-save-1', }\n    schema            = 'ramdb'\n    ramdb_path        = work_path\n    dba.open { path: work_path, schema, ram: true, }\n    #.......................................................................................................\n    dba.execute \"create table ramdb.d ( id integer, t text );\"\n    for id in [ 1 .. 9 ]\n      dba.run \"insert into d values ( ?, ? );\", [ id, \"line Nr. #{id}\", ]\n    matcher           = dba.list dba.query \"select * from ramdb.d order by id;\"\n    #.......................................................................................................\n    T.throws /\\(Dba_argument_not_allowed\\) argument path not allowed/, =>\n      dba.save { path: '/tmp/x', schema: 'xxx' }\n    dba.export { schema, path: export_path, }\n    #.......................................................................................................\n    return null\n  # #.........................................................................................................\n  # await do =>\n  #   ### Check whether file DB was updated by `dba.save()` ###\n  #   dba               = new Dba()\n  #   schema            = 'filedb'\n  #   dba.open { path: ramdb_path, schema, ram: false, }\n  #   probe             = dba.list dba.query \"select * from filedb.d order by id;\"\n  #   T.eq probe, matcher\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: import() CSV\" ] = ( T, done ) ->\n  T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  # ramdb_path        = null\n  matcher           = null\n  export_path       = H.nonexistant_path_from_ref 'import-csv'\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    dba               = new Dba()\n    import_path       = H.get_cfg().csv.small\n    schema            = 'chlex'\n    columns           = null\n    seen_chrs         = new Set()\n    transform         = ( d ) ->\n      if d.columns?\n        columns = [\n          'C1'\n          'C1Type'\n          'C1Pinyin'\n          'C1PRPinyin'\n          'C1Strokes'\n          'C1Pixels'\n          'C1PictureSize'\n          'C1SR'\n          'C1PR'\n          ]\n        return columns\n      #.....................................................................................................\n      return [] if seen_chrs.has d.row.C1\n      seen_chrs.add d.row.C1\n      row       = {}\n      for column in columns\n        value         = d.row[ column ]\n        value         = if value is 'NA' then null else value\n        # debug '^4448^', column, value, r\n        # switch column\n        #   # when 'C1Pixels'       then ( parseFloat value ) / 1000\n        #   # when 'C1PictureSize'  then ( parseFloat value ) / 1000\n        #   when 'complexity'\n        #     value = ( parseFloat row.C1Pixels ) * ( parseFloat row.C1PictureSize ) * ( parseFloat row.C1Strokes )\n        #     value = value / 1e6\n        #     value = Math.max value, 1\n        #     value = value.toFixed 0\n        #     value = value.padStart 5, '0'\n        #   else null\n        row[ column ] = value\n      return [ row, ]\n    #.......................................................................................................\n    dba.import { path: import_path, format: 'csv', schema, ram: true, transform, }\n    #.......................................................................................................\n    dba.execute \"alter table chlex.main add column cpx_raw integer;\"\n    dba.execute \"alter table chlex.main add column cpx integer;\"\n    dba.execute \"update chlex.main set cpx_raw = C1Strokes * C1Pixels * C1PictureSize;\"\n    cpxr_max    = dba.single_value dba.query \"select max( cpx_raw ) from chlex.main;\"\n    cpxr_min    = dba.single_value dba.query \"select min( cpx_raw ) from chlex.main;\"\n    cpxr_delta  = cpxr_max - cpxr_min\n    cpx_min     = 10\n    cpx_max     = 99\n    precision   = 0\n    cpx_delta   = cpx_max - cpx_min\n    debug '^7946^', { cpxr_max, }\n    update  = dba.prepare \"\"\"\n      update chlex.main set\n        cpx = round(\n          ( cpx_raw - $cpxr_min ) / $cpxr_delta * $cpx_delta + $cpx_min,\n          $precision );\n      \"\"\"\n    # update  = dba.prepare \"update chlex.main set cpx = max( round( cpx_raw / ? * 99, 0 ), 1 );\"\n    # update  = dba.prepare \"update chlex.main set cpx = cpx_raw / ?;\"\n    update.run { cpxr_min, cpxr_max, cpxr_delta, cpx_min, cpx_max, cpx_delta, precision, }\n    #.......................................................................................................\n    matcher = dba.list dba.query \"\"\"select C1Type, C1, C1SR, C1PR, cpx from chlex.main order by cpx, cpx_raw asc;\"\"\"\n    # for row in matcher\n    console.table matcher\n    dba.export { schema, path: export_path, }\n  #.........................................................................................................\n  done()\n\n\n############################################################################################################\nunless module.parent?\n  test @\n  # test @[ \"DBA: open()\" ]\n  # test @[ \"DBA: open() RAM DB\" ]\n  # test @[ \"DBA: export() RAM DB\" ]\n  # test @[ \"DBA: import() CSV\" ]\n\n\n\n\n"
  ]
}