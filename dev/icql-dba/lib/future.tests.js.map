{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/future.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/FUTURE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\non_process_exit           = require 'exit-hook'\nsleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\nSQL                       = String.raw\njr                        = JSON.stringify\njp                        = JSON.parse\nDATA                      = require '../../../lib/data-providers-nocache'\nguy                       = require '../../../apps/guy'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: VNRs\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  matcher           = null\n  #.........................................................................................................\n  whisper '-'.repeat 108\n  schema            = 'v'\n  dba               = new Dba()\n  dba._attach { schema, ram: true, }\n  #.........................................................................................................\n  ### TAINT by using a generated column with a UDF we are also forced to convert the VNR to JSON and\n  then parse that value vefore Hollerith-encoding the value: ###\n  dba.create_function\n    name:           'hollerith_encode',\n    deterministic:  true,\n    varargs:        false,\n    call:           ( vnr_json ) ->\n      debug '^3338^', rpr vnr_json\n      return dba.as_hollerith JSON.parse vnr_json\n  #.........................................................................................................\n  dba.create_function\n    name:           'hollerith_classic',\n    deterministic:  true,\n    varargs:        false,\n    call:           ( vnr_json ) ->\n      vnr = JSON.parse vnr_json\n      vnr.push 0 while vnr.length < 5\n      debug '^3338^', rpr vnr\n      return dba.as_hollerith vnr\n  #.........................................................................................................\n  hollerith_tng = ( vnr ) ->\n    sign_delta  = 0x80000000  ### used to lift negative numbers to non-negative ###\n    u32_width   = 4           ### bytes per element ###\n    vnr_width   = 5           ### maximum elements in VNR vector ###\n    nr_min      = -0x80000000 ### smallest possible VNR element ###\n    nr_max      = +0x7fffffff ### largest possible VNR element ###\n    unless 0 < vnr.length <= vnr_width\n      throw new Error \"^44798^ expected VNR to be between 1 and #{vnr_width} elements long, got length #{vnr.length}\"\n    R           = Buffer.alloc vnr_width * u32_width, 0x00\n    offset      = -u32_width\n    for idx in [ 0 ... vnr_width ]\n      R.writeUInt32BE ( vnr[ idx ] ? 0 ) + sign_delta, ( offset += u32_width )\n    return R\n  #.........................................................................................................\n  bcd = ( vnr ) ->\n    vnr_width   = 5           ### maximum elements in VNR vector ###\n    dpe         = 4           ### digits per element ###\n    base        = 36\n    plus        = '+'\n    minus       = '!'\n    padder      = '.'\n    R           = []\n    for idx in [ 0 ... vnr_width ]\n      nr    = vnr[ idx ] ? 0\n      sign  = if nr >= 0 then plus else minus\n      R.push sign + ( ( Math.abs nr ).toString base ).padStart dpe, padder\n    R           = R.join ','\n    return R\n  #.........................................................................................................\n  dba.create_function\n    name:             'hollerith_tng'\n    call:             ( vnr_json ) ->\n      return hollerith_tng JSON.parse vnr_json\n  dba.create_function\n    name:             'bcd'\n    call:             ( vnr_json ) ->\n      return bcd JSON.parse vnr_json\n  #.........................................................................................................\n  to_hex = ( blob ) -> blob.toString 'hex'\n  dba.create_function name: 'to_hex', deterministic: true, varargs: false, call: to_hex\n  #.........................................................................................................\n  dba.execute SQL\"\"\"\n    create table v.main (\n        nr                int   unique not null,\n        vnr               json  unique not null,\n        vnr_hollerith_tng blob  generated always as ( hollerith_tng(  vnr ) ) stored,\n        vnr_bcd           blob  generated always as ( bcd(            vnr ) ) stored,\n      primary key ( nr ) );\"\"\"\n  #.........................................................................................................\n  dba.execute SQL\"\"\"create unique index v.main_vnr_hollerith_tng on main ( hollerith_tng( vnr ) );\"\"\"\n  dba.execute SQL\"\"\"create unique index v.main_vnr_bcd on main ( bcd( vnr ) );\"\"\"\n  use_probe = 2\n  #.........................................................................................................\n  do =>\n    switch use_probe\n      when 1\n        vnrs = [\n          [ -8, ]\n          [ -7, ]\n          [ -6, ]\n          [ -5, ]\n          [ -4, ]\n          [ -3, ]\n          [ -2, ]\n          [ -1, ]\n          [ 0, ]\n          [ 1, ]\n          [ 2, ]\n          [ 3, ]\n          [ 4, ]\n          [ 5, ]\n          [ 6, ]\n          [ 7, ]\n          ]\n    #.........................................................................................................\n      when 2\n        vnrs = [\n          [ 0, -1, ]\n          # []\n          [ 0, ]\n          [ 0, 1, -1 ]\n          [ 0, 1, ]\n          [ 0, 1, 1 ]\n          [ 1, -1, -1, ]\n          [ 1, -1, 0, ]\n          # [ 1, -1, ]\n          [ 1, 0, -1, ]\n          [ 1, ]\n          # [ 1, 0, ]\n          [ 2, ]\n          [ 3, 5, 8, -1, ]\n          # [ 3, 5, 8, 0, -11, -1, ]\n          [ 3, 5, 8, 0, -11, ]\n          [ 3, 5, 8, ]\n          [ 10003, 10005, 10008, ]\n          ]\n    vnrs  = ( [ idx + 1, vnr ] for vnr, idx in vnrs )\n    vnrs  = CND.shuffle vnrs\n    for [ nr, vnr, ] in vnrs\n      vnr_json  = JSON.stringify vnr\n      values    = [ nr, vnr_json, ]\n      try\n        dba.run SQL\"insert into v.main ( nr, vnr ) values ( ?, ? )\", values\n      catch error\n        warn \"when trying to insert values #{rpr values}, an error occurred: #{error.message}\"\n        throw error\n  #.........................................................................................................\n  # matcher = dba.list dba.query \"\"\"select * from v.main order by hollerith_tng( vnr );\"\"\"\n  # console.table dba.list dba.query \"\"\"explain query plan select * from v.main order by vnr_bcd;\"\"\"\n  # console.table dba.list dba.query \"\"\"explain query plan select * from v.main order by bcd( vnr );\"\"\"\n  # console.table dba.list dba.query \"\"\"explain query plan select * from v.main order by hollerith_tng( vnr );\"\"\"\n  SQL = ( parts, expressions... ) ->\n    # debug '^345^', parts\n    # debug '^345^', parts.raw\n    # debug '^345^', expressions\n    R = parts[ 0 ]\n    for expression, idx in expressions\n      R += expression.toUpperCase() + parts[ idx + 1 ]\n    # debug '^334^', rpr R\n    return R\n  name = 'world'\n  debug '^23423^', SQL\"select 'helo #{name}!!'\"\n  debug '^23423^', String.raw\"select 'helo #{name}!!'\"\n  SQL = String.raw\n  sql = SQL\"\"\"select nr, vnr, to_hex( hollerith_tng( vnr ) ) as hollerith_tng_hex, vnr_bcd from v.main order by $order_by$;\"\"\"\n  help '^345^', SQL\"order by hollerith_tng( vnr )\"; console.table dba.list dba.query sql.replace '$order_by$', 'hollerith_tng( vnr )'\n  help '^345^', SQL\"order by bcd( vnr )\";           console.table dba.list dba.query sql.replace '$order_by$', 'bcd( vnr )'\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@_demo_csv_parser = -> new Promise ( resolve ) =>\n  { Dba }     = require H.icql_dba_path\n  dba         = new Dba()\n  #.........................................................................................................\n  csv         = require 'csv-parser'\n  fs          = require 'fs'\n  tcfg        = H.get_cfg()\n  import_path = tcfg.tsv.micro\n  rows        = [];\n  csv_cfg     =\n    separator:  '\\t'\n    escape:     '\"'\n    headers:    [ 'foo', 'gnat', 'gnu', 'blah', ]\n    # raw:        true\n    skipComments: '#'\n    # strict:       true\n  csv_cfg     = { dba.types.defaults.dba_import_cfg_csv_extra..., csv_cfg..., }\n  debug '^4458577^', csv_cfg\n  fs.createReadStream import_path\n    .pipe csv csv_cfg\n    # .pipe csv()\n    .on 'data', ( d ) => rows.push d\n    .on 'end', =>\n      for row in rows\n        info '^54596^', row\n      resolve()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: writing while reading 1\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  schema            = 'main'\n  new_bsqlt3        = require '../../../apps/icql-dba/node_modules/better-sqlite3'\n  dba               = new Dba()\n  #.........................................................................................................\n  await do =>\n    dba.execute SQL\"create table main.x ( n int primary key, locked boolean not null default false );\"\n    for n in [ 1 .. 10 ]\n      dba.run SQL\"insert into x ( n ) values ( ? );\", [ n, ]\n  #.........................................................................................................\n  await do =>\n    dba.execute SQL\"update x set locked = true;\"\n    dba.sqlt.unsafeMode true\n    for row from dba.query SQL\"select * from x where locked;\"\n      # info '^44555-1^', row\n      dba.run SQL\"insert into x ( n ) values ( ? );\", [ row.n + 100, ]\n    dba.sqlt.unsafeMode false\n  #.........................................................................................................\n  await do =>\n    # for row from dba.query SQL\"select * from x;\"\n    #   info '^44555-2^', row\n    T.eq ( d.n for d from dba.query SQL\"select * from x;\" ), [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110 ]\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: writing while reading 2\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  schema            = 'main'\n  new_bsqlt3        = require '../../../apps/icql-dba/node_modules/better-sqlite3'\n  dba               = new Dba()\n  #.........................................................................................................\n  await do =>\n    dba.execute SQL\"create table main.x ( n int primary key, locked boolean not null default false );\"\n    for n in [ 1 .. 10 ]\n      dba.run SQL\"insert into x ( n ) values ( ? );\", [ n, ]\n  #.........................................................................................................\n  await do =>\n    dba.execute SQL\"update x set locked = true;\"\n    dba.with_unsafe_mode =>\n      for row from dba.query SQL\"select * from x where locked;\"\n        info '^44555-3^', dba._state\n        dba.run SQL\"insert into x ( n ) values ( ? );\", [ row.n + 100, ]\n    info '^44555-4^', dba._state\n  #.........................................................................................................\n  await do =>\n    # for row from dba.query SQL\"select * from x;\"\n    #   info '^44555-5^', row\n    T.eq ( d.n for d from dba.query SQL\"select * from x;\" ), [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110 ]\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: indexing JSON lists (de-constructing method)\" ] = ( T, done ) ->\n  ### see https://github.com/nalgeon/sqlean/blob/main/docs/vsv.md ###\n  # T?.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  schema            = 'main'\n  dba               = new Dba()\n  dba.load_extension PATH.resolve PATH.join __dirname, '../../../assets/sqlite-extensions/json1.so'\n  { I, L, V, }      = new ( require '../../../apps/icql-dba/lib/sql' ).Sql\n  #.........................................................................................................\n  await do =>\n    #.......................................................................................................\n    mutations_allowed = 0\n    dba.create_function name: 'mutations_allowed', varargs: true, call: ( value = null ) ->\n      # debug '^mutations_allowed@334^', { value, }\n      ### TAINT consider to use `validate()` ###\n      throw new Error \"^3446^ expected null, 0 or 1, got #{rpr value}\" unless value in [ null, 0, 1, ]\n      return mutations_allowed unless value?\n      return mutations_allowed = value\n      # if value?\n      #   mutations_allowed = if val\n    #.......................................................................................................\n    dba.execute SQL\"\"\"\n      create table multiples (\n        n         integer unique not null primary key,\n        multiples json not null );\n      -- ...................................................................................................\n      -- ### see https://sqlite.org/forum/forumpost/9f06fedaa5 ###\n      create table multiples_idx (\n        n         integer not null,\n        idx       integer not null,\n        multiple  integer not null,\n        primary key ( n, idx ) );\n      create index multiples_idx_multiple_idx on multiples_idx ( multiple );\n      -- ...................................................................................................\n      create trigger multiple_after_insert after insert on multiples begin\n        select mutations_allowed( true );\n        insert into multiples_idx( n, idx, multiple )\n          select new.n, j.key, j.value from json_each( new.multiples ) as j;\n        select mutations_allowed( false );\n        end;\n      -- ...................................................................................................\n      create trigger multiple_after_delete after delete on multiples begin\n        select mutations_allowed( true );\n        delete from multiples_idx where n = old.n;\n        select mutations_allowed( false );\n        end;\n      -- ...................................................................................................\n      create trigger multiple_after_update after update on multiples begin\n        select mutations_allowed( true );\n        delete from multiples_idx where n = old.n;\n        insert into multiples_idx( n, idx, multiple )\n          select new.n, j.key, j.value from json_each( new.multiples ) as j;\n        select mutations_allowed( false );\n        end;\n      -- ...................................................................................................\n      create trigger multiples_idx_before_insert before insert on multiples_idx begin\n        select raise( abort, '^376^ mutations of multiples_idx not allowed' )\n          where not ( select mutations_allowed() );\n        end;\n      -- ...................................................................................................\n      create trigger multiples_idx_before_delete before delete on multiples_idx begin\n        select raise( abort, '^376^ mutations of multiples_idx not allowed' )\n          where not ( select mutations_allowed() );\n        end;\n      -- ...................................................................................................\n      create trigger multiples_idx_before_update before update on multiples_idx begin\n        select raise( abort, '^376^ mutations of multiples_idx not allowed' )\n          where not ( select mutations_allowed() );\n        end;\n      \"\"\"\n    #.......................................................................................................\n    for n in [ 1 .. 5 ]\n      multiples = jr ( n * k for k in [ 0 .. 9 ] )\n      dba.run SQL\"insert into multiples values ( $n, $multiples )\", { n, multiples, }\n    dba.execute SQL\"delete from multiples where n = 4;\"\n    for row from dba.query SQL\"select * from multiples;\"\n      info '^5554^', row\n    for row from dba.query SQL\"select * from multiples_idx;\"\n      info '^5554^', row\n    #.......................................................................................................\n    console.table dba.list dba.query SQL\"explain query plan select * from multiples;\"\n    console.table dba.list dba.query SQL\"explain query plan select * from multiples_idx where multiple > 3;\"\n    # console.table dba.list dba.query SQL\"explain query plan select * from multiples where json_array_at( multiples, 3 ) > 10;\"\n    #.......................................................................................................\n    # dba.execute SQL\"create index multiples_array_idx on json_array_at( multiples, 3 );\"\n    # console.table dba.list dba.query SQL\"explain query plan select * from multiples where json_array_at( multiples, 3 ) > 10;\"\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: indexing JSON lists (constructing method)\" ] = ( T, done ) ->\n  ### see https://github.com/nalgeon/sqlean/blob/main/docs/vsv.md ###\n  # T?.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  schema            = 'main'\n  dba               = new Dba()\n  dba.load_extension PATH.resolve PATH.join __dirname, '../../../assets/sqlite-extensions/json1.so'\n  # dba.sqlt.unsafeMode true\n  { I, L, V, }      = new ( require '../../../apps/icql-dba/lib/sql' ).Sql\n  #.........................................................................................................\n  await do =>\n    #.......................................................................................................\n    dba.execute SQL\"\"\"\n      create view multiples as select distinct\n          n                                     as n,\n          json_group_array( multiple ) over w   as multiples\n        from multiples_idx\n        window w as ( partition by n order by idx range between unbounded preceding and unbounded following )\n        order by n;\n      -- ...................................................................................................\n      -- ### see https://sqlite.org/forum/forumpost/9f06fedaa5 ###\n      create table multiples_idx (\n        n         integer not null,\n        idx       integer not null,\n        multiple  integer not null,\n        primary key ( n, idx ) );\n      create index multiples_idx_multiple_idx on multiples_idx ( multiple );\n      \"\"\"\n    #.......................................................................................................\n    for n in [ 1 .. 3 ]\n      for idx in [ 0 .. 9 ]\n        multiple = n * idx\n        continue if multiple > 10\n        dba.run SQL\"\"\"insert into multiples_idx ( n, idx, multiple )\n          values ( $n, $idx, $multiple )\"\"\", { n, idx, multiple, }\n    #.......................................................................................................\n    for row from dba.query SQL\"select * from multiples_idx;\"\n      info '^5554^', row\n    for row from dba.query SQL\"\"\"select * from multiples;\"\"\"\n      info '^5554^', row\n    #.......................................................................................................\n    console.table dba.list dba.query SQL\"explain query plan select * from multiples;\"\n    console.table dba.list dba.query SQL\"explain query plan select * from multiples_idx where idx > 3;\"\n    console.table dba.list dba.query SQL\"explain query plan select * from multiples_idx where multiple > 3;\"\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: advanced interpolation\" ] = ( T, done ) ->\n  { Dba }           = require H.icql_dba_path\n  E                 = require H.icql_dba_path + '/lib/errors'\n  dba               = new Dba()\n  do => #...................................................................................................\n    sql     = SQL\"select $:col_a, $:col_b where $:col_b in $V:choices\"\n    d       = { col_a: 'foo', col_b: 'bar', choices: [ 1, 2, 3, ], }\n    result  = dba.sql.interpolate sql, d\n    info '^23867^', result\n    T.eq result, \"\"\"select \"foo\", \"bar\" where \"bar\" in ( 1, 2, 3 )\"\"\"\n  do => #...................................................................................................\n    sql     = SQL\"select ?:, ?: where ?: in ?V:\"\n    d       = [ 'foo', 'bar', 'bar', [ 1, 2, 3, ], ]\n    result  = dba.sql.interpolate sql, d\n    info '^23867^', result\n    T.eq result, \"\"\"select \"foo\", \"bar\" where \"bar\" in ( 1, 2, 3 )\"\"\"\n  T.throws /unknown interpolation format 'X'/, => #.........................................................\n    sql     = SQL\"select ?:, ?X: where ?: in ?V:\"\n    d       = [ 'foo', 'bar', 'bar', [ 1, 2, 3, ], ]\n    result  = dba.sql.interpolate sql, d\n  done() #..................................................................................................\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: foreign keys enforced\" ] = ( T, done ) ->\n  { Dba }           = require H.icql_dba_path\n  E                 = require H.icql_dba_path + '/lib/errors'\n  dba               = new Dba()\n  #.........................................................................................................\n  T?.eq dba.get_foreign_keys_state(), true\n  dba.execute SQL\"create table keys ( key text primary key );\"\n  dba.execute SQL\"create table main ( foo text not null references keys ( key ) );\"\n  error = null\n  try\n    dba.execute SQL\"insert into main values ( 'x' );\"\n  catch error\n    warn error.message\n    warn error.name\n    warn error.code\n    T?.eq error.code, 'SQLITE_CONSTRAINT_FOREIGNKEY'\n  unless error\n    T?.fail \"expected error, got none\"\n  done?() #.................................................................................................\n\n# use table valued functions to do joins over 2+ dba instances\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: _is_sqlite3_db()\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dba }               = require H.icql_dba_path\n  dba                   = new Dba()\n  cfg                   = H.get_cfg()\n  debug '^556^', path_1 = cfg.db.templates.nnt\n  debug '^556^', path_2 = cfg.sql.small\n  #.........................................................................................................\n  T?.eq ( dba._is_sqlite3_db path_1    ), true\n  T?.eq ( dba._is_sqlite3_db path_2    ), false\n  T?.throws /must be of type string/, -> ( dba._is_sqlite3_db undefined )\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: _get_connection_url()\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dba }               = require H.icql_dba_path\n  #.........................................................................................................\n  class Dbax extends Dba\n\n  #.........................................................................................................\n  dba                   = new Dbax()\n  Dbax._rnd_int_cfg = true\n  debug '^2809^', dba._get_connection_url()\n  done?()\n\n\n############################################################################################################\nif module is require.main then do =>\n  # test @, { timeout: 10e3, }\n  @[ \"DBA: _get_connection_url()\" ]()\n  # debug f '𠖏'\n  # test @[ \"DBA: advanced interpolation\" ]\n  # test @[ \"DBA: typing\" ]\n  # test @[ \"DBA: window functions etc.\" ]\n  # test @[ \"DBA: view with UDF\" ]\n  # test @[ \"DBA: sqlean vsv extension\" ]\n  # test @[ \"DBA: indexing JSON lists (de-constructing method)\" ]\n  # test @[ \"DBA: indexing JSON lists (constructing method)\" ]\n  # test @[ \"DBA: User-Defined Window Function\" ]\n  # test @[ \"DBA: VNRs\" ], { timeout: 5e3, }\n  # test @[ \"DBA: import TSV; big file\" ], { timeout: 60e3, }\n  # test @[ \"DBA: open() file DB in schema main\" ]\n  # test @[ \"DBA: writing while reading 2\" ]\n  # test @[ \"DBA: open() RAM DB from file in schema main\" ]\n  # test @[ \"DBA: open() empty RAM DB in schema main\" ]\n  # test @[ \"DBA: virtual tables\" ]\n  # test @[ \"DBA: import TSV; cfg variants 2\" ]\n  # test @[ \"DBA: import TSV; cfg variants 2\" ]\n  # test @[ \"DBA: import TSV; cfg variants 3\" ]\n  # test @[ \"DBA: import TSV; cfg variants 4\" ]\n  # test @[ \"DBA: import CSV; cfg variants 5\" ]\n  # await @_demo_csv_parser()\n  # test @[ \"___ DBA: import() (four corner)\" ]\n  # test @[ \"___ DBA: import() (big file)\" ]\n  # test @[ \"DBA: open() RAM DB\" ]\n  # test @[ \"DBA: export() RAM DB\" ]\n  # test @[ \"DBA: import() CSV\" ]\n  # test @[ \"DBA: import() TSV\" ]\n  # @[ \"DBA: import() CSV\" ]()\n  # test @[ \"DBA: clear()\" ]\n  # test @[ \"DBA: foreign keys enforced\" ]\n  # test @[ \"DBA: clear()\" ]\n  # test @[ \"DBA: open() many RAM DBs\" ]\n  # @[ \"DBA: open() many RAM DBs\" ]()\n  # test @[ \"DBA: _is_sqlite3_db()\" ]\n  # test @[ \"DBA: writing while reading 1\" ]\n  # test @[ \"DBA: writing while reading 2\" ]\n\n\n\n\n\n\n\n\n"
  ]
}