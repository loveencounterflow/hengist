{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/future.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\non_process_exit           = require 'exit-hook'\nsleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\nSQL                       = String.raw\njr                        = JSON.stringify\njp                        = JSON.parse\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: open()\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba } = require '../../../apps/icql-dba'\n  dba     = new Dba()\n  schemas = {}\n  #.........................................................................................................\n  T.eq dba.sqlt.name,           ''\n  T.eq dba.sqlt.open,           true\n  T.eq dba.sqlt.inTransaction,  false\n  T.eq dba.sqlt.readonly,       false\n  T.eq dba.sqlt.memory,         true\n  #.........................................................................................................\n  await do =>\n    { template_path\n      work_path }     = await H.procure_db { size: 'small', ref: 'F-open', }\n    schema            = 'dm1'\n    schemas[ schema ] = { path: work_path, }\n    urge '^344-1^', { template_path, work_path, schema, }\n    dba.open { path: work_path, schema, }\n    T.ok H.types.isa.datamill_db_lookalike { dba, schema, }\n  #.........................................................................................................\n  await do =>\n    ### Possible to attach same file for Continuous Peristency DB multiple times ###\n    { template_path\n      work_path }     = await H.procure_db { size: 'small', ref: 'F-open', reuse: true, }\n    schema            = 'dm2'\n    schema_i          = dba.sql.I schema\n    schemas[ schema ] = { path: work_path, }\n    urge '^344-1^', { template_path, work_path, schema, }\n    dba.open { path: work_path, schema, }\n    T.ok H.types.isa.datamill_db_lookalike { dba, schema, }\n    dba.execute \"create table dm1.extra ( id integer );\"\n    dba.execute \"insert into dm1.extra values ( 1 ), ( 2 ), ( 3 );\"\n    info dba.list dba.query \"select * from dm1.extra order by id;\"\n    help ( d.name for d from ( dba.walk_objects { schema: 'dm1', } ) )\n    help ( d.name for d from ( dba.walk_objects { schema: 'dm2', } ) )\n    T.ok 'extra' in ( d.name for d from ( dba.walk_objects { schema: 'dm1', } ) )\n    T.ok 'extra' in ( d.name for d from ( dba.walk_objects { schema: 'dm2', } ) )\n    T.eq ( dba.list dba.query \"select * from dm1.extra order by id;\" ), [ { id: 1, }, { id: 2, }, { id: 3, }, ]\n    T.eq ( dba.list dba.query \"select * from dm2.extra order by id;\" ), [ { id: 1, }, { id: 2, }, { id: 3, }, ]\n    T.ok not dba.is_ram_db { schema, }\n  #.........................................................................................................\n  await do =>\n    { template_path\n      work_path }     = await H.procure_db { size: 'small', ref: 'F-open', }\n    schema            = 'dm1'\n    # schemas[ schema ] = { path: work_path, }\n    urge '^344-2^', { template_path, work_path, schema, }\n    try dba.open { path: work_path, schema, } catch error\n      warn '^3234^', error\n      warn '^3234^', error.message\n    # dba.open { path: work_path, schema, }\n    T.throws /schema 'dm1' already exists/, => dba.open { path: work_path, schema, }\n    T.ok not dba.is_ram_db { schema, }\n  #.........................................................................................................\n  await do =>\n    { template_path\n      work_path }     = await H.procure_db { size: 'big', ref: 'F-open', }\n    schema            = 'chinook'\n    schemas[ schema ] = { path: work_path, }\n    urge '^344-3^', { template_path, work_path, schema, }\n    dba.open { path: work_path, schema, }\n    T.ok not H.types.isa.datamill_db_lookalike { dba, schema, }\n    T.ok H.types.isa.chinook_db_lookalike { dba, schema, }\n    T.ok not dba.is_ram_db { schema, }\n  #.........................................................................................................\n  await do =>\n    { template_path\n      work_path }     = await H.procure_db { size: 'micro', ref: 'F-open', }\n    schema            = 'micro'\n    schemas[ schema ] = { path: work_path, }\n    urge '^344-3^', { template_path, work_path, schema, }\n    dba.open { path: work_path, schema, }\n    T.ok not H.types.isa.datamill_db_lookalike { dba, schema, }\n    T.ok H.types.isa.micro_db_lookalike { dba, schema, }\n    T.ok not dba.is_ram_db { schema, }\n  #.........................................................................................................\n  T.eq dba._schemas, schemas\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: open() RAM DB\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba } = require '../../../apps/icql-dba'\n  dba     = new Dba()\n  schemas = {}\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    { template_path\n      work_path }     = await H.procure_db { size: 'small', ref: 'F-open-2', }\n    schema            = 'ramdb'\n    schemas[ schema ] = { path: work_path, }\n    urge '^344-3^', { template_path, work_path, schema, ram: true, }\n    dba.open { path: work_path, schema, ram: true, }\n    T.ok H.types.isa.datamill_db_lookalike { dba, schema, }\n    # help '^43451^', dba.list dba.query \"select * from ramdb.sqlite_schema;\"\n    # info d for d from dba.query \"select * from pragma_database_list order by seq;\"\n    db_path           = dba.first_value dba.query \"select file from pragma_database_list where name = ?;\", [ schema, ]\n    T.eq db_path, ''\n    T.eq db_path, dba._path_of_schema schema\n    T.ok dba.is_ram_db { schema, }\n  #.........................................................................................................\n  await do =>\n    ### Opening an empty RAM DB ###\n    schema            = 'r2'\n    ram               = true\n    schemas[ schema ] = { path: null, }\n    dba.open { schema, ram, }\n    # help '^43451^', dba.list dba.query \"select * from ramdb.sqlite_schema;\"\n    # info d for d from dba.query \"select * from pragma_database_list order by seq;\"\n    db_path           = dba.first_value dba.query \"select file from pragma_database_list where name = ?;\", [ schema, ]\n    T.eq db_path, ''\n    T.ok dba.is_ram_db { schema, }\n  #.........................................................................................................\n  await do =>\n    # dba.is_ram_db { schema: 'nosuchschema', }\n    T.throws /\\(Dba_schema_unknown\\) schema 'nosuchschema' does not exist/, => dba.is_ram_db { schema: 'nosuchschema', }\n  #.........................................................................................................\n  info '^35345^', dba._schemas\n  T.eq dba._schemas, schemas\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: save() RAM DB\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  ramdb_path        = null\n  matcher           = null\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    dba               = new Dba()\n    { template_path\n      work_path }     = await H.procure_db { size: 'micro', ref: 'F-save-1', }\n    schema            = 'ramdb'\n    ramdb_path        = work_path\n    digest_1          = CND.id_from_route work_path\n    dba.open { path: work_path, schema, ram: true, }\n    debug '^422423^', dba._schemas\n    T.ok dba.is_ram_db { schema, }\n    #.......................................................................................................\n    dba.execute \"create table ramdb.d ( id integer, t text );\"\n    for id in [ 1 .. 9 ]\n      dba.run \"insert into d values ( ?, ? );\", [ id, \"line Nr. #{id}\", ]\n    matcher           = dba.list dba.query \"select * from ramdb.d order by id;\"\n    #.......................................................................................................\n    digest_2          = CND.id_from_route work_path\n    T.eq digest_1, digest_2\n    T.throws /\\(Dba_argument_not_allowed\\) argument path not allowed/, =>\n      dba.save { path: '/tmp/x', schema: 'xxx' }\n    dba.save { schema, }\n    #.......................................................................................................\n    digest_3          = CND.id_from_route work_path\n    T.ok not types.equals digest_1, digest_3\n    #.......................................................................................................\n    T.ok dba.is_ram_db { schema, }\n    return null\n  #.........................................................................................................\n  await do =>\n    ### Check whether file DB was updated by `dba.save()` ###\n    dba               = new Dba()\n    schema            = 'filedb'\n    dba.open { path: ramdb_path, schema, ram: false, }\n    probe             = dba.list dba.query \"select * from filedb.d order by id;\"\n    T.eq probe, matcher\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: export() RAM DB\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  ramdb_path        = null\n  matcher           = null\n  export_path       = H.nonexistant_path_from_ref 'export-ram-db'\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    dba               = new Dba()\n    { template_path\n      work_path }     = await H.procure_db { size: 'micro', ref: 'F-save-1', }\n    schema            = 'ramdb'\n    ramdb_path        = work_path\n    dba.open { path: work_path, schema, ram: true, }\n    #.......................................................................................................\n    dba.execute \"create table ramdb.d ( id integer, t text );\"\n    for id in [ 1 .. 9 ]\n      dba.run \"insert into d values ( ?, ? );\", [ id, \"line Nr. #{id}\", ]\n    matcher           = dba.list dba.query \"select * from ramdb.d order by id;\"\n    #.......................................................................................................\n    T.throws /\\(Dba_argument_not_allowed\\) argument path not allowed/, =>\n      dba.save { path: '/tmp/x', schema: 'xxx' }\n    dba.export { schema, path: export_path, }\n    #.......................................................................................................\n    return null\n  # #.........................................................................................................\n  # await do =>\n  #   ### Check whether file DB was updated by `dba.save()` ###\n  #   dba               = new Dba()\n  #   schema            = 'filedb'\n  #   dba.open { path: ramdb_path, schema, ram: false, }\n  #   probe             = dba.list dba.query \"select * from filedb.d order by id;\"\n  #   T.eq probe, matcher\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: import() CSV\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  # ramdb_path        = null\n  matcher           = null\n  export_path       = H.nonexistant_path_from_ref 'import-csv'\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    dba               = new Dba()\n    import_path       = H.get_cfg().csv.small\n    schema            = 'chlex'\n    columns           = null\n    seen_chrs         = new Set()\n    table_columns     = [\n      'C1'\n      'C1Type'\n      'C1Pinyin'\n      'C1PRPinyin'\n      'C1Strokes'\n      'C1Pixels'\n      'C1PictureSize'\n      'C1SR'\n      'C1PR'\n      ]\n    transform         = ( d ) ->\n      return [] if seen_chrs.has d.row.C1\n      seen_chrs.add d.row.C1\n      return d.stop if seen_chrs.size > 100\n      # debug '^4454^', d.row\n      row       = {}\n      for column in table_columns\n        value         = d.row[ column ]\n        value         = if value is 'NA' then null else value\n        # debug '^4448^', column, value, r\n        # switch column\n        #   # when 'C1Pixels'       then ( parseFloat value ) / 1000\n        #   # when 'C1PictureSize'  then ( parseFloat value ) / 1000\n        #   when 'complexity'\n        #     value = ( parseFloat row.C1Pixels ) * ( parseFloat row.C1PictureSize ) * ( parseFloat row.C1Strokes )\n        #     value = value / 1e6\n        #     value = Math.max value, 1\n        #     value = value.toFixed 0\n        #     value = value.padStart 5, '0'\n        #   else null\n        row[ column ] = value\n      return [ row, ]\n    #.......................................................................................................\n    cfg =\n      schema:         schema\n      transform:      transform\n      path:           import_path\n      format:         'csv'\n      input_columns:  true\n      table_columns:  table_columns\n      skip_first:     true\n      ram:            true\n    await dba.import cfg\n    #.......................................................................................................\n    dba.execute \"alter table chlex.main add column cpx_raw integer;\"\n    dba.execute \"alter table chlex.main add column cpx integer;\"\n    dba.execute \"update chlex.main set cpx_raw = C1Strokes * C1Pixels * C1PictureSize;\"\n    cpxr_max    = dba.single_value dba.query \"select max( cpx_raw ) from chlex.main;\"\n    cpxr_min    = dba.single_value dba.query \"select min( cpx_raw ) from chlex.main;\"\n    cpxr_delta  = cpxr_max - cpxr_min\n    # cpx_min     = 10\n    cpx_min     = 0\n    cpx_max     = 99\n    precision   = 0\n    cpx_delta   = cpx_max - cpx_min\n    debug '^7946^', { cpxr_max, }\n    update  = dba.prepare \"\"\"\n      update chlex.main set\n        cpx = round(\n          ( cpx_raw - $cpxr_min ) / $cpxr_delta * $cpx_delta + $cpx_min,\n          $precision );\n      \"\"\"\n    # update  = dba.prepare \"update chlex.main set cpx = max( round( cpx_raw / ? * 99, 0 ), 1 );\"\n    # update  = dba.prepare \"update chlex.main set cpx = cpx_raw / ?;\"\n    update.run { cpxr_min, cpxr_max, cpxr_delta, cpx_min, cpx_max, cpx_delta, precision, }\n    #.......................................................................................................\n    # matcher = dba.list dba.query \"\"\"select C1Type, C1, C1SR, C1PR, cpx from chlex.main order by cpx, cpx_raw asc;\"\"\"\n    matcher = dba.list dba.query \"\"\"select C1Type, C1, cpx from chlex.main order by cpx, cpx_raw asc;\"\"\"\n    # matcher = dba.list dba.query \"\"\"select * from chlex.main order by cpx, cpx_raw asc;\"\"\"\n    # for row in matcher\n    console.table matcher\n    dba.export { schema, path: export_path, }\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: import() TSV\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  # ramdb_path        = null\n  matcher           = null\n  export_path       = H.nonexistant_path_from_ref 'import-tcsv'\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    dba               = new Dba()\n    import_path       = H.get_cfg().tsv.micro\n    schema            = 'tsv'\n    transform         = ( d ) ->\n      # return d.stop if seen_chrs.size > 10\n      { row } = d\n      info '^4454^', row\n      return null unless row.ncr? and row.glyph? and row.wbf?\n      row.wbf = row.wbf.replace /^<(.*)>$/, '$1'\n      return row\n    #.......................................................................................................\n    cfg =\n      schema:         schema\n      transform:      transform\n      path:           import_path\n      format:         'csv'\n      input_columns:  true\n      # input_columns:  [ 'a', 'b', 'c', ]\n      # table_columns:  [ 'a', 'b', 'c', ]\n      # table_columns:  { a: 'integer', b: 'integer', c: 'text', }\n      skip_first:     true\n      ram:            true\n      _extra:\n        # headers:    true\n        separator:  '\\t'\n        # mapHeaders: ( { header, index, } ) -> header.toUpperCase()\n    urge '^22432^', await dba.import cfg\n    #.......................................................................................................\n    matcher = dba.list dba.query \"\"\"select * from tsv.main order by 1, 2, 3;\"\"\"\n    console.table matcher\n    dba.export { schema, path: export_path, }\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"___ DBA: import() (big file)\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  # ramdb_path        = null\n  matcher           = null\n  export_path       = H.nonexistant_path_from_ref 'import-csv'\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    dba               = new Dba()\n    import_path       = PATH.resolve PATH.join __dirname, '../../../assets/jizura-datasources/data/flat-files/shape/shape-strokeorder-zhaziwubifa.txt'\n    # import_path       = PATH.resolve PATH.join __dirname, '../../../assets/icql/ncrglyphwbf.tsv'\n    schema            = 'wbf'\n    columns           = null\n    seen_chrs         = new Set()\n    count             = 0\n    transform         = null\n    #.......................................................................................................\n    transform         = ( d ) ->\n      count++\n      { ncr\n        glyph\n        wbf } = d.row\n      return null if ( not ncr? ) or ( not glyph? ) or ( not wbf? )\n      return null unless ( match = wbf.match /^<(?<wbf>[0-9]+)>$/ )?\n      { wbf, } = match.groups\n      return d.stop if count > 1000\n      return { ncr, glyph, wbf, }\n    #.......................................................................................................\n    _extra =\n      delimiter:                '\\t'\n      # columns:                  [ 'ncr', 'glyph', 'wbf', ]\n      relax_column_count:       true\n      # relax_column_count_less:  true\n      # relax_column_count_more:  true\n    columns = [ 'ncr', 'glyph', 'wbf', ]\n    t0 = Date.now()\n    dba.import { path: import_path, format: 'csv', schema, ram: true, transform, _extra, columns, }\n    t1 = Date.now()\n    debug '^44545^', \"dt:\", ( t1 - t0 ) / 1000\n    matcher = dba.list dba.query \"\"\"select * from wbf.main order by wbf limit 1000;\"\"\"\n    for row in matcher\n      info row\n    #.......................................................................................................\n    sql = \"\"\"\n      select\n        glyph as glyph,\n        cast( substring( wbf, 1, 1 ) as integer ) +\n          cast( substring( wbf, -1, 1 ) as integer ) as wbfs\n      from wbf.main\n      order by wbfs;\n      \"\"\"\n    for row from dba.query sql\n      info row\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"___ DBA: import() (four corner)\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  # ramdb_path        = null\n  matcher           = null\n  export_path       = H.nonexistant_path_from_ref 'import-csv'\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    dba               = new Dba()\n    import_path       = PATH.resolve PATH.join __dirname, '../../../../../io/mingkwai-rack/jizura-datasources/data/flat-files/shape/shape-fourcorner-wikipedia.txt'\n    # import_path       = PATH.resolve PATH.join __dirname, '../../../assets/icql/ncrglyphwbf.tsv'\n    schema            = 'fc'\n    columns           = null\n    seen_chrs         = new Set()\n    count             = 0\n    transform         = null\n    #.......................................................................................................\n    transform         = ( d ) ->\n      # debug '^44554^', d\n      count++\n      # return d.stop if count > 100\n      ### TAINT must specify columns for source, target separately ###\n      { fc4\n        fcx } = d.row\n      { lnr } = d\n      return null if ( not fc4? ) or ( not fcx? )\n      fc      = fc4\n      glyphs  = fcx\n      glyphs  = Array.from glyphs\n      unless ( match = fc.match /^(?<fc4>[0-9]+)(-(?<fcx>[0-9]))?$/ )?\n        warn \"^334^ omitted: #{rpr d}\"\n        return null\n      { fc4\n        fcx } = match.groups\n      return ( { fc4, fcx, glyph, } for glyph in glyphs )\n    #.......................................................................................................\n    _extra =\n      delimiter:                '\\t'\n      # columns:                  [ 'ncr', 'glyph', 'wbf', ]\n      relax_column_count:       true\n      # relax_column_count_less:  true\n      # relax_column_count_more:  true\n    ### TAINT must specify columns for source, target separately ###\n    columns = [ 'fc4', 'fcx', 'glyph', ]\n    t0 = Date.now()\n    dba.import { path: import_path, format: 'csv', schema, ram: true, transform, _extra, columns, }\n    t1 = Date.now()\n    debug '^44545^', \"dt:\", ( t1 - t0 ) / 1000\n    #.......................................................................................................\n    matcher = dba.list dba.query \"\"\"select * from fc.main where fc4 like '_3__' order by fc4, fcx limit 10;\"\"\"\n    for row in matcher\n      info \"#{row.fc4} #{row.glyph}\"\n    #.......................................................................................................\n    clauses       = []\n    with_clauses  = []\n    for idx in [ 0 .. 3 ]\n      for digit in [ 0 .. 9 ]\n        position  = idx + 1\n        pattern   = ( '_'.repeat idx ) + ( \"#{digit}\" ) + ( '_'.repeat 3 - idx )\n        with_clauses.push \"v#{position}#{digit} as ( select count(*) as c from fc.main where fc4 like '#{pattern}' )\"\n    clauses.push \"with #{with_clauses.join ',\\n'}\\n\"\n    clauses.push \"\"\"select null as c, null as p1, null as p2, null as p3, null as p4 where false union all\"\"\"\n    for digit in [ 0 .. 9 ]\n      clauses.push \"\"\"select #{digit}, v1#{digit}.c, v2#{digit}.c, v3#{digit}.c, v4#{digit}.c from v1#{digit}, v2#{digit}, v3#{digit}, v4#{digit} union all\"\"\"\n    clauses.push \"\"\"select null, null, null, null, null where false;\"\"\"\n    sql = clauses.join '\\n'\n    # debug '^348^', sql\n    for row from dba.query sql\n      info row\n  #.........................................................................................................\n  done()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: import TSV; cfg variants 1\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  matcher           = null\n  import_path       = H.get_cfg().tsv.micro\n  #.........................................................................................................\n  whisper '-'.repeat 108\n  dba               = new Dba()\n  schema            = 'tsv'\n  # input_columns     = null\n  table_columns     = [ 'c1', 'c2', 'c3', ]\n  transform         = null\n  is_first          = true\n  #.........................................................................................................\n  transform         = ( d ) ->\n    debug '^58471^', d.row\n    T.eq ( type_of d.row ), 'object'\n    { ncr, glyph, wbf, } = d.row\n    return null if ( not ncr? ) or ( not glyph? ) or ( not wbf? )\n    return null unless ( match = wbf.match /^<(?<wbf>[0-9]+)>$/ )?\n    wbf = match.groups.wbf\n    return { c1: ncr, c2: glyph, c3: wbf, }\n    # return { ncr, glyph, wbf, }\n  #.........................................................................................................\n  cfg =\n    schema:         schema\n    transform:      transform\n    path:           import_path\n    format:         'csv'\n    input_columns:  true\n    table_columns:  { c1: 'text', c2: 'text', c3: 'text', }\n    # columns = [ 'ncr', 'glyph', 'wbf', ]\n    # skip_first:     true\n    ram:            true\n    _extra:\n      separator:                '\\t'\n      # columns:                  [ 'ncr', 'glyph', 'wbf', ]\n      # quotes:                   false ?????????\n      # relax_column_count:       true\n  await dba.import cfg\n  #.........................................................................................................\n  matcher = dba.list dba.query \"\"\"select * from tsv.main order by 1, 2, 3;\"\"\"\n  # debug '^5697^', matcher\n  console.table matcher\n  T.eq matcher.length,      12\n  T.eq matcher[ 0 ].c1,     'u-cjk-xa-3413'\n  T.eq matcher[ 0 ].c2,     '㐓'\n  T.eq matcher[ 0 ].c3,     '125125'\n  # T.eq matcher[ 0 ].ncr,    'u-cjk-xa-3413'\n  # T.eq matcher[ 0 ].glyph,  '㐓'\n  # T.eq matcher[ 0 ].wbf,    '125125'\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: import TSV; cfg variants 2\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  matcher           = null\n  import_path       = H.get_cfg().tsv.micro\n  #.........................................................................................................\n  whisper '-'.repeat 108\n  dba               = new Dba()\n  schema            = 'tsv'\n  transform         = null\n  is_first          = true\n  #.........................................................................................................\n  transform         = ( d ) ->\n    urge '^58472^', d.row\n    { ncr, glyph, wbf, } = d.row\n    T.eq ( type_of d.row ), 'object'\n    # return null if ( not ncr? ) or ( not glyph? ) or ( not wbf? )\n    # if not wbf? then T.fail \"^3455^ invalid row #{rpr d.row}\"; return null\n    return null unless ( match = wbf.match /^<(?<wbf>[0-9]+)>$/ )?\n    wbf = match.groups.wbf\n    return { c1: ncr, c2: glyph, c3: wbf, }\n  #.........................................................................................................\n  cfg =\n    schema:         schema\n    transform:      transform\n    path:           import_path\n    format:         'tsv'\n    skip_any_null:  true\n    # skip_all_null:  true\n    input_columns:  true\n    table_columns:  { c1: 'text', c2: 'text', c3: 'text', }\n    ram:            true\n  await dba.import cfg\n  #.........................................................................................................\n  matcher = dba.list dba.query \"\"\"select * from tsv.main order by 1, 2, 3;\"\"\"\n  # matcher = dba.list dba.query \"\"\"select * from tsv.main;\"\"\"\n  # debug '^5697^', matcher\n  console.table matcher\n  T.eq matcher.length,      12\n  T.eq matcher[ 0  ].c1,    'u-cjk-xa-3413'\n  T.eq matcher[ 0  ].c2,    '㐓'\n  T.eq matcher[ 0  ].c3,    '125125'\n  T.eq matcher[ 11 ].c1,    'u-cjk-xa-3566'\n  T.eq matcher[ 11 ].c2,    '㕦'\n  T.eq matcher[ 11 ].c3,    '251134'\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: import TSV; cfg variants 3\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  matcher           = null\n  import_path       = H.get_cfg().tsv.micro\n  #.........................................................................................................\n  whisper '-'.repeat 108\n  dba               = new Dba()\n  schema            = 'tsv'\n  transform         = null\n  is_first          = true\n  #.........................................................................................................\n  transform         = ( d ) ->\n    urge '^58472^', d.row\n    { ncr, glyph, wbf, } = d.row\n    T.eq ( type_of d.row ), 'object'\n    # return null if ( not ncr? ) or ( not glyph? ) or ( not wbf? )\n    if not wbf? then T.fail \"^3455^ invalid row #{rpr d.row}\"; return null\n    return null unless ( match = wbf.match /^<(?<wbf>[0-9]+)>$/ )?\n    wbf = match.groups.wbf\n    return { ncr, glyph, wbf, }\n  #.........................................................................................................\n  cfg =\n    schema:         schema\n    transform:      transform\n    path:           import_path\n    format:         'tsv'\n    skip_all_null:  true\n    skip_comments:  true\n    input_columns:  true\n    ram:            true\n  await dba.import cfg\n  #.........................................................................................................\n  matcher = dba.list dba.query \"\"\"select * from tsv.main order by 1, 2, 3;\"\"\"\n  # matcher = dba.list dba.query \"\"\"select * from tsv.main;\"\"\"\n  # debug '^5697^', matcher\n  console.table matcher\n  T.eq matcher.length,      12\n  T.eq matcher[ 0  ].ncr,   'u-cjk-xa-3413'\n  T.eq matcher[ 0  ].glyph, '㐓'\n  T.eq matcher[ 0  ].wbf,   '125125'\n  T.eq matcher[ 11 ].ncr,   'u-cjk-xa-3566'\n  T.eq matcher[ 11 ].glyph, '㕦'\n  T.eq matcher[ 11 ].wbf,   '251134'\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: import TSV; cfg variants 4\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  matcher           = null\n  import_path       = H.get_cfg().tsv.holes\n  #.........................................................................................................\n  whisper '-'.repeat 108\n  dba               = new Dba()\n  schema            = 'tsv'\n  transform         = null\n  is_first          = true\n  #.........................................................................................................\n  transform         = ( d ) ->\n    urge '^58472^', d.row\n    { lnr, ncr, glyph, wbf, } = d.row\n    lnr = parseInt lnr, 10\n    return { lnr, ncr, glyph, wbf, }\n  #.........................................................................................................\n  cfg =\n    schema:         schema\n    transform:      transform\n    path:           import_path\n    # skip_all_null:  true\n    skip_comments:  false\n    default_value:  'EMPTY'\n    input_columns:  true\n    table_columns:  { lnr: 'integer', ncr: 'text', glyph: 'text', wbf: 'text', }\n    ram:            true\n  await dba.import cfg\n  #.........................................................................................................\n  matcher = dba.list dba.query \"\"\"select * from tsv.main order by 1, 2, 3;\"\"\"\n  # matcher = dba.list dba.query \"\"\"select * from tsv.main;\"\"\"\n  debug '^5697^', matcher\n  console.table matcher\n  T.eq matcher, [\n    { lnr: 1, ncr: 'EMPTY', glyph: 'EMPTY', wbf: 'EMPTY' }\n    { lnr: 2, ncr: '# this line to be discarded', glyph: 'EMPTY', wbf: 'EMPTY' }\n    { lnr: 3, ncr: 'EMPTY', glyph: 'EMPTY', wbf: 'EMPTY' }\n    { lnr: 4, ncr: '\"a line with \\\\\"quotes\\\\\"\"', glyph: 'nothing', wbf: 'empty' }\n    { lnr: 5, ncr: 'u-cjk-xa-3413', glyph: '㐓', wbf: '<125125>' }\n    { lnr: 6, ncr: 'u-cjk-xa-3414', glyph: '㐔', wbf: '<412515>' }\n    { lnr: 7, ncr: 'u-cjk-xa-3415', glyph: '㐕', wbf: '<251215>' }\n    { lnr: 8, ncr: 'u-cjk-xa-3416', glyph: '㐖', wbf: '<1212515>' }\n    { lnr: 9, ncr: 'EMPTY', glyph: '㐗', wbf: '<1213355>' }\n    { lnr: 10, ncr: 'u-cjk-xa-34ab', glyph: 'EMPTY', wbf: '<121135>' }\n    { lnr: 11, ncr: 'u-cjk-xa-342a', glyph: '㐪', wbf: 'EMPTY' }\n    { lnr: 12, ncr: 'u-cjk-xa-342b', glyph: '㐫', wbf: '<413452>' }\n    { lnr: 13, ncr: 'u-cjk-xa-3563', glyph: '㕣', wbf: '<34251>' }\n    { lnr: 14, ncr: 'u-cjk-xa-3564', glyph: '㕤', wbf: '<25135>' }\n    { lnr: 15, ncr: 'u-cjk-xa-3565', glyph: '㕥', wbf: '<25134>' }\n    { lnr: 16, ncr: 'u-cjk-xa-3566', glyph: '㕦', wbf: '<251134>' }\n    { lnr: 17, ncr: 'EMPTY', glyph: 'EMPTY', wbf: 'EMPTY' } ]\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: import CSV; cfg variants 5\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  matcher           = null\n  import_path       = H.get_cfg().csv.holes\n  #.........................................................................................................\n  whisper '-'.repeat 108\n  dba               = new Dba()\n  schema            = 'csv'\n  transform         = null\n  is_first          = true\n  #.........................................................................................................\n  transform         = ( d ) ->\n    urge '^58472^', d.row\n    { lnr, ncr, glyph, wbf, } = d.row\n    lnr = parseInt lnr, 10\n    return { lnr, ncr, glyph, wbf, }\n  #.........................................................................................................\n  cfg =\n    schema:         schema\n    transform:      transform\n    path:           import_path\n    # skip_all_null:  true\n    skip_comments:  true\n    default_value:  null\n    input_columns:  true\n    table_columns:  { lnr: 'integer', ncr: 'text', glyph: 'text', wbf: 'text', }\n    ram:            true\n  await dba.import cfg\n  #.........................................................................................................\n  matcher = dba.list dba.query \"\"\"select * from csv.main order by 1, 2, 3;\"\"\"\n  # matcher = dba.list dba.query \"\"\"select * from csv.main;\"\"\"\n  debug '^5697^', matcher\n  console.table matcher\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: VNRs\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  matcher           = null\n  #.........................................................................................................\n  whisper '-'.repeat 108\n  schema            = 'v'\n  dba               = new Dba()\n  dba._attach { schema, ram: true, }\n  #.........................................................................................................\n  ### TAINT by using a generated column with a UDF we are also forced to convert the VNR to JSON and\n  then parse that value vefore Hollerith-encoding the value: ###\n  dba.create_function\n    name:           'hollerith_encode',\n    deterministic:  true,\n    varargs:        false,\n    call:           ( vnr_json ) ->\n      debug '^3338^', rpr vnr_json\n      return dba.as_hollerith JSON.parse vnr_json\n  #.........................................................................................................\n  dba.create_function\n    name:           'hollerith_classic',\n    deterministic:  true,\n    varargs:        false,\n    call:           ( vnr_json ) ->\n      vnr = JSON.parse vnr_json\n      vnr.push 0 while vnr.length < 5\n      debug '^3338^', rpr vnr\n      return dba.as_hollerith vnr\n  #.........................................................................................................\n  hollerith_tng = ( vnr ) ->\n    sign_delta  = 0x80000000  ### used to lift negative numbers to non-negative ###\n    u32_width   = 4           ### bytes per element ###\n    vnr_width   = 5           ### maximum elements in VNR vector ###\n    nr_min      = -0x80000000 ### smallest possible VNR element ###\n    nr_max      = +0x7fffffff ### largest possible VNR element ###\n    unless 0 < vnr.length <= vnr_width\n      throw new Error \"^44798^ expected VNR to be between 1 and #{vnr_width} elements long, got length #{vnr.length}\"\n    R           = Buffer.alloc vnr_width * u32_width, 0x00\n    offset      = -u32_width\n    for idx in [ 0 ... vnr_width ]\n      R.writeUInt32BE ( vnr[ idx ] ? 0 ) + sign_delta, ( offset += u32_width )\n    return R\n  #.........................................................................................................\n  bcd = ( vnr ) ->\n    vnr_width   = 5           ### maximum elements in VNR vector ###\n    dpe         = 4           ### digits per element ###\n    base        = 36\n    plus        = '+'\n    minus       = '!'\n    padder      = '.'\n    R           = []\n    for idx in [ 0 ... vnr_width ]\n      nr    = vnr[ idx ] ? 0\n      sign  = if nr >= 0 then plus else minus\n      R.push sign + ( ( Math.abs nr ).toString base ).padStart dpe, padder\n    R           = R.join ','\n    return R\n  #.........................................................................................................\n  dba.create_function\n    name:             'hollerith_tng'\n    call:             ( vnr_json ) ->\n      return hollerith_tng JSON.parse vnr_json\n  dba.create_function\n    name:             'bcd'\n    call:             ( vnr_json ) ->\n      return bcd JSON.parse vnr_json\n  #.........................................................................................................\n  to_hex = ( blob ) -> blob.toString 'hex'\n  dba.create_function name: 'to_hex', deterministic: true, varargs: false, call: to_hex\n  #.........................................................................................................\n  dba.execute \"\"\"\n    create table v.main (\n        nr                int   unique not null,\n        vnr               json  unique not null,\n        vnr_hollerith_tng blob  generated always as ( hollerith_tng(  vnr ) ) stored,\n        vnr_bcd           blob  generated always as ( bcd(            vnr ) ) stored,\n      primary key ( nr ) );\"\"\"\n  #.........................................................................................................\n  dba.execute \"\"\"create unique index v.main_vnr_hollerith_tng on main ( hollerith_tng( vnr ) );\"\"\"\n  dba.execute \"\"\"create unique index v.main_vnr_bcd on main ( bcd( vnr ) );\"\"\"\n  use_probe = 2\n  #.........................................................................................................\n  do =>\n    switch use_probe\n      when 1\n        vnrs = [\n          [ -8, ]\n          [ -7, ]\n          [ -6, ]\n          [ -5, ]\n          [ -4, ]\n          [ -3, ]\n          [ -2, ]\n          [ -1, ]\n          [ 0, ]\n          [ 1, ]\n          [ 2, ]\n          [ 3, ]\n          [ 4, ]\n          [ 5, ]\n          [ 6, ]\n          [ 7, ]\n          ]\n    #.........................................................................................................\n      when 2\n        vnrs = [\n          [ 0, -1, ]\n          # []\n          [ 0, ]\n          [ 0, 1, -1 ]\n          [ 0, 1, ]\n          [ 0, 1, 1 ]\n          [ 1, -1, -1, ]\n          [ 1, -1, 0, ]\n          # [ 1, -1, ]\n          [ 1, 0, -1, ]\n          [ 1, ]\n          # [ 1, 0, ]\n          [ 2, ]\n          [ 3, 5, 8, -1, ]\n          # [ 3, 5, 8, 0, -11, -1, ]\n          [ 3, 5, 8, 0, -11, ]\n          [ 3, 5, 8, ]\n          [ 10003, 10005, 10008, ]\n          ]\n    vnrs  = ( [ idx + 1, vnr ] for vnr, idx in vnrs )\n    vnrs  = CND.shuffle vnrs\n    for [ nr, vnr, ] in vnrs\n      vnr_json  = JSON.stringify vnr\n      values    = [ nr, vnr_json, ]\n      try\n        dba.run \"insert into v.main ( nr, vnr ) values ( ?, ? )\", values\n      catch error\n        warn \"when trying to insert values #{rpr values}, an error occurred: #{error.message}\"\n        throw error\n  #.........................................................................................................\n  # matcher = dba.list dba.query \"\"\"select * from v.main order by hollerith_tng( vnr );\"\"\"\n  # console.table dba.list dba.query \"\"\"explain query plan select * from v.main order by vnr_bcd;\"\"\"\n  # console.table dba.list dba.query \"\"\"explain query plan select * from v.main order by bcd( vnr );\"\"\"\n  # console.table dba.list dba.query \"\"\"explain query plan select * from v.main order by hollerith_tng( vnr );\"\"\"\n  SQL = ( parts, expressions... ) ->\n    # debug '^345^', parts\n    # debug '^345^', parts.raw\n    # debug '^345^', expressions\n    R = parts[ 0 ]\n    for expression, idx in expressions\n      R += expression.toUpperCase() + parts[ idx + 1 ]\n    # debug '^334^', rpr R\n    return R\n  name = 'world'\n  debug '^23423^', SQL\"select 'helo #{name}!!'\"\n  debug '^23423^', String.raw\"select 'helo #{name}!!'\"\n  SQL = String.raw\n  sql = SQL\"\"\"select nr, vnr, to_hex( hollerith_tng( vnr ) ) as hollerith_tng_hex, vnr_bcd from v.main order by $order_by$;\"\"\"\n  help '^345^', SQL\"order by hollerith_tng( vnr )\"; console.table dba.list dba.query sql.replace '$order_by$', 'hollerith_tng( vnr )'\n  help '^345^', SQL\"order by bcd( vnr )\";           console.table dba.list dba.query sql.replace '$order_by$', 'bcd( vnr )'\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: import TSV; big file\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  matcher           = null\n  import_path       = '../../../assets/jzrds/shape/shape-breakdown-formula-v2.txt'\n  import_path       = PATH.resolve PATH.join __dirname, import_path\n  debug '^343^', import_path\n  #.........................................................................................................\n  whisper '-'.repeat 108\n  dba               = new Dba()\n  schema            = 'formulas'\n  transform         = null\n  is_first          = true\n  count             = 0\n  transform         = null\n  #.........................................................................................................\n  transform         = ( d ) ->\n    count++\n    # return null if count < 15_000\n    return d.stop if count > 15_100\n    urge '^346664^', count if count %% 1000 is 0\n    { ncr, glyph, formula, } = d.row\n    elements = null\n    elements = formula.replace ///(&[a-z0-9\\x23]+;|.)///gu, '\"$1\",'\n    elements = elements[ ... elements.length - 1 ]\n    elements = \"[#{elements}]\"\n    # debug '^4697^', { ncr, glyph, formula, elements, }\n    return { ncr, glyph, formula, elements, }\n  #.........................................................................................................\n  import_cfg =\n    schema:         schema\n    transform:      transform\n    format:         'tsv'\n    path:           import_path\n    # skip_all_null:  true\n    skip_comments:  true\n    default_value:  null\n    input_columns:  [ 'ncr', 'glyph', 'formula', ]\n    table_columns:  [ 'ncr', 'glyph', 'formula', 'elements', ]\n    # table_columns:  { lnr: 'integer', ncr: 'text', glyph: 'text', wbf: 'text', }\n    ram:            true\n  await dba.import import_cfg\n  console.table dba.list dba.query \"\"\"select * from formulas.main limit 10;\"\"\"\n  #.........................................................................................................\n  urge '^4486^', \"updating...\"\n  #.........................................................................................................\n  non_components = new Set Array.from \"()[]§'≈'●⿰⿱⿲⿳⿴⿵⿶⿷⿸⿹⿺⿻〓≈ ↻↔ ↕ ▽\"\n  spread_cfg =\n    columns: [ 'nr', 'element', ]\n    parameters: [ 'elements', ]\n    rows: ( elements ) ->\n      elements    = JSON.parse elements\n      # components  = ( d for d in components when not non_components.has d )\n      for element, idx in elements\n        yield [ idx + 1, element, ]\n      return null\n  dba.sqlt.table 'spread', spread_cfg\n  # console.table dba.list dba.query \"\"\"select glyph, formula, spread( elements ) from main;\"\"\"\n  dba.execute \"\"\"create table formulas.elements (\n    glyph text    not null,\n    nr1   integer not null,\n    nr2   integer default 0,\n    nr3   integer default 0,\n    nr4   integer default 0,\n    nr5   integer default 0,\n    nr6   integer default 0,\n    e1    text    not null,\n    e2    text,\n    e3    text,\n    e4    text,\n    e5    text,\n    e6    text );\"\"\"\n  urge '^4486^', \"inserting elements level 1\"\n  dba.execute \"\"\"\n    insert into formulas.elements ( glyph, nr1, e1 ) select\n        v1.glyph    as glyph,\n        v2.nr       as nr1,\n        v2.element  as e1\n      from\n        main                  as v1,\n        spread( v1.elements ) as v2\n      -- limit 500\n      ;\"\"\"\n  urge '^4486^', \"inserting elements level 2\"\n  dba.execute \"\"\"\n    insert into formulas.elements ( glyph, nr1, nr2, e1, e2 ) select\n        v1.glyph    as glyph,\n        v1.nr1      as nr1,\n        v2.nr1      as nr2,\n        v1.e1       as e1,\n        v2.e1       as e2\n      from\n        formulas.elements     as v1\n      join\n        formulas.elements     as v2\n        on ( true\n          and ( v1.glyph  = v2.glyph  )\n          and ( v1.nr1    = v2.nr1    ) )\n      limit 500\n      ;\"\"\"\n  console.table dba.list dba.query \"\"\"select * from formulas.elements limit 10;\"\"\"\n  console.table dba.list dba.query \"\"\"select * from formulas.elements where glyph in ( '凁', '凂', '一', '凃', '丁', '凄', '丂', '凲', '並' ) order by nr1, nr2;\"\"\"\n  # console.table dba.list dba.query \"\"\"\n  #   select\n  #       v1.ncr,\n  #       v1.glyph,\n  #       v1.formula,\n  #       v2.nr,\n  #       v2.element\n  #     from\n  #       main                  as v1,\n  #       spread( v1.elements ) as v2\n  #     limit 500;\"\"\"\n  # dba.execute \"\"\"\n  #   create view formulas.occurrences as select 1;\"\"\"\n  # dba.execute \"\"\"update formulas.main set xformula0 = glyph || '[' || formula || ']';\"\"\"\n  # dba.execute \"\"\"update formulas.main set xformula = glyph || '[' || formula || ']';\"\"\"\n  #.........................................................................................................\n  # matcher = dba.list dba.query \"\"\"\n  #   select\n  #       *\n  #     from formulas.main\n  #     where true\n  #       and ( glyph not like '&%' )\n  #       and ( formula not in ( '∅', '▽', '●' ) )\n  #       and ( formula not like '%(%' )\n  #       and ( formula not like '%&%' )\n  #     order by formula\n  #     limit 300;\"\"\"\n  # debug '^5697^', matcher\n  formula_count     = dba.first_value dba.query \"\"\"select count(*) from formulas.main;\"\"\"\n  export_path       = H.nonexistant_path_from_ref 'export-formulas'\n  help \"^343589^ exporting #{formula_count} formulas to #{export_path}\"\n  dba.export { schema, path: export_path, }\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"___ DBA: safe eventual persistency\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  matcher           = null\n  import_path       = H.get_cfg().csv.holes\n  #.........................................................................................................\n  dba               = new Dba()\n  schema            = 'csv'\n  transform         = null\n  is_first          = true\n  #.........................................................................................................\n  transform         = ( d ) ->\n    urge '^58472^', d.row\n    { lnr, ncr, glyph, wbf, } = d.row\n    lnr = parseInt lnr, 10\n    return { lnr, ncr, glyph, wbf, }\n  #.........................................................................................................\n  cfg =\n    schema:         schema\n    transform:      transform\n    path:           import_path\n    # skip_all_null:  true\n    skip_comments:  true\n    default_value:  null\n    input_columns:  true\n    table_columns:  { lnr: 'integer', ncr: 'text', glyph: 'text', wbf: 'text', }\n    ram:            true\n  await dba.import cfg\n  #.........................................................................................................\n  matcher = dba.list dba.query \"\"\"select * from csv.main order by 1, 2, 3;\"\"\"\n  # matcher = dba.list dba.query \"\"\"select * from csv.main;\"\"\"\n  debug '^5697^', matcher\n  console.table matcher\n  process.once 'uncaughtException',  exit_handler\n  process.once 'unhandledRejection', exit_handler\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: virtual tables\" ] = ( T, done ) ->\n  ### new in 7.4.0, see https://github.com/JoshuaWise/better-sqlite3/issues/581 ###\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  FS                = require 'fs'\n  #.........................................................................................................\n  dba               = new Dba()\n  # schema            = 'csv'\n  # schema_i          = dba.sql.I schema\n  transform         = null\n  is_first          = true\n  #.........................................................................................................\n  cfg =\n    columns: [ 'path', 'data', ],\n    rows: ->\n      for filename in FS.readdirSync __dirname\n        path  = PATH.resolve PATH.join __dirname, filename\n        data  = ( FS.readFileSync path, { encoding: 'utf-8', } ).trim()[ .. 50 ]\n        yield { path, data }\n      return null\n  dba.sqlt.table \"files\", cfg\n  matcher = dba.list dba.query \"select * from files order by data;\"\n  console.table matcher\n  #.........................................................................................................\n  cfg =\n    columns: [ 'match', 'capture', ]\n    parameters: [ 'pattern', 'text', ]\n    rows: ( pattern, text ) ->\n      regex = new RegExp pattern, 'g'\n      while ( match = regex.exec text )?\n        yield [ match[ 0 ], match[ 1 ], ]\n      return null\n  dba.sqlt.table 're_matches', cfg\n  sql     = \"select pattern, text, match, capture from re_matches( ?, ? ) order by 1, 2, 3, 4;\"\n  matcher = dba.list dba.query sql, [ '€([-,.0-9]+)', \"between €30,-- and €40,--\", ]\n  console.table matcher\n  #.........................................................................................................\n  cfg = ( filename, P... ) ->\n    urge '^46456^', { filename, P, }\n    columns: [ 'path', 'lnr', 'line', ],\n    rows: ->\n      path  = PATH.resolve PATH.join __dirname, '../../../assets/icql', filename\n      lines = ( FS.readFileSync path, { encoding: 'utf-8', } ).split '\\n'\n      for line, line_idx in lines\n        yield { path, lnr: line_idx + 1, line, }\n      return null\n  dba.sqlt.table 'file_contents', cfg\n  dba.execute \"create virtual table contents_of_wbftsv using file_contents( ncrglyphwbf.tsv, any stuff goes here, and more here );\"\n  sql     = \"select * from contents_of_wbftsv order by 1, 2, 3;\"\n  matcher = dba.list dba.query sql\n  console.table matcher\n  #.........................................................................................................\n  cfg =\n    columns: [ 'n', ]\n    parameters: [ 'start', 'stop', 'step', ]\n    rows: ( start, stop, step = null ) ->\n      # stop ?= start\n      step ?= 1\n      n     = start\n      loop\n        break if n > stop\n        # if n %% 2 is 0 then yield [ \"*#{n}*\", ]\n        # else                yield [ n, ]\n        yield [ n, ]\n        n += step\n      return null\n  dba.sqlt.table 'generate_series', cfg\n  console.table dba.list dba.query \"select * from generate_series( ?, ? )\", [ 1, 5, ]\n  console.table dba.list dba.query \"select * from generate_series( ?, ?, ? )\", [ 1, 10, 2, ]\n  console.table dba.list dba.query \"select * from generate_series( ?, ?, ? ) limit 10;\", [ 500, Infinity, 1234, ]\n  #.........................................................................................................\n  cfg =\n    columns: [ 'path', 'vnr', 'line', 'vnr_h', ]\n    parameters: [ '_path', ]\n    rows: ( path ) ->\n      readlines = new ( require 'n-readlines' ) path\n      lnr       = 0\n      while ( bytes = readlines.next() ) isnt false\n        lnr++\n        vnr       = [ lnr, ]\n        vnr_json  = JSON.stringify vnr\n        line      = bytes.toString 'utf-8'\n        vnr_h     = dba.as_hollerith vnr\n        yield [ path, vnr_json, line, vnr_h, ]\n      return null\n  dba.sqlt.table 'readlines', cfg\n  path = H.get_cfg().tsv.micro\n  urge \"^44558^ reading from #{path}\"\n  dba.execute \"create table foolines ( path text, vnr json, line text, vnr_h bytea );\"\n  # dba.execute \"insert into foolines select * from readlines( ? );\", [ path, ]\n  dba.execute \"insert into foolines select * from readlines( #{dba.sql.L path} );\"\n  # console.table dba.list dba.query \"select * from readlines( ? ) order by vnr_h;\", [ path, ]\n  console.table dba.list dba.query \"select * from foolines;\"\n  #.........................................................................................................\n  export_path       = H.nonexistant_path_from_ref 'export-virtual-tables'\n  schema            = 'main'\n  dba.export { schema, path: export_path, }\n  urge \"^35345^ schema #{rpr schema} exported to #{export_path}\"\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@_demo_csv_parser = -> new Promise ( resolve ) =>\n  { Dba }     = require '../../../apps/icql-dba'\n  dba         = new Dba()\n  #.........................................................................................................\n  csv         = require 'csv-parser'\n  fs          = require 'fs'\n  tcfg        = H.get_cfg()\n  import_path = tcfg.tsv.micro\n  rows        = [];\n  csv_cfg     =\n    separator:  '\\t'\n    escape:     '\"'\n    headers:    [ 'foo', 'gnat', 'gnu', 'blah', ]\n    # raw:        true\n    skipComments: '#'\n    # strict:       true\n  csv_cfg     = { dba.types.defaults.dba_import_cfg_csv_extra..., csv_cfg..., }\n  debug '^4458577^', csv_cfg\n  fs.createReadStream import_path\n    .pipe csv csv_cfg\n    # .pipe csv()\n    .on 'data', ( d ) => rows.push d\n    .on 'end', =>\n      for row in rows\n        info '^54596^', row\n      resolve()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: open() file DB in schema main\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  schemas           = {}\n  { template_path\n    work_path }     = await H.procure_db { size: 'small', ref: 'F-open-in-main', }\n  schema            = 'main'\n  #.........................................................................................................\n  await do =>\n    urge '^344-3^', { template_path, work_path, schema, }\n    # dba     = new Dba()\n    dba = new Dba()\n    dba.open { path: work_path, }\n    T.ok H.types.isa.datamill_db_lookalike { dba, schema, }\n    # help '^43451^', dba.list dba.query \"select * from ramdb.sqlite_schema;\"\n    info d for d from dba.query SQL\"select * from pragma_database_list order by seq;\"\n    db_path = dba.first_value dba.query SQL\"select file from pragma_database_list where name = ?;\", [ schema, ]\n    T.eq db_path, work_path\n    T.eq db_path, dba._path_of_schema schema\n    T.ok not dba.is_ram_db { schema, }\n    info '^35345^', dba._schemas\n    dba.execute SQL\"create table main.x ( id int primary key ); insert into x ( id ) values ( 123 );\"\n    return null\n  #.........................................................................................................\n  await do =>\n    dba = new Dba()\n    dba.open { path: work_path, }\n    info '^35345^', dba._schemas\n    info '^334^', \"#{d.type}:#{d.schema}.#{d.name}\" for d in dba.list dba.walk_objects { schema, }\n    T.eq ( dba.list dba.query SQL\"select * from main.x;\" ), [ { id: 123, }, ]\n    debug '^3334^', dba\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: open() RAM DB from file in schema main\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  schemas           = {}\n  { template_path\n    work_path }     = await H.procure_db { size: 'small', ref: 'F-open-in-main', }\n  schema            = 'main'\n  #.........................................................................................................\n  await do =>\n    ### Opening a RAM DB from file ###\n    urge '^344-3^', { template_path, work_path, schema, }\n    # dba     = new Dba()\n    dba = new Dba()\n    dba.open { path: work_path, ram: true, }\n    T.ok H.types.isa.datamill_db_lookalike { dba, schema, }\n    # help '^43451^', dba.list dba.query \"select * from ramdb.sqlite_schema;\"\n    info d for d from dba.query SQL\"select * from pragma_database_list order by seq;\"\n    db_path = dba.first_value dba.query SQL\"select file from pragma_database_list where name = ?;\", [ schema, ]\n    T.eq db_path, ''\n    T.ok dba.is_ram_db { schema, }\n    db_path = dba.first_value dba.query SQL\"select file from pragma_database_list where name = ?;\", [ schema, ]\n    T.ok dba._schemas.main?.path?.endsWith 'data/icql/icql-F-open-in-main-small.db'\n    T.eq ( dba.first_value dba.query SQL\"select count(*) from main.main;\" ), 327\n    return null\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: open() empty RAM DB in schema main\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  schema            = 'main'\n  #.........................................................................................................\n  await do =>\n    ### Opening an empty RAM DB ###\n    dba = new Dba()\n    dba.open { ram: true, }\n    T.eq dba._schemas, { main: { path: null } }\n    T.eq ( dba.list dba.walk_objects { schema, } ), []\n    dba.execute SQL\"create table main.x ( id int primary key ); insert into x ( id ) values ( 123 );\"\n    info '^443^', dba.list dba.walk_objects { schema, }\n    T.eq ( dba.list dba.walk_objects { schema, } ), [ { seq: 0, schema: 'main', name: 'sqlite_autoindex_x_1', type: 'index', sql: null }, { seq: 0, schema: 'main', name: 'x', type: 'table', sql: 'CREATE TABLE x ( id int primary key )' } ]\n    debug '^3334^', dba\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: writing while reading 1\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  schema            = 'main'\n  new_bsqlt3        = require '../../../apps/icql-dba/node_modules/better-sqlite3'\n  dba               = new Dba()\n  #.........................................................................................................\n  await do =>\n    dba.execute SQL\"create table main.x ( n int primary key, locked boolean not null default false );\"\n    for n in [ 1 .. 10 ]\n      dba.run SQL\"insert into x ( n ) values ( ? );\", [ n, ]\n  #.........................................................................................................\n  await do =>\n    dba.execute SQL\"update x set locked = true;\"\n    dba.sqlt.unsafeMode true\n    for row from dba.query SQL\"select * from x where locked;\"\n      # info '^44555^', row\n      dba.run SQL\"insert into x ( n ) values ( ? );\", [ row.n + 100, ]\n    dba.sqlt.unsafeMode false\n  #.........................................................................................................\n  await do =>\n    # for row from dba.query SQL\"select * from x;\"\n    #   info '^44555^', row\n    T.eq ( d.n for d from dba.query SQL\"select * from x;\" ), [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110 ]\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: writing while reading 2\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  schema            = 'main'\n  new_bsqlt3        = require '../../../apps/icql-dba/node_modules/better-sqlite3'\n  dba               = new Dba()\n  #.........................................................................................................\n  await do =>\n    dba.execute SQL\"create table main.x ( n int primary key, locked boolean not null default false );\"\n    for n in [ 1 .. 10 ]\n      dba.run SQL\"insert into x ( n ) values ( ? );\", [ n, ]\n  #.........................................................................................................\n  await do =>\n    dba.execute SQL\"update x set locked = true;\"\n    dba.do_unsafe =>\n      for row from dba.query SQL\"select * from x where locked;\"\n        # info '^44555^', row\n        dba.run SQL\"insert into x ( n ) values ( ? );\", [ row.n + 100, ]\n  #.........................................................................................................\n  await do =>\n    # for row from dba.query SQL\"select * from x;\"\n    #   info '^44555^', row\n    T.eq ( d.n for d from dba.query SQL\"select * from x;\" ), [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110 ]\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: sqlean vsv extension\" ] = ( T, done ) ->\n  ### see https://github.com/nalgeon/sqlean/blob/main/docs/vsv.md ###\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  schema            = 'main'\n  dba               = new Dba()\n  extension_path    = PATH.resolve PATH.join __dirname, '../../../assets/sqlite-extensions/vsv.so'\n  csv_path          = H.get_cfg().csv.holes\n  work_path         = await H.procure_file { path: csv_path, name: 'vsv-sample.csv', }\n  # debug '^857^', { csv_path, work_path, }\n  { I, L, V, }      = new ( require '../../../apps/icql-dba/lib/sql' ).Sql\n  #.........................................................................................................\n  await do =>\n    dba.load_extension extension_path\n    dba.run SQL\"\"\"\n      create virtual table myvsv using vsv(\n        filename  = #{L work_path},      -- the filename, passed to the Operating System\n        -- data=STRING         -- alternative data\n        -- schema=STRING       -- Alternate Schema to use\n        -- columns=N           -- columns parsed from the VSV file\n        -- header=BOOL         -- whether or not a header row is present\n        -- skip=N              -- number of leading data rows to skip\n        -- rsep=STRING         -- record separator\n        -- fsep=STRING         -- field separator\n        -- validatetext=BOOL   -- validate UTF-8 encoding of text fields\n        -- affinity=AFFINITY   -- affinity to apply to each returned value\n        nulls     = true                -- empty fields are returned as NULL\n        );\n      \"\"\" #, { csv_path, }\n    for row from dba.query SQL\"select * from myvsv;\"\n      info '^5554^', row\n    # dba.execute SQL\"insert into myvsv ( c0 ) values ( '1111' );\"\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: indexing JSON lists (de-constructing method)\" ] = ( T, done ) ->\n  ### see https://github.com/nalgeon/sqlean/blob/main/docs/vsv.md ###\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  schema            = 'main'\n  dba               = new Dba()\n  dba.load_extension PATH.resolve PATH.join __dirname, '../../../assets/sqlite-extensions/json1.so'\n  { I, L, V, }      = new ( require '../../../apps/icql-dba/lib/sql' ).Sql\n  #.........................................................................................................\n  await do =>\n    #.......................................................................................................\n    mutations_allowed = 0\n    dba.create_function name: 'mutations_allowed', varargs: true, call: ( value = null ) ->\n      # debug '^mutations_allowed@334^', { value, }\n      ### TAINT consider to use `validate()` ###\n      throw new Error \"^3446^ expected null, 0 or 1, got #{rpr value}\" unless value in [ null, 0, 1, ]\n      return mutations_allowed unless value?\n      return mutations_allowed = value\n      # if value?\n      #   mutations_allowed = if val\n    #.......................................................................................................\n    dba.execute SQL\"\"\"\n      create table multiples (\n        n         integer unique not null primary key,\n        multiples json not null );\n      -- ...................................................................................................\n      -- ### see https://sqlite.org/forum/forumpost/9f06fedaa5 ###\n      create table multiples_idx (\n        n         integer not null,\n        idx       integer not null,\n        multiple  integer not null,\n        primary key ( n, idx ) );\n      create index multiples_idx_multiple_idx on multiples_idx ( multiple );\n      -- ...................................................................................................\n      create trigger multiple_after_insert after insert on multiples begin\n        select mutations_allowed( true );\n        insert into multiples_idx( n, idx, multiple )\n          select new.n, j.key, j.value from json_each( new.multiples ) as j;\n        select mutations_allowed( false );\n        end;\n      -- ...................................................................................................\n      create trigger multiple_after_delete after delete on multiples begin\n        select mutations_allowed( true );\n        delete from multiples_idx where n = old.n;\n        select mutations_allowed( false );\n        end;\n      -- ...................................................................................................\n      create trigger multiple_after_update after update on multiples begin\n        select mutations_allowed( true );\n        delete from multiples_idx where n = old.n;\n        insert into multiples_idx( n, idx, multiple )\n          select new.n, j.key, j.value from json_each( new.multiples ) as j;\n        select mutations_allowed( false );\n        end;\n      -- ...................................................................................................\n      create trigger multiples_idx_before_insert before insert on multiples_idx begin\n        select raise( abort, '^376^ mutations of multiples_idx not allowed' )\n          where not ( select mutations_allowed() );\n        end;\n      -- ...................................................................................................\n      create trigger multiples_idx_before_delete before delete on multiples_idx begin\n        select raise( abort, '^376^ mutations of multiples_idx not allowed' )\n          where not ( select mutations_allowed() );\n        end;\n      -- ...................................................................................................\n      create trigger multiples_idx_before_update before update on multiples_idx begin\n        select raise( abort, '^376^ mutations of multiples_idx not allowed' )\n          where not ( select mutations_allowed() );\n        end;\n      \"\"\"\n    #.......................................................................................................\n    for n in [ 1 .. 5 ]\n      multiples = jr ( n * k for k in [ 0 .. 9 ] )\n      dba.run SQL\"insert into multiples values ( $n, $multiples )\", { n, multiples, }\n    dba.execute SQL\"delete from multiples where n = 4;\"\n    for row from dba.query SQL\"select * from multiples;\"\n      info '^5554^', row\n    for row from dba.query SQL\"select * from multiples_idx;\"\n      info '^5554^', row\n    #.......................................................................................................\n    console.table dba.list dba.query SQL\"explain query plan select * from multiples;\"\n    console.table dba.list dba.query SQL\"explain query plan select * from multiples_idx where multiple > 3;\"\n    # console.table dba.list dba.query SQL\"explain query plan select * from multiples where json_array_at( multiples, 3 ) > 10;\"\n    #.......................................................................................................\n    # dba.execute SQL\"create index multiples_array_idx on json_array_at( multiples, 3 );\"\n    # console.table dba.list dba.query SQL\"explain query plan select * from multiples where json_array_at( multiples, 3 ) > 10;\"\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: indexing JSON lists (constructing method)\" ] = ( T, done ) ->\n  ### see https://github.com/nalgeon/sqlean/blob/main/docs/vsv.md ###\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  schema            = 'main'\n  dba               = new Dba()\n  dba.load_extension PATH.resolve PATH.join __dirname, '../../../assets/sqlite-extensions/json1.so'\n  # dba.sqlt.unsafeMode true\n  { I, L, V, }      = new ( require '../../../apps/icql-dba/lib/sql' ).Sql\n  #.........................................................................................................\n  await do =>\n    #.......................................................................................................\n    dba.execute SQL\"\"\"\n      create view multiples as select distinct\n          n                                     as n,\n          json_group_array( multiple ) over w   as multiples\n        from multiples_idx\n        window w as ( partition by n order by idx range between unbounded preceding and unbounded following )\n        order by n;\n      -- ...................................................................................................\n      -- ### see https://sqlite.org/forum/forumpost/9f06fedaa5 ###\n      create table multiples_idx (\n        n         integer not null,\n        idx       integer not null,\n        multiple  integer not null,\n        primary key ( n, idx ) );\n      create index multiples_idx_multiple_idx on multiples_idx ( multiple );\n      \"\"\"\n    #.......................................................................................................\n    for n in [ 1 .. 3 ]\n      for idx in [ 0 .. 9 ]\n        multiple = n * idx\n        continue if multiple > 10\n        dba.run SQL\"\"\"insert into multiples_idx ( n, idx, multiple )\n          values ( $n, $idx, $multiple )\"\"\", { n, idx, multiple, }\n    #.......................................................................................................\n    for row from dba.query SQL\"select * from multiples_idx;\"\n      info '^5554^', row\n    for row from dba.query SQL\"\"\"select * from multiples;\"\"\"\n      info '^5554^', row\n    #.......................................................................................................\n    console.table dba.list dba.query SQL\"explain query plan select * from multiples;\"\n    console.table dba.list dba.query SQL\"explain query plan select * from multiples_idx where idx > 3;\"\n    console.table dba.list dba.query SQL\"explain query plan select * from multiples_idx where multiple > 3;\"\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: User-Defined Window Function\" ] = ( T, done ) ->\n  ### see https://github.com/nalgeon/sqlean/blob/main/docs/vsv.md ###\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  schema            = 'main'\n  dba               = new Dba()\n  dba.load_extension PATH.resolve PATH.join __dirname, '../../../assets/sqlite-extensions/json1.so'\n  # dba.sqlt.unsafeMode true\n  { I, L, V, }      = new ( require '../../../apps/icql-dba/lib/sql' ).Sql\n  #.........................................................................................................\n  dba.create_window_function\n    name:           'udf_json_array_agg'\n    varargs:        false\n    deterministic:  true\n    start:          -> [] # must be new object for each partition, therefore use function, not constant\n    step:           ( total, element ) -> total.push element; total\n    inverse:        ( total, dropped ) -> total.pop(); total\n    result:         ( total ) -> jr total\n  #.........................................................................................................\n  await do =>\n    #.......................................................................................................\n    dba.execute SQL\"\"\"\n      create view multiples as select distinct\n          n                                               as n,\n          udf_json_array_agg( multiple ) over w           as multiples\n        from multiples_idx\n        window w as ( partition by n order by idx range between unbounded preceding and unbounded following )\n        order by n;\n      -- ...................................................................................................\n      create table multiples_idx (\n        n         integer not null,\n        idx       integer not null,\n        multiple  integer not null,\n        primary key ( n, idx ) );\n      create index multiples_idx_idx_idx on multiples_idx ( idx );\n      create index multiples_idx_multiple_idx on multiples_idx ( multiple );\n      -- ...................................................................................................\n      create trigger multiple_instead_insert instead of insert on multiples begin\n        insert into multiples_idx( n, idx, multiple )\n          select new.n, j.key, j.value from json_each( new.multiples ) as j;\n        end;\n      -- ...................................................................................................\n      create trigger multiple_instead_delete instead of delete on multiples begin\n        delete from multiples_idx where n = old.n;\n        end;\n      -- ...................................................................................................\n      create trigger multiple_instead_update instead of update on multiples begin\n        delete from multiples_idx where n = old.n;\n        insert into multiples_idx( n, idx, multiple )\n          select new.n, j.key, j.value from json_each( new.multiples ) as j;\n        end;\n      \"\"\"\n    #.......................................................................................................\n    for n in [ 1 .. 3 ]\n      multiples = jr ( n * idx for idx in [ 0 .. 9 ] )\n      dba.run SQL\"\"\"insert into multiples ( n, multiples ) values ( $n, $multiples )\"\"\", { n, multiples, }\n    dba.execute SQL\"insert into multiples ( n, multiples ) values ( 5, '[0,5,10,15,20]' );\"\n    #.......................................................................................................\n    console.table dba.list dba.query SQL\"select * from multiples_idx;\"\n    console.table dba.list dba.query SQL\"select * from multiples;\"\n    T.eq ( dba.list dba.query SQL\"select * from multiples_idx order by n, idx;\" ), [ { n: 1, idx: 0, multiple: 0 }, { n: 1, idx: 1, multiple: 1 }, { n: 1, idx: 2, multiple: 2 }, { n: 1, idx: 3, multiple: 3 }, { n: 1, idx: 4, multiple: 4 }, { n: 1, idx: 5, multiple: 5 }, { n: 1, idx: 6, multiple: 6 }, { n: 1, idx: 7, multiple: 7 }, { n: 1, idx: 8, multiple: 8 }, { n: 1, idx: 9, multiple: 9 }, { n: 2, idx: 0, multiple: 0 }, { n: 2, idx: 1, multiple: 2 }, { n: 2, idx: 2, multiple: 4 }, { n: 2, idx: 3, multiple: 6 }, { n: 2, idx: 4, multiple: 8 }, { n: 2, idx: 5, multiple: 10 }, { n: 2, idx: 6, multiple: 12 }, { n: 2, idx: 7, multiple: 14 }, { n: 2, idx: 8, multiple: 16 }, { n: 2, idx: 9, multiple: 18 }, { n: 3, idx: 0, multiple: 0 }, { n: 3, idx: 1, multiple: 3 }, { n: 3, idx: 2, multiple: 6 }, { n: 3, idx: 3, multiple: 9 }, { n: 3, idx: 4, multiple: 12 }, { n: 3, idx: 5, multiple: 15 }, { n: 3, idx: 6, multiple: 18 }, { n: 3, idx: 7, multiple: 21 }, { n: 3, idx: 8, multiple: 24 }, { n: 3, idx: 9, multiple: 27 }, { n: 5, idx: 0, multiple: 0 }, { n: 5, idx: 1, multiple: 5 }, { n: 5, idx: 2, multiple: 10 }, { n: 5, idx: 3, multiple: 15 }, { n: 5, idx: 4, multiple: 20 } ]\n    T.eq ( dba.list dba.query SQL\"select * from multiples order by n;\" ), [ { n: 1, multiples: '[0,1,2,3,4,5,6,7,8,9]' }, { n: 2, multiples: '[0,2,4,6,8,10,12,14,16,18]' }, { n: 3, multiples: '[0,3,6,9,12,15,18,21,24,27]' }, { n: 5, multiples: '[0,5,10,15,20]' } ]\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: window functions etc.\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  dba               = new Dba()\n  schema            = 'main'\n  { template_path\n    work_path }     = await H.procure_db { size: 'nnt', ref: 'fn', }\n  debug { template_path, work_path, }\n  dba.open { path: work_path, schema, }\n  numbers           = dba.all_first_values dba.query SQL\"select n from nnt order by n;\"\n  # console.table dba.list dba.walk_objects { schema, }\n  #.........................................................................................................\n  await do =>\n    ### single-valued function ###\n    dba.create_function name: 'square', deterministic: true, varargs: false, call: ( n ) -> n ** 2\n    matcher = ( ( n * n ) for n in numbers )\n    result  = dba.list dba.query SQL\"select *, square( n ) as square from nnt order by square;\"\n    console.table result\n    result  = ( row.square for row in result )\n    T.eq result, matcher\n  #.........................................................................................................\n  await do =>\n    ### aggregate function ###\n    dba.create_aggregate_function\n      name:           'product'\n      start:          -> null\n      step:           ( total, element ) -> debug '^4476^', { total, element, }; ( total ? 1 ) * element\n      # inverse:        ( total, dropped ) -> total.pop(); total\n      # result:         ( total ) -> total\n    # matcher = ( ( n * n ) for n in numbers )\n    #.......................................................................................................\n    do =>\n      result  = dba.list dba.query SQL\"select product( n ) as product from nnt where n != 0;\"\n      console.table result\n      matcher = [ 5122922112, ]\n      result  = ( row.product for row in result )\n      T.eq result, matcher\n    #.......................................................................................................\n    do =>\n      result  = dba.list dba.query SQL\"select product( n ) as product from nnt where n > 100;\"\n      console.table result\n      matcher = [ null, ]\n      result  = ( row.product for row in result )\n      T.eq result, matcher\n    #.......................................................................................................\n    do =>\n      try\n        dba.query SQL\"select product( n ) over () as product from nnt;\"\n      catch error\n        T.eq error.code, 'SQLITE_ERROR'\n        T.eq error.name, 'SqliteError'\n        T.eq error.message, 'product() may not be used as a window function'\n      unless error?\n        T.fail \"expected error\"\n      # console.table result\n      # matcher = [ null, ]\n      # result  = ( row.product for row in result )\n      # T.eq result, matcher\n  #.........................................................................................................\n  await do =>\n    ### window function ###\n    dba.create_window_function\n      name:           'array_agg'\n      varargs:        false\n      deterministic:  true\n      start:          -> [] # must be new object for each partition, therefore use function, not constant\n      step:           ( total, element ) -> total.push element; total\n      inverse:        ( total, dropped ) -> total.pop(); total\n      result:         ( total ) -> jr total\n    #.......................................................................................................\n    do =>\n      result  = dba.list dba.query SQL\"select array_agg( t ) as names from nnt;\"\n      console.table result\n      matcher = [ '[\"naught\",\"one\",\"one point five\",\"two\",\"two point three\",\"three\",\"three point one\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"eleven\",\"twelve\"]' ]\n      result  = ( row.names for row in result )\n      T.eq result, matcher\n    #.......................................................................................................\n    do =>\n      result  = dba.list dba.query SQL\"\"\"\n        select distinct\n            array_agg( t ) over w as names\n          from nnt\n          window w as (\n            partition by substring( t, 1, 1 )\n            order by t\n            range between unbounded preceding and unbounded following\n            );\"\"\"\n      console.table result\n      matcher = [ '[\"eight\",\"eleven\"]', '[\"five\",\"four\"]', '[\"naught\",\"nine\"]', '[\"one\",\"one point five\"]', '[\"seven\",\"six\"]', '[\"ten\",\"three\",\"three point one\",\"twelve\",\"two\",\"two point three\"]' ]\n      result  = ( row.names for row in result )\n      debug '^878^', result\n      T.eq result, matcher\n  #.........................................................................................................\n  await do =>\n    ### table-valued function ###\n    dba.create_table_function\n      name:         're_matches'\n      columns:      [ 'match', 'capture', ]\n      parameters:   [ 'text', 'pattern', ]\n      rows: ( text, pattern ) ->\n        regex = new RegExp pattern, 'g'\n        while ( match = regex.exec text )?\n          yield [ match[ 0 ], match[ 1 ], ]\n        return null\n    await do =>\n      result  = dba.list dba.query SQL\"\"\"\n        select\n            *\n          from\n            nnt,\n            re_matches( t, '^.*([aeiou].e).*$' ) as rx\n          order by rx.match;\"\"\"\n      console.table result\n      matcher = [ 'eleven:eve', 'five:ive', 'nine:ine', 'one:one', 'one point five:ive', 'seven:eve', 'three point one:one' ]\n      result  = ( \"#{row.t}:#{row.capture}\" for row in result )\n      debug '^984^', result\n      T.eq result, matcher\n    await do =>\n      result  = dba.list dba.query SQL\"\"\"\n        select\n            *\n          from\n            nnt,\n            re_matches( t, 'o' ) as rx\n          order by t;\"\"\"\n      console.table result\n      matcher = [ 'four', 'one', 'one point five', 'one point five', 'three point one', 'three point one', 'two', 'two point three', 'two point three' ]\n      result  = ( row.t for row in result )\n      debug '^984^', result\n      T.eq result, matcher\n  #.........................................................................................................\n  await do =>\n    ### virtual table ###\n    FS = require 'fs'\n    dba.create_virtual_table\n      name:   'file_contents'\n      create: ( filename, P... ) ->\n        urge '^46456^', { filename, P, }\n        R =\n          columns: [ 'path', 'lnr', 'line', ],\n          rows: ->\n            path  = PATH.resolve PATH.join __dirname, '../../../assets/icql', filename\n            lines = ( FS.readFileSync path, { encoding: 'utf-8', } ).split '\\n'\n            for line, line_idx in lines\n              yield { path, lnr: line_idx + 1, line, }\n            return null\n        return R\n    dba.execute SQL\"\"\"\n      create virtual table contents_of_wbftsv\n        using file_contents( ncrglyphwbf.tsv, any stuff goes here, and more here );\"\"\"\n    result  = dba.list dba.query SQL\"select * from contents_of_wbftsv where lnr between 10 and 14 order by 1, 2, 3;\"\n    console.table result\n    matcher = [ 'u-cjk-xa-3417\\t㐗\\t<1213355>', '', 'u-cjk-xa-34ab\\t㒫\\t<121135>', 'u-cjk-xa-342a\\t㐪\\t<415234>', 'u-cjk-xa-342b\\t㐫\\t<413452>' ]\n    result  = ( row.line for row in result )\n    debug '^984^', result\n    T.eq result, matcher\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: view with UDF\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  dba               = new Dba()\n  schema            = 'main'\n  { template_path\n    work_path }     = await H.procure_db { size: 'nnt', ref: 'fnsquareview', }\n  dba.open { path: work_path, schema, }\n  numbers           = dba.all_first_values dba.query SQL\"select n from nnt order by n;\"\n  #.........................................................................................................\n  dba.create_function name: 'square', deterministic: true, varargs: false, call: ( n ) -> n ** 2\n  dba.execute SQL\"create view squares as select n, square( n ) as square from nnt order by n;\"\n  matcher = [ 0, 1, 2.25, 4, 5.289999999999999, 9, 9.610000000000001, 16, 25, 36, 49, 64, 81, 100, 121, 144 ]\n  result  = dba.list dba.query SQL\"select * from squares;\"\n  console.table result\n  result  = ( row.square for row in result )\n  debug '^984^', result\n  T.eq result, matcher\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: typing\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dba }           = require '../../../apps/icql-dba'\n  dba               = new Dba()\n  schema            = 'main'\n  { template_path\n    work_path }     = await H.procure_db { size: 'small', ref: 'typing', }\n  dba.open { path: work_path, schema, }\n  #.........................................................................................................\n  ### In 'simple' cases, there's meaningful type information present: ###\n  statement = dba.sqlt.prepare SQL\"select stamped as d from main;\"\n  iterator  = statement.iterate []\n  [ iterator..., ] ### NOTE: consume iterator to free connection ###\n  d         = ( [ d.name, d.type, ] for d in statement.columns() )\n  T.eq d, [ [ 'd', 'boolean' ] ]\n  #.........................................................................................................\n  ### But as soon as any operation is done on data: that typing information vanishes: ###\n  statement = dba.sqlt.prepare SQL\"select ( stamped and not stamped ) as d from main;\"\n  iterator  = statement.iterate []\n  [ iterator..., ] ### NOTE: consume iterator to free connection ###\n  d         = ( [ d.name, d.type, ] for d in statement.columns() )\n  T.eq d, [ [ 'd', null ] ]\n  #.........................................................................................................\n  ### We can even explicitly cast results but that does not bring back typing: ###\n  statement = dba.sqlt.prepare SQL\"select cast( stamped and not stamped as boolean ) as d from main;\"\n  iterator  = statement.iterate []\n  [ iterator..., ] ### NOTE: consume iterator to free connection ###\n  d         = ( [ d.name, d.type, ] for d in statement.columns() )\n  T.eq d, [ [ 'd', null ] ]\n  #.........................................................................................................\n  ### We can enforce better type checking in SQLite by using `check` constraints and UDFs: ###\n  as_boolean = ( d ) -> if d then 1 else 0\n  dba.create_function name: 'validate_integer', call: ( n ) ->\n    debug '^534^', \"validating #{rpr n}\"\n    return as_boolean types.isa.integer n\n  dba.execute SQL\"create table x( n integer, check ( validate_integer( n ) ) );\"\n  dba.execute SQL\"insert into x ( n ) values ( 42 );\"; T.ok true\n  try dba.execute SQL\"insert into x ( n ) values ( 1.23 );\" catch error then T.ok error.message is \"CHECK constraint failed: validate_integer( n )\"\n  try dba.execute SQL\"insert into x ( n ) values ( 'foobar' );\" catch error then T.ok error.message is \"CHECK constraint failed: validate_integer( n )\"\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: advanced interpolation\" ] = ( T, done ) ->\n  { Dba }           = require '../../../apps/icql-dba'\n  E                 = require '../../../apps/icql-dba/lib/errors'\n  dba               = new Dba()\n  do => #...................................................................................................\n    sql     = SQL\"select $:col_a, $:col_b where $:col_b in $V:choices\"\n    d       = { col_a: 'foo', col_b: 'bar', choices: [ 1, 2, 3, ], }\n    result  = dba.sql.interpolate sql, d\n    info '^23867^', result\n    T.eq result, \"\"\"select \"foo\", \"bar\" where \"bar\" in ( 1, 2, 3 )\"\"\"\n  do => #...................................................................................................\n    sql     = SQL\"select ?:, ?: where ?: in ?V:\"\n    d       = [ 'foo', 'bar', 'bar', [ 1, 2, 3, ], ]\n    result  = dba.sql.interpolate sql, d\n    info '^23867^', result\n    T.eq result, \"\"\"select \"foo\", \"bar\" where \"bar\" in ( 1, 2, 3 )\"\"\"\n  T.throws /unknown interpolation format 'X'/, => #.........................................................\n    sql     = SQL\"select ?:, ?X: where ?: in ?V:\"\n    d       = [ 'foo', 'bar', 'bar', [ 1, 2, 3, ], ]\n    result  = dba.sql.interpolate sql, d\n  done() #..................................................................................................\n\n# use table valued functions to do joins over 2+ dba instances\n\n\n############################################################################################################\nif module is require.main then do =>\n  # test @, { timeout: 10e3, }\n  test @[ \"DBA: advanced interpolation\" ]\n  # test @[ \"DBA: typing\" ]\n  # test @[ \"DBA: window functions etc.\" ]\n  # test @[ \"DBA: view with UDF\" ]\n  # test @[ \"DBA: sqlean vsv extension\" ]\n  # test @[ \"DBA: indexing JSON lists (de-constructing method)\" ]\n  # test @[ \"DBA: indexing JSON lists (constructing method)\" ]\n  # test @[ \"DBA: User-Defined Window Function\" ]\n  # test @[ \"DBA: VNRs\" ], { timeout: 5e3, }\n  # test @[ \"DBA: import TSV; big file\" ], { timeout: 60e3, }\n  # test @[ \"DBA: open() file DB in schema main\" ]\n  # test @[ \"DBA: writing while reading 2\" ]\n  # test @[ \"DBA: open() RAM DB from file in schema main\" ]\n  # test @[ \"DBA: open() empty RAM DB in schema main\" ]\n  # test @[ \"DBA: virtual tables\" ]\n  # test @[ \"DBA: import TSV; cfg variants 2\" ]\n  # test @[ \"DBA: import TSV; cfg variants 2\" ]\n  # test @[ \"DBA: import TSV; cfg variants 3\" ]\n  # test @[ \"DBA: import TSV; cfg variants 4\" ]\n  # test @[ \"DBA: import CSV; cfg variants 5\" ]\n  # await @_demo_csv_parser()\n  # test @[ \"___ DBA: import() (four corner)\" ]\n  # test @[ \"___ DBA: import() (big file)\" ]\n  # test @[ \"DBA: open() RAM DB\" ]\n  # test @[ \"DBA: export() RAM DB\" ]\n  # test @[ \"DBA: import() CSV\" ]\n  # test @[ \"DBA: import() TSV\" ]\n  # @[ \"DBA: import() CSV\" ]()\n\n\n\n\n\n\n\n\n\n"
  ]
}