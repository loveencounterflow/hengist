{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/hollerith-tng.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'IN-MEMORY-SQL'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\ngcfg                      = { verbose: false, }\nHOLLERITH_CODEC           = require '../../../apps/hollerith-codec'\nHOLLERITH_CODEC_TNG       = require '../../../apps/hollerith-codec/lib/tng'\n\n\n\n#===========================================================================================================\n# IMPLEMENTATIONS (TO BE MOVED TO HOLLERITH-CODEC)\n#-----------------------------------------------------------------------------------------------------------\nclass Hollerith\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @sign_delta  = 0x80000000  ### used to lift negative numbers to non-negative ###\n    @u32_width   = 4           ### bytes per element ###\n    @vnr_width   = 5           ### maximum elements in VNR vector ###\n    @nr_min      = -0x80000000 ### smallest possible VNR element ###\n    @nr_max      = +0x7fffffff ### largest possible VNR element ###\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  encode_tng: ( vnr ) ->\n    unless 0 < vnr.length <= @vnr_width\n      throw new Error \"^44798^ expected VNR to be between 1 and #{@vnr_width} elements long, got length #{vnr.length}\"\n    R           = Buffer.alloc @vnr_width * @u32_width, 0x00 ### TAINT pre-compute constant ###\n    offset      = -@u32_width\n    for idx in [ 0 ... @vnr_width ]\n      R.writeUInt32BE ( vnr[ idx ] ? 0 ) + @sign_delta, ( offset += @u32_width )\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  encode_bcd: ( vnr ) ->\n    vnr_width   = 5           ### maximum elements in VNR vector ###\n    dpe         = 4           ### digits per element ###\n    base        = 36\n    plus        = '+'\n    minus       = '!'\n    padder      = '.'\n    R           = []\n    for idx in [ 0 ... vnr_width ]\n      nr    = vnr[ idx ] ? 0\n      sign  = if nr >= 0 then plus else minus\n      R.push sign + ( ( Math.abs nr ).toString base ).padStart dpe, padder\n    R           = R.join ','\n    return R\n\n#===========================================================================================================\nHOLLERITH = new Hollerith()\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  whisper \"retrieving test data...\"\n  DATOM = require '../../../apps/datom'\n  integer_lists = []\n  list_lengths  = DATA.get_integers cfg.list_count, cfg.list_length_min, cfg.list_length_max\n  #.........................................................................................................\n  for list_length in list_lengths\n    # integer_lists.push DATA.get_integers list_length, HOLLERITH.nr_min, HOLLERITH.nr_max\n    integer_lists.push DATA.get_integers list_length, -100, +100\n  #.........................................................................................................\n  data_cache  = { integer_lists, }\n  data_cache  = DATOM.freeze data_cache\n  whisper \"...done\"\n  return data_cache\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@hollerith_classic = ( cfg ) -> new Promise ( resolve ) =>\n  { integer_lists, } = @get_data cfg\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    for integer_list in integer_lists\n      x = HOLLERITH_CODEC.encode integer_list\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@hollerith_tng = ( cfg ) -> new Promise ( resolve ) =>\n  { integer_lists, } = @get_data cfg\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    for integer_list in integer_lists\n      x = HOLLERITH.encode_tng integer_list\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@hollerith_bcd = ( cfg ) -> new Promise ( resolve ) =>\n  { integer_lists, } = @get_data cfg\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    for integer_list in integer_lists\n      x = HOLLERITH.encode_bcd [ integer_list, ]\n      count++\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  gcfg.verbose  = true\n  gcfg.verbose  = false\n  bench         = BM.new_benchmarks()\n  cfg           = { list_count: 3e5, list_length_min: 1, list_length_max: HOLLERITH.vnr_width, }\n  repetitions   = 5\n  test_names    = [\n    'hollerith_classic'\n    'hollerith_tng'\n    'hollerith_bcd'\n    ]\n  global.gc() if global.gc?\n  data_cache = null\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      global.gc() if global.gc?\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n"
  ]
}