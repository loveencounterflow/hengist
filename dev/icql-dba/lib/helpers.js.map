{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/helpers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL/TESTS/HELPERS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n# #...........................................................................................................\n# test                      = require 'guy-test'\n# jr                        = JSON.stringify\n# { inspect, }              = require 'util'\n# xrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n# xrpr2                     = ( x ) -> inspect x, { colors: yes, breakLength: 20, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nFSP                       = require 'fs/promises'\ndba_types                 = require '../../../apps/icql-dba/lib/types'\n@types                    = new ( require 'intertype' ).Intertype\n{ isa\n  validate\n  validate_list_of\n  equals }                = @types.export()\nDATA                      = require '../../../lib/data-providers-nocache'\nDATOM                     = require 'datom'\n{ Dba }                   = require '../../../apps/icql-dba'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'interpolatable_value', ( x ) ->\n  return true if @isa.text x\n  return true if @isa.float x\n  return true if @isa.boolean x\n  return false\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'procure_db_cfg', tests:\n  \"@isa.object x\":                      ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.ref\":           ( x ) -> @isa.nonempty_text x.ref\n  \"@isa.nonempty_text x.size\":          ( x ) -> @isa.nonempty_text x.size\n  \"@isa.boolean x.reuse\":               ( x ) -> @isa.boolean x.reuse\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'looks_like_db_cfg', tests:\n  \"@isa.object x\":                      ( x ) -> @isa.object x\n  \"dba_types.isa.dba x.dba\":            ( x ) -> dba_types.isa.dba x.dba\n  \"dba_types.isa.ic_schema x.schema\":   ( x ) -> dba_types.isa.ic_schema x.schema\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'datamill_db_lookalike', ( cfg ) ->\n  @validate.looks_like_db_cfg cfg\n  { dba, schema, }  = cfg\n  schema_i          = dba.as_identifier schema\n  try\n    return false unless ( dba.first_value dba.query \"select count(*) from #{schema_i}.main;\" ) is 327\n    debug '^35354^', dba.list dba.query \"select * from #{schema_i}.main order by vnr_blob limit 3;\"\n  catch error\n    throw error unless error.code is 'SQLITE_ERROR'\n    return false\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'chinook_db_lookalike', ( cfg ) ->\n  @validate.looks_like_db_cfg cfg\n  { dba, schema, }  = cfg\n  schema_i          = dba.as_identifier schema\n  try\n    db_objects = dba.list dba.query \"select type, name from #{schema_i}.sqlite_schema where true or type is 'table' order by name;\"\n    info db_objects\n    return false unless equals db_objects, [\n      { type: 'table', name: 'Album',                             }\n      { type: 'table', name: 'Artist',                            }\n      { type: 'table', name: 'Customer',                          }\n      { type: 'table', name: 'Employee',                          }\n      { type: 'table', name: 'Genre',                             }\n      { type: 'index', name: 'IFK_AlbumArtistId',                 }\n      { type: 'index', name: 'IFK_CustomerSupportRepId',          }\n      { type: 'index', name: 'IFK_EmployeeReportsTo',             }\n      { type: 'index', name: 'IFK_InvoiceCustomerId',             }\n      { type: 'index', name: 'IFK_InvoiceLineInvoiceId',          }\n      { type: 'index', name: 'IFK_InvoiceLineTrackId',            }\n      { type: 'index', name: 'IFK_PlaylistTrackTrackId',          }\n      { type: 'index', name: 'IFK_TrackAlbumId',                  }\n      { type: 'index', name: 'IFK_TrackGenreId',                  }\n      { type: 'index', name: 'IFK_TrackMediaTypeId',              }\n      { type: 'table', name: 'Invoice',                           }\n      { type: 'table', name: 'InvoiceLine',                       }\n      { type: 'table', name: 'MediaType',                         }\n      { type: 'table', name: 'Playlist',                          }\n      { type: 'table', name: 'PlaylistTrack',                     }\n      { type: 'table', name: 'Track',                             }\n      { type: 'index', name: 'sqlite_autoindex_PlaylistTrack_1',  }\n      { type: 'table', name: 'sqlite_sequence',                   } ]\n  catch error\n    throw error unless error.code is 'SQLITE_ERROR'\n    return false\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'micro_db_lookalike', ( cfg ) ->\n  @validate.looks_like_db_cfg cfg\n  { dba, schema, }  = cfg\n  schema_i          = dba.as_identifier schema\n  try\n    db_objects = dba.list dba.query \"select type, name from #{schema_i}.sqlite_schema order by name;\"\n    info db_objects\n    return false unless equals db_objects, [\n      { type: 'table', name: 'main',                   } ]\n  catch error\n    throw error unless error.code is 'SQLITE_ERROR'\n    return false\n  return true\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@get_icql_settings = ( remove_db = false ) ->\n  R                 = {}\n  R.connector       = require 'better-sqlite3'\n  R.db_path         = '/tmp/icql.db'\n  R.icql_path       = PATH.resolve PATH.join __dirname, '../../../assets/icql/test.icql'\n  if remove_db\n    try\n      ( require 'fs' ).unlinkSync R.db_path\n    catch error\n      throw error unless ( error.code is 'ENOENT' )\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@file_exists = ( path ) ->\n  try ( stat = FS.statSync path ) catch error\n    return false if error.code is 'ENOENT'\n    throw error\n  return true if stat.isFile()\n  throw new Error \"^434534^ not a file: #{rpr path}\\n#{rpr stat}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@ensure_file_exists = ( path ) ->\n  throw new Error \"^434534^ not a file: #{rpr path}\" unless @file_exists path\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@try_to_remove_file = ( path ) ->\n  try FS.unlinkSync path catch error\n    return if error.code is 'ENOENT'\n    throw error\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@resolve_path = ( path ) -> PATH.resolve PATH.join __dirname, '../../../', path\n\n#-----------------------------------------------------------------------------------------------------------\n@copy_over = ( from_path, to_path ) ->\n  @try_to_remove_file to_path unless to_path in [ ':memory:', '', ]\n  await FSP.copyFile from_path, to_path\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@interpolate  = ( template, namespace ) ->\n  validate.text template\n  validate.object namespace\n  R = template\n  for name, value of namespace\n    continue unless ( R.indexOf ( pattern = \"{#{name}}\" ) ) > -1\n    validate.interpolatable_value value\n    R = R.replaceAll pattern, value\n  if ( match = R.match /(?<!\\\\)\\{/ )\n    throw new Error \"unresolved curly bracket in template #{rpr template}\"\n  R = R.replaceAll '\\\\{', '{'\n  R = R.replaceAll '\\\\}', '}'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  whisper \"retrieving test data...\"\n  #.........................................................................................................\n  texts       = DATA.get_words cfg.word_count\n  #.........................................................................................................\n  data_cache  = { texts, }\n  data_cache  = DATOM.freeze data_cache\n  whisper \"...done\"\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@get_cfg = ->\n  R =\n    # word_count: 10_000\n    word_count: 10\n    sql:\n      small:  @resolve_path 'assets/icql/small-datamill.sql'\n      big:    @resolve_path 'assets/icql/Chinook_Sqlite_AutoIncrementPKs.sql'\n    csv:\n      small:  @resolve_path 'assets/icql/chineselexicaldatabase2.1.small.txt'\n    db:\n      templates:\n        micro:  @resolve_path 'assets/icql/micro.db'\n        small:  @resolve_path 'assets/icql/small-datamill.db'\n        big:    @resolve_path 'assets/icql/Chinook_Sqlite_AutoIncrementPKs.db'\n      target:\n        small:  @resolve_path 'data/icql/icql-{ref}-{size}.db'\n        big:    @resolve_path 'data/icql/icql-{ref}-{size}.db'\n      work:\n        mem:    ':memory:'\n        fle:    @resolve_path 'data/icql/icql-{ref}-{size}.db'\n      temp:\n        small:  @resolve_path 'data/icql/icql-{ref}-{size}-temp.db'\n        big:    @resolve_path 'data/icql/icql-{ref}-{size}-temp.db'\n      old:\n        small:  @resolve_path 'data/icql/icql-{ref}-{size}-old.db'\n        big:    @resolve_path 'data/icql/icql-{ref}-{size}-old.db'\n    pragma_sets:\n      #.....................................................................................................\n      ### thx to https://forum.qt.io/topic/8879/solved-saving-and-restoring-an-in-memory-sqlite-database/2 ###\n      fle: [\n        'page_size = 4096'\n        'cache_size = 16384'\n        'temp_store = MEMORY'\n        'journal_mode = WAL'\n        'locking_mode = EXCLUSIVE'\n        'synchronous = OFF' ]\n      #.....................................................................................................\n      mem: []\n      bare: []\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@nonexistant_path_from_ref = ( ref ) ->\n  R = @interpolate @get_cfg().db.work.fle, { ref, size: 'any', }\n  @try_to_remove_file R\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@procure_db = ( cfg ) ->\n  cfg           = { reuse: false, cfg..., }\n  validate.procure_db_cfg cfg\n  xcfg          = @get_cfg()\n  template_path = @interpolate xcfg.db.templates[ cfg.size ], cfg\n  @ensure_file_exists template_path\n  # work_path     = @interpolate xcfg.db.work[      cfg.mode ], cfg\n  work_path     = @interpolate xcfg.db.work.fle, cfg\n  unless cfg.reuse and @file_exists work_path\n    help \"^4341^ procuring DB #{work_path}\"\n    await @copy_over template_path, work_path\n  else\n    warn \"^4341^ skipping DB file creation (#{work_path} already exists)\"\n  return { template_path, work_path, }\n\n\n"
  ]
}