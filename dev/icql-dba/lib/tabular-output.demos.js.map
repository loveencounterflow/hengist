{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/tabular-output.demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/DEMOS/TABULATE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# test                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\n# on_process_exit           = require 'exit-hook'\n# sleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\nSQL                       = String.raw\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_intertext_tabulate = -> new Promise ( resolve, reject ) =>\n  TXT       = require '../../../apps/intertext'\n  SP        = require '../../../apps/steampipes'\n  { Dba, }  = require H.icql_dba_path\n  db_path   = PATH.resolve PATH.join __dirname, '../../../data/dpan.sqlite'\n  urge \"^487^ using DB at #{db_path}\"\n  dba       = new Dba()\n  dba.open { path: db_path, }\n  { $\n    $watch\n    $drain } = SP.export()\n  debug '^363^', ( k for k of TXT.TBL )\n  debug '^363^', TXT.TBL\n  source    = SP.new_push_source()\n  pipeline  = []\n  pipeline.push source\n  pipeline.push TXT.TBL.$tabulate { multiline: false, }\n  # pipeline.push TXT.TBL.$tabulate { multiline: false, width: 30, }\n  pipeline.push $ ( d, send ) -> send d.text\n  pipeline.push $watch ( d ) -> echo d\n  pipeline.push $drain ( result ) -> resolve result\n  SP.pull pipeline...\n  for row from dba.query SQL\"select * from dpan_tags limit 5;\"\n    # debug '^448^', row\n    source.send row\n  source.end()\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  await demo_intertext_tabulate()\n\n\n\n\n\n\n\n"
  ]
}