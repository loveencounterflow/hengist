{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/construction.tests.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAA,QAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,wBAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,QAFF,EAGE,gBAHF,CAAA,GAG4B,KAAK,CAAC,MAAN,CAAA,CAH5B;;EAIA,GAAA,GAA4B,MAAM,CAAC;;EACnC,GAAA,GAA4B,OAAA,CAAQ,mBAAR;;EAC5B,CAAA,CAAE,GAAF,CAAA,GAA4B,OAAA,CAAQ,CAAC,CAAC,aAAV,CAA5B;;EACA,CAAA,GAA4B,OAAA,CAAQ,CAAC,CAAC,aAAF,GAAkB,aAA1B;;EACtB;IAAN,MAAA,UAAA,QAAwB,IAAxB,CAAA;;IACE,SAAC,CAAA,YAAD,GAAe;;;;;;EACjB,QAAA,GAA4B,IAAI,SAAJ,CAAA;;EAE5B,KAAK,CAAC,OAAN,CAAc,kBAAd,EAAkC;IAAA,KAAA,EAChC;MAAA,sBAAA,EAAwC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB,CAAnB;MAAT,CAAxC;MACA,0BAAA,EAAwC,QAAA,CAAE,CAAF,CAAA;eAAS,iBAAiB,CAAC,IAAlB,CAAuB,CAAvB;MAAT;IADxC;EADgC,CAAlC;;EAGA,KAAK,CAAC,OAAN,CAAc,iBAAd,EAAiC;IAAA,KAAA,EAC/B;MAAA,eAAA,EAA4C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAA5C;MACA,6BAAA,EAA4C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,YAAY,CAAC,OAAd,CAAsB,CAAC,CAAC,GAAxB;MAAT,CAD5C;MAEA,mCAAA,EAA4C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,YAAY,CAAC,aAAd,CAA4B,CAAC,CAAC,GAA9B;MAAT,CAF5C;MAGA,yCAAA,EAA4C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,YAAY,CAAC,gBAAd,CAA+B,CAAC,CAAC,MAAjC;MAAT,CAH5C;MAIA,yCAAA,EAA4C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,YAAY,CAAC,gBAAd,CAA+B,CAAC,CAAC,MAAjC;MAAT;IAJ5C;EAD+B,CAAjC;;EAOM;IAAN,MAAA,KAAA,CAAA;;MAiByB,OAAtB,oBAAsB,CAAE,IAAF,CAAA;AACzB,YAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA;QAAI,IAAG,CAAE,IAAI,CAAC,GAAG,CAAC,GAAT,KAAgB,KAAlB,CAAA,IAA8B,CAAM,qBAAN,CAAjC;UACE,MAAM,IAAI,CAAC,CAAC,aAAN,CAAoB,SAApB,EAA+B,CAAA,+BAAA,CAAA,CAAgC,GAAA,CAAI,IAAI,CAAC,GAAT,CAAhC,CAAA,CAA/B,EADR;;;cAEQ,CAAC,MAAW;;QACpB,IAAG,CAAE,CAAI,IAAI,CAAC,GAAG,CAAC,GAAf,CAAA,IAAyB,uBAAzB,IAA4C,yBAA/C;UACE,MAAM,IAAI,CAAC,CAAC,aAAN,CAAoB,SAApB,EAA+B,CAAA,uDAAA,CAAA,CAAsD,GAAA,CAAI,IAAI,CAAC,GAAT,CAAtD,CAAA,CAA/B,EADR;;QAEA,IAAG,IAAI,CAAC,GAAG,CAAC,GAAZ;UACE,CAAA,CAAE,MAAF,EACE,GADF,CAAA,GACoB,QAAQ,CAAC,mBAAT,yCAA+C,IAA/C,CADpB;;iBAEQ,CAAC,SAAW;;UACpB,IAAI,CAAC,GAAG,CAAC,GAAT,GAAoB,IAJtB;SAAA,MAAA;UAME,IAAI,CAAC,GAAG,CAAC,GAAT,GAAoB,KANtB;;AAOA,eAAO,IAAI,CAAC;MAbS,CAdzB;;;MA8BkB,OAAf,aAAe,CAAE,IAAF,CAAA,EAAA;;QAEd,IAAI,CAAC,GAAL,GAAW,IAAC,CAAA,oBAAD,CAAsB,IAAtB;QACX,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,eAApB,CAAoC,IAAI,CAAC,GAAzC,EAFJ;;AAII,eAAO;MALO,CA9BlB;;;MAsCE,WAAa,CAAE,GAAF,CAAA,EAAA;;QAEX,GAAG,CAAC,GAAG,CAAC,oBAAR,CAA6B,IAA7B,EAAgC,GAAhC,EAAqC,KAArC,EADJ;;;;AAKI,eAAO;MANI;;IAzCf;;;;IAGE,IAAC,CAAA,CAAD,GAAI,GAAG,CAAC,GAAG,CAAC,MAAR,CACF;MAAA,QAAA,EACE;QAAA,eAAA,EACE;UAAA,YAAA,EAAc,YAAd;UACA,QAAA,EAAc,KADd;UAEA,MAAA,EAAc,IAFd;UAGA,SAAA,EAAc,KAHd;UAIA,OAAA,EAAc,IAJd;;UAMA,GAAA,EAAY,KANZ;UAOA,IAAA,EAAY,IAPZ;UAQA,MAAA,EAAY;QARZ;MADF;IADF,CADE;;;;gBA5CN;;;EA4FA,IAAC,CAAE,6BAAF,CAAD,GAAqC,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACrC,QAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA;IAAE,CAAA,CAAE,GAAF,CAAA,GAAoB,OAAA,CAAQ,CAAC,CAAC,aAAV,CAApB,EAAF;;IAEE,mBAAA,GAAsB;MACpB;QAAE;UAAE,GAAA,EAAK,KAAP;UAAe,IAAA,EAAM,IAArB;UAAgC,MAAA,EAAQ;QAAxC,CAAF;QAAuD,IAAvD;QAA6D,yBAA7D;OADoB;MAEpB;QAAE;UADqG;MACnG,GAAA,EAAK,KAAP;UAAe,IAAA,EAAM,IAArB;UAAgC,MAAA,EAAQ;QAAxC,CAAF;QAAuD,IAAvD;QAA6D,yBAA7D;OAFoB;MAGpB;QAAE;UADqG;MACnG,GAAA,EAAK,IAAP;UAAe,IAAA,EAAM,SAArB;UAAgC,MAAA,EAAQ;QAAxC,CAAF;QAAuD,IAAvD;QAA6D,+CAA7D;OAHoB;MAIpB;QAAE;UAD8G;MAC5G,GAAA,EAAK,KAAP;UAAe,IAAA,EAAM,SAArB;UAAgC,MAAA,EAAQ;QAAxC,CAAF;QAAuD,IAAvD;QAA6D,+CAA7D;OAJoB;MAMpB;QAAE;UAF8G;;MAE5G,GAAA,EAAK,IAAP;UAAe,IAAA,EAAM,IAArB;UAAgC,MAAA,EAAQ;QAAxC,CAAF;QAAuD;UAAE,GAAA,EAAK,IAAP;UAAc,IAAA,EAAM,IAApB;UAA+B,MAAA,EAAQ,kBAAvC;UAA2D,GAAA,EAAK;QAAhE,CAAvD;QAA4K,IAA5K;OANoB;MAOpB;QAAE;UADkL;MAChL,GAAA,EAAK,IAAP;UAAe,IAAA,EAAM,IAArB;UAAgC,MAAA,EAAQ;QAAxC,CAAF;QAAuD;UAAE,GAAA,EAAK,IAAP;UAAc,IAAA,EAAM,IAApB;UAA+B,MAAA,EAAQ,QAAvC;UAA2D,GAAA,EAAK;QAAhE,CAAvD;QAAkK,IAAlK;OAPoB;MAQpB;QAAE;UADwK;MACtK,GAAA,EAAK,IAAP;UAAe,IAAA,EAAM,SAArB;UAAgC,MAAA,EAAQ;QAAxC,CAAF;QAAuD;UAAE,GAAA,EAAK,KAAP;UAAc,IAAA,EAAM,SAApB;UAA+B,MAAA,EAAQ,IAAvC;UAA2D,GAAA,EAAK;QAAhE,CAAvD;QAAgI,IAAhI;OARoB;MASpB;QAAE;UADsI;MACpI,GAAA,EAAK,KAAP;UAAe,IAAA,EAAM,SAArB;UAAgC,MAAA,EAAQ;QAAxC,CAAF;QAAuD;UAAE,GAAA,EAAK,KAAP;UAAc,IAAA,EAAM,SAApB;UAA+B,MAAA,EAAQ,IAAvC;UAA2D,GAAA,EAAK;QAAhE,CAAvD;QAAgI,IAAhI;OAToB;MAUpB;QAAE;UADsI;MACpI,GAAA,EAAK,IAAP;UAAe,IAAA,EAAM,IAArB;UAAgC,MAAA,EAAQ;QAAxC,CAAF;QAAuD;UAAE,GAAA,EAAK,IAAP;UAAc,IAAA,EAAM,IAApB;UAA+B,MAAA,EAAQ,kBAAvC;UAA2D,GAAA,EAAK;QAAhE,CAAvD;QAA4K,IAA5K;OAVoB;MAWpB;QAAE;UADkL;MAChL,GAAA,EAAK,IAAP;UAAe,IAAA,EAAM,IAArB;UAAgC,MAAA,EAAQ;QAAxC,CAAF;QAAuD;UAAE,GAAA,EAAK,IAAP;UAAc,IAAA,EAAM,IAApB;UAA+B,MAAA,EAAQ,QAAvC;UAA2D,GAAA,EAAK;QAAhE,CAAvD;QAAkK,IAAlK;OAXoB;MAYpB;QAAE;UADwK;MACtK,GAAA,EAAK,IAAP;UAAe,IAAA,EAAM,SAArB;UAAgC,MAAA,EAAQ;QAAxC,CAAF;QAAuD;UAAE,GAAA,EAAK,IAAP;UAAc,IAAA,EAAM,SAApB;UAA+B,MAAA,EAAQ,kBAAvC;UAA2D,GAAA,EAAK;QAAhE,CAAvD;QAA4K,IAA5K;OAZoB;MAapB;QAAE;UADkL;MAChL,GAAA,EAAK,IAAP;UAAe,IAAA,EAAM,SAArB;UAAgC,MAAA,EAAQ;QAAxC,CAAF;QAAuD;UAAE,GAAA,EAAK,IAAP;UAAc,IAAA,EAAM,SAApB;UAA+B,MAAA,EAAQ,QAAvC;UAA2D,GAAA,EAAK;QAAhE,CAAvD;QAAkK,IAAlK;OAboB;MAFxB;;;IAkBE,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB;MACF,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;AAAG,eAAO,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,EAAW,MAAX,CAAA;UACxD,CAAA,CAAA,CAAA,GAAA;AACT,gBAAA,CAAA,EAAA;YAAQ,MAAA,GAAS,CAAE,GAAA,CAAE,IAAI,IAAJ,CAAS,KAAT,CAAF,CAAkB,CAAC,GAArB;YACT,KAAA,WAAA;cACE,IAA0B,MAAO,SAAP,MAAc,UAAd,MAAsB,YAAtB,MAAgC,KAA1D;gBAAA,OAAO,MAAM,CAAE,CAAF,EAAb;;YADF,CADR;;mBAIQ,OAAA,CAAQ,MAAR;UALC,CAAA;AAMH,iBAAO;QAPoD,CAAZ;MAAV,CAAjC;IADR;wCAUA;EA7BmC,EA5FrC;;;EA4HA,IAAC,CAAE,4BAAF,CAAD,GAAoC,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACpC,QAAA,GAAA;;IACE,CAAA,CAAE,GAAF,CAAA,GAAwB,OAAA,CAAQ,CAAC,CAAC,aAAV,CAAxB;IAEM;;MAAN,MAAA,KAAA,QAAmB,IAAnB,CAAA;;MACE,IAAC,CAAA,YAAD,GAAe;;;;kBAJnB;;IAME,GAAA,GAAM,IAAI,IAAJ,CAAA;;MACN,CAAC,CAAE,EAAH,CAAM,GAAG,CAAC,mBAAJ,CAAA,CAAN,EAAiC;QAAE,GAAA,EAAK,gDAAP;QAAyD,MAAA,EAAQ;MAAjE,CAAjC;;;MACA,CAAC,CAAE,EAAH,CAAM,GAAG,CAAC,mBAAJ,CAAA,CAAN,EAAiC;QAAE,GAAA,EAAK,gDAAP;QAAyD,MAAA,EAAQ;MAAjE,CAAjC;;;MACA,CAAC,CAAE,EAAH,CAAM,GAAG,CAAC,mBAAJ,CAAA,CAAN,EAAiC;QAAE,GAAA,EAAK,gDAAP;QAAyD,MAAA,EAAQ;MAAjE,CAAjC;;;MACA,CAAC,CAAE,EAAH,CAAM,GAAG,CAAC,mBAAJ,CAAA,CAAN,EAAiC;QAAE,GAAA,EAAK,gDAAP;QAAyD,MAAA,EAAQ;MAAjE,CAAjC;;;MACA,CAAC,CAAE,EAAH,CAAM,GAAG,CAAC,mBAAJ,CAAA,CAAN,EAAiC;QAAE,GAAA,EAAK,gDAAP;QAAyD,MAAA,EAAQ;MAAjE,CAAjC;;;MACA,CAAC,CAAE,EAAH,CAAQ,GAAG,CAAC,mBAAJ,CAAwB,cAAxB,CAAR,EAAkD;QAAE,GAAA,EAAK,4CAAP;QAAqD,MAAA,EAAQ;MAA7D,CAAlD;KAZF;;IAcE,IAAA,CAAK,GAAG,CAAC,mBAAJ,CAAA,CAAL;IACA,IAAA,CAAK,GAAG,CAAC,mBAAJ,CAAwB,cAAxB,CAAL;wCACA;EAjBkC,EA5HpC;;;EAkJA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA;aAChC,IAAA,CAAK,IAAL;IADgC,CAAA,IAAlC;;;EAlJA;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/CONSTRUCTION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n{ Dba }                   = require H.icql_dba_path\nE                         = require H.icql_dba_path + '/lib/errors'\nclass _Xxx_dbax extends Dba\n  @_rnd_int_cfg: true\n_xxx_dba                  = new _Xxx_dbax()\n\ntypes.declare 'dba_urlsafe_word', tests:\n  \"@isa.nonempty_text x\":                 ( x ) -> @isa.nonempty_text x\n  \"/^[a-zA-Z0-9_]+$/.test x\":             ( x ) -> /^[a-zA-Z0-9_]+$/.test x\ntypes.declare 'constructor_cfg', tests:\n  \"@isa.object x\":                            ( x ) -> @isa.object x\n  \"@isa_optional.boolean x.ram\":              ( x ) -> @isa_optional.boolean x.ram\n  \"@isa_optional.nonempty_text x.url\":        ( x ) -> @isa_optional.nonempty_text x.url\n  \"@isa_optional.dba_urlsafe_word x.dbnick\":  ( x ) -> @isa_optional.dba_urlsafe_word x.dbnick\n  \"@isa_optional.dba_urlsafe_word x.dbnick\":  ( x ) -> @isa_optional.dba_urlsafe_word x.dbnick\n\nclass Dbax # extends Dba\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: guy.lft.freeze\n    defaults:\n      constructor_cfg:\n        _temp_prefix: '_dba_temp_'\n        readonly:     false\n        create:       true\n        overwrite:    false\n        timeout:      5000\n        #...................................................................................................\n        ram:        false\n        path:       null\n        dbnick:     null\n\n  #---------------------------------------------------------------------------------------------------------\n  @cast_constructor_cfg: ( self ) ->\n    if ( self.cfg.ram is false ) and ( not self.cfg.path? )\n      throw new E.Dba_cfg_error '^dba@1^', \"missing argument `path`, got #{rpr self.cfg}\"\n    self.cfg.ram ?= not self.cfg.path?\n    if ( not self.cfg.ram ) and self.cfg.path? and self.cfg.dbnick?\n      throw new E.Dba_cfg_error '^dba@1^', \"only RAM DB can have both `path` and `dbnick`, got #{rpr self.cfg}\"\n    if self.cfg.ram\n      { dbnick\n        url    }        = _xxx_dba._get_connection_url self.cfg.dbnick ? null\n      self.cfg.dbnick  ?= dbnick\n      self.cfg.url      = url\n    else\n      self.cfg.url      = null\n    return self.cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  @declare_types: ( self ) ->\n    # debug '^133^', self.cfg, Object.isFrozen self.cfg\n    self.cfg = @cast_constructor_cfg self\n    self.types.validate.constructor_cfg self.cfg\n    # guy.props.def self, 'dba', { enumerable: false, value: self.cfg.dba, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    # super()\n    guy.cfg.configure_with_types @, cfg, types\n    # @_compile_sql()\n    # @_create_sql_functions()\n    # @_create_db_structure()\n    return undefined\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA constructor arguments 1\" ] = ( T, done ) ->\n  { Dba }           = require H.icql_dba_path\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ { ram: false,  path: null,      dbnick: null,     }, null, \"missing argument `path`\",              ] ### 5  ###\n    [ { ram: false,  path: null,      dbnick: 'dbnick', }, null, \"missing argument `path`\",              ] ### 6  ###\n    [ { ram: null,   path: 'db/path', dbnick: 'dbnick', }, null, \"only RAM DB can have both `path` and `dbnick`\", ] ### 4  ###\n    [ { ram: false,  path: 'db/path', dbnick: 'dbnick', }, null, \"only RAM DB can have both `path` and `dbnick`\", ] ### 8  ###\n    #.......................................................................................................\n    [ { ram: null,   path: null,      dbnick: null,     }, { ram: true,  path: null,      dbnick: '_icql_6200294332', url: 'file:_icql_6200294332?mode=memory&cache=shared', }, null, ] ### 1  ###\n    [ { ram: null,   path: null,      dbnick: 'dbnick', }, { ram: true,  path: null,      dbnick: 'dbnick',           url: 'file:dbnick?mode=memory&cache=shared', }, null, ] ### 2  ###\n    [ { ram: null,   path: 'db/path', dbnick: null      }, { ram: false, path: 'db/path', dbnick: null,               url: null, }, null, ] ### 3  ###\n    [ { ram: false,  path: 'db/path', dbnick: null,     }, { ram: false, path: 'db/path', dbnick: null,               url: null, }, null, ] ### 7  ###\n    [ { ram: true,   path: null,      dbnick: null,     }, { ram: true,  path: null,      dbnick: '_icql_4260041910', url: 'file:_icql_4260041910?mode=memory&cache=shared', }, null, ] ### 9  ###\n    [ { ram: true,   path: null,      dbnick: 'dbnick', }, { ram: true,  path: null,      dbnick: 'dbnick',           url: 'file:dbnick?mode=memory&cache=shared', }, null, ] ### 10 ###\n    [ { ram: true,   path: 'db/path', dbnick: null,     }, { ram: true,  path: 'db/path', dbnick: '_icql_9982321802', url: 'file:_icql_9982321802?mode=memory&cache=shared', }, null, ] ### 11 ###\n    [ { ram: true,   path: 'db/path', dbnick: 'dbnick', }, { ram: true,  path: 'db/path', dbnick: 'dbnick',           url: 'file:dbnick?mode=memory&cache=shared', }, null, ] ### 12 ###\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      do =>\n        result = { ( new Dbax probe ).cfg..., }\n        for k of result\n          delete result[ k ] unless k in [ 'ram', 'path', 'dbnick', 'url', ]\n        # resolve result\n        resolve result\n      return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: _get_connection_url()\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dba }               = require H.icql_dba_path\n  #.........................................................................................................\n  class Dbax extends Dba\n    @_rnd_int_cfg: true\n  #.........................................................................................................\n  dba = new Dbax()\n  T?.eq dba._get_connection_url(), { url: 'file:_icql_6200294332?mode=memory&cache=shared', dbnick: '_icql_6200294332' }\n  T?.eq dba._get_connection_url(), { url: 'file:_icql_4260041910?mode=memory&cache=shared', dbnick: '_icql_4260041910' }\n  T?.eq dba._get_connection_url(), { url: 'file:_icql_9982321802?mode=memory&cache=shared', dbnick: '_icql_9982321802' }\n  T?.eq dba._get_connection_url(), { url: 'file:_icql_2420402559?mode=memory&cache=shared', dbnick: '_icql_2420402559' }\n  T?.eq dba._get_connection_url(), { url: 'file:_icql_1965667491?mode=memory&cache=shared', dbnick: '_icql_1965667491' }\n  T?.eq ( dba._get_connection_url 'yournamehere' ), { url: 'file:yournamehere?mode=memory&cache=shared', dbnick: 'yournamehere' }\n  #.........................................................................................................\n  info dba._get_connection_url()\n  info dba._get_connection_url 'yournamehere'\n  done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n  # test @[ \"DBA: _get_connection_url()\" ]\n"
  ]
}