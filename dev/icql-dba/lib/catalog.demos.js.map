{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/catalog.demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/DEMO/CATALOG'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\n{ Dba }                   = require H.icql_dba_path\n\nfunction_flags =\n  is_deterministic:   0x000000800 # SQLITE_DETERMINISTIC\n  is_directonly:      0x000080000 # SQLITE_DIRECTONLY\n  is_subtype:         0x000100000 # SQLITE_SUBTYPE\n  is_innocuous:       0x000200000 # SQLITE_INNOCUOUS\n\n#===========================================================================================================\nclass Dbax extends Dba\n\n  #---------------------------------------------------------------------------------------------------------\n  catalog: ->\n    @query \"select * from sqlite_schema order by type desc, name;\"\n\n  #---------------------------------------------------------------------------------------------------------\n  # _pragma_index_xinfo: ( schema, idx_name ) -> @pragma SQL\"#{@sql.I schema}.index_xinfo( #{@sql.L idx_name} );\"\n  # _pragma_table_xinfo: ( schema, tbl_name ) -> @pragma SQL\"#{@sql.I schema}.table_xinfo( #{@sql.L tbl_name} );\"\n\n#-----------------------------------------------------------------------------------------------------------\ncreate_sql_functions = ( dba, prefix = 'xxx_' ) ->\n  #.........................................................................................................\n  dba.create_function\n    name:           prefix + 'fun_flags_as_text'\n    deterministic:  true\n    varargs:        false\n    call:           ( flags_int ) ->\n      R = []\n      for k, v of function_flags\n        R.push \"+#{k}\" if ( flags_int & v ) != 0\n      # R.push '+usaf' unless '+inoc' in R\n      return R.join ''\n  #.........................................................................................................\n  for property, bit_pattern of function_flags then do ( property, bit_pattern ) =>\n    dba.create_function\n      name:           prefix + 'fun_' + property\n      deterministic:  true\n      varargs:        false\n      call:           ( flags_int ) -> if ( flags_int & bit_pattern ) != 0 then 1 else 0\n  #.........................................................................................................\n  dba.create_aggregate_function\n    name:           'fun_zzz_donotuse_aggregate_function'\n    start:          -> null\n    step:           ( total, element ) -> debug '^4476^', { total, element, }; ( total ? 1 ) * element\n  dba.create_window_function\n    name:           'fun_zzz_donotuse_array_agg'\n    varargs:        false\n    deterministic:  true\n    start:          -> [] # must be new object for each partition, therefore use function, not constant\n    step:           ( total, element ) -> total.push element; total\n    inverse:        ( total, dropped ) -> total.pop(); total\n    result:         ( total ) -> jr total\n  dba.create_table_function\n    name:           'fun_zzz_donotuse_re_matches'\n    columns:        [ 'match', 'capture', ]\n    parameters:     [ 'text', 'pattern', ]\n    rows: ( text, pattern ) -> yield 42\n  dba.create_virtual_table\n    name:   'fun_zzz_donotuse_file_contents'\n    create: ( filename, P... ) ->\n      urge '^46456^', { filename, P, }\n      R =\n        columns: [ 'path', 'lnr', 'line', ],\n        rows: ->\n          path  = PATH.resolve PATH.join __dirname, '../../../assets/icql', filename\n          lines = ( FS.readFileSync path, { encoding: 'utf-8', } ).split '\\n'\n          for line, line_idx in lines\n            yield { path, lnr: line_idx + 1, line, }\n          return null\n      return R\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ncreate_db_structure = ( dba, prefix = 'xxx_' ) ->\n  dba.execute SQL\"\"\"\n    create table #{prefix}a (\n        n integer not null references b ( n ),\n        b text not null,\n        c json default '42',\n      primary key ( n, b ) );\n    create table #{prefix}b ( n integer not null primary key references a ( n ) );\n    create unique index main.#{prefix}a_n_idx on #{prefix}a ( n );\n    create unique index main.#{prefix}b_n_idx on #{prefix}b ( n );\n\n    \"\"\"\n  dba.open { schema: 'foo', ram: true, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  { Hollerith }     = require '../../../apps/icql-dba-hollerith'\n  { Tbl, }          = require '../../../apps/icql-dba-tabulate'\n  dba               = new Dbax()\n  schema            = 'main'\n  { template_path\n    work_path }     = await H.procure_db { size: 'nnt', ref: 'fn', }\n  dba.open { path: work_path, schema, }\n  dba.create_stdlib()\n  hlr               = new Hollerith { dba, }\n  dbatbl            = new Tbl { dba, }\n  create_sql_functions dba\n  create_db_structure dba\n  debug { template_path, work_path, }\n  # echo dbatbl._tabulate dba.catalog()\n  echo dbatbl._tabulate dba.query SQL\"select * from sqlite_schema order by type desc, name;\"\n  help \"pragmas\";      echo dbatbl._tabulate dba.query SQL\"select * from pragma_pragma_list()      order by std_str_reverse( name );\"\n  # help \"modules\";      echo dbatbl._tabulate dba.query SQL\"select * from pragma_module_list()      order by name;\"\n  # help \"databases\";    echo dbatbl._tabulate dba.query SQL\"select * from pragma_database_list()    order by name;\"\n  # help \"collations\";   echo dbatbl._tabulate dba.query SQL\"select * from pragma_collation_list()   order by name;\"\n  help \"functions\";    echo dbatbl._tabulate dba.query SQL\"select * from pragma_function_list()    order by name;\"\n  help \"table_info\";   echo dbatbl._tabulate dba.query SQL\"select * from main.pragma_table_info( 'xxx_a' )       order by name;\"\n  help \"indexes\";      echo dbatbl._tabulate dba.query SQL\"select * from main.pragma_index_list( 'xxx_a' )       order by name;\"\n  help \"foreign_keys\"; echo dbatbl._tabulate dba.query SQL\"select * from main.pragma_foreign_key_list( 'xxx_a' ) order by 1;\"\n  help \"indexed columns\"; echo dbatbl._tabulate dba.query SQL\"\"\"\n    -- thx to https://www.sqlite.org/pragma.html#pragfunc\n    select\n         -- distinct\n        std_str_join( '.', 'main', m.name, ii.name ) as 'indexed-columns',\n        *\n    from sqlite_schema as m,\n      pragma_index_list(  m.name  ) as il,\n      pragma_index_info(  il.name ) as ii\n    where m.type = 'table'\n    order by 1;\"\"\"\n  help \"all columns\"; echo dbatbl._tabulate dba.query SQL\"\"\"\n    -- thx to https://stackoverflow.com/a/53160348/256361\n    select\n      p.cid         as col_id,\n      'main'        as scm_name,\n      m.name        as tbl_name,\n      p.name        as col_name,\n      p.type        as col_type,\n      p.\"notnull\"   as col_notnull,\n      p.dflt_value  as col_default,\n      p.pk          as col_pk_idx\n      -- m.*\n    from\n      sqlite_master as m\n    join\n      pragma_table_info(m.name) as p\n    order by\n      m.name,\n      p.cid;\"\"\"\n  # help \"index_xinfo\"; echo dbatbl._tabulate dba._pragma_index_xinfo 'main', 'sqlite_autoindex_xxx_a_1'\n  # help \"table_xinfo\"; echo dbatbl._tabulate dba._pragma_table_xinfo 'main', 'xxx_a'\n  help \"functions\"; echo dbatbl._tabulate dba.query SQL\"\"\"\n    select\n        f.name                                as fun_name,\n        f.builtin                             as is_builtin,\n        f.type                                as type,\n        -- f.enc                                 as enc,\n        f.narg                                as narg,\n        f.flags                               as flags,\n        -- xxx_fun_flags_as_text( f.flags )      as tags,\n        xxx_fun_is_deterministic( f.flags )   as is_deterministic,\n        xxx_fun_is_innocuous( f.flags )       as is_innocuous,\n        xxx_fun_is_directonly( f.flags )      as is_directonly\n      from pragma_function_list as f\n      order by name;\"\"\"\n  for fun_name, entry of dba._catalog\n    info fun_name, entry\n  # for n in [ 0 .. 100 ]\n  #   debug '^980^', n, dba.first_row dba.query SQL\"select sqlite_compileoption_get( $n ) as option;\", { n }\n  dba.execute SQL\"\"\"\n    create view xxx_compile_time_options as with r1 as ( select\n        counter.value                             as idx,\n        sqlite_compileoption_get( counter.value ) as facet_txt\n      from std_generate_series( 0, 1e3 ) as counter\n    where facet_txt is not null )\n    select\n        idx                                 as idx,\n        prefix                              as key,\n        suffix                              as value,\n        sqlite_compileoption_used( prefix ) as used\n      from r1,\n      std_str_split_first( r1.facet_txt, '=' ) as r2\n      order by 1;\"\"\"\n  help \"compile_time_options\"; echo dbatbl._tabulate dba.query SQL\"\"\"\n    select * from xxx_compile_time_options;\"\"\"\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  demo_1()\n\n"
  ]
}