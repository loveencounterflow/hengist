{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/catalog.demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/DEMO/CATALOG'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\n{ Dba }                   = require H.icql_dba_path\n\n\n#===========================================================================================================\nclass Dbax extends Dba\n\n  #---------------------------------------------------------------------------------------------------------\n  catalog: ->\n    @query \"select * from sqlite_schema order by type desc, name;\"\n\n\n#-----------------------------------------------------------------------------------------------------------\ncreate_sql_functions = ( dba, prefix = 'xxx_' ) ->\n  dba.create_function\n    name:           prefix + 'str_reverse'\n    deterministic:  true\n    varargs:        false\n    call:           ( s ) -> ( Array.from s ).reverse().join ''\n  dba.create_function\n    name:           prefix + 'str_join'\n    deterministic:  true\n    varargs:        true\n    call:           ( joiner, P... ) -> P.join joiner\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ncreate_db_structure = ( dba, prefix = 'xxx_' ) ->\n  dba.execute SQL\"\"\"\n    create table #{prefix}a (\n        n integer not null references b ( n ),\n        b text not null,\n        c json default '42',\n      primary key ( n, b ) );\n    create table #{prefix}b ( n integer not null primary key references a ( n ) );\n    create unique index main.#{prefix}a_n_idx on #{prefix}a ( n );\n    create unique index main.#{prefix}b_n_idx on #{prefix}b ( n );\n    \"\"\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  { Hollerith }     = require '../../../apps/icql-dba-hollerith'\n  { Tbl, }          = require '../../../apps/icql-dba-tabulate'\n  dba               = new Dbax()\n  schema            = 'main'\n  { template_path\n    work_path }     = await H.procure_db { size: 'nnt', ref: 'fn', }\n  dba.open { path: work_path, schema, }\n  hlr               = new Hollerith { dba, }\n  dbatbl            = new Tbl { dba, }\n  create_sql_functions dba\n  create_db_structure dba\n  debug { template_path, work_path, }\n  # echo dbatbl._tabulate dba.catalog()\n  echo dbatbl._tabulate dba.query SQL\"select * from sqlite_schema order by type desc, name;\"\n  # help \"pragmas\";      echo dbatbl._tabulate dba.query SQL\"select * from pragma_pragma_list()      order by xxx_str_reverse( name );\"\n  # help \"modules\";      echo dbatbl._tabulate dba.query SQL\"select * from pragma_module_list()      order by name;\"\n  # help \"databases\";    echo dbatbl._tabulate dba.query SQL\"select * from pragma_database_list()    order by name;\"\n  # help \"collations\";   echo dbatbl._tabulate dba.query SQL\"select * from pragma_collation_list()   order by name;\"\n  # help \"functions\";    echo dbatbl._tabulate dba.query SQL\"select * from pragma_function_list()    order by name;\"\n  help \"table_info\";   echo dbatbl._tabulate dba.query SQL\"select * from main.pragma_table_info( 'xxx_a' )       order by name;\"\n  help \"indexes\";      echo dbatbl._tabulate dba.query SQL\"select * from main.pragma_index_list( 'xxx_a' )       order by name;\"\n  help \"foreign_keys\"; echo dbatbl._tabulate dba.query SQL\"select * from main.pragma_foreign_key_list( 'xxx_a' ) order by 1;\"\n  help \"indexed columns\"; echo dbatbl._tabulate dba.query SQL\"\"\"\n    -- thx to https://www.sqlite.org/pragma.html#pragfunc\n    select\n         -- distinct\n        xxx_str_join( '.', 'main', m.name, ii.name ) as 'indexed-columns',\n        *\n    from sqlite_schema as m,\n      pragma_index_list(  m.name  ) as il,\n      pragma_index_info(  il.name ) as ii\n    where m.type = 'table'\n    order by 1;\"\"\"\n  help \"all columns\"; echo dbatbl._tabulate dba.query SQL\"\"\"\n    -- thx to https://stackoverflow.com/a/53160348/256361\n    select\n      p.cid         as col_id,\n      'main'        as scm_name,\n      m.name        as tbl_name,\n      p.name        as col_name,\n      p.type        as col_type,\n      p.\"notnull\"   as col_notnull,\n      p.dflt_value  as col_default,\n      p.pk          as col_pk_idx\n      -- m.*\n    from\n      sqlite_master as m\n    join\n      pragma_table_info(m.name) as p\n    order by\n      m.name,\n      p.cid;\"\"\"\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  demo_1()\n\n  # class Dbay extends Dbax\n  # debug dba = new Dba()\n  # debug dbax = new Dbax()\n  # debug dbay = new Dbay()\n  # debug dba instanceof Dba\n  # debug dbax instanceof Dbax\n  # debug dbay instanceof Dbay\n  # urge dbay  instanceof Dba\n  # urge dbay  instanceof Dbax\n  # urge dbay  instanceof Dbay\n  # help dbax  instanceof Dba\n  # help dbax  instanceof Dbax\n  # help dbax  instanceof Dbay\n\n\n\n"
  ]
}