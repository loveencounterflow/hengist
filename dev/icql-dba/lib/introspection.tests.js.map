{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/introspection.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/FUTURE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\non_process_exit           = require 'exit-hook'\nsleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\nSQL                       = String.raw\njr                        = JSON.stringify\njp                        = JSON.parse\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: type_of()\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { Dba }           = require H.icql_dba_path\n  { template_path\n    work_path }     = await H.procure_db { size: 'small', ref: 'type-of', }\n  schema            = 'main'\n  #.........................................................................................................\n  urge '^344-3^', { template_path, work_path, schema, }\n  # dba     = new Dba()\n  dba = new Dba()\n  dba.open { path: work_path, }\n  #.........................................................................................................\n  T?.eq ( dba.type_of { schema, name: 'sources'                     } ), 'table'\n  T?.eq ( dba.type_of { schema, name: 'dest_changes_backward'       } ), 'view'\n  T?.eq ( dba.type_of { schema, name: 'keys'                        } ), 'table'\n  T?.eq ( dba.type_of { schema, name: 'sqlite_autoindex_keys_1'     } ), 'index'\n  T?.eq ( dba.type_of { schema, name: 'sqlite_autoindex_realms_1'   } ), 'index'\n  T?.eq ( dba.type_of { schema, name: 'realms'                      } ), 'table'\n  T?.eq ( dba.type_of { schema, name: 'dest_changes_forward'        } ), 'view'\n  T?.eq ( dba.type_of { schema, name: 'main'                        } ), 'table'\n  T?.eq ( dba.type_of { schema, name: 'sqlite_autoindex_sources_1'  } ), 'index'\n  #.........................................................................................................\n  done?()\n\n\n\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  test @, { timeout: 10e3, }\n\n\n\n\n\n\n\n\n"
  ]
}