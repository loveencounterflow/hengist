{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-cupofhtml.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/INTERTEXT/DEMO-CUPOFHTML'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n\nprovide_new_cupofhtml_implementation = ->\n  DATOM = require 'datom'\n  INTERTEXT = require '../../../apps/intertext'\n  { isa\n    validate } = INTERTEXT.types.export()\n\n  #---------------------------------------------------------------------------------------------------------\n  class @Cupofhtml extends DATOM.Cupofdatom\n    # @include CUPOFHTML, { overwrite: false, }\n    # @extend MAIN, { overwrite: false, }\n\n    # #---------------------------------------------------------------------------------------------------------\n    # constructor: ( settings = null) ->\n    #   super { { flatten: true, }..., settings..., }\n    #   return @\n\n    # #---------------------------------------------------------------------------------------------------------\n    # tag: ( tagname, content... ) ->\n    #   return @cram content...      unless tagname?\n    #   ### TAINT allow extended syntax, attributes ###\n    #   return @cram new_datom \"^#{tagname}\" if content.length is 0\n    #   return @cram ( new_datom \"<#{tagname}\" ), content..., ( new_datom \">#{tagname}\" )\n\n    # #---------------------------------------------------------------------------------------------------------\n    # text:     ( P... ) -> @cram MAIN.text     P...\n    # raw:      ( P... ) -> @cram MAIN.raw      P...\n    # script:   ( P... ) -> @cram MAIN.script   P...\n    # css:      ( P... ) -> @cram MAIN.css      P...\n\n    #---------------------------------------------------------------------------------------------------------\n    tag: ( name, content... ) ->\n      validate.intertext_html_tagname\n      name = \"html:#{name}\" if isa.nonempty_text name\n      debug '^3536^', { name, content, }\n      @cram name, content...\n\n    #---------------------------------------------------------------------------------------------------------\n    text: ( content... ) -> @tag null, content...\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  INTERTEXT = require '../../../apps/intertext'\n  provide_new_cupofhtml_implementation.apply INTERTEXT.HTML\n  c         = new INTERTEXT.HTML.Cupofhtml { flatten: true, }\n  { cram\n    expand\n    tag\n    text }  = c.export()\n  tag 'mytag'\n  tag 'mytag', { style: \"display:block;width:50%;\", }\n  tag 'othertag', { style: \"display:block;\", }, \"some \", ->\n    tag 'bold', \"content\"\n    text \"here indeed.\"\n  tag 'p', ->\n    text \"It is very \", ( tag 'em', \"convenient\" ), \" to write\"\n  # tag 'mytag', =>\n  #   tag 'h1', => #, { id: 'c67', }\n  #     tag 'p', \"helo world\"\n  debug '^3344^', c\n  ds = expand()\n  info d for d in ds\n  # debug '^3344^', INTERTEXT.HTML.html_from_datoms ds\n\n\n############################################################################################################\nif module is require.main then do =>\n  demo()\n\n\n\n\n"
  ]
}