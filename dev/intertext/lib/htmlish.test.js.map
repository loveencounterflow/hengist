{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/htmlish.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTEXT/TESTS/HTML'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"HTML parse compact tagname\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { HTMLISH } = require '../../../apps/intertext'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'mrg:loc.delete#title',         { prefix: 'mrg', name: 'loc', class: [ 'delete' ], id: 'title' }, ]\n    [ 'mrg:loc#title.delete',         { prefix: 'mrg', name: 'loc', class: [ 'delete' ], id: 'title' }, ]\n    [ 'mrg:loc.foo#title.bar.baz', { prefix: 'mrg', name: 'loc', class: [ 'foo', 'bar', 'baz' ], id: 'title' }, null ]\n    [ 'mrg:loc.foo#title.bar.baz', { prefix: 'mrg', name: 'loc', class: [ 'foo', 'bar', 'baz' ], id: 'title' }, null ]\n    [ 'mrg:loc.foo#title#bar#baz', null, /found duplicate values for 'id': 'title', 'bar'/ ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result = HTMLISH.parse_compact_tagname probe\n      resolve result\n      return null\n  #.........................................................................................................\n  done?()\n\n\n\n\n############################################################################################################\nif module is require.main then do => # await do =>\n  test @\n"
  ]
}