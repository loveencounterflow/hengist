{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/diff.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "#!node\n\nCND                       = require 'cnd'\nbadge                     = 'DIFF'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ stdin\n  stdout\n  stderr }                = process\n{ Intertype, }            = require 'intertype'\ntypes                     = new Intertype()\n{ isa\n  validate\n  type_of  }              = types.export()\n{ to_width, width_of, }   = require 'to-width'\n# CAT                       = require 'multimix/lib/cataloguing'\n#...........................................................................................................\ntest                      = require 'guy-test'\n\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DIFF rawdiff\" ] = ( T, done ) ->\n  INTERTEXT                 = require '../../../apps/intertext'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ 'helo world', 'Hello World!' ], [ [ -1, 'he' ], [ 1, 'Hel' ], [ 0, 'lo ' ], [ -1, 'w' ], [ 1, 'W' ], [ 0, 'orld' ], [ 1, '!' ] ], null ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      [ old_text\n        new_text  ] = probe\n      result        = INTERTEXT.DIFF.rawdiff old_text, new_text\n      resolve result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DIFF colordiff\" ] = ( T, done ) ->\n  ### TAINT should discard / replace color codes to make test less brittle ###\n  INTERTEXT                 = require '../../../apps/intertext'\n  DIFF                      = INTERTEXT.DIFF.new { tty_columns: 50, }\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ 'helo world', 'Hello World!' ], '\\x1B[7m\\x1B[38;05;208mhe\\x1B[0m\\x1B[27m\\x1B[7m\\x1B[38;05;118mHel\\x1B[0m\\x1B[27m\\x1B[7m\\x1B[38;05;255mlo \\x1B[0m\\x1B[27m\\x1B[7m\\x1B[38;05;208mw\\x1B[0m\\x1B[27m\\x1B[7m\\x1B[38;05;118mW\\x1B[0m\\x1B[27m\\x1B[7m\\x1B[38;05;255morld\\x1B[0m\\x1B[27m\\x1B[7m\\x1B[38;05;118m!\\x1B[0m\\x1B[27m\\x1B[7m\\x1B[38;05;255m                                   \\n', null ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      [ old_text\n        new_text  ] = probe\n      result        = DIFF.colordiff old_text, new_text\n      process.stdout.write result\n      resolve result\n  #.........................................................................................................\n  done()\n  return null\n\n\n\n\n\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  test @\n\n\n\n"
  ]
}