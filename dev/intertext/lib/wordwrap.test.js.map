{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/wordwrap.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTEXT/TESTS/WRAP'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\n#...........................................................................................................\nDATOM                     = new ( require 'datom' ).Datom { dirty: false, }\n{ new_datom\n  lets\n  select }                = DATOM.export()\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  cast\n  first_of\n  last_of\n  type_of }               = types\n#...........................................................................................................\ntest                      = require 'guy-test'\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"INTERTEXT.WRAP.justify_monospaced\" ] = ( T, done ) ->\n  INTERTEXT = require '../../../apps/intertext'\n  probes_and_matchers = [\n    [ [ 'foo bar baz', 11 ], { blanks: 2, solids: 9 }, null ]\n    [ [ 'foo bar baz', 12 ], { blanks: 3, solids: 9 }, null ]\n    [ [ '火 锅', 12 ], { blanks: 7, solids: 2 }, null ]\n    [ [ 'just another day in a bonkers place', 50 ], { blanks: 21, solids: 29 }, null ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ text\n        line_width ]  = probe\n      words           = text.split /\\s+/\n      result          = INTERTEXT.WRAP.justify_monospaced words, line_width\n      validate.text result\n      blanks          = result.replace /[^\\x20]/g, ''\n      solids          = result.replace /[\\x20]/g, ''\n      # debug rpr result\n      T.eq solids, ( words.join '' )\n      T.ok result.startsWith  first_of  words\n      T.ok result.endsWith    last_of   words\n      stats           = { blanks: blanks.length, solids: solids.length, }\n      resolve stats\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  INTERTEXT = require '../../../apps/intertext'\n  text = \"\"\"Some people prefer to have the right edge of their text look ‘solid’, by setting periods,\n    commas, and other punctuation marks (including inserted hyphens) in the right-hand margin. For example,\n    this practice is occasionally used in contemporary advertising. It is easy to get inserted hyphens into\n    the margin: We simply let the width of the corresponding penalty item be zero. And it is almost as easy\n    to do the same for periods and other symbols, by putting every such character in a box of width zero and\n    adding the actual symbol width to the glue that follows. If no break occurs at this glue, the\n    accumulated width is the same as before; and if a break does occur, the line will be justified as if the\n    period or other symbol were not present. By varying the line width for a paragraph it is possible to\n    flow the text around illustrations, asides, quotes and such. The example below leaves a gap for an\n    illustration by setting the line widths temporarily shorter and then reverting. You can also see that\n    the algorithm chose to hyphenate certain words to achieve acceptable line breaking. The following\n    example is set ragged right. Ragged right is not simply justified text with fixed width inter-word\n    spacing. Instead the algorithm tries to minimize the amount of white space at the end of each sentence\n    over the whole paragraph. It also attempts to reduce the number of words that are \"sticking out\" of the\n    margin.\"\"\"\n  hytext = INTERTEXT.HYPH.hyphenate text\n  echo INTERTEXT.HYPH.reveal_hyphens hytext, '&shy;'\n  return null\n\n\n############################################################################################################\nif module is require.main then do => # await do =>\n  # await @_demo()\n  test @\n  # help 'ok'\n  # await demo()\n  # test @[ \"demo\" ]\n  # test @[ \"hyphenate\" ]\n\n  # test @[ \"must quote attribute value\" ]\n  # test @[ \"DATOM.HTML._as_attribute_literal\" ]\n  # test @[ \"isa.intertext_html_tagname\" ]\n  # test @[ \"HTML.datom_as_html (singular tags)\" ]\n  # test @[ \"HTML.datom_as_html (closing tags)\" ]\n  # test @[ \"HTML.datom_as_html (opening tags)\" ]\n  # test @[ \"HTML.datom_as_html (texts)\" ]\n  # test @[ \"HTML.datom_as_html (opening tags w/ $value)\" ]\n  # test @[ \"HTML.datom_as_html (system tags)\" ]\n  # test @[ \"HTML.datom_as_html (raw pseudo-tag)\" ]\n  # test @[ \"HTML.datom_as_html (doctype)\" ]\n  # test @[ \"HTML.html_as_datoms (1)\" ]\n  # test @[ \"HTML.html_as_datoms (dubious 2)\" ]\n  # test @[ \"HTML.html_as_datoms (dubious w/ pre-processor)\" ]\n\n\n\n"
  ]
}