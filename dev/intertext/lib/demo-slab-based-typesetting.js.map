{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-slab-based-typesetting.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/INTERTEXT/DEMO-SLAB-BASED-TYPESETTING'\ndebug                     = CND.get_logger 'debug',     badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nhelp                      = CND.get_logger 'help',      badge\nwarn                      = CND.get_logger 'warn',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\njr                        = JSON.stringify\n# test                      = require 'guy-test'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  cast\n  type_of }               = types\nSP                        = require '../../../apps/steampipes'\n{ $\n  $async\n  $watch\n  $show\n  $drain }                = SP.export()\nINTERTEXT                 = require '../../../apps/intertext'\n\n\n#-----------------------------------------------------------------------------------------------------------\ncompute_naive_ascii_monospace_width = ( metrics, slab ) ->\n  ### NOTE Implementation of a very crude estimate of visual string width that assigns each codepoint a\n  width of `1` (which is OK for much of unaccented Latin, Cyrillic, Greek and so on but wrong for\n  combining marks, CJK, Indic Scripts and so on). For demonstration purposes, we iterate over single\n  characters and add up their individual lengths; more precise algorithms might use e.g. Harfbuzz and\n  arrive at values per slab, ignoring the individual character widths altogether which may or may\n  not add up to the resulting width because of diacritics, ligatures, kerning and so on. ###\n  width     = 0\n  fragment  = ''\n  for chr, idx in chrs = Array.from slab\n    fragment               += chr\n    width                  += ( metrics.widths[ chr ] ?= 1 )\n    metrics.widths[ chr ]  ?= width\n  # metrics.widths[ slab ] = width ### NOTE setting of slab width done implicitly ###\n  return width\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_looping = ( text ) -> new Promise ( resolve, reject ) =>\n  #.........................................................................................................\n  text      = INTERTEXT.HYPH.hyphenate text\n  sjs       = INTERTEXT.SLABS.slabjoints_from_text text\n  #.........................................................................................................\n  ### NOTES\n\n  * The widths in `metrics.widths` are to be filled by `compute_width()`;\n  * the catalog may be DB-backed to avoid re-computation of known metrics.\n  * `metrics.line_width` is the wiidth of the line to be typeset next; its units are arbitrary but must be\n    identical to those used in `metrics.widths` in order to make sense.\n\n  ###\n  metrics =\n    compute_width:    compute_naive_ascii_monospace_width\n    line_width:       20\n    widths:           { 'a': 1, }\n  #.........................................................................................................\n  ### The crib is where the preset lines go; it may be modified later when it is found that width estimates\n  were incorrect: ###\n  crib =\n    segments: {}\n    lineup:   []\n    galley:   []\n  #.........................................................................................................\n  get_width = ( metrics, slab ) -> metrics.widths[ slab ] ?= metrics.compute_width metrics, slab\n  #.........................................................................................................\n  ### Collecting slab lengths: ###\n  for segment in sjs.segments\n    [ slab, joint, ]  = INTERTEXT.SLABS.text_and_joint_from_segment segment\n    width             = get_width metrics, slab\n    debug ( slab.padEnd 10 ), width\n    switch joint\n      when '='\n        unless ( msegment = crib.segments[ segment ] )?\n          msegment                  = { joint, '#': { slab, width, }, }\n          slab                     += '-'\n          width                     = get_width metrics, slab\n          msegment[ '-' ]           = { slab, width, }\n          crib.segments[ segment ]  = msegment\n      when '#', '°'\n        msegment = crib.segments[ segment ] ?= { joint, slab, [joint]: { slab, width, }, }\n      else\n        throw new Error \"^xxx/demo@4459^ unknown joint #{rpr joint}\"\n    debug msegment\n    # cribslab          = new_cribslab crib, slab, joint, width\n    # crib.segments[ segments ] =\n    crib.lineup.push msegment\n  #.........................................................................................................\n  get_next_line = ( crib, current_line = null ) ->\n    crib.galley.push current_line if current_line? and current_line.segments.length > 0\n    return { $key: '^line', width: 0, segments: [], }\n  #.........................................................................................................\n  ### Distributing lineup over lines: ###\n  line        = get_next_line crib\n  loop\n    break unless ( msegment = crib.lineup.shift() )?\n    switch msegment.joint\n      when '#'\n        ### TAINT code duplication ###\n        if line.width + msegment[ '#' ].width <= metrics.line_width\n          line.segments.push msegment\n          line.width += msegment[ '#' ].width\n        else\n          line = get_next_line crib, line\n          line.segments.push msegment\n          line.width += msegment[ '#' ].width\n      when '°'\n        ### TAINT code duplication ###\n        if line.width + msegment[ '°' ].width <= metrics.line_width\n          line.segments.push msegment\n          line.width += msegment[ '°' ].width\n        else\n          line = get_next_line crib, line\n          line.segments.push msegment\n          line.width += msegment[ '°' ].width\n      else\n        warn \"^xxx/demo@4460^ unknown joint #{rpr msegment,joint}\"\n        # throw new Error \"^xxx/demo@4460^ unknown joint #{rpr msegment,joint}\"\n  get_next_line crib, line\n  #.........................................................................................................\n  help '^337637^', CND.inspect sjs\n  help '^337637^', CND.inspect crib.segments\n  help '^337637^', CND.inspect crib\n  help '^337637^', rpr metrics\n  # for slab, width of metrics.widths\n  #   help '^337637^', ( slab.padEnd 20 ), width\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_piping = ( text ) -> new Promise ( resolve, reject ) =>\n  #.........................................................................................................\n  source    = [ text, ]\n  pipeline  = []\n  pipeline.push source\n  pipeline.push $ ( text, send ) -> send INTERTEXT.HYPH.hyphenate text\n  pipeline.push $ ( text, send ) ->\n    send INTERTEXT.SLABS.slabjoints_from_text text\n  pipeline.push $show()\n  pipeline.push $drain -> resolve()\n  #.........................................................................................................\n  SP.pull pipeline...\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n\n  text = \"\"\"Hercules (/ˈhɜːrkjuliːz, -jə-/) is a Roman hero and god. He was the Roman equivalent of the\n  Greek divine hero Heracles, who was the son of Zeus (Roman equivalent Jupiter) and the mortal Alcmene. In\n  classical mythology, Hercules is famous for his strength and for his numerous far-ranging adventures.\"\"\"\n  text = \"very short example\"\n  text = \"Zentral/Dezentral, Innenorientierung/Kundenzentrierung und Fremdsteuerung/Selbstverantwortung\"\n  text = text.replace /\\n/g, ' '\n  text = text.replace /\\s+/g, ' '\n  # await @demo_looping text\n  await @demo_piping text\n\n\n\n\n\n\n\n\n\n\n\n"
  ]
}