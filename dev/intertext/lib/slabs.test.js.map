{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/slabs.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTEXT/TESTS/SLABS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\n#...........................................................................................................\nDATOM                     = new ( require 'datom' ).Datom { dirty: false, }\n{ new_datom\n  lets\n  select }                = DATOM.export()\n#...........................................................................................................\ntest                      = require 'guy-test'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  cast\n  type_of }               = types\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"INTERTEXT.SLABS API\" ] = ( T, done ) ->\n  INTERTEXT = require '../../../apps/intertext'\n  #.........................................................................................................\n  # CAT = require 'multimix/lib/cataloguing'\n  # debug CAT.all_keys_of INTERTEXT.SLABS\n  T.ok isa.undefined  INTERTEXT.SLABS.slabs_from_text\n  T.ok isa.function   INTERTEXT.SLABS.slabjoints_from_text\n  T.ok isa.function   INTERTEXT.SLABS.assemble\n  T.ok isa.object     INTERTEXT.SLABS.settings\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"INTERTEXT.SLABS.slabjoints_from_text 1\" ] = ( T, done ) ->\n  INTERTEXT = require '../../../apps/intertext'\n  probes_and_matchers = [\n    [ '', { segments: [], version: '0.0.1', joints: { blunt: '#', shy: '=', space: '°' }, size: 0 }, null ]\n    [ 'a very fine day', { segments: [ 'a°', 'very°', 'fine°', 'day#' ], version: '0.0.1', joints: { blunt: '#', shy: '=', space: '°' }, size: 4 }, null ]\n    [ 'a cro^mu^lent so^lu^tion', { segments: [ 'a°', 'cro=', 'mu=', 'lent°', 'so=', 'lu=', 'tion#' ], version: '0.0.1', joints: { blunt: '#', shy: '=', space: '°' }, size: 7 }, null ]\n    [ '䷾Letterpress printing', { segments: [ '䷾Letterpress°', 'printing#' ], version: '0.0.1', joints: { blunt: '#', shy: '=', space: '°' }, size: 2 }, null ]\n    [ 'ベルリンBerlin', { segments: [ 'ベ#', 'ル#', 'リ#', 'ン#', 'Berlin#' ], version: '0.0.1', joints: { blunt: '#', shy: '=', space: '°' }, size: 5 }, null ]\n    [ '其法用膠泥刻字、薄如錢唇', { segments: [ '其#', '法#', '用#', '膠#', '泥#', '刻#', '字、#', '薄#', '如#', '錢#', '唇#' ], version: '0.0.1', joints: { blunt: '#', shy: '=', space: '°' }, size: 11 }, null ]\n    [ 'over-guess^ti^mate', { segments: [ 'over-#', 'guess=', 'ti=', 'mate#' ], version: '0.0.1', joints: { blunt: '#', shy: '=', space: '°' }, size: 4 }, null ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      probe = probe.replace /\\^/g, INTERTEXT.HYPH.soft_hyphen_chr\n      resolve INTERTEXT.SLABS.slabjoints_from_text probe\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_INTERTEXT.SLABS.slabjoints_from_text 2\" ] = ( T, done ) ->\n  INTERTEXT = require '../../../apps/intertext'\n  probes_and_matchers = [\n    [ \"A consummation, devoutly to be wished.\", { segments: [], version: '0.0.1', joints: { blunt: '#', shy: '=', space: '°' }, size: 0 }, null ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      probe = INTERTEXT.HYPH.hyphenate probe\n      resolve INTERTEXT.SLABS.slabjoints_from_text probe\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"INTERTEXT.SLABS.assemble (1)\" ] = ( T, done ) ->\n  INTERTEXT = require '../../../apps/intertext'\n  probes_and_matchers = [\n    [\"\",\"\",null]\n    [\"a very fine day\",\"a very fine day\",null]\n    [\"a cro\\xadmu\\xadlent so\\xadlu\\xadtion\",\"a cromulent solution\",null]\n    [\"䷾Letterpress printing\",\"䷾Letterpress printing\",null]\n    [\"ベルリンBerlin\",\"ベルリンBerlin\",null]\n    [\"其法用膠泥刻字、薄如錢唇\",\"其法用膠泥刻字、薄如錢唇\",null]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      resolve INTERTEXT.SLABS.assemble INTERTEXT.SLABS.slabjoints_from_text probe\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"INTERTEXT.SLABS.assemble (2)\" ] = ( T, done ) ->\n  INTERTEXT = require '../../../apps/intertext'\n  probes_and_matchers = [\n    [\"\",\"\",null]\n    [\"a very fine day\",\"fine day\",null]\n    [\"a cro^mu^lent so^lu^tion\",\"mulent solu-\",null]\n    [\"䷾Letterpress printing\",\"\",null]\n    [\"ベルリンBerlin\",\"リンBerlin\",null]\n    [\"其法用膠泥刻字、薄如錢唇\",\"用膠泥刻\",null]\n    [\"over-guess\\xadti\\xadmate\",\"timate\",null]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      probe = probe.replace /\\^/g, INTERTEXT.HYPH.soft_hyphen_chr\n      slb   = INTERTEXT.SLABS.slabjoints_from_text probe\n      resolve INTERTEXT.SLABS.assemble slb, 2, 5\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"INTERTEXT.SLABS.assemble (3)\" ] = ( T, done ) ->\n  INTERTEXT = require '../../../apps/intertext'\n  probe   = \"a very fine day for a cro\\xadmu\\xadlent so\\xadlu\\xadtion\"\n  matcher = [\n    \"a\"\n    \"a very\"\n    \"a very fine\"\n    \"a very fine day\"\n    \"a very fine day for\"\n    \"a very fine day for a\"\n    \"a very fine day for a cro-\"\n    \"a very fine day for a cromu-\"\n    \"a very fine day for a cromulent\"\n    \"a very fine day for a cromulent so-\"\n    \"a very fine day for a cromulent solu-\"\n    \"a very fine day for a cromulent solution\"\n    ]\n  slabjoints  = INTERTEXT.SLABS.slabjoints_from_text probe\n  info slabjoints\n  result      = ( INTERTEXT.SLABS.assemble slabjoints, 0, idx for idx in [ 0 ... slabjoints.size ] )\n  for line, idx in result\n    echo ( CND.white line.padEnd 50 ), idx, line.length\n  idx_1 = 11\n  for idx_2 in [ idx_1 ... slabjoints.size ]\n    line = INTERTEXT.SLABS.assemble slabjoints, idx_1, idx_2\n    idx_1_txt = ( \"#{idx_1}\".padEnd 5 )\n    idx_2_txt = ( \"#{idx_2}\".padEnd 5 )\n    echo ( CND.yellow line.padEnd 50 ), idx_1_txt, idx_2_txt, line.length\n  help jr result\n  T.eq result, matcher\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"INTERTEXT.SLABS.assemble (4)\" ] = ( T, done ) ->\n  INTERTEXT = require '../../../apps/intertext'\n  probe   = \"over-guess\\xadti\\xadmate\"\n  matcher = [\n    \"over-\"\n    \"over-guess-\"\n    \"over-guessti-\"\n    \"over-guesstimate\"\n    ]\n  slabjoints  = INTERTEXT.SLABS.slabjoints_from_text probe\n  result      = ( INTERTEXT.SLABS.assemble slabjoints, 0, idx for idx in [ 0 ... slabjoints.size ] )\n  help jr result\n  T.eq result, matcher\n  done()\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do => # await do =>\n  # await @_demo()\n  test @\n  # test @[ \"INTERTEXT.SLABS.slabjoints_from_text 2\" ]\n  # test @[ \"INTERTEXT.SLABS.slabjoints_from_text\" ]\n  # test @[ \"INTERTEXT.SLABS.assemble (3)\" ]\n  # test @[ \"INTERTEXT.SLABS.assemble (4)\" ]\n\n\n\n\n\n"
  ]
}