{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/basic.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HDML/TESTS/BASIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nguy                       = require '../../../apps/guy'\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"basics\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { HDML\n    Hdml } = require '../../../apps/hdml'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ '<', 'foo' ], '<foo>', null ]\n    [ [ '<', 'foo', null ], '<foo>', null ]\n    [ [ '<', 'foo', {} ], '<foo>', null ]\n    [ [ '<', 'foo', { a: 42, b: \"'\", c: '\"' } ], \"\"\"<foo a='42' b='&#39;' c='\"'>\"\"\", null ]\n    [ [ '^', 'foo', { a: 42, b: \"'\", c: '\"' } ], \"\"\"<foo a='42' b='&#39;' c='\"'/>\"\"\", null ]\n    [ [ '^', 'prfx:foo', { a: 42, b: \"'\", c: '\"' } ], \"\"\"<prfx:foo a='42' b='&#39;' c='\"'/>\"\"\", null ]\n    [ [ '^', 'mrg:loc#baselines' ], '<mrg:loc#baselines/>', null ]\n    [ [ '>', 'foo' ], '</foo>', null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result = HDML.create_tag probe...\n      resolve result\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  test @[ \"basics\" ]\n\n\n\n"
  ]
}