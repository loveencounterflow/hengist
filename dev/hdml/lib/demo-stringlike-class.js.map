{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-stringlike-class.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,qBAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,wBAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR,EAhB5B;;;EAkBA,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,MADF,EAEE,OAFF,EAGE,QAHF,EAIE,gBAJF,CAAA,GAI4B,KAAK,CAAC,MAAN,CAAA,CAJ5B;;EAKA,GAAA,GAA4B,OAAA,CAAQ,mBAAR,EAxB5B;;;EA4BM,OAAN,MAAA,KAAA,CAAA;;;;;;;;;;;;IAYE,WAAa,CAAC,SAAD,CAAA,EAAA;;MAEX,IAAC,CAAA,SAAD,GAAa;IAFF,CAAf;;;IAIE,CAAC,MAAM,CAAC,WAAR,CAAsB,CAAA,CAAA;aAAG,IAAC,CAAA;IAAJ;;EAhBxB,EA5BA;;;;;;;EAkDA,qBAAA,GAAwB,QAAA,CAAA,CAAA;AACxB,QAAA;IAAE,CAAA,GAAI,IAAI,IAAJ,CAAS,SAAT;IACJ,IAAA,CAAK,WAAL,EAAkB,CAAlB;IACA,IAAA,CAAK,WAAL,EAAkB,GAAA,CAAI,CAAJ,CAAlB;IACA,IAAA,CAAK,WAAL,EAAkB,CAAlB;IACA,IAAA,CAAK,WAAL,EAAkB,GAAA,CAAI,CAAJ,CAAlB;IACA,IAAA,CAAK,WAAL,EAAkB,MAAA,CAAO,CAAP,CAAlB;IACA,IAAA,CAAK,WAAL,EAAkB,CAAC,CAAC,MAApB;IACA,IAAA,CAAK,WAAL,EAAkB,GAAA,CAAI,CAAA,GAAI,CAAR,CAAlB,EAPF;;;IAUE,IAAA,CAAK,WAAL,EAAkB,CAAE,CAAF,EAAK,CAAL,CAAlB;IACA,IAAA,CAAK,WAAL,EAAkB,CAAE,CAAF,EAAK,CAAL,CAAS,CAAC,IAAV,CAAe,GAAf,CAAlB;AACA,WAAO;EAbe,EAlDxB;;;EAqEA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA;aAChC,qBAAA,CAAA;IADgC,CAAA,IAAlC;;AArEA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HDML/TESTS/BASIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nguy                       = require '../../../apps/guy'\n\n\n#===========================================================================================================\nclass Hdml # extends String\n\n  # #---------------------------------------------------------------------------------------------------------\n  # constructor: ( tag, atrs ) ->\n  #   super()\n  #   @tag    = tag\n  #   @atrs   = atrs\n  #   return undefined\n\n  # #---------------------------------------------------------------------------------------------------------\n  # toString: ->\n  #   return 'xxx'\n  constructor: (__value__) ->\n    # super()\n    @__value__ = __value__\n    # @length = (@__value__ = __value__ or \"\").length\n  [Symbol.toPrimitive]: -> @__value__\n  # [Symbol.toStringTag]: -> @__value__\n  # toString: -> @__value__\n  # valueOf: -> @__value__\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_stringlike_class = ->\n  d = new Hdml 'hallÃ¶le'\n  help '^64545-1^', d\n  help '^64545-1^', rpr d\n  echo '^64545-1^', d\n  echo '^64545-1^', rpr d\n  help '^64545-1^', String d\n  help '^64545-2^', d.length\n  help '^64545-3^', rpr d + d\n  # help '^64545-4^', type_of d\n  # help '^64545-5^', type_of d + d\n  help '^64545-5^', [ d, d, ]\n  help '^64545-5^', [ d, d, ].join '#'\n  return null\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  demo_stringlike_class()\n\n\n"
  ]
}