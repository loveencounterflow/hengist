{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-desql.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,aAAA,EAAA,WAAA,EAAA,QAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA;;;EAKA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAd5B;;;;;EAkBA,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,MADF,EAEE,OAFF,EAGE,QAHF,EAIE,gBAJF,CAAA,GAI4B,KAAK,CAAC,MAAN,CAAA,CAJ5B;;EAKA,GAAA,GAA4B,OAAA,CAAQ,KAAR,EAxB5B;;;EA0BA,CAAA,GAA4B,OAAA,CAAQ,sBAAR,EA1B5B;;;;;;EA+BA,GAAA,GAA4B,MAAM,CAAC,IA/BnC;;;;EAkCA,IAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,OAAA,CAAQ,MAAR,CAAF,CAAkB,CAAC,OAAnB,CAA2B,CAA3B,EAA8B;MACjE,MAAA,EAAQ,IADyD;MACnD,KAAA,EAAO,KAD4C;MAClC,cAAA,EAAgB,IADkB;MACZ,WAAA,EAAa;IADD,CAA9B;EAAT;;EAE5B,CAAA,CAAE,KAAF,CAAA,GAA4B,OAAA,CAAQ,qBAAR,CAA5B,EApCA;;;;;EA0CA,aAAA,GAAgB,QAAA,CAAE,EAAF,CAAA;IACd,IAAA,CAAK,+EAAL;IACA,CAAC,CAAC,QAAF,CAAW,aAAX,EAA4C,EAAA,CAAG,GAAG,CAAA,yBAAA,CAAN,CAA5C;AACA,WAAO;EAHO,EA1ChB;;;EAgDA,QAAA,GAAW,QAAA,CAAE,EAAF,EAAM,KAAN,CAAA;WAAiB,CAAC,CAAC,QAAF,CAAW,KAAX,EAAkB,EAAA,CAAG,KAAH,CAAlB;EAAjB,EAhDX;;;EAmDA,OAAA,GAAU;IACR,GAAG,CAAA,+CAAA,CADK;IAER,GAAG,CAAA;;;;;;;;;;;;0CAAA,CAFK;IAgBR,GAAG,CAAA,oCAAA,CAhBK;IAiBR,GAAG,CAAA,2BAAA,CAjBK;IAkBR,GAAG,CAAA,0DAAA,CAlBK;IAmBR,GAAG,CAAA,sCAAA,CAnBK;IAoBR,GAAG,CAAA,iEAAA,CApBK;IAqBR,GAAG,CAAA,gEAAA,CArBK;IAsBR,GAAG,CAAA,iGAAA,CAtBK;IAuBR,GAAG,CAAA,gFAAA,CAvBK;IAwBR,GAAG,CAAA;;iCAAA,CAxBK;IA2BR,GAAG,CAAA,qEAAA,CA3BK;IAnDV;;;EAkFA,IAAC,CAAA,gBAAD,GAAoB,QAAA,CAAA,CAAA;AACpB,QAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA;AAOE;;;;;;;;IAAA,KAAA,qCAAA;;MACE,KAAA,GAAQ,IAAI,KAAJ,CAAA,EAAZ;;MAEI,KAAK,CAAC,KAAN,CAAY,KAAZ;MACA,QAAA,CAAS,KAAK,CAAC,EAAf,EAAmB,GAAG,CAAA,sBAAA,CAAtB;MACA,QAAA,CAAS,KAAK,CAAC,EAAf,EAAmB,GAAG,CAAA,0CAAA,CAAtB,EAJJ;;;;MAQI,QAAA,CAAS,KAAK,CAAC,EAAf,EAAmB,GAAG,CAAA,uBAAA,CAAtB;MACA,QAAA,CAAS,KAAK,CAAC,EAAf,EAAmB,GAAG,CAAA,gCAAA,CAAtB;MACA,QAAA,CAAS,KAAK,CAAC,EAAf,EAAmB,GAAG,CAAA,8BAAA,CAAtB;IAXF,CAPF;;AAoBE,WAAO;EArBW,EAlFpB;;;EA0GA,WAAA,GAAc,QAAA,CAAE,KAAF,EAAS,MAAT,CAAA;AACd,QAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA;IAAE,CAAA,GAAI;IACJ,KAAA,wCAAA;;MACE,CAAC,CAAC,IAAF,CACE;QAAA,EAAA,EAAY,IAAI,CAAC,EAAjB;QACA,IAAA,EAAY,CADZ;QAEA,IAAA,EAAY,IAAI,CAAC,IAFjB;QAGA,IAAA,EAAY,IAAI,CAAC,IAHjB;QAIA,IAAA,oCAAwB,IAJxB;QAKA,IAAA,sCAAwB,IALxB;QAMA,IAAA,sCAAwB,IANxB;QAOA,IAAA,sCAAwB,IAPxB;QAQA,IAAA,sCAAwB,IARxB;QASA,IAAA,sCAAwB,IATxB;QAUA,UAAA,EAAY,IAAI,CAAC,UAVjB;QAWA,IAAA,EAAY,IAAI,CAAC;MAXjB,CADF;IADF;IAcA,CAAC,CAAC,QAAF,CAAW,KAAX,EAAkB,CAAlB;IACA,CAAA;;AAAM;MAAA,KAAA,qCAAA;;YAAwB,CAAE,IAAI,CAAC,IAAL,KAAe,UAAjB,CAAA,IAAkC,CAAE,IAAI,CAAC,UAAL,KAAmB,CAArB;uBAA1D;;MAAA,CAAA;;;IACN,CAAC,CAAC,QAAF,CAAW,KAAX,EAAkB,CAAlB;AACA,WAAO;EAnBK,EA1Gd;;;EAiIA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA;aAChC,IAAC,CAAA,gBAAD,CAAA;IADgC,CAAA,IAAlC;;AAjIA",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DESQL'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# PATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require 'guy'\n# { HDML }                  = require '../../../apps/hdml'\nX                         = require '../../../lib/helpers'\n# { lets\n#   freeze }                = GUY.lft\n# { to_width }              = require 'to-width'\n# { DBay }                  = require '../../../apps/dbay'\nSQL                       = String.raw\n# { SQL }                   = DBay\n# { Sql }                   = require '../../../apps/dbay/lib/sql'\nxrpr                      = ( x ) -> ( require 'util' ).inspect x, {\n  colors: true, depth: Infinity, maxArrayLength: null, breakLength: Infinity, }\n{ Desql }                 = require '../../../apps/desql'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nshow_overview = ( db ) ->\n  info '#############################################################################'\n  X.tabulate \"dbay_tables\",                   db SQL\"select * from dbay_tables\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ntabulate = ( db, query ) -> X.tabulate query, db query\n\n#-----------------------------------------------------------------------------------------------------------\nqueries = [\n  SQL\"drop view if exists dbay_foreign_key_clauses_2;\",\n  SQL\"\"\"\n    create view dbay_foreign_key_clauses_2 as select distinct\n        fk_id                                                                     as fk_id,\n        from_table_nr                                                             as from_table_nr,\n        from_table_name                                                           as from_table_name,\n        group_concat( std_sql_i( from_field_name ), ', ' ) over w                 as from_field_names,\n        to_table_name                                                             as to_table_name,\n        group_concat( std_sql_i(   to_field_name ), ', ' ) over w                 as to_field_names\n      from dbay_foreign_key_clauses_1\n      window w as (\n        partition by from_table_name, fk_id\n        order by fk_idx\n        rows between unbounded preceding and unbounded following )\n      order by from_table_name, fk_id, fk_idx;\"\"\"\n  SQL\"create table d ( x integer ) strict;\"\n  SQL\"\"\"create table d ( x \"any\" );\"\"\"\n  SQL\"insert into products ( nr, name ) values ( 1234, 'frob' );\"\n  SQL\"select a, b from s join t using ( c );\"\n  SQL\"select t1.a as alias, t2.b from s as t1 join t as t2 using ( c );\"\n  SQL\"create view v as select a, b, c, f( d ) as k from t where e > 2;\"\n  SQL\"create view v as select a, b, c, f( d ) as k from t join t2 using ( uuu ) where e > 2 order by k;\"\n  SQL\"select a, b, c, f( d ) as k from t join t2 using ( uuu ) where e > 2 order by k;\"\n  SQL\"\"\"select\n    42 as d;\n    select 'helo world' as greetings;\"\"\"\n  SQL\"\"\"select f(xxxxx) /* comment */ from t as t1 where \"x\" = $x order by k;\"\"\"\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_short_query = ->\n  # CATALOG = require '../../../jzr-old/multimix/lib/cataloguing'\n  # q = antlr.parse \"SELECT * FROM abc join users as u;\", parser_cfg\n  # for query in [ SQL\"\"\"select d as \"d1\" from a as a1;\"\"\", ]\n  # for query in [ SQL\"\"\"select d + e + f( x ) as \"d1\" from a as a1;\"\"\", ]\n  # for query in [ SQL\"\"\"select * from a left join b where k > 1 order by m limit 1;\"\"\", ]\n  # for query in [ SQL\"select 'ð €€' as a;\", ]\n  # for query in [ queries[ 1 ], ]\n  for query in [ queries[ queries.length - 1 ], ]\n    desql = new Desql()\n    # echo query\n    desql.parse query\n    tabulate desql.db, SQL\"select * from queries;\"\n    tabulate desql.db, SQL\"select * from raw_nodes order by id, xtra;\"\n    # tabulate desql.db, SQL\"\"\"\n    #   select * from raw_nodes as r1 where not exists ( select 1 from raw_nodes as r2 where r2.upid = r1.id )\n    #   \"\"\"\n    tabulate desql.db, SQL\"select * from coverage;\"\n    tabulate desql.db, SQL\"select * from _coverage_holes_1;\"\n    tabulate desql.db, SQL\"select * from _coverage_holes;\"\n    # tabulate desql.db, SQL\"select * from _first_coverage_hole;\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nshow_series = ( query, series ) ->\n  s = []\n  for node in series\n    s.push\n      id:         node.id\n      xtra:       0\n      upid:       node.upid\n      type:       node.type\n      idx1:       node.idx1 ? null\n      idx2:       node.idx2 ? null\n      lnr1:       node.lnr1 ? null\n      col1:       node.col1 ? null\n      lnr2:       node.lnr2 ? null\n      col2:       node.col2 ? null\n      node_count: node.node_count\n      text:       node.text\n  X.tabulate query, s\n  s = ( node for node in s when ( node.type isnt 'terminal' ) and ( node.node_count is 0 ) )\n  X.tabulate query, s\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  @demo_short_query()\n\n"
  ]
}