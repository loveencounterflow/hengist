{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-desql.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DESQL'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# PATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require 'guy'\n# { HDML }                  = require '../../../apps/hdml'\nX                         = require '../../../lib/helpers'\n# { lets\n#   freeze }                = GUY.lft\n{ to_width }              = require 'to-width'\n# { DBay }                  = require '../../../apps/dbay'\nSQL                       = String.raw\n# { SQL }                   = DBay\n# { Sql }                   = require '../../../apps/dbay/lib/sql'\nxrpr                      = ( x ) -> ( require 'util' ).inspect x, {\n  colors: true, depth: Infinity, maxArrayLength: null, breakLength: Infinity, }\n{ Desql }                 = require '../../../apps/desql'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nshow_overview = ( db ) ->\n  info '#############################################################################'\n  X.tabulate \"dbay_tables\",                   db SQL\"select * from dbay_tables\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ntabulate = ( db, query ) -> X.tabulate query, db query\n\n#-----------------------------------------------------------------------------------------------------------\npathsep_lit = \"'-'\"\nqueries = [\n  SQL\"drop view if exists dbay_foreign_key_clauses_2;\",\n  SQL\"\"\"\n    create view dbay_foreign_key_clauses_2 as select distinct\n        fk_id                                                                     as fk_id,\n        from_table_nr                                                             as from_table_nr,\n        from_table_name                                                           as from_table_name,\n        group_concat( std_sql_i( from_field_name ), ', ' ) over w                 as from_field_names,\n        to_table_name                                                             as to_table_name,\n        group_concat( std_sql_i(   to_field_name ), ', ' ) over w                 as to_field_names\n      from dbay_foreign_key_clauses_1\n      window w as (\n        partition by from_table_name, fk_id\n        order by fk_idx\n        rows between unbounded preceding and unbounded following )\n      order by from_table_name, fk_id, fk_idx;\"\"\"\n  SQL\"create table d ( x integer ) strict;\"\n  SQL\"\"\"create table d ( x \"any\" );\"\"\"\n  SQL\"insert into products ( nr, name ) values ( 1234, 'frob' );\"\n  SQL\"select a, b from s join t using ( c );\"\n  SQL\"create view v as select a, b, c, f( d ) as k from t where e > 2;\"\n  SQL\"select a, b, c, f( d ) as k from t join t2 using ( uuu ) where e > 2 order by k;\"\n  SQL\"\"\"select a as a1, b from t as t1 where \"x\" = y order by k;\"\"\"\n  SQL\"\"\"   select f(xxxxx) /* comment */ from t as t1 where \"x\" = $x order by k;\"\"\"\n  # SQL\"\"\"order by k;\"\"\"\n  SQL\"\"\"select\n    42 as d;\n    select 'helo world' as greetings;\"\"\"\n  SQL\"create view v as select a, b, [c], f( d ) as k from t join t2 using ( uuu ) where e > 2 order by k, l, m;\"\n  SQL\"create view v as select a, b, c, f( d ) as k from t join t2 using ( uuu ) where e > 2 order by k, l, m;\"\n  SQL\"select t1.a as alias, t2.b from s as t1 join t as t2 using ( cy, doe, eps );\"\n  SQL\"select t1.a as alias, t2.b from s as t1 join t as t2 on ( cy = doe );\"\n  SQL\"\"\"\n      create view _coverage_holes as select\n          c.qid                                                           as qid,\n          c.id                                                            as id,\n          2                                                               as xtra,\n          c.prv_upid                                                      as upid,\n          r.type                                                          as type,\n          c.prv_path || #{pathsep_lit} || r.type                          as path,\n          c.pos1                                                          as pos1,\n          c.pos2                                                          as pos2,\n          c.lnr1                                                          as lnr1,\n          c.col1                                                          as col1,\n          c.lnr2                                                          as lnr2,\n          c.col2                                                          as col2,\n          c.txt                                                           as txt\n        from _coverage_holes_2  as c\n        join ( select\n            qid,\n            id,\n            case when std_str_is_blank( txt ) then 'spc' else 'msg' end as type\n          from _coverage_holes_2 ) as r using ( qid, id );\"\"\"\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_short_query = ->\n  # CATALOG = require '../../../jzr-old/multimix/lib/cataloguing'\n  # q = antlr.parse \"SELECT * FROM abc join users as u;\", parser_cfg\n  # for query in [ SQL\"\"\"select d as \"d1\" from a as a1;\"\"\", ]\n  # for query in [ SQL\"\"\"select d + e + f( x ) as \"d1\" from a as a1;\"\"\", ]\n  # for query in [ SQL\"\"\"select * from a left join b where k > 1 order by m limit 1;\"\"\", ]\n  # for query in [ SQL\"select '𠀀' as a;\", ]\n  # for query in [ queries[ 1 ], ]\n  # for query in [ queries[ queries.length - 1 ], ]\n  for query in queries\n    desql = new Desql()\n    # echo query\n    desql.parse query\n    # tabulate desql.db, SQL\"select * from queries;\"\n    # tabulate desql.db, SQL\"select * from raw_nodes order by id, xtra;\"\n    # tabulate desql.db, SQL\"select * from nodes where ( type != 'spc' ) order by id, xtra;\"\n    # tabulate desql.db, SQL\"\"\"\n    #   select * from raw_nodes as r1 where not exists ( select 1 from raw_nodes as r2 where r2.upid = r1.id )\n    #   \"\"\"\n    # tabulate desql.db, SQL\"select * from _coverage_1;\"\n    # tabulate desql.db, SQL\"select * from _coverage_holes_1;\"\n    # tabulate desql.db, SQL\"select * from _coverage_holes_2;\"\n    # # tabulate desql.db, SQL\"select * from _coverage_2;\"\n    # tabulate desql.db, SQL\"select * from nodes;\"\n    # tabulate desql.db, SQL\"\"\"\n    #   select * from nodes\n    #   where true\n    #     and ( type != 'spc' )\n    #     and ( txt is not null )\n    #     and ( path glob '* i ui t' or path glob '* i qi t' )\n    #     ;\"\"\"\n    # tabulate desql.db, SQL\"select distinct type from nodes order by type;\"\n    # tabulate desql.db, SQL\"select * from _coverage_holes where type = 'msg';\"\n    highlight_parsing_result query, desql\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nshow_missing = ( query, desql ) ->\n  rows = []\n  for row from desql.db SQL\"select * from _coverage_holes;\"\n    row.txt = rpr row.txt\n    rows.push row\n  X.tabulate \"parts missing from AST\", rows\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nhighlight_parsing_result = ( query, desql ) ->\n  { db, }   = desql\n  rvs       = ( P... ) -> CND.bold CND.reverse P...\n  parts     = []\n  #.........................................................................................................\n  for { path, txt, } from db SQL\"\"\"select * from nodes where txt is not null;\"\"\"\n    unless ( /-spc$/ ).test path\n      info ( to_width ( rpr txt ), 20 ), rvs path\n    txt = \\\n    if      ( /-msg$/                             ).test path then rvs CND.red     txt\n    else if ( /-fc-fn-qn-i-[uq]i-t$/              ).test path then rvs CND.blue    txt # function name\n    else if ( /-cv-mi-eci-i-[uq]i-t$/             ).test path then rvs CND.olive   txt # view name\n    else if ( /-dref-cref-i-[uq]i-t$/             ).test path then rvs CND.steel   txt # table name in fqn (`t.col`)\n    else if ( /-dref-i-[uq]i-t$/                  ).test path then rvs CND.cyan    txt # col name in fqn (`t.col`)\n    else if ( /-dref-i-[uq]i-ansinr-t$/           ).test path then rvs CND.cyan    txt # col name in fqn (`t.col`) (also SQL kw)\n    else if ( /-tn-.*-i-[uq]i-t$/                 ).test path then rvs CND.green   txt # table name\n    else if ( /-tn-ta-[uq]i-t$/                   ).test path then rvs CND.lime    txt # table alias\n    else if ( /-nes-ne-eci-i-[uq]i-t$/            ).test path then rvs CND.yellow  txt # col alias\n    else if ( /-nes-ne-eci-i-[uq]i-ansinr-t$/     ).test path then rvs CND.yellow  txt # col alias (also SQL kw)\n    else if ( /-qo-si-e-pd-ve-cref-i-[uq]i-t$/    ).test path then rvs CND.pink    txt # col in order by\n    else if ( /-jc[ou]-.*-i-[uq]i-t$/             ).test path then rvs CND.indigo  txt # id in join criteria\n    else if ( /-[uq]i-t$/                         ).test path then rvs CND.plum    txt # identifier\n    else if ( /-c-.*-t$/                          ).test path then rvs CND.orange  txt # literal\n    else txt\n    parts.push txt\n  #.........................................................................................................\n  X.banner query\n  echo()\n  echo parts.join ''\n  echo()\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  @demo_short_query()\n\n\n"
  ]
}