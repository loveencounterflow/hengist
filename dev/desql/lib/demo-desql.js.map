{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-desql.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DESQL'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# PATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require 'guy'\n# { HDML }                  = require '../../../apps/hdml'\nX                         = require '../../../lib/helpers'\n# { lets\n#   freeze }                = GUY.lft\n{ to_width }              = require 'to-width'\n# { DBay }                  = require '../../../apps/dbay'\nSQL                       = String.raw\n# { SQL }                   = DBay\n# { Sql }                   = require '../../../apps/dbay/lib/sql'\nxrpr                      = ( x ) -> ( require 'util' ).inspect x, {\n  colors: true, depth: Infinity, maxArrayLength: null, breakLength: Infinity, }\n{ Desql }                 = require '../../../apps/desql'\nhashbow                   = require 'hashbow'\nchalk                     = require 'chalk'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nshow_overview = ( db ) ->\n  info '#############################################################################'\n  X.tabulate \"dbay_tables\",                   db SQL\"select * from dbay_tables\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ntabulate = ( db, query ) -> X.tabulate query, db query\n\n#-----------------------------------------------------------------------------------------------------------\npathsep_lit = \"'-'\"\nqueries = [\n  SQL\"drop view if exists dbay_foreign_key_clauses_2;\",\n  SQL\"\"\"\n    create view dbay_foreign_key_clauses_2 as select distinct\n        fk_id                                                                     as fk_id,\n        from_table_nr                                                             as from_table_nr,\n        from_table_name                                                           as from_table_name,\n        group_concat( std_sql_i( from_field_name ), ', ' ) over w                 as from_field_names,\n        to_table_name                                                             as to_table_name,\n        group_concat( std_sql_i(   to_field_name ), ', ' ) over w                 as to_field_names\n      from dbay_foreign_key_clauses_1\n      window w as (\n        partition by from_table_name, fk_id\n        order by fk_idx\n        rows between unbounded preceding and unbounded following )\n      order by from_table_name, fk_id, fk_idx;\"\"\"\n  SQL\"create table d ( x integer ) strict;\"\n  SQL\"\"\"create table d ( x \"any\" );\"\"\"\n  SQL\"insert into products ( nr, name ) values ( 1234, 'frob' );\"\n  SQL\"select a, b from s join t using ( c );\"\n  SQL\"create view v as select a, b, c, f( d ) as k from t where e > 2;\"\n  SQL\"select a, b, c, f( d ) as k from t join t2 using ( uuu ) where e > 2 order by k;\"\n  SQL\"\"\"select a as a1, b from t as t1 where \"x\" = y order by k;\"\"\"\n  SQL\"\"\"   select f(xxxxx) /* comment */ from t as t1 where \"x\" = $x order by k;\"\"\"\n  # SQL\"\"\"order by k;\"\"\"\n  SQL\"\"\"select\n    42 as d;\n    select 'helo world' as greetings;\"\"\"\n  SQL\"create view v as select a, b, [c], f( d ) as k from t join t2 using ( uuu ) where e > 2 order by k, l, m;\"\n  SQL\"select t1.a as alias, t2.b from s as t1 join t as t2 using ( cy, doe, eps );\"\n  SQL\"\"\"\n      create view _coverage_holes as select\n          c.qid                                                           as qid,\n          c.id                                                            as id,\n          2                                                               as xtra,\n          c.prv_upid                                                      as upid,\n          r.type                                                          as type,\n          c.prv_path || #{pathsep_lit} || r.type                          as path,\n          c.pos1                                                          as pos1,\n          c.pos2                                                          as pos2,\n          c.lnr1                                                          as lnr1,\n          c.col1                                                          as col1,\n          c.lnr2                                                          as lnr2,\n          c.col2                                                          as col2,\n          c.txt                                                           as txt\n        from _coverage_holes_2  as c\n        join ( select\n            qid,\n            id,\n            case when std_str_is_blank( txt ) then 'spc' else 'miss' end as type\n          from _coverage_holes_2 ) as r using ( qid, id );\"\"\"\n  SQL\"create table v as select a, b as b2, c.x as c2, f( d ) as k from t join t2 using ( uuu ) where e > 2 order by k, l, m;\"\n  SQL\"\"\"\n    create table tcats ( -- terminal category codes\n        major   text not null,\n        minor   text not null,\n        full    text not null generated always as ( major || minor ) virtual,\n        name    text not null,\n      primary key ( major, minor ),\n      check ( std_re_is_match( major, '^[A-Z]$'     ) ),\n      check ( std_re_is_match( minor, '^[a-z0-9]$'  ) ) );\"\"\"\n  SQL\"\"\"\n    create table tcats (\n        major   text not null,\n        minor   text not null,\n        full    text not null generated always as ( major || minor ) virtual,\n        name    text not null,\n      primary key ( major, minor ),\n      check ( std_re_is_match( major, '^[A-Z]$'     ) ),\n      check ( std_re_is_match( minor, '^[a-z0-9]$'  ) ) );\"\"\"\n  SQL\"\"\"\n    create table tcats (\n        major   text not null,\n        minor   text not null,\n        \"full\"  text not null,\n        name    text not null,\n      primary key ( major, minor ),\n      check ( std_re_is_match( major, '^[A-Z]$'     ) ),\n      check ( std_re_is_match( minor, '^[a-z0-9]$'  ) ) );\"\"\"\n  SQL\"\"\"create table a ( full text );\"\"\"\n  SQL\"\"\"create table a ( \"full\" text );\"\"\"\n  SQL\"\"\"create table a ( x integer );\"\"\"\n  SQL\"select t1.a as alias, t2.b from s as t1 join t as t2 on ( cy = doe );\"\n  SQL\"select 42 as d;\"\n  SQL\"select a b c from t;\"\n  SQL\"select a, b, c, from t;\"\n  SQL\"select a, b, c,, from t;\"\n  SQL\"select a.b.c from p.q.r.s.t;\"\n  SQL\"select a.b from t;\"\n  SQL\"select fld from tbl;\"\n  SQL\"select tbl.fld from tbl;\"\n  SQL\"select fld as fld1 from tbl;\"\n  SQL\"select tbl.fld as fld1 from tbl as tbl1;\"\n  SQL\"create view vw as select tbl.fld as fld1 from tbl as tbl1;\"\n  SQL\"\"\"select `c` from t;\"\"\"\n  SQL\"\"\"select [c] from t;\"\"\"\n  SQL\"\"\"select \"c\" from t;\"\"\"\n  SQL\"\"\"select \"c\" as \"c1\" from t;\"\"\"\n  SQL\"\"\"select name, type from sqlite_schema;\"\"\"\n  SQL\"\"\"create view v as select a, b, \"c\", f( d ) as k from t join t2 using ( uuu ) where e > 2 order by k desc, l, m;\"\"\"\n  SQL\"\"\"select \"c\" as \"c1\" from \"t\";\"\"\"\n  SQL\"\"\"\n    create view mrg_parmirror as select\n        rwnmirror.dsk                                                             as dsk,\n        rwnmirror.oln                                                             as oln,\n        rwnmirror.trk                                                             as trk,\n        rwnmirror.pce                                                             as pce,\n        rwnmirror.act                                                             as act,\n        raw_mirror.mat                                                            as mat,\n        ( select\n              parlnrs.par as par\n            from mrg_parlnrs as parlnrs\n            where rwnmirror.rwn between parlnrs.rwn1 and parlnrs.rwn2 limit 1 )   as par,\n        raw_mirror.txt                                                            as txt\n      from mrg_rwnmirror  as rwnmirror\n      join mrg_raw_mirror as raw_mirror using ( oln, trk, pce )\n      order by rwn;\"\"\"\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_short_query = ->\n  # CATALOG = require '../../../jzr-old/multimix/lib/cataloguing'\n  # q = antlr.parse \"SELECT * FROM abc join users as u;\", parser_cfg\n  # for query in [ SQL\"\"\"select d as \"d1\" from a as a1;\"\"\", ]\n  # for query in [ SQL\"\"\"select d + e + f( x ) as \"d1\" from a as a1;\"\"\", ]\n  # for query in [ SQL\"\"\"select * from a left join b where k > 1 order by m limit 1;\"\"\", ]\n  # for query in [ SQL\"select '𠀀' as a;\", ]\n  # for query in [ queries[ 1 ], ]\n  n = queries.length\n  for query in queries[ n - 3 .. ]\n  # for query in queries[ 15 .. 20 ]\n  # for query in queries\n    desql = new Desql()\n    desql.parse query\n    # tabulate desql.db, SQL\"select * from nodes where ( type != 'spc' ) order by id, xtra;\"\n    # tabulate desql.db, SQL\"\"\"select * from tcat_matches;\"\"\"\n    X.tabulate query, desql.db SQL\"\"\"\n      select\n          path,\n          pos1,\n          type,\n          substring( txt, 1, 25 ) as txt,\n          codes,\n          acodes,\n          kcodes,\n          icodes,\n          lcodes,\n          scodes,\n          xcodes\n        from terminals_with_grouped_tags\n        where type != 'spc';\"\"\"\n    highlight_parsing_result query, desql\n  # tabulate desql.db, SQL\"select * from tcat_rules as r join tcats using ( code ) order by code;\"\n  # tabulate desql.db, SQL\"select * from tcats order by code;\"\n  # desql.create_trashlib()\n  # tabulate desql.db, SQL\"select name, type from sqlite_schema;\"\n  # tabulate desql.db, SQL\"select * from dbay_fields;\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nshow_missing = ( query, desql ) ->\n  rows = []\n  for row from desql.db SQL\"select * from _coverage_holes;\"\n    row.txt = rpr row.txt\n    rows.push row\n  X.tabulate \"parts missing from AST\", rows\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nhighlight_parsing_result = ( query, desql ) ->\n  { db, }   = desql\n  rvs       = ( P... ) -> CND.bold CND.reverse P...\n  parts     = []\n  #.........................................................................................................\n  for { type, txt, icodes, } from db SQL\"\"\"select * from terminals_with_grouped_tags;\"\"\"\n    if type is 'miss'\n      txt = chalk.underline.red txt\n    else if icodes?\n      txt = ( chalk.inverse.bold.hex hashbow icodes ) txt\n    parts.push txt\n  #.........................................................................................................\n  # X.banner query\n  echo()\n  echo parts.join ''\n  echo()\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  @demo_short_query()\n  # do =>\n  #   hashbow = require 'hashbow'\n  #   chalk   = require 'chalk'\n  #   cx      = require 'cohex'\n  #   # info chalk.inverse.hex('#550440').italic.bgCyanBright.bold.underline('Hello, world!')\n  #   # info chalk.inverse.hex( cx.seagreen ).italic.bgCyanBright.bold.underline('Hello, world!')\n  #   # info chalk.inverse.hex( cx.darkseagreen ).italic.bgBlack.bold.underline('Hello, world!')\n  #   # info chalk.inverse.hex( cx.aqua ).italic.bgBlack.bold.underline('Hello, world!')\n  #   info chalk.inverse.hex( hashbow 'a' ).italic.bgBlack.underline('Hello, world!')\n  #   info chalk.inverse.hex( hashbow 'b' ).italic.bgBlack.underline('Hello, world!')\n  #   info chalk.inverse.hex( hashbow 'c' ).italic.bgBlack.underline('Hello, world!')\n  #   info chalk.hex( hashbow 'a' ) 'Hello, world!'\n  #   info chalk.bold.hex( hashbow 'a' ) 'Hello, world!'\n  #   info chalk.hex( hashbow 'b' ) 'Hello, world!'\n  #   info chalk.bold.hex( hashbow 'b' ) 'Hello, world!'\n  #   info chalk.hex( hashbow 'c' ) 'Hello, world!'\n  #   info chalk.bold.hex( hashbow 'c' ) 'Hello, world!'\n\n"
  ]
}