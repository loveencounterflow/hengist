{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/ops.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nglobalThis.µ              = require 'mudom'\nCND                       = require 'cnd'\nINTERTYPE                 = require 'intertype'\nIntermatic                = require 'intermatic'\nlog                       = console.log;\nrpr                       = CND.rpr\nafter                     = ( dts, f ) -> setTimeout f, dts * 1000\nsleep                     = ( dts ) -> new Promise ( done ) -> after dts, done\n\n#-----------------------------------------------------------------------------------------------------------\nµ.DOM.ready ->\n\n  #---------------------------------------------------------------------------------------------------------\n  update_button = ( button, name, state, keys ) =>\n    text              = \"#{name} \"\n    for key in keys\n      continue unless state[ key ] ? false\n      text += \"#{key} \"\n    # log '^4443^', ( µ.DOM.get button, 'id' ), name, state\n    classes           = \"btn #{text}\"\n    button.innerHTML  = text\n    µ.DOM.set button, 'class', classes\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  keynames  = null\n  do =>\n    keynames  = ( µ.DOM.get button, 'name' for button in µ.DOM.select_all '.btn' )\n    keynames  = [ ( new Set keynames )..., ]\n  #.........................................................................................................\n  do =>\n    #.......................................................................................................\n    for keyname in keynames\n      for behavior in [ 'up', 'down', 'toggle', 'latch', ]\n        do ( keyname, behavior ) =>\n          #.................................................................................................\n          µ.KB._listen_to_key keyname, behavior, ( d ) =>\n            for button in µ.DOM.select_all \".btn[name=#{keyname}]\"\n              switch µ.DOM.get button, 'latching'\n                when 'none'   then  keys = [ 'up', 'down', ]\n                when 'toggle' then  keys = [ 'up', 'down', 'toggle', ]\n                when 'latch'  then  keys = [ 'up', 'down', 'latch', ]\n                when 'both'   then  keys = [ 'up', 'down', 'toggle', 'latch', ]\n              update_button button, keyname, d.state, keys\n            return null\n          #.................................................................................................\n          return null\n    return null\n  #.........................................................................................................\n  return null\n\n"
  ]
}