{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/ops.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nglobalThis.µ              = require 'mudom'\nCND                       = require 'cnd'\nINTERTYPE                 = require 'intertype'\nIntermatic                = require 'intermatic'\nlog                       = console.log\ndebug                     = console.debug\nrpr                       = CND.rpr\nafter                     = ( dts, f ) -> setTimeout f, dts * 1000\nsleep                     = ( dts ) -> new Promise ( done ) -> after dts, done\n\n#-----------------------------------------------------------------------------------------------------------\nµ.DOM.ready ->\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _keys_from_button = ( button ) ->\n  #   switch µ.DOM.get button, 'latching'\n  #     when 'toggle' then  return  [ 'up', 'down', 'toggle', ]\n  #     when 'latch'  then  return  [ 'up', 'down', 'latch', ]\n  #     when 'both'   then  return  [ 'up', 'down', 'toggle', 'latch', ]\n  #     when 'tlatch' then  return  [ 'up', 'down', 'tlatch', ]\n  #   return                        [ 'up', 'down', ]\n\n  #---------------------------------------------------------------------------------------------------------\n  update_button = ( button, keyname, behavior, state ) =>\n    if state\n      button.innerHTML = \"#{keyname} #{behavior}\"\n      µ.DOM.add_class     button, behavior\n    else\n      button.innerHTML = \"#{keyname} <strike>#{behavior}</strike>\"\n      µ.DOM.remove_class  button, behavior\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  keynames  = null\n  do =>\n    keynames  = ( µ.DOM.get button, 'name' for button in µ.DOM.select_all '.btn' )\n    keynames  = [ ( new Set keynames )..., ]\n  #.........................................................................................................\n  do =>\n    #.......................................................................................................\n    # debug '^3646346^', µ.DOM.select_all '.btn'\n    all_buttons = [ ( µ.DOM.select_all '.btn' )..., ]\n    for keyname in keynames\n      for behavior in [ 'push', 'toggle', 'latch', 'tlatch', 'ptlatch', 'ntlatch', ]\n          # debug '^ops@4453^', { keyname, behavior, }\n        buttons = all_buttons.filter ( x ) => keyname is µ.DOM.get x, 'name'\n        buttons = switch behavior\n          when 'push'     then buttons\n          when 'toggle'   then buttons.filter ( x ) => ( µ.DOM.get x, 'latching' ) in [ 'both', 'toggle', ]\n          when 'latch'    then buttons.filter ( x ) => ( µ.DOM.get x, 'latching' ) in [ 'both', 'latch',  ]\n          when 'tlatch'   then buttons.filter ( x ) => ( µ.DOM.get x, 'latching' ) is 'tlatch'\n          when 'ptlatch'  then buttons.filter ( x ) => ( µ.DOM.get x, 'latching' ) is 'ptlatch'\n          when 'ntlatch'  then buttons.filter ( x ) => ( µ.DOM.get x, 'latching' ) is 'ntlatch'\n        for button in buttons\n          do ( keyname, behavior, button ) =>\n            µ.KB._listen_to_key keyname, behavior, ( d ) =>\n              update_button button, keyname, behavior, d.state\n              return null\n            return null\n    return null\n  #.........................................................................................................\n  return null\n\n"
  ]
}