{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/ops.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nglobalThis.µ              = require 'mudom'\nCND                       = require 'cnd'\nINTERTYPE                 = require 'intertype'\nIntermatic                = require 'intermatic'\nlog                       = console.log\ndebug                     = console.debug\nrpr                       = CND.rpr\nafter                     = ( dts, f ) -> setTimeout f, dts * 1000\nsleep                     = ( dts ) -> new Promise ( done ) -> after dts, done\n\n#-----------------------------------------------------------------------------------------------------------\nµ.DOM.ready ->\n\n  #---------------------------------------------------------------------------------------------------------\n  keynames = null\n\n  #---------------------------------------------------------------------------------------------------------\n  get_mbmcd_state = -> ( µ.DOM.select '#mbmcd' ).checked\n\n  #---------------------------------------------------------------------------------------------------------\n  setup = =>\n    keynames    = ( µ.DOM.get button, 'name' for button in µ.DOM.select_all '.btn' )\n    keynames    = [ ( new Set keynames )..., ]\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  demo_toggling_etc = =>\n    all_buttons = [ ( µ.DOM.select_all '.btn' )..., ]\n    behaviors   = [ 'push', 'toggle', 'latch', 'tlatch', 'ptlatch', 'ntlatch', ]\n    for keyname in keynames\n      for behavior in behaviors\n        buttons = all_buttons.filter ( x ) => keyname is µ.DOM.get x, 'name'\n        buttons = switch behavior\n          when 'push'     then buttons\n          when 'toggle'   then buttons.filter ( x ) => ( µ.DOM.get x, 'latching' ) in [ 'both', 'toggle', ]\n          when 'latch'    then buttons.filter ( x ) => ( µ.DOM.get x, 'latching' ) in [ 'both', 'latch',  ]\n          when 'tlatch'   then buttons.filter ( x ) => ( µ.DOM.get x, 'latching' ) is 'tlatch'\n          when 'ptlatch'  then buttons.filter ( x ) => ( µ.DOM.get x, 'latching' ) is 'ptlatch'\n          when 'ntlatch'  then buttons.filter ( x ) => ( µ.DOM.get x, 'latching' ) is 'ntlatch'\n        for button in buttons\n          do ( keyname, behavior, button ) =>\n            µ.KB._listen_to_key keyname, behavior, ( d ) =>\n              update_button button, keyname, behavior, d.state\n              return null\n            return null\n\n  #---------------------------------------------------------------------------------------------------------\n  use_event_names = ->\n    ### Demo for using event names instead of callbacks: ###\n    for keyname in keynames # \"y Y Space Alt AltGraph Control Meta Shift CapsLock\".split /\\s+/\n      µ.KB._listen_to_key keyname, 'toggle', 'pushed_key_y'\n    eventdetail_div = µ.DOM.select '#eventdetail'\n    µ.DOM.on document, 'pushed_key_y', ( event ) =>\n      detail_txt                = rpr event.detail\n      detail_txt                = detail_txt.replace 'event: { isTrusted: [Getter] }', 'event: ...'\n      eventdetail_div.innerHTML = µ.TEXT._escape \"event.detail: #{detail_txt}\"\n      return null\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  watch_modifiers = =>\n    modblink_div = µ.DOM.select '#modblink'\n    µ.KB._listen_to_modifiers ( d ) ->\n      # log '^9801^', d\n      # log '^9801^', µ.KB._prv_modifiers\n      µ.DOM.add_class modblink_div, 'hilite'\n      after 0.25, => µ.DOM.remove_class modblink_div, 'hilite'\n      # µ.DOM.on document, 'keydown'\n      use_mbmcd = get_mbmcd_state()\n      for key, state of d\n        continue if key is '_type'\n        if use_mbmcd\n          eventname = if state then 'keydown' else 'keyup'\n          document.dispatchEvent new KeyboardEvent eventname, { key, }\n        key_div = µ.DOM.select \".lamp[name=#{key}]\"\n        if state then µ.DOM.add_class     key_div, 'push'\n        else          µ.DOM.remove_class  key_div, 'push'\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  update_button = ( button, keyname, behavior, state ) =>\n    if state\n      # button.innerHTML = \"#{keyname} #{behavior}\"\n      µ.DOM.add_class     button, behavior\n    else\n      # button.innerHTML = \"#{keyname} <strike>#{behavior}</strike>\"\n      µ.DOM.remove_class  button, behavior\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  setup()\n  demo_toggling_etc()\n  use_event_names()\n  watch_modifiers()\n\n  #.........................................................................................................\n  return null\n\n"
  ]
}