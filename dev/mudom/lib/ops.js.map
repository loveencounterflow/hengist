{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/ops.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nglobalThis.µ              = require 'mudom'\nCND                       = require 'cnd'\nINTERTYPE                 = require 'intertype'\nIntermatic                = require 'intermatic'\nlog                       = console.log\ndebug                     = console.debug\nrpr                       = CND.rpr\nafter                     = ( dts, f ) -> setTimeout f, dts * 1000\nsleep                     = ( dts ) -> new Promise ( done ) -> after dts, done\n\n#-----------------------------------------------------------------------------------------------------------\nµ.DOM.ready ->\n\n  #---------------------------------------------------------------------------------------------------------\n  _keys_from_button = ( button ) ->\n    switch µ.DOM.get button, 'latching'\n      when 'toggle' then  return  [ 'up', 'down', 'toggle', ]\n      when 'latch'  then  return  [ 'up', 'down', 'latch', ]\n      when 'both'   then  return  [ 'up', 'down', 'toggle', 'latch', ]\n      when 'tlatch' then  return  [ 'up', 'down', 'tlatch', ]\n    return                        [ 'up', 'down', ]\n\n  #---------------------------------------------------------------------------------------------------------\n  update_button = ( button, name, state ) =>\n    text = \"#{name} \"\n    for key in _keys_from_button button\n      continue unless state[ key ] ? false\n      text += \"#{key} \"\n    # log '^4443^', ( µ.DOM.get button, 'id' ), name, state\n    classes           = \"btn #{text}\"\n    button.innerHTML  = text\n    µ.DOM.set button, 'class', classes\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  keynames  = null\n  do =>\n    keynames  = ( µ.DOM.get button, 'name' for button in µ.DOM.select_all '.btn' )\n    keynames  = [ ( new Set keynames )..., ]\n  #.........................................................................................................\n  do =>\n    #.......................................................................................................\n    for keyname in keynames\n      for behavior in [ 'up', 'down', 'toggle', 'latch', 'tlatch', ]\n        do ( keyname, behavior ) =>\n          #.................................................................................................\n          debug '^ops@4453^', { keyname, behavior, }\n          µ.KB._listen_to_key keyname, behavior, ( d ) =>\n            for button in µ.DOM.select_all \".btn[name=#{keyname}]\"\n              update_button button, keyname, d.state\n            return null\n          #.................................................................................................\n          return null\n    return null\n  #.........................................................................................................\n  return null\n\n"
  ]
}