{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/ops.coffee"
  ],
  "names": [],
  "mappings": "AACA;AAAA,MAAA,GAAA,EAAA,SAAA,EAAA,UAAA,EAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA;;EAAA,UAAU,CAAC,CAAX,GAA4B,OAAA,CAAQ,OAAR;;EAC5B,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,SAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,UAAA,GAA4B,OAAA,CAAQ,YAAR;;EAC5B,GAAA,GAA4B,OAAO,CAAC;;EACpC,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B,QAAA,CAAE,GAAF,EAAO,CAAP,CAAA;WAAc,UAAA,CAAW,CAAX,EAAc,GAAA,GAAM,IAApB;EAAd;;EAC5B,KAAA,GAA4B,QAAA,CAAE,GAAF,CAAA;WAAW,IAAI,OAAJ,CAAY,QAAA,CAAE,IAAF,CAAA;aAAY,KAAA,CAAM,GAAN,EAAW,IAAX;IAAZ,CAAZ;EAAX;;EAG5B,GAAA,CAAI,CAAE,UAAF,CAAJ,EAVA;;;;;EAcA,GAAA,CAAI,KAAK,CAAC,IAAN,CAAW,MAAX,CAAJ,EAdA;;;;;;;;;;;;;;;;;;;;;;;;EAsCA,CAAC,CAAC,GAAG,CAAC,KAAN,CAAY,QAAA,CAAA,CAAA;AACZ,QAAA,MAAA,EAAA,CAAA,EAAA,GAAA,EAAA;AAAE;IAAA,KAAA,qCAAA;;MACK,CAAA,QAAA,CAAE,MAAF,CAAA;AACP,YAAA;QAAM,OAAA,GAAU,CAAC,CAAC,GAAG,CAAC,GAAN,CAAU,MAAV,EAAkB,MAAlB,EAAhB;;QAEM,CAAC,CAAC,EAAE,CAAC,cAAL,CAAoB,OAApB,EAA6B,MAA7B,EAAqC,QAAA,CAAE,CAAF,CAAA;iBACnC,aAAA,CAAc,MAAd,EAAsB,OAAtB,EAA+B,CAAC,CAAC,KAAjC;QADmC,CAArC,EAFN;;QAKM,CAAC,CAAC,EAAE,CAAC,cAAL,CAAoB,OAApB,EAA6B,IAA7B,EAAmC,QAAA,CAAE,CAAF,CAAA;iBACjC,aAAA,CAAc,MAAd,EAAsB,OAAtB,EAA+B,CAAC,CAAC,KAAjC;QADiC,CAAnC,EALN;;eAQM,CAAC,CAAC,EAAE,CAAC,cAAL,CAAoB,OAApB,EAA6B,QAA7B,EAAuC,QAAA,CAAE,CAAF,CAAA;iBACrC,aAAA,CAAc,MAAd,EAAsB,OAAtB,EAA+B,CAAC,CAAC,KAAjC;QADqC,CAAvC;MATC,CAAA,EAAE;IADP;IAYA,GAAA,CAAI,SAAJ,EAAe,CAAC,CAAC,EAAE,CAAC,SAApB;AACA,WAAO;EAdG,CAAZ,EAtCA;;;EAuDA,aAAA,GAAgB,CAAE,MAAF,EAAU,IAAV,EAAgB,KAAhB,CAAA,GAAA;AAChB,QAAA,OAAA,EAAA,CAAA,EAAA,IAAA,EAAA;IAAE,IAAA,GAAU,CAAA,CAAA,CAAG,IAAH,EAAA;IACV,IAAA,IAAU;;AAAE;MAAA,KAAA,UAAA;;YAAyB;uBAAzB;;MAAA,CAAA;;QAAF,CAA8B,CAAC,IAA/B,CAAoC,GAApC;IACV,OAAA,GAAU,CAAA,IAAA,CAAA,CAAO,IAAP,CAAA;IACV,CAAC,CAAC,GAAG,CAAC,GAAN,CAAU,MAAV,EAAkB,OAAlB,EAA2B,OAA3B;IACA,MAAM,CAAC,SAAP,GAAmB;AACnB,WAAO;EANO;;EAvDhB;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\nglobalThis.µ              = require 'mudom'\nCND                       = require 'cnd'\nINTERTYPE                 = require 'intertype'\nIntermatic                = require 'intermatic'\nlog                       = console.log;\nrpr                       = CND.rpr\nafter                     = ( dts, f ) -> setTimeout f, dts * 1000\nsleep                     = ( dts ) -> new Promise ( done ) -> after dts, done\n\n\nlog { Intermatic, }\n# log { INTERTYPE, }\n# log new INTERTYPE.Intertype()\n# log CND.rpr( Array.from( 'abcd' ) )\nlog Array.from 'abcd'\n# ### NOTE `require` with local file *must* use file extension\n###\nµ.KB.XXXXXXXXXXXX_foobar()\nµ.DOM.on document, 'µ_kb_capslock_changed', ( event ) =>\n  log '^33334^', \"µ_kb_capslock_changed\", event.detail\n  return null\n\nµ.DOM.on document, 'µ_kb_modifier_changed', ( event ) =>\n  log '^33334^', \"µ_kb_modifier_changed\", event.detail\n  for key, value of event.detail\n    continue if key.startsWith '_'\n    selector  = \"[name=#{key}]\"\n    btn       = µ.DOM.select selector, null\n    continue unless btn?\n    log '^344^', key, rpr value, selector\n    switch value\n      when true then  µ.DOM.swap_class btn, 'false', 'true'\n      when false then µ.DOM.swap_class btn, 'true',  'false'\n      else µ.DOM.insert_as_last btn, rpr value\n  return null\n###\n\n#-----------------------------------------------------------------------------------------------------------\nµ.DOM.ready ->\n  for button in µ.DOM.select_all '.btn'\n    do ( button ) ->\n      keyname = µ.DOM.get button, 'name'\n      #.....................................................................................................\n      µ.KB._listen_to_key keyname, 'down', ( d ) ->\n        update_button button, keyname, d.state\n      #.....................................................................................................\n      µ.KB._listen_to_key keyname, 'up', ( d ) ->\n        update_button button, keyname, d.state\n      #.....................................................................................................\n      µ.KB._listen_to_key keyname, 'double', ( d ) ->\n        update_button button, keyname, d.state\n  log '^44454^', µ.KB._registry\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nupdate_button = ( button, name, state ) =>\n  text    = \"#{name} \"\n  text   += ( k for k, v of state when v ).join ' '\n  classes = \"btn #{text}\"\n  µ.DOM.set button, 'class', classes\n  button.innerHTML = text\n  return null\n\n# µ.KB._listen_to_key 'Alt',      'down',   handler\n# µ.KB._listen_to_key 'ä',        'down',   handler\n# µ.KB._listen_to_key 'Shift',    'up',     handler\n# µ.KB._listen_to_key 'Shift',    'down',   handler\n# µ.KB._listen_to_key 'Shift',    'double', handler\n# µ.KB._listen_to_key 'Alt',      'double', handler\n# µ.KB._listen_to_key 'AltGraph', 'double', handler\n# # µ.KB._listen_to_key 'Alt', null,   ( d ) => log \"^22209^ 'Alt', null,   \", d\n# # µ.KB._listen_to_key null, 'down',  ( d ) => log \"^22209^ null, 'down',  \", d\n\n\n# µ.KB._listen_to_key null, null,    ( d ) => log \"^22209^ null, null,    \", d\n\n\n\n\n"
  ]
}