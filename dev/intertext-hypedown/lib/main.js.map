{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER/TESTS/BASICS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\nafter                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nshow_lexer_as_table = ( title, lexer ) ->\n  lexemes = []\n  for mode, entry of lexer.registry\n    for tid, lexeme of entry.lexemes\n      lexemes.push lexeme\n  H.tabulate title, lexemes\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nnew_token = ( ref, token, mode, tid, name, value, start, stop, x = null, lexeme = null ) ->\n  ### TAINT recreation of `Interlex::new_token()` ###\n  jump      = lexeme?.jump ? null\n  { start\n    stop  } = token\n  return new_datom \"^#{mode}\", { mode, tid, mk: \"#{mode}:#{tid}\", jump, name, value, start, stop, x, $: ref, }\n\n#-----------------------------------------------------------------------------------------------------------\n@lex_tags = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex, compose: c, } = require '../../../apps/intertext-lexer'\n  lexer = new Interlex()\n  #.........................................................................................................\n  do =>\n    ### NOTE arbitrarily forbidding question marks and not using fallback token to test for error tokens ###\n    mode    = 'plain'\n    lexer.add_lexeme { mode, tid: 'escchr',           pattern: ( /\\\\(?<chr>.)/u                             ), }\n    lexer.add_lexeme { mode, tid: 'text',             pattern: ( c.suffix '+', c.charSet.complement /[<`\\\\?]/u  ), }\n    lexer.add_lexeme { mode, tid: 'tag', jump: 'tag', pattern: ( /<(?<lslash>\\/?)/u                         ), }\n    lexer.add_lexeme { mode, tid: 'E_backticks',      pattern: ( /`+/                                       ), }\n    # lexer.add_lexeme mode, 'other',        /./u\n  #.........................................................................................................\n  do =>\n    mode    = 'tag'\n    lexer.add_lexeme { mode, tid: 'escchr',         pattern: ( /\\\\(?<chr>.)/u                           ), }\n    lexer.add_lexeme { mode, tid: 'end', jump: '^', pattern: ( />/u                                     ), }\n    lexer.add_lexeme { mode, tid: 'text',           pattern: ( c.suffix '+', c.charSet.complement /[>\\\\]/u  ), }\n    lexer.add_lexeme { mode, tid: 'other',          pattern: ( /./u                                     ), }\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'helo <bold>`world`</bold>', [ { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'helo ', start: 0, stop: 5, x: null, '$key': '^plain' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 5, stop: 6, x: { lslash: null }, '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'bold', start: 6, stop: 10, x: null, '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: '^', value: '>', start: 10, stop: 11, x: null, '$key': '^tag' }, { mode: 'plain', tid: 'E_backticks', mk: 'plain:E_backticks', jump: null, value: '`', start: 11, stop: 12, x: null, '$key': '^plain' }, { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'world', start: 12, stop: 17, x: null, '$key': '^plain' }, { mode: 'plain', tid: 'E_backticks', mk: 'plain:E_backticks', jump: null, value: '`', start: 17, stop: 18, x: null, '$key': '^plain' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '</', start: 18, stop: 20, x: { lslash: '/' }, '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'bold', start: 20, stop: 24, x: null, '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: '^', value: '>', start: 24, stop: 25, x: null, '$key': '^tag' }, { mode: 'plain', tid: '$eof', mk: 'plain:$eof', jump: null, value: '', start: 25, stop: 25, x: null, '$key': '^plain' } ], null ]\n    [ '<x v=\\\\> z=42>', [ { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 0, stop: 1, x: { lslash: null }, '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'x v=', start: 1, stop: 5, x: null, '$key': '^tag' }, { mode: 'tag', tid: 'escchr', mk: 'tag:escchr', jump: null, value: '\\\\>', start: 5, stop: 7, x: { chr: '>' }, '$key': '^tag' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: ' z=42', start: 7, stop: 12, x: null, '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: '^', value: '>', start: 12, stop: 13, x: null, '$key': '^tag' }, { mode: 'plain', tid: '$eof', mk: 'plain:$eof', jump: null, value: '', start: 13, stop: 13, x: null, '$key': '^plain' } ], null ]\n    [ '<x v=\\\\> z=42\\\\>', [ { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 0, stop: 1, x: { lslash: null }, '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'x v=', start: 1, stop: 5, x: null, '$key': '^tag' }, { mode: 'tag', tid: 'escchr', mk: 'tag:escchr', jump: null, value: '\\\\>', start: 5, stop: 7, x: { chr: '>' }, '$key': '^tag' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: ' z=42', start: 7, stop: 12, x: null, '$key': '^tag' }, { mode: 'tag', tid: 'escchr', mk: 'tag:escchr', jump: null, value: '\\\\>', start: 12, stop: 14, x: { chr: '>' }, '$key': '^tag' }, { mode: 'tag', tid: '$eof', mk: 'tag:$eof', jump: null, value: '', start: 14, stop: 14, x: null, '$key': '^tag' } ], null ]\n    [ 'a <b', [ { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'a ', start: 0, stop: 2, x: null, '$key': '^plain' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 2, stop: 3, x: { lslash: null }, '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'b', start: 3, stop: 4, x: null, '$key': '^tag' }, { mode: 'tag', tid: '$eof', mk: 'tag:$eof', jump: null, value: '', start: 4, stop: 4, x: null, '$key': '^tag' } ], null ]\n    [ 'what? error?', [ { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'what', start: 0, stop: 4, x: null, '$key': '^plain' }, { mode: 'plain', tid: '$error', mk: 'plain:$error', jump: null, value: '', start: 4, stop: 4, x: { code: 'nomatch' }, '$key': '^plain' } ], null ]\n    [ 'd <', [ { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'd ', start: 0, stop: 2, x: null, '$key': '^plain' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 2, stop: 3, x: { lslash: null }, '$key': '^plain' }, { mode: 'tag', tid: '$eof', mk: 'tag:$eof', jump: null, value: '', start: 3, stop: 3, x: null, '$key': '^tag' } ], null ]\n    [ '<c', [ { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 0, stop: 1, x: { lslash: null }, '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'c', start: 1, stop: 2, x: null, '$key': '^tag' }, { mode: 'tag', tid: '$eof', mk: 'tag:$eof', jump: null, value: '', start: 2, stop: 2, x: null, '$key': '^tag' } ], null ]\n    [ '<', [ { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 0, stop: 1, x: { lslash: null }, '$key': '^plain' }, { mode: 'tag', tid: '$eof', mk: 'tag:$eof', jump: null, value: '', start: 1, stop: 1, x: null, '$key': '^tag' } ], null ]\n    [ '', [ { mode: 'plain', tid: '$eof', mk: 'plain:$eof', jump: null, value: '', start: 0, stop: 0, x: null, '$key': '^plain' } ], null ]\n    [ 'helo \\\\<bold>`world`</bold>', [ { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'helo ', start: 0, stop: 5, x: null, '$key': '^plain' }, { mode: 'plain', tid: 'escchr', mk: 'plain:escchr', jump: null, value: '\\\\<', start: 5, stop: 7, x: { chr: '<' }, '$key': '^plain' }, { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'bold>', start: 7, stop: 12, x: null, '$key': '^plain' }, { mode: 'plain', tid: 'E_backticks', mk: 'plain:E_backticks', jump: null, value: '`', start: 12, stop: 13, x: null, '$key': '^plain' }, { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'world', start: 13, stop: 18, x: null, '$key': '^plain' }, { mode: 'plain', tid: 'E_backticks', mk: 'plain:E_backticks', jump: null, value: '`', start: 18, stop: 19, x: null, '$key': '^plain' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '</', start: 19, stop: 21, x: { lslash: '/' }, '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'bold', start: 21, stop: 25, x: null, '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: '^', value: '>', start: 25, stop: 26, x: null, '$key': '^tag' }, { mode: 'plain', tid: '$eof', mk: 'plain:$eof', jump: null, value: '', start: 26, stop: 26, x: null, '$key': '^plain' } ], null ]\n    [ '<b>helo \\\\<bold>`world`</bold></b>', [ { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 0, stop: 1, x: { lslash: null }, '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'b', start: 1, stop: 2, x: null, '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: '^', value: '>', start: 2, stop: 3, x: null, '$key': '^tag' }, { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'helo ', start: 3, stop: 8, x: null, '$key': '^plain' }, { mode: 'plain', tid: 'escchr', mk: 'plain:escchr', jump: null, value: '\\\\<', start: 8, stop: 10, x: { chr: '<' }, '$key': '^plain' }, { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'bold>', start: 10, stop: 15, x: null, '$key': '^plain' }, { mode: 'plain', tid: 'E_backticks', mk: 'plain:E_backticks', jump: null, value: '`', start: 15, stop: 16, x: null, '$key': '^plain' }, { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'world', start: 16, stop: 21, x: null, '$key': '^plain' }, { mode: 'plain', tid: 'E_backticks', mk: 'plain:E_backticks', jump: null, value: '`', start: 21, stop: 22, x: null, '$key': '^plain' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '</', start: 22, stop: 24, x: { lslash: '/' }, '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'bold', start: 24, stop: 28, x: null, '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: '^', value: '>', start: 28, stop: 29, x: null, '$key': '^tag' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '</', start: 29, stop: 31, x: { lslash: '/' }, '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'b', start: 31, stop: 32, x: null, '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: '^', value: '>', start: 32, stop: 33, x: null, '$key': '^tag' }, { mode: 'plain', tid: '$eof', mk: 'plain:$eof', jump: null, value: '', start: 33, stop: 33, x: null, '$key': '^plain' } ], null ]\n    [ '<i><b></b></i>', [ { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 0, stop: 1, x: { lslash: null }, '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'i', start: 1, stop: 2, x: null, '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: '^', value: '>', start: 2, stop: 3, x: null, '$key': '^tag' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 3, stop: 4, x: { lslash: null }, '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'b', start: 4, stop: 5, x: null, '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: '^', value: '>', start: 5, stop: 6, x: null, '$key': '^tag' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '</', start: 6, stop: 8, x: { lslash: '/' }, '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'b', start: 8, stop: 9, x: null, '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: '^', value: '>', start: 9, stop: 10, x: null, '$key': '^tag' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '</', start: 10, stop: 12, x: { lslash: '/' }, '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'i', start: 12, stop: 13, x: null, '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: '^', value: '>', start: 13, stop: 14, x: null, '$key': '^tag' }, { mode: 'plain', tid: '$eof', mk: 'plain:$eof', jump: null, value: '', start: 14, stop: 14, x: null, '$key': '^plain' } ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result = lexer.run probe\n      H.tabulate ( rpr probe ), result\n      resolve result\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_md_stars_markup = ( T, done ) ->\n  { Pipeline,         \\\n    $,\n    transforms,     } = require '../../../apps/moonriver'\n  { Interlex\n    compose  }        = require '../../../apps/intertext-lexer'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  new_toy_md_lexer = ( mode = 'plain' ) ->\n    lexer   = new Interlex { dotall: false, }\n    #.........................................................................................................\n    lexer.add_lexeme { mode, tid: 'escchr', pattern: /\\\\(?<chr>.)/u, }\n    lexer.add_lexeme { mode, tid: 'star1',  pattern: /(?<!\\*)\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode, tid: 'star2',  pattern: /(?<!\\*)\\*\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode, tid: 'star3',  pattern: /(?<!\\*)\\*\\*\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode, tid: 'other',  pattern: /[^*]+/u, }\n    #.........................................................................................................\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ \"*abc*\", \"<i>abc</i>\", ]\n    [ \"**def**\", \"<b>def</b>\", ]\n    [ \"***def***\", \"<b><i>def</i></b>\", ]\n    [ \"**x*def*x**\", \"<b>x<i>def</i>x</b>\", ]\n    [ \"*x**def**x*\", \"<i>x<b>def</b>x</i>\", ]\n    [ \"***abc*def**\", \"<b><i>abc</i>def</b>\", ]\n    [ \"***abc**def*\", \"<b><i>abc</i></b><i>def</i>\", ]\n    [ \"*x***def**\", \"<i>x</i><b>def</b>\", ]\n    [ \"**x***def*\", \"<b>x</b><i>def</i>\", ]\n    [ \"*\", \"<i>\", ]\n    [ \"**\", \"<b>\", ]\n    [ \"***\", \"<b><i>\", ]\n    ]\n  #.........................................................................................................\n  $parse_md_stars = ->\n    within =\n      one:    false\n      two:    false\n    start_of =\n      one:    null\n      two:    null\n    #.......................................................................................................\n    enter = ( mode, start ) ->\n      within[   mode ] = true\n      start_of[ mode ] = start\n      return null\n    enter.one = ( start ) -> enter 'one', start\n    enter.two = ( start ) -> enter 'two', start\n    #.......................................................................................................\n    exit = ( mode ) ->\n      within[   mode ] = false\n      start_of[ mode ] = null\n      return null\n    exit.one = -> exit 'one'\n    exit.two = -> exit 'two'\n    #.......................................................................................................\n    return ( d, send ) ->\n      switch d.tid\n        #...................................................................................................\n        when 'star1'\n          send stamp d\n          if within.one then  exit.one();         send new_token '^æ1^', d, 'html', 'tag', 'i', '</i>'\n          else                enter.one d.start;  send new_token '^æ2^', d, 'html', 'tag', 'i', '<i>'\n        #...................................................................................................\n        when 'star2'\n          send stamp d\n          if within.two\n            if within.one\n              if start_of.one > start_of.two\n                exit.one();         send new_token '^æ3^', d, 'html', 'tag', 'i', '</i>'\n                exit.two();         send new_token '^æ4^', d, 'html', 'tag', 'b', '</b>'\n                enter.one d.start;  send new_token '^æ5^', d, 'html', 'tag', 'i', '<i>'\n              else\n                exit.two();         send new_token '^æ6^', d, 'html', 'tag', 'b', '</b>'\n            else\n              exit.two();         send new_token '^æ7^', d, 'html', 'tag', 'b', '</b>'\n          else\n            enter.two d.start;  send new_token '^æ8^', d, 'html', 'tag', 'b', '<b>'\n        #...................................................................................................\n        when 'star3'\n          send stamp d\n          if within.one\n            if within.two\n              if start_of.one > start_of.two\n                exit.one();       send new_token '^æ9^', d, 'html', 'tag', 'i', '</i>'\n                exit.two();       send new_token '^æ10^', d, 'html', 'tag', 'b', '</b>'\n              else\n                exit.two();       send new_token '^æ11^', d, 'html', 'tag', 'b', '</b>'\n                exit.one();       send new_token '^æ12^', d, 'html', 'tag', 'i', '</i>'\n            else\n              exit.one();         send new_token '^æ13^', d, 'html', 'tag', 'i', '</i>'\n              enter.two d.start;  send new_token '^æ14^', d, 'html', 'tag', 'b', '<b>'\n          else\n            if within.two\n              exit.two();         send new_token '^æ15^', d, 'html', 'tag', 'b', '</b>'\n              enter.one d.start;  send new_token '^æ16^', d, 'html', 'tag', 'i', '<i>'\n            else\n              enter.two d.start;  send new_token '^æ17^', d, 'html', 'tag', 'b', '<b>'\n              enter.one d.start + 2;  send new_token '^æ18^', { start: d.start + 2, stop: d.stop, }, 'html', 'tag', 'i', '<i>'\n        #...................................................................................................\n        else send d\n      return null\n  #.........................................................................................................\n  md_lexer  = new_toy_md_lexer 'md'\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      #.....................................................................................................\n      p = new Pipeline()\n      p.push ( d, send ) ->\n        return send d unless d.tid is 'p'\n        send e for e from md_lexer.walk d.value\n      p.push $parse_md_stars()\n      #.....................................................................................................\n      p.send new_token '^æ19^', { start: 0, stop: probe.length, }, 'plain', 'p', null, probe\n      result      = p.run()\n      result_rpr  = ( d.value for d in result when not d.$stamped ).join ''\n      urge '^08-1^', ( Object.keys d ).sort() for d in result\n      H.tabulate \"#{probe} -> #{result_rpr} (#{matcher})\", result # unless result_rpr is matcher\n      #.....................................................................................................\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@markup_with_variable_length = ( T, done ) ->\n  { Pipeline,         \\\n    $,\n    transforms,     } = require '../../../apps/moonriver'\n  { Interlex\n    compose  }        = require '../../../apps/intertext-lexer'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #---------------------------------------------------------------------------------------------------------\n  add_backslash_escape = ( lexer, base_mode ) ->\n    lexer.add_lexeme { mode: base_mode,   tid: 'escchr',    jump: null,       pattern:  /\\\\(?<chr>.)/u,     }\n    return null\n  #---------------------------------------------------------------------------------------------------------\n  add_catchall = ( lexer, base_mode ) ->\n    lexer.add_lexeme { mode: base_mode,   tid: 'other',     jump: null,       pattern:  /[^*`\\\\]+/u,        }\n    return null\n  #---------------------------------------------------------------------------------------------------------\n  add_variable_codespans = ( lexer, base_mode, own_mode ) ->\n    backtick_count  = null\n    #.......................................................................................................\n    entry_handler = ({ token, match, lexer, }) ->\n      backtick_count = token.value.length\n      return own_mode\n    #.......................................................................................................\n    exit_handler = ({ token, match, lexer, }) ->\n      if token.value.length is backtick_count\n        backtick_count = null\n        return '^'\n      ### TAINT setting `token.mk` should not have to be done manually ###\n      token = lets token, ( token ) -> token.tid = 'text'; token.mk = \"#{token.mode}:text\"\n      return { token, }\n    #.......................................................................................................\n    lexer.add_lexeme { mode: base_mode, tid: 'codespan',  jump: entry_handler,  pattern:  /(?<!`)`+(?!`)/u,   }\n    lexer.add_lexeme { mode: own_mode,  tid: 'codespan',  jump: exit_handler,   pattern:  /(?<!`)`+(?!`)/u,   }\n    lexer.add_lexeme { mode: own_mode,  tid: 'text',      jump: null,           pattern:  /(?:\\\\`|[^`])+/u,   }\n    #.......................................................................................................\n    return null\n  #---------------------------------------------------------------------------------------------------------\n  add_star1 = ( lexer, base_mode ) ->\n    lexer.add_lexeme { mode: base_mode, tid: 'star1',     jump: null,       pattern:  /(?<!\\*)\\*(?!\\*)/u, }\n    return null\n  #=========================================================================================================\n  new_hypedown_lexer = ( mode = 'plain' ) ->\n    lexer = new Interlex { dotall: false, }\n    add_backslash_escape    lexer, 'base'\n    add_star1               lexer, 'base'\n    add_variable_codespans  lexer, 'base', 'codespan'\n    add_catchall            lexer, 'base'\n    return lexer\n  #=========================================================================================================\n  $parse_md_codespan = ( outer_mode, enter_tid, inner_mode, exit_tid ) ->\n    ### TAINT use CFG pattern ###\n    ### TAINT use API for `mode:key` IDs ###\n    enter_mk  = \"#{outer_mode}:#{enter_tid}\"\n    exit_mk   = \"#{inner_mode}:#{exit_tid}\"\n    return ( d, send ) ->\n      switch d.mk\n        when enter_mk\n          send stamp d\n          send new_token '^æ2^', d, 'html', 'tag', 'code', '<code>'\n        when exit_mk\n          send stamp d\n          send new_token '^æ1^', d, 'html', 'tag', 'code', '</code>'\n        else\n          send d\n      return null\n  #---------------------------------------------------------------------------------------------------------\n  $parse_md_star = ( star1_tid ) ->\n    #.........................................................................................................\n    within =\n      one:    false\n    start_of =\n      one:    null\n    #.........................................................................................................\n    enter = ( mode, start ) ->\n      within[   mode ] = true\n      start_of[ mode ] = start\n      return null\n    enter.one = ( start ) -> enter 'one', start\n    #.........................................................................................................\n    exit = ( mode ) ->\n      within[   mode ] = false\n      start_of[ mode ] = null\n      return null\n    exit.one = -> exit 'one'\n    #.........................................................................................................\n    return ( d, send ) ->\n      switch d.tid\n        #.....................................................................................................\n        when star1_tid\n          send stamp d\n          if within.one then  exit.one();         send new_token '^æ1^', d, 'html', 'tag', 'i', '</i>'\n          else                enter.one d.start;  send new_token '^æ2^', d, 'html', 'tag', 'i', '<i>'\n        #.....................................................................................................\n        else send d\n      return null\n  #=========================================================================================================\n  new_hypedown_parser = ->\n    lexer = new_hypedown_lexer 'md'\n    show_lexer_as_table \"toy MD lexer\", lexer\n    p     = new Pipeline()\n    p.push ( d, send ) ->\n      return send d unless d.tid is 'p'\n      send e for e from lexer.walk d.value\n    p.push $parse_md_star 'star1'\n    p.push $parse_md_codespan 'base', 'codespan', 'codespan', 'codespan'\n    p.lexer = lexer\n    return p\n  #=========================================================================================================\n  probes_and_matchers = [\n    [ \"*abc*\", \"<i>abc</i>\", ]\n    [ 'helo `world`!', 'helo <code>world</code>!', null ]\n    [ '*foo* `*bar*` baz', '<i>foo</i> <code>*bar*</code> baz', null ]\n    [ '*foo* ``*bar*`` baz', '<i>foo</i> <code>*bar*</code> baz', null ]\n    [ '*foo* ````*bar*```` baz', '<i>foo</i> <code>*bar*</code> baz', null ]\n    [ '*foo* ``*bar*``` baz', '<i>foo</i> <code>*bar*``` baz', null ]\n    [ '*foo* ```*bar*`` baz', '<i>foo</i> <code>*bar*`` baz', null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      p = new_hypedown_parser()\n      p.send new_token '^æ19^', { start: 0, stop: probe.length, }, 'plain', 'p', null, probe\n      result      = p.run()\n      result_rpr  = ( d.value for d in result when not d.$stamped ).join ''\n      # urge '^08-1^', ( Object.keys d ).sort() for d in result\n      H.tabulate \"#{probe} -> #{result_rpr} (#{matcher})\", result # unless result_rpr is matcher\n      #.....................................................................................................\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  test @markup_with_variable_length\n\n\n"
  ]
}