{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER/TESTS/BASICS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\nafter                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n{ Pipeline,         \\\n  $,\n  transforms, }           = require '../../../apps/moonriver'\n{ Interlex\n  Syntax\n  compose  }              = require '../../../apps/intertext-lexer'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nshow_lexer_as_table = ( title, lexer ) ->\n  lexemes = []\n  for mode, entry of lexer.registry\n    for tid, lexeme of entry.lexemes\n      lexemes.push lexeme\n  H.tabulate title, lexemes\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nnew_token = ( ref, token, mode, tid, name, value, start, stop, x = null, lexeme = null ) ->\n  ### TAINT recreation of `Interlex::new_token()` ###\n  jump      = lexeme?.jump ? null\n  { start\n    stop  } = token\n  return new_datom \"^#{mode}\", { mode, tid, mk: \"#{mode}:#{tid}\", jump, name, value, start, stop, x, $: ref, }\n\n\n\n#===========================================================================================================\nclass Standard_lexemes extends Syntax\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_backslash_escape:  { tid: 'escchr', jump: null, pattern: /\\\\(?<chr>.)/u, }\n  @lx_catchall:          { tid: 'other',  jump: null, pattern: /[^*`\\\\]+/u, }\n  @lx_foo: 'foo'\n  @lx_bar: /bar/\n  # @lxs_something: [ 'foo', /bar/, 'baz', ]\n\n\n#===========================================================================================================\nclass Markdown_lexemes extends Syntax\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT handle CFG format which in this case includes `codespan_mode` ###\n  constructor: ( cfg ) ->\n    super { codespan_mode: 'codespan', cfg..., }\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  @get_lxs_variable_codespan: ( cfg ) ->\n    backtick_count  = null\n    #.......................................................................................................\n    entry_handler = ({ token, match, lexer, }) =>\n      backtick_count = token.value.length\n      return @cfg.codespan_mode\n    #.......................................................................................................\n    exit_handler = ({ token, match, lexer, }) ->\n      if token.value.length is backtick_count\n        backtick_count = null\n        return '^'\n      ### TAINT setting `token.mk` should not have to be done manually ###\n      token = lets token, ( token ) -> token.tid = 'text'; token.mk = \"#{token.mode}:text\"\n      return { token, }\n    #.......................................................................................................\n    info '^3532^', @cfg\n    return [\n      { mode: @cfg.mode,          tid: 'codespan',  jump: entry_handler,  pattern:  /(?<!`)`+(?!`)/u,   }\n      { mode: @cfg.codespan_mode, tid: 'codespan',  jump: exit_handler,   pattern:  /(?<!`)`+(?!`)/u,   }\n      { mode: @cfg.codespan_mode, tid: 'text',      jump: null,           pattern:  /(?:\\\\`|[^`])+/u,   }\n      ]\n\n#-----------------------------------------------------------------------------------------------------------\nadd_star1 = ( lexer, base_mode ) ->\n  lexer.add_lexeme { mode: base_mode, tid: 'star1',     jump: null,       pattern:  /(?<!\\*)\\*(?!\\*)/u, }\n  return null\n\n\n#===========================================================================================================\nnew_hypedown_lexer = ( mode = 'plain' ) ->\n  lexer = new Interlex { dotall: false, }\n  standard_lexemes = new Standard_lexemes()\n  debug '^3534^', ( k for k of Standard_lexemes )\n  debug '^3534^', ( k for k of standard_lexemes )\n  process.exit 111\n  # debug '^99-2^', standard_lexemes.backslash_escape\n  # markdown_lexemes = new Markdown_lexemes()\n  # debug '^99-4^', markdown_lexemes.variable_codespan\n  # add_backslash_escape    lexer, 'base'\n  # add_star1               lexer, 'base'\n  # add_variable_codespans  lexer, 'base', 'codespan'\n  # add_catchall            lexer, 'base'\n  return lexer\n\n#===========================================================================================================\n$parse_md_codespan = ( outer_mode, enter_tid, inner_mode, exit_tid ) ->\n  ### TAINT use CFG pattern ###\n  ### TAINT use API for `mode:key` IDs ###\n  enter_mk  = \"#{outer_mode}:#{enter_tid}\"\n  exit_mk   = \"#{inner_mode}:#{exit_tid}\"\n  return ( d, send ) ->\n    switch d.mk\n      when enter_mk\n        send stamp d\n        send new_token '^æ2^', d, 'html', 'tag', 'code', '<code>'\n      when exit_mk\n        send stamp d\n        send new_token '^æ1^', d, 'html', 'tag', 'code', '</code>'\n      else\n        send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$parse_md_star = ( star1_tid ) ->\n  #.........................................................................................................\n  within =\n    one:    false\n  start_of =\n    one:    null\n  #.........................................................................................................\n  enter = ( mode, start ) ->\n    within[   mode ] = true\n    start_of[ mode ] = start\n    return null\n  enter.one = ( start ) -> enter 'one', start\n  #.........................................................................................................\n  exit = ( mode ) ->\n    within[   mode ] = false\n    start_of[ mode ] = null\n    return null\n  exit.one = -> exit 'one'\n  #.........................................................................................................\n  return ( d, send ) ->\n    switch d.tid\n      #.....................................................................................................\n      when star1_tid\n        send stamp d\n        if within.one then  exit.one();         send new_token '^æ1^', d, 'html', 'tag', 'i', '</i>'\n        else                enter.one d.start;  send new_token '^æ2^', d, 'html', 'tag', 'i', '<i>'\n      #.....................................................................................................\n      else send d\n    return null\n\n#=========================================================================================================\nnew_hypedown_parser = ->\n  lexer = new_hypedown_lexer 'md'\n  show_lexer_as_table \"toy MD lexer\", lexer\n  p     = new Pipeline()\n  p.push ( d, send ) ->\n    return send d unless d.tid is 'p'\n    send e for e from lexer.walk d.value\n  p.push $parse_md_star 'star1'\n  p.push $parse_md_codespan 'base', 'codespan', 'codespan', 'codespan'\n  p.lexer = lexer\n  return p\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  probes_and_matchers = [\n    [ \"*abc*\", \"<i>abc</i>\", ]\n    [ 'helo `world`!', 'helo <code>world</code>!', null ]\n    [ '*foo* `*bar*` baz', '<i>foo</i> <code>*bar*</code> baz', null ]\n    [ '*foo* ``*bar*`` baz', '<i>foo</i> <code>*bar*</code> baz', null ]\n    [ '*foo* ````*bar*```` baz', '<i>foo</i> <code>*bar*</code> baz', null ]\n    [ '*foo* ``*bar*``` baz', '<i>foo</i> <code>*bar*``` baz', null ]\n    [ '*foo* ```*bar*`` baz', '<i>foo</i> <code>*bar*`` baz', null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    p = new_hypedown_parser()\n    p.send new_token '^æ19^', { start: 0, stop: probe.length, }, 'plain', 'p', null, probe\n    result      = p.run()\n    result_rpr  = ( d.value for d in result when not d.$stamped ).join ''\n    # urge '^08-1^', ( Object.keys d ).sort() for d in result\n    H.tabulate \"#{probe} -> #{result_rpr} (#{matcher})\", result # unless result_rpr is matcher\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use upcoming implementation in `guy` ###\nwalk_lines = ( text, cfg ) ->\n  validate.text text\n  template      = { keep_newlines: true, }\n  cfg           = { template..., cfg..., }\n  pattern       = /.*?(\\n|$)/suy\n  last_position = text.length - 1\n  loop\n    break if pattern.lastIndex > last_position\n    break unless ( match = text.match pattern )? ### internal error ###\n    Y = match[ 0 ]\n    Y = Y[ ... Y.length - 1 ] unless cfg.keep_newlines\n    yield Y\n  R = walk_lines()\n  R.reset = -> pattern.lastIndex = 0\n  return R\n\n\n############################################################################################################\nif require.main is module then do =>\n  demo()\n\n\n"
  ]
}