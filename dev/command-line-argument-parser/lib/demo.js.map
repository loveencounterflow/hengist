{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/CL-PARSER'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# types                     = ( require 'intershop' ).types\n# { isa\n#   validate\n#   cast\n#   type_of }               = types.export()\n# CP                        = require 'child_process'\ndefer                     = setImmediate\nparse_argv                = require 'command-line-args'\n# cnd_parse                 = require 'cnd/parse-command-line'\nmisfit                    = Symbol 'misfit'\n\n\n#-----------------------------------------------------------------------------------------------------------\npluck = ( d, name, fallback = misfit ) ->\n  unless ( R = d[ name ] )?\n    return fallback unless fallback is misfit\n    throw new Error \"^cli@5477^ no such attribute: #{rpr name}\"\n  delete d[ name ]\n  return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# check_extraneous = ( d ) ->\n#   return if ( Object.keys d ).length is 0\n#   show_help_and_exit 111, \"unknown arguments: #{rpr d}\"\n\n#-----------------------------------------------------------------------------------------------------------\nget_cmd_literal = ( cmd, argv ) ->\n  return \"`#{cmd}`\" if ( parameters = CND.shellescape argv ).length is 0\n  return \"`#{cmd} #{parameters}`\"\n\n#-----------------------------------------------------------------------------------------------------------\nshow_help_for_command_and_exit = ( p, argv ) ->\n  if argv.length > 0\n    return show_help_and_exit 113, \"^cli@5478^ extraneous arguments #{rpr argv}\"\n  unless ( command = pluck p, 'command', null )?\n    return show_help_and_exit 0\n  switch command\n    when 'help'\n      ### TAINT use custom function to output help ###\n      echo CND.blue \"\"\"\\n`node #{__filename} help [command]`:\\nget help about `command`\\n\"\"\"\n      process.exit 0\n  show_help_and_exit 120, \"^cli@5887^ unknown help topic #{rpr command}\"\n\n#-----------------------------------------------------------------------------------------------------------\nshow_help_and_exit = ( code = 0, message = null ) ->\n  usage = \"\"\"\n    node demo.js [metaflags] <command> [flags] p...\n\n      metaflags:\n        --help      -h      show this help\n        --trace     -t      show CLI parsing trace\n        --cwd       -d      change to directory before running command\n\n      internal commands:\n        help [command]      help on commands\n\n      external commands:\n        psql                run SQL with psql\n        node                run JS with node\n        nodexh              run JS with node (enhanced stacktraces)\n  \"\"\"\n  usage   = '\\n' + ( CND.blue usage ) + '\\n'\n  usage  += '\\n' + ( CND.red message ) + '\\n' if message?\n  echo usage\n  process.exit code\n\n#-----------------------------------------------------------------------------------------------------------\n@cli = ( argv = null ) -> new Promise ( resolve, reject ) ->\n  #---------------------------------------------------------------------------------------------------------\n  q = { trace: false, help: false, testing: argv?, cmd: null, parameters: null, }\n  #---------------------------------------------------------------------------------------------------------\n  # Stage: Pre-Command\n  #.........................................................................................................\n  argv    = argv ? process.argv\n  d       = [\n    { name: 'help',   alias: 'h', type: Boolean, }\n    { name: 'trace',  alias: 't', type: Boolean, } ]\n  s       = { argv, stopAtFirstUnknown: true, }\n  p       = parse_argv d, s\n  if p.trace\n    whisper p\n  argv    = pluck p, '_unknown', []\n  q.help  = pluck p, 'help',  false\n  q.trace = pluck p, 'trace', false\n  #.........................................................................................................\n  if q.trace\n    urge \"Stage: Pre-Command      \", rpr q\n  #.........................................................................................................\n  return show_help_and_exit 0 if q.help\n  #---------------------------------------------------------------------------------------------------------\n  # Stage: Command\n  #.........................................................................................................\n  return show_help_and_exit 112, \"extraneous flag #{rpr flag}\" if ( flag = argv[ 0 ] )?.startsWith '-'\n  #.........................................................................................................\n  d     = { name: 'cmd', defaultOption: true, }\n  p     = parse_argv d, { argv, stopAtFirstUnknown: true, }\n  argv  = pluck p, '_unknown', []\n  if q.trace\n    whisper p\n    urge \"Stage: Command          \", 'cmd', p.cmd ? 'UNKNOWN'\n  #---------------------------------------------------------------------------------------------------------\n  # Stage: Internal Commands\n  #.........................................................................................................\n  # Internal commands must parse their specific flags and other arguments.\n  #.........................................................................................................\n  switch p.cmd\n    when 'help'\n      d     = { name: 'command', defaultOption: true, }\n      p     = parse_argv d, { argv, stopAtFirstUnknown: true, }\n      argv  = pluck p, '_unknown', []\n      if q.trace\n        whisper p\n        urge \"Stage: internal command `help`\", { p, argv, }\n      return show_help_for_command_and_exit p, argv\n  #---------------------------------------------------------------------------------------------------------\n  # Stage: External Commands\n  #.........................................................................................................\n  # External commands call a child process that is passed the remaing command line arguments, so those\n  # can be dealt with summarily.\n  #.........................................................................................................\n  cmd   = p.cmd\n  return show_help_and_exit 114, \"^cli@5479^ missing command\" unless cmd?\n  p     = parse_argv [], { argv, stopAtFirstUnknown: true, }\n  argv  = pluck p, '_unknown', []\n  #.........................................................................................................\n  switch cmd\n    #-------------------------------------------------------------------------------------------------------\n    when 'psql'\n      whisper argv\n      urge \"Stage: Command: running #{get_cmd_literal cmd, argv}\" if q.trace\n      return resolve()\n    #-------------------------------------------------------------------------------------------------------\n    when 'nodexh', 'node'\n      whisper argv\n      urge \"Stage: Command: running #{get_cmd_literal cmd, argv}\" if q.trace\n      return resolve()\n  #.........................................................................................................\n  return show_help_and_exit 115, \"^cli@5480^ Unknown command #{CND.reverse rpr p.cmd}\"\n\n\n############################################################################################################\nif module is require.main then do =>\n  debug await @cli()\n  # debug await @cli [ '-t', null, '-t', ]\n\n"
  ]
}