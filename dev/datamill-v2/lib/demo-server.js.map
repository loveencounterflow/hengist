{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-server.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DATAMILL/DEMO/SERVER'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ lets\n  freeze  }               = require '../../../apps/letsfreezethat'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype()\n{ isa\n  type_of }               = types\n{ DBay }                  = require '../../../apps/dbay'\n{ SQL }                   = DBay\nH                         = require '../../../lib/helpers'\nbr                        = -> echo '—————————————————————————————————————————————'\n\n\n\n\n\n#===========================================================================================================\nclass Demo\n\n  #---------------------------------------------------------------------------------------------------------\n  datamill_server: ->\n    { Datamill_server } = require '../../../apps/datamill-v2/lib/server'\n    # { db }              = @_get_db()\n    { db }              = @create_datamill_pipeline()\n    server              = new Datamill_server { db, }\n    await server.start()\n    return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _get_db: ->\n  #   db      = new DBay()\n  #   db SQL\"\"\"create table documents (\n  #     n1_lnr      integer not null,\n  #     n2_version  integer not null,\n  #     n3_part     integer not null,\n  #     line  text    not null,\n  #     primary key ( n1_lnr, n2_version, n3_part ) );\"\"\"\n  #   #.......................................................................................................\n  #   write_data  = db.prepare_insert { into: 'documents', on_conflict: { update: true, }, }\n  #   read_data   = db.prepare SQL\"\"\"select * from documents order by n1_lnr, n3_part;\"\"\"\n  #   db write_data, { n1_lnr: 1, n3_part: 1, n2_version: 1, line: \"helo world\", }\n  #   return { db, read_data, write_data, }\n\n  #---------------------------------------------------------------------------------------------------------\n  create_datamill_pipeline: ->\n    { DBay }                  = require '../../../apps/dbay'\n    { SQL  }                  = DBay\n    { Pipeline }              = require '../../../apps/moonriver'\n    { HDML }                  = require '../../../apps/hdml'\n    #.......................................................................................................\n    show = ( db ) -> H.tabulate \"texts\", db SQL\"\"\"select * from texts order by n1_lnr, n3_part;\"\"\"\n    #.......................................................................................................\n    prepare = ( db ) ->\n      db = new DBay()\n      # if ( db.all_rows SQL\"select name from sqlite_schema where name = 'texts';\" ).length is 0\n      db SQL\"\"\"create table texts (\n        n1_lnr      integer not null,\n        n2_version  integer not null,\n        n3_part     integer not null,\n        line  text    not null,\n        primary key ( n1_lnr, n2_version, n3_part ) );\"\"\"\n      #.....................................................................................................\n      write_data  = db.prepare_insert { into: 'texts', on_conflict: { update: true, }, }\n      read_data   = db.prepare SQL\"\"\"select * from texts order by n1_lnr, n3_part;\"\"\"\n      db write_data, { n1_lnr: 1, n3_part: 1, n2_version: 1, line: \"helo world\", }\n      return { db, read_data, write_data, }\n    #.......................................................................................................\n    $initialize = ->\n      p               = new Pipeline()\n      p.push _show    = ( d ) -> whisper '^34-1^', d\n      p.push _freeze  = ( d ) -> freeze d\n      return p\n    #.......................................................................................................\n    $process = ->\n      p               = new Pipeline()\n      p.push foobar   = ( d, send ) -> send lets d, ( d ) -> d.line = \"*#{d.line}*\"\n      p.push foobar   = ( d, send ) -> send lets d, ( d ) ->\n        d.line = HDML.pair 'div.foo', HDML.text d.line\n        d.n2_version++\n      p.push _show    = ( d ) -> urge '^34-2^', d\n      return p\n    #.......................................................................................................\n    $my_datamill = ( db, read_data, write_data ) ->\n      p = new Pipeline()\n      p.push source = -> yield from db read_data\n      p.push $initialize()\n      p.push $process()\n      p.push sink = ( d ) -> db write_data, d\n      return p\n    #.......................................................................................................\n    { db\n      read_data\n      write_data }  = prepare()\n    show db\n    p = $my_datamill db, read_data, write_data\n    info '^34-3^', p\n    p.run()\n    #.......................................................................................................\n    show db\n    return { db, }\n\n\n#===========================================================================================================\nDEMO = new Demo()\n\n\n############################################################################################################\nif module is require.main then do =>\n  await DEMO.datamill_server()\n  # DEMO.create_datamill_pipeline()\n\n\n\n\n"
  ]
}