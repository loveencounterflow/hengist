{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-server.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require '../../../apps/guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DATAMILL/DEMO/SERVER'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ lets\n  freeze  }               = require '../../../apps/letsfreezethat'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype()\n{ isa\n  type_of }               = types\n{ SQL }                   = require '../../../apps/dbay'\n{ Document }              = require '../../../apps/datamill-v2/lib/document'\nH                         = require '../../../lib/helpers'\nbr                        = -> echo '—————————————————————————————————————————————'\nPATH                      = require 'node:path'\nFS                        = require 'node:fs'\n\n\n#-----------------------------------------------------------------------------------------------------------\ncreate_document = ( T, done ) ->\n  { rm, path: home_parent, } = GUY.temp.create_directory { prefix: 'dmdoc-', }\n  warn \"created #{home_parent}\"\n  GUY.process.on_exit -> warn \"removing #{home_parent}\"; rm()\n  #.........................................................................................................\n  home      = PATH.resolve home_parent, 'dmd'\n  FS.mkdirSync home\n  doc       = new Document { home, }\n  files     = [\n    { doc_file_id: 'f1', doc_file_path: 'datamill/demo1.mkts.md',                   }\n    { doc_file_id: 'sp', doc_file_path: 'short-proposal.mkts.md',                   }\n    { doc_file_id: '3p', doc_file_path: 'datamill/three-paragraphs.txt',            }\n    { doc_file_id: '3n', doc_file_path: 'datamill/file-with-3-lines-no-eofnl.txt',  }\n    { doc_file_id: '1n', doc_file_path: 'datamill/file-with-single-nl.txt',         } ]\n  for { doc_file_id, doc_file_path, } in files\n    source_path   = PATH.resolve __dirname, '../../../assets/', doc_file_path\n    doc_file_path = PATH.basename doc_file_path\n    target_path   = PATH.resolve home, doc_file_path\n    FS.cpSync source_path, target_path\n    file          = doc.add_file { doc_file_id, doc_file_path, }\n  # H.tabulate \"files\", doc.db SQL\"select * from doc_files;\"\n  # H.tabulate \"lines\", doc.db SQL\"select * from doc_lines;\"\n  #.........................................................................................................\n  read_data       = doc.db.prepare SQL\"\"\"select * from doc_lines order by 1, 2;\"\"\"\n  ### NOTE writing postponed ###\n  # write_data      = doc.db.alt.prepare_insert { into: 'doc_lines', on_conflict: { update: true, }, }\n  write_data      = null\n  return { doc, read_data, write_data, }\n\n\n#===========================================================================================================\nclass Demo\n\n  #---------------------------------------------------------------------------------------------------------\n  datamill_server: ->\n    { Datamill_server } = require '../../../apps/datamill-v2/lib/server'\n    { doc }             = @create_datamill_pipeline()\n    server              = new Datamill_server { doc, }\n    await server.start()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  create_datamill_pipeline: ->\n    { Pipeline }              = require '../../../apps/moonriver'\n    { HDML }                  = require '../../../apps/hdml'\n    #.......................................................................................................\n    show = ( doc ) -> H.tabulate \"doc_lines\", doc.db SQL\"\"\"select * from doc_lines order by 1, 2;\"\"\"\n    #.......................................................................................................\n    $initialize = ->\n      p               = new Pipeline()\n      # p.push _show    = ( d ) -> whisper '^34-1^', d\n      p.push _freeze  = ( d ) -> freeze d\n      return p\n    #.......................................................................................................\n    $process = ->\n      p               = new Pipeline()\n      p.push foobar   = ( d, send ) -> send lets d, ( d ) -> d.line = \"*#{d.line}*\"\n      p.push foobar   = ( d, send ) -> send lets d, ( d ) ->\n        d.line = HDML.pair 'div.foo', HDML.text d.line\n        d.n2_version++\n      # p.push _show    = ( d ) -> urge '^34-2^', d\n      return p\n    #.......................................................................................................\n    $my_datamill = ( doc, read_data, write_data ) ->\n      p = new Pipeline()\n      p.push source = -> yield from doc.db read_data\n      p.push $initialize()\n      p.push $process()\n      # p.push sink = ( d ) -> doc.db write_data, d\n      return p\n    #.......................................................................................................\n    { doc\n      read_data\n      write_data }  = create_document()\n    p = $my_datamill doc, read_data, write_data\n    info '^34-3^', p\n    p.run()\n    #.......................................................................................................\n    # show doc\n    return { doc, }\n\n\n#===========================================================================================================\nDEMO = new Demo()\n\n\n############################################################################################################\nif module is require.main then do =>\n  await DEMO.datamill_server()\n  # DEMO.create_datamill_pipeline()\n  # create_document()\n\n\n\n"
  ]
}