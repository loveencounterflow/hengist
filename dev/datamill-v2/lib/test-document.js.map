{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-document.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DATAMILL/TESTS/DOCUMENT'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate              } = types\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\nPATH                      = require 'node:path'\nFS                        = require 'node:fs'\n\n#-----------------------------------------------------------------------------------------------------------\n@doc_object_creation = ( T, done ) ->\n  { DBay }      = require '../../../apps/dbay'\n  { Document }  = require '../../../apps/datamill-v2/lib/document'\n  T?.eq ( type_of Document ), 'class'\n  #.........................................................................................................\n  GUY.temp.with_directory ({ path: home, }) ->\n    db  = new DBay()\n    doc = new Document { db, home, }\n    T?.ok doc.db is db\n    T?.ok doc.cfg.prefix is 'doc_'\n    debug '^5534^', doc\n  #.........................................................................................................\n  GUY.temp.with_directory ({ path: home, }) ->\n    doc = new Document { prefix: 'doc_', home, }\n    T?.eq ( type_of doc.db ), 'dbay'\n    T?.ok doc.cfg.prefix is 'doc_'\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@doc_document_creation = ( T, done ) ->\n  { DBay }      = require '../../../apps/dbay'\n  { Document }  = require '../../../apps/datamill-v2/lib/document'\n  #.........................................................................................................\n  GUY.temp.with_directory ({ path: home, }) ->\n    doc = new Document { home, }\n    T?.eq doc.get_doc_file_ids(), [ 'layout', ]\n    # T?.eq doc.get_doc_fads()[ ... 3 ], [\n    #   { doc_fad_id: 'External_file_abc', doc_fad_name: 'External_file_abc',   comment: 'abstract base class for external files' },\n    #   { doc_fad_id: 'File_adapter_abc',  doc_fad_name: 'File_adapter_abc',    comment: 'abstract base class for files' },\n    #   { doc_fad_id: 'xtxt',              doc_fad_name: 'External_text_file',  comment: 'adapter for external text files' } ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@doc_file_path_resolution = ( T, done ) ->\n  { DBay }      = require '../../../apps/dbay'\n  { Document }  = require '../../../apps/datamill-v2/lib/document'\n  #.........................................................................................................\n  GUY.temp.with_directory ({ path: home_parent, }) ->\n    home  = PATH.resolve home_parent, 'dmd'\n    FS.mkdirSync home\n    doc   = new Document { home, }\n    debug '^34-5^', { doc, }\n    debug '^34-5^', doc.cfg.home is home\n    T?.eq ( doc.get_doc_file_abspath '.'                ), \"#{home_parent}/dmd\"\n    T?.eq ( doc.get_doc_file_abspath 'foo.md'           ), \"#{home_parent}/dmd/foo.md\"\n    T?.eq ( doc.get_doc_file_abspath '/path/to/foo.md'  ), \"/path/to/foo.md\"\n    T?.eq ( doc.get_doc_file_abspath './path/to/foo.md' ), \"#{home_parent}/dmd/path/to/foo.md\"\n    T?.eq ( doc.get_doc_file_abspath 'path/to/foo.md'   ), \"#{home_parent}/dmd/path/to/foo.md\"\n    #.......................................................................................................\n    return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@doc_add_and_read_file = ( T, done ) ->\n  { SQL }       = require '../../../apps/dbay'\n  { Document }  = require '../../../apps/datamill-v2/lib/document'\n  #.........................................................................................................\n  GUY.temp.with_directory ({ path: home_parent, }) ->\n    home    = PATH.resolve home_parent, 'dmd'\n    FS.mkdirSync home\n    doc     = new Document { home, }\n    result  = []\n    debug '^34-5^', { doc, }\n    files   = [\n      { doc_file_id: 'ef', doc_file_path: 'datamill/empty-file.txt',                   }\n      { doc_file_id: '3n', doc_file_path: 'datamill/file-with-3-lines-no-eofnl.txt',   }\n      { doc_file_id: '3w', doc_file_path: 'datamill/file-with-3-lines-with-eofnl.txt', }\n      { doc_file_id: '1n', doc_file_path: 'datamill/file-with-single-nl.txt',          } ]\n    for { doc_file_id, doc_file_path, } in files\n      source_path   = PATH.resolve __dirname, '../../../assets/', doc_file_path\n      target_path   = PATH.resolve home, doc_file_path\n      FS.cpSync source_path, target_path\n      file          = doc.add_file { doc_file_id, doc_file_path, }\n      result.push file\n    H.tabulate \"files\", result\n    H.tabulate \"lines\", doc.db SQL\"select * from doc_raw_lines;\"\n    #.......................................................................................................\n    return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@doc_paragraphs = ( T, done ) ->\n  { SQL  }      = require '../../../apps/dbay'\n  { Document }  = require '../../../apps/datamill-v2/lib/document'\n  #.........................................................................................................\n  GUY.temp.with_directory ({ path: home_parent, }) ->\n    home    = PATH.resolve home_parent, 'dmd'\n    FS.mkdirSync home\n    doc     = new Document { home, }\n    result  = []\n    debug '^34-5^', { doc, }\n    files   = [\n      { doc_file_id: 'sp', doc_file_path: 'short-proposal.mkts.md',                   }\n      { doc_file_id: '3p', doc_file_path: 'datamill/three-paragraphs.txt',            }\n      { doc_file_id: '3n', doc_file_path: 'datamill/file-with-3-lines-no-eofnl.txt',  }\n      { doc_file_id: '1n', doc_file_path: 'datamill/file-with-single-nl.txt',         } ]\n    for { doc_file_id, doc_file_path, } in files\n      source_path   = PATH.resolve __dirname, '../../../assets/', doc_file_path\n      doc_file_path = PATH.basename doc_file_path\n      target_path   = PATH.resolve home, doc_file_path\n      FS.cpSync source_path, target_path\n      file          = doc.add_file { doc_file_id, doc_file_path, }\n      result.push file\n    H.tabulate \"files\", result\n    H.tabulate \"lines\", doc.db SQL\"select * from doc_raw_lines;\"\n    #.......................................................................................................\n    return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@doc_walk_concatenated_lines_of_files = ( T, done ) ->\n  { SQL  }      = require '../../../apps/dbay'\n  { Document }  = require '../../../apps/datamill-v2/lib/document'\n  #.........................................................................................................\n  GUY.temp.with_directory ({ path: home_parent, }) ->\n    home    = PATH.resolve home_parent, 'dmd'\n    FS.mkdirSync home\n    doc     = new Document { home, }\n    result  = []\n    debug '^34-5^', { doc, }\n    files   = [\n      { doc_file_id: '3p', doc_file_path: 'datamill/three-paragraphs.txt',            }\n      { doc_file_id: '3n', doc_file_path: 'datamill/file-with-3-lines-no-eofnl.txt',  }\n      { doc_file_id: '1n', doc_file_path: 'datamill/file-with-single-nl.txt',         } ]\n    for { doc_file_id, doc_file_path, } in files\n      source_path   = PATH.resolve __dirname, '../../../assets/', doc_file_path\n      doc_file_path = PATH.basename doc_file_path\n      target_path   = PATH.resolve home, doc_file_path\n      FS.cpSync source_path, target_path\n      file          = doc.add_file { doc_file_id, doc_file_path, }\n      result.push file\n    do ->\n      doc._delete_file 'layout'\n      matcher = doc.db.all_rows SQL\"\"\"\n        select\n            dense_rank() over w as doc_file_nr,\n            *\n          from doc_raw_lines\n          window w as ( order by doc_file_id )\n          order by doc_file_id, doc_line_nr;\"\"\"\n      H.tabulate \"matcher\", matcher\n      T?.eq [ doc.walk_raw_lines()..., ], matcher\n    do ->\n      matcher = doc.db.all_rows SQL\"\"\"\n        select 1 as doc_file_nr, doc_file_id, doc_line_nr, doc_par_nr, doc_line_txt from doc_raw_lines where doc_file_id = '1n'\n        union all\n        select 2 as doc_file_nr, doc_file_id, doc_line_nr, doc_par_nr, doc_line_txt from doc_raw_lines where doc_file_id = '3n'\n        union all\n        select 3 as doc_file_nr, doc_file_id, doc_line_nr, doc_par_nr, doc_line_txt from doc_raw_lines where doc_file_id = '3p'\n        order by doc_file_nr, doc_line_nr;\"\"\"\n      urge '^9856^', matcher\n      H.tabulate \"matcher\", matcher\n      H.tabulate \"select * from doc_raw_lines\", doc.db SQL\"select * from doc_raw_lines;\"\n      H.tabulate \"doc.walk_raw_lines '1n', '3n', '3p'\", doc.walk_raw_lines '1n', '3n', '3p'\n      T?.eq [ ( doc.walk_raw_lines '1n', '3n', '3p' )..., ], matcher\n    #.......................................................................................................\n    H.tabulate \"view doc_raw_lines\", doc.db SQL\"select * from doc_raw_lines;\"\n    return null\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @doc_object_creation()\n  # test @doc_object_creation\n  # test @doc_document_creation\n  # @doc_file_path_resolution()\n  # test @doc_file_path_resolution\n  # @doc_add_and_read_file()\n  # test @doc_add_and_read_file\n  # @doc_paragraphs()\n  # test @doc_paragraphs\n  @doc_walk_concatenated_lines_of_files()\n  test @doc_walk_concatenated_lines_of_files\n  # @doc_alternative_formulation()\n  # test @\n"
  ]
}