{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-document.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DATAMILL/TESTS/DOCUMENT'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate              } = types\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\nPATH                      = require 'node:path'\nFS                        = require 'node:fs'\n\n#-----------------------------------------------------------------------------------------------------------\n@doc_object_creation = ( T, done ) ->\n  { DBay }      = require '../../../apps/dbay'\n  { Document }  = require '../../../apps/datamill-v2/lib/document'\n  T?.eq ( type_of Document ), 'class'\n  #.........................................................................................................\n  GUY.temp.with_directory ({ path: home, }) ->\n    db  = new DBay()\n    doc = new Document { db, home, }\n    T?.ok doc.db is db\n  #.........................................................................................................\n  GUY.temp.with_directory ({ path: home, }) ->\n    doc = new Document { home, }\n    T?.eq ( type_of doc.db ), 'dbay'\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@doc_document_creation = ( T, done ) ->\n  { Document }  = require '../../../apps/datamill-v2/lib/document'\n  #.........................................................................................................\n  GUY.temp.with_directory ({ path: home, }) ->\n    doc = new Document { home, }\n    T?.eq doc.get_doc_src_ids(), [ 'layout', ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@doc_src_path_resolution = ( T, done ) ->\n  { Document }  = require '../../../apps/datamill-v2/lib/document'\n  #.........................................................................................................\n  GUY.temp.with_directory ({ path: home_parent, }) ->\n    home  = PATH.resolve home_parent, 'dmd'\n    FS.mkdirSync home\n    doc   = new Document { home, }\n    # debug '^34-5^', { doc, }\n    # debug '^34-5^', doc.cfg.home is home\n    T?.eq ( doc.get_doc_src_abspath '.'                ), \"#{home_parent}/dmd\"\n    T?.eq ( doc.get_doc_src_abspath 'foo.md'           ), \"#{home_parent}/dmd/foo.md\"\n    T?.eq ( doc.get_doc_src_abspath '/path/to/foo.md'  ), \"/path/to/foo.md\"\n    T?.eq ( doc.get_doc_src_abspath './path/to/foo.md' ), \"#{home_parent}/dmd/path/to/foo.md\"\n    T?.eq ( doc.get_doc_src_abspath 'path/to/foo.md'   ), \"#{home_parent}/dmd/path/to/foo.md\"\n    #.......................................................................................................\n    return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@doc_add_and_read_source = ( T, done ) ->\n  { SQL }       = require '../../../apps/dbay'\n  { Document }  = require '../../../apps/datamill-v2/lib/document'\n  #.........................................................................................................\n  GUY.temp.with_directory ({ path: home_parent, }) ->\n    home    = PATH.resolve home_parent, 'dmd'\n    FS.mkdirSync home\n    doc     = new Document { home, }\n    result  = []\n    # debug '^34-5^', { doc, }\n    sources   = [\n      { doc_src_id: 'ef', doc_src_path: 'datamill/empty-file.txt',                   }\n      { doc_src_id: '3n', doc_src_path: 'datamill/file-with-3-lines-no-eofnl.txt',   }\n      { doc_src_id: '3w', doc_src_path: 'datamill/file-with-3-lines-with-eofnl.txt', }\n      { doc_src_id: '1n', doc_src_path: 'datamill/file-with-single-nl.txt',          } ]\n    for { doc_src_id, doc_src_path, } in sources\n      source_path   = PATH.resolve __dirname, '../../../assets/', doc_src_path\n      target_path   = PATH.resolve home, doc_src_path\n      FS.cpSync source_path, target_path\n      source        = doc.add_source { doc_src_id, doc_src_path, }\n      result.push source\n    H.tabulate \"sources\", result\n    H.tabulate \"lines\", doc.db SQL\"select * from doc_raw_lines;\"\n    #.......................................................................................................\n    return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@doc_paragraphs = ( T, done ) ->\n  { SQL  }      = require '../../../apps/dbay'\n  { Document }  = require '../../../apps/datamill-v2/lib/document'\n  #.........................................................................................................\n  GUY.temp.with_directory ({ path: home_parent, }) ->\n    home    = PATH.resolve home_parent, 'dmd'\n    FS.mkdirSync home\n    doc     = new Document { home, }\n    result  = []\n    # debug '^34-5^', { doc, }\n    sources = [\n      { doc_src_id: 'sp', doc_src_path: 'short-proposal.mkts.md',                   }\n      { doc_src_id: '3p', doc_src_path: 'datamill/three-paragraphs.txt',            }\n      { doc_src_id: '3n', doc_src_path: 'datamill/file-with-3-lines-no-eofnl.txt',  }\n      { doc_src_id: '1n', doc_src_path: 'datamill/file-with-single-nl.txt',         } ]\n    for { doc_src_id, doc_src_path, } in sources\n      source_path   = PATH.resolve __dirname, '../../../assets/', doc_src_path\n      doc_src_path  = PATH.basename doc_src_path\n      target_path   = PATH.resolve home, doc_src_path\n      FS.cpSync source_path, target_path\n      source        = doc.add_source { doc_src_id, doc_src_path, }\n      result.push source\n    H.tabulate \"sources\", result\n    H.tabulate \"lines\", doc.db SQL\"select * from doc_raw_lines;\"\n    #.......................................................................................................\n    return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@doc_walk_concatenated_lines_of_files = ( T, done ) ->\n  { SQL  }      = require '../../../apps/dbay'\n  { Document }  = require '../../../apps/datamill-v2/lib/document'\n  #.........................................................................................................\n  GUY.temp.with_directory ({ path: home_parent, }) ->\n    home    = PATH.resolve home_parent, 'dmd'\n    FS.mkdirSync home\n    doc     = new Document { home, }\n    result  = []\n    # debug '^34-5^', { doc, }\n    sources   = [\n      { doc_src_id: '3p', doc_src_path: 'datamill/three-paragraphs.txt',            }\n      { doc_src_id: '3n', doc_src_path: 'datamill/file-with-3-lines-no-eofnl.txt',  }\n      { doc_src_id: '1n', doc_src_path: 'datamill/file-with-single-nl.txt',         } ]\n    for { doc_src_id, doc_src_path, } in sources\n      source_path   = PATH.resolve __dirname, '../../../assets/', doc_src_path\n      doc_src_path  = PATH.basename doc_src_path\n      target_path   = PATH.resolve home, doc_src_path\n      FS.cpSync source_path, target_path\n      source        = doc.add_source { doc_src_id, doc_src_path, }\n      result.push source\n    do ->\n      T?.eq [ ( doc.walk_raw_lines [] )..., ], []\n    do ->\n      matcher = doc.db.all_rows SQL\"\"\"\n        select 1 as doc_src_nr, * from doc_raw_lines where doc_src_id = '1n'\n        union all\n        select 2 as doc_src_nr, * from doc_raw_lines where doc_src_id = '3n'\n        union all\n        select 3 as doc_src_nr, * from doc_raw_lines where doc_src_id = '3p'\n        order by doc_src_nr, doc_line_nr;\"\"\"\n      # urge '^9856^', matcher\n      # H.tabulate \"matcher\", matcher\n      # H.tabulate \"select * from doc_raw_lines\", doc.db SQL\"select * from doc_raw_lines;\"\n      H.tabulate \"doc.walk_raw_lines '1n', '3n', '3p'\", doc.walk_raw_lines '1n', '3n', '3p'\n      T?.eq [ ( doc.walk_raw_lines '1n', '3n', '3p' )..., ], matcher\n    #.......................................................................................................\n    # H.tabulate \"view doc_raw_lines\", doc.db SQL\"select * from doc_raw_lines;\"\n    return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@doc_loc_matcher = ( T, done ) ->\n  { SQL  }                = require '../../../apps/dbay'\n  { get_document_types }  = require '../../../apps/datamill-v2/lib/types'\n  types                   = get_document_types()\n  pattern                 = types.registry.doc_document_cfg.default._loc_marker_re\n  #.........................................................................................................\n  probes_and_matchers = [\n    [   \"<dm:loc#prologue>\", [ { left_slash: '',  doc_loc_id: 'prologue', right_slash: ''  }, ], ]\n    [  \"<dm:loc#prologue/>\", [ { left_slash: '',  doc_loc_id: 'prologue', right_slash: '/' }, ], ]\n    [  \"</dm:loc#prologue>\", [ { left_slash: '/', doc_loc_id: 'prologue', right_slash: ''  }, ], ]\n    [ \"</dm:loc#prologue/>\", [ { left_slash: '/', doc_loc_id: 'prologue', right_slash: '/' }, ], ]\n    [ \"<dm:loc#L1/>xxx<dm:loc#L2/>\", [ { left_slash: '', doc_loc_id: 'L1', right_slash: '/' }, { left_slash: '', doc_loc_id: 'L2', right_slash: '/' } ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result  = [ ( probe.matchAll pattern )..., ]\n      result  = ( { m.groups..., } for m in result )\n      resolve result\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@doc_walk_locs = ( T, done ) ->\n  { SQL  }                = require '../../../apps/dbay'\n  { Document }            = require '../../../apps/datamill-v2/lib/document'\n  #.........................................................................................................\n  matcher = [\n    { doc_src_id: 'lt', doc_line_nr: 1, doc_loc_id: '*', doc_loc_kind: 'start', doc_loc_start: 0, doc_loc_stop: 0, doc_loc_mark: 0 },\n    { doc_src_id: 'lt', doc_line_nr: 18, doc_loc_id: '*', doc_loc_kind: 'stop', doc_loc_start: 0, doc_loc_stop: 0, doc_loc_mark: 0 }\n    { doc_src_id: 'lt', doc_line_nr: 2, doc_loc_id: 'prologue', doc_loc_kind: 'start', doc_loc_start: 0, doc_loc_stop: 17, doc_loc_mark: 17 },\n    { doc_src_id: 'lt', doc_line_nr: 10, doc_loc_id: 'prologue', doc_loc_kind: 'stop', doc_loc_start: 0, doc_loc_stop: 18, doc_loc_mark: 0 },\n    { doc_src_id: 'lt', doc_line_nr: 12, doc_loc_id: 'epilogue', doc_loc_kind: 'start', doc_loc_start: 0, doc_loc_stop: 17, doc_loc_mark: 17 },\n    { doc_src_id: 'lt', doc_line_nr: 12, doc_loc_id: 'epilogue', doc_loc_kind: 'stop', doc_loc_start: 56, doc_loc_stop: 74, doc_loc_mark: 56 },\n    { doc_src_id: 'lt', doc_line_nr: 14, doc_loc_id: 'empty', doc_loc_kind: 'start', doc_loc_start: 8, doc_loc_stop: 22, doc_loc_mark: 22 },\n    { doc_src_id: 'lt', doc_line_nr: 14, doc_loc_id: 'empty', doc_loc_kind: 'stop', doc_loc_start: 22, doc_loc_stop: 37, doc_loc_mark: 22 },\n    { doc_src_id: 'lt', doc_line_nr: 15, doc_loc_id: 'single', doc_loc_kind: 'start', doc_loc_start: 8, doc_loc_stop: 24, doc_loc_mark: 24 },\n    { doc_src_id: 'lt', doc_line_nr: 15, doc_loc_id: 'single', doc_loc_kind: 'stop', doc_loc_start: 8, doc_loc_stop: 24, doc_loc_mark: 24 }\n    { doc_src_id: 'lt', doc_line_nr: 17, doc_loc_id: 'one', doc_loc_kind: 'start', doc_loc_start: 3, doc_loc_stop: 15, doc_loc_mark: 15 },\n    { doc_src_id: 'lt', doc_line_nr: 17, doc_loc_id: 'one', doc_loc_kind: 'stop', doc_loc_start: 18, doc_loc_stop: 31, doc_loc_mark: 18 },\n    { doc_src_id: 'lt', doc_line_nr: 17, doc_loc_id: 'two', doc_loc_kind: 'start', doc_loc_start: 34, doc_loc_stop: 46, doc_loc_mark: 46 },\n    { doc_src_id: 'lt', doc_line_nr: 17, doc_loc_id: 'two', doc_loc_kind: 'stop', doc_loc_start: 49, doc_loc_stop: 62, doc_loc_mark: 49 },\n    { doc_src_id: 'lt', doc_line_nr: 17, doc_loc_id: 'three', doc_loc_kind: 'start', doc_loc_start: 65, doc_loc_stop: 79, doc_loc_mark: 79 },\n    { doc_src_id: 'lt', doc_line_nr: 17, doc_loc_id: 'three', doc_loc_kind: 'stop', doc_loc_start: 84, doc_loc_stop: 99, doc_loc_mark: 84 }\n    ]\n  #.........................................................................................................\n  GUY.temp.with_directory ({ path: home, }) ->\n    doc     = new Document { home, }\n    sources   = [\n      { doc_src_id: 'lt', doc_src_path: 'datamill/layout.dm.html', } ]\n    for { doc_src_id, doc_src_path, } in sources\n      doc_src_path = PATH.resolve __dirname, '../../../assets/', doc_src_path\n      source       = doc.add_source { doc_src_id, doc_src_path, }\n    do ->\n      result = [ ( doc._walk_locs_of_source source )..., ]\n      H.tabulate \"locations in `layout.dm.html`\", result\n      H.tabulate \"matcher\", matcher\n      T?.eq result, matcher\n      return null\n    do ->\n      matcher.sort ( a, b ) ->\n        return +1 if a.doc_line_nr   > b.doc_line_nr\n        return -1 if a.doc_line_nr   < b.doc_line_nr\n        return +1 if a.doc_loc_start > b.doc_loc_start\n        return -1 if a.doc_loc_start < b.doc_loc_start\n        return 0\n      result  = [ ( doc.db.all_rows SQL\"\"\"\n        select\n            *\n          from doc_locs\n          where doc_src_id = 'lt'\n          order by doc_line_nr, doc_loc_start;\"\"\" )..., ]\n      H.tabulate \"locations in `layout`\", result\n      T?.eq result, matcher\n      return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@___________doc_walk_lines_of_regions = ( T, done ) ->\n  { SQL  }                = require '../../../apps/dbay'\n  { Document }            = require '../../../apps/datamill-v2/lib/document'\n  #.........................................................................................................\n  GUY.temp.with_directory ({ path: home, }) ->\n    doc     = new Document { home, }\n    sources   = [\n      { doc_src_id: 'lt', doc_src_path: 'datamill/layout.dm.html', } ]\n    for { doc_src_id, doc_src_path, } in sources\n      doc_src_path = PATH.resolve __dirname, '../../../assets/', doc_src_path\n      source       = doc.add_source { doc_src_id, doc_src_path, }\n    for line in doc.walk_loc_lines 'lt#prologue'\n      debug '^56-1^', rpr line\n    # result  = [ ( doc.walk_xxx_lines source )..., ]\n    # H.tabulate \"locations in `layout`\", result\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @doc_object_creation()\n  # test @doc_object_creation\n  # test @doc_document_creation\n  # @doc_src_path_resolution()\n  # test @doc_src_path_resolution\n  # @doc_add_and_read_file()\n  # test @doc_add_and_read_file\n  # @doc_paragraphs()\n  # test @doc_paragraphs\n  # @doc_walk_locs()\n  # test @doc_walk_locs\n  # @doc_loc_matcher()\n  # test @doc_loc_matcher\n  # @doc_walk_concatenated_lines_of_files()\n  # test @doc_walk_concatenated_lines_of_files\n  # @doc_alternative_formulation()\n  # @___________doc_walk_lines_of_regions()\n  test @\n"
  ]
}