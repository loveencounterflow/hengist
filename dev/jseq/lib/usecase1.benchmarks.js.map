{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/usecase1.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JSEQ'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\n_IMPLEMENTATIONS          = require '../../../apps/jseq/lib/implementations'\nIMPLEMENTATIONS           = {}\n\ndo =>\n  for key, value of _IMPLEMENTATIONS\n    unless ( match = key.match /^(?<nick>[^:]+)/ )?\n      throw new Error \"^bm/jseq@245 unexpected key #{rpr key}\"\n    { nick, }               = match.groups\n    IMPLEMENTATIONS[ nick ] = value\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  { _deep_copy: copy, } = require '../../../apps/letsfreezethat'\n  return data_cache if data_cache?\n  datoms      = DATA.get_random_datoms cfg.set_count * 2\n  datom_pairs = []\n  #.........................................................................................................\n  for idx in [ 0 ... datoms.length ] by +2\n    d = datoms[ idx     ]\n    e = datoms[ idx + 1 ]\n    if Math.random() > 0.5\n      datom_pairs.push [ d, e, ]\n      datom_pairs.push [ d, ( copy d ), ]\n  #.........................................................................................................\n  data_cache  = {\n    datom_pairs }\n  data_cache  = ( require '../../../apps/letsfreezethat' ).freeze data_cache\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@_benchmark_by_name = ( cfg, nick ) -> new Promise ( resolve ) =>\n  sublibrary = IMPLEMENTATIONS[ nick ]\n  unless sublibrary?\n    throw new Error \"^bm/jseq@223 unknown sublibrary #{rpr sublibrary}\"\n  { eq, ne, } = sublibrary\n  # @types.validate.hengist_dataprv_cfg cfg\n  { datom_pairs, } = @get_data cfg\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    for [ d, e, ] in datom_pairs\n      is_equal = eq d, e\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@FDQ = ( cfg ) -> @_benchmark_by_name cfg, 'FDQ'\n@FDE = ( cfg ) -> @_benchmark_by_name cfg, 'FDE'\n@JKR = ( cfg ) -> @_benchmark_by_name cfg, 'JKR'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  bench       = BM.new_benchmarks()\n  cfg         = { set_count: 5, }\n  cfg         = { set_count: 1e4, }\n  cfg         = { set_count: 1e5, }\n  repetitions = 3\n  test_names  = [\n    'FDQ'\n    'FDE'\n    'JKR'\n    ]\n  global.gc() if global.gc?\n  for _ in [ 1 .. repetitions ]\n    data_cache = null\n    global.gc() if global.gc?\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n\n###\n\n ~/jzr/jseq  master !3  ~/jzr/nodexh/bin/nodexh ~/jzr/hengist/dev/jseq/lib/usecase1.benchmarks.js                                                         INT ✘  12s\n00:00 JSEQ  ▶  ------------------------------------------------------------------------------------------------------------\nJKR                                        0.766 s          99,812 items         130,373⏶Hz           7,670⏷nspc\nFDQ                                        0.212 s          99,812 items         471,069⏶Hz           2,123⏷nspc\nFDE                                        0.208 s          99,812 items         479,546⏶Hz           2,085⏷nspc\n00:05 JSEQ  ▶  ------------------------------------------------------------------------------------------------------------\nFDE                                        0.330 s         100,334 items         304,451⏶Hz           3,285⏷nspc\nJKR                                        0.744 s         100,334 items         134,934⏶Hz           7,411⏷nspc\nFDQ                                        0.214 s         100,334 items         469,278⏶Hz           2,131⏷nspc\n00:10 JSEQ  ▶  ------------------------------------------------------------------------------------------------------------\nJKR                                        0.833 s         100,168 items         120,311⏶Hz           8,312⏷nspc\nFDQ                                        0.202 s         100,168 items         495,247⏶Hz           2,019⏷nspc\nFDE                                        0.200 s         100,168 items         500,233⏶Hz           1,999⏷nspc\n00:14 HENGIST/BENCHMARKS  ▶  FDQ                                              478,531 Hz   100.0 % │████████████▌│\n00:14 HENGIST/BENCHMARKS  ▶  FDE                                              428,077 Hz    89.5 % │███████████▏ │\n00:14 HENGIST/BENCHMARKS  ▶  JKR                                              128,539 Hz    26.9 % │███▍         │\n\n\n###\n\n\n"
  ]
}