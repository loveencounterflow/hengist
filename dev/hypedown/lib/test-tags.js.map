{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-tags.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN/TESTS/TAGS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nH                         = require '../../../lib/helpers'\n# after                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n#-----------------------------------------------------------------------------------------------------------\nnew_tag_lexer = ->\n  { Interlex } = require '../../../apps/intertext-lexer'\n  lexer = new Interlex { linewise: true, catchall_concat: true, reserved_concat: true, }\n  # lexer.add_lexeme { mode, tid: 'eol',      pattern: ( /$/u  ), }\n  #.........................................................................................................\n  new_escchr_descriptor = ( mode ) ->\n    create = ( token ) ->\n      token.x = { chr: '\\n', } unless ( token.x?.chr )?\n      return token\n    return { mode, tid: 'escchr', pattern: /\\\\(?<chr>.|$)/u, reserved: '\\\\', create, }\n  #.........................................................................................................\n  new_nl_descriptor = ( mode ) ->\n    ### TAINT consider to force value by setting it in descriptor (needs interlex update) ###\n    create = ( token ) ->\n      token.value = '\\n'\n      return token\n    return { mode, tid: 'nl', pattern: /$/u, create, }\n  #.........................................................................................................\n  do =>\n    mode = 'plain'\n    lexer.add_lexeme new_escchr_descriptor  mode\n    lexer.add_lexeme new_nl_descriptor      mode\n    lexer.add_lexeme { mode,  tid: 'slash',     jump: null,       pattern: '/',     reserved: '/', }\n    lexer.add_lexeme { mode,  tid: 'ltbang',    jump: 'comment',  pattern: '<!--',  reserved: '<', }\n    lexer.add_lexeme { mode,  tid: 'lt',        jump: 'tag',      pattern: '<',     reserved: '<', }\n    lexer.add_lexeme { mode,  tid: 'ws',        jump: null,       pattern: /\\s+/u, }\n    lexer.add_catchall_lexeme { mode, tid: 'other', }\n    lexer.add_reserved_lexeme { mode, tid: 'forbidden', }\n  #.........................................................................................................\n  do =>\n    mode = 'tag'\n    lexer.add_lexeme new_escchr_descriptor  mode\n    lexer.add_lexeme new_nl_descriptor      mode\n    # lexer.add_lexeme { mode,  tid: 'tagtext',   jump: null,       pattern: ( /[^\\/>]+/u ), }\n    lexer.add_lexeme { mode,  tid: 'dq',        jump: 'tag:dq',   pattern: '\"',       reserved: '\"' }\n    lexer.add_lexeme { mode,  tid: 'sq',        jump: 'tag:sq',   pattern: \"'\",       reserved: \"'\" }\n    lexer.add_lexeme { mode,  tid: 'slashgt',   jump: '^',        pattern: '/>',      reserved: [ '>', '/', ] }\n    lexer.add_lexeme { mode,  tid: 'slash',     jump: '^',        pattern: '/',       reserved: '/', }\n    lexer.add_lexeme { mode,  tid: 'gt',        jump: '^',        pattern: '>',       reserved: '>', }\n    lexer.add_catchall_lexeme { mode, tid: 'text', }\n    lexer.add_reserved_lexeme { mode, tid: 'forbidden', }\n  #.........................................................................................................\n  do =>\n    mode = 'tag:dq'\n    lexer.add_lexeme new_escchr_descriptor  mode\n    lexer.add_lexeme new_nl_descriptor      mode\n    lexer.add_lexeme { mode,  tid: 'dq',        jump: '^',        pattern: '\"',       reserved: '\"', }\n    lexer.add_catchall_lexeme { mode, tid: 'text', }\n  #.........................................................................................................\n  do =>\n    mode = 'tag:sq'\n    lexer.add_lexeme new_escchr_descriptor  mode\n    lexer.add_lexeme new_nl_descriptor      mode\n    lexer.add_lexeme { mode,  tid: 'sq',        jump: '^',        pattern: \"'\",       reserved: \"'\", }\n    lexer.add_catchall_lexeme { mode, tid: 'text', }\n  #.........................................................................................................\n  do =>\n    mode = 'comment'\n    lexer.add_lexeme new_escchr_descriptor  mode\n    lexer.add_lexeme new_nl_descriptor      mode\n    lexer.add_lexeme { mode, tid: 'eoc',       jump: '^',         pattern:  '-->',    reserved: '--',  }\n    lexer.add_catchall_lexeme { mode, tid: 'text', }\n    lexer.add_reserved_lexeme { mode, tid: 'forbidden', }\n  return lexer\n\n#-----------------------------------------------------------------------------------------------------------\nnew_parser = ( lexer ) ->\n  { Pipeline\n    transforms  } = require '../../../apps/moonriver'\n  _HTMLISH        = ( require 'paragate/lib/htmlish.grammar' ).new_grammar { bare: true, }\n  htmlish_sym     = Symbol 'htmlish'\n  #.........................................................................................................\n  $tokenize     = ( parser ) ->\n    return tokenize = ( line, send ) ->\n      @types.validate.text line\n      send token for token from parser.lexer.walk line\n      return null\n  #.........................................................................................................\n  $_hd_token_from_paragate_token = ->\n    return _hd_token_from_paragate_token = ( d, send ) ->\n      return send d unless d[htmlish_sym]?\n      first = d.$collector.at  0\n      last  = d.$collector.at -1\n      # delete d.$collector; H.tabulate \"htmlish\", [ d, ]\n      #.....................................................................................................\n      #\n      # * otag      opening tag, `<a>`\n      # * ctag      closing tag, `</a>` or `</>`\n      #\n      # * ntag      opening tag of `<i/italic/`\n      # * nctag     closing slash of `<i/italic/`\n      #\n      # * stag      self-closing tag, `<br/>`\n      #\n      tag_types =\n        otag:       { open: true,  close: false, }\n        ctag:       { open: false, close: true,  }\n        ntag:       { open: true,  close: false, }\n        nctag:      { open: false, close: true,  }\n        stag:       { open: true,  close: true,  }\n      #.....................................................................................................\n      e     =\n        mode:   'tag'\n        tid:    d.type\n        mk:     \"tag:#{d.type}\"\n        jump:   null\n        value:  d.$source\n        ### TAINT must give first_lnr, last_lnr ###\n        lnr:    first.lnr\n        start:  first.start\n        stop:   last.stop\n        x:\n          atrs:   d.atrs\n          id:     d.id\n        source: null\n        $key:   '^tag'\n      send e\n    return null\n  #.........................................................................................................\n  $parse_htmlish_tag  = ->\n    collector   = []\n    within_tag  = false\n    sp          = new Pipeline()\n    sp.push transforms.$window { min: 0, max: +1, empty: null, }\n    sp.push parse_htmlish_tag = ( [ d, nxt, ], send ) ->\n      #.....................................................................................................\n      if within_tag\n        collector.push d\n        # debug '^parse_htmlish_tag@1^', d\n        if d.jump is 'plain' ### TAINT magic number ###\n          within_tag  = false\n          $source     = ( e.value for e from collector ).join ''\n          $collector  = [ collector..., ]\n          send stamp collector.shift() while collector.length > 0\n          htmlish     = _HTMLISH.parse $source\n          # H.tabulate '^78^', htmlish\n          # debug '^78^', rpr $source\n          # info '^78^', x for x in htmlish\n          unless htmlish.length is 1\n            ### TAINT use API to create token ###\n            # throw new Error \"^34345^ expected single token, got #{rpr htmlish}\"\n            return send { mode: 'tag', tid: '$error', }\n          [ htmlish ]           = GUY.lft.thaw htmlish\n          htmlish[htmlish_sym]  = true\n          htmlish.$collector    = $collector\n          htmlish.$source       = $source\n          send htmlish\n        return null\n      #.....................................................................................................\n      else\n        return send d unless nxt?.mk.startsWith 'tag:'\n        within_tag = true\n        collector.push d\n      #.....................................................................................................\n      return null\n    sp.push $_hd_token_from_paragate_token()\n    return sp\n  #.........................................................................................................\n  p             = new Pipeline()\n  p.lexer       = lexer\n  p.push $tokenize p\n  p.push $parse_htmlish_tag()\n  # p.push show = ( d ) -> urge '^parser@1^', d\n  # debug '^43^', p\n  return p\n\n#-----------------------------------------------------------------------------------------------------------\n@tags_1 = ( T, done ) ->\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'foo <!-- comment --> bar', [ { mk: 'plain:other', value: 'foo ' }, { mk: 'plain:ltbang', value: '<!--' }, { mk: 'comment:text', value: ' comment ' }, { mk: 'comment:eoc', value: '-->' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:other', value: 'bar' }, { mk: 'plain:nl', value: '\\n' } ], null ]\n    [ 'foo <!-- comment \\n --> bar', [ { mk: 'plain:other', value: 'foo ' }, { mk: 'plain:ltbang', value: '<!--' }, { mk: 'comment:text', value: ' comment' }, { mk: 'comment:nl', value: '\\n' }, { mk: 'comment:text', value: ' ' }, { mk: 'comment:eoc', value: '-->' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:other', value: 'bar' }, { mk: 'plain:nl', value: '\\n' } ], null ]\n    [ 'foo <!-- comment \\\\\\n --> bar', [ { mk: 'plain:other', value: 'foo ' }, { mk: 'plain:ltbang', value: '<!--' }, { mk: 'comment:text', value: ' comment ' }, { mk: 'comment:escchr', value: '\\\\', x: { chr: '\\n' } }, { mk: 'comment:nl', value: '\\n' }, { mk: 'comment:text', value: ' ' }, { mk: 'comment:eoc', value: '-->' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:other', value: 'bar' }, { mk: 'plain:nl', value: '\\n' } ], null ]\n    [ 'abc<div#c1 foo=bar>xyz', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=bar' }, { mk: 'tag:gt', value: '>' }, { mk: 'plain:other', value: 'xyz' }, { mk: 'plain:nl', value: '\\n' } ], null ]\n    [ 'abc<div#c1 foo=bar/>xyz', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=bar' }, { mk: 'tag:slashgt', value: '/>' }, { mk: 'plain:other', value: 'xyz' }, { mk: 'plain:nl', value: '\\n' } ], null ]\n    [ 'abc<div#c1 foo=bar/xyz/', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=bar' }, { mk: 'tag:slash', value: '/' }, { mk: 'plain:other', value: 'xyz' }, { mk: 'plain:slash', value: '/' }, { mk: 'plain:nl', value: '\\n' } ], null ]\n    [ 'abc<div#c1 foo=\"bar>xyz\"/', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:dq', value: '\"' }, { mk: 'tag:dq:text', value: 'bar>xyz' }, { mk: 'tag:dq:dq', value: '\"' }, { mk: 'tag:slash', value: '/' }, { mk: 'plain:nl', value: '\\n' } ], null ]\n    [ 'abc<div#c1 foo=\"bar/>xyz\"/', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:dq', value: '\"' }, { mk: 'tag:dq:text', value: 'bar/>xyz' }, { mk: 'tag:dq:dq', value: '\"' }, { mk: 'tag:slash', value: '/' }, { mk: 'plain:nl', value: '\\n' } ], null ]\n    [ 'abc<div#c1 foo=\"bar/xyz\"/', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:dq', value: '\"' }, { mk: 'tag:dq:text', value: 'bar/xyz' }, { mk: 'tag:dq:dq', value: '\"' }, { mk: 'tag:slash', value: '/' }, { mk: 'plain:nl', value: '\\n' } ], null ]\n    [ \"abc<div#c1 foo='bar>xyz'/\", [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:sq', value: \"'\" }, { mk: 'tag:sq:text', value: 'bar>xyz' }, { mk: 'tag:sq:sq', value: \"'\" }, { mk: 'tag:slash', value: '/' }, { mk: 'plain:nl', value: '\\n' } ], null ]\n    [ \"abc<div#c1 foo='bar/>xyz'/\", [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:sq', value: \"'\" }, { mk: 'tag:sq:text', value: 'bar/>xyz' }, { mk: 'tag:sq:sq', value: \"'\" }, { mk: 'tag:slash', value: '/' }, { mk: 'plain:nl', value: '\\n' } ], null ]\n    [ \"abc<div#c1 foo='bar/xyz'/\", [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:sq', value: \"'\" }, { mk: 'tag:sq:text', value: 'bar/xyz' }, { mk: 'tag:sq:sq', value: \"'\" }, { mk: 'tag:slash', value: '/' }, { mk: 'plain:nl', value: '\\n' } ], null ]\n    [ \"abc<div#c1 foo='bar/xyz'/>\", [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:sq', value: \"'\" }, { mk: 'tag:sq:text', value: 'bar/xyz' }, { mk: 'tag:sq:sq', value: \"'\" }, { mk: 'tag:slashgt', value: '/>' }, { mk: 'plain:nl', value: '\\n' } ], null ]\n    [ 'abc<i/>xyz/>', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'i' }, { mk: 'tag:slashgt', value: '/>' }, { mk: 'plain:other', value: 'xyz' }, { mk: 'plain:slash', value: '/' }, { mk: 'plain:other', value: '>' }, { mk: 'plain:nl', value: '\\n' } ], null ]\n    [ 'abc<i/xyz/>', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'i' }, { mk: 'tag:slash', value: '/' }, { mk: 'plain:other', value: 'xyz' }, { mk: 'plain:slash', value: '/' }, { mk: 'plain:other', value: '>' }, { mk: 'plain:nl', value: '\\n' } ], null ]\n    [ \"\"\"abc<div#c1 foo=\"bar>xyz'/\"\"\", [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:dq', value: '\"' }, { mk: 'tag:dq:text', value: \"bar>xyz'/\" }, { mk: 'tag:dq:nl', value: '\\n' } ], null ]\n    [ \"\"\"abc<div#c1 foo=\"bar/>xyz'/\"\"\", [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:dq', value: '\"' }, { mk: 'tag:dq:text', value: \"bar/>xyz'/\" }, { mk: 'tag:dq:nl', value: '\\n' } ], null ]\n    [ \"\"\"abc<div#c1 foo=\"bar/xyz'/\"\"\", [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:dq', value: '\"' }, { mk: 'tag:dq:text', value: \"bar/xyz'/\" }, { mk: 'tag:dq:nl', value: '\\n' } ], null ]\n    [ 'abc<div#c1 foo=\"bar>xyz\\\\\"/', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:dq', value: '\"' }, { mk: 'tag:dq:text', value: 'bar>xyz' }, { mk: 'tag:dq:escchr', value: '\\\\\"', x: { chr: '\"' } }, { mk: 'tag:dq:text', value: '/' }, { mk: 'tag:dq:nl', value: '\\n' } ], null ]\n    [ 'abc<div#c1 foo=\"bar/>xyz\\\\\"/', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:dq', value: '\"' }, { mk: 'tag:dq:text', value: 'bar/>xyz' }, { mk: 'tag:dq:escchr', value: '\\\\\"', x: { chr: '\"' } }, { mk: 'tag:dq:text', value: '/' }, { mk: 'tag:dq:nl', value: '\\n' } ], null ]\n    [ 'abc<div#c1 foo=\"bar/xyz\\\\\"/', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:dq', value: '\"' }, { mk: 'tag:dq:text', value: 'bar/xyz' }, { mk: 'tag:dq:escchr', value: '\\\\\"', x: { chr: '\"' } }, { mk: 'tag:dq:text', value: '/' }, { mk: 'tag:dq:nl', value: '\\n' } ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer   = new_tag_lexer()\n      result  = []\n      for token from lexer.walk probe\n        d = GUY.props.omit_nullish GUY.props.pick_with_fallback token, null, 'mk', 'value', 'x'\n        result.push d\n      # H.tabulate ( rpr probe ), result\n      resolve result\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@tags_2 = ( T, done ) ->\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'abc<div#c1 foo=bar/xyz/', [ \"plain:other'abc'\", \"plain:lt'<'\", \"tag:text'div#c1 foo=bar'\", \"tag:slash'/'\", \"tag:ntag'<div#c1 foo=bar/'\", \"plain:other'xyz'\", \"plain:slash'/'\", \"plain:nl'\\\\n'\" ], null ]\n    [ 'abc<div#c1\\nfoo=bar/xyz/', [ \"plain:other'abc'\", \"plain:lt'<'\", \"tag:text'div#c1'\", \"tag:nl'\\\\n'\", \"tag:text'foo=bar'\", \"tag:slash'/'\", \"tag:ntag'<div#c1\\\\nfoo=bar/'\", \"plain:other'xyz'\", \"plain:slash'/'\", \"plain:nl'\\\\n'\" ], null ]\n    [ 'abc<div#c1 foo=bar>xyz/', [ \"plain:other'abc'\", \"plain:lt'<'\", \"tag:text'div#c1 foo=bar'\", \"tag:gt'>'\", \"tag:otag'<div#c1 foo=bar>'\", \"plain:other'xyz'\", \"plain:slash'/'\", \"plain:nl'\\\\n'\" ], null ]\n    [ 'abc<div#c1\\nfoo=bar>xyz/', [ \"plain:other'abc'\", \"plain:lt'<'\", \"tag:text'div#c1'\", \"tag:nl'\\\\n'\", \"tag:text'foo=bar'\", \"tag:gt'>'\", \"tag:otag'<div#c1\\\\nfoo=bar>'\", \"plain:other'xyz'\", \"plain:slash'/'\", \"plain:nl'\\\\n'\" ], null ]\n    [ 'abc<div#c1 foo=bar/>xyz/', [ \"plain:other'abc'\", \"plain:lt'<'\", \"tag:text'div#c1 foo=bar'\", \"tag:slashgt'/>'\", \"tag:stag'<div#c1 foo=bar/>'\", \"plain:other'xyz'\", \"plain:slash'/'\", \"plain:nl'\\\\n'\" ], null ]\n    [ 'abc<div#c1\\nfoo=bar/>xyz/', [ \"plain:other'abc'\", \"plain:lt'<'\", \"tag:text'div#c1'\", \"tag:nl'\\\\n'\", \"tag:text'foo=bar'\", \"tag:slashgt'/>'\", \"tag:stag'<div#c1\\\\nfoo=bar/>'\", \"plain:other'xyz'\", \"plain:slash'/'\", \"plain:nl'\\\\n'\" ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer       = new_tag_lexer()\n      parser      = new_parser lexer\n      result      = []\n      result_rpr  = []\n      for line from GUY.str.walk_lines probe\n        parser.send line\n        for token from parser.walk()\n          # token = GUY.props.omit_nullish GUY.props.pick_with_fallback token, null, 'mk', 'value', 'x'\n          result.push token\n          result_rpr.push \"#{token.mk}#{rpr token.value}\"\n      # H.tabulate ( rpr probe ), result\n      resolve result_rpr\n      # resolve null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@htmlish_tag_types = ( T, done ) ->\n  _HTMLISH        = ( require 'paragate/lib/htmlish.grammar' ).new_grammar { bare: true, }\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ '<a>', [ \"otag'<a>'\" ], null ]\n    [ '<a b=c>', [ \"otag'<a b=c>'\" ], null ]\n    [ '<a b=c/>', [ \"stag'<a b=c/>'\" ], null ]\n    [ '<a b=c/', [ \"ntag'<a b=c/'\" ], null ]\n    [ '</a>', [ \"ctag'</a>'\" ], null ]\n    [ '<br>', [ \"otag'<br>'\" ], null ]\n    [ '<br/>', [ \"stag'<br/>'\" ], null ]\n    [ '<i/italic/', [ \"ntag'<i/'\", \"undefined'italic'\", \"nctag'/'\" ], null ]\n    [ '<i>italic</>', [ \"otag'<i>'\", \"undefined'italic'\", \"ctag'</>'\", \"undefined'>'\" ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result      = _HTMLISH.parse probe\n      result_rpr  = ( \"#{token.type}#{rpr token.text}\" for token in result )\n      # H.tabulate ( rpr probe ), result\n      resolve result_rpr\n      # resolve undefined\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  test @tags_1\n  # test @tags_2\n  # test @htmlish_tag_types\n  # test @parse_codespans_and_single_star\n  # test @parse_md_stars_markup\n\n"
  ]
}