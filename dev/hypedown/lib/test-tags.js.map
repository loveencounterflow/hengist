{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-tags.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN/TESTS/TAGS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nH                         = require '../../../lib/helpers'\n# after                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n#-----------------------------------------------------------------------------------------------------------\nnew_tag_lexer = ->\n  { Interlex } = require '../../../apps/intertext-lexer'\n  lexer = new Interlex { linewise: true, catchall_concat: true, reserved_concat: true, }\n  # lexer.add_lexeme { mode, tid: 'eol',      pattern: ( /$/u  ), }\n  new_escchr_descriptor = ( mode ) ->\n    create = ( token ) ->\n      token.x = { chr: '\\n', } unless ( token.x?.chr )?\n      return token\n    return { mode, tid: 'escchr', pattern: /\\\\(?<chr>.|$)/u, reserved: '\\\\', create, }\n  #.......................................................................................................\n  do =>\n    mode = 'plain'\n    lexer.add_lexeme new_escchr_descriptor mode\n    lexer.add_lexeme { mode,  tid: 'ltbang',    jump: 'comment',  pattern: ( /<!--/u ), reserved: '<', }\n    lexer.add_lexeme { mode,  tid: 'lt',        jump: 'tag',      pattern: ( /</u ), reserved: '<', }\n    lexer.add_lexeme { mode,  tid: 'nl',        jump: null,       pattern: ( /$/u ), }\n    lexer.add_lexeme { mode,  tid: 'ws',        jump: null,       pattern: ( /\\s+/u ), }\n    lexer.add_catchall_lexeme { mode, tid: 'other', }\n    lexer.add_reserved_lexeme { mode, tid: 'forbidden', }\n  #.......................................................................................................\n  do =>\n    mode = 'tag'\n    lexer.add_lexeme { mode,  tid: 'nl',        jump: null,       pattern: ( /$/u ), }\n    # lexer.add_lexeme { mode,  tid: 'tagtext',   jump: null,       pattern: ( /[^\\/>]+/u ), }\n    lexer.add_lexeme { mode,  tid: 'dq',        jump: 'tag:dq',   pattern: ( /\"/u ),    reserved: '\"' }\n    lexer.add_lexeme { mode,  tid: 'sq',        jump: 'tag:sq',   pattern: ( /'/u ),    reserved: \"'\" }\n    lexer.add_lexeme new_escchr_descriptor mode\n    lexer.add_lexeme { mode,  tid: 'slashgt',   jump: '^',        pattern: ( /\\/>/u ),  reserved: [ '>', '/', ] }\n    lexer.add_lexeme { mode,  tid: 'slash',     jump: '^',        pattern: ( /\\//u ),   reserved: '/', }\n    lexer.add_lexeme { mode,  tid: 'gt',        jump: '^',        pattern: ( />/u ),    reserved: '>', }\n    lexer.add_catchall_lexeme { mode, tid: 'text', }\n    lexer.add_reserved_lexeme { mode, tid: 'forbidden', }\n  #.......................................................................................................\n  do =>\n    mode = 'tag:dq'\n    lexer.add_lexeme new_escchr_descriptor mode\n    lexer.add_lexeme { mode,  tid: 'nl',        jump: null,       pattern: ( /$/u ), }\n    lexer.add_lexeme { mode,  tid: 'dq',        jump: '^',        pattern: ( /\"/u ),    reserved: '\"' }\n    lexer.add_catchall_lexeme { mode, tid: 'text', }\n  #.......................................................................................................\n  do =>\n    mode = 'tag:sq'\n    lexer.add_lexeme new_escchr_descriptor mode\n    lexer.add_lexeme { mode,  tid: 'nl',        jump: null,       pattern: ( /$/u ), }\n    lexer.add_lexeme { mode,  tid: 'sq',        jump: '^',        pattern: ( /'/u ),    reserved: \"'\" }\n    lexer.add_catchall_lexeme { mode, tid: 'text', }\n  #.......................................................................................................\n  do =>\n    mode = 'comment'\n    lexer.add_lexeme { mode, tid: 'nl',        jump: null,       pattern: ( /$/u ), }\n    lexer.add_lexeme new_escchr_descriptor mode\n    lexer.add_lexeme { mode, tid: 'eoc',       jump: '^',        pattern:  /-->/u, reserved: '--',    }\n    lexer.add_catchall_lexeme { mode, tid: 'text', }\n    lexer.add_reserved_lexeme { mode, tid: 'forbidden', }\n  return lexer\n\n#-----------------------------------------------------------------------------------------------------------\nnew_parser = ( lexer ) ->\n  { Pipeline\n    transforms  } = require '../../../apps/moonriver'\n  _HTMLISH        = ( require 'paragate/lib/htmlish.grammar' ).new_grammar { bare: true, }\n  #.........................................................................................................\n  $tokenize     = ( parser ) ->\n    return tokenize = ( line, send ) ->\n      @types.validate.text line\n      send token for token from parser.lexer.walk line\n      return null\n  #.........................................................................................................\n  $collect_tag  = ( htmlish_parser ) ->\n    collector   = []\n    within_tag  = false\n    sp          = new Pipeline()\n    sp.push transforms.$window { min: 0, max: +1, empty: null, }\n    sp.push collect_tag = ( [ d, nxt, ], send ) ->\n      #.....................................................................................................\n      if within_tag\n        collector.push d\n        unless nxt?.mk.startsWith 'tag:'\n          within_tag  = false\n          source      = ( e.value for e from collector ).join ''\n          debug '^78^', rpr source, GUY.lft.thaw _HTMLISH.parse source\n          send e for e in GUY.lft.thaw _HTMLISH.parse source\n        return null\n      #.....................................................................................................\n      else\n        return send d unless nxt?.mk.startsWith 'tag:'\n        within_tag = true\n        collector.push d\n      #.....................................................................................................\n      return null\n    return sp\n  #.........................................................................................................\n  p             = new Pipeline()\n  p.lexer       = lexer\n  p.push $tokenize p\n  p.push $collect_tag()\n  p.push show = ( d ) -> urge '^parser@1^', d\n  debug '^43^', p\n  return p\n\n#-----------------------------------------------------------------------------------------------------------\n@tags_1 = ( T, done ) ->\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'foo <!-- comment --> bar', [ { mk: 'plain:other', value: 'foo ' }, { mk: 'plain:ltbang', value: '<!--' }, { mk: 'comment:text', value: ' comment ' }, { mk: 'comment:eoc', value: '-->' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:other', value: 'bar' }, { mk: 'plain:nl', value: '' } ], null ]\n    [ 'foo <!-- comment \\n --> bar', [ { mk: 'plain:other', value: 'foo ' }, { mk: 'plain:ltbang', value: '<!--' }, { mk: 'comment:text', value: ' comment' }, { mk: 'comment:nl', value: '' }, { mk: 'comment:text', value: ' ' }, { mk: 'comment:eoc', value: '-->' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:other', value: 'bar' }, { mk: 'plain:nl', value: '' } ], null ]\n    [ 'foo <!-- comment \\\\\\n --> bar', [ { mk: 'plain:other', value: 'foo ' }, { mk: 'plain:ltbang', value: '<!--' }, { mk: 'comment:text', value: ' comment ' }, { mk: 'comment:escchr', value: '\\\\', x: { chr: '\\n' } }, { mk: 'comment:nl', value: '' }, { mk: 'comment:text', value: ' ' }, { mk: 'comment:eoc', value: '-->' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:other', value: 'bar' }, { mk: 'plain:nl', value: '' } ], null ]\n    [ 'abc<div#c1 foo=bar>xyz', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=bar' }, { mk: 'tag:gt', value: '>' }, { mk: 'plain:other', value: 'xyz' }, { mk: 'plain:nl', value: '' } ], null ]\n    [ 'abc<div#c1 foo=bar/>xyz', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=bar' }, { mk: 'tag:slashgt', value: '/>' }, { mk: 'plain:other', value: 'xyz' }, { mk: 'plain:nl', value: '' } ], null ]\n    [ 'abc<div#c1 foo=bar/xyz/', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=bar' }, { mk: 'tag:slash', value: '/' }, { mk: 'plain:other', value: 'xyz/' }, { mk: 'plain:nl', value: '' } ], null ]\n    [ 'abc<div#c1 foo=\"bar>xyz\"/', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:dq', value: '\"' }, { mk: 'tag:dq:text', value: 'bar>xyz' }, { mk: 'tag:dq:dq', value: '\"' }, { mk: 'tag:slash', value: '/' }, { mk: 'plain:nl', value: '' } ], null ]\n    [ 'abc<div#c1 foo=\"bar/>xyz\"/', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:dq', value: '\"' }, { mk: 'tag:dq:text', value: 'bar/>xyz' }, { mk: 'tag:dq:dq', value: '\"' }, { mk: 'tag:slash', value: '/' }, { mk: 'plain:nl', value: '' } ], null ]\n    [ 'abc<div#c1 foo=\"bar/xyz\"/', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:dq', value: '\"' }, { mk: 'tag:dq:text', value: 'bar/xyz' }, { mk: 'tag:dq:dq', value: '\"' }, { mk: 'tag:slash', value: '/' }, { mk: 'plain:nl', value: '' } ], null ]\n    [ \"abc<div#c1 foo='bar>xyz'/\", [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:sq', value: \"'\" }, { mk: 'tag:sq:text', value: 'bar>xyz' }, { mk: 'tag:sq:sq', value: \"'\" }, { mk: 'tag:slash', value: '/' }, { mk: 'plain:nl', value: '' } ], null ]\n    [ \"abc<div#c1 foo='bar/>xyz'/\", [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:sq', value: \"'\" }, { mk: 'tag:sq:text', value: 'bar/>xyz' }, { mk: 'tag:sq:sq', value: \"'\" }, { mk: 'tag:slash', value: '/' }, { mk: 'plain:nl', value: '' } ], null ]\n    [ \"abc<div#c1 foo='bar/xyz'/\", [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:sq', value: \"'\" }, { mk: 'tag:sq:text', value: 'bar/xyz' }, { mk: 'tag:sq:sq', value: \"'\" }, { mk: 'tag:slash', value: '/' }, { mk: 'plain:nl', value: '' } ], null ]\n    [ \"\"\"abc<div#c1 foo=\"bar>xyz'/\"\"\", [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:dq', value: '\"' }, { mk: 'tag:dq:text', value: \"bar>xyz'/\" }, { mk: 'tag:dq:nl', value: '' } ], null ]\n    [ \"\"\"abc<div#c1 foo=\"bar/>xyz'/\"\"\", [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:dq', value: '\"' }, { mk: 'tag:dq:text', value: \"bar/>xyz'/\" }, { mk: 'tag:dq:nl', value: '' } ], null ]\n    [ \"\"\"abc<div#c1 foo=\"bar/xyz'/\"\"\", [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:dq', value: '\"' }, { mk: 'tag:dq:text', value: \"bar/xyz'/\" }, { mk: 'tag:dq:nl', value: '' } ], null ]\n    [ 'abc<div#c1 foo=\"bar>xyz\\\\\"/', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:dq', value: '\"' }, { mk: 'tag:dq:text', value: 'bar>xyz' }, { mk: 'tag:dq:escchr', value: '\\\\\"', x: { chr: '\"' } }, { mk: 'tag:dq:text', value: '/' }, { mk: 'tag:dq:nl', value: '' } ], null ]\n    [ 'abc<div#c1 foo=\"bar/>xyz\\\\\"/', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:dq', value: '\"' }, { mk: 'tag:dq:text', value: 'bar/>xyz' }, { mk: 'tag:dq:escchr', value: '\\\\\"', x: { chr: '\"' } }, { mk: 'tag:dq:text', value: '/' }, { mk: 'tag:dq:nl', value: '' } ], null ]\n    [ 'abc<div#c1 foo=\"bar/xyz\\\\\"/', [ { mk: 'plain:other', value: 'abc' }, { mk: 'plain:lt', value: '<' }, { mk: 'tag:text', value: 'div#c1 foo=' }, { mk: 'tag:dq', value: '\"' }, { mk: 'tag:dq:text', value: 'bar/xyz' }, { mk: 'tag:dq:escchr', value: '\\\\\"', x: { chr: '\"' } }, { mk: 'tag:dq:text', value: '/' }, { mk: 'tag:dq:nl', value: '' } ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer   = new_tag_lexer()\n      result  = []\n      for token from lexer.walk probe\n        d = GUY.props.omit_nullish GUY.props.pick_with_fallback token, null, 'mk', 'value', 'x'\n        result.push d\n      H.tabulate ( rpr probe ), result\n      resolve result\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@tags_2 = ( T, done ) ->\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'abc<div#c1 foo=bar/xyz/', null, null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer   = new_tag_lexer()\n      parser  = new_parser lexer\n      result  = []\n      for line from GUY.str.walk_lines probe\n        parser.send line\n        for token from parser.walk()\n          # token = GUY.props.omit_nullish GUY.props.pick_with_fallback token, null, 'mk', 'value', 'x'\n          result.push token\n      H.tabulate ( rpr probe ), result\n      # resolve result\n      resolve null\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # test @parse_codespans_and_single_star\n  # test @parse_md_stars_markup\n  # test @tags_1\n  test @tags_2\n\n"
  ]
}