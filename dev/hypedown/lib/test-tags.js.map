{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-tags.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN/TESTS/TAGS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nH                         = require '../../../lib/helpers'\n# after                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n\n#-----------------------------------------------------------------------------------------------------------\n@tags_1 = ( T, done ) ->\n  { Interlex } = require '../../../apps/intertext-lexer'\n  new_lexer = ->\n    lexer = new Interlex { linewise: true, catchall_concat: true, reserved_concat: true, }\n    # lexer.add_lexeme { mode, tid: 'eol',      pattern: ( /$/u  ), }\n    #.......................................................................................................\n    do =>\n      mode = 'plain'\n      lexer.add_lexeme { mode,  tid: 'escchr',    jump: null,       pattern:  /\\\\(?<chr>.)/u, reserved: '\\\\',    }\n      lexer.add_lexeme { mode,  tid: 'ltbang',    jump: 'comment',  pattern: ( /<!--/u ), reserved: '<', }\n      lexer.add_lexeme { mode,  tid: 'lt',        jump: 'tag',      pattern: ( /</u ), reserved: '<', }\n      lexer.add_lexeme { mode,  tid: 'nl',        jump: null,       pattern: ( /$/u ), }\n      lexer.add_lexeme { mode,  tid: 'ws',        jump: null,       pattern: ( /\\s+/u ), }\n      lexer.add_lexeme { mode,  tid: 'word',      jump: null,       pattern: ( /\\S+/u ), }\n      lexer.add_catchall_lexeme { mode, tid: 'other', }\n      lexer.add_reserved_lexeme { mode, tid: 'forbidden', }\n    #.......................................................................................................\n    do =>\n      mode = 'tag'\n      lexer.add_lexeme { mode,  tid: 'nl',        jump: null,       pattern: ( /$/u ), }\n      lexer.add_lexeme { mode,  tid: 'name',      jump: 'atrs',     pattern: ( /\\S+/u ), }\n      lexer.add_lexeme { mode,  tid: 'escchr',    jump: null,       pattern:  /\\\\(?<chr>.)/u,     }\n      lexer.add_lexeme { mode,  tid: 'gt',        jump: '^',        pattern: ( />/u ), reserved: '>', }\n      lexer.add_catchall_lexeme { mode, tid: 'other', }\n      lexer.add_reserved_lexeme { mode, tid: 'forbidden', }\n    #.......................................................................................................\n    do =>\n      mode = 'atrs'\n      lexer.add_lexeme { mode,  tid: 'nl',        jump: null,       pattern: ( /$/u ), }\n      lexer.add_lexeme { mode,  tid: 'escchr',    jump: null,       pattern:  /\\\\(?<chr>.)/u, reserved: '\\\\',    }\n      lexer.add_catchall_lexeme { mode, tid: 'other', }\n      lexer.add_reserved_lexeme { mode, tid: 'forbidden', }\n    #.......................................................................................................\n    do =>\n      mode = 'comment'\n      lexer.add_lexeme { mode, tid: 'nl',        jump: null,       pattern: ( /$/u ), }\n      lexer.add_lexeme { mode, tid: 'escchr',    jump: null,       pattern:  /\\\\(?<chr>.)/u, reserved: '\\\\',    }\n      lexer.add_lexeme { mode, tid: 'eoc',       jump: '^',        pattern:  /-->/u, reserved: '--',    }\n      lexer.add_catchall_lexeme { mode, tid: 'text', }\n      lexer.add_reserved_lexeme { mode, tid: 'forbidden', }\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'foo <!-- comment --> bar', [ { mk: 'plain:word', value: 'foo' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:ltbang', value: '<!--' }, { mk: 'comment:text', value: ' comment ' }, { mk: 'comment:eoc', value: '-->' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:word', value: 'bar' }, { mk: 'plain:nl', value: '' } ], null ]\n    [ 'foo <!-- comment \\n --> bar', [ { mk: 'plain:word', value: 'foo' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:ltbang', value: '<!--' }, { mk: 'comment:text', value: ' comment' }, { mk: 'comment:nl', value: '' }, { mk: 'comment:text', value: ' ' }, { mk: 'comment:eoc', value: '-->' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:word', value: 'bar' }, { mk: 'plain:nl', value: '' } ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer   = new_lexer()\n      result  = []\n      for token from lexer.walk probe\n        result.push GUY.props.pick_with_fallback token, null, 'mk', 'value'\n      H.tabulate ( rpr probe ), result\n      resolve result\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # test @parse_codespans_and_single_star\n  # test @parse_md_stars_markup\n  test @tags_1\n\n"
  ]
}