{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-stop-marks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN/TESTS/STOP-MARKERS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nH                         = require './helpers'\n# after                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@parse_stop_marks = ( T, done ) ->\n  { Hypedown_lexer\n    Hypedown_parser } = require '../../../apps/hypedown'\n  { XXX_new_token }   = require '../../../apps/hypedown/lib/helpers'\n  probes_and_matchers = [\n    [ '*abc*', '<p><i>abc</i>\\n', null ]\n    [ '*abc*<?stop?>*xyz*', '<p><i>abc</i>\\n', null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      p           = new Hypedown_parser()\n      p.send probe\n      result      = p.run()\n      result_html = ( d.value for d in result when not d.$stamped ).join ''\n      H.tabulate \"#{rpr probe} -> #{rpr result_html}\", result\n      console.table result\n      H.tabulate \"#{rpr probe} -> #{rpr result_html}\", ( t for t in result when not t.$stamped )\n      #.....................................................................................................\n      resolve result_html\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n\n"
  ]
}