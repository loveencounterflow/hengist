{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN/TESTS/BASICS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nH                         = require './helpers'\n# after                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@parse_md_stars_markup = ( T, done ) ->\n  { Hypedown_lexer  } = require '../../../apps/hypedown'\n  { $040_stars      } = require '../../../apps/hypedown/lib/_hypedown-parser-xxx-temp'\n  probes_and_matchers = [\n    [ '*abc*', '<i>abc</i>\\n', null ]\n    [ '*abc*\\n*abc*', '<i>abc</i>\\n<i>abc</i>\\n', null ]\n    [ '*abc*\\n\\n*abc*', '<i>abc</i>\\n\\n<i>abc</i>\\n', null ]\n    [ '**def**', '<b>def</b>\\n', null ]\n    [ '**x*def*x**', '<b>x<i>def</i>x</b>\\n', null ]\n    [ '*x**def**x*', '<i>x<b>def</b>x</i>\\n', null ]\n    [ '***abc*def**', '<b><i>abc</i>def</b>\\n', null ]\n    [ '*x***def**', '<i>x</i><b>def</b>\\n', null ]\n    [ '**x***def*', '<b>x</b><i>def</i>\\n', null ]\n    [ '*', '<i>\\n', null ]\n    [ '**', '<b>\\n', null ]\n    [ '***', '<b><i>\\n', null ]\n    [ '***def***', '<b><i>def</i></b>\\n', null ]\n    [ '***abc**def*', '<b><i>abc</i></b><i>def</i>\\n', null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer       = new Hypedown_lexer()\n      parser      = $040_stars.as_pipeline()\n      tokens      = []\n      for d from lexer.walk probe\n        parser.send d\n        tokens.push token for token from parser.walk_and_stop()\n      result_html = ( t.value for t in tokens when not t.$stamped ).join ''\n      # H.tabulate \"#{rpr probe} -> #{rpr result_html}\", tokens\n      # H.tabulate \"#{rpr probe} -> #{rpr result_html}\", ( t for t in tokens when not t.$stamped )\n      resolve result_html\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_codespans_and_single_star = ( T, done ) ->\n  { Transformer } = require '../../../apps/hypedown'\n  XXX_TEMP        = require '../../../apps/hypedown/lib/_hypedown-parser-xxx-temp'\n  probes_and_matchers = [\n    # [ \"`abc`\", \"<code>abc</code>\\n\", ]\n    # [ \"*abc*\", \"<i>abc</i>\\n\", ]\n    # [ '*foo* `*bar*` baz', '<i>foo</i> <code>*bar*</code> baz\\n', null ]\n    # [ '*foo* ``*bar*`` baz', '<i>foo</i> <code>*bar*</code> baz\\n', null ]\n    # [ '*foo* ````*bar*```` baz', '<i>foo</i> <code>*bar*</code> baz\\n', null ]\n    # [ 'helo `world`!', 'helo <code>world</code>!\\n', null ]\n    # [ 'foo\\n\\nbar\\n\\nbaz', 'foo\\n\\nbar\\n\\nbaz\\n', null ]\n    [ 'abc\\n\\n`def\\n\\nghi`\\n\\nxyz', 'foo\\n\\nbar\\n\\nbaz\\n', null ]\n    # [ '*foo* ``*bar*``` baz', '<i>foo</i> <code>*bar*</code> baz\\n', null ] ### TAINT preliminary, lack of STOP token ###\n    # [ '*foo* ```*bar*`` baz', '<i>foo</i> <code>*bar*`` baz</code>\\n', null ] ### TAINT preliminary, lack of STOP token ###\n    ]\n  #.........................................................................................................\n  class Md_parser extends Transformer\n    $: [\n      XXX_TEMP.$001_prelude\n      XXX_TEMP.$002_tokenize_lines\n      XXX_TEMP.$010_prepare_paragraphs\n      # XXX_TEMP.$020_priority_markup\n      XXX_TEMP.$040_stars ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      p           = Md_parser.as_pipeline()\n      p.send probe\n      result      = p.run_and_stop()\n      result_txt  = ( d.value for d in result when not d.$stamped ).join ''\n      # urge '^08-1^', ( Object.keys d ).sort() for d in result\n      H.tabulate \"#{rpr probe} -> #{rpr result_txt} (#{rpr matcher})\", result\n      # H.tabulate \"#{rpr probe} -> #{rpr result_txt} (#{rpr matcher})\", ( t for t in result when not t.$stamped )\n      resolve result_txt\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_codespans_with_whitespace = ( T, done ) ->\n  { Transformer } = require '../../../apps/hypedown'\n  XXX_TEMP        = require '../../../apps/hypedown/lib/_hypedown-parser-xxx-temp'\n  probes_and_matchers = [\n    [ \"`` `abc` ``\", \"<code>`abc`</code>\\n\", ]\n    [ \"`` `abc\\\\` ``\", \"<code>`abc`</code>\\n\", ]\n    ]\n  #.........................................................................................................\n  class Md_parser extends Transformer\n    $: [\n      XXX_TEMP.$001_prelude\n      XXX_TEMP.$002_tokenize_lines\n      XXX_TEMP.$020_priority_markup ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      p           = Md_parser.as_pipeline()\n      p.send probe\n      result      = p.run_and_stop()\n      result_txt  = ( d.value for d in result when not d.$stamped ).join ''\n      # urge '^08-1^', ( Object.keys d ).sort() for d in result\n      H.tabulate \"#{rpr probe} -> #{rpr result_txt} (#{rpr matcher})\", result\n      H.tabulate \"#{rpr probe} -> #{rpr result_txt} (#{rpr matcher})\", ( t for t in result when not t.$stamped )\n      resolve result_txt\n  #.........................................................................................................\n  done?()\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@add_parbreak_markers = ( T, done ) ->\n  { Pipeline\n    Transformer     } = require '../../../apps/hypedown'\n  { Hypedown_lexer      } = require '../../../apps/hypedown'\n  XXX_TEMP                = require '../../../apps/hypedown/lib/_hypedown-parser-xxx-temp'\n  probes_and_matchers = [\n    [ '', '⏎', null ]\n    [ 'paragraph', '【paragraph】⏎', null ]\n    [ 'par1 lnr 1\\npar1 lnr 2', '【par1 lnr 1⏎par1 lnr 2】⏎', null ]\n    [ 'par1 lnr 1\\n\\n\\n\\npar2 lnr 1', '【par1 lnr 1】⏎⏎⏎⏎【par2 lnr 1】⏎', null ]\n    [ 'par1 lnr 1\\n\\npar2 lnr 1', '【par1 lnr 1】⏎⏎【par2 lnr 1】⏎', null ]\n    [ 'par1 lnr 1\\n\\npar2 lnr 1\\n', '【par1 lnr 1】⏎⏎【par2 lnr 1】⏎⏎', null ]\n    [ 'par1 lnr 1\\n\\npar2 lnr 1\\n\\n', '【par1 lnr 1】⏎⏎【par2 lnr 1】⏎⏎⏎', null ]\n    ]\n  #.........................................................................................................\n  new_parser = ( lexer ) ->\n    class Md_parser extends Transformer\n      $: [\n        XXX_TEMP.$001_prelude\n        XXX_TEMP.$002_tokenize_lines\n        XXX_TEMP.$010_prepare_paragraphs ]\n    return Md_parser.as_pipeline()\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      parser      = new_parser()\n      tokens      = []\n      result      = []\n      #.....................................................................................................\n      handle_token = ( token ) ->\n        tokens.push token\n        return if token.data?.virtual is true\n        switch token.mk\n          when 'html:par:start' then result.push '【'\n          when 'html:par:stop'  then result.push '】'\n          when 'plain:nls'      then result.push '⏎'.repeat token.data.count\n          when 'plain:other'    then result.push token.value\n      #.....................................................................................................\n      # for line from GUY.str.walk_lines probe\n      parser.send probe\n      handle_token token for token from parser.walk_and_stop()\n      result_html = result.join ''\n      H.tabulate \"#{rpr probe} -> #{rpr result_html}\", tokens\n      H.tabulate \"#{rpr probe} -> #{rpr result_html}\", ( t for t in tokens when not t.$stamped )\n      #.....................................................................................................\n      resolve result_html\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_headings = ( T, done ) ->\n  { Pipeline\n    Transformer         } = require '../../../apps/hypedown'\n  { Hypedown_lexer      } = require '../../../apps/hypedown'\n  XXX_TEMP                = require '../../../apps/hypedown/lib/_hypedown-parser-xxx-temp'\n  probes_and_matchers = [\n    [ '# H1', '<h1>H1</h1>\\n', null ]\n    [ \"x # H1\", \"x # H1\\n\", ]\n    [ \"x\\n# H1\", \"x\\n# H1\\n\", ]\n    [ \"not a\\n# heading\", 'not a\\n# heading\\n', ]\n    [ 'x', 'x\\n', null ]\n    [ \"x\\n\\n# H1\", \"x\\n\\n<h1>H1</h1>\\n\", ]\n    [ \"# Section\", \"<h1>Section</h1>\\n\", ]\n    [ \"## Section\", \"<h2>Section</h2>\\n\", ]\n    [ \"### Section\", \"<h3>Section</h3>\\n\", ]\n    [ \"#### Section\", \"<h4>Section</h4>\\n\", ]\n    [ \"##### Section\", \"<h5>Section</h5>\\n\", ]\n    [ \"###### Section\", \"<h6>Section</h6>\\n\", ]\n    [ \"#### Amazing\\nLong\\nHeadlines!!!\", \"<h4>Amazing\\nLong\\nHeadlines!!!</h4>\\n\", ]\n    [ \"paragraph 1\\n\\n\\n\\nparagraph 2\", 'paragraph 1\\n\\n\\n\\nparagraph 2\\n', ]\n    [ \"\\n# H1\", \"\\n<h1>H1</h1>\\n\", ]\n    ]\n  #.........................................................................................................\n  class Md_parser extends Transformer\n    $: [\n      XXX_TEMP.$001_prelude\n      XXX_TEMP.$002_tokenize_lines\n      XXX_TEMP.$010_prepare_paragraphs\n      XXX_TEMP.$050_hash_headings ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      parser      = Md_parser.as_pipeline()\n      tokens      = []\n      parser.send probe\n      for token from parser.walk_and_stop()\n        # debug '^345^', ( rpr token.value )\n        tokens.push token\n      # p           = new Hypedown_parser()\n      # p.send probe\n      # result      = p.run()\n      result_html = ( t.value for t in tokens when not t.$stamped ).join ''\n      H.tabulate \"#{rpr probe} -> #{rpr result_html}\", tokens\n      H.tabulate \"#{rpr probe} -> #{rpr result_html}\", ( t for t in tokens when not t.$stamped )\n      #.....................................................................................................\n      resolve result_html\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@newline_handling = ( T, done ) ->\n  { Pipeline\n    Transformer     } = require '../../../apps/hypedown'\n  { Hypedown_lexer      } = require '../../../apps/hypedown'\n  XXX_TEMP                = require '../../../apps/hypedown/lib/_hypedown-parser-xxx-temp'\n  probes_and_matchers = [\n    [ '', '⏎', null ]\n    [ 'x', '【|x|】|⏎', null ]\n    [ 'x\\n', '【|x|】|⏎⏎', null ]\n    [ 'x\\n\\n', '【|x|】|⏎⏎⏎', null ]\n    [ '\\nx', '⏎|【|x|】|⏎', null ]\n    [ '\\n\\nx', '⏎⏎|【|x|】|⏎', null ]\n    [ '\\n', '⏎⏎', null ]\n    [ '\\n\\n', '⏎⏎⏎', null ]\n    [ '\\n\\n\\n', '⏎⏎⏎⏎', null ]\n    [ '\\n\\n\\n\\n', '⏎⏎⏎⏎⏎', null ]\n    [ '\\n\\n\\n\\n\\nxxxxx', '⏎⏎⏎⏎⏎|【|xxxxx|】|⏎', null ]\n    [ '\\n# H1', '⏎|【|<h1>|H1|</h1>|】|⏎', null ]\n    [ '\\n\\nx\\n\\n\\n\\n', '⏎⏎|【|x|】|⏎⏎⏎⏎⏎', null ]\n    ]\n  #.........................................................................................................\n  class Md_parser extends Transformer\n    $: [\n      XXX_TEMP.$001_prelude\n      XXX_TEMP.$002_tokenize_lines\n      XXX_TEMP.$010_prepare_paragraphs\n      XXX_TEMP.$050_hash_headings ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      parser      = Md_parser.as_pipeline()\n      tokens      = []\n      result      = []\n      #.....................................................................................................\n      handle_token = ( token ) ->\n        tokens.push token\n        return if token.$stamped\n        switch token.mk\n          when 'html:par:start' then  result.push '【'\n          when 'html:par:stop'  then  result.push '】'\n          when 'plain:nls'      then  result.push '⏎'.repeat token.data.count\n          else                        result.push token.value\n      #.....................................................................................................\n      # for line from GUY.str.walk_lines probe\n      parser.send probe\n      handle_token token for token from parser.walk_and_stop()\n      result = result.join '|'\n      # H.tabulate \"#{rpr probe} -> #{rpr result}\", tokens\n      # H.tabulate \"#{rpr probe} -> #{rpr result}\", ( t for t in tokens when not t.$stamped )\n      #.....................................................................................................\n      resolve result\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # @parse_codespans_and_single_star()\n  test @parse_codespans_and_single_star\n  # test @parse_codespans_with_whitespace\n  # @parse_md_stars_markup()\n  # test @parse_md_stars_markup\n  # test @parse_headings\n  # @add_parbreak_markers()\n  # test @add_parbreak_markers\n  # test @newline_handling\n\n"
  ]
}