{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,KAAA,EAAA,GAAA,EAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,uBAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC,EAdA;;;EAmBA,IAAA,GAA4B,OAAA,CAAQ,wBAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,MADF,EAEE,OAFF,EAGE,QAHF,EAIE,gBAJF,CAAA,GAI4B,KAAK,CAAC,MAAN,CAAA,CAJ5B;;EAKA,CAAA,GAA4B,OAAA,CAAQ,WAAR,EA1B5B;;;EA4BA,CAAA,CAAE,KAAF,CAAA,GAA4B,OAAA,CAAQ,qBAAR,CAA5B;;EACA,CAAA,CAAE,SAAF,EACE,IADF,EAEE,KAFF,CAAA,GAE4B,KAF5B,EA7BA;;;;;EAqCA,IAAC,CAAA,qBAAD,GAAyB,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACzB,QAAA,UAAA,EAAA,cAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA;IAAE,CAAA,CAAE,cAAF,CAAA,GAAsB,OAAA,CAAQ,wBAAR,CAAtB;IACA,CAAA,CAAE,UAAF,CAAA,GAAsB,OAAA,CAAQ,sDAAR,CAAtB;IACA,mBAAA,GAAsB,CACpB,CAAE,OAAF,EAAW,cAAX,EAA2B,IAA3B,CADoB,EAEpB,CAAE,cAAF,EAAkB,0BAAlB,EAA8C,IAA9C,CAFoB,EAGpB,CAAE,gBAAF,EAAoB,4BAApB,EAAkD,IAAlD,CAHoB,EAIpB,CAAE,SAAF,EAAa,cAAb,EAA6B,IAA7B,CAJoB,EAKpB,CAAE,aAAF,EAAiB,uBAAjB,EAA0C,IAA1C,CALoB,EAMpB,CAAE,aAAF,EAAiB,uBAAjB,EAA0C,IAA1C,CANoB,EAOpB,CAAE,cAAF,EAAkB,wBAAlB,EAA4C,IAA5C,CAPoB,EAQpB,CAAE,YAAF,EAAgB,sBAAhB,EAAwC,IAAxC,CARoB,EASpB,CAAE,YAAF,EAAgB,sBAAhB,EAAwC,IAAxC,CAToB,EAUpB,CAAE,GAAF,EAAO,OAAP,EAAgB,IAAhB,CAVoB,EAWpB,CAAE,IAAF,EAAQ,OAAR,EAAiB,IAAjB,CAXoB,EAYpB,CAAE,KAAF,EAAS,UAAT,EAAqB,IAArB,CAZoB,EAapB,CAAE,WAAF,EAAe,qBAAf,EAAsC,IAAtC,CAboB,EAcpB,CAAE,cAAF,EAAkB,+BAAlB,EAAmD,IAAnD,CAdoB,EAFxB;;IAmBE,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB;MACF,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;AAAG,eAAO,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,EAAW,MAAX,CAAA;AACjE,cAAA,CAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,WAAA,EAAA,CAAA,EAAA,KAAA,EAAA;UAAM,KAAA,GAAc,IAAI,cAAJ,CAAA;UACd,MAAA,GAAc,IAAI,UAAJ,CAAA;UACd,MAAA,GAAc;AACd;UAAA,KAAA,QAAA;YACE,MAAM,CAAC,IAAP,CAAY,CAAZ;AACA;YAAA,KAAA,aAAA;cACE,KAAA,CAAM,OAAN,EAAiB,GAAA,CAAI,KAAK,CAAC,KAAV,CAAjB;cACA,MAAM,CAAC,IAAP,CAAY,KAAZ;YAFF;UAFF,CAHN;;;;UAWM,WAAA,GAAc;;AAAE;YAAA,KAAA,0CAAA;;kBAA6B,CAAI,CAAC,CAAC;6BAAnC,CAAC,CAAC;;YAAF,CAAA;;cAAF,CAA+C,CAAC,IAAhD,CAAqD,EAArD;UACd,CAAC,CAAC,QAAF,CAAW,CAAA,CAAA,CAAG,GAAA,CAAI,KAAJ,CAAH,CAAA,IAAA,CAAA,CAAmB,GAAA,CAAI,WAAJ,CAAnB,CAAA,CAAX,EAAiD,MAAjD;UACA,CAAC,CAAC,QAAF,CAAW,CAAA,CAAA,CAAG,GAAA,CAAI,KAAJ,CAAH,CAAA,IAAA,CAAA,CAAmB,GAAA,CAAI,WAAJ,CAAnB,CAAA,CAAX;;AAAmD;YAAA,KAAA,0CAAA;;kBAAuB,CAAI,CAAC,CAAC;6BAA7B;;YAAA,CAAA;;cAAnD,EAbN;;iBAeM,OAAA,CAAQ,WAAR;QAhB2D,CAAZ;MAAV,CAAjC;IADR;wCAmBA;EAvCuB,EArCzB;;;EA+EA,IAAC,CAAA,+BAAD,GAAmC,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACnC,QAAA,cAAA,EAAA,eAAA,EAAA,aAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA;IAAE,CAAA,CAAE,aAAF,EACE,cADF,EAEE,eAFF,CAAA,GAEsB,OAAA,CAAQ,wBAAR,CAFtB;IAGA,mBAAA,GAAsB,CACpB,CAAE,OAAF,EAAW,uBAAX,CADoB,EAEpB,CAAE,OAAF,EAAW,iBAAX,CAFoB,EAGpB,CAAE,mBAAF,EAAuB,wCAAvB,EAAiE,IAAjE,CAHoB,EAIpB,CAAE,qBAAF,EAAyB,wCAAzB,EAAmE,IAAnE,CAJoB,EAKpB,CAAE,yBAAF,EAA6B,wCAA7B,EAAuE,IAAvE,CALoB,EAMpB,CAAE,eAAF,EAAmB,+BAAnB,EAAoD,IAApD,CANoB,EAOpB,CAAE,mBAAF,EAAuB,8BAAvB,EAAuD,IAAvD,CAPoB,EAQpB,CAAE,sBAAF,EAA0B,kBAA1B,EAA8C,IAA9C,CARoB,EASpB,CADqD,4CACnD,sBAAF,EAA0B,kBAA1B,EAA8C,IAA9C,CAToB,EAHxB;;;IAeE,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB;MACF,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;AAAG,eAAO,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,EAAW,MAAX,CAAA;AACjE,cAAA,CAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,MAAA,EAAA,UAAA,EAAA;UAAM,CAAA,GAAc,IAAI,eAAJ,CAAA;AASd;;;;;;;;;UAAA,KAAA,WAAA;YACE,CAAC,CAAC,IAAF,CAAO,IAAP;UADF;UAEA,MAAA,GAAc,CAAC,CAAC,GAAF,CAAA;UACd,UAAA,GAAc;;AAAE;YAAA,KAAA,0CAAA;;kBAA6B,CAAI,CAAC,CAAC;6BAAnC,CAAC,CAAC;;YAAF,CAAA;;cAAF,CAA+C,CAAC,IAAhD,CAAqD,EAArD,EAZpB;;;UAeM,CAAC,CAAC,QAAF,CAAW,CAAA,CAAA,CAAG,GAAA,CAAI,KAAJ,CAAH,CAAA,IAAA,CAAA,CAAmB,GAAA,CAAI,UAAJ,CAAnB,CAAA,EAAA,CAAA,CAAsC,GAAA,CAAI,OAAJ,CAAtC,CAAA,CAAA,CAAX;;AAAmE;YAAA,KAAA,0CAAA;;kBAAuB,CAAI,CAAC,CAAC;6BAA7B;;YAAA,CAAA;;cAAnE;iBACA,OAAA,CAAQ,UAAR;QAjB2D,CAAZ;MAAV,CAAjC;IADR;wCAoBA;EApCiC,EA/EnC;;;EAsHA,IAAC,CAAA,+BAAD,GAAmC,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACnC,QAAA,cAAA,EAAA,eAAA,EAAA,aAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA;IAAE,CAAA,CAAE,aAAF,EACE,cADF,EAEE,eAFF,CAAA,GAEsB,OAAA,CAAQ,wBAAR,CAFtB;IAGA,mBAAA,GAAsB,CACpB,CAAE,aAAF,EAAiB,yBAAjB,CADoB,EAEpB,CAAE,eAAF,EAAmB,yBAAnB,CAFoB,EAHxB;;IAQE,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB;MACF,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;AAAG,eAAO,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,EAAW,MAAX,CAAA;AACjE,cAAA,CAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,MAAA,EAAA;UAAM,CAAA,GAAc,IAAI,eAAJ,CAAA;AASd;;;;;;;;;UAAA,KAAA,WAAA;YACE,CAAC,CAAC,IAAF,CAAO,IAAP;UADF;UAEA,MAAA,GAAc,CAAC,CAAC,GAAF,CAAA;UACd,UAAA,GAAc;;AAAE;YAAA,KAAA,0CAAA;;kBAA6B,CAAI,CAAC,CAAC;6BAAnC,CAAC,CAAC;;YAAF,CAAA;;cAAF,CAA+C,CAAC,IAAhD,CAAqD,EAArD,EAZpB;;;;iBAgBM,OAAA,CAAQ,UAAR;QAjB2D,CAAZ;MAAV,CAAjC;IADR;wCAoBA;EA7BiC,EAtHnC;;;EAsJA,IAAC,CAAA,cAAD,GAAkB,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAClB,QAAA,cAAA,EAAA,SAAA,EAAA,QAAA,EAAA,eAAA,EAAA,QAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA;IAAE,CAAA,CAAE,QAAF,EACE,eADF,CAAA,GAC0B,OAAA,CAAQ,wBAAR,CAD1B;IAEA,CAAA,CAAE,cAAF,CAAA,GAA0B,OAAA,CAAQ,wBAAR,CAA1B;IACA,QAAA,GAA0B,OAAA,CAAQ,sDAAR;IAC1B,mBAAA,GAAsB,CACpB,CAAE,MAAF,EAAU,UAAV,CADoB,EAEpB,CAAE,QAAF,EAAY,UAAZ,CAFoB,EAGpB,CAAE,SAAF,EAAa,WAAb,CAHoB,EAIpB,CAAE,WAAF,EAAe,gBAAf,CAJoB;IAgBhB;;;;;;;;;;;MAAN,MAAA,UAAA,QAAwB,gBAAxB,CAAA;;0BACE,uBAAA,GAA0B,QAAQ,CAAC;;0BACnC,kBAAA,GAA0B,QAAQ,CAAC;;;;kBAtBvC;;IAwBE,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB;MACF,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;AAAG,eAAO,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,EAAW,MAAX,CAAA;AACjE,cAAA,CAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,WAAA,EAAA,CAAA,EAAA,KAAA,EAAA;UAAM,KAAA,GAAc,IAAI,cAAJ,CAAA;UACd,MAAA,GAAc,IAAI,SAAJ,CAAA;UACd,MAAA,GAAc;AACd;UAAA,KAAA,QAAA;YACE,MAAM,CAAC,IAAP,CAAY,CAAZ;AACA;YAAA,KAAA,aAAA;cACE,KAAA,CAAM,OAAN,EAAiB,GAAA,CAAI,KAAK,CAAC,KAAV,CAAjB;cACA,MAAM,CAAC,IAAP,CAAY,KAAZ;YAFF;UAFF,CAHN;;;;UAWM,WAAA,GAAc;;AAAE;YAAA,KAAA,0CAAA;;kBAA6B,CAAI,CAAC,CAAC;6BAAnC,CAAC,CAAC;;YAAF,CAAA;;cAAF,CAA+C,CAAC,IAAhD,CAAqD,EAArD;UACd,CAAC,CAAC,QAAF,CAAW,CAAA,CAAA,CAAG,GAAA,CAAI,KAAJ,CAAH,CAAA,IAAA,CAAA,CAAmB,GAAA,CAAI,WAAJ,CAAnB,CAAA,CAAX,EAAiD,MAAjD;UACA,CAAC,CAAC,QAAF,CAAW,CAAA,CAAA,CAAG,GAAA,CAAI,KAAJ,CAAH,CAAA,IAAA,CAAA,CAAmB,GAAA,CAAI,WAAJ,CAAnB,CAAA,CAAX;;AAAmD;YAAA,KAAA,0CAAA;;kBAAuB,CAAI,CAAC,CAAC;6BAA7B;;YAAA,CAAA;;cAAnD,EAbN;;iBAeM,OAAA,CAAQ,WAAR;QAhB2D,CAAZ;MAAV,CAAjC;IADR;wCAmBA;EA5CgB,EAtJlB;;;EAqMA,IAAC,CAAA,oBAAD,GAAwB,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACxB,QAAA,cAAA,EAAA,QAAA,EAAA,eAAA,EAAA,QAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,UAAA,EAAA,KAAA,EAAA;IAAE,CAAA,CAAE,QAAF,EACE,eADF,CAAA,GAC0B,OAAA,CAAQ,wBAAR,CAD1B;IAEA,CAAA,CAAE,cAAF,CAAA,GAA0B,OAAA,CAAQ,wBAAR,CAA1B;IACA,QAAA,GAA0B,OAAA,CAAQ,sDAAR;IAC1B,mBAAA,GAAsB,CACpB,CAAE,EAAF,EAAM,GAAN,EAAW,IAAX,CADoB,EAEpB,CAAE,WAAF,EAAe,aAAf,EAA8B,IAA9B,CAFoB,EAGpB,CAAE,wBAAF,EAA4B,yBAA5B,EAAuD,IAAvD,CAHoB,EAIpB,CAAE,0BAAF,EAA8B,2BAA9B,EAA2D,IAA3D,CAJoB,EAJxB;;IAWE,UAAA,GAAa,QAAA,CAAE,KAAF,CAAA;AACf,UAAA;MAAU;QAAN,MAAA,UAAA,QAAwB,gBAAxB;UACE,aAAe,CAAE,IAAF,EAAQ,IAAR,CAAA;AACrB,gBAAA,GAAA,EAAA;AAAQ;YAAA,KAAA,YAAA;cAAA,IAAA,CAAK,KAAL;YAAA;AACA,mBAAO;UAFM;;QADjB;;4BAIE,uBAAA,GAA0B,QAAQ,CAAC;;;;;AACrC,aAAO,IAAI,SAAJ,CAAA;IANI,EAXf;;IAmBE,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB;MACF,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;AAAG,eAAO,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,EAAW,MAAX,CAAA;AACjE,cAAA,YAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA,WAAA,EAAA,CAAA,EAAA,KAAA,EAAA;UAAM,MAAA,GAAc,UAAA,CAAW,IAAI,cAAJ,CAAA,CAAX;UACd,MAAA,GAAc;UACd,MAAA,GAAc,GAFpB;;UAIM,YAAA,GAAe,QAAA,CAAE,KAAF,CAAA;AACrB,gBAAA;YAAQ,MAAM,CAAC,IAAP,CAAY,KAAZ;YACA,qCAAoB,CAAE,iBAAZ,KAAuB,IAAjC;AAAA,qBAAA;;AACA,oBAAO,KAAK,CAAC,EAAb;AAAA,mBACO,eADP;uBAC6B,MAAM,CAAC,IAAP,CAAY,GAAZ;AAD7B,mBAEO,UAFP;uBAE6B,MAAM,CAAC,IAAP,CAAY,GAAZ;AAF7B,mBAGO,aAHP;uBAG6B,MAAM,CAAC,IAAP,CAAY,KAAK,CAAC,KAAlB;AAH7B;UAHa,EAJrB;;;UAaM,MAAM,CAAC,IAAP,CAAY,KAAZ;AACA;UAAA,KAAA,YAAA;YAAA,YAAA,CAAa,KAAb;UAAA;AACA;UAAA,KAAA,aAAA;YAAA,YAAA,CAAa,KAAb;UAAA;UACA,WAAA,GAAc,MAAM,CAAC,IAAP,CAAY,EAAZ;UACd,CAAC,CAAC,QAAF,CAAW,CAAA,CAAA,CAAG,GAAA,CAAI,KAAJ,CAAH,CAAA,IAAA,CAAA,CAAmB,GAAA,CAAI,WAAJ,CAAnB,CAAA,CAAX,EAAiD,MAAjD;UACA,CAAC,CAAC,QAAF,CAAW,CAAA,CAAA,CAAG,GAAA,CAAI,KAAJ,CAAH,CAAA,IAAA,CAAA,CAAmB,GAAA,CAAI,WAAJ,CAAnB,CAAA,CAAX;;AAAmD;YAAA,KAAA,0CAAA;;kBAAuB,CAAI,CAAC,CAAC;6BAA7B;;YAAA,CAAA;;cAAnD,EAlBN;;iBAoBM,OAAA,CAAQ,WAAR;QArB2D,CAAZ;MAAV,CAAjC;IADR;wCAwBA;EA5CsB,EArMxB;;;EAoPA,IAAC,CAAA,wBAAD,GAA4B,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC5B,QAAA,cAAA,EAAA,eAAA,EAAA,QAAA,EAAA,eAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA;IAAE,CAAA,CAAE,QAAF,EACE,eADF,CAAA,GAC0B,OAAA,CAAQ,wBAAR,CAD1B;IAEA,CAAA,CAAE,cAAF,EACE,eADF,CAAA,GAC0B,OAAA,CAAQ,wBAAR,CAD1B;IAEA,mBAAA,GAAsB,CACpB,CAAE,EAAF,EAAM,GAAN,EAAW,IAAX,CADoB,EAEpB,CAAE,WAAF,EAAe,aAAf,EAA8B,IAA9B,CAFoB,EAGpB,CAAE,wBAAF,EAA4B,yBAA5B,EAAuD,IAAvD,CAHoB,EAIpB,CAAE,0BAAF,EAA8B,2BAA9B,EAA2D,IAA3D,CAJoB,EAJxB;;IAWE,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB;MACF,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;AAAG,eAAO,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,EAAW,MAAX,CAAA;AACjE,cAAA,CAAA,EAAA,GAAA,EAAA,YAAA,EAAA,IAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,WAAA,EAAA,UAAA,EAAA,CAAA,EAAA,KAAA,EAAA,MAAA,EAAA;UAAM,CAAA,GAAc,IAAI,eAAJ,CAAA;UACd,MAAA,GAAc;UACd,MAAA,GAAc,GAFpB;;UAIM,YAAA,GAAe,QAAA,CAAE,KAAF,CAAA;AACrB,gBAAA;YAAQ,MAAM,CAAC,IAAP,CAAY,KAAZ;YACA,qCAAoB,CAAE,iBAAZ,KAAuB,IAAjC;AAAA,qBAAA;aADR;;AAGQ,oBAAO,KAAK,CAAC,EAAb;AAAA,mBACO,eADP;uBAC6B,MAAM,CAAC,IAAP,CAAY,GAAZ;AAD7B,mBAEO,UAFP;uBAE6B,MAAM,CAAC,IAAP,CAAY,GAAZ;AAF7B,mBAGO,aAHP;uBAG6B,MAAM,CAAC,IAAP,CAAY,KAAK,CAAC,KAAlB;AAH7B;UAJa;AASf;;UAAA,KAAA,QAAA;aAAI,CAAE,GAAF,EAAO,IAAP,EAAa,GAAb;YACF,CAAC,CAAC,IAAF,CAAO,IAAP;AACA;YAAA,KAAA,aAAA;cAAA,YAAA,CAAa,KAAb;YAAA;UAFF;AAGA;UAAA,KAAA,aAAA;YAAA,YAAA,CAAa,KAAb;UAAA;UACA,WAAA,GAAc,MAAM,CAAC,IAAP,CAAY,EAAZ;UACd,UAAA,GAAc;;AAAE;YAAA,KAAA,0CAAA;;kBAA6B,CAAI,CAAC,CAAC;6BAAnC,CAAC,CAAC;;YAAF,CAAA;;cAAF,CAA+C,CAAC,IAAhD,CAAqD,EAArD,EAlBpB;;UAoBM,CAAC,CAAC,QAAF,CAAW,CAAA,CAAA,CAAG,GAAA,CAAI,KAAJ,CAAH,CAAA,IAAA,CAAA,CAAmB,GAAA,CAAI,UAAJ,CAAnB,CAAA,EAAA,CAAA,CAAsC,GAAA,CAAI,OAAJ,CAAtC,CAAA,CAAA,CAAX,EAAiE,MAAjE;UACA,CAAC,CAAC,QAAF,CAAW,CAAA,CAAA,CAAG,GAAA,CAAI,KAAJ,CAAH,CAAA,IAAA,CAAA,CAAmB,GAAA,CAAI,WAAJ,CAAnB,CAAA,CAAX;;AAAmD;YAAA,KAAA,0CAAA;;kBAAuB,CAAI,CAAC,CAAC;6BAA7B;;YAAA,CAAA;;cAAnD;iBACA,OAAA,CAAQ,WAAR;QAvB2D,CAAZ;MAAV,CAAjC;IADR;wCA0BA;EAtC0B,EApP5B;;;EA8RA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA;;;;;;;;aAQhC,IAAA,CAAK,IAAC,CAAA,oBAAN;IARgC,CAAA,IAAlC;;;EA9RA;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN/TESTS/BASICS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nH                         = require './helpers'\n# after                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@parse_md_stars_markup = ( T, done ) ->\n  { Hypedown_lexer  } = require '../../../apps/hypedown'\n  { $040_stars      } = require '../../../apps/hypedown/lib/_hypedown-parser-xxx-temp'\n  probes_and_matchers = [\n    [ '*abc*', '<i>abc</i>\\n', null ]\n    [ '*abc*\\n*abc*', '<i>abc</i>\\n<i>abc</i>\\n', null ]\n    [ '*abc*\\n\\n*abc*', '<i>abc</i>\\n\\n<i>abc</i>\\n', null ]\n    [ '**def**', '<b>def</b>\\n', null ]\n    [ '**x*def*x**', '<b>x<i>def</i>x</b>\\n', null ]\n    [ '*x**def**x*', '<i>x<b>def</b>x</i>\\n', null ]\n    [ '***abc*def**', '<b><i>abc</i>def</b>\\n', null ]\n    [ '*x***def**', '<i>x</i><b>def</b>\\n', null ]\n    [ '**x***def*', '<b>x</b><i>def</i>\\n', null ]\n    [ '*', '<i>\\n', null ]\n    [ '**', '<b>\\n', null ]\n    [ '***', '<b><i>\\n', null ]\n    [ '***def***', '<b><i>def</i></b>\\n', null ]\n    [ '***abc**def*', '<b><i>abc</i></b><i>def</i>\\n', null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer       = new Hypedown_lexer()\n      parser      = new $040_stars()\n      tokens      = []\n      for d from lexer.walk probe\n        parser.send d\n        for token from parser.walk()\n          debug '^345^', ( rpr token.value )\n          tokens.push token\n      # p           = new Hypedown_parser()\n      # p.send probe\n      # result      = p.run()\n      result_html = ( t.value for t in tokens when not t.$stamped ).join ''\n      H.tabulate \"#{rpr probe} -> #{rpr result_html}\", tokens\n      H.tabulate \"#{rpr probe} -> #{rpr result_html}\", ( t for t in tokens when not t.$stamped )\n      #.....................................................................................................\n      resolve result_html\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_codespans_and_single_star = ( T, done ) ->\n  { XXX_new_token\n    Hypedown_lexer\n    Hypedown_parser } = require '../../../apps/hypedown'\n  probes_and_matchers = [\n    [ \"`abc`\", \"<p><code>abc</code>\\n\", ]\n    [ \"*abc*\", \"<p><i>abc</i>\\n\", ]\n    [ '*foo* `*bar*` baz', '<p><i>foo</i> <code>*bar*</code> baz\\n', null ]\n    [ '*foo* ``*bar*`` baz', '<p><i>foo</i> <code>*bar*</code> baz\\n', null ]\n    [ '*foo* ````*bar*```` baz', '<p><i>foo</i> <code>*bar*</code> baz\\n', null ]\n    [ 'helo `world`!', '<p>helo <code>world</code>!\\n', null ]\n    [ 'foo\\n\\nbar\\n\\nbaz', '<p>foo\\n\\n<p>bar\\n\\n<p>baz\\n', null ]\n    [ '*foo* ``*bar*``` baz', '<p><i>foo</i> \\n', null ] ### TAINT preliminary, lack of STOP token ###\n    [ '*foo* ```*bar*`` baz', '<p><i>foo</i> \\n', null ] ### TAINT preliminary, lack of STOP token ###\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      p           = new Hypedown_parser()\n      # H.tabulate ( rpr 'helo'   ), p.lexer.run 'helo'\n      # H.tabulate ( rpr '`helo`' ), p.lexer.run '`helo`'\n      # H.tabulate ( rpr '*helo*' ), p.lexer.run '*helo*'\n      # for mode, entry of p.lexer.registry\n      #   # debug '^2325687^', entry\n      #   for tid, lexeme of entry.lexemes\n      #     urge '^2325687^', \"#{lexeme.mode}:#{lexeme.tid}\"\n      # process.exit 111\n      for line from GUY.str.walk_lines probe\n        p.send line\n      result      = p.run()\n      result_txt  = ( d.value for d in result when not d.$stamped ).join ''\n      # urge '^08-1^', ( Object.keys d ).sort() for d in result\n      # H.tabulate \"#{rpr probe} -> #{rpr result_txt} (#{rpr matcher})\", result\n      H.tabulate \"#{rpr probe} -> #{rpr result_txt} (#{rpr matcher})\", ( t for t in result when not t.$stamped )\n      resolve result_txt\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_codespans_with_whitespace = ( T, done ) ->\n  { XXX_new_token\n    Hypedown_lexer\n    Hypedown_parser } = require '../../../apps/hypedown'\n  probes_and_matchers = [\n    [ \"`` `abc` ``\", \"<p><code>`abc`</code>\\n\", ]\n    [ \"`` `abc\\\\` ``\", \"<p><code>`abc`</code>\\n\", ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      p           = new Hypedown_parser()\n      # H.tabulate ( rpr 'helo'   ), p.lexer.run 'helo'\n      # H.tabulate ( rpr '`helo`' ), p.lexer.run '`helo`'\n      # H.tabulate ( rpr '*helo*' ), p.lexer.run '*helo*'\n      # for mode, entry of p.lexer.registry\n      #   # debug '^2325687^', entry\n      #   for tid, lexeme of entry.lexemes\n      #     urge '^2325687^', \"#{lexeme.mode}:#{lexeme.tid}\"\n      # process.exit 111\n      for line from GUY.str.walk_lines probe\n        p.send line\n      result      = p.run()\n      result_txt  = ( d.value for d in result when not d.$stamped ).join ''\n      # urge '^08-1^', ( Object.keys d ).sort() for d in result\n      # H.tabulate \"#{rpr probe} -> #{rpr result_txt} (#{rpr matcher})\", result\n      # H.tabulate \"#{rpr probe} -> #{rpr result_txt} (#{rpr matcher})\", ( t for t in result when not t.$stamped )\n      resolve result_txt\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_headings = ( T, done ) ->\n  { Pipeline\n    Pipeline_module     } = require '../../../apps/hypedown'\n  { Hypedown_lexer      } = require '../../../apps/hypedown'\n  XXX_TEMP                = require '../../../apps/hypedown/lib/_hypedown-parser-xxx-temp'\n  probes_and_matchers = [\n    [ \"# H1\", \"<h1>H1\\n\", ]\n    [ \"x # H1\", \"x # H1\\n\", ]\n    [ \"x\\n# H1\", \"x\\n# H1\\n\", ]\n    [ \"x\\n\\n# H1\", \"x\\n\\n<h1> H1\\n\", ]\n    # [ \"\\n# H1\", \"\\n<h1>H1\\n\", ]\n    # [ \"## Section\", \"<h2>Section\\n\", ]\n    # [ \"not a\\n# heading\", 'not a\\n# heading\\n', ]\n    # [ 'x', 'x\\n', null ]\n    # [ \"\\n\\nx\\n\\n\\n\\n\", 'not a\\nheading\\n', ]\n    # [ \"paragraph 1\\n\\n\\n\\nparagraph 2\", 'not a\\nheading\\n', ]\n    # [ '', '', ]\n    # [ \"\\n\", 'not a\\nheading\\n', ]\n    # [ \"\\n\\nnot a\\nheading\", 'not a\\nheading\\n', ]\n    ]\n  #.........................................................................................................\n  class Md_parser extends Pipeline_module\n    $010_prepare_paragraphs:  XXX_TEMP.$010_prepare_paragraphs\n    $050_hash_headings:       XXX_TEMP.$050_hash_headings\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer       = new Hypedown_lexer()\n      parser      = new Md_parser()\n      tokens      = []\n      for d from lexer.walk probe\n        parser.send d\n        for token from parser.walk()\n          debug '^345^', ( rpr token.value )\n          tokens.push token\n      # p           = new Hypedown_parser()\n      # p.send probe\n      # result      = p.run()\n      result_html = ( t.value for t in tokens when not t.$stamped ).join ''\n      H.tabulate \"#{rpr probe} -> #{rpr result_html}\", tokens\n      H.tabulate \"#{rpr probe} -> #{rpr result_html}\", ( t for t in tokens when not t.$stamped )\n      #.....................................................................................................\n      resolve result_html\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@add_parbreak_markers = ( T, done ) ->\n  { Pipeline\n    Pipeline_module     } = require '../../../apps/hypedown'\n  { Hypedown_lexer      } = require '../../../apps/hypedown'\n  XXX_TEMP                = require '../../../apps/hypedown/lib/_hypedown-parser-xxx-temp'\n  probes_and_matchers = [\n    [ '', '⏎', null ]\n    [ 'paragraph', '⎈paragraph⏎', null ]\n    [ 'par1 lnr 1\\npar1 lnr 2', '⎈par1 lnr 1⏎par1 lnr 2⏎', null ]\n    [ 'par1 lnr 1\\n\\npar2 lnr 1', '⎈par1 lnr 1⏎⏎⎈par2 lnr 1⏎', null ]\n    ]\n  #.........................................................................................................\n  new_parser = ( lexer ) ->\n    class Md_parser extends Pipeline_module\n      tokenize_line: ( line, send ) ->\n        send token for token from lexer.walk line\n        return null\n      $010_prepare_paragraphs:  XXX_TEMP.$010_prepare_paragraphs\n    return new Md_parser()\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      parser      = new_parser new Hypedown_lexer()\n      tokens      = []\n      result      = []\n      #.....................................................................................................\n      handle_token = ( token ) ->\n        tokens.push token\n        return if token.data?.virtual is true\n        switch token.mk\n          when 'html:parbreak'  then result.push '⎈'\n          when 'plain:nl'       then result.push '⏎'\n          when 'plain:other'    then result.push token.value\n      #.....................................................................................................\n      # for line from GUY.str.walk_lines probe\n      parser.send probe\n      handle_token token for token from parser.walk()\n      handle_token token for token from parser.stop_walk()\n      result_html = result.join ''\n      H.tabulate \"#{rpr probe} -> #{rpr result_html}\", tokens\n      H.tabulate \"#{rpr probe} -> #{rpr result_html}\", ( t for t in tokens when not t.$stamped )\n      #.....................................................................................................\n      resolve result_html\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@add_parbreak_markers_OLD = ( T, done ) ->\n  { Pipeline\n    Pipeline_module     } = require '../../../apps/hypedown'\n  { Hypedown_lexer\n    Hypedown_parser     } = require '../../../apps/hypedown'\n  probes_and_matchers = [\n    [ '', '⏎', null ]\n    [ 'paragraph', '⎈paragraph⏎', null ]\n    [ 'par1 lnr 1\\npar1 lnr 2', '⎈par1 lnr 1⏎par1 lnr 2⏎', null ]\n    [ 'par1 lnr 1\\n\\npar2 lnr 1', '⎈par1 lnr 1⏎⏎⎈par2 lnr 1⏎', null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      p           = new Hypedown_parser()\n      tokens      = []\n      result      = []\n      #.....................................................................................................\n      handle_token = ( token ) ->\n        tokens.push token\n        return if token.data?.virtual is true\n        # debug '^345^', token.mk, ( rpr token.value )\n        switch token.mk\n          when 'html:parbreak'  then result.push '⎈'\n          when 'plain:nl'       then result.push '⏎'\n          when 'plain:other'    then result.push token.value\n      #.....................................................................................................\n      for { lnr, line, eol, } from GUY.str.walk_lines_with_positions probe\n        p.send line\n        handle_token token for token from p.walk()\n      handle_token token for token from p.stop_walk()\n      result_html = result.join ''\n      result_rpr  = ( d.value for d in result when not d.$stamped ).join ''\n      # urge '^08-1^', ( Object.keys d ).sort() for d in result\n      H.tabulate \"#{rpr probe} -> #{rpr result_rpr} (#{rpr matcher})\", tokens\n      H.tabulate \"#{rpr probe} -> #{rpr result_html}\", ( t for t in tokens when not t.$stamped )\n      resolve result_html\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # test @parse_codespans_and_single_star\n  # test @parse_codespans_with_whitespace\n  # @parse_md_stars_markup()\n  # test @parse_md_stars_markup\n  # test @parse_headings\n  # @add_parbreak_markers()\n  test @add_parbreak_markers\n  # @add_parbreak_markers_OLD()\n  # test @add_parbreak_markers_OLD\n\n"
  ]
}