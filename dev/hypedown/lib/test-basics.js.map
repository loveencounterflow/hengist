{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN/TESTS/BASICS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nH                         = require './helpers'\n# after                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@parse_md_stars_markup = ( T, done ) ->\n  { Hypedown_lexer\n    Hypedown_parser } = require '../../../apps/hypedown'\n  { XXX_new_token }   = require '../../../apps/hypedown/lib/helpers'\n  probes_and_matchers = [\n    # [ '*abc*', '<p><i>abc</i>\\n', null ]\n    # [ '*abc*\\n*abc*', '<p><i>abc</i>\\n<i>abc</i>\\n', null ]\n    # [ '*abc*\\n\\n*abc*', '<p><i>abc</i>\\n\\n<p><i>abc</i>\\n', null ]\n    # [ '**def**', '<p><b>def</b>\\n', null ]\n    # [ '**x*def*x**', '<p><b>x<i>def</i>x</b>\\n', null ]\n    # [ '*x**def**x*', '<p><i>x<b>def</b>x</i>\\n', null ]\n    # [ '***abc*def**', '<p><b><i>abc</i>def</b>\\n', null ]\n    # [ '*x***def**', '<p><i>x</i><b>def</b>\\n', null ]\n    # [ '**x***def*', '<p><b>x</b><i>def</i>\\n', null ]\n    # [ '*', '<p><i>\\n', null ]\n    # [ '**', '<p><b>\\n', null ]\n    [ '***', '<p><b><i>\\n', null ]\n    [ '***def***', '<p><b><i>def</i></b>\\n', null ]\n    [ '***abc**def*', '<p><b><i>abc</i></b><i>def</i>\\n', null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      p           = new Hypedown_parser()\n      p.send probe\n      result      = p.run()\n      result_html = ( d.value for d in result when not d.$stamped ).join ''\n      H.tabulate \"#{rpr probe} -> #{rpr result_html}\", result\n      H.tabulate \"#{rpr probe} -> #{rpr result_html}\", ( t for t in result when not t.$stamped )\n      #.....................................................................................................\n      resolve result_html\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_codespans_and_single_star = ( T, done ) ->\n  { XXX_new_token\n    Hypedown_lexer\n    Hypedown_parser } = require '../../../apps/hypedown'\n  probes_and_matchers = [\n    # [ \"`abc`\", \"<p><code>abc</code>\\n\", ]\n    # [ \"*abc*\", \"<p><i>abc</i>\\n\", ]\n    # [ '*foo* `*bar*` baz', '<p><i>foo</i> <code>*bar*</code> baz\\n', null ]\n    # [ '*foo* ``*bar*`` baz', '<p><i>foo</i> <code>*bar*</code> baz\\n', null ]\n    # [ '*foo* ````*bar*```` baz', '<p><i>foo</i> <code>*bar*</code> baz\\n', null ]\n    # [ 'helo `world`!', '<p>helo <code>world</code>!\\n', null ]\n    [ 'foo\\n\\nbar\\n\\nbaz', '<p>foo\\n\\n<p>bar\\n\\n<p>baz\\n', null ]\n    # [ '*foo* ``*bar*``` baz', '<p><i>foo</i> <code>*bar*``` baz\\n', null ]\n    # [ '*foo* ```*bar*`` baz', '<p><i>foo</i> <code>*bar*`` baz\\n', null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      p           = new Hypedown_parser()\n      # H.tabulate ( rpr 'helo'   ), p.lexer.run 'helo'\n      # H.tabulate ( rpr '`helo`' ), p.lexer.run '`helo`'\n      # H.tabulate ( rpr '*helo*' ), p.lexer.run '*helo*'\n      # for mode, entry of p.lexer.registry\n      #   # debug '^2325687^', entry\n      #   for tid, lexeme of entry.lexemes\n      #     urge '^2325687^', \"#{lexeme.mode}:#{lexeme.tid}\"\n      # process.exit 111\n      for line from GUY.str.walk_lines probe\n        p.send line\n      result      = p.run()\n      result_txt  = ( d.value for d in result when not d.$stamped ).join ''\n      # urge '^08-1^', ( Object.keys d ).sort() for d in result\n      H.tabulate \"#{rpr probe} -> #{rpr result_txt} (#{rpr matcher})\", result\n      H.tabulate \"#{rpr probe} -> #{rpr result_txt} (#{rpr matcher})\", ( t for t in result when not t.$stamped )\n      resolve result_txt\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_headings = ( T, done ) ->\n  { XXX_new_token\n    Hypedown_lexer\n    Hypedown_parser } = require '../../../apps/hypedown'\n  probes_and_matchers = [\n    # [ \"# H1\", \"<h1>H1\\n\", ]\n    # [ \"\\n# H1\", \"\\n<h1>H1\\n\", ]\n    # [ \"## Section\", \"<h2>Section\\n\", ]\n    # [ \"not a\\n# heading\", 'not a\\n# heading\\n', ]\n    # [ 'x', 'x\\n', null ]\n    # [ \"\\n\\nx\\n\\n\\n\\n\", 'not a\\nheading\\n', ]\n    [ \"paragraph 1\\n\\n\\n\\nparagraph 2\", 'not a\\nheading\\n', ]\n    # [ '', '', ]\n    # [ \"\\n\", 'not a\\nheading\\n', ]\n    # [ \"\\n\\nnot a\\nheading\", 'not a\\nheading\\n', ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      p           = new Hypedown_parser()\n      for { lnr, line, eol, } from GUY.str.walk_lines_with_positions probe\n        debug '^'\n        p.send line\n      result      = p.run()\n      result_rpr  = ( d.value for d in result when not d.$stamped ).join ''\n      # urge '^08-1^', ( Object.keys d ).sort() for d in result\n      H.tabulate \"#{rpr probe} -> #{rpr result_rpr} (#{rpr matcher})\", result # unless result_rpr is matcher\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # test @parse_codespans_and_single_star\n  test @parse_md_stars_markup\n  # test @parse_headings\n\n"
  ]
}