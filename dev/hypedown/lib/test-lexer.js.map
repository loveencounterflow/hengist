{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-lexer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN/TESTS/LEXER'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nH                         = require './helpers'\n# after                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n#-----------------------------------------------------------------------------------------------------------\n@lex_md_stars_markup = ( T, done ) ->\n  { Hypedown_lexer  } = require '../../../apps/hypedown'\n  probes_and_matchers = [\n    [ '*abc*', \"plain:star1'*',plain:other'abc',plain:star1'*'\", null ]\n    [ '*abc*\\n*abc*', \"plain:star1'*',plain:other'abc',plain:star1'*',plain:star1'*',plain:other'abc',plain:star1'*'\", null ]\n    [ '*abc*\\n\\n*abc*', \"plain:star1'*',plain:other'abc',plain:star1'*',plain:star1'*',plain:other'abc',plain:star1'*'\", null ]\n    [ '**def**', \"plain:star2'**',plain:other'def',plain:star2'**'\", null ]\n    [ '**x*def*x**', \"plain:star2'**',plain:other'x',plain:star1'*',plain:other'def',plain:star1'*',plain:other'x',plain:star2'**'\", null ]\n    [ '*x**def**x*', \"plain:star1'*',plain:other'x',plain:star2'**',plain:other'def',plain:star2'**',plain:other'x',plain:star1'*'\", null ]\n    [ '***abc*def**', \"plain:star3'***',plain:other'abc',plain:star1'*',plain:other'def',plain:star2'**'\", null ]\n    [ '*x***def**', \"plain:star1'*',plain:other'x',plain:star3'***',plain:other'def',plain:star2'**'\", null ]\n    [ '**x***def*', \"plain:star2'**',plain:other'x',plain:star3'***',plain:other'def',plain:star1'*'\", null ]\n    [ '*', \"plain:star1'*'\", null ]\n    [ '**', \"plain:star2'**'\", null ]\n    [ '***', \"plain:star3'***'\", null ]\n    [ '***def***', \"plain:star3'***',plain:other'def',plain:star3'***'\", null ]\n    [ '***abc**def*', \"plain:star3'***',plain:other'abc',plain:star2'**',plain:other'def',plain:star1'*'\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer       = new Hypedown_lexer()\n      tokens      = []\n      for d from lexer.walk probe\n        tokens.push d\n      result = ( \"#{t.mk}#{rpr t.value}\" for t in tokens when t.mk isnt 'plain:nl' ).join ','\n      # H.tabulate \"#{rpr probe} -> #{rpr result}\", tokens\n      # H.tabulate \"#{rpr probe} -> #{rpr result}\", ( t for t in tokens when not t.$stamped )\n      resolve result\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@lex_codespans_and_single_star = ( T, done ) ->\n  { Hypedown_lexer  } = require '../../../apps/hypedown'\n  probes_and_matchers = [\n    [ \"`abc`\", \"<code>abc</code>\\n\", ]\n    # [ \"*abc*\", \"<i>abc</i>\\n\", ]\n    # [ '*foo* `*bar*` baz', '<i>foo</i> <code>*bar*</code> baz\\n', null ]\n    # [ '*foo* ``*bar*`` baz', '<i>foo</i> <code>*bar*</code> baz\\n', null ]\n    # [ '*foo* ````*bar*```` baz', '<i>foo</i> <code>*bar*</code> baz\\n', null ]\n    # [ 'helo `world`!', 'helo <code>world</code>!\\n', null ]\n    # [ 'foo\\n\\nbar\\n\\nbaz', 'foo\\n\\nbar\\n\\nbaz\\n', null ]\n    # [ '*foo* ``*bar*``` baz', '<i>foo</i> <code>*bar*</code> baz\\n', null ] ### TAINT preliminary, lack of STOP token ###\n    # [ '*foo* ```*bar*`` baz', '<i>foo</i> <code>*bar*`` baz</code>\\n', null ] ### TAINT preliminary, lack of STOP token ###\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer       = new Hypedown_lexer()\n      tokens      = []\n      for d from lexer.walk probe\n        tokens.push d\n      result = ( \"#{t.mk}#{rpr t.value}\" for t in tokens when t.mk isnt 'plain:nl' ).join ','\n      # H.tabulate \"#{rpr probe} -> #{rpr result}\", tokens\n      # H.tabulate \"#{rpr probe} -> #{rpr result}\", ( t for t in tokens when not t.$stamped )\n      resolve result\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  test @lex_codespans_and_single_star\n"
  ]
}