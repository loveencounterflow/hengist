{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/experiment-modular-parser-pipeline.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN/TESTS/STOP-MARKERS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n# test                      = require '../../../apps/guy-test'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nH                         = require './helpers'\n# after                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n{ Pipeline }              = require '../../../apps/moonriver'\n\n###\n\n# Modular Pipeline\n\n* derive pipeline module class from class `Pipeline_module`\n* base class looks for methods on instance (prototype) whose names start with a dollar sign `$`\n* each of these will be called, added to pipeline\n* constructor returns new instance of a MoonRiver `Pipeline` containing the results of calling each `$`\n  method\n* ordering is preserved\n* modules may in turn be combined\n* can return list with\n  * functions that when called return a transform; these transforms must have a name that starts with a\n    dollar sign `$`\n  * functions (whose name must not start with a dollar sign `$`)\n  * instances of `Pipeline`\n  * instances of (derivatives of) `Pipeline_module`\n  * classes derivatived from `Pipeline_module` (will be instantiated)\n\n###\n\n\n#===========================================================================================================\nclass Pipeline_module\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    GUY.props.hide @, 'types', types\n    return @_build()\n\n  #---------------------------------------------------------------------------------------------------------\n  _build: ( value = null ) ->\n    R = new Pipeline()\n    for k in GUY.props.keys @, { hidden: true, }\n      continue unless /^\\$/.test k\n      R.push d for d from @_walk_values @[ k ]\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_values: ( value ) ->\n    value = new value() if @types.isa.class value\n    #.......................................................................................................\n    if @types.isa.function value\n      return yield value unless value.name.startsWith '$'\n      return yield value.call @\n    #.......................................................................................................\n    if @types.isa.list value\n      for e in value\n        yield d for d from @_walk_values e\n      return null\n    #.......................................................................................................\n    if value instanceof Pipeline\n      return yield value\n    #.......................................................................................................\n    throw new Error \"^Pipeline_module@1^ unable to ingest #{rpr value}\"\n\n\n#===========================================================================================================\nclass P_1 extends Pipeline_module\n\n  $p_1_1: -> p_1_1 = ( d ) -> help '$p_1_1'\n  $p_1_2: -> p_1_2 = ( d ) -> help '$p_1_2'\n  $p_1_3: -> p_1_3 = ( d ) -> help '$p_1_3'\n\n#===========================================================================================================\nclass P_2 extends Pipeline_module\n\n  $p_2_1: -> p_2_1 = ( d ) -> help '$p_2_1'\n  $p_2_2: -> p_2_2 = ( d ) -> help '$p_2_2'\n  $p_2_3: -> p_2_3 = ( d ) -> help '$p_2_3'\n\n#===========================================================================================================\nclass P_12 extends Pipeline_module\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    super()\n    # R = new Pipeline()\n    @push new P_1()\n    @push new P_2()\n    return undefined\n\n#===========================================================================================================\nclass P_12_x extends Pipeline_module\n\n  $: [\n    direct_fn     =    ( d ) -> help 'direct_fn'\n    $indirect_fn  = -> ( d ) -> help '$indirect_fn'\n    new P_1()\n    P_2\n    ]\n\n\n#===========================================================================================================\ndemo_1 = ->\n  # whisper '^21^', '——————'\n  # p = new Pipeline_module()\n  whisper '^21^', '——————'\n  p = new P_12()\n  debug '^21^', p\n  p.send 'x'\n  p.run()\n  whisper '^21^', '——————'\n  p = new P_12_x()\n  debug '^21^', p\n  p.send 'x'\n  p.run()\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  demo_1()\n\n"
  ]
}