{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER/TESTS/BASICS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# SQL                       = String.raw\nH                         = require '../../../lib/helpers'\n# after                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nshow_lexer_as_table = ( title, lexer ) ->\n  lexemes = []\n  for mode, entry of lexer.registry\n    for tid, lexeme of entry.lexemes\n      lexemes.push lexeme\n  H.tabulate title, lexemes\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  { Hypedown_parser } = require '../../../apps/hypedown'\n  probes_and_matchers = [\n    [ \"*abc*\", \"<i>abc</i>\", ]\n    [ 'helo `world`!', 'helo <code>world</code>!', null ]\n    [ '*foo* `*bar*` baz', '<i>foo</i> <code>*bar*</code> baz', null ]\n    [ '*foo* ``*bar*`` baz', '<i>foo</i> <code>*bar*</code> baz', null ]\n    [ '*foo* ````*bar*```` baz', '<i>foo</i> <code>*bar*</code> baz', null ]\n    [ '*foo* ``*bar*``` baz', '<i>foo</i> <code>*bar*``` baz', null ]\n    [ '*foo* ```*bar*`` baz', '<i>foo</i> <code>*bar*`` baz', null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    p = new Hypedown_parser()\n    p.send new_token '^Ã¦19^', { start: 0, stop: probe.length, }, 'plain', 'p', null, probe\n    result      = p.run()\n    result_rpr  = ( d.value for d in result when not d.$stamped ).join ''\n    # urge '^08-1^', ( Object.keys d ).sort() for d in result\n    H.tabulate \"#{probe} -> #{result_rpr} (#{matcher})\", result # unless result_rpr is matcher\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use upcoming implementation in `guy` ###\nwalk_lines = ( text, cfg ) ->\n  validate.text text\n  template      = { keep_newlines: true, }\n  cfg           = { template..., cfg..., }\n  pattern       = /.*?(\\n|$)/suy\n  last_position = text.length - 1\n  loop\n    break if pattern.lastIndex > last_position\n    break unless ( match = text.match pattern )? ### internal error ###\n    Y = match[ 0 ]\n    Y = Y[ ... Y.length - 1 ] unless cfg.keep_newlines\n    yield Y\n  R = walk_lines()\n  R.reset = -> pattern.lastIndex = 0\n  return R\n\n\n############################################################################################################\nif require.main is module then do =>\n  demo()\n\n\n"
  ]
}