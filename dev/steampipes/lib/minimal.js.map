{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/minimal.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MINIMAL'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  #.........................................................................................................\n  $source = ( a_list ) ->\n    exhausted = false\n    return source = ( d, send ) ->\n      send d\n      unless exhausted\n        for e in a_list\n          help '^source^', e\n          send e\n        exhausted = true\n      return null\n  #.........................................................................................................\n  $addsome = ->\n    return addsome = ( d, send ) ->\n      help '^addsome^', d\n      send d * 100 + 1\n      send d * 100 + 2\n      # send.exit() if d is 2\n      # send.pass() if d is 2\n      # throw send.symbol.exit if d is 2\n      # throw send.symbol.done if d is 2\n      return null\n  #.........................................................................................................\n  $embellish = ->\n    return embellish = ( d, send ) ->\n      help '^embellish^', d\n      send \"*#{rpr d}*\"\n      return null\n  #.........................................................................................................\n  $show = ->\n    return show = ( d, send ) ->\n      help '^show^', d\n      info d\n      send d\n      return null\n  #.........................................................................................................\n  pipeline  = []\n  pipeline.push $source [ 1, 2, 3, ]\n  pipeline.push $addsome()\n  pipeline.push $embellish()\n  pipeline.push $show()\n  pipeline = new Steampipe pipeline\n  pipeline.drive { mode: 'depth', }\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Steampipe\n  @C =\n    symbol    =\n      drop:       Symbol.for 'drop' # this value will not go to output\n      exit:       Symbol.for 'exit' # exit pipeline processing\n      # done:       Symbol.for 'done' # done for this iteration\n      # pass:       Symbol.for 'pass' # do not call again\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( raw_pipeline ) ->\n    @first_q    = []\n    @last_q     = []\n    @pipeline   = []\n    last_idx    = raw_pipeline.length - 1\n    @inputs     = []\n    for tf, idx in raw_pipeline\n      do =>\n        input       = if idx is 0         then @first_q  else @pipeline[ idx - 1 ].output\n        output      = if idx is last_idx  then @last_q   else []\n        entry       = { tf, input, output, exit: false, }\n        # entry       = { tf, input, output, done: false, pass: false, exit: false, }\n        send        = ( d ) ->\n          switch d\n            when symbol.drop\n              info \"dropped: #{rpr d}\"\n            # when symbol.done\n            #   info \"done: #{rpr d}\"\n            #   @done = true\n            # when symbol.pass\n            #   info \"pass: #{rpr d}\"\n            #   @pass = true\n            when symbol.exit\n              info \"exit: #{rpr d}\"\n              @exit = true\n            else\n              @output.push d\n          return null\n        send        = send.bind entry\n        send.symbol = symbol\n        # send.done   = -> send send.symbol.done\n        # send.pass   = -> send send.symbol.pass\n        send.exit   = -> send send.symbol.exit\n        entry.send  = send\n        @pipeline.push entry\n        @inputs.push input\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  drive: ( cfg ) ->\n    { mode          } = cfg\n    @_show_pipeline()\n    round = 0\n    try\n      loop\n        round++\n        whisper '^4958^', \"round #{round} -------------------------------\"\n        for idx in [ 0 .. 3 ]\n          segment = @pipeline[ idx ]\n          if idx is 0\n            segment.tf symbol.drop, segment.send\n          else\n            while segment.input.length > 0\n              segment.tf segment.input.shift(), segment.send\n              break if mode is 'depth'\n          # @_show_pipeline()\n          if segment.exit\n            info '^443^', \"stopped by #{rpr segment}\"\n            throw symbol.exit\n        break unless @inputs.some ( x ) -> x.length > 0\n    catch error\n      # throw error unless typeof error is 'symbol'\n      throw error unless error is symbol.exit\n      warn error\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _show_pipeline: ->\n    urge @inputs[ 0 ]\n    for segment in @pipeline\n      urge segment.tf.name ? '?', segment.output\n    return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  demo()\n\n\n\n"
  ]
}