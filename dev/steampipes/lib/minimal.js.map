{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/minimal.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MINIMAL'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n\n\n\n\n$source = ( a_list ) ->\n  exhausted = false\n  return source = ( d, send ) ->\n    send d\n    unless exhausted\n      for e in a_list\n        help '^source^', e\n        send e\n      send.done()\n      exhausted = true\n    return null\n\n$addsome = ->\n  return addsome = ( d, send ) ->\n    help '^addsome^', d\n    send d + 100\n    send d + 200\n    return null\n\n$embellish = ->\n  return embellish = ( d, send ) ->\n    help '^embellish^', d\n    send \"*#{rpr d}*\"\n    return null\n\n$show = ->\n  return show = ( d, send ) ->\n    help '^show^', d\n    info d\n    send d\n    return null\n\nraw_pipeline = [\n  $source [ 1, 2, 3, ]\n  $addsome()\n  $embellish()\n  $show()\n  ]\n\nsymbol    =\n  done:       Symbol.for 'done'\n  drop:       Symbol.for 'drop'\n  stop:       Symbol.for 'stop'\nfirst_q   = []\nlast_q    = []\npipeline  = []\nlast_idx  = raw_pipeline.length - 1\ninputs    = []\nfor tf, idx in raw_pipeline\n  do =>\n    input       = if idx is 0         then first_q  else pipeline[ idx - 1 ].output\n    output      = if idx is last_idx  then last_q   else []\n    entry       = { tf, input, output, done: false, stopped: false, }\n    send        = ( d ) ->\n      switch d\n        when symbol.drop\n          info \"dropped: #{rpr d}\"\n        when symbol.done\n          info \"done: #{rpr d}\"\n          @done = true\n        when symbol.stop\n          info \"stopped: #{rpr d}\"\n          @stopped = true\n        else\n          @output.push d\n      return null\n    send        = send.bind entry\n    send.symbol = symbol\n    send.done   = -> send send.symbol.done\n    entry.send  = send\n    pipeline.push entry\n    inputs.push input\n\nshow_pipeline = ->\n  urge inputs[ 0 ]\n  for segment in pipeline\n    urge segment.tf.name ? '?', segment.output\n  return null\n\ndrive = ( cfg ) ->\n  { mode } = cfg\n  show_pipeline()\n  round = 0\n  loop\n    round++\n    whisper '^4958^', \"round #{round} -------------------------------\"\n    for idx in [ 0 .. 3 ]\n      segment = pipeline[ idx ]\n      if idx is 0\n        segment.tf symbol.drop, segment.send\n        continue\n      while segment.input.length > 0\n        segment.tf segment.input.shift(), segment.send\n        break if mode is 'depth'\n      show_pipeline()\n    break unless inputs.some ( x ) -> x.length > 0\n  return null\n\n\n# drive { mode: 'breadth', }\ndrive { mode: 'depth', }\n\n# f = ->\n#   yield 1\n#   yield 2\n#   yield 3\n#   return null\n\n# debug g = f()\n# debug g.next()\n# debug g.next()\n# debug g.next()\n# debug g.next()\n\n\n"
  ]
}