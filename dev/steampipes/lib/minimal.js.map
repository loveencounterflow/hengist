{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/minimal.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MINIMAL'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n\n\n\n\n$source = ( a_list ) ->\n  exhausted = false\n  return source = ( d, send ) ->\n    send d\n    unless exhausted\n      for e in a_list\n        help '^source^', e\n        send e\n      send.done()\n      exhausted = true\n    return null\n\naddsome = ( d, send ) ->\n  help '^addsome^', d\n  send d + 100\n  send d + 200\n  return null\n\nembellish = ( d, send ) ->\n  help '^embellish^', d\n  send \"*#{rpr d}*\"\n  return null\n\nshow = ( d, send ) ->\n  help '^show^', d\n  info d\n  send d\n  return null\n\nraw_pipeline = [\n  $source [ 1, 2, 3, ]\n  addsome\n  embellish\n  show\n  ]\n\nsymbol    =\n  done:       Symbol.for 'done'\n  drop:       Symbol.for 'drop'\nfirst_q   = []\nlast_q    = []\npipeline  = []\nlast_idx  = raw_pipeline.length - 1\ninputs    = []\nfor tf, idx in raw_pipeline\n  do =>\n    input       = if idx is 0         then first_q  else pipeline[ idx - 1 ].output\n    output      = if idx is last_idx  then last_q   else []\n    send        = ( d ) ->\n      switch d\n        when symbol.drop\n          info \"dropped: #{rpr d}\"\n        when symbol.done\n          info \"done: #{rpr d}\"\n        else\n          output.push d\n      return null\n    send.symbol = symbol\n    send.done   = -> send send.symbol.done\n    pipeline.push { tf, input, output, send, }\n    inputs.push input\n\ncount = 0\n# for segment in pipeline\n# first_q.unshift 123\npipeline[ 0 ].tf symbol.drop, pipeline[ 0 ].send\n# pipeline[ 0 ].output.unshift 'o0'\n# pipeline[ 1 ].input.unshift 'i1'\n# pipeline[ 1 ].output.unshift 'o1'\n# pipeline[ 2 ].input.unshift 'i2'\n# pipeline[ 2 ].output.unshift 'o2'\n# pipeline[ 1 ].send 99\n\nshow_pipeline = ->\n  urge inputs[ 0 ]\n  for segment in pipeline\n    urge segment.tf.name ? '?', segment.output\n  return null\n\n\ndriver_A = ->\n  show_pipeline()\n  round = 0\n  loop\n    round++\n    whisper '^4958^', \"round #{round} -------------------------------\"\n    for idx in [ 0 .. 3 ]\n      segment = pipeline[ idx ]\n      if idx is 0\n        segment.tf symbol.drop, segment.send\n        continue\n      while segment.input.length > 0\n        segment.tf segment.input.shift(), segment.send\n      show_pipeline()\n    debug '^59587^', inputs\n    break unless inputs.some ( x ) -> x.length > 0\n  return null\n\ndriver_B = ->\n  show_pipeline()\n  round = 0\n  loop\n    round++\n    whisper '^4958^', \"round #{round} -------------------------------\"\n    for idx in [ 0 .. 3 ]\n      segment = pipeline[ idx ]\n      if idx is 0\n        segment.tf symbol.drop, segment.send\n        continue\n      if segment.input.length > 0\n        segment.tf segment.input.shift(), segment.send\n      show_pipeline()\n    debug '^59587^', inputs\n    break unless inputs.some ( x ) -> x.length > 0\n  return null\n\ndriver_A()\n# driver_B()\n\n\n\n\n"
  ]
}