{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/minimal.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MINIMAL'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n\n\n\n\n$source = ( a_list ) ->\n  exhausted = false\n  return source = ( d, send ) ->\n    send d\n    unless exhausted\n      for e in a_list\n        help '^source^', e\n        send e\n      exhausted = true\n    return null\n\n$addsome = ->\n  return addsome = ( d, send ) ->\n    help '^addsome^', d\n    send d * 100 + 1\n    send d * 100 + 2\n    # send.exit() if d is 2\n    # send.pass() if d is 2\n    # throw send.symbol.exit if d is 2\n    # throw send.symbol.done if d is 2\n    return null\n\n$embellish = ->\n  return embellish = ( d, send ) ->\n    help '^embellish^', d\n    send \"*#{rpr d}*\"\n    return null\n\n$show = ->\n  return show = ( d, send ) ->\n    help '^show^', d\n    info d\n    send d\n    return null\n\nraw_pipeline = [\n  $source [ 1, 2, 3, ]\n  $addsome()\n  $embellish()\n  $show()\n  ]\n\nsymbol    =\n  # done:       Symbol.for 'done' # done for this iteration\n  drop:       Symbol.for 'drop' # this value that will not go to output\n  # pass:       Symbol.for 'pass' # do not call again\n  exit:       Symbol.for 'exit' # exit pipeline processing\nfirst_q   = []\nlast_q    = []\npipeline  = []\nlast_idx  = raw_pipeline.length - 1\ninputs    = []\nfor tf, idx in raw_pipeline\n  do =>\n    input       = if idx is 0         then first_q  else pipeline[ idx - 1 ].output\n    output      = if idx is last_idx  then last_q   else []\n    entry       = { tf, input, output, exit: false, }\n    # entry       = { tf, input, output, done: false, pass: false, exit: false, }\n    send        = ( d ) ->\n      switch d\n        when symbol.drop\n          info \"dropped: #{rpr d}\"\n        # when symbol.done\n        #   info \"done: #{rpr d}\"\n        #   @done = true\n        # when symbol.pass\n        #   info \"pass: #{rpr d}\"\n        #   @pass = true\n        when symbol.exit\n          info \"exit: #{rpr d}\"\n          @exit = true\n        else\n          @output.push d\n      return null\n    send        = send.bind entry\n    send.symbol = symbol\n    # send.done   = -> send send.symbol.done\n    # send.pass   = -> send send.symbol.pass\n    send.exit   = -> send send.symbol.exit\n    entry.send  = send\n    pipeline.push entry\n    inputs.push input\n\nshow_pipeline = ->\n  urge inputs[ 0 ]\n  for segment in pipeline\n    urge segment.tf.name ? '?', segment.output\n  return null\n\ndrive = ( cfg ) ->\n  { mode } = cfg\n  show_pipeline()\n  round = 0\n  try\n    loop\n      round++\n      whisper '^4958^', \"round #{round} -------------------------------\"\n      for idx in [ 0 .. 3 ]\n        segment = pipeline[ idx ]\n        if idx is 0\n          segment.tf symbol.drop, segment.send\n        else\n          while segment.input.length > 0\n            segment.tf segment.input.shift(), segment.send\n            break if mode is 'depth'\n        # show_pipeline()\n        if segment.exit\n          info '^443^', \"stopped by #{rpr segment}\"\n          throw symbol.exit\n      break unless inputs.some ( x ) -> x.length > 0\n  catch error\n    # throw error unless typeof error is 'symbol'\n    throw error unless error is symbol.exit\n    warn error\n  return null\n\n\n# drive { mode: 'breadth', }\ndrive { mode: 'depth', }\n\n\n\n"
  ]
}