{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/minimal.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MINIMAL'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nGUY                       = require 'guy'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate }              = types\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  #.........................................................................................................\n  $source_A = ( a_list ) ->\n    return source = ( d, send ) ->\n      send d\n      for e in a_list\n        help '^source A^', e if trace\n        send e\n      send.over()\n      return null\n  #.........................................................................................................\n  $source_B = ( a_list ) ->\n    last_idx  = a_list.length - 1\n    idx       = -1\n    return source = ( d, send ) ->\n      send d\n      idx++\n      # debug '^2242^', { idx, }\n      if idx > last_idx\n        idx = -1\n        return send.over()\n      help '^source B^', a_list[ idx ] if trace\n      send a_list[ idx ]\n      return null\n  #.........................................................................................................\n  $addsome = ->\n    return addsome = ( d, send ) ->\n      help '^addsome^', d if trace\n      return send ( rpr d ) + ' * 100 + 1' unless isa.float d\n      send d * 100 + 1\n      return null\n  #.........................................................................................................\n  $embellish = ->\n    return embellish = ( d, send ) ->\n      help '^embellish^', d if trace\n      send \"*#{rpr d}*\"\n      return null\n  #.........................................................................................................\n  $show = ->\n    return show = ( d, send ) ->\n      help '^show^', d if trace\n      info d\n      send d\n      return null\n  #.........................................................................................................\n  $generator = ->\n    return ->\n      yield 22\n      yield 33\n      return null\n  #.........................................................................................................\n  pipeline  = []\n  # pipeline.push $source_A [ 1, 2, 3, ]\n  # pipeline.push $source_B [ 1, 2, ]\n  # pipeline.push [ 1, 2, ]\n  pipeline.push [ 'A', 'B', ]\n  pipeline.push $generator()\n  pipeline.push $addsome()\n  pipeline.push $embellish()\n  pipeline.push $show()\n  trace = false\n  drive = ( mode ) ->\n    whisper '———————————————————————————————————————'\n    sp = new Steampipe pipeline\n    sp.drive { mode, }\n    whisper '———————————————————————————————————————'\n    sp.drive { mode, }\n  drive 'breadth'\n  drive 'depth'\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Steampipe\n  @C =\n    symbol =\n      drop:       Symbol.for 'drop' # this value will not go to output\n      exit:       Symbol.for 'exit' # exit pipeline processing\n      # done:       Symbol.for 'done' # done for this iteration\n      over:       Symbol.for 'over' # do not call again in this round\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( raw_pipeline ) ->\n    @first_input  = []\n    @last_output  = []\n    @pipeline     = []\n    last_idx      = raw_pipeline.length - 1\n    @inputs       = []\n    @sources      = []\n    for raw_transform, idx in raw_pipeline\n      { is_source\n        transform } = @_get_transform raw_transform\n      do ( transform, idx, is_source ) =>\n        input       = if idx is 0         then @first_input else @pipeline[ idx - 1 ].output\n        output      = if idx is last_idx  then @last_output else []\n        segment     = { transform, input, output, over: false, exit: false, is_source, }\n        send        = ( d ) ->\n          switch d\n            when symbol.drop  then  null\n            when symbol.over  then  @over = true\n            when symbol.exit  then  @exit = true\n            else @output.push d\n          return null\n        send        = send.bind segment\n        send.symbol = symbol\n        send.over   = -> send send.symbol.over\n        send.exit   = -> send send.symbol.exit\n        GUY.props.hide segment, 'send', send\n        @pipeline.push  segment\n        @sources.push   segment if is_source\n        @inputs.push    input\n    # debug '^3454^', segment for segment in @pipeline\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_transform: ( raw_transform ) ->\n    is_source = false\n    switch type = type_of raw_transform\n      when 'function'\n        transform = raw_transform\n        unless ( arity = transform.length ) is 2\n          throw new Error \"^323^ expected function with arity 2 got one with arity #{arity}\"\n      when 'generatorfunction'\n        is_source = true\n        transform = @_source_from_generatorfunction raw_transform\n        unless ( arity = transform.length ) is 2\n          throw new Error \"^323^ expected function with arity 2 got one with arity #{arity}\"\n      when 'list'\n        is_source = true\n        transform = @_source_from_list raw_transform\n      else\n        throw new Error \"^324^ cannot convert a #{type} to a source\"\n    return { transform, is_source, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _source_from_generatorfunction: ( generatorfunction ) ->\n    generator = null\n    return generatorfunction_source = ( d, send ) ->\n      generator ?= generatorfunction()\n      send d\n      { value\n        done  } = generator.next()\n      return send value unless done\n      generator = null\n      send.over()\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _source_from_list: ( list ) ->\n    last_idx  = list.length - 1\n    idx       = -1\n    return list_source = ( d, send ) ->\n      send d\n      idx++\n      if idx > last_idx\n        idx = -1\n        return send.over()\n      send list[ idx ]\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  drive: ( cfg ) ->\n    { mode      } = cfg\n    segment.over  = false for segment in @pipeline\n    XXX_count = 0\n    try\n      loop\n        for segment, idx in @pipeline\n          continue if segment.over\n          if segment.is_source and segment.input.length is 0\n            segment.transform symbol.drop, segment.send\n          else\n            while segment.input.length > 0\n              segment.transform segment.input.shift(), segment.send\n              break if mode is 'depth'\n          @last_output.length = 0\n          throw symbol.exit if segment.exit\n        if @sources.every ( source ) -> source.over\n          unless @inputs.some ( input ) -> input.length > 0\n            break\n    catch error\n      # throw error unless typeof error is 'symbol'\n      throw error unless error is symbol.exit\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _show_pipeline: ->\n    urge @inputs[ 0 ]\n    for segment in @pipeline\n      urge segment.transform.name ? '?', segment.output\n    return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  demo()\n\n\n\n"
  ]
}