{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/steamgears.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/STEAMGEARS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n# PATH                      = require 'path'\n# FS                        = require 'fs'\n# _strip_ansi               = require 'strip-ansi'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ freeze\n  lets }                  = require 'letsfreezethat'\n#...........................................................................................................\nSP                        = require '../../../apps/steampipes'\n{ $\n  $show\n  $watch\n  $drain }                = SP.export()\n\n\n#-----------------------------------------------------------------------------------------------------------\n# resolve_project_path = ( path ) -> PATH.resolve PATH.join __dirname, '../../..', path\n\n\n#-----------------------------------------------------------------------------------------------------------\n$one_to_ten = ( counters, name, source = null ) ->\n  counters[ name ] ?= 0\n  return $ ( d, send ) =>\n    send d\n    switch d \n      when '+' then counters[ name ]++\n      when '-' then counters[ name ]--\n      when '0' then null\n      else throw new Error \"^354^ unknown key #{rpr d}\"\n    if counters[ name ] %% 10 is 0\n      counters[ name ] = 0\n      source.send '+' if source?\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = -> new Promise ( resolve, reject ) =>\n  counters    = {}\n  pipeline_1  = []\n  pipeline_2  = []\n  pipeline_3  = []\n  source_1    = SP.new_push_source()\n  source_2    = SP.new_push_source()\n  source_3    = SP.new_push_source()\n  #.........................................................................................................\n  pipeline_1.push source_1\n  pipeline_1.push $ ( d, send ) -> send '+'\n  pipeline_1.push $one_to_ten counters, 'd0', source_2\n  pipeline_1.push $watch ( d ) -> whisper counters\n  pipeline_1.push $drain -> resolve()\n  SP.pull pipeline_1...\n  #.........................................................................................................\n  pipeline_2.push source_2\n  pipeline_2.push $one_to_ten counters, 'd1', source_3\n  pipeline_2.push $watch ( d ) -> urge 'd1', d\n  pipeline_2.push $drain()\n  SP.pull pipeline_2...\n  #.........................................................................................................\n  pipeline_3.push source_3\n  pipeline_3.push $one_to_ten counters, 'd2', null\n  pipeline_3.push $watch ( d ) -> help 'd2', d\n  pipeline_3.push $drain()\n  SP.pull pipeline_3...\n  #.........................................................................................................\n  for i in [ 1 .. 200 ]\n    source_1.send null\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  demo()\n\n\n"
  ]
}