{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/nodejs-eventemitter-as-stream-source.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/EVENTEMITTER-AS-STREAM-SOURCE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# test                      = require 'guy-test'\n# _strip_ansi               = require 'strip-ansi'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ freeze\n  lets }                  = require 'letsfreezethat'\n#...........................................................................................................\n{ spawn }                 = require 'child_process'\n\n\n#-----------------------------------------------------------------------------------------------------------\n# resolve_project_path = ( path ) -> PATH.resolve PATH.join __dirname, '../../..', path\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_low_level = -> new Promise ( resolve, reject ) =>\n  PATH                      = require 'path'\n  FS                        = require 'fs'\n  JFEE                      = require '../../../apps/jfee'\n  SP                        = require '../../../apps/steampipes'\n  { $\n    $show\n    $watch\n    $drain }                = SP.export()\n  #.........................................................................................................\n  source      = SP.new_push_source()\n  pipeline    = []\n  pipeline.push source\n  pipeline.push SP.$split_channels()\n  pipeline.push $show()\n  pipeline.push $drain -> urge \"demo_low_level finished\"; resolve()\n  SP.pull pipeline...\n  path  = PATH.join __dirname, '../samples'\n  cp    = spawn 'ls', [ '-AlF', path, ]\n  for await x from JFEE.Receiver.from_child_process cp, { bare: true, }\n    whisper '^3387^', x\n    source.send x\n  source.end()\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_high_level = -> new Promise ( resolve, reject ) =>\n  PATH                      = require 'path'\n  FS                        = require 'fs'\n  JFEE                      = require '../../../apps/jfee'\n  SP                        = require '../../../apps/steampipes'\n  { $\n    $show\n    $watch\n    $drain }                = SP.export()\n  #.........................................................................................................\n  path        = PATH.join __dirname, '../samples'\n  cp          = spawn 'ls', [ '-AlF', path, ]\n  source      = SP.source_from_child_process cp, { bare: true, }\n  pipeline    = []\n  pipeline.push source\n  pipeline.push SP.$split_channels()\n  pipeline.push $show()\n  pipeline.push $drain -> urge \"demo_high_level finished\"; resolve()\n  SP.pull pipeline...\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_high_level_2 = -> new Promise ( resolve, reject ) =>\n  throw new Error \"^4447462^ currently not implemented; see steampipes/src/sources.coffee\"\n  PATH                      = require 'path'\n  FS                        = require 'fs'\n  JFEE                      = require '../../../apps/jfee'\n  SP                        = require '../../../apps/steampipes'\n  { $\n    $show\n    $watch\n    $drain }                = SP.export()\n  #.........................................................................................................\n  path        = PATH.join __dirname, '../samples'\n  cp          = spawn 'ls', [ '-AlF', path, ]\n  source      = SP.source_from_child_process_2 cp, { bare: true, }\n  pipeline    = []\n  pipeline.push source\n  pipeline.push SP.$split_channels()\n  pipeline.push $show()\n  pipeline.push $drain -> urge \"demo_high_level_2 finished\"; resolve()\n  SP.pull pipeline...\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_readstream = -> new Promise ( resolve, reject ) =>\n  PATH                      = require 'path'\n  FS                        = require 'fs'\n  SP                        = require '../../../apps/steampipes'\n  { $\n    $show\n    $watch\n    $drain }                = SP.export()\n  #.........................................................................................................\n  path        = PATH.join __dirname, '../samples/file1.txt'\n  stream      = FS.createReadStream path\n  source      = SP.source_from_readstream stream, { bare: true, raw: false, }\n  pipeline    = []\n  pipeline.push source\n  pipeline.push SP.$split_channels()\n  pipeline.push $show()\n  pipeline.push $drain -> urge \"demo_readstream finished\"; resolve()\n  await SP.pull pipeline...\n  #.........................................................................................................\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_low_level()\n  await demo_high_level()\n  # await demo_high_level_2()\n  await demo_readstream()\n  await demo_readstream()\n\n\n"
  ]
}