{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n#-----------------------------------------------------------------------------------------------------------\nGUY                       = require 'guy'\n{ debug\n  info\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'INTERTYPE/types'\n{ rpr }                   = GUY.trm\n# misfit                    = Symbol 'misfit'\n# notavalue                 = Symbol 'notavalue'\n# E                         = require './errors'\n# { to_width\n#   width_of  }             = require 'to-width'\n# ### TAINT unify with symbols in `hedges` ###\n# @misfit                   = Symbol 'misfit'\n# #...........................................................................................................\n# @constructor_of_generators  = ( ( -> yield 42 )() ).constructor\n# @deep_copy                  = structuredClone\n# @equals                     = require '../deps/jkroso-equals'\n# @nameit                     = ( name, f ) -> Object.defineProperty f, 'name', { value: name, }\nidf                         = ( x ) -> x ### IDentity Function ###\n@types                      = new ( require 'intertype-legacy' ).Intertype()\n@defaults                   = {}\n\n\n#===========================================================================================================\n# INTERNAL TYPES\n#-----------------------------------------------------------------------------------------------------------\n# @types.declare 'deep_boolean', ( x ) -> x in [ 'deep', false, true, ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @types.declare 'Type_cfg_constructor_cfg', tests:\n#   \"@isa.object x\":                            ( x ) -> @isa.object x\n#   \"@isa.nonempty_text x.name\":                ( x ) -> @isa.nonempty_text x.name\n#   # \"@isa.deep_boolean x.copy\":                 ( x ) -> @isa.boolean x.copy\n#   # \"@isa.boolean x.seal\":                      ( x ) -> @isa.boolean x.seal\n#   \"@isa.deep_boolean x.freeze\":               ( x ) -> @isa.deep_boolean x.freeze\n#   \"@isa.boolean x.extras\":                    ( x ) -> @isa.boolean x.extras\n#   \"if extras is false, default must be an object\": \\\n#     ( x ) -> ( x.extras ) or ( @isa.object x.default )\n#   \"@isa_optional.function x.create\":          ( x ) -> @isa_optional.function x.create\n#   ### TAINT might want to check for existence of `$`-prefixed keys in case of `( not x.test? )` ###\n#   ### TAINT should validate values of `$`-prefixed keys are either function or non-empty strings ###\n#   \"x.test is an optional function or non-empty list of functions\": ( x ) ->\n#     return true unless x.test?\n#     return true if @isa.function x.test\n#     return false unless @isa_list_of.function x.test\n#     return false if x.test.length is 0\n#     return true\n#   \"x.groups is deprecated\": ( x ) -> not x.groups?\n#   \"@isa.boolean x.collection\": ( x ) -> @isa.boolean x.collection\n# #...........................................................................................................\n# @defaults.Type_cfg_constructor_cfg =\n#   name:             null\n#   test:             null\n#   ### `default` omitted on purpose ###\n#   create:           null\n#   # copy:             false\n#   # seal:             false\n#   freeze:           false\n#   extras:           true\n#   collection:       false\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'intertype_declare_dsc', tests:\n  #.........................................................................................................\n  ### for later / under consideration ###\n  # \"@isa.deep_boolean x.copy\":                       ( x ) -> @isa.boolean x.copy        # refers to result of `type.create()`\n  # \"@isa.boolean x.seal\":                            ( x ) -> @isa.boolean x.seal        # refers to result of `type.create()`\n  # \"@isa.boolean x.oneshot\":                         ( x ) -> @isa.boolean x.oneshot        # refers to result of `type.create()`\n  # \"@isa.deep_boolean x.freeze\":                     ( x ) -> @isa.deep_boolean x.freeze   # refers to result of `type.create()`\n  #.........................................................................................................\n  \"@isa.object x\":                                  ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.name\":                      ( x ) -> @isa.nonempty_text x.name\n  \"@isa.nonempty_text x.typename\":                  ( x ) -> @isa.nonempty_text x.typename\n  \"@isa.boolean x.collection\":                      ( x ) -> @isa.boolean x.collection\n  \"@isa.function x.isa\":                            ( x ) -> @isa.function x.isa\n  \"@isa optional list.of.function x.fields\":        ( x ) ->\n    return true unless @isa.list x.fields\n    return @isa_list_of.function x.fields\n  \"@isa.boolean x.extras\":                          ( x ) -> @isa.boolean x.extras        # refers to result of `type.create()`\n  \"if extras is false, default must be an object\":  ( x ) -> ( x.extras ) or ( @isa.object x.default )\n  \"@isa_optional.function x.create\":                ( x ) -> @isa_optional.function x.create\n  \"@isa_optional.function x.cast\":                  ( x ) -> @isa_optional.function x.cast\n#...........................................................................................................\n@defaults.intertype_declare_dsc =\n  name:             null\n  typename:         null\n  isa:              null\n  fields:           null\n  collection:       false\n  ### `default` omitted on purpose ###\n  create:           null\n  cast:             null\n  # copy:             false     # refers to result of `type.create()`\n  # seal:             false     # refers to result of `type.create()`\n  freeze:           false     # refers to result of `type.create()`\n  extras:           true      # refers to result of `type.create()`\n\n# #-----------------------------------------------------------------------------------------------------------\n# @types.declare 'Intertype_iterable', ( x ) -> x? and x[ Symbol.iterator ]?\n\n# #-----------------------------------------------------------------------------------------------------------\n# @types.declare 'Intertype_constructor_cfg', tests:\n#   \"@isa.object x\":                            ( x ) -> @isa.object x\n#   \"@isa_optional.nonempty_text x.sep\":        ( x ) -> @isa_optional.nonempty_text x.sep\n#   \"x.errors in [ false, 'throw', ]\":          ( x ) -> x.errors in [ false, 'throw', ]\n# #...........................................................................................................\n# @defaults.Intertype_constructor_cfg =\n#   sep:              '.'\n#   errors:           false\n\n# #-----------------------------------------------------------------------------------------------------------\n# @types.declare 'intertype_color', ( x ) ->\n#   return true   if      @isa.function       x\n#   return true   if      @isa.boolean        x\n#   return false  unless  @isa.nonempty_text  x\n#   return false  unless  @isa.function       GUY.trm[ x ]\n#   return true\n\n# #-----------------------------------------------------------------------------------------------------------\n# @types.declare 'intertype_state_report_colors', tests:\n#   \"@isa.object x\":                            ( x ) -> @isa.object x\n#   \"@isa.intertype_color x.ref\":               ( x ) -> @isa.intertype_color x.ref\n#   \"@isa.intertype_color x.value\":             ( x ) -> @isa.intertype_color x.value\n#   \"@isa.intertype_color x.true\":              ( x ) -> @isa.intertype_color x.true\n#   \"@isa.intertype_color x.false\":             ( x ) -> @isa.intertype_color x.false\n#   \"@isa.intertype_color x.hedge\":             ( x ) -> @isa.intertype_color x.hedge\n#   \"@isa.intertype_color x.verb\":              ( x ) -> @isa.intertype_color x.verb\n#   \"@isa.intertype_color x.arrow\":             ( x ) -> @isa.intertype_color x.arrow\n#   \"@isa.intertype_color x.error\":             ( x ) -> @isa.intertype_color x.error\n#   \"@isa.intertype_color x.reverse\":           ( x ) -> @isa.intertype_color x.reverse\n# #...........................................................................................................\n# @defaults.intertype_state_report_colors = GUY.lft.freeze\n#   ref:            'grey'\n#   value:          'lime'\n#   true:           'green'\n#   false:          'red'\n#   hedge:          'blue'\n#   verb:           'gold'\n#   arrow:          'white'\n#   error:          'red'\n#   reverse:        'reverse'\n# #...........................................................................................................\n# @defaults.intertype_state_report_no_colors = GUY.lft.freeze\n#   ref:            idf\n#   value:          idf\n#   true:           idf\n#   false:          idf\n#   hedge:          idf\n#   verb:           idf\n#   arrow:          idf\n#   error:          idf\n#   reverse:        idf\n\n# #-----------------------------------------------------------------------------------------------------------\n# @types.declare 'intertype_get_state_report_cfg', tests:\n#   \"@isa.object x\":                              ( x ) -> @isa.object x\n#   \"x.format in [ 'all', 'failing', 'short' ]\":  ( x ) -> x.format in [ 'all', 'failing', 'short' ]\n#   \"@isa.boolean x.refs\":                        ( x ) -> @isa.boolean x.refs\n#   \"@isa_optional.positive_integer x.width\":     ( x ) -> @isa_optional.positive_integer x.width\n#   \"( @isa.boolean x.colors ) or ( @isa.intertype_state_report_colors )\": \\\n#     ( x ) -> ( @isa.boolean x.colors ) or ( @isa.intertype_state_report_colors )\n# #...........................................................................................................\n# @defaults.intertype_get_state_report_cfg =\n#   colors:         @defaults.intertype_state_report_colors\n#   format:         'failing'\n#   width:          null\n#   refs:           false\n\n# #-----------------------------------------------------------------------------------------------------------\n# @defaults.Intertype_state =\n#   method:         null\n#   verb:           null\n#   isa_depth:      0\n#   hedgerow:       null\n#   hedges:         null\n#   hedgeresults:   null\n#   x:              misfit\n#   result:         null\n#   error:          null\n#   extra_keys:     null\n#   data:           null\n\n"
  ]
}