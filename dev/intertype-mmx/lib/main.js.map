{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTYPE/prototype'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ hide\n  tree }                  = GUY.props\nrvr                       = GUY.trm.reverse\nnameit                    = ( name, f ) -> Object.defineProperty f, 'name', { value: name, }\n#...........................................................................................................\ntest                      = require 'guy-test'\n### TAINT preliminary ###\ntypes                     = ( require './types' ).types\ndefaults                  = ( require './types' ).defaults\n#...........................................................................................................\nhide @, 'Multimix', ( require 'multimix' ).Multimix\nMultimix                  = @Multimix\nE                         = require './errors'\nnotavalue                 = Symbol 'notavalue'\nmisfit                    = Symbol 'misfit'\nType_factory              = ( require './type-factory' ).Type_factory\n#...........................................................................................................\nhide @, 'errors',       E\nhide @, 'Type_factory', Type_factory\n\n\n#---------------------------------------------------------------------------------------------------------\nsize_of = ( x, fallback = misfit ) ->\n  return R unless ( R = GUY.props.get x, 'length',  notavalue ) is notavalue\n  return R unless ( R = GUY.props.get x, 'size',    notavalue ) is notavalue\n  return fallback unless fallback is misfit\n  throw new E.Intertype_ETEMPTBD '^intertype.size_of@1^', \\\n    \"expected an object with `x.length` or `x.size`, got a #{@type_of x} with neither\"\n\n\n#===========================================================================================================\nclass @Intertype\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    hub           = @\n    clasz         = @constructor\n    handlers      = clasz._get_handlers hub\n    GUY.props.hide @, 'type_factory', new Type_factory @\n    @declare      = new Multimix { hub, handler: handlers.declare,  }\n    @validate     = new Multimix { hub, handler: handlers.validate, }\n    @isa          = new Multimix { hub, handler: handlers.isa,      }\n    @mmx          = @isa[Multimix.symbol]\n    @state        = @mmx.state\n    @state.trace  = []\n    #---------------------------------------------------------------------------------------------------------\n    ### TAINT this part goes into declarations ###\n    @registry =\n      boolean:  ( x ) -> ( x is true ) or ( x is false )\n      integer:  ( x ) -> ( Number.isFinite x ) and ( x is Math.floor x )\n      text:     ( x ) -> ( typeof x ) is 'string'\n      list:     ( x ) -> Array.isArray x\n      set:      ( x ) -> x instanceof Set\n      empty:    ( x ) -> ( R = size_of x, null )? and R is 0\n      nonempty: ( x ) -> ( R = size_of x, null )? and R isnt 0\n      #.......................................................................................................\n      even: ( x ) ->\n        if ( Number.isInteger x )     then return ( x % 2  ) is   0\n        else if typeof x is 'bigint'  then return ( x % 2n ) is   0n\n        return false\n      #.......................................................................................................\n      odd: ( x ) ->\n        if ( Number.isInteger x )     then return ( x % 2  ) isnt 0\n        else if typeof x is 'bigint'  then return ( x % 2n ) isnt 0n\n        return false\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _trace: ({ref, level, prop, x, R, }) ->\n    ### [ ref, level, prop, value, R, ] = checkpoint ###\n    # H.types.validate.nonempty_text  ref\n    # H.types.validate.cardinal       level\n    # H.types.validate.nonempty_text  prop\n    # H.types.validate.boolean        R\n    @state.trace.push { ref, level, prop, x, R, }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _reset_trace: -> @state.trace = []\n\n  #-------------------------------------------------------------------------------------------------------\n  _isa: ( props, x, level ) ->\n    @_reset_trace() if level is 0\n    advance   = false\n    last_idx  = props.length - 1\n    R         = true\n    idx       = -1\n    prop      = null\n    nxt_prop  = null\n    #.....................................................................................................\n    loop\n      idx++\n      return R if idx > last_idx\n      [ prop, nxt_prop, ] = [ props[ idx ], props[ idx + 1 ], ]\n      #...................................................................................................\n      if advance\n        if prop is 'or'\n          @_trace { ref: '▲i1', level, prop, x, R, }\n          return true if R\n          advance = false\n        continue\n      #...................................................................................................\n      if prop is 'or'\n        throw new Error \"cannot have `or` as first prop, got #{rpr props.join '.'}\" if idx is 0\n        throw new Error \"cannot have `or` as last prop, got #{rpr props.join '.'}\" if idx is last_idx\n        throw new Error \"cannot have two `or` props in succession, got #{rpr props.join '.'}\" if nxt_prop is 'or'\n        @_trace { ref: '▲i2', level, prop, x, R, }\n        return true if R\n        advance = true\n        continue\n      #...................................................................................................\n      if prop is 'of'\n        throw new Error \"cannot have `of` as first prop, got #{rpr props.join '.'}\" if idx is 0\n        throw new Error \"cannot have `of` as last prop, got #{rpr props.join '.'}\" if idx is last_idx\n        throw new Error \"cannot have two `of` props in succession, got #{rpr props.join '.'}\" if nxt_prop is 'of'\n        props_tail = props[ idx + 1 ... ]\n        try\n          for element from x\n            return false unless @_isa props_tail, element, level + 1\n        catch error\n          throw error unless ( error.name is 'TypeError' ) and ( error.message is 'x is not iterable' )\n          throw new E.Intertype_ETEMPTBD '^intertype.isa@7^', \\\n            \"`of` must be preceded by collection name, got #{rpr hedges[ hedge_idx - 1 ]}\"\n        return true\n      #...................................................................................................\n      unless ( fn = @registry[ prop ] )?\n        throw new Error \"unknown type #{rpr prop}\"\n      #...................................................................................................\n      R = R = fn.call @, x\n      @_trace { ref: '▲i3', level, prop, x, R, }\n      unless R is true or R is false\n        ### TAINT use this library to determine type: ###\n        throw new Error \"expected test result to be boolean, go a #{typeof R}: #{rpr R}\"\n      advance = not R\n    #.....................................................................................................\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  equals: ( require 'util' ).isDeepStrictEqual\n\n#-----------------------------------------------------------------------------------------------------------\n@Intertype._get_handlers = ( hub ) ->\n  R =\n\n    #---------------------------------------------------------------------------------------------------------\n    declare: ( props, dsc ) ->\n      unless ( arity = props.length ) is 1\n        throw new Error \"expected single property, got #{arity}: #{rpr props}\"\n      [ name, ]             = props\n      if hub.registry[ name ]?\n        throw new Error \"cannot redeclare type #{rpr name}\"\n      dsc                       = @type_factory.create_type name, dsc\n      debug '^400-1^', dsc\n      @registry[ dsc.name ]     = dsc\n      # @_collections.add dsc.typename if dsc.collection\n      return dsc\n\n    #-------------------------------------------------------------------------------------------------------\n    validate: ( props, x ) ->\n      unless ( arity = props.length ) > 0\n        throw new Error \"expected at least one property, got #{arity}: #{rpr props}\"\n      return x if hub._isa props, x, 0\n      ### TAINT use tracing ###\n      throw new Error \"not a valid #{props.join '.'}: #{rpr x}\"\n\n    #-------------------------------------------------------------------------------------------------------\n    isa: ( props, x ) ->\n      unless ( arity = props.length ) > 0\n        throw new Error \"expected at least one property, got #{arity}: #{rpr props}\"\n      return hub._isa props, x, 0\n\n  #---------------------------------------------------------------------------------------------------------\n  return R\n\n\n"
  ]
}