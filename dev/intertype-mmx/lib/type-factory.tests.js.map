{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/type-factory.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\n# njs_util                  = require 'util'\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nGUY                       = require '../../../apps/guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTYPE/type-factory.tests'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\nrvr                       = GUY.trm.reverse\ntruth                     = GUY.trm.truth.bind GUY.trm\n#...........................................................................................................\ntest                      = require 'guy-test'\n# { intersection_of }       = require '../../../apps/intertype/lib/helpers'\nH                         = require '../../../lib/helpers'\nequals                    = require '../../../apps/intertype/deps/jkroso-equals'\nS                         = ( parts ) -> new Set eval parts.raw[ 0 ]\n{ to_width }              = require 'to-width'\n_types                    = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of }               = _types.export()\nintertype_path            = './main'\n\n#-----------------------------------------------------------------------------------------------------------\n@itproto_tf_import = ( T, done ) ->\n  { Type_factory } = require intertype_path\n  debug '^3442^', Type_factory\n  T?.ok Type_factory?\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@itproto_tf_new = ( T, done ) ->\n  { Type_factory } = require intertype_path\n  T?.throws /not a valid object/, -> try new Type_factory() catch error\n    warn rvr error.message; throw error\n  T?.ok ( new Type_factory {} )?\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@itproto_tf_present_on_types = ( T, done ) ->\n  { Intertype\n    Type_factory  } = require intertype_path\n  types             = new Intertype()\n  T?.ok types.type_factory instanceof Type_factory\n  debug '^410-1^', types\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@itproto_declare_with_function = ( T, done ) ->\n  types = new ( require intertype_path ).Intertype()\n  T?.eq ( typeof types.registry.TEST_float ), 'undefined'\n  T?.throws /expected single property, got 2/, -> try types.declare.even.TEST_float ( x ) -> Number.isFinite x catch error\n    warn rvr error.message; throw error\n  fn = types.declare.TEST_float ( x ) -> Number.isFinite x\n  T?.eq ( typeof types.registry.TEST_float ), 'function'\n  T?.ok types.registry.TEST_float is fn\n  #.........................................................................................................\n  T?.eq ( types.isa.TEST_float 1234.5678    ), true\n  T?.eq ( types.isa.TEST_float -1e26        ), true\n  T?.eq ( types.isa.TEST_float '1234.5678'  ), false\n  T?.eq ( types.isa.TEST_float NaN          ), false\n  T?.eq ( types.isa.TEST_float Infinity     ), false\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@itproto_declare_with_object = ( T, done ) ->\n  types = new ( require intertype_path ).Intertype()\n  T?.eq ( typeof types.registry.TEST_quantity ), 'undefined'\n  #.........................................................................................................\n  fn = types.declare.TEST_quantity\n    isa:      ( x ) -> @isa.object x\n    $value:   'float'\n    $unit:    'nonempty.text'\n    default:\n      value:    0\n      unit:     null\n  #.........................................................................................................\n  T?.eq ( typeof types.registry.TEST_quantity ), 'function'\n  T?.ok types.registry.TEST_quantity is fn\n  #.........................................................................................................\n  T?.eq ( types.isa.TEST_quantity { value: 1, unit: 'm', }        ), true\n  T?.eq ( types.isa.TEST_quantity 'red'        ), false\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@itproto_declare_with_list = ( T, done ) ->\n  types = new ( require intertype_path ).Intertype()\n  T?.eq ( typeof types.registry.TEST_color ), 'undefined'\n  fn = types.declare.TEST_color [ 'red', 'green', 'blue', ]\n  T?.eq ( typeof types.registry.TEST_color ), 'function'\n  T?.ok types.registry.TEST_color is fn\n  #.........................................................................................................\n  debug '^011-1^', types.isa.TEST_color 'red'\n  debug '^011-1^', types.isa.TEST_color 'mauve'\n  T?.eq ( types.isa.TEST_color 'red'        ), true\n  T?.eq ( types.isa.TEST_color 'green'      ), true\n  T?.eq ( types.isa.TEST_color 'blue'       ), true\n  T?.eq ( types.isa.TEST_color 'mauve'      ), false\n  T?.eq ( types.isa.TEST_color [ 'red', ]   ), false\n  T?.eq ( types.isa.TEST_color [ 'mauve', ] ), false\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@itproto_cannot_redeclare = ( T, done ) ->\n  types = new ( require intertype_path ).Intertype()\n  T?.eq ( typeof types.registry.TEST_float ), 'undefined'\n  types.declare.TEST_color [ 'red', 'green', 'blue', ]\n  T?.throws /cannot redeclare type 'TEST_color'/, -> try types.declare.TEST_color -> catch error\n    warn rvr error.message; throw error\n  done?()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  @itproto_declare_with_function { eq: ( -> ), ok: ( -> ), throws: ( -> ), }, ->\n  test @itproto_declare_with_function\n  # test @\n"
  ]
}