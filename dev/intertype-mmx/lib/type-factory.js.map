{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/type-factory.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'INTERTYPE/type-factory'\n{ rpr }                   = GUY.trm\n#...........................................................................................................\nE                         = require './errors'\nH                         = require './helpers'\n{ types\n  defaults }              = require './types'\n\n\n\n#===========================================================================================================\nclass Type_factory extends H.Intertype_abc\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( hub ) ->\n    super()\n    types.validate.object hub\n    @hub = hub\n    @cfg = GUY.lft.freeze { rename: [ 'isa', '', ], }\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  create_type: ( name, dsc ) ->\n    dsc         = @_normalize_type_cfg name, dsc\n    debug '^302-1^', { dsc, }\n    if dsc.fields?\n      name    = dsc.isa.name\n      R       = ( @_create_test_walker dsc ).bind dsc\n    else\n      name    = dsc.name\n      R       = dsc.isa\n      dsc.isa = null\n    GUY.props.hide R, k, v for k, v of dsc when k isnt 'name'\n    H.nameit name, R\n    R = GUY.props.Strict_owner.create { target: R, oneshot: true, }\n    return R\n\n\n  #=========================================================================================================\n  #\n  # #---------------------------------------------------------------------------------------------------------\n  # _validate_name: ( name ) ->\n  #   return name if types.isa.nonempty_text name\n  #   throw new E.Intertype_ETEMPTBD '^tf@1^', \\\n  #     \"expected a nonempty text for new type name, got #{rpr name}\"\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _validate_dsc: ( dsc ) ->\n  #   return dsc            if types.isa.object         dsc\n  #   return { isa: dsc, }  if types.isa.function       dsc\n  #   return { isa: dsc, }  if types.isa.nonempty_text  dsc\n  #   throw new E.Intertype_ETEMPTBD '^tf@2^', \\\n  #     \"expected an object, a function or a nonempty text for type description, got #{rpr dsc}\"\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _validate_isa: ( isa ) ->\n  #   return isa  if types.isa.function       isa\n  #   return isa  if types.isa.nonempty_text  isa\n  #   throw new E.Intertype_ETEMPTBD '^tf@3^', \\\n  #     \"expected a function or a nonempty text for `isa`, got #{rpr isa}\"\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  _dsc_from_proto_dsc: ( proto_dsc ) ->\n    template = defaults.Type_factory_type_dsc\n    switch type = types.type_of proto_dsc\n      when 'function' then return { template..., isa: proto_dsc,                      }\n      when 'list'     then return { template..., isa: ( @_isa_from_list proto_dsc ),  }\n      when 'set'      then return { template..., isa: ( @_isa_from_set  proto_dsc ),  }\n      when 'object'   then return { template..., proto_dsc...,                        }\n      else throw new E.Intertype_ETEMPTBD '^tf@4^', \\\n        \"expected a function, list, set or object as type description got a #{type}\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _normalize_type_cfg: ( name, proto_dsc ) ->\n    dsc   = @_dsc_from_proto_dsc proto_dsc\n    return dsc # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  #   # isa   = null\n  #   #.......................................................................................................\n  #   if name? and ( dsc_name = GUY.props.get dsc, 'name', null )? and ( dsc_name isnt name )\n  #     throw new E.Intertype_ETEMPTBD '^tf@6^', \\\n  #       \"got two conflicting values for `name` (#{rpr name} and #{rpr dsc_name})\"\n  #   dsc.name     ?= name\n  #   dsc.typename  = dsc.name\n  #   #.......................................................................................................\n  #   @_assemble_fields dsc\n  #   #.......................................................................................................\n  #   if dsc.isa?\n  #     if types.isa.text dsc.isa\n  #       dsc.isa     = @_test_from_hedgepath dsc.isa\n  #     name_of_isa = if dsc.isa.name in @cfg.rename then '#0' else dsc.isa.name\n  #     dsc.isa     = H.nameit \"#{dsc.name}:#{name_of_isa}\", do =>\n  #       f = dsc.isa.bind @hub\n  #       return ( x ) =>\n  #         @hub.state.x = x if @hub.state.isa_depth < 2\n  #         R = do =>\n  #           try\n  #             return f x\n  #           catch error\n  #             throw error if @hub.cfg.errors is 'throw' or error instanceof E.Intertype_error\n  #             @hub.state.error = error\n  #           return false\n  #         @hub.push_hedgeresult [ 'â–²nt2', @hub.state.isa_depth, dsc.name, x, R ]\n  #         return if ( @hub.state.verb is 'validate' ) and ( @hub.state.hedges.length is 1 ) then x else R\n  #   #.......................................................................................................\n  #   dsc = { defaults.Type_factory_type_dsc..., dsc..., }\n  #   types.validate.Type_factory_type_dsc dsc\n  #   #.......................................................................................................\n  #   return dsc\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _assemble_fields: ( dsc ) ->\n  #   ### Re-assemble fields in `fields` property, delete `$`-prefixed keys ###\n  #   fields = dsc.fields ? null\n  #   for key, field_dsc of dsc\n  #     continue unless key.startsWith '$'\n  #     if key is '$'\n  #       throw new E.Intertype_ETEMPTBD '^tf@7^', \"found illegal key '$'\"\n  #     nkey    = key[ 1 .. ]\n  #     fields ?= {}\n  #     if fields[ key ]?\n  #       throw new E.Intertype_ETEMPTBD '^tf@8^', \"found duplicate key #{rpr key}\"\n  #     delete dsc[ key ]\n  #     fields[ nkey ] = field_dsc\n  #   #.......................................................................................................\n  #   if fields?\n  #     dsc.fields  = fields\n  #     dsc.isa    ?= 'object'\n  #   #.......................................................................................................\n  #   if dsc.fields?\n  #     nr = 0\n  #     unless types.isa.object dsc.fields\n  #       throw new E.Intertype_ETEMPTBD '^tf@8^', \\\n  #         \"expected an object for `field` property, got a #{rpr types.type_of dsc.fields}\"\n  #     for fieldname, field_dsc of dsc.fields\n  #       if ( types.type_of field_dsc ) is 'text'\n  #         hedges    = @hub._split_hedgerow_text field_dsc\n  #         field_dsc = do ( fieldname, field_dsc, hedges ) =>\n  #           H.nameit field_dsc, ( x ) -> @_isa hedges..., x[ fieldname ]\n  #       if ( type = types.type_of field_dsc ) is 'function'\n  #         nr++\n  #         name_of_isa = if field_dsc.name in @cfg.rename then '#{nr}' else field_dsc.name\n  #         dsc.fields[ fieldname ] = H.nameit \"#{dsc.name}.#{fieldname}:#{name_of_isa}\", field_dsc.bind @hub\n  #       else\n  #         throw new E.Intertype_ETEMPTBD '^tf@8^', \"expected a text or a function for field description, got a #{rpr type}\"\n  #   #.......................................................................................................\n  #   return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _test_from_hedgepath: ( hedgepath ) ->\n  #   hedges = @hub._split_hedgerow_text hedgepath\n  #   hedges = hedgepath.split @hub.cfg.sep\n  #   H.nameit hedgepath, ( x ) -> @_isa hedges..., x\n\n\n  # #=========================================================================================================\n  # #\n  # #---------------------------------------------------------------------------------------------------------\n  # _create_test_walker: ( dsc ) ->\n  #   has_extras  = null\n  #   hub         = @hub\n  #   if ( test_for_extras = not dsc.extras )\n  #     has_extras = @_create_has_extras dsc\n  #   #.......................................................................................................\n  #   return ( x ) ->\n  #     R = do =>\n  #       #.....................................................................................................\n  #       hub.state.isa_depth++\n  #       R = @isa x\n  #       # debug '^767-1^', dsc\n  #       # debug '^767-1^', hub.state\n  #       # debug '^767-1^', { x, R, }\n  #       hub.push_hedgeresult [ 'â–²tw2', hub.state.isa_depth - 1, @isa.name, x, R, ]\n  #       if ( R is false ) or ( R isnt true )\n  #         hub.state.isa_depth--; return R\n  #       #.....................................................................................................\n  #       if test_for_extras\n  #         if has_extras x\n  #           ### TAINT return value, recorded value should both be `false` ###\n  #           # debug '^767-2^', dsc, x\n  #           hub.push_hedgeresult [ 'â–²tw3', hub.state.isa_depth, has_extras.name, x, true, ]\n  #           hub.state.isa_depth--; return false\n  #       #.....................................................................................................\n  #       for _, f of @fields\n  #         R = f x\n  #         # debug '^767-3^', dsc, x\n  #         hub.push_hedgeresult [ 'â–²tw5', hub.state.isa_depth, f.name, x, R, ]\n  #         if ( R is false ) or ( R isnt true )\n  #           hub.state.isa_depth--; return R\n  #       #.....................................................................................................\n  #       hub.state.isa_depth--\n  #       return true\n  #     return R\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _create_has_extras: ( dsc ) ->\n  #   default_keys = new Set Object.keys dsc.default\n  #   R = ( x ) ->\n  #     x_keys = new Set Object.keys x\n  #     if ( extra_keys = GUY.sets.subtract x_keys, default_keys ).size isnt 0\n  #       @state.extra_keys = [ extra_keys..., ]\n  #       return true\n  #     return false\n  #   return H.nameit \"#{dsc.name}:has_extras\", R.bind @hub\n\n\n############################################################################################################\n@Type_factory = Type_factory\n\n"
  ]
}