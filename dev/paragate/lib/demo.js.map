{
  "version": 3,
  "file": "demo.js",
  "sourceRoot": "..",
  "sources": [
    "src/demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'PARAGATE/DEMO'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ assign\n  jr }                    = CND\n{ lets\n  freeze }                = ( new ( require 'datom' ).Datom { dirty: false, } ).export()\ntypes                     = require '../../../apps/paragate/lib/types'\n{ isa }                   = types\nwarn \"^33098^ should use `require '../..` instead of `../../apps/intertext`\"\nINTERTEXT                 = require '../../../apps/intertext'\n{ rpr }                   = INTERTEXT.export()\nDISPLAY                   = require './display'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@read_file = ( path ) ->\n  path  = ( require 'path' ).join __dirname, path\n  return ( require 'fs' ).readFileSync path, { encoding: 'utf-8', }\n\n#-----------------------------------------------------------------------------------------------------------\n@parse = ( grammar, source ) ->\n  headline = grammar.name + ': ' + ( jr source ).padEnd 108, ' '\n  echo CND.white CND.reverse CND.bold headline\n  # if isa.function grammar._parsification_from_source\n  #   parsification = grammar._parsification_from_source source\n  #   @show_adapted_tree parsification\n  #   tokens        = grammar._extract_tokens parsification\n  # else\n  tokens  = grammar.parse source\n  await DISPLAY.show_tokens_as_table tokens\n  for token in tokens\n    # debug '^4443^', rpr token\n    if token.$stamped                 then  color = CND.grey\n    else if token.$key is '^unknown'  then  color = ( P... ) -> CND.reverse CND.bold CND.orange P...\n    else if token.$key is '<tag'      then  color = CND.lime\n    else if token.$key is '>tag'      then  color = CND.red\n    else if token.$key is '^text'     then  color = CND.white\n    else if token.$key is '^error'    then  color = ( P... ) -> CND.red CND.reverse CND.bold P...\n    else                                    color = CND.orange\n    echo color rpr token\n  echo CND.grey CND.reverse CND.bold headline\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@show_adapted_tree = ( parsification ) ->\n  { source\n    tree\n    grammar } = parsification\n  echo '-'.repeat 108\n  @_show_adapted_tree source, grammar, tree, 0\n  echo '-'.repeat 108\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_show_adapted_tree = ( source, grammar, tree, level = 0 ) ->\n  return null unless tree?\n  indent = '  '.repeat level\n  #.........................................................................................................\n  unless ( kids = tree.kids )?\n    return echo indent + @_rpr_of_atree_node tree\n  #.........................................................................................................\n  echo indent + @_rpr_of_atree_node tree\n  for kid in kids\n    @_show_adapted_tree source, grammar, kid, level + 1\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_rpr_of_atree_node = ( d ) ->\n  R     = []\n  R.push ( ( CND.green d.$key ) + ' ' + ( CND.blue d.name ) ).padEnd 60\n  start = CND.yellow ( rpr d.start ).padStart 3\n  stop  = CND.yellow ( rpr d.stop  ).padStart 3\n  R.push ( CND.grey '[ ' ) + start + ' ' + stop + ( CND.grey ' ]' )\n  R.push CND.white CND.reverse rpr d.text\n  R.push ( CND.grey kidkeys.join ' ' ) if ( kidkeys = d.kidkeys )?\n  return R.join ' '\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@tokenize = ( source, grammar, lexer_mode = null ) ->\n  echo CND.blue CND.reverse CND.bold ( jr source ).padEnd 108, ' '\n  tokenization = grammar.lexer.tokenize source, lexer_mode\n  @show_tokens source, grammar, tokenization\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n  # debug '^3998-1^', rpr ( k for k of htmlish_grammar        )\n  # debug '^3998-2^', rpr ( k for k of asciisorter            )\n  # debug '^3998-2^', rpr ( k for k of asciisorter.lexer      )\n  # @parse \"\"\"<a>before<tag>text</tag>after</a>\"\"\"\n  # @tokenize \"\"\"helo world!\"\"\"\n  # @tokenize \"\"\"helo *world!*\"\"\"\n  # @tokenize \"\"\"helo *world!\"\"\"\n  # @tokenize \"\"\"helo **world!**\"\"\"\n  # @tokenize \"\"\"***helo* world!*\"\"\"\n  # @tokenize \"\"\"*helo **world!***\"\"\"\n  # @tokenize \"\"\"some *oomph* is needed\"\"\"\n  # @tokenize \"\"\"some \\\\*oomph* is needed\"\"\"\n  # @tokenize \"\"\"some *oomph\\\\* is needed\"\"\"\n  # @tokenize \"\"\"some \\\\*oomph\\\\* is needed\"\"\"\n  # @tokenize \"\"\"some *\\\\*oomph\\\\** is needed\"\"\"\n  # @tokenize \"\"\"helo\\nworld\"\"\"\n  # @tokenize \"\"\"some\\n*oomph\\nis needed*\"\"\"\n  # @tokenize \"\"\"# H1\"\"\"\n  # @tokenize \"\"\"## H2\"\"\"\n  # @tokenize \"\"\"### H3\"\"\"\n  # @tokenize \"\"\"atstart1\\natstart2\"\"\"\n  # @tokenize \"\"\"  indent1\\n  indent2\"\"\"\n  # @tokenize \"\"\"\\n  indent2\"\"\"\n  # @tokenize \"\"\"  indent1\\n\"\"\"\n  # @tokenize ''\n  # @tokenize \"\"\"123\"\"\"\n\n  # { cst, errors, } = DEMO.parse 'outside_mode', 'ctag',     \"\"\"</CTAG>\"\"\"\n  # { cst, errors, } = DEMO.parse 'outside_mode', 'otag', \"\"\"<a b=\"c\" d='e' f=\"g\" h i j>\"\"\"\n  # { cst, errors, } = DEMO.parse 'inside_mode', 'attribute', \"\"\"b=\"c\\\"\"\"\"\n  # { cst, errors, } = DEMO.parse 'inside_mode', 'attributes', ''\n  # { cst, errors, } = DEMO.parse 'inside_mode', 'attributes', \"\"\"b=\"c\" d='e' f\"\"\"\n  # { cst, errors, } = DEMO.parse 'inside_mode', 'what', \"\"\"one two three\"\"\"\n  # { cst, errors, } = DEMO.parse 'otag', \"\"\"<a>\"\"\"\n\n  # class Myclass\n  #   frob: -> 42\n  # Object.defineProperty Myclass, 'name', {\n  #   value: 'Yourclass',\n  #   writable: false }\n  # debug '^9087-1^', Myclass\n  # debug '^9087-2^', Myclass.name\n  # debug '^9087-5^', new Myclass()\n\n###\n\nvocabulary:\n\n  from lexer:\n    ^raw    { ..., }\n    ^error { code: 'extraneous', message, ... }\n    ^error { code: 'missing', message, ... }\n\n  public:\n    <document { start, }\n    >document { stop,  }\n    ^otag     { name, a,  start, stop, } for tags like `<a b=c>`\n    ^ctag     { name,     start, stop, } for tags like `</a>`\n    ^stag     { name,     start, stop, } for tags like `<a b=c/>`\n    ^ntag     { name,     start, stop, } for opening part in NET tags like `<a b=c/d/`\n    ^ztag     { name,     start, stop, } for closing part (the slash) in NET tags like `<a b=c/d/`\n    ^text     { text,     start, stop, }\n    <CDATA    { text,     start, stop, }\n    >CDATA    { text,     start, stop, }\n    ^COMMENT  { text,     start, stop, }\n\n\n###\n\n############################################################################################################\n############################################################################################################\n############################################################################################################\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_htmlish = ->\n  htmlish_grammar = require '../../../apps/paragate/lib/htmlish.grammar'\n  # urge '^2212^', rpr ( k for k in types.all_keys_of htmlish_grammar when not k.startsWith '__' ).sort()\n  # urge '^2212^', rpr ( k for k of htmlish_grammar ).sort()\n  # await @parse htmlish_grammar, \"\"\"<title>Helo Worlds</title>\"\"\"\n  # await @parse htmlish_grammar, \"\"\"<title>Helo <b>Worlds</b><br/></title>\"\"\"\n  # await @parse htmlish_grammar, \"\"\"<title foo=bar>Helo Worlds</title>\"\"\"\n  # await @parse htmlish_grammar, \"\"\"<a>before<tag>text</tag>after</a>\"\"\"\n  # await @parse htmlish_grammar, \"\"\"before<py/ma3ke4dang1/<oyaji/馬克當/<a><b/></c></d>\"\"\"\n  # await @parse htmlish_grammar, \"\"\"<?xml something something?>\"\"\"\n  # await @parse htmlish_grammar, \"\"\"<?xml something something>\"\"\"\n  # await @parse htmlish_grammar, \"\"\"<?dodat blah?>\"\"\"\n  # await @parse htmlish_grammar, \"\"\"before <otag a1=41 a2=42>after\"\"\"\n  # await @parse htmlish_grammar, \"\"\"before <ntag a1=41 a2=42/stm_text/ after\"\"\"\n  # await @parse htmlish_grammar, \"\"\"before <ntag a1=v1 a2=v2/stm_text/ after\"\"\"\n  # await @parse htmlish_grammar, \"\"\"before <otag a1=v1 a2=v2>after\"\"\"\n  # await @parse htmlish_grammar, \"\"\"<br><tag a1 a2=v2 a3 = v3>some text</tag>\"\"\"\n  # await @parse htmlish_grammar, \"\"\"<br><tag a1 a2=v2 p3:a3 = v3>some text</tag>\"\"\"\n  # await @parse htmlish_grammar, \"\"\"<br><tag#c5 a1 a2=v2 p3:a3 = v3>some text</tag>\"\"\"\n  # await @parse htmlish_grammar, \"\"\"<A></B>\"\"\"\n  # await @parse htmlish_grammar, \"\"\"BEFORE <NTAG/STM_TEXT/ AFTER\"\"\"\n  # await @parse htmlish_grammar, \"\"\"<a><!-- COMMENT HERE --><b>\"\"\"\n  # await @parse htmlish_grammar, \"\"\"before <![CDATA[\\none\\ntwo\\n]]>after\"\"\"\n  # await @parse htmlish_grammar, \"\"\"before <![CDATA[x]]>after\"\"\"\n  # await @parse htmlish_grammar, \"\"\"before <![CDATA[x]]>\"\"\"\n  await @parse htmlish_grammar, \"\"\"before <![CDATA[]]>\"\"\"\n  await @parse htmlish_grammar, \"\"\"<!DOCTYPE html>\"\"\"\n  await @parse htmlish_grammar, \"\"\"<otag>\"\"\"\n  await @parse htmlish_grammar, \"\"\"<a b=\"c\"></a><b></b>\"\"\"\n  await @parse htmlish_grammar, \"\"\"<STAG/>\"\"\"\n  await @parse htmlish_grammar, \"\"\"<NTAG/\"\"\"\n  await @parse htmlish_grammar, \"\"\"<UNFINISHED\"\"\"\n  await @parse htmlish_grammar, \"\"\"<?=)(//&%%$§$§\"!\"\"\"\n  await @parse htmlish_grammar, \"\"\"<>\"\"\"\n  await @parse htmlish_grammar, \"\"\"<!>\"\"\"\n  await @parse htmlish_grammar, \"\"\"<![CDATA[\"\"\"\n  await @parse htmlish_grammar, \"\"\">\"\"\"\n  await @parse htmlish_grammar, \"\"\"< =\"\"\"\n  await @parse htmlish_grammar, \"\"\"<a b= >\"\"\"\n  await @parse htmlish_grammar, \"\"\"foo bar<a b= >\"\"\"\n  await @parse htmlish_grammar, \"\"\"foo bar<c><a b=4>\"\"\"\n  await @parse htmlish_grammar, \"\"\"foo bar<c><a b= >\"\"\"\n  await @parse htmlish_grammar, \"\"\"\n    <title>A Proposal</title>\n    <h1>Motivation</h1>\n    <p>It has been suggested to further the cause.</p>\n    <p>This is <i>very</i> desirable indeed.</p>\n    \"\"\"\n  await @parse htmlish_grammar, [\n   # 0         10        20        30        40        50\n   # ├┬┬┬┬┼┬┬┬┐├┬┬┬┬┼┬┬┬┐├┬┬┬┬┼┬┬┬┐├┬┬┬┬┼┬┬┬┐├┬┬┬┬┼┬┬┬┐├┬┬┬┬┼┬┬┬┐\n    \"<title>A Proposal</title>\"                           # 1\n    \"<![CDATA[\"                                           # 2\n    \"<h1 =>Motivation</h1>\"                               # 3\n    \"<p>It has been suggested to further the cause.</p>\"  # 4\n    \"<UNFINISHED\"                                         # 5\n    \"<p a= >This is <i>very</i> desirable indeed.</p>\"    # 6\n    \"<\"                                                   # 7\n    ].join '\\n'\n  await @parse htmlish_grammar, \"\"\"<article foo=yes>helo</article>\"\"\"\n  await @parse htmlish_grammar, @read_file '../../../README.md'\n  # await @parse htmlish_grammar, @read_file '../../../assets/larry-wall-on-regexes.html'\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_asciisorter = ->\n  { asciisorter, Asciisorter, } = require '../../../apps/paragate/lib/asciisorter.grammar'\n  # await @parse asciisorter, \"\"\"if 42:\\n    43\\nelse:\\n  44\"\"\"\n  # await @parse asciisorter, \"\"\"   x = 42\"\"\"\n  # await @parse asciisorter, \"\"\"abcABC_( )123+!?\"\"\"\n  # await @parse asciisorter, \"\"\"abcABC123!?+_( xyz )\"\"\"\n  # #---------------------------------------------------------------------------------------------------------\n  asciiautosumm = new Asciisorter { use_summarize: false, }\n  # debug '^3998-3^', rpr ( k for k of asciiautosumm = new Asciisorter { use_summarize: false, }    )\n  # debug '^3998-4^', rpr asciisorter.lexer.config.lineTerminatorCharacters\n  # debug '^3998-5^', rpr asciisorter.lexer.config.lineTerminatorsPattern\n  # debug '^3998-6^', rpr asciiautosumm.lexer.config.lineTerminatorCharacters\n  # debug '^3998-7^', rpr asciiautosumm.lexer.config.lineTerminatorsPattern\n  # debug '^3998-8^', rpr asciiautosumm\n  # debug '^3998-9^', rpr asciiautosumm.settings\n  # debug '^3998-10^', rpr asciiautosumm.parse \"\"\"   x = 42\"\"\"\n  # await @parse asciiautosumm, \"\"\"   )x = 答答42\\n答ABC答\"\"\"\n  # # await @parse asciisorter, \"\"\"   <!-- xx -->\"\"\"\n  # await @parse asciiautosumm,           \"\"\"   <!-- xx -->\"\"\"\n  await @parse asciisorter,   \"\"\"abc123defDEF\"\"\"\n  await @parse asciiautosumm, \"\"\"abc123+456defDEF\"\"\"\n  await @parse asciisorter,   \"\"\"abc123+456defDEF\"\"\"\n  await @parse asciisorter,   \"\"\"äöü\\n 雜文3\"\"\"\n  await @parse asciisorter,   @read_file 'main.benchmarks.js'\n  await @parse asciisorter,   @read_file '../../../README.md'\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_indentation = ->\n  #---------------------------------------------------------------------------------------------------------\n  { indentation_grammar, } = require '../../../apps/paragate/lib/indentation.grammar'\n  debug '^3998^', rpr ( k for k of indentation_grammar    )\n  await @parse indentation_grammar, \"\"\"if 42:\\n    43\\nelse:\\n  44\"\"\"\n  await @parse indentation_grammar, \"\"\"   <!-- xx -->\"\"\"\n  await @parse indentation_grammar, \"\"\"L0\\n  L1\\n    L2\\n  L1\"\"\"\n  await @parse indentation_grammar, \"\"\"\\n  \\n\\nL0\\n  L1\\n\\n    \\nOK\\n\"\"\"\n  await @parse indentation_grammar, \"\"\"   x = 42\"\"\"\n  await @parse indentation_grammar, \"\"\"L0\\n  L1\\n    L2\\n      L3\"\"\"\n  await @parse indentation_grammar, \"\"\"\\n  L0\\nL1\"\"\"\n  await @parse indentation_grammar, \"\"\"L0\\n\"\"\"\n  await @parse indentation_grammar, \"\"\"L0\"\"\"\n  await @parse indentation_grammar, \"\"\"\\tL0\"\"\"\n  await @parse indentation_grammar, \"\"\" L0\"\"\"\n  await @parse indentation_grammar, @read_file '../../../README.md'\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_regex_whitespace = ->\n  #---------------------------------------------------------------------------------------------------------\n  { Rxws_grammar, rxws_grammar, } = require './regex-whitespace.grammar'\n  # rxws_grammar = new Rxws_grammar { as_blocks: false, }\n  debug '^3998^', rpr ( k for k of rxws_grammar    )\n  await @parse rxws_grammar, \"\"\"if 42:\\n\\r    43\\nelse:\\n  44\"\"\"\n  await @parse rxws_grammar, \"\"\"if 42:\\r\\n    43\\nelse:\\n  44\"\"\"\n  await @parse rxws_grammar, \"\"\"\\nif 42:\\n    43\\n\\nelse:\\n  44\\n\"\"\"\n  await @parse rxws_grammar, \"\"\"if 42:\\n    43\\n\\n  \\nelse:\\n  44\"\"\"\n  await @parse rxws_grammar, \"\"\"one-one\\none-two\\n\\ntwo-one\\ntwo-two\"\"\"\n  await @parse rxws_grammar, \"\"\"one-one\\none-two\\n  \\ntwo-one\\ntwo-two\\n\"\"\"\n  await @parse rxws_grammar, \"\"\"a\\n  b\\n\\n\\n \\n  c\\n   d\"\"\"\n  await @parse rxws_grammar, ''\n  await @parse rxws_grammar, @read_file '../../../README.md'\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_chrsubsetter = ->\n  #---------------------------------------------------------------------------------------------------------\n  { Chrsubsetter, grammar, } = require './chrsubsetter.grammar'\n  # g = new Chrsubsetter()\n  grammar_notrack = new Chrsubsetter { track_lines: false, }\n  await @parse grammar_notrack, \"\"\"abcäöü 𬻁𬼄𬻺\\nfoo ß 123\"\"\"\n  await @parse grammar, \"\"\"abcäöü 𬻁𬼄𬻺\\nfoo ß 123𒁂𒔨𓄟𖠀𝔞𝔟𝔠\"\"\"\n  # await @parse grammar, @read_file '../../../README.md'\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_css_blocks = ->\n  #---------------------------------------------------------------------------------------------------------\n  { Chrsubsetter, } = require './chrsubsetter.grammar'\n  grammar = new Chrsubsetter { track_lines: true, preset: 'blocks', }\n  await @parse grammar, \"\"\"abcäöü 𬻁𬼄𬻺Б𐌴≳Ϥ福кайني한굴␓␢⑂⑤ᏓᏔᐃ🨀ㄑㄧㄡ𐆖𐇕𐊅\\nß123􏿼￻￼�￾￿\\x00｢｣𒁂𒔨𓄟𖠀𝔞𝔟𝔠\"\"\"\n  await @parse grammar, @read_file '../src/demo.coffee'\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_css_planes = ->\n  #---------------------------------------------------------------------------------------------------------\n  { Chrsubsetter, } = require './chrsubsetter.grammar'\n  grammar = new Chrsubsetter { track_lines: true, preset: 'planes', }\n  await @parse grammar, \"\"\"\\x00\\u{10000}\\u{20000}\\u{30000}\\u{40000}\\u{50000}\\u{f0000}𒁂𒔨𓄟𖠀𝔞𝔟𝔠\"\"\"\n  await @parse grammar, @read_file '../../../README.md'\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_css_halfplanes = ->\n  #---------------------------------------------------------------------------------------------------------\n  { Chrsubsetter, } = require './chrsubsetter.grammar'\n  grammar = new Chrsubsetter { track_lines: true, preset: 'halfplanes', }\n  await @parse grammar, \"\"\"abc한글龍𠀀黾𮯛𒁂𒔨𓄟𖠀𝔞𝔟𝔠\"\"\"\n  # await @parse grammar, @read_file '../../../README.md'\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_css_words = ->\n  #---------------------------------------------------------------------------------------------------------\n  { Chrsubsetter, } = require './chrsubsetter.grammar'\n  grammar = new Chrsubsetter { track_lines: true, preset: 'words', }\n  await @parse grammar, \"\"\"abc 한글龍𠀀黾𮯛 𒁂𒔨𓄟𖠀 𝔞𝔟𝔠\"\"\"\n  tokens  = grammar.parse @read_file '../../../README.md'\n  tokens  = new Set ( d.text.toLowerCase() for d in tokens when d.$key is '^word' )\n  tokens  = [ tokens..., ].sort()\n  urge tokens\n\n\n############################################################################################################\nif module is require.main then do =>\n  await @demo_chrsubsetter()\n  await @demo_css_blocks()\n  await @demo_css_planes()\n  await @demo_css_halfplanes()\n  await @demo_css_words()\n  # await @demo_htmlish()\n  # await @demo_regex_whitespace()\n  # await @demo_asciisorter()\n  # await @demo_indentation()\n\n\n\n\n\n\n\n\n\n\n"
  ]
}