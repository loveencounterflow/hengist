{
  "version": 3,
  "file": "main.benchmarks.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTEXT/GRAMMARS/BENCHMARKS'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\nassign                    = Object.assign\nafter                     = ( time_s, f ) -> setTimeout f, time_s * 1000\ndefer                     = setImmediate\n#...........................................................................................................\n# types                     = require '../types'\n# { isa\n#   validate\n#   cast\n#   type_of }               = types\n#...........................................................................................................\nBM                        = require '../../../lib/benchmarks'\n# DATA                      = require '../data-providers'\n#...........................................................................................................\ntimeout                   = 3 * 1000\nlimit_reached             = ( t0 ) -> Date.now() - t0 > timeout\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@foobar = ( n, show ) -> new Promise ( resolve ) =>\n  probes = -> yield i for i in [ 1 .. n ]; yield return\n  #.........................................................................................................\n  resolve => new Promise foobar = ( resolve ) =>\n    R     = ( n ** 2 for probe from probes() )\n    count = n\n    resolve count\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@blah = ( n, show ) -> new Promise ( resolve ) =>\n  #.........................................................................................................\n  resolve => new Promise blah = ( resolve ) =>\n    R     = ''\n    count = 0\n    for idx in [ 0 .. n ]\n      count++\n      R += \"#{n}\"\n    resolve count\n    return null\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@benchmark = ->\n  # always_use_fresh_words    = false\n  bench       = BM.new_benchmarks()\n  n           = 1e6\n  # n           = 10\n  timeout     = n / 50e3 * 1000 + ( 2 * 1000 )\n  show        = false\n  show        = n < 21\n  repetitions = 1\n  # await BM.benchmark n, show, @\n  test_names = [\n    'foobar'\n    'blah'\n    ]\n  for _ in [ 1 .. repetitions ]\n    # CND.shuffle test_names\n    for test_name in test_names\n      await BM.benchmark bench, n, show, @, test_name\n    echo()\n  BM.show_totals bench\n  return null\n\n# commander                          heap-benchmark fontmirror interplot svgttf mingkwai-typesetter\n############################################################################################################\nif module is require.main then do =>\n  await @benchmark()\n  return null\n\n"
  ]
}