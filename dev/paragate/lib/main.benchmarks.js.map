{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'PARAGATE/BENCHMARKS'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\nassign                    = Object.assign\nafter                     = ( time_s, f ) -> setTimeout f, time_s * 1000\ndefer                     = setImmediate\n#...........................................................................................................\n# types                     = require '../types'\n# { isa\n#   validate\n#   cast\n#   type_of }               = types\n#...........................................................................................................\nBM                        = require '../../../lib/benchmarks'\n# DATA                      = require '../data-providers'\n#...........................................................................................................\ntimeout                   = 3 * 1000\nlimit_reached             = ( t0 ) -> Date.now() - t0 > timeout\nFSP                       = ( require 'fs' ).promises\nPATH                      = require 'path'\nINTERTEXT                 = require 'intertext'\n{ rpr }                   = INTERTEXT.export()\n#...........................................................................................................\nassets =\n  ok:                 false\n  probes:             [\n    ''\n    'x'\n    'foo\\n  bar'\n    # '\\nxxx'.repeat 20000\n    ]\n  approx_char_count:  0\n  line_count:         0\n  paths:              [\n    'main.benchmarks.js'\n    # 'interim.tests.js'\n    # '../src/interim.tests.coffee'\n    # '../../../assets/larry-wall-on-regexes.html'\n    ]\ntypes                     = require '../../../apps/paragate/lib/types'\n{ isa\n  validate\n  type_of }               = types\n\n\n\n#-----------------------------------------------------------------------------------------------------------\nprepare = -> new Promise ( resolve ) ->\n  return resolve() if assets.ok\n  for path in assets.paths\n    path                        = PATH.resolve PATH.join __dirname, path\n    probe                       = await FSP.readFile path, { encoding: 'utf-8', }\n    assets.approx_char_count  += probe.length\n    assets.line_count         += ( probe.split '\\n' ).length\n    assets.probes.push probe\n  assets.ok = true\n  resolve()\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@chvtindent               = ( n, show ) -> await @_parse n, show, 'chvtindent'\n@rxws_tokens              = ( n, show ) -> await @_parse n, show, 'rxws_tokens'\n@rxws_blocks              = ( n, show ) -> await @_parse n, show, 'rxws_blocks'\n@htmlish                  = ( n, show ) -> await @_parse n, show, 'htmlish'\n@asciisorter              = ( n, show ) -> await @_parse n, show, 'asciisorter'\n@chrsubsetter             = ( n, show ) -> await @_parse n, show, 'chrsubsetter'\n@chrsubsetter_fast        = ( n, show ) -> await @_parse n, show, 'chrsubsetter_fast'\n@chrsubsetter_blocks      = ( n, show ) -> await @_parse n, show, 'chrsubsetter_blocks'\n@chrsubsetter_planes      = ( n, show ) -> await @_parse n, show, 'chrsubsetter_planes'\n@chrsubsetter_halfplanes  = ( n, show ) -> await @_parse n, show, 'chrsubsetter_halfplanes'\n@chrsubsetter_words       = ( n, show ) -> await @_parse n, show, 'chrsubsetter_words'\n\n#-----------------------------------------------------------------------------------------------------------\n@_parse = ( n, show, name ) -> new Promise ( resolve ) =>\n  switch name\n    when 'chvtindent'\n      GRAMMAR = require './old-grammars/indentation.grammar'\n      grammar = GRAMMAR.indentation_grammar\n    when 'rxws_blocks'\n      GRAMMAR = require '../../../apps/paragate/lib/regex-whitespace.grammar'\n      grammar = GRAMMAR.grammar\n    when 'rxws_tokens'\n      GRAMMAR = require '../../../apps/paragate/lib/regex-whitespace.grammar'\n      grammar = new GRAMMAR.Rxws_grammar { as_blocks: false, }\n    when 'htmlish'\n      GRAMMAR = require '../../../apps/paragate/lib/htmlish.grammar'\n      grammar = GRAMMAR.grammar\n    when 'asciisorter'\n      GRAMMAR = require './old-grammars/asciisorter.grammar'\n      grammar = GRAMMAR.asciisorter\n    when 'chrsubsetter'\n      GRAMMAR = require '../../../apps/paragate/lib/chrsubsetter.grammar'\n      grammar = GRAMMAR.grammar\n    when 'chrsubsetter_fast'\n      GRAMMAR = require '../../../apps/paragate/lib/chrsubsetter.grammar'\n      grammar = new GRAMMAR.Chrsubsetter { track_lines: false, }\n    when 'chrsubsetter_blocks'\n      GRAMMAR = require '../../../apps/paragate/lib/chrsubsetter.grammar'\n      grammar = new GRAMMAR.Chrsubsetter { preset: 'blocks', }\n    when 'chrsubsetter_planes'\n      GRAMMAR = require '../../../apps/paragate/lib/chrsubsetter.grammar'\n      grammar = new GRAMMAR.Chrsubsetter { preset: 'planes', }\n    when 'chrsubsetter_halfplanes'\n      GRAMMAR = require '../../../apps/paragate/lib/chrsubsetter.grammar'\n      grammar = new GRAMMAR.Chrsubsetter { preset: 'halfplanes', }\n    when 'chrsubsetter_words'\n      GRAMMAR = require '../../../apps/paragate/lib/chrsubsetter.grammar'\n      grammar = new GRAMMAR.Chrsubsetter { preset: 'words', }\n    else\n      throw new Error \"^44498^ unknown grammar #{rpr name}\"\n  #.........................................................................................................\n  try\n    validate.object   grammar\n    validate.function grammar.parse\n  catch error\n    throw new Error \"^339^ not a valid grammar: #{rpr name}; GRAMMAR: #{rpr types.all_keys_of GRAMMAR}\"\n  #.........................................................................................................\n  await prepare()\n  #.........................................................................................................\n  resolve => new Promise rxws_tokens = ( resolve ) =>\n    token_count       = 0\n    approx_char_count = 0\n    for probe, idx in assets.probes\n      continue if ( name is 'chvtindent' ) and ( probe.length > 10e3 )\n      approx_char_count  += probe.length\n      tokens              = grammar.parse probe\n      token_count        += tokens.length\n    resolve approx_char_count\n    # resolve token_count\n    # resolve assets.line_count\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_parse = ->\n  await prepare()\n  GRAMMAR = require './regex-whitespace.grammar'\n  # grammar = GRAMMAR.rxws_grammar\n  grammar = new GRAMMAR.Rxws_grammar { as_blocks: false, }\n  # GRAMMAR = require './old-grammars/indentation.grammar'\n  # grammar = GRAMMAR.indentation_grammar\n  for probe in assets.probes\n    urge '^5554^', rpr ( grammar.parse probe ).length\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@benchmark = ->\n  # always_use_fresh_words    = false\n  bench       = BM.new_benchmarks()\n  # n           = 1e6\n  n           = 10\n  timeout     = n / 50e3 * 1000 + ( 2 * 1000 )\n  show        = false\n  show        = n < 21\n  repetitions = 1\n  # await BM.benchmark n, show, @\n  test_names = [\n    'asciisorter'\n    'chrsubsetter'\n    'chrsubsetter_blocks'\n    'chrsubsetter_fast'\n    'chrsubsetter_halfplanes'\n    'chrsubsetter_planes'\n    'chrsubsetter_words'\n    'chvtindent'\n    'htmlish'\n    'rxws_blocks'\n    'rxws_tokens'\n    ]\n  for _ in [ 1 .. repetitions ]\n    CND.shuffle test_names\n    for test_name in test_names\n      await BM.benchmark bench, n, show, @, test_name\n    echo()\n  BM.show_totals bench\n  return null\n\n# commander                          heap-benchmark fontmirror interplot svgttf mingkwai-typesetter\n############################################################################################################\nif module is require.main then do =>\n  # demo_parse()\n  await @benchmark()\n  return null\n\n"
  ]
}