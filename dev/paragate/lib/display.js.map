{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/display.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'PARAGATE/DISPLAY'\nrpr                       = CND.rpr\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ assign\n  jr }                    = CND\n# warn \"^3763^ using ../../apps/intertext/types, should use ../types\"\n# INTERTEXT                 = require '../../apps/intertext'\nINTERTEXT                 = require 'intertext'\n{ isa\n  validate\n  type_of }               = INTERTEXT.types\nSP                        = require 'steampipes'\n{ $\n  $watch\n  $drain }                = SP.export()\nDATOM                     = new ( require 'datom' ).Datom { dirty: false, }\n{ new_datom\n  # stamp\n  # wrap_datom\n  is_stamped\n  lets\n  freeze\n  select }                = DATOM.export()\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$tee_show_tokens_as_blocks = ->\n  escape_text = ( text ) ->\n    R = text\n    R = R.replace /\\n/g, '⏎'\n    R = R.replace /[\\x00-\\x1a\\x1c-\\x1f]/g, ( $0 ) -> String.fromCodePoint ( $0.codePointAt 0 ) + 0x2400\n    R = R.replace /\\x1b(?!\\[)/g, '␛'\n    return R\n  #.........................................................................................................\n  colors      = [ CND.MAGENTA, CND.CYAN, CND.GREEN, ]\n  color_count = colors.length\n  source      = null\n  pipeline    = []\n  lexemes     = []\n  errors      = []\n  #.........................................................................................................\n  pipeline.push SP.$once_after_last ( send ) ->\n    echo ( ( \"#{idx * 10}\".padEnd 10, ' ' ) for idx in [ 0 .. 19 ] ).join ''\n    echo '├┬┬┬┬┼┬┬┬┐'.repeat 20\n    echo escape_text source\n    echo ( colors[ idx %% color_count ] CND.reverse CND.bold  escape_text lexeme for lexeme, idx in lexemes ).join ''\n    echo (                                                    escape_text lexeme for lexeme, idx in lexemes ).join ''\n    for error in errors\n      indent  = ' '.repeat error.start\n      stretch = CND.red CND.reverse error.text\n      message = CND.yellow error.message\n      echo \"#{indent}#{stretch} #{message}\"\n    return null\n  #.........................................................................................................\n  pipeline.push $ ( d, send ) ->\n    ### TAINT unify nodes so we don't have to do this ###\n    if is_document_A = ( d.$key is '<document' )                      then source = d.source\n    if is_document_B = ( d.$key is '<node' and d.name is 'document' ) then source = d.text\n    if is_document_A or is_document_B then  return send d\n    return send d if ( d.$key is '>document' ) or ( d.$key is '>node' and d.name is 'document' )\n    #.......................................................................................................\n    if select d, '^error'\n      errors.push d\n      return send d\n    return send d if is_stamped d\n    # debug '^080^', jr d\n    { text } = d\n    return send d unless text?\n    lexemes.push text\n    return send d\n  #.........................................................................................................\n  return SP.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@$tee_show_tokens_as_table = ( settings = null ) ->\n  ### TAINT implement `$tee()` in SteamPipes ###\n  byline    = []\n  # byline.push $show()\n  byline.push @_$show_tokens_as_table settings\n  byline.push $drain()\n  return SP.$tee SP.pull byline...\n\n#-----------------------------------------------------------------------------------------------------------\n@_$show_tokens_as_table = ( settings = null ) ->\n  # debug '^2224^', TBL       = INTERTEXT.TBL\n  # last      = Symbol 'last'\n  pipeline      = []\n  seen_keys     = new Set()\n  include_first = [ '$key', 'pos', 'name', 'text', ]\n  include_last  = [ '$vnr', '$', ]\n  include       = []\n  exclude       = []\n  defaults      = { stamped: false, }\n  settings      = { defaults..., settings..., }\n  #.........................................................................................................\n  pipeline.push $filter = $ ( d, send ) => send d if ( settings.stamped ) or ( not d.$stamped )\n  #.........................................................................................................\n  pipeline.push $add_keys = $watch ( d ) =>\n    for k of d\n      seen_keys.add k unless k in exclude\n  #.........................................................................................................\n  pipeline.push SP.$collect()\n  pipeline.push $reorder_keys = $ ( buffer, send ) =>\n    include = []\n    first_or_last = new Set [ include_first..., include_last..., ]\n    include.push k for k in include_first when seen_keys.has k\n    include.push k for k in ( k for k in [ seen_keys..., ].sort() when not first_or_last.has k )\n    include.push k for k in include_last  when seen_keys.has k\n    for d in buffer\n      e   = {}\n      for k in include\n        v       = d[ k ]\n        e[ k ]  = if ( v? or v is null ) then v else undefined ### set missing keys ###\n      send e\n    return  null\n  #.........................................................................................................\n  pipeline.push $format = $ ( d, send ) =>\n    d.text  = rpr d.text if d.text?\n    d.pos   = ''\n    d.pos  += ( if d.start? then ( \"#{d.start}\".padStart 3 ) else '---' ) + ','\n    d.pos  += ( if d.stop?  then ( \"#{d.stop}\".padStart  3 ) else '---' )\n    delete d.start\n    delete d.stop\n    send d\n  #.........................................................................................................\n  colorize = ( cell_txt, { value, row, is_header, key, idx, } ) =>\n    R   = cell_txt\n    return CND.white                CND.bold  CND.reverse R   if is_header\n    return CND.cyan   CND.underline CND.bold  CND.reverse R   unless row.$vnr?\n    return CND.BASE01 CND.underline CND.bold  CND.reverse R   if ( row.name is 'info' )\n    return CND.BLUE   CND.underline CND.bold  CND.reverse R   if ( row.$key is '^raw' )\n    return CND.red                  CND.bold  CND.reverse R   if ( row.$key is '^error' ) # and ( key is 'text' )\n    return CND.white                CND.bold  CND.reverse R   if ( row.$key is '^text' ) and ( key is 'text' )\n    return CND.blue                 CND.bold  CND.reverse R   if value? and ( key is 'text' )\n    switch type_of value\n      when 'boolean'      then  R = CND.yellow  R\n      when 'text'         then  R = CND.blue    R\n      when 'number'       then  R = CND.green   R\n      when 'undefined'    then  R = CND.grey    R\n      when 'null'         then  R = CND.grey    R\n      else                      R = CND.white   R\n    return R\n  #.........................................................................................................\n  # pipeline.push $show()\n  pipeline.push INTERTEXT.TBL.$tabulate { format: colorize, }\n  pipeline.push $watch ( d ) -> echo d.text\n  return SP.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@show_tokens_as_table = ( tokens ) -> new Promise ( resolve ) =>\n  validate.list tokens\n  pipeline = []\n  pipeline.push tokens\n  # pipeline.push @$raw_tokens_from_source()\n  # pipeline.push @$as_datoms()\n  # pipeline.push @$consolidate_errors()\n  # pipeline.push @$consolidate_tags()\n  # pipeline.push $show { title: '^443-2^', }\n  pipeline.push @$tee_show_tokens_as_table { stamped: true, }\n  # pipeline.push @$tee_show_tokens_as_table { stamped: false, }\n  pipeline.push @$tee_show_tokens_as_blocks()\n  # pipeline.push $watch ( d ) -> echo CND.yellow jr d unless d.$key is '^xmlxr:info'\n  pipeline.push $drain resolve()\n  SP.pull pipeline...\n  return null\n\n\n"
  ]
}