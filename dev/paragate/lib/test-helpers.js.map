{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-helpers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n# coffeelint: disable=max_line_length\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'PARAGATE/TEST-HELPERS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\n#...........................................................................................................\nINTERTEXT                 = require 'intertext'\n{ rpr }                   = INTERTEXT.export()\n{ isa\n  type_of }               = INTERTEXT.types\n{ lets }                  = ( require 'datom' ).export()\n\n#-----------------------------------------------------------------------------------------------------------\n@as_text = ( x ) ->\n  return rpr x\n  switch type_of x\n    when 'text'   then return x\n    when 'object' then return jr x\n    when 'list'   then return jr x\n  return x.toString()\n\n#-----------------------------------------------------------------------------------------------------------\n@condense_token = ( token ) ->\n  keys    = ( Object.keys token ).sort()\n  keys    = keys.filter ( x ) -> x not in [ 'message', '$', ]\n  values  = ( ( k + '=' + @as_text token[ k ] ) for k in keys )\n  return values.join ','\n  # return as_text values\n\n#-----------------------------------------------------------------------------------------------------------\n@condense_tokens = ( tokens ) ->\n  R = []\n  for t in tokens\n    continue if t.$key in [ '<document', '>document', ]\n    R.push @condense_token t\n  return R.join '#'\n\n#-----------------------------------------------------------------------------------------------------------\n@delete_refs = ( ds ) ->\n  R = []\n  for d in ds\n    R.push lets d, ( d ) -> delete d.$\n  return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# @show_condensed_tokens = ( tokens ) ->\n#   for token in tokens\n#     help @condense_token token\n#   info @condense_tokens tokens\n#   return null\n"
  ]
}