{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/home/flow/jzr/hengist/dev/discontinuous-ranges/src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n# coffeelint: disable=max_line_length\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'PARAGATE/INTERIM-TESTS'\nrpr                       = CND.rpr\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRA.new_arange\" ] = ( T, done ) ->\n  DRA = require './discontinuous-range-arithmetics'\n  probes_and_matchers = [\n    [ null,   null, \"must be a list\" ]\n    [ 42,     null, \"must be a list\" ]\n    [ [ 42, ], null, \"length must be 2\" ]\n    [ [ 10, 20, ], [ [ 10, 20, ], ], ]\n    [ [ 20, 10, ], null, \"lo boundary must be less than or equal to hi boundary\" ]\n    [ [ Infinity, 20, ], null, \"lo boundary must be less than or equal to hi boundary\" ]\n    [ [ -Infinity, 20, ], [ [ -Infinity, 20, ], ] ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = DRA.new_arange probe\n      T.ok Object.isFrozen result\n      resolve result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRA.new_segment\" ] = ( T, done ) ->\n  DRA = require './discontinuous-range-arithmetics'\n  probes_and_matchers = [\n    [ [ [ 1, 5, ], ], [ 1, 5, ], ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = DRA.new_segment probe...\n      T.ok Object.isFrozen result\n      T.ok result instanceof DRA.Segment\n      T.eq result.lo, result[ 0 ]\n      T.eq result.hi, result[ 1 ]\n      resolve result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRA.Segment.from\" ] = ( T, done ) ->\n  DRA = require './discontinuous-range-arithmetics'\n  probes_and_matchers = [\n    [ [ [ 1, 5, ], ], [ 1, 5, ], ]\n    [ [ [ 1, NaN, ], ],    null, 'lo boundary must be an infnumber', ]\n    [ [ [ 1, ], ],         null, 'length must be 2', ]\n    [ [ [ 100, -100, ], ], null, 'lo boundary must be less than or equal to hi boundary', ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = DRA.Segment.from probe...\n      T.ok Object.isFrozen result\n      T.ok result instanceof DRA.Segment\n      T.eq result.lo, result[ 0 ]\n      T.eq result.hi, result[ 1 ]\n      resolve result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"union\" ] = ( T, done ) ->\n  DRA = require './discontinuous-range-arithmetics'\n  probes_and_matchers = [\n    [ [ [ 10, 20, ], [ 1, 1, ], [ 5, 5, ], [ 18, 24, ] ], [ [ 1, 1, ], [ 5, 5, ], [ 10, 24, ], ], ]\n    [ [ [ 100, Infinity, ], [ 80, 90, ], ], [ [ 80, 90, ], [ 100, Infinity, ] ] ]\n    [ [ [ 100, Infinity, ], [ 80, 100, ], ], [ [ 80, Infinity, ], ] ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      [ first, segments..., ] = probe\n      result = DRA.new_arange first\n      T.ok Object.isFrozen result\n      # debug '^334^', result\n      for segment in segments\n        segment = DRA.new_segment segment\n        T.eq segment.lo, segment[ 0 ]\n        next_result = DRA.union result, segment\n        debug '^334^', next_result, next_result.size\n        T.ok Object.isFrozen next_result\n        T.ok next_result instanceof DRA.Arange\n        T.ok not CND.equals result, next_result\n        result = next_result\n      resolve result\n  #.........................................................................................................\n  done()\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do => # await do =>\n  # debug ( k for k of ( require '../..' ).HTML ).sort().join ' '\n  # await @_demo()\n  test @\n  # test @[ \"API\" ]\n  # test @[ \"HTML: parse (1)\" ]\n  # test @[ \"HTML: parse (1a)\" ]\n  # test @[ \"HTML: parse (dubious)\" ]\n  # test @[ \"INDENTATION: parse (1)\" ]\n  # test @[ \"HTML: parse (2)\" ]\n  # test @[ \"HTML.html_from_datoms (singular tags)\" ]\n  # test @[ \"HTML Cupofhtml (1)\" ]\n  # test @[ \"HTML Cupofhtml (2)\" ]\n  # test @[ \"HTML._parse_compact_tagname\" ]\n"
  ]
}