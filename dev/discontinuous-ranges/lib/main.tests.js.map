{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/home/flow/jzr/hengist/dev/discontinuous-ranges/src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n# coffeelint: disable=max_line_length\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'DISCONTINUOUS-RANGES/TESTS'\nrpr                       = CND.rpr\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\n#...........................................................................................................\ntest                      = require 'guy-test'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ equals\n  isa\n  type_of }               = types.export()\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"new DRA.Interlap\" ] = ( T, done ) ->\n  DRA = require './discontinuous-range-arithmetics'\n  probes_and_matchers = [\n    [ null,                   null, \"unable to instantiate from a null\" ]\n    [ 42,                     null, \"unable to instantiate from a float\" ]\n    [ [ 42, ],                null, \"must be a list\" ]\n    [ [ [ 42, ], ],           null, \"length must be 2\" ]\n    [ [ [ 20, 10, ], ],       null, \"lo boundary must be less than or equal to hi boundary\" ]\n    [ [ [ Infinity, 20, ], ], null, \"lo boundary must be less than or equal to hi boundary\" ]\n    [ ( -> ( yield x ) for x in [ [ 5, 6, ], [ 7, 8, ], ] )(), null, \"unable to instantiate from a generator\" ]\n    [ [ [ -Infinity, 20, ], ], [ [ -Infinity, 20, ], ] ]\n    [ [], [], ]\n    [ [ [ 10, 20, ], ], [ [ 10, 20, ], ], ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = new DRA.Interlap probe\n      T.ok Object.isFrozen result\n      resolve DRA.as_list result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRA.interlap_from_segments\" ] = ( T, done ) ->\n  DRA = require './discontinuous-range-arithmetics'\n  probes_and_matchers = [\n    [ null,   null, \"must be a list\" ]\n    [ 42,     null, \"must be a list\" ]\n    [ [ 42, ], null, \"length must be 2\" ]\n    [ [ 10, 20, ], [ [ 10, 20, ], ], ]\n    [ [ 20, 10, ], null, \"lo boundary must be less than or equal to hi boundary\" ]\n    [ [ Infinity, 20, ], null, \"lo boundary must be less than or equal to hi boundary\" ]\n    [ [ -Infinity, 20, ], [ [ -Infinity, 20, ], ] ]\n    [ ( -> ( yield x ) for x in [ [ 5, 6, ], [ 7, 8, ], ] )(), [ [ 5, 8, ], ] ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = DRA.interlap_from_segments probe\n      T.ok Object.isFrozen result\n      resolve DRA.as_list result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRA.Interlap properties\" ] = ( T, done ) ->\n  DRA = require './discontinuous-range-arithmetics'\n  probes_and_matchers = [\n    [ [ [ 10, 20, ], [ 8, 12, ], [ 25, 30, ] ], [ [ [ 8, 20, ], [ 25, 30, ] ], { first: [ 8, 20 ], last: [ 25, 30 ], size: 19, lo: 8, hi: 30 }, ], null, ]\n    [ [ [ -Infinity, 20 ] ], [ [ [ -Infinity, 20 ] ], { first: [ -Infinity, 20 ], last: [ -Infinity, 20 ], size: Infinity, lo: -Infinity, hi: 20 } ], null ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      range                           = DRA.interlap_from_segments probe...\n      { first, last, size, lo, hi, }  = range\n      T.ok Object.isFrozen range\n      T.ok Object.isFrozen range.first\n      T.ok Object.isFrozen range.last\n      # range.push \"won't work\"\n      resolve [ range, { first, last, size, lo, hi, }, ]\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRA.new_segment\" ] = ( T, done ) ->\n  DRA = require './discontinuous-range-arithmetics'\n  probes_and_matchers = [\n    [ [ [ 1, 5, ], ], [ 1, 5, ], ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = new DRA.Segment probe...\n      T.ok Object.isFrozen result\n      T.ok result instanceof DRA.Segment\n      T.eq result.lo, result[ 0 ]\n      T.eq result.hi, result[ 1 ]\n      resolve DRA.as_list result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRA.Segment.from\" ] = ( T, done ) ->\n  DRA = require './discontinuous-range-arithmetics'\n  probes_and_matchers = [\n    [ null, null, \"not implemented\" ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = DRA.Segment.from probe\n      resolve result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRA.segment_from_lohi\" ] = ( T, done ) ->\n  DRA = require './discontinuous-range-arithmetics'\n  probes_and_matchers = [\n    [ [ 1, 5, ],      [ 1, 5, ], ]\n    [ [ 1, NaN, ],    null, 'hi boundary must be an infnumber', ]\n    [ [ 1, ],         null, 'length must be 2', ]\n    [ [ 100, -100, ], null, 'lo boundary must be less than or equal to hi boundary', ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = DRA.segment_from_lohi probe...\n      T.ok Object.isFrozen result\n      T.ok result instanceof DRA.Segment\n      T.eq result.lo, result[ 0 ]\n      T.eq result.hi, result[ 1 ]\n      resolve DRA.as_list result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRA.Interlap.from\" ] = ( T, done ) ->\n  DRA = require './discontinuous-range-arithmetics'\n  probes_and_matchers = [\n    [ null, null, \"not implemented\" ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = DRA.Interlap.from probe\n      resolve result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"union with single segment\" ] = ( T, done ) ->\n  DRA = require './discontinuous-range-arithmetics'\n  probes_and_matchers = [\n    [ [ [ 10, 20, ], [ 1, 1, ], ], [ [ 1, 1, ], [ 10, 20, ], ], ]\n    [ [ [ 10, 20, ], [ 1, 1, ], [ 5, 5, ], [ 18, 24, ] ], [ [ 1, 1, ], [ 5, 5, ], [ 10, 24, ], ], ]\n    [ [ [ 100, Infinity, ], [ 80, 90, ], ], [ [ 80, 90, ], [ 100, Infinity, ] ] ]\n    [ [ [ 100, Infinity, ], [ 80, 100, ], ], [ [ 80, Infinity, ], ] ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      [ first, segments..., ] = probe\n      result = DRA.interlap_from_segments first\n      T.ok Object.isFrozen result\n      for segment in segments\n        [ lo, hi, ] = segment\n        segment = DRA.segment_from_lohi lo, hi\n        T.eq segment.lo, segment[ 0 ]\n        next_result = DRA.union result, segment\n        T.ok Object.isFrozen next_result\n        T.ok next_result instanceof DRA.Interlap\n        T.ok not equals result, next_result\n        result = next_result\n      resolve DRA.as_list result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"union with multiple segments\" ] = ( T, done ) ->\n  DRA = require './discontinuous-range-arithmetics'\n  probes_and_matchers = [\n    [ [ [], [ [ 1, 1, ], [ -3, -1, ], ] ], [ [ -3, -1, ], [ 1, 1, ], ] ]\n    [ [ [], [ [ 1, 1, ], [ -3, 3, ], ] ], [ [ -3, 3, ], ] ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      [ first, segments, ] = probe\n      result = new DRA.Interlap first\n      result = DRA.union result, segments...\n      resolve DRA.as_list result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"union with Interlap\" ] = ( T, done ) ->\n  DRA = require './discontinuous-range-arithmetics'\n  probes_and_matchers = [\n    [ [ [], [ [ 1, 1, ], [ -3, -1, ], ] ], [ [ -3, -1, ], [ 1, 1, ], ] ]\n    [ [ [], [ [ 1, 1, ], [ -3, 3, ], ] ], [ [ -3, 3, ], ] ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      [ first, ranges, ] = probe\n      result  = new DRA.Interlap first\n      ranges  = ( ( new DRA.Interlap [ range, ] ) for range in ranges )\n      result  = DRA.union result, ranges...\n      resolve DRA.as_list result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_equality_between_custom_and_basic_values = ->\n  DRA     = require './discontinuous-range-arithmetics'\n  d0      = [ [ 110, 115, ], [ 112, 120, ], [ 300, 310, ], ]\n  d1      = new DRA.Interlap d0\n  d1_list = [ [ 110, 120, ], [ 300, 310, ] ]\n  info d0\n  info d1_list\n  info d0 is d1\n  info equals d0, d1\n  info equals d1, d1_list\n  info d1\n  info [ d1..., ]\n  info ( [ d..., ] for d in d1 )\n  info equals ( [ d..., ] for d in d1 ), d1_list\n  info type_of d0\n  info type_of d1\n  info type_of d1_list\n  info equals ( DRA.as_list d1 ), d1_list\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  DRA = require './discontinuous-range-arithmetics'\n  d0  = [ [ 1, 3, ], [ 5, 7, ] ]\n  info d1 = new DRA.Interlap           d0\n  info d2 = DRA.interlap_from_segments d0...\n  info equals d1, d2\n  info type_of               d1\n  info equals d1, d0\n  info equals d1.size, d0.size\n  info d0.size\n  info d1.size\n  # class Xxxx\n  # xxxx = new Xxxx()\n  # info CND.type_of           xxxx\n  # info types.type_of         xxxx\n  # info typeof                xxxx\n  # info Object::toString.call xxxx\n  return null\n\n############################################################################################################\nif module is require.main then do =>\n  # demo_1()\n  # demo_equality_between_custom_and_basic_values()\n  test @\n  # test @[ \"DRA.interlap_from_segments\" ]\n  # test @[ \"DRA.Interlap properties\" ]\n  # test @[ \"DRA.new_segment\" ]\n  # test @[ \"DRA.Segment.from\" ]\n  # test @[ \"DRA.Interlap.from\" ]\n  # test @[ \"DRA.segment_from_lohi\" ]\n  # test @[ \"union with single segment\" ]\n  # test @[ \"new DRA.Interlap\" ]\n  # test @[ \"union with multiple segments\" ]\n  # test @[ \"union with Interlap\" ]\n\n\n"
  ]
}