{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/home/flow/jzr/hengist/dev/discontinuous-ranges/src/discontinuous-range-arithmetics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'DISCONTINUOUS-RANGE-ARITHMETICS'\nrpr                       = CND.rpr\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nhex                       = ( n ) -> ( n.toString 16 ).toUpperCase().padStart 4, '0'\nDRange                    = require 'drange'\nmerge_ranges              = require 'merge-ranges'\n#...........................................................................................................\n@types                    = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  declare\n  cast\n  type_of }               = @types.export()\nLFT                       = require 'letsfreezethat'\n# { lets\n#   freeze }                = LFT\nfreeze                    = Object.freeze\nMAIN                      = @\n\n#===========================================================================================================\n# TYPES\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'urange_instance',    ( x ) -> x instanceof Urange\ndeclare 'interlap_instance',  ( x ) -> x instanceof Interlap\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'urange_segment', tests:\n  \"must be a list\":                                         ( x ) -> @isa.list x\n  \"length must be 2\":                                       ( x ) -> x.length is 2\n  \"lo boundary must be an infnumber\":                       ( x ) -> isa.infnumber x[ 0 ]\n  \"hi boundary must be an infnumber\":                       ( x ) -> isa.infnumber x[ 1 ]\n  \"lo boundary must be less than or equal to hi boundary\":  ( x ) -> x[ 0 ] <= x[ 1 ]\n\n\n#===========================================================================================================\n# OOP\n#-----------------------------------------------------------------------------------------------------------\nclass Urange\n  ### TAINT add type checking to avoid silent failure of e.g. `new DRange [ 1, 3, ]` ###\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( P... ) ->\n    @d = new DRange()\n    # @d = ( require 'letsfreezethat' ).freeze new DRange()\n    for p in P\n      if isa.urange_instance p\n        @d.add p.d\n      else\n        validate.urange_segment p\n        @d.add p...\n    Object.defineProperty @, 'length', get: -> @d.length\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  union: ( other ) ->\n    other = ( new Urange other ) unless isa.urange_instance other\n    @d.add other.d\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  difference: ( other ) ->\n    other = ( new Urange other ) unless isa.urange_instance other\n    @d.subtract other.d\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  as_lists: -> ( [ r.low, r.high, ] for r in @d.ranges )\n\n@Urange = Urange\n\n\n#===========================================================================================================\n# FUN\n#-----------------------------------------------------------------------------------------------------------\nclass Segment extends Array\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( lohi ) ->\n    validate.urange_segment lohi if lohi\n    super lohi[ 0 ], lohi[ 1 ]\n    Object.defineProperty @, 'size',  get: @_size_of\n    Object.defineProperty @, 'lo',    get: -> @[ 0 ]\n    Object.defineProperty @, 'hi',    get: -> @[ 1 ]\n    return freeze @\n\n  #---------------------------------------------------------------------------------------------------------\n  _size_of:           -> @[ 1 ] - @[ 0 ] + 1\n  # @from:    ( P...  ) -> new Segment P...\n  @from:  -> throw new Error \"^778^ `Segment.from()` is not implemented\"\n\n#-----------------------------------------------------------------------------------------------------------\nclass Interlap  extends Array\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( segments ) ->\n    super()\n    Object.defineProperty @, 'size',    get: @_size_of\n    Object.defineProperty @, 'lo',      get: -> @first?[ 0      ] ? null\n    Object.defineProperty @, 'hi',      get: -> @last?[  1      ] ? null\n    Object.defineProperty @, 'first',   get: -> @[ 0            ] ? null\n    Object.defineProperty @, 'last',    get: -> @[ @length - 1  ] ? null\n    Object.defineProperty @, '_drange', get: -> drange\n    #.......................................................................................................\n    if segments instanceof DRange\n      drange    = segments\n    else if segments instanceof Interlap\n      drange    = segments._drange\n    else if Array.isArray segments\n      drange    = new DRange()\n      segments  = [ segments[ 0 ]..., ] if segments.length is 1 and isa.generator segments[ 0 ]\n      for segment in segments\n        validate.urange_segment segment unless segment instanceof Segment\n        drange.add segment...\n    else\n      throw new Error \"^445^ unable to instantiate from a #{type_of segments} (#{rpr segments})\"\n    #.......................................................................................................\n    MAIN._apply_segments_from_drange @, drange\n    return freeze @\n\n  #---------------------------------------------------------------------------------------------------------\n  _size_of:           -> @reduce ( ( sum, segment ) -> sum + segment.size ), 0\n  @from:  -> throw new Error \"^776^ `Interlap.from()` is not implemented\"\n  # @from:  -> ( P...  ) -> MAIN.interlap_from_segments P...\n  # @from:    ( P...  ) -> new Interlap P...\n\n# npm install @scotttrinh/number-ranges\n# drange-immutable\n\n#-----------------------------------------------------------------------------------------------------------\n@Interlap   = Interlap\n@Segment  = Segment\n\n#-----------------------------------------------------------------------------------------------------------\n@segment_from_lohi      = ( lo, hi      ) -> new Segment if hi? then [ lo, hi, ] else [ lo, ]\n@interlap_from_segments   = ( segments... ) -> new Interlap segments\n\n#-----------------------------------------------------------------------------------------------------------\n@union = ( me, others... ) ->\n  me      = new Interlap me unless me instanceof Interlap\n  drange  = me._drange\n  drange  = drange.add segment... for segment in me\n  for other in others\n    if other instanceof Interlap\n      drange = drange.add segment... for segment in other\n    else\n      other   = new Segment other unless other instanceof Segment\n      drange  = drange.add other...\n  return new Interlap drange\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_drange_as_interlap  = ( drange ) ->\n#   return freeze @_sort Interlap.from ( ( new Segment [ r.low, r.high, ] ) for r in drange.ranges )\n\n#-----------------------------------------------------------------------------------------------------------\n@_sort = ( interlap ) -> interlap.sort ( a, b ) ->\n  return -1 if a[ 0 ] < b[ 0 ]\n  return +1 if a[ 0 ] > b[ 0 ]\n  return -1 if a[ 1 ] < b[ 1 ]\n  return +1 if a[ 1 ] > b[ 1 ]\n  return  0\n\n#---------------------------------------------------------------------------------------------------------\n@_apply_segments_from_drange = ( me, drange ) ->\n  segments = MAIN._sort ( ( new Segment [ r.low, r.high, ] ) for r in drange.ranges )\n  me.push segment for segment in segments ### TAINT use `splice()` ###\n  return me\n\n\n\n\n#===========================================================================================================\n# OTHER\n#-----------------------------------------------------------------------------------------------------------\n@ranges_from_drange   = ( drange ) -> ( [ r.low, r.high, ] for r in drange.ranges )\n@ranges_from_urange   = ( urange ) -> validate.urange_instance urange; return @ranges_from_drange urange.d\n@numbers_from_drange  = ( drange ) -> ( ( drange.index i ) for i in [ 0 ... drange.length ] )\n@numbers_from_urange  = ( urange ) -> validate.urange_instance urange; return @numbers_from_drange urange.d\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_subtract_ranges_DRange = ->\n  super_rng   = new DRange 1, 100\n  blue_rng    = new DRange 13\n  blue_rng    = blue_rng.add 8\n  blue_rng    = blue_rng.add 60, 80 # [8, 13, 60-80]\n  blue_rng    = blue_rng.add 81\n  blue_rng    = blue_rng.add new DRange 27, 55\n  help '^3332^', @ranges_from_drange blue_rng\n  red_rng     = super_rng.clone().subtract blue_rng\n  help '^556^', @ranges_from_drange red_rng\n  help '^556^', red_rng.length\n  info '^334^', @numbers_from_drange red_rng\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_subtract_ranges_Urange = ->\n  super_rng   = new Urange [ 1, 100, ]\n  blue_rng    = new Urange [ 13, 13, ], [ 8, 8, ], ( new Urange [ 60, 80, ] )\n  info ( CND.truth super_rng  instanceof Urange ), super_rng\n  info ( CND.truth blue_rng   instanceof Urange ), blue_rng\n  blue_rng    = blue_rng.union new Urange [ 81, 81, ]\n  blue_rng    = blue_rng.union new Urange [ 27, 55, ]\n  blue_rng    = blue_rng.union [ 27, 55, ]\n  help '^3332^', @ranges_from_urange blue_rng\n  red_rng     = ( new Urange super_rng )\n  red_rng     = red_rng.difference blue_rng\n  help '^556^', @ranges_from_urange red_rng\n  help '^556^', red_rng.length\n  info '^334^', @numbers_from_urange red_rng\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_merge_ranges = ->\n  ranges = [\n    [ 10, 20, ]\n    [ 15, 30, ]\n    [ 30, 32, ]\n    [ 42, 42, ]\n    [ 88, 99, ]\n    ]\n  a = merge_ranges ranges\n  b = @ranges_from_urange new Urange ranges...\n  info 'merging:', a\n  info 'merging:', b\n  validate.true CND.equals a, b\n\n# #-----------------------------------------------------------------------------------------------------------\n# module.exports = { Urange, }\n\n############################################################################################################\nif module is require.main then do =>\n  await @demo_subtract_ranges_DRange()\n  await @demo_subtract_ranges_Urange()\n  await @demo_merge_ranges()\n\n\n\n"
  ]
}