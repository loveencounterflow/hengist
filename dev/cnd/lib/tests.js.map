{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/tests.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA;;EAEA,GAAA,GAA4B,OAAA,CAAQ,mBAAR,EAF5B;;;;EAKA,GAAA,GAA4B,GAAG,CAAC,GAAG,CAAC,IAAR,CAAa,GAAb;;EAC5B,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAf5B;;;EAiBA,IAAA,GAA4B,OAAA,CAAQ,UAAR,EAjB5B;;;;;;;;;;;;;;;;;;;;;;EAwCA,IAAC,CAAE,WAAF,CAAD,GAAmB,QAAA,CAAE,CAAF,CAAA,EAAA;;AACnB,QAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA;IACE,MAAA,GAAS;MACP;QAAE,KAAF;QAAS,EAAT;QAAa;UAAE,KAAF;UAAS,CAAE,QAAA,CAAA,CAAA;mBAAG;UAAH,CAAF,CAAT;SAAb;QAAuC;UAAE,CAAA,EAAG,GAAL;UAAU,CAAA,EAAG;QAAb,CAAvC;OADO;MADX;;;IAME,KAAA,wCAAA;;MACE,MAAA,GAAU,GAAG,CAAC,SAAJ,CAAc,KAAd;MACV,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa,KAAb;MACA,CAAC,CAAC,EAAF,CAAK,MAAA,KAAY,KAAjB;IAHF,CANF;;AAWE,WAAO;EAZU,EAxCnB;;;EAyDA,IAAC,CAAE,yBAAF,CAAD,GAAiC,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACjC,QAAA,QAAA,EAAA,OAAA,EAAA;IAAE,QAAA,GAA4B;IAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;IAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;IAC5B,OAAA,CAAQ,MAAR;IACA,OAAA,CAAQ,OAAR;WACA,IAAA,CAAA;EAN+B,EAzDjC;;;EAmEA,IAAC,CAAE,cAAF,CAAD,GAAsB,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;IACpB,CAAC,CAAC,EAAF,CAAO,GAAG,CAAC,YAAJ,CAAkB,UAAlB,EAA8B,UAA9B,CAAP,EAAyD,UAAzD;IACA,CAAC,CAAC,EAAF,CAAO,GAAG,CAAC,WAAJ,CAAkB,UAAlB,EAA8B,UAA9B,CAAP,EAAyD,UAAzD;IACA,CAAC,CAAC,EAAF,CAAO,GAAG,CAAC,YAAJ,CAAkB,UAAlB,CAAP,EAAyD,UAAzD;IACA,CAAC,CAAC,EAAF,CAAO,GAAG,CAAC,WAAJ,CAAkB,UAAlB,CAAP,EAAyD,UAAzD;IACA,CAAC,CAAC,EAAF,CAAO,GAAG,CAAC,YAAJ,CAAkB,UAAlB,EAA8B,SAA9B,CAAP,EAAyD,kBAAzD;IACA,CAAC,CAAC,EAAF,CAAO,GAAG,CAAC,WAAJ,CAAkB,UAAlB,EAA8B,SAA9B,CAAP,EAAyD,kBAAzD,EALF;;;;WASE,IAAA,CAAA;EAVoB,EAnEtB;;;EAgFA,IAAC,CAAE,eAAF,CAAD,GAAuB,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;IACrB,CAAC,CAAC,EAAF,CAAO,GAAG,CAAC,aAAJ,CAAkB,EAAlB,CAAP,EAAuC,IAAvC;IACA,CAAC,CAAC,EAAF,CAAO,GAAG,CAAC,aAAJ,CAAkB,KAAlB,CAAP,EAAuC,QAAvC;IACA,CAAC,CAAC,EAAF,CAAO,GAAG,CAAC,aAAJ,CAAkB,UAAlB,CAAP,EAAuC,YAAvC;IACA,CAAC,CAAC,EAAF,CAAO,GAAG,CAAC,aAAJ,CAAkB,SAAlB,CAAP,EAAuC,YAAvC;WACA,IAAA,CAAA;EALqB,EAhFvB;;;EAwFA,IAAC,CAAE,KAAF,CAAD,GAAa,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;IACX,IAAA,CAAK,GAAA,CAAI,EAAJ,CAAL;IACA,IAAA,CAAK,GAAA,CAAI,cAAJ,CAAL;IACA,IAAA,CAAK,GAAA,CAAI;MAAE,GAAA,EAAK,KAAP;MAAc,GAAA,EAAK,CAAE,IAAF,EAAQ,IAAR,EAAc,MAAd;IAAnB,CAAJ,CAAL;IACA,IAAA,CAAK,GAAA,CAAI,EAAJ,CAAL;IACA,IAAA,CAAK,GAAA,CAAI,cAAJ,CAAL;IACA,IAAA,CAAK,GAAA,CAAI;MAAE,GAAA,EAAK,KAAP;MAAc,GAAA,EAAK,CAAE,IAAF,EAAQ,IAAR,EAAc,MAAd;IAAnB,CAAJ,CAAL;IACA,CAAC,CAAC,EAAF,CAAO,GAAA,CAAI,EAAJ,CAAP,EAA+D,CAAA,EAAA,CAA/D;IACA,CAAC,CAAC,EAAF,CAAO,GAAA,CAAI,cAAJ,CAAP,EAA+D,CAAA,WAAA,CAA/D;AAAiF,2CACjF,CAAC,CAAC,EAAF,CAAO,GAAA,CAAI;MAAE,GAAA,EAAK,KAAP;MAAc,GAAA,EAAK,CAAE,IAAF,EAAQ,IAAR,EAAc,MAAd;IAAnB,CAAJ,CAAP,EAA+D,CAAA,8CAAA,CAA/D;WACA,IAAA,CAAA;EAVW,EAxFb;;;EAqGA,IAAC,CAAE,SAAF,CAAD,GAAiB,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACjB,QAAA;IAAE,OAAA,GAAU,GAAG,CAAC,OAAO,CAAC,IAAZ,CAAiB,GAAjB;IACV,IAAA,CAAK,OAAA,CAAQ,EAAR,CAAL;IACA,IAAA,CAAK,OAAA,CAAQ,cAAR,CAAL;IACA,IAAA,CAAK,OAAA,CAAQ;MAAE,GAAA,EAAK,KAAP;MAAc,GAAA,EAAK,CAAE,IAAF,EAAQ,IAAR,EAAc,MAAd;IAAnB,CAAR,CAAL;IACA,IAAA,CAAK,OAAA,CAAQ,EAAR,CAAL;IACA,IAAA,CAAK,OAAA,CAAQ,cAAR,CAAL;IACA,IAAA,CAAK,OAAA,CAAQ;MAAE,GAAA,EAAK,KAAP;MAAc,GAAA,EAAK,CAAE,IAAF,EAAQ,IAAR,EAAc,MAAd;IAAnB,CAAR,CAAL;IACA,IAAA,CAAK,GAAA,CAAM,OAAA,CAAQ,EAAR,CAAN,CAAL;IACA,IAAA,CAAK,GAAA,CAAM,OAAA,CAAQ,cAAR,CAAN,CAAL;IACA,IAAA,CAAK,GAAA,CAAM,OAAA,CAAQ;MAAE,GAAA,EAAK,KAAP;MAAc,GAAA,EAAK,CAAE,IAAF,EAAQ,IAAR,EAAc,MAAd;IAAnB,CAAR,CAAN,CAAL;IACA,CAAC,CAAC,EAAF,CAAO,OAAA,CAAQ,EAAR,CAAP,EAAmE,oBAAnE;IACA,CAAC,CAAC,EAAF,CAAO,OAAA,CAAQ,cAAR,CAAP,EAAmE,6BAAnE;IACA,CAAC,CAAC,EAAF,CAAO,OAAA,CAAQ;MAAE,GAAA,EAAK,KAAP;MAAc,GAAA,EAAK,CAAE,IAAF,EAAQ,IAAR,EAAc,MAAd;IAAnB,CAAR,CAAP,EAAmE,wIAAnE;WACA,IAAA,CAAA;EAde,EArGjB;;;EA4HA,IAAO,qBAAP;IACE,IAAA,CAAK,IAAL,EAAQ;MAAE,OAAA,EAAS;IAAX,CAAR,EADF;;;EA5HA;;;AAAA",
  "sourcesContent": [
    "\n\n'use strict'\n\nCND                       = require '../../../apps/cnd'\n# console.log '^3332^', ( k for k of CND )\n# console.log '^3332^', CND.get_logger\nrpr                       = CND.rpr.bind CND\nbadge                     = 'HENGIST/DEV/CND/test'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"is_subset\" ] = ( T ) ->\n#   T.eq false, CND.is_subset ( Array.from 'abcde' ), ( Array.from 'abcd' )\n#   T.eq false, CND.is_subset ( Array.from 'abcx'  ), ( Array.from 'abcd' )\n#   T.eq false, CND.is_subset ( Array.from 'abcd'  ), ( []                )\n#   T.eq true,  CND.is_subset ( Array.from 'abcd'  ), ( Array.from 'abcd' )\n#   T.eq true,  CND.is_subset ( Array.from 'abc'   ), ( Array.from 'abcd' )\n#   T.eq true,  CND.is_subset ( []                 ), ( Array.from 'abcd' )\n#   T.eq true,  CND.is_subset ( []                 ), ( Array.from []     )\n#   T.eq false, CND.is_subset ( new Set 'abcde'    ), ( new Set 'abcd'    )\n#   T.eq false, CND.is_subset ( new Set 'abcx'     ), ( new Set 'abcd'    )\n#   T.eq false, CND.is_subset ( new Set 'abcx'     ), ( new Set()         )\n#   T.eq true,  CND.is_subset ( new Set 'abcd'     ), ( new Set 'abcd'    )\n#   T.eq true,  CND.is_subset ( new Set 'abc'      ), ( new Set 'abcd'    )\n#   T.eq true,  CND.is_subset ( new Set()          ), ( new Set 'abcd'    )\n#   T.eq true,  CND.is_subset ( new Set()          ), ( new Set()         )\n#   #.........................................................................................................\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"deep_copy\" ] = ( T ) ->\n  ### TAINT set comparison doesn't work ###\n  probes = [\n    [ 'foo', 42, [ 'bar', ( -> 'xxx' ), ], { q: 'Q', s: 'S', }, ]\n    ]\n  # probe   = [ 'foo', 42, [ 'bar', ( -> 'xxx' ), ], ( new Set Array.from 'abc' ), ]\n  # matcher = [ 'foo', 42, [ 'bar', ( -> 'xxx' ), ], ( new Set Array.from 'abc' ), ]\n  for probe in probes\n    result  = CND.deep_copy probe\n    T.eq result, probe\n    T.ok result isnt probe\n  #.........................................................................................................\n  return null\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"logging with timestamps\" ] = ( T, done ) ->\n  my_badge                  = 'BITSNPIECES/test'\n  my_info                   = CND.get_logger 'info',      badge\n  my_help                   = CND.get_logger 'help',      badge\n  my_info 'helo'\n  my_help 'world'\n  done()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"path methods\" ] = ( T, done ) ->\n  T.eq ( CND.here_abspath  '/foo/bar', '/baz/coo'       ), '/baz/coo'\n  T.eq ( CND.cwd_abspath   '/foo/bar', '/baz/coo'       ), '/baz/coo'\n  T.eq ( CND.here_abspath  '/baz/coo'                   ), '/baz/coo'\n  T.eq ( CND.cwd_abspath   '/baz/coo'                   ), '/baz/coo'\n  T.eq ( CND.here_abspath  '/foo/bar', 'baz/coo'        ), '/foo/bar/baz/coo'\n  T.eq ( CND.cwd_abspath   '/foo/bar', 'baz/coo'        ), '/foo/bar/baz/coo'\n  # T.eq ( CND.here_abspath  'baz/coo'                    ), '/....../cnd/baz/coo'\n  # T.eq ( CND.cwd_abspath   'baz/coo'                    ), '/....../cnd/baz/coo'\n  # T.eq ( CND.here_abspath  __dirname, 'baz/coo', 'x.js' ), '/....../cnd/lib/baz/coo/x.js'\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"format_number\" ] = ( T, done ) ->\n  T.eq ( CND.format_number 42         ), '42'\n  T.eq ( CND.format_number 42000      ), '42,000'\n  T.eq ( CND.format_number 42000.1234 ), '42,000.123'\n  T.eq ( CND.format_number 42.1234e6  ), '42,123,400'\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"rpr\" ] = ( T, done ) ->\n  echo rpr 42\n  echo rpr 42_000_000_000\n  echo rpr { foo: 'bar', bar: [ true, null, undefined, ], }\n  info rpr 42\n  info rpr 42_000_000_000\n  info rpr { foo: 'bar', bar: [ true, null, undefined, ], }\n  T.eq ( rpr 42                                               ), \"\"\"42\"\"\"\n  T.eq ( rpr 42_000_000_000                                   ), \"\"\"42000000000\"\"\" ### TAINT should have underscores ###\n  T.eq ( rpr { foo: 'bar', bar: [ true, null, undefined, ], } ), \"\"\"{ foo: 'bar', bar: [ true, null, undefined ] }\"\"\"\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"inspect\" ] = ( T, done ) ->\n  inspect = CND.inspect.bind CND\n  echo inspect 42\n  echo inspect 42_000_000_000\n  echo inspect { foo: 'bar', bar: [ true, null, undefined, ], }\n  info inspect 42\n  info inspect 42_000_000_000\n  info inspect { foo: 'bar', bar: [ true, null, undefined, ], }\n  echo rpr ( inspect 42                                               )\n  echo rpr ( inspect 42_000_000_000                                   )\n  echo rpr ( inspect { foo: 'bar', bar: [ true, null, undefined, ], } )\n  T.eq ( inspect 42                                               ), '\\x1B[33m42\\x1B[39m'\n  T.eq ( inspect 42_000_000_000                                   ), '\\x1B[33m42000000000\\x1B[39m'\n  T.eq ( inspect { foo: 'bar', bar: [ true, null, undefined, ], } ), \"{\\n  foo: \\x1B[32m'bar'\\x1B[39m,\\n  bar: [\\n    \\x1B[33mtrue\\x1B[39m,\\n    \\x1B[1mnull\\x1B[22m,\\n    \\x1B[90mundefined\\x1B[39m\\n  ]\\n}\"\n  done()\n\n\n\n\n\n\n\n############################################################################################################\nunless module.parent?\n  test @, { timeout: 2500, }\n  # test @[ \"path methods\" ]\n  # test @[ \"rpr\" ]\n  # test @[ \"inspect\" ]\n\n\n\n\n\n"
  ]
}