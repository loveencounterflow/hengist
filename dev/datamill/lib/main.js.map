{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/home/flow/jzr/hengist/dev/datamill/src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'DATAMILL-DEMO'\nrpr                       = CND.rpr\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\nassign                    = Object.assign\nafter                     = ( time_s, f ) -> setTimeout f, time_s * 1000\ndefer                     = setImmediate\nasync                     = {}\nsync                      = { concurrency: 1, }\n# async                     = { async: true, }\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  cast\n  type_of }               = types\nINTERTEXT                 = require 'intertext'\n{ HTML\n  RXWS }                  = require '../../../apps/paragate'\nSP                        = require 'steampipes'\n{ $\n  $drain\n  $show\n  $watch }                = SP.export()\nDATOM                     = require '../../../apps/datom'\n{ select\n  stamp\n  new_datom\n  fresh_datom }           = DATOM.export()\n\n#-----------------------------------------------------------------------------------------------------------\n@$headings = ( S ) ->\n  ### Recognize heading as any line that starts with a `#` (hash). Current behavior is to\n  check whether both prv and nxt lines are blank and if not so issue a warning; this detail may change\n  in the future. ###\n  pattern = /// ^ (?<hashes> \\#+ ) (?<text> [\\s\\S]* ) $ ///\n  #.........................................................................................................\n  # H.register_key S, '<h', { is_block: true, }\n  # H.register_key S, '>h', { is_block: true, }\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    return send d unless d.$key   is '^block'\n    return send d unless d.level  is 0\n    return send d unless ( match = d.text.match pattern )?\n    urge '^334^', CND.reverse d\n    send stamp d\n    level = match.groups.hashes.length\n    text  = match.groups.text.replace /^\\s*(.*?)\\s*$/g, '$1' ### TAINT use trim method ###\n    dest  = '???' # d.dest\n    send fresh_datom '<h',    { level, $vnr: [ d.$vnr..., 1, ] , dest, ref: 'blk/hd1', }\n    send fresh_datom '^line', { text,  $vnr: [ d.$vnr..., 2, ] , dest, ref: 'blk/hd2', }\n    send fresh_datom '>h',    { level, $vnr: [ d.$vnr..., 3, ] , dest, ref: 'blk/hd3', }\n    return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$transform = ( S ) ->\n  pipeline = []\n  pipeline.push @$headings    S\n  return SP.pull pipeline...\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$tee_write_to_db = ( S ) ->\n  first = Symbol 'first'\n  last  = Symbol 'last'\n  return $ { first, last, }, ( d, send ) =>\n    if d is first\n      null\n    if d is last\n      null\n    send d\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo = -> new Promise ( resolve ) =>\n  # debug '^4554^', rpr ( k for k of DATAMILL )\n  DISPLAY = require '../../paragate/lib/display'\n  source  = \"\"\"\n    <title>A Proposal</title>\n    <h1>Motivation</h1>\n    <p>It has been suggested to further the cause.</p>\n    <p>This is <i>very</i> desirable indeed.</p>\n\n    # First Things First\n\n    A paragraph on the lowest level\n    (this, hopefully, does not apply to the paragraph's content\n    but only to its position in the manuscript).\n\n      An indented paragraph\n      which may be understood\n      as a blockquote or somesuch.\n\n    ```\n    some\n\n    code\n    ```\n\n    \"\"\"\n  S         = {}\n  pipeline  = []\n  tokens    = RXWS.grammar.parse source\n  xxx = ( d ) -> R = {}; R[ k ] = d[ k ] for k in ( Object.keys d ).sort(); return R\n  pipeline.push tokens\n  pipeline.push @$transform S\n  pipeline.push $watch ( d ) =>\n    ### TAINT use datamill display ###\n    switch d.$key\n      when '<document', '>document' then echo CND.grey xxx d\n      when '^blank',    '>document' then echo CND.grey CND.reverse xxx d\n      else\n        switch d.$key[ 0 ]\n          when '<'  then echo CND.lime              xxx d\n          when '>'  then echo CND.red               xxx d\n          when '^'  then echo CND.yellow            xxx d\n          else           echo CND.reverse CND.green xxx d\n    return null\n  pipeline.push @$tee_write_to_db S\n  pipeline.push $drain -> resolve()\n  SP.pull pipeline...\n  # # tokens  = HTML.parse source\n  # info rpr token for token in tokens\n  # await DISPLAY.show_tokens_as_table tokens\n  # for d in tokens\n  #   echo CND.rainbow d\n  #   switch d.$key\n  #     when '<document' then null\n  #     when '>document' then null\n  #     when '^blank' then null\n  #     when '^block'\n  #       { text, } = d\n  #       echo text\n  #     else throw new Error \"^3376^ unknown $key #{rpr d.$key}\"\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  await @demo()\n  return null\n\n\n\n\n\n\n\n"
  ]
}