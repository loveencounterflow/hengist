{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/home/flow/jzr/hengist/dev/datamill/src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'DATAMILL-DEMO'\nrpr                       = CND.rpr\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\nassign                    = Object.assign\nafter                     = ( time_s, f ) -> setTimeout f, time_s * 1000\ndefer                     = setImmediate\nasync                     = {}\nsync                      = { concurrency: 1, }\n# async                     = { async: true, }\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  cast\n  type_of }               = types\nINTERTEXT                 = require 'intertext'\n{ HTML\n  RXWS }                  = require '../../../apps/paragate'\nSP                        = require 'steampipes'\n{ $\n  $async\n  $drain\n  $show\n  $watch }                = SP.export()\nDATOM                     = require '../../../apps/datom'\n{ select\n  stamp\n  new_datom\n  fresh_datom }           = DATOM.export()\n# DB                        = require '../intershop/intershop_modules/db'\nINTERSHOP                 = require '../intershop'\nPGP                       = ( require 'pg-promise' ) { capSQL: false, }\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$headings = ( me ) ->\n  ### Recognize heading as any line that starts with a `#` (hash). Current behavior is to\n  check whether both prv and nxt lines are blank and if not so issue a warning; this detail may change\n  in the future. ###\n  pattern = /// ^ (?<hashes> \\#+ ) (?<text> [\\s\\S]* ) $ ///\n  #.........................................................................................................\n  # H.register_key S, '<h', { is_block: true, }\n  # H.register_key S, '>h', { is_block: true, }\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    return send d unless d.$key   is '^block'\n    return send d unless d.level  is 0\n    return send d unless ( match = d.text.match pattern )?\n    urge '^334^', CND.reverse d\n    send stamp d\n    level = match.groups.hashes.length\n    text  = match.groups.text.replace /^\\s*(.*?)\\s*$/g, '$1' ### TAINT use trim method ###\n    dest  = '???' # d.dest\n    send fresh_datom '<h',    { level, $vnr: [ d.$vnr..., 1, ] , dest, ref: 'blk/hd1', }\n    send fresh_datom '^line', { text,  $vnr: [ d.$vnr..., 2, ] , dest, ref: 'blk/hd2', }\n    send fresh_datom '>h',    { level, $vnr: [ d.$vnr..., 3, ] , dest, ref: 'blk/hd3', }\n    return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$transform = ( me ) ->\n  last      = Symbol 'last'\n  pipeline  = []\n  pipeline.push @$headings    me\n  pipeline.push $ { last, }, $ ( d, send ) ->\n    if d is last\n      send { $key: '^foo', $vnr: [ 10, -1, ], }\n      send { $key: '^foo', $vnr: [ 10, ], }\n      send { $key: '^foo', $vnr: [ 10, 0, ], }\n      send { $key: '^foo', $vnr: [ 10, 1, ], }\n      return null\n    send d\n  return SP.pull pipeline...\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$async_tee_write_to_db_2 = ( me ) ->\n  DEMO_datoms_table   = new PGP.helpers.TableName { schema: 'demo', table: 'datoms', }\n  DEMO_datoms_fields  = new PGP.helpers.ColumnSet [ 'vnr', 'key', 'atr', 'stamped', ] #, table\n  last                = Symbol 'last'\n  buffer              = []\n  buffer_size         = 15\n  pipeline            = []\n  #.........................................................................................................\n  flush = ->\n    values        = field_values_from_datoms buffer\n    buffer.length = 0\n    sql           = PGP.helpers.insert values, DEMO_datoms_fields, DEMO_datoms_table\n    await me.db.none sql\n    whisper '^443^', CND.plum CND.reverse \"written #{values.length} values\"\n    return null\n  #.........................................................................................................\n  pipeline.push $guard = $ { last, }, ( d, send ) => send d\n  #.........................................................................................................\n  pipeline.push $buffer = $async ( d, send, done ) =>\n    if d is last\n      await flush() if ( buffer.length > 0 )\n    else\n      buffer.push d\n      await flush() if ( buffer.length >= buffer_size )\n      send d\n    done()\n    return null\n  #.........................................................................................................\n  return SP.pull pipeline...\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$tee_write_to_db_1 = ( me ) ->\n  first     = Symbol 'first'\n  last      = Symbol 'last'\n  sql       = \"insert into DEMO.datoms ( vnr, key, atr, stamped ) values ( $1, $2, $3, $4 );\"\n  pipeline  = []\n  #.........................................................................................................\n  pipeline.push $guard = $ { first, last, }, ( d, send ) =>\n    if d is first\n      help '^807^', \"first\"\n      return null\n    if d is last\n      help '^807^', \"last\"\n      return null\n    send d\n  #.........................................................................................................\n  pipeline.push $write = $async ( d, send, done ) =>\n    #.......................................................................................................\n    await DB.query [ sql, ( field_values_from_datoms d )..., ]\n    #.......................................................................................................\n    send d\n    done()\n    return null\n  #.........................................................................................................\n  return SP.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\nfield_values_from_datoms = ( ds ) -> ( ( field_values_from_datom d ) for d in ds )\n\n#-----------------------------------------------------------------------------------------------------------\nfield_values_from_datom = ( d ) ->\n  stamped = d.stamped ? false\n  vnr     = ( ( if x is Infinity then 999 else if x is -Infinity then -999 else x ) for x in d.$vnr )\n  return { vnr, key: d.$key, atr: null, stamped, }\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n$display = ( me ) =>\n  return $watch ( d ) =>\n    xxx = ( d ) -> R = {}; R[ k ] = d[ k ] for k in ( Object.keys d ).sort(); return R\n    ### TAINT use datamill display ###\n    switch d.$key\n      when '<document', '>document' then echo CND.grey xxx d\n      when '^blank',    '>document' then echo CND.grey CND.reverse xxx d\n      else\n        switch d.$key[ 0 ]\n          when '<'  then echo CND.lime              xxx d\n          when '>'  then echo CND.red               xxx d\n          when '^'  then echo CND.yellow            xxx d\n          else           echo CND.reverse CND.green xxx d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@connect = ->\n  O                         = INTERSHOP.settings\n  db_user                   = O[ 'intershop/db/user' ].value\n  db_name                   = O[ 'intershop/db/name' ].value\n  connection_string         = \"postgres://#{db_user}@localhost/#{db_name}\"\n  return PGP connection_string\n\n#-----------------------------------------------------------------------------------------------------------\n@_clear = ( me ) ->\n  debug '^443^', \"truncating table DEMO.datoms\"\n  await me.db.none \"truncate DEMO.datoms cascade;\"\n  debug '^443^', \"ok\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_list = -> # new Promise ( resolve ) =>\n  me        = { db: @connect(), }\n  rows      = await me.db.any \"select * from DEMO.datoms order by vnr using <;\"\n  for row from rows\n    help '^332^', row\n  me.db.$pool.end()  # alternative, see https://github.com/vitaly-t/pg-promise#library-de-initialization\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_stream_using_intershop = -> new Promise ( resolve, reject ) =>\n  DB          = require '../intershop/intershop_modules/db'\n  # sql       = \"select * from MIRAGE.mirror where dsk = 'proposal' order by linenr;\"\n  sql         = \"select n from generate_series( 42, 51 ) as x ( n );\"\n  source      = await DB.new_query_source sql\n  pipeline    = []\n  pipeline.push source\n  pipeline.push SP.$show()\n  pipeline.push $drain -> do =>\n    help '^445-7^', \"stream ended\"\n    await DB._pool.end()\n    resolve()\n  SP.pull pipeline...\n  # source.end()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_stream = -> new Promise ( resolve, reject ) =>\n  DB          = require '../intershop/intershop_modules/db'\n  await @_demo_stream()\n  await DB._pool.end()\n  urge '^445-1^', \"pool ended\"\n  resolve()\n\n#-----------------------------------------------------------------------------------------------------------\n@_demo_stream = -> new Promise ( resolve, reject ) =>\n  urge '^445-2^', \"starting\"\n  DB          = require '../intershop/intershop_modules/db'\n  Cursor      = require 'pg-cursor'\n  # sql         = \"select * from MIRAGE.mirror where dsk = 'proposal' order by linenr;\"\n  sql         = \"select n from generate_series( 42, 51 ) as x ( n );\"\n  settings    = null\n  client      = await DB._pool.connect()\n  cursor      = new Cursor sql\n  cursor      = await client.query cursor\n  source      = SP.new_push_source()\n  # source      = await DB.new_query_source sql #, settings...\n  urge '^445-3^', \"starting\"\n  limit       = 3\n  #.........................................................................................................\n  # close = -> new Promise ( resolve, reject ) =>\n  #   cursor.close ( error ) => if error? then reject error else resolve()\n  read  = -> new Promise ( resolve, reject ) =>\n    cursor.read limit, ( error, rows ) => if error? then reject error else resolve rows\n  #.........................................................................................................\n  source.start = -> do => ### Note: must be function, not asyncfunction ###\n    urge '^445-4^', \"source started\"\n    loop\n      urge '^445-5^', \"read from cursor\"\n      rows = await read()\n      break if rows.length is 0\n      urge '^445-6^', \"read #{rows.length} rows\"\n      source.send row for row in rows\n      urge '^445-6^', \"pushed #{rows.length} rows\"\n    # await cursor.close()\n    # urge '^445-8^', \"cursor closed\"\n    client.release()\n    urge '^445-8^', \"client released\"\n    source.end()\n    urge '^445-8^', \"source ended\"\n    return null\n  #.........................................................................................................\n  pipeline      = []\n  pipeline.push source\n  pipeline.push SP.$show()\n  pipeline.push $drain ->\n    help '^445-7^', \"stream ended\"\n    resolve()\n  SP.pull pipeline...\n  # source.end()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo = -> new Promise ( resolve ) =>\n  # debug '^4554^', rpr ( k for k of DATAMILL )\n  DISPLAY = require '../../paragate/lib/display'\n  me        = { db: @connect(), }\n  pipeline  = []\n  tokens    = RXWS.grammar.parse source\n  await @_clear me\n  pipeline.push tokens\n  pipeline.push @$transform                     me\n  pipeline.push $display                        me\n  pipeline.push await @$async_tee_write_to_db_2 me\n  pipeline.push $drain =>\n    # await DB._pool.end() # unless pool.ended\n    # PGP.end()       # alternative, see https://github.com/vitaly-t/pg-promise#library-de-initialization\n    me.db.$pool.end()  # alternative, see https://github.com/vitaly-t/pg-promise#library-de-initialization\n    resolve()\n  SP.pull pipeline...\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await @demo()\n  # await @_list()\n  # await @demo_stream()\n  await @demo_stream_using_intershop()\n  # await @demo_inserts()\n  help 'ok'\n  return null\n\n\n\n\n\n\n\n"
  ]
}