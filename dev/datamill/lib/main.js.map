{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/home/flow/jzr/hengist/dev/datamill/src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'DATAMILL-DEMO'\nrpr                       = CND.rpr\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\nassign                    = Object.assign\nafter                     = ( time_s, f ) -> setTimeout f, time_s * 1000\ndefer                     = setImmediate\nasync                     = {}\nsync                      = { concurrency: 1, }\n# async                     = { async: true, }\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  cast\n  type_of }               = types\nINTERTEXT                 = require 'intertext'\n{ HTML\n  RXWS }                  = require '../../../apps/paragate'\nSP                        = require 'steampipes'\n{ $\n  $async\n  $drain\n  $show\n  $watch }                = SP.export()\nDATOM                     = require '../../../apps/datom'\n{ select\n  stamp\n  new_datom\n  fresh_datom }           = DATOM.export()\n# DB                        = require '../intershop/intershop_modules/db'\nINTERSHOP                 = require '../intershop'\nPGP                       = ( require 'pg-promise' ) { capSQL: false, }\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$headings = ( S ) ->\n  ### Recognize heading as any line that starts with a `#` (hash). Current behavior is to\n  check whether both prv and nxt lines are blank and if not so issue a warning; this detail may change\n  in the future. ###\n  pattern = /// ^ (?<hashes> \\#+ ) (?<text> [\\s\\S]* ) $ ///\n  #.........................................................................................................\n  # H.register_key S, '<h', { is_block: true, }\n  # H.register_key S, '>h', { is_block: true, }\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    return send d unless d.$key   is '^block'\n    return send d unless d.level  is 0\n    return send d unless ( match = d.text.match pattern )?\n    urge '^334^', CND.reverse d\n    send stamp d\n    level = match.groups.hashes.length\n    text  = match.groups.text.replace /^\\s*(.*?)\\s*$/g, '$1' ### TAINT use trim method ###\n    dest  = '???' # d.dest\n    send fresh_datom '<h',    { level, $vnr: [ d.$vnr..., 1, ] , dest, ref: 'blk/hd1', }\n    send fresh_datom '^line', { text,  $vnr: [ d.$vnr..., 2, ] , dest, ref: 'blk/hd2', }\n    send fresh_datom '>h',    { level, $vnr: [ d.$vnr..., 3, ] , dest, ref: 'blk/hd3', }\n    return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$transform = ( S ) ->\n  pipeline = []\n  pipeline.push @$headings    S\n  return SP.pull pipeline...\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$async_tee_write_to_db_2 = ->\n  buffer              = []\n  stream_has_ended    = false\n  db_has_ended        = false\n  stop_waiting        = null\n  DEMO_datoms_table   = new PGP.helpers.TableName { schema: 'demo', table: 'datoms', }\n  DEMO_datoms_fields  = new PGP.helpers.ColumnSet [ 'vnr', 'key', 'atr', 'stamped', ] #, table\n  pipeline            = []\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  buffer_size         = 1\n  #.........................................................................................................\n  flush = ->\n    values        = field_values_from_datoms buffer\n    buffer.length = 0\n    sql           = PGP.helpers.insert values, DEMO_datoms_fields, DEMO_datoms_table\n    debug '^443^', sql\n    await db.none sql\n    if stream_has_ended\n      db_has_ended = true\n      stop_waiting() if stop_waiting?\n    return null\n  #.........................................................................................................\n  pipeline.push $buffer = $ { first, last, }, ( d, send ) =>\n    if d is first\n      null # init DB\n      return null\n    if d is last\n      stream_has_ended = true\n      flush() if buffer.length > 0\n      return null\n    buffer.push d\n    flush() if buffer.length >= buffer_size\n    send d\n  #.........................................................................................................\n  pipeline.push $wait = $async ( d, send, done ) =>\n    send d\n    if stream_has_ended and not db_has_ended\n      stop_waiting = done\n      return null\n    return done()\n  #.........................................................................................................\n  return SP.pull pipeline...\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$tee_write_to_db_1 = ( S ) ->\n  first     = Symbol 'first'\n  last      = Symbol 'last'\n  sql       = \"insert into DEMO.datoms ( vnr, key, atr, stamped ) values ( $1, $2, $3, $4 );\"\n  pipeline  = []\n  #.........................................................................................................\n  pipeline.push $guard = $ { first, last, }, ( d, send ) =>\n    if d is first\n      help '^807^', \"first\"\n      return null\n    if d is last\n      help '^807^', \"last\"\n      return null\n    send d\n  #.........................................................................................................\n  pipeline.push $write = $async ( d, send, done ) =>\n    #.......................................................................................................\n    await DB.query [ sql, ( field_values_from_datoms d )..., ]\n    #.......................................................................................................\n    send d\n    done()\n    return null\n  #.........................................................................................................\n  return SP.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\nfield_values_from_datoms = ( ds ) -> ( ( field_values_from_datom d ) for d in ds )\n\n#-----------------------------------------------------------------------------------------------------------\nfield_values_from_datom = ( d ) ->\n  stamped = d.stamped ? false\n  vnr     = ( ( if x is Infinity then 999 else if x is -Infinity then -999 else x ) for x in d.$vnr )\n  return { vnr, key: d.$key, atr: null, stamped, }\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n$display = ( S ) =>\n  return $watch ( d ) =>\n    xxx = ( d ) -> R = {}; R[ k ] = d[ k ] for k in ( Object.keys d ).sort(); return R\n    ### TAINT use datamill display ###\n    switch d.$key\n      when '<document', '>document' then echo CND.grey xxx d\n      when '^blank',    '>document' then echo CND.grey CND.reverse xxx d\n      else\n        switch d.$key[ 0 ]\n          when '<'  then echo CND.lime              xxx d\n          when '>'  then echo CND.red               xxx d\n          when '^'  then echo CND.yellow            xxx d\n          else           echo CND.reverse CND.green xxx d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@connect = ->\n  O                         = INTERSHOP.settings\n  db_user                   = O[ 'intershop/db/user' ].value\n  db_name                   = O[ 'intershop/db/name' ].value\n  connection_string         = \"postgres://#{db_user}@localhost/#{db_name}\"\n  return PGP connection_string\n\n#-----------------------------------------------------------------------------------------------------------\n@_clear = ( S ) ->\n  debug '^443^', \"truncating table DEMO.datoms\"\n  await S.db.none \"truncate DEMO.datoms cascade;\"\n  debug '^443^', \"ok\"\n\n#-----------------------------------------------------------------------------------------------------------\n@demo = -> new Promise ( resolve ) =>\n  # debug '^4554^', rpr ( k for k of DATAMILL )\n  DISPLAY = require '../../paragate/lib/display'\n  source  = \"\"\"\n    <title>A Proposal</title>\n    <h1>Motivation</h1>\n    <p>It has been suggested to further the cause.</p>\n    <p>This is <i>very</i> desirable indeed.</p>\n\n    # First Things First\n\n    A paragraph on the lowest level\n    (this, hopefully, does not apply to the paragraph's content\n    but only to its position in the manuscript).\n\n      An indented paragraph\n      which may be understood\n      as a blockquote or somesuch.\n\n    ```\n    some\n\n    code\n    ```\n\n    \"\"\"\n  S         = { db: @connect(), }\n  pipeline  = []\n  tokens    = RXWS.grammar.parse source\n  await @_clear S\n  pipeline.push tokens\n  pipeline.push @$transform S\n  pipeline.push $display S\n  pipeline.push await @$async_tee_write_to_db_2 S\n  pipeline.push $drain ->\n    db.$pool.end() # alternative, see https://github.com/vitaly-t/pg-promise#library-de-initialization\n    resolve()\n  SP.pull pipeline...\n  # # tokens  = HTML.parse source\n  # info rpr token for token in tokens\n  # await DISPLAY.show_tokens_as_table tokens\n  # for d in tokens\n  #   echo CND.rainbow d\n  #   switch d.$key\n  #     when '<document' then null\n  #     when '>document' then null\n  #     when '^blank' then null\n  #     when '^block'\n  #       { text, } = d\n  #       echo text\n  #     else throw new Error \"^3376^ unknown $key #{rpr d.$key}\"\n    # finally\n  # await DB._pool.end() # unless pool.ended\n    #   # PGP.end() # alternative, see https://github.com/vitaly-t/pg-promise#library-de-initialization\n    #   stream_has_ended = true\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  await @demo()\n  # await @demo_inserts()\n  return null\n\n\n\n\n\n\n\n"
  ]
}