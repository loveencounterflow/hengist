{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "AAIA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,UAAR,EAf5B;;;;;EAmBA,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,MAAF,EACE,IADF,CAAA,GAC4B,OAAA,CAAQ,gBAAR,CAD5B,EApBA;;;;;;EA2BA,IAAC,CAAE,kBAAF,CAAD,GAA0B,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC1B,QAAA,EAAA,EAAA,KAAA,EAAA,CAAA,EAAA,KAAA,EAAA,GAAA,EAAA,OAAA,EAAA,mBAAA;;IACE,EAAA,GAAK,OAAA,CAAQ,QAAR,EADP;;IAGE,mBAAA,GAAsB,CACpB,CAAE,cAAF,EAAkB,CAAE,cAAF,CAAlB,EAAsC,IAAtC,CADoB,EAEpB,CAAE,sBAAF,EAA0B,CAAE,MAAF,EAAU,OAAV,EAAmB,SAAnB,CAA1B,EAA2D,IAA3D,CAFoB,EAHxB;;IAQE,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB;MACF,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;AAAG,eAAO,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,EAAW,MAAX,CAAA;AACjE,cAAA,GAAA,EAAA,KAAA,EAAA;UAAM,KAAA,GAAU,MAAM,CAAC,IAAP,CAAY,KAAZ;UACV,GAAA,GAAU,EAAE,CAAC,WAAH,CAAA;UACV,MAAA,GAAU,EAAE,CAAC,IAAH,CAAQ,GAAR,EAAa,KAAb;UACV,MAAA,GAAU,MAAM,CAAC,MAAP,CAAc,EAAE,CAAC,GAAH,CAAO,GAAP,CAAd;iBACV,OAAA,CAAQ,MAAR;QAL2D,CAAZ;MAAV,CAAjC;IADR;IAOA,IAAA,CAAA;AACA,WAAO;EAjBiB,EA3B1B;;;EAkDA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA;aAChC,IAAA,CAAK,IAAL;IADgC,CAAA,IAAlC;;AAlDA",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/INTERTEXT-SPLITLINES/TESTS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n# PATH                      = require 'path'\n# FS                        = require 'fs'\n# _strip_ansi               = require 'strip-ansi'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ freeze\n  lets }                  = require 'letsfreezethat'\n\n#-----------------------------------------------------------------------------------------------------------\n# resolve_project_path = ( path ) -> PATH.resolve PATH.join __dirname, '../../..', path\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SPLITLINES basic\" ] = ( T, done ) ->\n  # SL = require '../../../apps/mixa'\n  SL = require './main'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'a short text', [ 'a short text' ], null ]\n    [ \"some\\nlines\\nof text\", [ 'some', 'lines', 'of text', ], null ]\n    ]\n  #.........................................................................................................\n  for [ input, matcher, error, ] in probes_and_matchers\n    await T.perform input, matcher, error, -> return new Promise ( resolve, reject ) ->\n      probe   = Buffer.from input\n      ctx     = SL.new_context()\n      result  = SL.send ctx, probe\n      result  = result.concat SL.end ctx\n      resolve result\n  done()\n  return null\n\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  test @\n\n\n"
  ]
}