{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/INTERTEXT-SPLITLINES/TESTS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n# PATH                      = require 'path'\n# FS                        = require 'fs'\n# _strip_ansi               = require 'strip-ansi'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ freeze\n  lets }                  = require 'letsfreezethat'\n\n#-----------------------------------------------------------------------------------------------------------\n# resolve_project_path = ( path ) -> PATH.resolve PATH.join __dirname, '../../..', path\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SPLITLINES basic\" ] = ( T, done ) ->\n  SL = require '../../../apps/intertext-splitlines'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'a short text', [ 'a short text' ], null ]\n    [ \"some\\nlines\\nof text\", [ 'some', 'lines', 'of text', ], null ]\n    ]\n  #.........................................................................................................\n  for [ input, matcher, error, ] in probes_and_matchers\n    await T.perform input, matcher, error, -> return new Promise ( resolve, reject ) ->\n      probe   = Buffer.from input\n      ctx     = SL.new_context()\n      result  = [ ( SL.walk_lines ctx, probe )..., ]\n      result  = [ result..., ( SL.flush ctx )..., ]\n      resolve result\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SPLITLINES assemble longer input\" ] = ( T, done ) ->\n  inputs = [\n    \"helo\"\n    \" there!\\nHere \"\n    \"come\\na few lines\\n\"\n    \"of text that are\\nquite unevenly \"\n    \"spread over several\\n\"\n    \"buffers.\\n\"\n    ]\n  inputs = ( Buffer.from d for d in inputs )\n  SL      = require '../../../apps/intertext-splitlines'\n  #.........................................................................................................\n  ctx     = SL.new_context()\n  result  = []\n  for input in inputs\n    result = [ result..., ( SL.walk_lines ctx, input )..., ]\n  result = [ result..., ( SL.flush ctx )..., ]\n  T.eq result, [ 'helo there!', 'Here come', 'a few lines', 'of text that are', 'quite unevenly spread over several', 'buffers.' ]\n  #.........................................................................................................\n  ctx     = SL.new_context { skip_empty_last: false, }\n  result  = []\n  for input in inputs\n    result = [ result..., ( SL.walk_lines ctx, input )..., ]\n  result = [ result..., ( SL.flush ctx )..., ]\n  T.eq result, [ 'helo there!', 'Here come', 'a few lines', 'of text that are', 'quite unevenly spread over several', 'buffers.', '' ]\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SPLITLINES.splitlines\" ] = ( T, done ) ->\n  inputs = [\n    \"helo\"\n    \" there!\\nHere \"\n    \"come\\na few lines\\n\"\n    \"of text that are\\nquite unevenly \"\n    \"spread over several\\n\"\n    \"buffers.\\n\"\n    ]\n  matcher = [ 'helo there!', 'Here come', 'a few lines', 'of text that are', 'quite unevenly spread over several', 'buffers.' ]\n  inputs  = ( Buffer.from d for d in inputs )\n  SL      = require '../../../apps/intertext-splitlines'\n  T.eq ( SL.splitlines inputs ), matcher\n  T.eq ( SL.splitlines inputs... ), matcher\n  T.eq ( SL.splitlines {}, inputs... ), matcher\n  T.eq ( SL.splitlines null, inputs... ), matcher\n  T.eq ( SL.splitlines { skip_empty_last: false, }, inputs... ), [ matcher..., '', ]\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SPLITLINES.splitlines can return buffers\" ] = ( T, done ) ->\n  inputs = [\n    \"helo\"\n    \" there!\\nHere \"\n    \"come\\na few lines\\n\"\n    \"of text that are\\nquite unevenly \"\n    \"spread over several\\n\"\n    \"buffers.\\n\"\n    ]\n  inputs  = ( Buffer.from d for d in inputs )\n  matcher = [ 'helo there!', 'Here come', 'a few lines', 'of text that are', 'quite unevenly spread over several', 'buffers.' ]\n  matcher = ( Buffer.from d for d in matcher )\n  SL      = require '../../../apps/intertext-splitlines'\n  T.eq ( SL.splitlines { decode: false,                         }, inputs... ), matcher\n  T.eq ( SL.splitlines { decode: false, skip_empty_last: false, }, inputs... ), [ matcher..., ( Buffer.from '' ), ]\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SPLITLINES can keep line endings\" ] = ( T, done ) ->\n  inputs = [\n    \"helo\"\n    \" there!\\nHere \"\n    \"come\\na few lines\\n\"\n    \"of text that are\\nquite unevenly \"\n    \"spread over several\\n\"\n    \"buffers.\\n\"\n    ]\n  inputs  = ( Buffer.from d for d in inputs )\n  matcher = [ 'helo there!\\n', 'Here come\\n', 'a few lines\\n', 'of text that are\\n', 'quite unevenly spread over several\\n', 'buffers.\\n' ]\n  matcher = ( Buffer.from d for d in matcher )\n  SL      = require '../../../apps/intertext-splitlines'\n  result  = ( SL.splitlines { decode: false, keep_newlines: true, }, inputs... )\n  help '^3334^', result\n  T.eq result, matcher\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  inputs = [\n    \"helo\"\n    \" there!\\nHere \"\n    \"come\\na few lines\\n\"\n    \"of text that are\\nquite unevenly \"\n    \"spread over several\\n\"\n    \"buffers.\"\n    ]\n  inputs = ( Buffer.from d for d in inputs )\n  SL      = require '../../../apps/intertext-splitlines'\n  ctx     = SL.new_context()\n  for input in inputs\n    for line from SL.walk_lines ctx, input\n      info rpr line\n  for line from SL.flush ctx\n    info rpr line\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  demo()\n  test @\n  # test @[ \"SPLITLINES basic\" ]\n  # test @[ \"SPLITLINES assemble longer input\" ]\n"
  ]
}