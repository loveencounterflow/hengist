{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-argparse.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,EAAA,EAAA,GAAA,EAAA,aAAA,EAAA,WAAA,EAAA,KAAA,EAAA,aAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,UAAR,EAf5B;;;;EAkBA,WAAA,GAA4B,OAAA,CAAQ,YAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,MAAF,EACE,IADF,CAAA,GAC4B,OAAA,CAAQ,gBAAR,CAD5B,EApBA;;;EAyBA,EAAA,GAAK,OAAA,CAAQ,UAAR;;EACL,OAAA,GAAU,QA1BV;;;EA6BM,gBAAN,MAAA,cAAA,QAA4B,EAAE,CAAC,4BAA/B,CAAA;;IAEE,YAAc,CAAE,IAAF,EAAQ,KAAR,CAAA;AACZ,aAAO,EAAE,CAAC,MAAH,CAAU,GAAA,CAAE,CAAE,IAAI,CAAC,KAAL,CAAW,IAAX,CAAF,CAAmB,CAAC,GAApB,CAAwB,CAAE,IAAF,CAAA,GAAA;oBAAkB,CAAA,YAAN,CAAmB,IAAnB,EAAyB,KAAzB;MAAZ,CAAxB,CAAF,CAAV;IADK;;EAFhB;;EAKA,aAAA,GACE;IAAA,WAAA,EAAkB,kBAAlB;IACA,QAAA,EAAkB,IADlB;IAEA,eAAA,EAAkB;EAFlB;;EAIF,MAAA,GAAS,IAAI,EAAE,CAAC,cAAP,CAAsB,aAAtB;;EAGT,MAAM,CAAC,YAAP,CAAoB,IAApB,EAA0B,WAA1B,EAAwC;IAAE,MAAA,EAAQ,SAAV;IAAqB;EAArB,CAAxC;;EACA,MAAM,CAAC,YAAP,CAAoB,IAApB,EAA0B,OAA1B,EAAwC;IAAE,IAAA,EAAM;EAAR,CAAxC;;EACA,MAAM,CAAC,YAAP,CAAoB,IAApB,EAA0B,OAA1B,EAAwC;IAAE,IAAA,EAAM;EAAR,CAAxC;;EACA,MAAM,CAAC,YAAP,CAAoB,OAApB,EAAwC;IAAE,IAAA,EAAM;EAAR,CAAxC;;EAIA,IAAA,CAAK,MAAM,CAAC,UAAP,CAAA,CAAL;AAjDA",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/MIXA/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n# PATH                      = require 'path'\n# FS                        = require 'fs'\n_strip_ansi               = require 'strip-ansi'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ freeze\n  lets }                  = require 'letsfreezethat'\n\n\n# debug ( k for k of require 'argparse' )\nAP = require 'argparse'\nversion = '1.2.3'\n\n# Formatter with support of `\\n` in Help texts.\nclass HelpFormatter extends AP.RawDescriptionHelpFormatter\n  # executes parent _split_lines for each line of the help, then flattens the result\n  _split_lines: ( text, width ) ->\n    return [].concat ( ( text.split '\\n' ).map ( line ) => super._split_lines line, width )...\n\nconfiguration =\n  description:      'Argparse example',\n  add_help:         true,\n  formatter_class:  HelpFormatter\n\nparser = new AP.ArgumentParser configuration;\n\n\nparser.add_argument '-v', '--version',  { action: 'version', version, }\nparser.add_argument '-f', '--foo',      { help: 'foo bar',            }\nparser.add_argument '-b', '--bar',      { help: 'bar foo',            }\nparser.add_argument '--baz',            { help: 'baz bar',            }\n\n\n\nhelp parser.parse_args()\n"
  ]
}