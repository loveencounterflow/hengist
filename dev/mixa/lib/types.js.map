{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MIXA/TYPES'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\njr                        = JSON.stringify\nIntertype                 = ( require 'intertype' ).Intertype\nintertype                 = new Intertype module.exports\nL                         = @\n\ndefault_settings = freeze {\n  meta:\n    help:   { alias: 'h', type: Boolean, description: \"show help and exit\", }\n    cd:     { alias: 'd', type: String,  description: \"change to directory before running command\", }\n    trace:  { alias: 't', type: Boolean, description: \"trace options parsing (for debugging)\", }\n  commands:\n    cat:      { description: \"draw a cat\", }\n    version:  { description: \"show project version and exit\", }\n  }\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'mixa_settings', tests:\n  \"x is an object\":                         ( x ) -> @isa.object x\n  \"x.?meta is a mixa_flagdefs\":             ( x ) -> ( not x.meta     )? or @isa.mixa_flagdefs x.meta\n  \"x.?commands is a mixa_flagdefs\":         ( x ) -> ( not x.commands )? or @isa.mixa_flagdefs x.commands\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'mixa_flagdefs', tests:\n  \"x is an object\":                         ( x ) -> @isa.object x\n  \"each attribute of x is a mixa_flagdef\":  ( x ) ->\n    for k, v of x\n      return false unless @isa.mixa_flagdef v\n    return true\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'mixa_flagdef', tests:\n  \"x is an object\":                         ( x ) -> @isa.object x\n  #.........................................................................................................\n  # These options are filled out by `mixa` or used by `command-line-args` in incompatible ways:\n  \"x.name is not set\":                      ( x ) -> not x.name?\n  \"x.group is not set\":                     ( x ) -> not x.group?\n  \"x.defaultOption is not set\":             ( x ) -> not x.defaultOption?\n  #.........................................................................................................\n  \"x.?type is a function\":                  ( x ) -> ( not x.type?          ) or @isa.function x.type\n  \"x.?alias is a text\":                     ( x ) -> ( not x.alias?         ) or @isa.text     x.alias\n  \"x.?multiple is a boolean\":               ( x ) -> ( not x.multiple?      ) or @isa.boolean  x.multiple\n  \"x.?lazyMultiple is a boolean\":           ( x ) -> ( not x.lazyMultiple?  ) or @isa.boolean  x.lazyMultiple\n  \"x.?defaultValue is anything\":            ( x ) -> true\n\n\n"
  ]
}