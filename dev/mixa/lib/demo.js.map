{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/CL-PARSER'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  cast\n  type_of }               = types.export()\n# CP                        = require 'child_process'\ndefer                     = setImmediate\nparse_argv                = require 'command-line-args'\n# cnd_parse                 = require 'cnd/parse-command-line'\nmisfit                    = Symbol 'misfit'\nPATH                      = require 'path'\nrelpath                   = PATH.relative process.cwd(), __filename\n{ freeze\n  lets }                  = require 'letsfreezethat'\n\n#-----------------------------------------------------------------------------------------------------------\npluck = ( d, name, fallback = misfit ) ->\n  R = d[ name ]\n  delete d[ name ]\n  unless R?\n    return fallback unless fallback is misfit\n    throw new Error \"^cli@5477^ no such attribute: #{rpr name}\"\n  return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# check_extraneous = ( d ) ->\n#   return if ( Object.keys d ).length is 0\n#   show_help_and_exit 111, \"unknown arguments: #{rpr d}\"\n\n#-----------------------------------------------------------------------------------------------------------\nget_cmd_literal = ( cmd, argv ) ->\n  return CND.lime \"#{cmd}\" if ( parameters = CND.shellescape argv ).length is 0\n  return CND.lime \"#{cmd} #{parameters}\"\n\n#-----------------------------------------------------------------------------------------------------------\ngenerate_documentation = ->\n  commandLineUsage = require 'command-line-usage'\n  doc_settings = []\n  doc_settings.push {\n    header: \"Usage\", content: \"\"\"\n      node #{relpath} [meta] command [parameters]\n\n      [meta]:       optional general flags\n      command:      internal or external command to run (obligatory)\n      [parameters]: parameters to be passed to internal or external command;\n      * for internal parameters and flags, see below\n      * for external parameters and flags, refer to the documentation of the respective command\n      \"\"\", }\n  doc_settings.push { header: \"meta\", optionList: X.meta, }\n  for cmd in X.internals\n    doc_settings.push { header: \"Internal command: #{cmd.name}\", optionList: cmd, }\n  if ( Object.keys X.externals ).length > 0\n    descriptions = []\n    for cmd in X.externals\n      descriptions.push { content: \"#{cmd.name}: #{cmd.description ? '???'}\", }\n    doc_settings.push { header: \"External commands: \", content: descriptions, }\n  return '\\n' + commandLineUsage doc_settings\n\n#-----------------------------------------------------------------------------------------------------------\nshow_help_for_topic_and_exit = ( q, argv ) ->\n  if argv.length > 0\n    return show_help_and_exit 113, \"^cli@5478^ extraneous arguments #{rpr argv}\"\n  switch q.parameters.topic\n    when null, undefined\n      return show_help_and_exit 0\n    when 'topics'\n      echo CND.blue \"(this should be a list of topics)\"\n      process.exit 0\n    when 'help'\n      ### TAINT use custom function to output help ###\n      echo CND.blue \"\"\"\\n`node #{relpath} help [topic]`:\\nget help about `topic`\\n\"\"\"\n      process.exit 0\n  show_help_and_exit 120, \"^cli@5887^ unknown help topic #{rpr q.parameters.topic}\"\n\n#-----------------------------------------------------------------------------------------------------------\nshow_help_and_exit = ( code = 0, message = null ) ->\n  usage   = generate_documentation()\n  usage   = '\\n' + ( CND.blue usage   ) + '\\n'\n  usage  += '\\n' + ( CND.red  message ) + '\\n' if message?\n  echo usage\n  process.exit code\n\n#-----------------------------------------------------------------------------------------------------------\nshow_help_and_exit = ( code = 0, message = null ) ->\n  usage   = generate_documentation()\n  usage   = '\\n' + ( CND.blue usage   ) + '\\n'\n  usage  += '\\n' + ( CND.red  message ) + '\\n' if message?\n  echo usage\n  process.exit code\n\n#-----------------------------------------------------------------------------------------------------------\nshow_cat_and_exit = ->\n  echo()\n  echo CND.white CND.reverse CND.bold \"\"\"       |\\\\      _,,,---,,_              \"\"\"\n  echo CND.white CND.reverse CND.bold \"\"\" ZZZzz /,`.-'`'    -.  ;-;;,_          \"\"\"\n  echo CND.white CND.reverse CND.bold \"\"\"      |,4-  ) )-,_. ,\\\\ (  `'-'         \"\"\"\n  echo CND.white CND.reverse CND.bold \"\"\"     '---''(_/--'  `-'\\\\_)  Felix Lee   \"\"\"\n  echo()\n  process.exit 0\n\n#-----------------------------------------------------------------------------------------------------------\n@cli = ( argv = null ) ->\n  #---------------------------------------------------------------------------------------------------------\n  q =\n    trace:        false # place under `meta`\n    help:         false # place under `meta`\n    testing:      argv? # place under `meta`\n    stage:        null\n    cmd:          null\n    parameters:   {}\n  #---------------------------------------------------------------------------------------------------------\n  # Stage: Metaflags\n  #.........................................................................................................\n  q.stage = 'meta'\n  argv    = argv ? process.argv\n  d       = X.meta\n  s       = { argv, stopAtFirstUnknown: true, }\n  p       = parse_argv d, s\n  argv    = pluck p, '_unknown', []\n  q.help  = pluck p, 'help',  false\n  q.trace = pluck p, 'trace', false\n  q.cd    = pluck p, 'cd',    null\n  urge \"Stage: Metaflags\", { q, argv, } if q.trace\n  return show_help_and_exit 0 if q.help\n  return show_help_and_exit 112, \"^cli@5598^ extraneous flag #{rpr flag}\" if ( flag = argv[ 0 ] )?.startsWith '-'\n  #---------------------------------------------------------------------------------------------------------\n  if q.cd?\n    process.chdir q.cd\n    urge CND.yellow \"working directory is now #{process.cwd()}\" if q.trace\n  #---------------------------------------------------------------------------------------------------------\n  # Stage: Internal Commands\n  # Internal commands must parse their specific flags and other arguments.\n  #.........................................................................................................\n  q.stage = 'internal'\n  d       = { name: 'cmd', defaultOption: true, }\n  p       = parse_argv d, { argv, stopAtFirstUnknown: true, }\n  q.cmd   = pluck p, 'cmd', null\n  argv    = pluck p, '_unknown', []\n  urge \"Stage: Commands\", { q, argv, } if q.trace\n  return show_help_and_exit 114, \"^cli@5479^ missing command\" unless q.cmd?\n  #.........................................................................................................\n  switch q.cmd\n    when 'help'\n      d                   = X.internals.help\n      p                   = parse_argv d, { argv, stopAtFirstUnknown: true, }\n      q.parameters.topic  = pluck p, 'topic', null\n      argv                = pluck p, '_unknown', []\n      urge \"running internal command `help`\", { q, argv, } if q.trace\n      return show_help_for_topic_and_exit q, argv\n    when 'cat'\n      return show_cat_and_exit()\n  #---------------------------------------------------------------------------------------------------------\n  # Stage: External Commands\n  #.........................................................................................................\n  # External commands call a child process that is passed the remaing command line arguments, so those\n  # can be dealt with summarily.\n  #.........................................................................................................\n  q.stage             = 'external'\n  p                   = parse_argv [], { argv, stopAtFirstUnknown: true, }\n  argv                = pluck p, '_unknown', []\n  q.parameters.argv   = argv[ .. ]\n  urge \"Stage: External Commands\", { q, argv, } if q.trace\n  ### TAINT derive list from settings ###\n  if q.cmd in [ 'psql', 'node', 'nodexh', ]\n    return q\n  q.error = { code: 115, message: \"^cli@5480^ Unknown command #{CND.reverse rpr q.cmd}\", }\n\n#-----------------------------------------------------------------------------------------------------------\nrun_external_command = ->\n  # #.........................................................................................................\n  # switch q.cmd\n  #   #-------------------------------------------------------------------------------------------------------\n  #   when 'psql'\n  #     urge \"running external command #{get_cmd_literal q.cmd, argv}\" if q.trace\n  #     return resolve()\n  #   #-------------------------------------------------------------------------------------------------------\n  #   when 'nodexh', 'node'\n  #     urge \"running external command #{get_cmd_literal q.cmd, argv}\" if q.trace\n  #     return resolve()\n  #.........................................................................................................\n\n#-----------------------------------------------------------------------------------------------------------\ncompile_settings = ( dft, usr ) ->\n  meta      = []\n  internals = []\n  externals = []\n  R         = { meta, internals, externals, }\n  #.........................................................................................................\n  validate.object usr.meta if usr.meta?\n  for name, description of Object.assign {}, dft.meta, usr.meta\n    throw Error \"^cli@5587^ must not have attribute name, got #{rpr description}\" if description.name?\n    meta.push lets description, ( d ) -> d.name = name\n  #.........................................................................................................\n  validate.object usr.commands if usr.commands?\n  for name, description of Object.assign {}, dft.commands, usr.commands\n    throw Error \"^cli@5588^ must not have attribute name, got #{rpr description}\" if description.name?\n    is_external = false\n    e = lets description, ( d ) ->\n      d.name      = name\n      is_external = pluck d, 'external', false\n    if is_external then externals.push e\n    else                internals.push e\n  #.........................................................................................................\n  return freeze R\n\n#-----------------------------------------------------------------------------------------------------------\ndefault_settings = freeze {\n  meta:\n    help:   { alias: 'h', type: Boolean, description: \"show help and exit\", }\n    cd:     { alias: 'd', type: String,  description: \"change to directory before running command\", }\n    trace:  { alias: 't', type: Boolean, description: \"trace options parsing (for debugging)\", }\n  commands:\n    cat:      { description: \"draw a cat\", }\n    version:  { description: \"show project version and exit\", }\n  }\n\n\n\n#-----------------------------------------------------------------------------------------------------------\nuser_settings = freeze {\n  # meta:\n  # internal:\n  commands:\n    psql:   { external: true, description: \"use `psql` to run SQL\",   }\n    node:   { external: true, description: \"use `node` to run JS\",    }\n    nodexh: { external: true, description: \"use `nodexh` to run JS\",  }\n  }\n\nX = compile_settings default_settings, user_settings\ndebug '^6767^', JSON.stringify X, null, '  '\n\n\n############################################################################################################\nif module is require.main then do =>\n  debug '^3387^', await @cli()\n  # debug await @cli [ '-t', null, '-t', ]\n\n    # {\n    #   header: 'Typical Example',\n    #   content: 'A simple example demonstrating typical usage.'\n    # },\n    # {\n    #   content: 'Project home: {underline https://github.com/me/example}'\n    # }\n"
  ]
}