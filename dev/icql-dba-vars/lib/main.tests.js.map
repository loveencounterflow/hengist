{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA-TAGS/TESTS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of\n  equals }                = types.export()\n# { to_width }              = require 'to-width'\non_process_exit           = require 'exit-hook'\nsleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\nSQL                       = String.raw\njr                        = JSON.stringify\njp                        = JSON.parse\ndbv_path                  = '../../../apps/icql-dba-vars'\ndba_path                  = '../../../apps/icql-dba'\n{ lets\n  freeze }                = require 'letsfreezethat'\ndef                       = Object.defineProperty\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@[ \"getting and setting single values\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ 'v1', true,              ],  true, ]\n    [ [ 'v2', false,             ],  false, ]\n    [ [ 'v3', null,              ],  null, ]\n    [ [ 'v4', 42,                ],  42, ]\n    [ [ 'v5', '42',              ],  '42', ]\n    [ [ 'v6', { bar: '42'},      ],  { bar: '42'}, ]\n    [ [ 'v7', [ 1, 2, 108, ],    ],  [ 1, 2, 108, ], ]\n    ]\n  { Dbv, }    = require dbv_path\n  { Dba, }    = require dba_path\n  dba         = new Dba()\n  dbv         = new Dbv { dba, }\n  debug '4476^', dbv\n  debug '4476^', ( k for k of dbv )\n  console.table dba.list dba.query SQL\"select * from v_variables;\"\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      [ key, value, ] = probe\n      dbv.set key, value\n      result = dbv.get key\n      resolve result\n  console.table dba.list dba.query SQL\"select * from v_variables;\"\n  #.........................................................................................................\n  done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"getting and setting multiple values\" ] = ( T, done ) ->\n#   T?.halt_on_error()\n#   #.........................................................................................................\n#   probes_and_matchers = [\n#     [ [ 'v7', [ 1, 2, 108, ],    ],  [ 1, 2, 108, ], ]\n#     ]\n#   { Dbv, }    = require dbv_path\n#   dbv         = new Dbv()\n#   { dba, }    = dbv\n#   debug '4476^', dbv\n#   debug '4476^', ( k for k of dbv )\n#   console.table dba.list dba.query SQL\"select * from v_variables;\"\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n#       [ key, value, ] = probe\n#       dbv.set key, value\n#       result = dbv.get key\n#       resolve result\n#   console.table dba.list dba.query SQL\"select * from v_variables;\"\n#   console.table dba.list dba.query SQL\"\"\"\n#     with v1 as ( select\n#         value\n#       from v_variables\n#       where key = 'v7')\n#     select * from v1, json_each( v1.value );\"\"\"\n#   # console.table dba.list dba.query SQL\"select * from v_get_many( 'v7' );\"\n#   #.........................................................................................................\n#   done?()\n\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # info '^3443^', JSON.parse '\"helo w&#x6f;rld\"'\n  test @, { timeout: 10e3, }\n  # test @[ \"DBA: tags must be declared\" ]\n\n"
  ]
}