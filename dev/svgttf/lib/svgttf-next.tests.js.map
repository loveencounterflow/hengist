{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/svgttf-next.tests.coffee"
  ],
  "names": [],
  "mappings": "AAGA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,EAAA,GAA4B,IAAI,CAAC,UAhBjC;;;EAkBA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR,EAnB5B;;;;;;;;;;;;;EAgCA,IAAC,CAAE,KAAF,CAAD,GAAa,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACb,QAAA,OAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA;IAAE,CAAA,CAAE,OAAF,CAAA,GAAc,OAAA,CAAQ,sCAAR,CAAd;IACA,OAAA,GAAc,IAAI,OAAJ,CAAA;IACd,IAAA,GAAc;IACd,IAAA,GAAc,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,IAArB,CAAb;IACd,GAAA,GAAc,EAAE,CAAC,YAAH,CAAgB,IAAhB,EAAsB;MAAE,QAAA,EAAU;IAAZ,CAAtB;IACd,MAAA,GAAc,OAAO,CAAC,sBAAR,CAA+B,CAAE,IAAF,EAAQ,GAAR,CAA/B;;MACd,CAAC,CAAE,EAAH,CAAM,MAAN,EAAc;QACZ,GAAA,EAAK;UAAE,QAAA,EAAU,KAAZ;UAAmB,KAAA,EAAO;YAAE,CAAA,EAAG;UAAL,CAA1B;UAA2C,EAAA,EAAI;QAA/C,CADO;QAEZ,GAAA,EAAK;UAAE,QAAA,EAAU,KAAZ;UAAmB,KAAA,EAAO;YAAE,CAAA,EAAG;UAAL,CAA1B;UAA0C,EAAA,EAAI;QAA9C;MAFO,CAAd;KANF;;WAUE,IAAA,CAAA;EAXW,EAhCb;;;EAkDA,IAAO,qBAAP;IACE,IAAA,CAAK,IAAL,EADF;;;EAlDA;;;;AAAA",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SVGTTF-DEV/SVGPATHS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\n\n  # probes_and_matchers = [\n  #   [\"M0 0L4000 0L4000 4000L0 4000Z\", {\"commands\":[{\"type\":\"M\",\"x\":0,\"y\":0},{\"type\":\"L\",\"x\":4000,\"y\":0},{\"type\":\"L\",\"x\":4000,\"y\":4000},{\"type\":\"L\",\"x\":0,\"y\":4000},{\"type\":\"Z\"}],\"fill\":\"black\",\"stroke\":null,\"strokeWidth\":1},null]\n  #   [\"M10.82813-25.87500Q11.39063-26.43750 12.16406-26.43750Q12.93750-26.43750 13.50000-25.87500Q14.06250-25.31250 14.06250-24.53906\",{\"commands\":[{\"type\":\"M\",\"x\":10.82813,\"y\":-25.875},{\"type\":\"Q\",\"x1\":11.39063,\"y1\":-26.4375,\"x\":12.16406,\"y\":-26.4375},{\"type\":\"Q\",\"x1\":12.9375,\"y1\":-26.4375,\"x\":13.5,\"y\":-25.875},{\"type\":\"Q\",\"x1\":14.0625,\"y1\":-25.3125,\"x\":14.0625,\"y\":-24.53906}],\"fill\":\"black\",\"stroke\":null,\"strokeWidth\":1},null]\n  #   ]\n  # #.........................................................................................................\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n  #     result = plainify SVGTTF.otjspath_from_pathdata probe\n  #     resolve result\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"xxx\" ] = ( T, done ) ->\n  { Svgttf2 } = require '../../../apps/svgttf/lib/svgttf-next'\n  svgttf2     = new Svgttf2()\n  path        = '../../../assets/svgttf/svgttf2-symbol-shapes.svg'\n  path        = PATH.resolve PATH.join __dirname, path\n  svg         = FS.readFileSync path, { encoding: 'utf-8', }\n  result      = svgttf2.glyf_pathdata_from_svg { path, svg, }\n  T?.eq result, {\n    wbr: { sym_name: 'wbr', shift: { x: 1448.363 }, pd: 'M0,660l-147,166h293z' },\n    shy: { sym_name: 'shy', shift: { x: 499.726 }, pd: 'M-204,887h178v-802h50v802h178v70h-406z' } }\n  #.........................................................................................................\n  done()\n\n\n\n\n\n############################################################################################################\nunless module.parent?\n  test @\n  # test @[ \"datoms are not frozen (nofreeze)\" ]\n  # test @[ \"PD.set() sets properties, returns copy (nofreeze)\" ]\n  # test @[ \"selector keypatterns\" ]\n  # test @[ \"select 2\" ]\n\n\n"
  ]
}