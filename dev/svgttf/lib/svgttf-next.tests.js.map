{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/svgttf-next.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SVGTTF-DEV/SVGPATHS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate }              = types.export()\n\n\n  # probes_and_matchers = [\n  #   [\"M0 0L4000 0L4000 4000L0 4000Z\", {\"commands\":[{\"type\":\"M\",\"x\":0,\"y\":0},{\"type\":\"L\",\"x\":4000,\"y\":0},{\"type\":\"L\",\"x\":4000,\"y\":4000},{\"type\":\"L\",\"x\":0,\"y\":4000},{\"type\":\"Z\"}],\"fill\":\"black\",\"stroke\":null,\"strokeWidth\":1},null]\n  #   [\"M10.82813-25.87500Q11.39063-26.43750 12.16406-26.43750Q12.93750-26.43750 13.50000-25.87500Q14.06250-25.31250 14.06250-24.53906\",{\"commands\":[{\"type\":\"M\",\"x\":10.82813,\"y\":-25.875},{\"type\":\"Q\",\"x1\":11.39063,\"y1\":-26.4375,\"x\":12.16406,\"y\":-26.4375},{\"type\":\"Q\",\"x1\":12.9375,\"y1\":-26.4375,\"x\":13.5,\"y\":-25.875},{\"type\":\"Q\",\"x1\":14.0625,\"y1\":-25.3125,\"x\":14.0625,\"y\":-24.53906}],\"fill\":\"black\",\"stroke\":null,\"strokeWidth\":1},null]\n  #   ]\n  # #.........................................................................................................\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n  #     result = plainify SVGTTF.otjspath_from_pathdata probe\n  #     resolve result\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"path union 1\" ] = ( T, done ) ->\n  { Svgttf2 } = require '../../../apps/svgttf/lib/svgttf-next'\n  svgttf2     = new Svgttf2()\n  path        = '../../../assets/svgttf/svgttf2-symbol-shapes.svg'\n  path        = PATH.resolve PATH.join __dirname, path\n  svg         = FS.readFileSync path, { encoding: 'utf-8', }\n  result      = svgttf2.glyf_pathdata_from_svg { path, svg, }\n  T?.eq result, {\n    wbr: { sym_name: 'wbr', shift: { x: 1448.363, y: 916.214 }, pd: 'M0,-256l-147,166h293z' },\n    shy: { sym_name: 'shy', shift: { x: 499.726, y: 1002.195 }, pd: 'M-204,-115h178v-802h50v802h178v70h-406z' } }\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"path union 2\" ] = ( T, done ) ->\n  { Svgttf2 } = require '../../../apps/svgttf/lib/svgttf-next'\n  svgttf2     = new Svgttf2()\n  path        = '../../../assets/svgttf/bar-and-circle.svg'\n  path        = PATH.resolve PATH.join __dirname, path\n  svg         = FS.readFileSync path, { encoding: 'utf-8', }\n  info '^667323^', svg\n  result      = svgttf2.glyf_pathdata_from_svg { path, svg, }\n  debug '^34234^', result\n  T?.eq result, { zzz: { sym_name: 'zzz', \\\n    pd: 'M0,40l27,0c4,-9 13,-15 23,-15c10,0 19,6 23,15h27v20l-27,0c-4,9 -13,15 -23,15c-10,0 -19,-6 -23,-15h-27z' } }\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"intersection between paths\" ] = ( T, done ) ->\n  { PAPER }     = require '../../../apps/svgttf/lib/svgttf-next'\n  out_fspath_1  = '../../../data/svgttf/intersection-between-paths-before.svg'\n  out_fspath_1  = PATH.resolve PATH.join __dirname, out_fspath_1\n  out_fspath_2  = '../../../data/svgttf/intersection-between-paths-after.svg'\n  out_fspath_2  = PATH.resolve PATH.join __dirname, out_fspath_2\n  #.........................................................................................................\n  project       = new PAPER.Project()\n  rectangle     = new PAPER.Path.Rectangle { x: 25, y: 0, width: 50, height: 100, fillColor: '#f00', }\n  baseguide     = new PAPER.Path.Line {id: 'p1c1b1', from: [ 0, 50, ], to: [ 100, 50, ], strokeColor: '#00f', strokeWidth: 3, }\n  info '^454-1^', \"baseguide.length:\", baseguide.length\n  FS.writeFileSync out_fspath_1, out_1_svg = project.exportSVG { asString: true, precision: 1, }\n  intersection  = baseguide.getIntersections rectangle\n  baseline      = new PAPER.Path.Line {\n    from: intersection[ 0 ].point, to: intersection[ 1 ].point, strokeColor: '#0f0', strokeWidth: 3, }\n  FS.writeFileSync out_fspath_2, out_2_svg = project.exportSVG { asString: true, precision: 1, }\n  info '^454-7^', \"baseline.length:\", baseline.length\n  info out_1_svg\n  urge out_2_svg\n  { point: { x: x1, y: y1, } } = intersection[ 0 ]\n  { point: { x: x2, y: y2, } } = intersection[ 1 ]\n  info '^343^', { x1, y1, x2, y2, }\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"baselines from intersection of column and baselinegrid\" ] = ( T, done ) ->\n  { Svgttf2 } = require '../../../apps/svgttf/lib/svgttf-next'\n  svgttf2     = new Svgttf2()\n  path        = '../../../assets/svgttf/circular-column-and-baselines.svg'\n  path        = PATH.resolve PATH.join __dirname, path\n  svg         = FS.readFileSync path, { encoding: 'utf-8', }\n  out_path    = '../../../data/svgttf/circular-column-and-baselines.svg'\n  out_path    = PATH.resolve PATH.join __dirname, out_path\n  # info '^667323^', svg\n  result      = svgttf2.glyf_pathdata_from_svg { path, svg, }\n  debug '^34234^', result\n  pd          = result[ 'ooo' ]?.pd\n  out_svg     = \"\"\"<svg viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'>\n    <path stroke='green' stroke-width='1' d='#{pd}'/>\n    </svg>\"\"\"\n  FS.writeFileSync out_path, out_svg\n  # T?.eq result, { zzz: { sym_name: 'zzz', \\\n  #   pd: 'M0,40l27,0c4,-9 13,-15 23,-15c10,0 19,6 23,15h27v20l-27,0c-4,9 -13,15 -23,15c-10,0 -19,-6 -23,-15h-27z' } }\n  #.........................................................................................................\n  done?()\n\n\n\n\n\n############################################################################################################\nunless module.parent?\n  # test @\n  # @[ \"path union 2\" ]()\n  # @[ \"baselines from intersection of column and baselinegrid\" ]()\n  @[ \"intersection between paths\" ]()\n"
  ]
}