{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/SVGTTF'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\nPATH                      = require 'path'\nFS                        = require 'fs'\n# #...........................................................................................................\n# types                     = require '../types'\n# { isa\n#   validate\n#   type_of }               = types\n\n#-----------------------------------------------------------------------------------------------------------\nresolve_project_path = ( path ) -> PATH.resolve PATH.join __dirname, '../../..', path\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SVGTTF types\" ] = ( T, done ) ->\n  # SVGTTF = require resolve_project_path 'apps/svgttf'\n  SVGTTF = require '../../../apps/svgttf'\n  #.........................................................................................................\n  probes_and_matchers = [\n    # [ [ 'svgttf_svg_transform_fn', 1, ], \"translate(1)\", ]\n    [ [ 'svgttf_svg_transform_name', 'translate', ], true, ]\n    [ [ 'svgttf_svg_transform_name', 'skewX', ], true, ]\n    [ [ 'svgttf_svg_transform_name', 'rotate', ], true, ]\n    [ [ 'svgttf_svg_transform_name', 'xxxtranslate', ], false, ]\n    [ [ 'svgttf_svg_transform_name', 42, ], false, ]\n    [ [ 'svgttf_svg_transform_value', 42, ], true, ]\n    [ [ 'svgttf_svg_transform_value', [ 42, ], ], true, ]\n    [ [ 'svgttf_svg_transform_value', 'something', ], true, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ type, value, ] = probe\n      resolve SVGTTF.types.isa type, value\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SVGTTF._transform_fn_as_text()\" ] = ( T, done ) ->\n  # SVGTTF = require resolve_project_path 'apps/svgttf'\n  SVGTTF = require '../../../apps/svgttf'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ 'translate', 1, ], \"translate(1)\", ]\n    [ [ 'translate', 1, 2, ], \"translate(1,2)\", ]\n    [ [ 'xxxtranslate', 1, 2, ], null, 'not a valid svgttf_svg_transform_fn' ]\n    # [ null, null, ]\n    # [ [], null, ]\n    # [ [ 'translate', 1, ], \"transform='translate(1)'\", ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      resolve SVGTTF._transform_fn_as_text probe\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SVGTTF._transform_as_text\" ] = ( T, done ) ->\n  # SVGTTF = require resolve_project_path 'apps/svgttf'\n  SVGTTF = require '../../../apps/svgttf'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ null, null, ]\n    [ [], null, ]\n    [ [ [ 'translate', 1, ], ], \"transform='translate(1)'\", ]\n    [ [ [ 'translate', 1, ], [ 'rotate', 45, ] ], \"transform='translate(1) rotate(45)'\", ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      resolve SVGTTF._transform_as_text probe\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SVGTTF.pathelement_from_glyphidx()\" ] = ( T, done ) ->\n  # SVGTTF = require resolve_project_path 'apps/svgttf'\n  SVGTTF  = require '../../../apps/svgttf'\n  font    = SVGTTF.font_from_path resolve_project_path 'assets/svgttf/lmroman10-italic.otf'\n  #.........................................................................................................\n  # debug SVGTTF.pathelement_from_glyphidx font, 23, 1000\n  # debug SVGTTF.pathelement_from_glyphidx font, 23, 1000, [ [ 'translate', [ 100, ], ], ]\n  T.eq ( SVGTTF.pathelement_from_glyphidx font, 23, 1000                                  ), \"<path d='M373-631C373-652 368-694 325-694C285-694 260-659 260-630C260-598 283-588 304-588C321-588 339-597 349-607C338-547 300-476 234-422C221-410 220-409 220-405C220-402 223-395 230-395C249-395 373-514 373-631Z'/>\"\n  T.eq ( SVGTTF.pathelement_from_glyphidx font, 23, 1000, [ [ 'translate', [ 100, ], ], ] ), \"<path transform='translate(100)' d='M373-631C373-652 368-694 325-694C285-694 260-659 260-630C260-598 283-588 304-588C321-588 339-597 349-607C338-547 300-476 234-422C221-410 220-409 220-405C220-402 223-395 230-395C249-395 373-514 373-631Z'/>\"\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SVGTTF.pathelement_from_glyphidx()\" ] = ( T, done ) ->\n  SVGTTF                = require '../../../apps/svgttf'\n  font                  = SVGTTF.font_from_path resolve_project_path 'assets/svgttf/lmroman10-italic.otf'\n  metrics               = SVGTTF.get_metrics font\n  probes_and_matchers   = [\n    # ['ascender',             1125, ]\n    # ['baseline',             710, ]\n    # ['defaultWidthX',        511, ]\n    # ['descender',            -290, ]\n    # ['nominalWidthX',        669, ]\n    # ['numGlyphs',            821, ]\n    # ['unitsPerEm',           1000, ]\n    ['ascent',                806, ]\n    ['upm',                   1000, ]\n    ['baseline',              806, ]\n    ['descent',               194, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      resolve metrics[ probe ]\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SVGTTF.svg_from_glyphidx()\" ] = ( T, done ) ->\n  # SVGTTF = require resolve_project_path 'apps/svgttf'\n  SVGTTF  = require '../../../apps/svgttf'\n  font    = SVGTTF.font_from_path resolve_project_path 'assets/svgttf/lmroman10-italic.otf'\n  #.........................................................................................................\n  echo()\n  echo SVGTTF.svg_from_glyphidx font, 27, 1000\n  echo()\n  # # debug SVGTTF.pathelement_from_glyphidx font, 23, 1000, [ [ 'translate', [ 100, ], ], ]\n  # T.eq ( SVGTTF.pathelement_from_glyphidx font, 23, 1000                                  ), \"<path d='M373-631C373-652 368-694 325-694C285-694 260-659 260-630C260-598 283-588 304-588C321-588 339-597 349-607C338-547 300-476 234-422C221-410 220-409 220-405C220-402 223-395 230-395C249-395 373-514 373-631Z'/>\"\n  # T.eq ( SVGTTF.pathelement_from_glyphidx font, 23, 1000, [ [ 'translate', [ 100, ], ], ] ), \"<path transform='translate(100)' d='M373-631C373-652 368-694 325-694C285-694 260-659 260-630C260-598 283-588 304-588C321-588 339-597 349-607C338-547 300-476 234-422C221-410 220-409 220-405C220-402 223-395 230-395C249-395 373-514 373-631Z'/>\"\n  done() if done?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SVGTTF.svg_from_harfbuzz_linotype()\" ] = ( T, done ) ->\n  # SVGTTF = require resolve_project_path 'apps/svgttf'\n  SVGTTF      = require '../../../apps/svgttf'\n  font        = SVGTTF.font_from_path resolve_project_path 'assets/svgttf/lmroman10-italic.otf'\n  glyph_idxs  = []\n  #.........................................................................................................\n  harfbuzz_linotype = [\n    { upem: 1000, gid: 28, cluster: 0, x_advance: 0.511 }\n    { upem: 1000, gid: 123, cluster: 1, x_advance: 0.882 }\n    { upem: 1000, gid: 72, cluster: 4, x_advance: 0.256 }\n    { upem: 1000, gid: 66, cluster: 5, x_advance: 0.307 }\n    { upem: 1000, gid: 28, cluster: 6, x_advance: 0.511 }\n    { upem: 1000, gid: 105, cluster: 7, x_advance: 0.332 }\n    { upem: 1000, gid: 66, cluster: 8, x_advance: 0.307 }\n    { upem: 1000, gid: 81, cluster: 9, x_advance: 0.511 }\n    { upem: 1000, gid: 77, cluster: 10, x_advance: 0.562 } ]\n  harfbuzz_linotype = [ { upem: 1000, gid: 81, cluster: 0, x_advance: 0.511 }, { upem: 1000, gid: 103, cluster: 1, x_advance: 0.358 }, { upem: 1000, gid: 105, cluster: 2, x_advance: 0.332 }, { upem: 1000, gid: 50, cluster: 3, x_advance: 0.46 }, { upem: 1000, gid: 75, cluster: 4, x_advance: 0.818 }, { upem: 1000, gid: 84, cluster: 5, x_advance: 0.46 }, { upem: 1000, gid: 81, cluster: 6, x_advance: 0.511 }, { upem: 1000, gid: 96, cluster: 7, x_advance: 0.371 }, { upem: 1000, gid: 50, cluster: 8, x_advance: 0.46 }, { upem: 1000, gid: 98, cluster: 9, x_advance: 0.409 }, { upem: 1000, gid: 103, cluster: 10, x_advance: 0.358 }, { upem: 1000, gid: 81, cluster: 11, x_advance: 0.511 }, { upem: 1000, gid: 103, cluster: 12, x_advance: 0.358 }, { upem: 1000, gid: 75, cluster: 13, x_advance: 0.818 }, { upem: 1000, gid: 81, cluster: 14, x_advance: 0.511 }, { upem: 1000, gid: 96, cluster: 15, x_advance: 0.371 }, { upem: 1000, gid: 50, cluster: 16, x_advance: 0.46 }, { upem: 1000, gid: 98, cluster: 17, x_advance: 0.409 }, { upem: 1000, gid: 103, cluster: 18, x_advance: 0.358 }, { upem: 1000, gid: 90, cluster: 19, x_advance: 0.767 }, { upem: 1000, gid: 109, cluster: 20, x_advance: 0.537 }, { upem: 1000, gid: 28, cluster: 21, x_advance: 0.511 }, { upem: 1000, gid: 72, cluster: 22, x_advance: 0.256 }, { upem: 1000, gid: 66, cluster: 23, x_advance: 0.307 }, { upem: 1000, gid: 125, cluster: 24, x_advance: 0.562 }, { upem: 1000, gid: 43, cluster: 26, x_advance: 0.409 }, { upem: 1000, gid: 28, cluster: 27, x_advance: 0.511 }, { upem: 1000, gid: 77, cluster: 28, x_advance: 0.562 }, { upem: 1000, gid: 47, cluster: 29, x_advance: 0.511 }, { upem: 1000, gid: 109, cluster: 30, x_advance: 0.537 }, { upem: 1000, gid: 96, cluster: 31, x_advance: 0.422 } ]\n  #.........................................................................................................\n  # echo()\n  echo SVGTTF.svg_from_harfbuzz_linotype font, harfbuzz_linotype, 1000\n  # echo()\n  # # debug SVGTTF.pathelement_from_glyphidx font, 23, 1000, [ [ 'translate', [ 100, ], ], ]\n  # T.eq ( SVGTTF.pathelement_from_glyphidx font, 23, 1000                                  ), \"<path d='M373-631C373-652 368-694 325-694C285-694 260-659 260-630C260-598 283-588 304-588C321-588 339-597 349-607C338-547 300-476 234-422C221-410 220-409 220-405C220-402 223-395 230-395C249-395 373-514 373-631Z'/>\"\n  # T.eq ( SVGTTF.pathelement_from_glyphidx font, 23, 1000, [ [ 'translate', [ 100, ], ], ] ), \"<path transform='translate(100)' d='M373-631C373-652 368-694 325-694C285-694 260-659 260-630C260-598 283-588 304-588C321-588 339-597 349-607C338-547 300-476 234-422C221-410 220-409 220-405C220-402 223-395 230-395C249-395 373-514 373-631Z'/>\"\n  done() if done?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SVGTTF.svg_from_harfbuzz_linotype() (using CJK font)\" ] = ( T, done ) ->\n  # SVGTTF = require resolve_project_path 'apps/svgttf'\n  SVGTTF      = require '../../../apps/svgttf'\n  # font        = SVGTTF.font_from_path resolve_project_path 'assets/jizura-fonts/FandolKai-Regular.otf'\n  font        = SVGTTF.font_from_path resolve_project_path 'assets/jizura-fonts/HanaMinA.otf'\n  glyph_idxs  = []\n  #.........................................................................................................\n  # harfbuzz_linotype = [ { upem: 1000, gid: 1155, cluster: 0, x_advance: 1 }, { upem: 1000, gid: 2585, cluster: 1, x_advance: 1 }, { upem: 1000, gid: 3571, cluster: 2, x_advance: 1 }, { upem: 1000, gid: 2884, cluster: 3, x_advance: 1 }, { upem: 1000, gid: 4308, cluster: 4, x_advance: 1 }, { upem: 1000, gid: 269, cluster: 5, x_advance: 1 }, { upem: 1000, gid: 35, cluster: 6, x_advance: 0.764 }, { upem: 1000, gid: 83, cluster: 7, x_advance: 0.458 }, { upem: 1000, gid: 70, cluster: 8, x_advance: 0.5 }, { upem: 1000, gid: 91, cluster: 9, x_advance: 0.444 }, { upem: 1000, gid: 73, cluster: 10, x_advance: 0.555 }, { upem: 1000, gid: 80, cluster: 11, x_advance: 0.555 }, { upem: 1000, gid: 79, cluster: 12, x_advance: 0.611 }, { upem: 1000, gid: 70, cluster: 13, x_advance: 0.5 }, { upem: 1000, gid: 72, cluster: 14, x_advance: 0.5 }, { upem: 1000, gid: 273, cluster: 15, x_advance: 1 }, { upem: 1000, gid: 1605, cluster: 16, x_advance: 1 }, { upem: 1000, gid: 3795, cluster: 17, x_advance: 1 }, { upem: 1000, gid: 2209, cluster: 18, x_advance: 1 }, { upem: 1000, gid: 35, cluster: 19, x_advance: 0.764 }, { upem: 1000, gid: 83, cluster: 20, x_advance: 0.458 }, { upem: 1000, gid: 70, cluster: 21, x_advance: 0.5 }, { upem: 1000, gid: 85, cluster: 22, x_advance: 0.361 }, { upem: 1000, gid: 80, cluster: 23, x_advance: 0.555 }, { upem: 1000, gid: 79, cluster: 24, x_advance: 0.611 }, { upem: 1000, gid: 270, cluster: 25, x_advance: 1 }, { upem: 1000, gid: 98, cluster: 26, x_advance: 1 } ]\n  harfbuzz_linotype = [ { upem: 1000, gid: 16567, cluster: 0, x_advance: 1 }, { upem: 1000, gid: 13515, cluster: 1, x_advance: 1 }, { upem: 1000, gid: 15112, cluster: 2, x_advance: 1 }, { upem: 1000, gid: 16112, cluster: 3, x_advance: 1 }, { upem: 1000, gid: 28321, cluster: 4, x_advance: 1 }, { upem: 1000, gid: 42379, cluster: 5, x_advance: 1 }, { upem: 1000, gid: 67, cluster: 6, x_advance: 0.5 }, { upem: 1000, gid: 115, cluster: 7, x_advance: 0.5 }, { upem: 1000, gid: 102, cluster: 8, x_advance: 0.5 }, { upem: 1000, gid: 123, cluster: 9, x_advance: 0.5 }, { upem: 1000, gid: 105, cluster: 10, x_advance: 0.5 }, { upem: 1000, gid: 112, cluster: 11, x_advance: 0.5 }, { upem: 1000, gid: 111, cluster: 12, x_advance: 0.5 }, { upem: 1000, gid: 102, cluster: 13, x_advance: 0.5 }, { upem: 1000, gid: 104, cluster: 14, x_advance: 0.5 }, { upem: 1000, gid: 42383, cluster: 15, x_advance: 1 }, { upem: 1000, gid: 20361, cluster: 16, x_advance: 1 }, { upem: 1000, gid: 18491, cluster: 17, x_advance: 1 }, { upem: 1000, gid: 13983, cluster: 18, x_advance: 1 }, { upem: 1000, gid: 67, cluster: 19, x_advance: 0.5 }, { upem: 1000, gid: 115, cluster: 20, x_advance: 0.5 }, { upem: 1000, gid: 102, cluster: 21, x_advance: 0.5 }, { upem: 1000, gid: 117, cluster: 22, x_advance: 0.5 }, { upem: 1000, gid: 112, cluster: 23, x_advance: 0.5 }, { upem: 1000, gid: 111, cluster: 24, x_advance: 0.5 }, { upem: 1000, gid: 42380, cluster: 25, x_advance: 1 }, { upem: 1000, gid: 4831, cluster: 26, x_advance: 1 } ]\n  #.........................................................................................................\n  # echo()\n  echo SVGTTF.svg_from_harfbuzz_linotype font, harfbuzz_linotype, 1000\n  # echo()\n  # # debug SVGTTF.pathelement_from_glyphidx font, 23, 1000, [ [ 'translate', [ 100, ], ], ]\n  # T.eq ( SVGTTF.pathelement_from_glyphidx font, 23, 1000                                  ), \"<path d='M373-631C373-652 368-694 325-694C285-694 260-659 260-630C260-598 283-588 304-588C321-588 339-597 349-607C338-547 300-476 234-422C221-410 220-409 220-405C220-402 223-395 230-395C249-395 373-514 373-631Z'/>\"\n  # T.eq ( SVGTTF.pathelement_from_glyphidx font, 23, 1000, [ [ 'translate', [ 100, ], ], ] ), \"<path transform='translate(100)' d='M373-631C373-652 368-694 325-694C285-694 260-659 260-630C260-598 283-588 304-588C321-588 339-597 349-607C338-547 300-476 234-422C221-410 220-409 220-405C220-402 223-395 230-395C249-395 373-514 373-631Z'/>\"\n  done() if done?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_demo_opentypejs = ->\n  SVGTTFv1            = require '../../../apps/svgttf'\n  font_path           = resolve_project_path 'assets/jizura-fonts/lmroman10-italic.otf'\n  glyph_idx           = 23\n  font                = SVGTTFv1.font_from_path font_path\n  # debug SVGTTFv1.pathdata_from_glyphidx font, glyph_idx, 1000\n  echo '-'.repeat 108\n  ks = [\n    # 'encoding'\n    # 'glyphNames'\n    # 'glyphs'\n    # 'names'\n    # 'outlinesFormat'\n    # 'position'\n    # 'substitution'\n    # 'numberOfHMetrics'\n    # 'numGlyphs'\n    'ascender'\n    'descender'\n    'defaultWidthX'\n    'nominalWidthX'\n    'unitsPerEm'\n    ]\n  for k in ks\n    echo '^3334^', ( CND.white k.padEnd 20 ), ( CND.yellow font.otjsfont[ k ] )\n  echo '-'.repeat 108\n  ks = [\n    # 'achVendID'\n    # 'fsSelection'\n    # 'fsType'\n    # 'panose'\n    # 'sFamilyClass'\n    # 'ulCodePageRange1'\n    # 'ulCodePageRange2'\n    # 'ulUnicodeRange1'\n    # 'ulUnicodeRange2'\n    # 'ulUnicodeRange3'\n    # 'ulUnicodeRange4'\n    # 'usBreakChar'\n    # 'usDefaultChar'\n    # 'usFirstCharIndex'\n    # 'usLastCharIndex'\n    # 'usMaxContent'\n    # 'version'\n    'sCapHeight'\n    'sTypoAscender'\n    'sTypoDescender'\n    'sTypoLineGap'\n    'sxHeight'\n    'usWeightClass'\n    'usWidthClass'\n    'usWinAscent'\n    'usWinDescent'\n    'xAvgCharWidth'\n    'yStrikeoutPosition'\n    'yStrikeoutSize'\n    'ySubscriptXOffset'\n    'ySubscriptXSize'\n    'ySubscriptYOffset'\n    'ySubscriptYSize'\n    'ySuperscriptXOffset'\n    'ySuperscriptXSize'\n    'ySuperscriptYOffset'\n    'ySuperscriptYSize'\n    ]\n  for k in ks\n    echo '^3334^', ( CND.white k.padEnd 20 ), ( CND.yellow font.otjsfont.tables.os2[ k ] )\n  debug '^23237^', ( k for k of font.otjsfont )\n  debug '^23237^', ( k for k of font.otjsfont.tables )\n  debug '^23237^', ( k for k of font.otjsfont.tables.os2 )\n  svg_symbol_font_txt = SVGTTFv1.get_svg_symbol_font font\n  output_path         = '/tmp/sample-font.svg'\n  FS.writeFileSync output_path, svg_symbol_font_txt\n  help \"SVG symbol font written to #{output_path}\"\n  # path_precision  = 0\n  # # debug '^2332^', ( k for k of SVGTTF )\n  # # debug '^2332^', ( k for k of otjsfont )\n  # # debug '^2332^', SVGTTF.svg_path_from_cid\n  # # debug '^2332^', SVGTTF.svg_pathdata_from_cid\n  # # debug '^2332^', SVGTTF.glyph_and_pathdata_from_cid metrics, otjsfont, cid\n  # # debug '^2332^', SVGTTF.svg_path_from_cid otjsfont, cid\n  # glyph     = otjsfont.glyphs.glyphs[ glyph_idx ]\n  # x         = 0\n  # y         = 0\n  # font_size = 1000\n  # path      = glyph.getPath x, y, font_size\n  # path_data = path.toPathData path_precision\n  # debug '^svgttf@6^', glyph.path.toSVG path_precision\n  # debug '^svgttf@6^', path_data\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n  # await @_demo_opentypejs()\n  # test @[ \"VNR sort 2\" ]\n  # test @[ \"VNR sort 3\" ]\n  # @[ \"VNR sort 3\" ]()\n  # test @[ \"test VNR._first_nonzero_is_negative()\" ]\n  # @[ \"SVGTTF.svg_from_glyphidx()\" ]()\n  # @[ \"SVGTTF.svg_from_harfbuzz_linotype()\" ]()\n  # @[ \"SVGTTF.svg_from_harfbuzz_linotype() (using CJK font)\" ]()\n\n\n\n"
  ]
}