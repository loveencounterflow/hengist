{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/SVGTTF'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\nPATH                      = require 'path'\n# #...........................................................................................................\n# types                     = require '../types'\n# { isa\n#   validate\n#   type_of }               = types\n\n#-----------------------------------------------------------------------------------------------------------\nresolve_project_path = ( path ) -> PATH.resolve PATH.join __dirname, '../../..', path\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SVGTTF types\" ] = ( T, done ) ->\n  # SVGTTF = require resolve_project_path 'apps/svgttf'\n  SVGTTF = require './svgttf-next-version'\n  #.........................................................................................................\n  probes_and_matchers = [\n    # [ [ 'svgttf_svg_transform_fn', 1, ], \"translate(1)\", ]\n    [ [ 'svgttf_svg_transform_name', 'translate', ], true, ]\n    [ [ 'svgttf_svg_transform_name', 'skewX', ], true, ]\n    [ [ 'svgttf_svg_transform_name', 'rotate', ], true, ]\n    [ [ 'svgttf_svg_transform_name', 'xxxtranslate', ], false, ]\n    [ [ 'svgttf_svg_transform_name', 42, ], false, ]\n    [ [ 'svgttf_svg_transform_value', 42, ], true, ]\n    [ [ 'svgttf_svg_transform_value', [ 42, ], ], true, ]\n    [ [ 'svgttf_svg_transform_value', 'something', ], true, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ type, value, ] = probe\n      resolve SVGTTF.types.isa type, value\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SVGTTF._transform_fn_as_text()\" ] = ( T, done ) ->\n  # SVGTTF = require resolve_project_path 'apps/svgttf'\n  SVGTTF = require './svgttf-next-version'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ 'translate', 1, ], \"translate(1)\", ]\n    [ [ 'translate', 1, 2, ], \"translate(1,2)\", ]\n    [ [ 'xxxtranslate', 1, 2, ], null, 'not a valid svgttf_svg_transform_fn' ]\n    # [ null, null, ]\n    # [ [], null, ]\n    # [ [ 'translate', 1, ], \"transform='translate(1)'\", ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      resolve SVGTTF._transform_fn_as_text probe\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SVGTTF._transform_as_text\" ] = ( T, done ) ->\n  # SVGTTF = require resolve_project_path 'apps/svgttf'\n  SVGTTF = require './svgttf-next-version'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ null, null, ]\n    [ [], null, ]\n    [ [ [ 'translate', 1, ], ], \"transform='translate(1)'\", ]\n    [ [ [ 'translate', 1, ], [ 'rotate', 45, ] ], \"transform='translate(1) rotate(45)'\", ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      resolve SVGTTF._transform_as_text probe\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SVGTTF.pathelement_from_glyphidx()\" ] = ( T, done ) ->\n  # SVGTTF = require resolve_project_path 'apps/svgttf'\n  SVGTTF  = require './svgttf-next-version'\n  font    = SVGTTF.font_from_path resolve_project_path 'assets/svgttf/lmroman10-italic.otf'\n  #.........................................................................................................\n  # debug SVGTTF.pathelement_from_glyphidx font, 23, 1000\n  # debug SVGTTF.pathelement_from_glyphidx font, 23, 1000, [ [ 'translate', [ 100, ], ], ]\n  T.eq ( SVGTTF.pathelement_from_glyphidx font, 23, 1000                                  ), \"<path d='M373-631C373-652 368-694 325-694C285-694 260-659 260-630C260-598 283-588 304-588C321-588 339-597 349-607C338-547 300-476 234-422C221-410 220-409 220-405C220-402 223-395 230-395C249-395 373-514 373-631Z'/>\"\n  T.eq ( SVGTTF.pathelement_from_glyphidx font, 23, 1000, [ [ 'translate', [ 100, ], ], ] ), \"<path transform='translate(100)' d='M373-631C373-652 368-694 325-694C285-694 260-659 260-630C260-598 283-588 304-588C321-588 339-597 349-607C338-547 300-476 234-422C221-410 220-409 220-405C220-402 223-395 230-395C249-395 373-514 373-631Z'/>\"\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SVGTTF.svg_from_glyphidx()\" ] = ( T, done ) ->\n  # SVGTTF = require resolve_project_path 'apps/svgttf'\n  SVGTTF  = require './svgttf-next-version'\n  font    = SVGTTF.font_from_path resolve_project_path 'assets/svgttf/lmroman10-italic.otf'\n  #.........................................................................................................\n  echo()\n  echo SVGTTF.svg_from_glyphidx font, 27, 1000\n  echo()\n  # # debug SVGTTF.pathelement_from_glyphidx font, 23, 1000, [ [ 'translate', [ 100, ], ], ]\n  # T.eq ( SVGTTF.pathelement_from_glyphidx font, 23, 1000                                  ), \"<path d='M373-631C373-652 368-694 325-694C285-694 260-659 260-630C260-598 283-588 304-588C321-588 339-597 349-607C338-547 300-476 234-422C221-410 220-409 220-405C220-402 223-395 230-395C249-395 373-514 373-631Z'/>\"\n  # T.eq ( SVGTTF.pathelement_from_glyphidx font, 23, 1000, [ [ 'translate', [ 100, ], ], ] ), \"<path transform='translate(100)' d='M373-631C373-652 368-694 325-694C285-694 260-659 260-630C260-598 283-588 304-588C321-588 339-597 349-607C338-547 300-476 234-422C221-410 220-409 220-405C220-402 223-395 230-395C249-395 373-514 373-631Z'/>\"\n  done() if done?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SVGTTF.svg_from_harfbuzz_linotype()\" ] = ( T, done ) ->\n  # SVGTTF = require resolve_project_path 'apps/svgttf'\n  SVGTTF      = require './svgttf-next-version'\n  font        = SVGTTF.font_from_path resolve_project_path 'assets/svgttf/lmroman10-italic.otf'\n  glyph_idxs  = []\n  #.........................................................................................................\n  harfbuzz_linotype = [\n    { upem: 1000, gid: 28, cluster: 0, x_advance: 0.511 }\n    { upem: 1000, gid: 123, cluster: 1, x_advance: 0.882 }\n    { upem: 1000, gid: 72, cluster: 4, x_advance: 0.256 }\n    { upem: 1000, gid: 66, cluster: 5, x_advance: 0.307 }\n    { upem: 1000, gid: 28, cluster: 6, x_advance: 0.511 }\n    { upem: 1000, gid: 105, cluster: 7, x_advance: 0.332 }\n    { upem: 1000, gid: 66, cluster: 8, x_advance: 0.307 }\n    { upem: 1000, gid: 81, cluster: 9, x_advance: 0.511 }\n    { upem: 1000, gid: 77, cluster: 10, x_advance: 0.562 } ]\n  #.........................................................................................................\n  # echo()\n  echo SVGTTF.svg_from_harfbuzz_linotype font, harfbuzz_linotype, 1000\n  # echo()\n  # # debug SVGTTF.pathelement_from_glyphidx font, 23, 1000, [ [ 'translate', [ 100, ], ], ]\n  # T.eq ( SVGTTF.pathelement_from_glyphidx font, 23, 1000                                  ), \"<path d='M373-631C373-652 368-694 325-694C285-694 260-659 260-630C260-598 283-588 304-588C321-588 339-597 349-607C338-547 300-476 234-422C221-410 220-409 220-405C220-402 223-395 230-395C249-395 373-514 373-631Z'/>\"\n  # T.eq ( SVGTTF.pathelement_from_glyphidx font, 23, 1000, [ [ 'translate', [ 100, ], ], ] ), \"<path transform='translate(100)' d='M373-631C373-652 368-694 325-694C285-694 260-659 260-630C260-598 283-588 304-588C321-588 339-597 349-607C338-547 300-476 234-422C221-410 220-409 220-405C220-402 223-395 230-395C249-395 373-514 373-631Z'/>\"\n  done() if done?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_demo_opentypejs = ->\n  SVGTTFv1        = require './svgttf-next-version'\n  font_path       = resolve_project_path 'assets/jizura-fonts/lmroman10-italic.otf'\n  glyph_idx       = 23\n  font            = SVGTTFv1.font_from_path font_path\n  debug SVGTTFv1.pathdata_from_glyphidx font, glyph_idx, 1000\n  # path_precision  = 0\n  # # debug '^2332^', ( k for k of SVGTTF )\n  # # debug '^2332^', ( k for k of otjsfont )\n  # # debug '^2332^', SVGTTF.svg_path_from_cid\n  # # debug '^2332^', SVGTTF.svg_pathdata_from_cid\n  # # debug '^2332^', SVGTTF.glyph_and_pathdata_from_cid metrics, otjsfont, cid\n  # # debug '^2332^', SVGTTF.svg_path_from_cid otjsfont, cid\n  # glyph     = otjsfont.glyphs.glyphs[ glyph_idx ]\n  # x         = 0\n  # y         = 0\n  # font_size = 1000\n  # path      = glyph.getPath x, y, font_size\n  # path_data = path.toPathData path_precision\n  # debug '^svgttf@6^', glyph.path.toSVG path_precision\n  # debug '^svgttf@6^', path_data\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # await @_demo_opentypejs()\n  # test @[ \"VNR sort 2\" ]\n  # test @[ \"VNR sort 3\" ]\n  # @[ \"VNR sort 3\" ]()\n  # test @[ \"test VNR._first_nonzero_is_negative()\" ]\n  # @[ \"SVGTTF.svg_from_glyphidx()\" ]()\n  @[ \"SVGTTF.svg_from_harfbuzz_linotype()\" ]()\n\n\n\n"
  ]
}