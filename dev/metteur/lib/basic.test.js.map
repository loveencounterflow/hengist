{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/basic.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'METTEUR/tests/basics'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\nrvr                       = GUY.trm.reverse\nnameit                    = ( name, f ) -> Object.defineProperty f, 'name', { value: name, }\n#...........................................................................................................\ntest                      = require 'guy-test'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@mtr_template_is_constructor = ( T, done ) ->\n  MTR = require '../../../apps/metteur'\n  T?.ok types.isa.function MTR.Template\n  T?.throws /not a valid mtr_new_template/, -> try new MTR.Template() catch e then warn rvr e.message; throw e\n  # debug new MTR.Template { template: '', }\n  T?.ok ( new MTR.Template { template: '', } ) instanceof MTR.Template\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@mtr_template_and_cfg_are_strict = ( T, done ) ->\n  MTR       = require '../../../apps/metteur'\n  template  = \"helo {name}.\"\n  tpl       = new MTR.Template { template, }\n  T?.throws /instance does not have property 'NONEXISTANT'/, -> try tpl.NONEXISTANT     catch e then warn rvr e.message; throw e\n  T?.throws /instance does not have property 'NONEXISTANT'/, -> try tpl.cfg.NONEXISTANT catch e then warn rvr e.message; throw e\n  T?.ok Object.isFrozen tpl.cfg\n  T?.ok Object.isFrozen tpl._cfg\n  T?.eq tpl.cfg.open,   '{'\n  T?.eq tpl.cfg.close,  '}'\n  T?.eq tpl._cfg, { open: '\\\\{', close: '\\\\}', rx: /\\{(?<key>[^\\}]*)\\}/g, }\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@mtr_template_defaults = ( T, done ) ->\n  MTR       = require '../../../apps/metteur'\n  template  = \"helo {name}.\"\n  tpl       = new MTR.Template { template, }\n  tpl.fill_all { name: \"world\", }\n  result    = tpl.peek()\n  T?.eq result, \"helo world.\"\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@mtr_template_rejects_nonstring_values = ( T, done ) ->\n  MTR       = require '../../../apps/metteur'\n  template  = \"the answer is {answer}.\"\n  tpl       = new MTR.Template { template, }\n  T?.throws /expected text, got a float/, -> try tpl.fill_all { answer: 42, } catch e then warn rvr e.message; throw e\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@mtr_template_rejects_missing_keys = ( T, done ) ->\n  MTR       = require '../../../apps/metteur'\n  template  = \"the answer is {answer}.\"\n  tpl       = new MTR.Template { template, }\n  T?.throws /unknown key 'answer'/, -> try tpl.fill_all {} catch e then warn rvr e.message; throw e\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@mtr_template_accepts_custom_braces = ( T, done ) ->\n  MTR       = require '../../../apps/metteur'\n  template  = \"the answer is ❰answer❱.\"\n  open      = '❰'\n  close     = '❱'\n  tpl       = new MTR.Template { template, open, close, }\n  T?.eq tpl.cfg.open,   '❰'\n  T?.eq tpl.cfg.close,  '❱'\n  T?.eq tpl._cfg, { open: '❰', close: '❱', rx: /❰(?<key>[^❱]*)❱/g, }\n  tpl.fill_all { answer: \"42\", }\n  result    = tpl.peek()\n  T?.eq result, \"the answer is 42.\"\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@mtr_template_honours_triple_dots = ( T, done ) ->\n  MTR       = require '../../../apps/metteur'\n  #.........................................................................................................\n  template  = \"the numbers are ❰...numbers❱ in ascending and ❰numbers...❱ in descending order.\"\n  open      = '❰'\n  close     = '❱'\n  tpl       = new MTR.Template { template, open, close, }\n  tpl.fill_all { numbers: \"1\", }\n  T?.eq tpl.peek(), \"the numbers are 1 in ascending and 1 in descending order.\"\n  tpl.fill_all { numbers: \" 2 \", }\n  T?.eq tpl.peek(), \"the numbers are 1 2  in ascending and  2 1 in descending order.\"\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@mtr_template_finish_clears_segments = ( T, done ) ->\n  MTR       = require '../../../apps/metteur'\n  #.........................................................................................................\n  template  = \"the answers are ❰...answer❱.\"\n  open      = '❰'\n  close     = '❱'\n  tpl       = new MTR.Template { template, open, close, }\n  tpl.fill_all { answer: \"42\", }\n  tpl.fill_all { answer: \" and 108\", }\n  T?.eq tpl.finish(), \"the answers are 42 and 108.\"\n  T?.eq tpl.finish(), \"the answers are .\"\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@mtr_template_peek_returns_current_state = ( T, done ) ->\n  MTR       = require '../../../apps/metteur'\n  #.........................................................................................................\n  template  = \"the {{{what}}} are {{{...answer}}}.\"\n  open      = '{{{'\n  close     = '}}}'\n  tpl       = new MTR.Template { template, open, close, }\n  T?.eq tpl.peek(), \"the  are .\"\n  tpl.fill_all { what: \"answers\", answer: \"42\", }\n  T?.eq tpl.peek(), \"the answers are 42.\"\n  tpl.fill_some { answer: \" and 108\", }\n  T?.eq tpl.peek(), \"the answers are 42 and 108.\"\n  T?.eq tpl.finish(), \"the answers are 42 and 108.\"\n  T?.eq tpl.peek(), \"the  are .\"\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@mtr_template_fill_some_targets_some_fields = ( T, done ) ->\n  MTR       = require '../../../apps/metteur'\n  #.........................................................................................................\n  template  = \"I have {count1} {fruit1} and {count2} {fruit2}.\"\n  tpl       = new MTR.Template { template, }\n  tpl.fill_some { count1: \"1\", }\n  T?.eq tpl.peek(), \"I have 1  and  .\"\n  tpl.fill_some { count2: \"2\", }\n  T?.eq tpl.peek(), \"I have 1  and 2 .\"\n  T?.eq tpl.finish(), \"I have 1  and 2 .\"\n  T?.eq tpl.peek(), \"I have   and  .\"\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@mtr_template_class_has_prop_misfit = ( T, done ) ->\n  MTR       = require '../../../apps/metteur'\n  #.........................................................................................................\n  template  = \"I have {count1} {fruit1} and {count2} {fruit2}.\"\n  tpl       = new MTR.Template { template, }\n  facets    = { count1: \"1\", fruit1: MTR.Template.misfit, count2: \"13\", fruit2: \"bananas\", }\n  tpl.fill_some facets\n  T?.eq tpl.peek(), \"I have 1  and 13 bananas.\"\n  T?.throws /unknown key 'fruit1'/, -> try tpl.fill_all facets catch e then warn rvr e.message; throw e\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@mtr_split_caches_validation_results = ( T, done ) ->\n  MTR       = require '../../../apps/metteur'\n  mtr       = new MTR.Metteur()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ '3', [ { pnr: 3, count: -1 } ], ]\n    [ '3,-1', [ { pnr: 3, count: -1 }, { pnr: -1, count: -1 } ], ]\n    [ 'x',    null, /not a valid/, ]\n    [ '3,x',  null, /not a valid/, ]\n    [ '3:1', [ { pnr: 3, count: 1 } ], ]\n    [ '3:1,-1:2', [ { pnr: 3, count: 1 }, { pnr: -1, count: 2 } ], ]\n    [ '-0', [ { pnr: -0, count: -1 } ], ]\n    ]\n  #.........................................................................................................\n  # mtr.types.validate.mtr_split '3,x'\n  # mtr.types.validate.mtr_split 'x'\n  debug ( k for k of T )\n  T?.neq +0, -0\n  T?.eq +0, +0\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      mtr.types.validate.mtr_split probe\n      resolve mtr.types.state.data.mtr_split.pnrs\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # @mtr_template_cfg_prop_rpr()\n  # test @mtr_template_and_cfg_are_strict\n  # @mtr_template_demo_splitting()\n  # test @mtr_template_accepts_custom_braces\n  # test @mtr_template_honours_triple_dots\n  # @mtr_split_caches_validation_results()\n  test @mtr_split_caches_validation_results\n  # test @\n"
  ]
}