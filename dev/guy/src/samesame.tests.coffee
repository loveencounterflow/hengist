
'use strict'


############################################################################################################
GUY                       = require 'guy'
{ alert
  debug
  help
  info
  plain
  praise
  urge
  warn
  whisper }               = GUY.trm.get_loggers 'GUY/samesame'
{ rpr
  inspect
  echo
  log     }               = GUY.trm
#...........................................................................................................
H                         = require './helpers'
test                      = require '../../../apps/guy-test'
types                     = new ( require 'intertype' ).Intertype
{ isa
  equals
  type_of
  validate }              = types


#-----------------------------------------------------------------------------------------------------------
@guy_samesame_api = ( T, done ) ->
  GUY     = require H.guy_path
  #.........................................................................................................
  T?.eq ( type_of GUY.samesame.equals     ), 'function'
  T?.eq ( type_of GUY.samesame.deep_copy  ), 'function'
  #.........................................................................................................
  done?()

#-----------------------------------------------------------------------------------------------------------
@guy_samesame_deep_copy_works_with_functions = ( T, done ) ->
  GUY           = require H.guy_path
  { equals
    deep_copy } = GUY.samesame
  #.........................................................................................................
  debug '^87-1^', deep_copy { f: ( -> ), }
  T?.eq ( type_of ( deep_copy { f: ( -> ), } ).f ), 'function'
  #.........................................................................................................
  done?()

#-----------------------------------------------------------------------------------------------------------
@guy_samesame_equals_works_with_functions = ( T, done ) ->
  GUY           = require H.guy_path
  { equals
    deep_copy } = GUY.samesame
  f             = ->
  #.........................................................................................................
  T?.eq ( equals { f: ( -> ), }, { f: ( -> ), } ), false
  T?.eq ( equals { f, }, { f, }                 ), true
  #.........................................................................................................
  done?()

#-----------------------------------------------------------------------------------------------------------
@guy_samesame_deep_copy_works_with_regexes = ( T, done ) ->
  GUY           = require H.guy_path
  { equals
    deep_copy } = GUY.samesame
  re            = /x/
  #.........................................................................................................
  debug '^87-1^', deep_copy { re, }
  T?.eq ( type_of ( deep_copy { re, } ).re ), 'regex'
  #.........................................................................................................
  done?()

#-----------------------------------------------------------------------------------------------------------
@guy_samesame_equals_works_with_regexes = ( T, done ) ->
  GUY           = require H.guy_path
  { equals
    deep_copy } = GUY.samesame
  re            = /x/
  #.........................................................................................................
  T?.eq ( equals { re: /x/, }, { re: /x/, } ), true
  T?.eq ( equals { re, }, { re, }           ), true
  #.........................................................................................................
  done?()

#-----------------------------------------------------------------------------------------------------------
@guy_samesame_copy_regex = ( T, done ) ->
  GUY           = require H.guy_path
  probe         = /xyz/ysu
  result        = GUY.samesame.copy_regex probe, { global: true, multiline: true, }
  #.........................................................................................................
  T?.eq ( type_of result    ), 'regex'
  T?.eq ( result.global     ), true
  T?.eq ( result.sticky     ), true
  T?.eq ( result.unicode    ), true
  T?.eq ( result.ignoreCase ), false
  T?.eq ( result.multiline  ), true
  #.........................................................................................................
  done?()



############################################################################################################
if require.main is module then do =>
  # @guy_str_escape_for_regex()
  test @
