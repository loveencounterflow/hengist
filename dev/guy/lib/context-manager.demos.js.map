{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/context-manager.demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GUY/TESTS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_dba_foreign_keys_off_cxm = ->\n  #=========================================================================================================\n  class Foreign_keys_off_cxm extends Context_manager\n\n    #-------------------------------------------------------------------------------------------------------\n    enter: ( P... ) ->\n      debug '^Foreign_keys_off_cxm.enter^', P\n\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    exit: ( P... ) ->\n      debug '^Foreign_keys_off_cxm.exit^', P\n      return null\n\n  #=========================================================================================================\n  class Dba_x extends ( require '../../../apps/icql-dba' ).Dba\n\n    #-----------------------------------------------------------------------------------------------------\n    create_with_foreign_keys_off: ( cxm_arguments... ) =>\n      cxm = new Foreign_keys_off_cxm { dba: @, }\n      return cxm\n\n    #-----------------------------------------------------------------------------------------------------\n    with_foreign_keys_off: ( cxm_arguments... ) =>\n      cxm = @create_with_foreign_keys_off cxm_arguments...\n      cxm = new Foreign_keys_off_cxm { dba: @, }\n      return cxm\n\n  #=========================================================================================================\n  do =>\n\n    #-------------------------------------------------------------------------------------------------------\n    dba = new Dba()\n    dba.with_foreign_keys_off 'cxm_arguments', block = ( cx_value, extra_arguments... ) ->\n      debug '^inside-managed-context'\n      return 'block-result'\n    return null\n  return null\n\n\n\n#===========================================================================================================\n# CLASS DEFINITION\n#-----------------------------------------------------------------------------------------------------------\nclass Context_manager extends Function\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    @cfg = cfg\n    return @manage\n  #---------------------------------------------------------------------------------------------------------\n  enter: ( rtas... ) ->\n    R = { cx: 'value', }\n    debug '^enter^    ', { rtas, cfg: @cfg, }\n    return R\n  #---------------------------------------------------------------------------------------------------------\n  exit: ( cx_value, rtas... ) ->\n    debug '^exit^     ', { cx_value, rtas, cfg: @cfg, }\n    return null\n  #---------------------------------------------------------------------------------------------------------\n  manage: ( rtas..., block ) =>\n    validate.function block\n    help  '^manage^   ', { rtas, cfg: @cfg, block, }\n    cx_value = @enter rtas...\n    help  '^manage^   ', { rtas, cfg: @cfg, block, cx_value, }\n    try\n      # block_value = block cx_value, rtas...\n      block_value = block.call @, cx_value, rtas...\n    finally\n      @exit cx_value, rtas...\n    help  '^manage^   ', { block_value, }\n    return block_value\n\n#===========================================================================================================\n# DEMOS\n#-----------------------------------------------------------------------------------------------------------\ndemo_2 = ->\n  do =>\n    manage  = new Context_manager cfg = { whatever: 'values', }\n    rtas    = [ 'a', 'b', 'c', ]\n    block   = ( cx_value, rtas... ) ->\n      info '^block^    ', { cx_value, rtas, cfg: @cfg, }\n      return 'block_value'\n    block_value = manage rtas..., block\n    debug '^3334^', rpr block_value\n    whisper '--------------------------------'\n    debug '^3334^', rpr block_value = manage 'some', 'other', 'rtas', ( cx_value, rtas... ) ->\n      info '^block2^   ', { cx_value, rtas, cfg: @cfg, }\n      return 'another_block_value'\n    return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  # urge '#############################'\n  # demo_1()\n  urge '#############################'\n  demo_2()\n  # demo_dba_foreign_keys_off_cxm()\n\n\n###\n\n* RTAs / `rtas`: Run Time Arguments, the arguments passed in fron of the `block` when using the `manager`,\n  as in `manager 'some', 'rtas', 'here', ( cx_value, rtas... ) -> ...`\n\n* CX value / `cx_value`: the 'context value', commonly a resource, an object of central interest that\n  enables certain operations and has to be resource-managed, such as a DB connection to be established and\n  freed, or a file to be opened and closed.\n\n* Block (payload?, run time block?, )\n  * if unbound function is used, its `this` value will be the `Context_manager` instance (i.e. `manage()`);\n    from inside the block, the arguments used to instantiate the context manager may be accessed as `@cfg`\n    in this case.\n\n* Manager (cxmanager, context manager): a callable return value from instantiating a `Context_manager`\n  class.\n  * can be called any number of times with any number of RTAs and a required callable `block` as last\n    argument\n  * naming: conventionally `with_${purpose}`, as in `with_foreign_keys_off()`, `with_open_file()`,\n    `with_db_connection()`.\n* Context manager classes conventionally declared as `With_frobulations extends Context_manager`,\n  `With_foreign_keys_off extends Context_manager`, or use `cxm` suffix as in `File_cxm`, `Connection_cxm`.\n\n# To Do\n\n* **[–]** Following Python, define class / factory / decorator that takes a one-off generator function\n  and returns a context manager, sparing users the class declaration overhead.\n\n\n###\n\n"
  ]
}