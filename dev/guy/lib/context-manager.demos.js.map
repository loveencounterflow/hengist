{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/context-manager.demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GUY/TESTS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_dba_foreign_keys_off_cxm = ->\n  #=========================================================================================================\n  class Foreign_keys_off_cxm extends Context_manager\n\n    #-------------------------------------------------------------------------------------------------------\n    enter: ( P... ) ->\n      debug '^Foreign_keys_off_cxm.enter^', P\n\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    exit: ( P... ) ->\n      debug '^Foreign_keys_off_cxm.exit^', P\n      return null\n\n  #=========================================================================================================\n  class Dba_x extends ( require '../../../apps/icql-dba' ).Dba\n\n    #-----------------------------------------------------------------------------------------------------\n    create_with_foreign_keys_off: ( cxm_arguments... ) =>\n      cxm = new Foreign_keys_off_cxm { dba: @, }\n      return cxm\n\n    #-----------------------------------------------------------------------------------------------------\n    with_foreign_keys_off: ( cxm_arguments... ) =>\n      cxm = @create_with_foreign_keys_off cxm_arguments...\n      cxm = new Foreign_keys_off_cxm { dba: @, }\n      return cxm\n\n  #=========================================================================================================\n  do =>\n\n    #-------------------------------------------------------------------------------------------------------\n    dba = new Dba()\n    dba.with_foreign_keys_off 'cxm_arguments', block = ( cx_value, extra_arguments... ) ->\n      debug '^inside-managed-context'\n      return 'block-result'\n    return null\n  return null\n\n\n\n#===========================================================================================================\n# CLASS DEFINITION\n#-----------------------------------------------------------------------------------------------------------\nclass Context_manager extends Function\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( kernel ) ->\n    super()\n    @kernel     = kernel.bind @\n    @ressources = {}\n    return @manage\n\n  #---------------------------------------------------------------------------------------------------------\n  enter: ( P... ) ->\n    R = null\n    debug '^701^', \"enter()\", P\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  manage: ( P..., block ) =>\n    validate.function block\n    cx_value = @enter P...\n    debug '^701^', \"manage()\", { P, block, cx_value, }\n    try R = @kernel cx_value, P... finally @exit cx_value, P...\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  exit: ( P... ) ->\n    debug '^701^', \"exit()\", P\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\nclass Context_manager_2 extends Function\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    @cfg        = cfg\n    @ressources = {}\n    return @manage\n  #---------------------------------------------------------------------------------------------------------\n  enter: ( rtas... ) ->\n    R = null\n    debug '^enter^    ', { rtas, }, @cfg\n    return R\n  #---------------------------------------------------------------------------------------------------------\n  exit: ( rtas... ) ->\n    debug '^exit^     ', { rtas, }, @cfg\n    return null\n  #---------------------------------------------------------------------------------------------------------\n  manage: ( rtas..., block ) => ### RTAS: Run Time ArgumentS ###\n    validate.function block\n    help  '^manage^   ', { rtas, }, @cfg, { block, }\n    cx_value = @enter rtas...\n    help  '^manage^   ', { cx_value, }\n    try block_value = block cx_value, rtas... finally @exit cx_value, rtas...\n    help  '^manage^   ', { block_value, }\n    return block_value\n\n#===========================================================================================================\n# DEMOS\n#-----------------------------------------------------------------------------------------------------------\ndemo_2 = ->\n  do =>\n    manage = new Context_manager_2 cfg = { whatever: 'values', }\n    help '^342^', { manage, }\n    block_result = manage 'a', 'b', 'c', block = -> ( cx_value, context_arguments... ) ->\n      info '^4554^', 'block', { cx_value, context_arguments, }\n      return 'block_result'\n    debug '^3334^', rpr block_result\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  do =>\n    manage = new Context_manager kernel = ( P... ) ->\n      info '^4554^', 'kernel', P\n      whisper '^4554^', @id\n      whisper '^4554^', ( k for k of @ )\n      whisper '^4554^', @enter\n      whisper '^4554^', @exit\n      return ( rpr p for p in P ).join '|'\n    block_result = manage 'a', 'b', 'c', block = -> ( cx_value, context_arguments... ) ->\n      info '^4554^', 'block', { cx_value, context_arguments, }\n      return 'block_result'\n    debug '^3334^', rpr block_result\n    return null\n\n############################################################################################################\nif require.main is module then do =>\n  # urge '#############################'\n  # demo_1()\n  urge '#############################'\n  demo_2()\n  # demo_dba_foreign_keys_off_cxm()"
  ]
}