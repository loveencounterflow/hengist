{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/samesame.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'GUY/samesame'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\nH                         = require './helpers'\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate }              = types\n\n\n#-----------------------------------------------------------------------------------------------------------\n@guy_samesame_api = ( T, done ) ->\n  GUY     = require H.guy_path\n  #.........................................................................................................\n  T?.eq ( type_of GUY.samesame.equals     ), 'function'\n  T?.eq ( type_of GUY.samesame.deep_copy  ), 'function'\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@guy_samesame_deep_copy_works_with_functions = ( T, done ) ->\n  GUY           = require H.guy_path\n  { equals\n    deep_copy } = GUY.samesame\n  #.........................................................................................................\n  debug '^87-1^', deep_copy { f: ( -> ), }\n  T?.eq ( type_of ( deep_copy { f: ( -> ), } ).f ), 'function'\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@guy_samesame_equals_works_with_functions = ( T, done ) ->\n  GUY           = require H.guy_path\n  { equals\n    deep_copy } = GUY.samesame\n  f             = ->\n  #.........................................................................................................\n  T?.eq ( equals { f: ( -> ), }, { f: ( -> ), } ), false\n  T?.eq ( equals { f, }, { f, }                 ), true\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@guy_samesame_deep_copy_works_with_regexes = ( T, done ) ->\n  GUY           = require H.guy_path\n  { equals\n    deep_copy } = GUY.samesame\n  re            = /x/\n  #.........................................................................................................\n  debug '^87-1^', deep_copy { re, }\n  T?.eq ( type_of ( deep_copy { re, } ).re ), 'regex'\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@guy_samesame_equals_works_with_regexes = ( T, done ) ->\n  GUY           = require H.guy_path\n  { equals\n    deep_copy } = GUY.samesame\n  re            = /x/\n  #.........................................................................................................\n  T?.eq ( equals { re: /x/, }, { re: /x/, } ), true\n  T?.eq ( equals { re, }, { re, }           ), true\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@guy_samesame_copy_regex = ( T, done ) ->\n  GUY           = require H.guy_path\n  probe         = /xyz/ysu\n  result        = GUY.samesame.copy_regex probe, { global: true, multiline: true, }\n  #.........................................................................................................\n  T?.eq ( type_of result    ), 'regex'\n  T?.eq ( result.global     ), true\n  T?.eq ( result.sticky     ), true\n  T?.eq ( result.unicode    ), true\n  T?.eq ( result.ignoreCase ), false\n  T?.eq ( result.multiline  ), true\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @guy_str_escape_for_regex()\n  test @\n"
  ]
}