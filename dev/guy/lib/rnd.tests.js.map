{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/rnd.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'GUY/samesame'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\nH                         = require './helpers'\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate }              = types\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@guy_rnd_shuffle = ( T, done ) ->\n  GUY           = require H.guy_path\n  T?.eq ( GUY.rnd.shuffle []      ), []\n  T?.eq ( GUY.rnd.shuffle [ 1, ]  ), [ 1, ]\n  #.........................................................................................................\n  d = GUY.rnd.shuffle [ 1, 2, ]\n  T?.ok ( equals d, [ 1, 2, ] ) or \\\n        ( equals d, [ 2, 1, ] )\n  #.........................................................................................................\n  d = GUY.rnd.shuffle [ 1, 2, 3, ]\n  T?.ok ( equals d, [ 1, 2, 3, ] ) or \\\n        ( equals d, [ 1, 3, 2, ] ) or \\\n        ( equals d, [ 2, 1, 3, ] ) or \\\n        ( equals d, [ 2, 3, 1, ] ) or \\\n        ( equals d, [ 3, 2, 1, ] ) or \\\n        ( equals d, [ 3, 1, 2, ] )\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@guy_rnd_shuffle = ( T, done ) ->\n  GUY           = require H.guy_path\n  T?.eq ( GUY.rnd.shuffle []      ), []\n  T?.eq ( GUY.rnd.shuffle [ 1, ]  ), [ 1, ]\n  #.........................................................................................................\n  d = GUY.rnd.shuffle [ 1, 2, ]\n  T?.ok ( equals d, [ 1, 2, ] ) or \\\n        ( equals d, [ 2, 1, ] )\n  #.........................................................................................................\n  d = GUY.rnd.shuffle [ 1, 2, 3, ]\n  T?.ok ( equals d, [ 1, 2, 3, ] ) or \\\n        ( equals d, [ 1, 3, 2, ] ) or \\\n        ( equals d, [ 2, 1, 3, ] ) or \\\n        ( equals d, [ 2, 3, 1, ] ) or \\\n        ( equals d, [ 3, 2, 1, ] ) or \\\n        ( equals d, [ 3, 1, 2, ] )\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@guy_rnd_random_number = ( T, done ) ->\n  GUY           = require H.guy_path\n  for min in [ -100 .. +100 ]\n    for max in [ -100 .. +100 ]\n      result = GUY.rnd.random_number min, max\n      [ min, max, ] = [ max, min, ] if max < min\n      T?.ok min <= result <= max\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @guy_str_escape_for_regex()\n  test @\n"
  ]
}