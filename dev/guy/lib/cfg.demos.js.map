{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/cfg.demos.coffee"
  ],
  "names": [],
  "mappings": "AAC4G;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,WAAA,EAAA,YAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA;;EAC5G,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR,EAFgF;;;EAI5G,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAfgF;;;EAiB5G,IAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,QAFF,EAGE,gBAHF,EAIE,MAJF,CAAA,GAI4B,KAAK,CAAC,MAAN,CAAA,CAJ5B;;EAKA,GAAA,GAA4B,OAAA,CAAQ,CAAC,CAAC,QAAV;;EAC5B,GAAA,GAA4B,KA1BgF;;;EA6B5G,YAAA,GAAe,QAAA,CAAA,CAAA;AACf,QAAA,EAAA,EAAA,GAAA,EAAA;IAAQ,KAAN,MAAA,GAAA;MACE,WAAa,CAAE,GAAF,CAAA;QACX,GAAG,CAAC,GAAG,CAAC,oBAAR,CAA6B,IAA7B,EAAgC,GAAhC;MADW;;IADf,EAAF;;IAIE,GAAA,GAAM,IAAI,EAAJ,CAAA;IACN,GAAA,GAAM,IAAI,EAAJ,CAAO;MAAE,GAAA,EAAK;IAAP,CAAP,EALR;;IAOE,GAAA,CAAI,GAAJ,EAPF;IAQE,GAAA,CAAI,GAAG,CAAC,GAAR,EARF;IASE,GAAA,CAAI,GAAJ,EATF;IAUE,GAAA,CAAI,GAAG,CAAC,GAAR,EAVF;IAWE,GAAA,CAAI,GAAG,CAAC,KAAJ,KAAa,GAAG,CAAC,KAArB,EAXF;IAYE,GAAA,CAAI,OAAA,CAAQ,GAAG,CAAC,KAAK,CAAC,QAAlB,CAAJ,EAZF;;AAcE,WAAO;EAfM,EA7B6F;;;EA+C5G,WAAA,GAAc,QAAA,CAAA,CAAA;AACd,QAAA,EAAA,EAAA,EAAA,EAAA;IAAQ;MAAN,MAAA,GAAA;QAQkB,OAAf,aAAe,CAAE,IAAF,CAAA;UACd,IAAI,CAAC,KAAK,CAAC,OAAX,CAAmB,iBAAnB,EAAsC;YAAA,KAAA,EACpC;cAAA,eAAA,EAAoC,QAAA,CAAE,CAAF,CAAA;uBAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;cAAT,CAApC;cACA,iCAAA,EAAoC,QAAA,CAAE,CAAF,CAAA;AAAQ,oBAAA;8BAAC,CAAC,CAAC,SAAS,iBAAX,QAA0B;cAAnC,CADpC;cAEA,wBAAA,EAAoC,QAAA,CAAE,CAAF,CAAA;uBAAS,CAAC,CAAC,GAAF,KAAS;cAAlB;YAFpC;UADoC,CAAtC;UAIA,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,eAApB,CAAoC,IAAI,CAAC,GAAzC;AACA,iBAAO;QANO;;QAOhB,WAAa,CAAE,GAAF,CAAA;UACX,GAAG,CAAC,GAAG,CAAC,oBAAR,CAA6B,IAA7B,EAAgC,GAAhC;AACA,iBAAO;QAFI;;MAff;;MACE,EAAC,CAAA,CAAD,GAAI,GAAG,CAAC,GAAG,CAAC,MAAR,CACF;QAAA,GAAA,EAAU,cAAV;QACA,GAAA,EAAU,cADV;QAEA,QAAA,EACE;UAAA,eAAA,EACE;YAAA,GAAA,EAAU,aAAV;YACA,GAAA,EAAU;UADV;QADF;MAHF,CADE;;;;kBADR;;IAmBE,EAAA,GAAK,IAAI,EAAJ,CAAO;MAAE,GAAA,EAAK;IAAP,CAAP;IACL,GAAA,CAAI,EAAJ;IACA,GAAA,CAAI,EAAE,CAAC,GAAP;IACA,GAAA,CAAI,EAAE,CAAC,WAAW,CAAC,CAAnB;IACA,GAAA,uCAAoB,CAAE,iBAAtB,EAvBF;;AAyBE,WAAO;EA1BK,EA/C8F;;;EAiF5G,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA;;aAEhC,WAAA,CAAA;IAFgC,CAAA,IAAlC;;AAjF4G",
  "sourcesContent": [
    "\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GUY/TESTS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of\n  equals }                = types.export()\nguy                       = require H.guy_path\nlog                       = info\n\n#-----------------------------------------------------------------------------------------------------------\nminimal_demo = ->\n  class Ex\n    constructor: ( cfg ) ->\n      guy.cfg.configure_with_types @, cfg\n  #.........................................................................................................\n  ex1 = new Ex()\n  ex2 = new Ex { foo: 42, }\n  #.........................................................................................................\n  log ex1                         # Ex { cfg: {} }\n  log ex1.cfg                     # {}\n  log ex2                         # Ex { cfg: { foo: 42 } }\n  log ex2.cfg                     # { foo: 42 }\n  log ex1.types is ex2.types      # false\n  log type_of ex1.types.validate  # function\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nmedium_demo = ->\n  class Ex\n    @C: guy.lft.freeze\n      foo:      'foo-constant'\n      bar:      'bar-constant'\n      defaults:\n        constructor_cfg:\n          foo:      'foo-default'\n          bar:      'bar-default'\n    @declare_types: ( self ) ->\n      self.types.declare 'constructor_cfg', tests:\n        \"@isa.object x\":                    ( x ) -> @isa.object x\n        \"x.foo in [ 'foo-default', 42, ]\":  ( x ) -> x.foo in [ 'foo-default', 42, ]\n        \"x.bar is 'bar-default'\":           ( x ) -> x.bar is 'bar-default'\n      self.types.validate.constructor_cfg self.cfg\n      return null\n    constructor: ( cfg ) ->\n      guy.cfg.configure_with_types @, cfg\n      return undefined\n  #.......................................................................................................\n  ex = new Ex { foo: 42, }\n  log ex\n  log ex.cfg\n  log ex.constructor.C\n  log ex.constructor.C?.defaults\n  #.......................................................................................................\n  return null\n\n\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # minimal_demo()\n  medium_demo()\n"
  ]
}