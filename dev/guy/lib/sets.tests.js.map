{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sets.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GUY/TESTS/SETS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\n# PATH                      = require 'path'\n# FS                        = require 'fs'\n# { freeze }                = require 'letsfreezethat'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of\n  equals }                = types.export()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@guy_sets_basics = ( T, done ) ->\n  # T?.halt_on_error()\n  GUY     = require H.guy_path\n  probes_and_matchers = [\n    [ { method: 'unite',      sets: [ '',  '',  '',                           ], }, '',                         ]\n    [ { method: 'unite',      sets: [ 'a', 'b', 'a',                          ], }, 'ab',                       ]\n    [ { method: 'unite',      sets: [ 'ab', 'cb', 'a',                        ], }, 'abc',                      ]\n    [ { method: '_intersect', sets: [ '',  '',                                ], }, '',                         ]\n    [ { method: '_intersect', sets: [ 'a', 'b',                               ], }, '',                         ]\n    [ { method: '_intersect', sets: [ 'ab', 'cb',                             ], }, 'b',                        ]\n    [ { method: 'intersect',  sets: [ '',  '',                                ], }, '',                         ]\n    [ { method: 'intersect',  sets: [ 'a', 'b',                               ], }, '',                         ]\n    [ { method: 'intersect',  sets: [ 'ab', 'cb',                             ], }, 'b',                        ]\n    [ { method: 'intersect',  sets: [ 'a', 'b', 'c',                          ], }, '',                         ]\n    [ { method: 'intersect',  sets: [ 'ab', 'cb',                             ], }, 'b',                        ]\n    [ { method: 'intersect',  sets: [ 'abcdefghijklmnopqrstuvwxyz', 'das da', ], }, 'ads',                      ]\n    [ { method: 'subtract',   sets: [ 'abcdefghijklmnopqrstuvwxyz', 'das da', ], }, 'bcefghijklmnopqrtuvwxyz',  ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      { method\n        sets  } = probe\n      sets      = ( new Set s for s in sets )\n      result    = GUY.sets[ method ] sets...\n      T?.ok isa.set result\n      result    = [ result..., ].join ''\n      resolve result\n  #.........................................................................................................\n  return done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  test @guy_sets_basics\n"
  ]
}