{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/readlines.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'IN-MEMORY-SQL'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\ngcfg                      = { verbose: false, }\n{ freeze }                = require 'letsfreezethat'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@intertext_splitlines = ( cfg ) -> new Promise ( resolve ) =>\n  SL = require 'intertext-splitlines'\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    ctx   = SL.new_context\n      splitter:         '\\n'\n      decode:           true\n      skip_empty_last:  true\n      keep_newlines:    true\n    path        = cfg.paths[ cfg.size ]\n    fd          = FS.openSync path\n    loop\n      buffer     = Buffer.alloc cfg.chunk_size\n      bytes_read = FS.readSync fd, buffer\n      break if bytes_read is 0\n      buffer = buffer.slice 0, bytes_read if bytes_read < cfg.chunk_size\n      for line from SL.walk_lines ctx, buffer\n        count++\n        debug '^888-1^', { count, line, } if cfg.show\n    for line from SL.flush ctx\n      count++\n      debug '^888-2^', { count, line, } if cfg.show\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_n_readlines = ( cfg ) -> new Promise ( resolve ) =>\n  if cfg.use_patched then Readlines = require '../../../apps/guy/dependencies/n-readlines-patched'\n  else                    Readlines = require 'n-readlines'\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count         = 0\n    path          = cfg.paths[ cfg.size ]\n    readlines_cfg =\n      readChunk:          cfg.chunk_size\n      newLineCharacter:   '\\n'      # nl\n    readlines = new Readlines path, readlines_cfg\n    while ( line = readlines.next() ) isnt false\n      count++\n      line = line.toString 'utf-8'\n      debug '^888-1^', { count, line, } if cfg.show\n    resolve count\n  return null\n\n@n_readlines          = ( cfg ) -> @_n_readlines { cfg..., use_patched: false, }\n@n_readlines_patched  = ( cfg ) -> @_n_readlines { cfg..., use_patched: true, }\n\n#-----------------------------------------------------------------------------------------------------------\n@guy_fs_walk_lines = ( cfg ) -> new Promise ( resolve ) =>\n  { walk_lines } = ( require '../../../apps/guy' ).fs\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count         = 0\n    path          = cfg.paths[ cfg.size ]\n    for line from walk_lines path\n      count++\n      debug '^888-1^', { count, line, } if cfg.show\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  gcfg.verbose  = true\n  gcfg.verbose  = false\n  bench         = BM.new_benchmarks()\n  cfg           =\n    # size:         'small'\n    size:         'big1'\n    # chunk_size:   100\n    # chunk_size:   1 * 1024\n    chunk_size:   4 * 1024 ### optimum ###\n    # chunk_size:   8 * 1024\n    # chunk_size:   16 * 1024\n    # chunk_size:   64 * 1024\n    paths:\n      small:  PATH.resolve PATH.join __dirname, '../../../assets/a-few-words.txt'\n      big1:   '/usr/share/dict/american-english'\n  cfg.show      = cfg.size is 'small'\n  repetitions   = 5\n  test_names    = [\n    'n_readlines'\n    'n_readlines_patched'\n    'intertext_splitlines'\n    'guy_fs_walk_lines'\n    ]\n  global.gc() if global.gc?\n  data_cache = null\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      global.gc() if global.gc?\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n"
  ]
}