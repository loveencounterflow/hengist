{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/temp.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\n_GUY                      = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = _GUY.trm.get_loggers 'GUY/temp/tests'\n{ rpr\n  inspect\n  echo\n  log     }               = _GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nFS                        = require 'fs'\n# { freeze }                = require 'letsfreezethat'\nH                         = require './helpers'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype()\n{ isa\n  declare\n  type_of\n  validate\n  equals }                = types\n\n#===========================================================================================================\ndeclare.fs_file\n  isa: ( x ) ->\n    return false unless @isa.nonempty.text x\n    try\n      stat = FS.statSync x\n    catch error\n      return false if error.code is 'ENOENT'\n      throw error\n    return stat.isFile()\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.fs_directory\n  isa: ( x ) ->\n    return false unless @isa.nonempty.text x\n    try\n      stat = FS.statSync x\n    catch error\n      return false if error.code is 'ENOENT'\n      throw error\n    return stat.isDirectory()\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.fs_exists\n  isa: ( x ) ->\n    return false unless @isa.nonempty.text x\n    try\n      stat = FS.statSync x\n    catch error\n      return false if error.code is 'ENOENT'\n      throw error\n    return true\n\n#-----------------------------------------------------------------------------------------------------------\n@GUY_temp_context_handler_file = ( T, done ) ->\n  GUY = require '../../../apps/guy'\n  #.........................................................................................................\n  do =>\n    path = null\n    info = GUY.temp.with_file ({ path: mypath, fd, }) ->\n      path = mypath\n      T?.ok isa.fs_file mypath\n    T?.eq info, null\n    T?.ok not isa.fs_file path\n  #.........................................................................................................\n  do =>\n    path = null\n    info = GUY.temp.with_file { keep: true, }, ({ path: mypath, fd, }) ->\n      path = mypath\n      T?.ok isa.fs_file mypath\n    T?.eq info, null\n    T?.ok isa.fs_file path\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@GUY_temp_context_handler_directory = ( T, done ) ->\n  GUY = require '../../../apps/guy'\n  #.........................................................................................................\n  do =>\n    path = null\n    info = GUY.temp.with_directory ({ path: mypath, }) ->\n      path = mypath\n      debug '^345-1^', { path, }\n      T?.ok isa.fs_directory mypath\n    debug '^345-2^', info\n    T?.eq info, null\n    T?.ok not isa.fs_directory path\n  #.........................................................................................................\n  do =>\n    path = null\n    info = GUY.temp.with_directory { prefix: 'zzwhatever-', }, ({ path: mypath, }) ->\n      path = mypath\n      debug '^345-3^', { path, }\n      T?.ok ( PATH.basename mypath ).startsWith 'zzwhatever-'\n      T?.ok isa.fs_directory mypath\n    debug '^345-4^', info\n    T?.eq info, null\n    T?.ok not isa.fs_directory path\n  #.........................................................................................................\n  do =>\n    path = null\n    info = GUY.temp.with_directory { keep: true, prefix: 'zzwhatever-', }, ({ path: mypath, }) ->\n      path = mypath\n      debug '^345-5^', { path, }\n      T?.ok ( PATH.basename mypath ).startsWith 'zzwhatever-'\n      T?.ok isa.fs_directory mypath\n    debug '^345-6^', info\n    T?.eq info, null\n    T?.ok isa.fs_directory path\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@GUY_temp_tempfolder_removed_with_contents = ( T, done ) ->\n  GUY = require '../../../apps/guy'\n  #.........................................................................................................\n  do =>\n    path  = null\n    fpath = null\n    info  = GUY.temp.with_directory { prefix: 'zzwhatever-', }, ({ path: mypath, }) ->\n      path = mypath\n      debug '^345-3^', { path, }\n      fpath = PATH.join path, 'myfile.txt'\n      FS.writeFileSync fpath, \"helo\"\n      isa.fs_file fpath\n    debug '^345-4^', info\n    T?.eq info, null\n    T?.ok not isa.fs_file fpath\n    T?.ok not isa.fs_directory path\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@GUY_temp_works_with_async_functions = ( T, done ) ->\n  GUY       = require '../../../apps/guy'\n  collector = []\n  #.........................................................................................................\n  async_fn  = ( x ) -> new Promise ( done ) ->\n    debug '^43-1^', rpr x\n    collector.push x\n    await GUY.async.after 0.01, done\n    return null\n  #.........................................................................................................\n  await async_fn '^43-2^'\n  await do =>\n    path = null\n    info = await GUY.temp.with_file { prefix: 'yyy-', }, ({ path: mypath, fd, }) ->\n      path = mypath\n      await async_fn '^43-3^'\n      T?.ok isa.fs_file mypath\n    T?.eq info, null\n    T?.ok not isa.fs_file path\n  #.........................................................................................................\n  await async_fn '^43-4^'\n  await do =>\n    path = null\n    info = await GUY.temp.with_directory { prefix: 'yyy-', }, ({ path: mypath, }) ->\n      path = mypath\n      await async_fn '^43-5^'\n      T?.ok isa.fs_directory mypath\n    T?.eq info, null\n    T?.ok not isa.fs_directory path\n  #.........................................................................................................\n  await async_fn '^43-6^'\n  T?.eq collector, [ '^43-2^', '^43-3^', '^43-4^', '^43-5^', '^43-6^' ]\n  debug '^43-7^', collector\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@GUY_temp_with_shadow_file = ( T, done ) ->\n  GUY         = require '../../../apps/guy'\n  base_path   = PATH.resolve PATH.join __dirname, '../../../'\n  data_path   = PATH.resolve PATH.join base_path, 'data/guy/temp'\n  assets_path = PATH.resolve PATH.join base_path, 'assets/guy/temp'\n  #.........................................................................................................\n  prepare     = ->\n    FS.rmSync data_path,              { recursive: true, force: true, }\n    FS.cpSync assets_path, data_path, { recursive: true, force: false, verbatimSymlinks: true, }\n  #.........................................................................................................\n  do ->\n    ### errors with non-existant path ###\n    prepare()\n    file_path   = PATH.resolve PATH.join data_path, 'XXXXXXXXX'\n    T?.throws /no such file/, ->\n      GUY.temp.with_shadow_file file_path, ({ path: temp_file_path, }) ->\n        debug '^35-1^', temp_file_path\n  #.........................................................................................................\n  do ->\n    ### can read from temp, writing to it updates original ###\n    prepare()\n    file_path   = PATH.resolve PATH.join data_path, 'helo-world.txt'\n    GUY.temp.with_shadow_file file_path, ({ path: temp_file_path, }) ->\n      text = FS.readFileSync temp_file_path, { encoding: 'utf-8', }\n      T?.eq text, \"helo world\"\n      FS.writeFileSync temp_file_path, \"#{text}!!!\"\n      return null\n    text = FS.readFileSync file_path, { encoding: 'utf-8', }\n    T?.eq text, \"helo world!!!\"\n  #.........................................................................................................\n  do ->\n    ### links are transparent ###\n    prepare()\n    file_path = PATH.resolve PATH.join data_path, 'helo-world.txt.symlink.symlink'\n    GUY.temp.with_shadow_file file_path, ({ path: temp_file_path, }) ->\n      text = FS.readFileSync temp_file_path, { encoding: 'utf-8', }\n      T?.eq text, \"helo world\"\n      FS.writeFileSync temp_file_path, \"#{text}!!!\"\n      return null\n    text = FS.readFileSync file_path, { encoding: 'utf-8', }\n    T?.eq text, \"helo world!!!\"\n    do ->\n      stats           = FS.lstatSync file_path\n      result          = {}\n      result.symlink  = stats.isSymbolicLink()\n      result.file     = stats.isFile()\n      result.folder   = stats.isDirectory()\n      T?.eq result, { symlink: true, file: false, folder: false, }\n    do ->\n      stats           = FS.statSync file_path\n      result          = {}\n      result.symlink  = stats.isSymbolicLink()\n      result.file     = stats.isFile()\n      result.folder   = stats.isDirectory()\n      T?.eq result, { symlink: false, file: true, folder: false, }\n  #.........................................................................................................\n  do ->\n    ### folders are rejected ###\n    prepare()\n    file_path = PATH.resolve PATH.join data_path, 'helo-world.folder'\n    T?.throws /illegal operation on a directory/, ->\n      GUY.temp.with_shadow_file file_path, ({ path: temp_file_path, }) ->\n  #.........................................................................................................\n  do ->\n    ### links to folders are rejected ###\n    prepare()\n    file_path = PATH.resolve PATH.join data_path, 'helo-world.folder.symlink'\n    T?.throws /illegal operation on a directory/, ->\n      GUY.temp.with_shadow_file file_path, ({ path: temp_file_path, }) ->\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@GUY_temp_with_shadow_file_works_across_device_boundaries = ( T, done ) ->\n  GUY         = require '../../../apps/guy'\n  base_path   = PATH.resolve PATH.join __dirname, '../../../'\n  data_path   = PATH.resolve PATH.join base_path, 'data/guy/temp'\n  assets_path = PATH.resolve PATH.join base_path, 'assets/guy/temp'\n  #.........................................................................................................\n  prepare     = ->\n    FS.rmSync data_path,              { recursive: true, force: true, }\n    FS.cpSync assets_path, data_path, { recursive: true, force: false, verbatimSymlinks: true, }\n  #.........................................................................................................\n  do ->\n    ### TAINT path only valid on modern Linux distros ###\n    prepare()\n    GUY.temp.with_file { tmpdir: '/dev/shm', }, ({ path: shm_path }) ->\n      GUY.temp.with_shadow_file shm_path, ({ path: tmp_path, }) ->\n        FS.writeFileSync tmp_path, \"some words\"\n      result = FS.readFileSync shm_path, { encoding: 'utf-8', }\n      T?.eq result, \"some words\"\n      return null\n    return null\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@GUY_temp_with_shadow_file_can_pick_up_extra_files = ( T, done ) ->\n  GUY         = require '../../../apps/guy'\n  base_path   = PATH.resolve PATH.join __dirname, '../../../'\n  data_path   = PATH.resolve PATH.join base_path, 'data/guy/temp'\n  assets_path = PATH.resolve PATH.join base_path, 'assets/guy/temp'\n  #.........................................................................................................\n  prepare     = ->\n    FS.rmSync data_path,              { recursive: true, force: true, }\n    FS.cpSync assets_path, data_path, { recursive: true, force: false, verbatimSymlinks: true, }\n  #.........................................................................................................\n  do ->\n    ### TAINT path only valid on modern Linux distros ###\n    prepare()\n    #.......................................................................................................\n    GUY.temp.with_directory { tmpdir: '/dev/shm', }, ({ path: shm_dir_path }) ->\n      shm_path = PATH.join shm_dir_path, 'main.txt'\n      FS.writeFileSync shm_path, \"original content\"\n      #.....................................................................................................\n      GUY.temp.with_shadow_file { path: shm_path, all: true, }, ({ path: tmp_path, }) ->\n        FS.writeFileSync tmp_path, \"some words\"\n        extra_tmp_path = PATH.join ( PATH.dirname tmp_path ), 'extra.txt'\n        FS.writeFileSync extra_tmp_path, \"some extra words\"\n      #.....................................................................................................\n      do ->\n        result = FS.readFileSync shm_path, { encoding: 'utf-8', }\n        T?.eq result, \"some words\"\n      #.....................................................................................................\n      do ->\n        extra_shm_path = PATH.join ( PATH.dirname shm_path ), 'extra.txt'\n        result = FS.readFileSync extra_shm_path, { encoding: 'utf-8', }\n        T?.eq result, \"some extra words\"\n      #.....................................................................................................\n      return null\n    #.......................................................................................................\n    return null\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@GUY_temp_with_shadow_file_can_bring_along_files = ( T, done ) ->\n  GUY         = require '../../../apps/guy'\n  base_path   = PATH.resolve PATH.join __dirname, '../../../'\n  data_path   = PATH.resolve PATH.join base_path, 'data/guy/temp'\n  assets_path = PATH.resolve PATH.join base_path, 'assets/guy/temp'\n  #.........................................................................................................\n  prepare     = ->\n    FS.rmSync data_path,              { recursive: true, force: true, }\n    FS.cpSync assets_path, data_path, { recursive: true, force: false, verbatimSymlinks: true, }\n  #.........................................................................................................\n  do ->\n    ### TAINT path only valid on modern Linux distros ###\n    prepare()\n    #.......................................................................................................\n    GUY.temp.with_directory { tmpdir: '/dev/shm', }, ({ path: shm_dir_path }) ->\n      shm_path = PATH.join shm_dir_path, 'main.txt'\n      FS.writeFileSync shm_path, \"original content\"\n      #.....................................................................................................\n      GUY.temp.with_shadow_file { path: shm_path, all: true, }, ({ path: tmp_path, }) ->\n        FS.writeFileSync tmp_path, \"some words\"\n        extra_tmp_path = PATH.join ( PATH.dirname tmp_path ), 'extra.txt'\n        FS.writeFileSync extra_tmp_path, \"some extra words\"\n      #.....................................................................................................\n      do ->\n        result = FS.readFileSync shm_path, { encoding: 'utf-8', }\n        T?.eq result, \"some words\"\n      #.....................................................................................................\n      do ->\n        extra_shm_path = PATH.join ( PATH.dirname shm_path ), 'extra.txt'\n        result = FS.readFileSync extra_shm_path, { encoding: 'utf-8', }\n        T?.eq result, \"some extra words\"\n      #.....................................................................................................\n      return null\n    #.......................................................................................................\n    return null\n  #.........................................................................................................\n  return done?()\n\n\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n\n# #-----------------------------------------------------------------------------------------------------------\n# @GUY_temp_with_shadow_files = ( T, done ) ->\n#   GUY         = require '../../../apps/guy'\n#   base_path   = PATH.resolve PATH.join __dirname, '../../../'\n#   data_path   = PATH.resolve PATH.join base_path, 'data/guy/temp'\n#   assets_path = PATH.resolve PATH.join base_path, 'assets/guy/temp'\n#   #.........................................................................................................\n#   prepare     = ->\n#     FS.rmSync data_path,              { recursive: true, force: true, }\n#     FS.cpSync assets_path, data_path, { recursive: true, force: false, verbatimSymlinks: true, }\n#   #.........................................................................................................\n#   do ->\n#     ### errors with non-existant path ###\n#     prepare()\n#     file_path   = PATH.resolve PATH.join data_path, 'XXXXXXXXX'\n#     T?.throws /no such file/, ->\n#       GUY.temp.with_shadow_files file_path, ({ paths: temp_file_paths, }) ->\n#         debug '^35-1^', temp_file_paths\n#   #.........................................................................................................\n#   do ->\n#     ### can read from temp, writing to it updates original ###\n#     prepare()\n#     file_path   = PATH.resolve PATH.join data_path, 'helo-world.txt'\n#     GUY.temp.with_shadow_files file_path, ({ paths: temp_file_paths, }) ->\n#       temp_file_path  = temp_file_paths[ 0 ]\n#       text            = FS.readFileSync temp_file_path, { encoding: 'utf-8', }\n#       T?.eq text, \"helo world\"\n#       FS.writeFileSync temp_file_path, \"#{text}!!!\"\n#       return null\n#     text = FS.readFileSync file_path, { encoding: 'utf-8', }\n#     T?.eq text, \"helo world!!!\"\n#   #.........................................................................................................\n#   do ->\n#     ### links are transparent ###\n#     prepare()\n#     file_path = PATH.resolve PATH.join data_path, 'helo-world.txt.symlink.symlink'\n#     GUY.temp.with_shadow_files file_path, ({ paths: temp_file_paths, }) ->\n#       temp_file_path  = temp_file_paths[ 0 ]\n#       text            = FS.readFileSync temp_file_path, { encoding: 'utf-8', }\n#       T?.eq text, \"helo world\"\n#       FS.writeFileSync temp_file_path, \"#{text}!!!\"\n#       return null\n#     text = FS.readFileSync file_path, { encoding: 'utf-8', }\n#     T?.eq text, \"helo world!!!\"\n#     do ->\n#       stats           = FS.lstatSync file_path\n#       result          = {}\n#       result.symlink  = stats.isSymbolicLink()\n#       result.file     = stats.isFile()\n#       result.folder   = stats.isDirectory()\n#       T?.eq result, { symlink: true, file: false, folder: false, }\n#     do ->\n#       stats           = FS.statSync file_path\n#       result          = {}\n#       result.symlink  = stats.isSymbolicLink()\n#       result.file     = stats.isFile()\n#       result.folder   = stats.isDirectory()\n#       T?.eq result, { symlink: false, file: true, folder: false, }\n#   #.........................................................................................................\n#   do ->\n#     ### folders are rejected ###\n#     prepare()\n#     file_path = PATH.resolve PATH.join data_path, 'helo-world.folder'\n#     T?.throws /illegal operation on a directory/, ->\n#       GUY.temp.with_shadow_files file_path, ({ path: temp_file_path, }) ->\n#   #.........................................................................................................\n#   do ->\n#     ### links to folders are rejected ###\n#     prepare()\n#     file_path = PATH.resolve PATH.join data_path, 'helo-world.folder.symlink'\n#     T?.throws /illegal operation on a directory/, ->\n#       GUY.temp.with_shadow_files file_path, ({ path: temp_file_path, }) ->\n#   #.........................................................................................................\n#   return done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @GUY_temp_with_shadow_files_works_across_device_boundaries = ( T, done ) ->\n#   GUY         = require '../../../apps/guy'\n#   base_path   = PATH.resolve PATH.join __dirname, '../../../'\n#   data_path   = PATH.resolve PATH.join base_path, 'data/guy/temp'\n#   assets_path = PATH.resolve PATH.join base_path, 'assets/guy/temp'\n#   #.........................................................................................................\n#   prepare     = ->\n#     FS.rmSync data_path,              { recursive: true, force: true, }\n#     FS.cpSync assets_path, data_path, { recursive: true, force: false, verbatimSymlinks: true, }\n#   #.........................................................................................................\n#   do ->\n#     ### TAINT path only valid on modern Linux distros ###\n#     prepare()\n#     GUY.temp.with_file { tmpdir: '/dev/shm', }, ({ path: shm_path }) ->\n#       GUY.temp.with_shadow_files shm_path, ({ paths: tmp_paths, }) ->\n#         tmp_path = tmp_paths[ 0 ]\n#         FS.writeFileSync tmp_path, \"some words\"\n#       result = FS.readFileSync shm_path, { encoding: 'utf-8', }\n#       T?.eq result, \"some words\"\n#       return null\n#     return null\n#   #.........................................................................................................\n#   return done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @GUY_temp_with_shadow_files_files_may_or_may_not_exist = ( T, done ) ->\n#   GUY         = require '../../../apps/guy'\n#   base_path   = PATH.resolve PATH.join __dirname, '../../../'\n#   data_path   = PATH.resolve PATH.join base_path, 'data/guy/temp'\n#   assets_path = PATH.resolve PATH.join base_path, 'assets/guy/temp'\n#   #.........................................................................................................\n#   prepare     = ->\n#     FS.rmSync data_path,              { recursive: true, force: true, }\n#     FS.cpSync assets_path, data_path, { recursive: true, force: false, verbatimSymlinks: true, }\n#   #.........................................................................................................\n#   do ->\n#     ### TAINT path only valid on modern Linux distros ###\n#     prepare()\n#     #.......................................................................................................\n#     GUY.temp.with_directory { tmpdir: '/dev/shm', }, ({ path: shm_dir_path }) ->\n#       main_shm_path   = PATH.join shm_dir_path, 'main.txt'\n#       extra_shm_path  = PATH.join shm_dir_path, 'extra.txt'\n#       other_shm_path  = PATH.join shm_dir_path, 'other.txt'\n#       shm_paths       = [ main_shm_path, extra_shm_path, other_shm_path, ]\n#       FS.writeFileSync main_shm_path,   \"main content\"\n#       FS.writeFileSync extra_shm_path,  \"extra content\"\n#       T?.eq ( FS.existsSync other_shm_path ), false\n#       #.....................................................................................................\n#       GUY.temp.with_shadow_files shm_paths..., ({ paths: tmp_paths, }) ->\n#         [ main_tmp_path\n#           extra_tmp_path\n#           other_tmp_path ]  = tmp_paths\n#         FS.appendFileSync main_tmp_path, \" and some words\"\n#         FS.unlinkSync     extra_shm_path\n#         FS.writeFileSync  other_tmp_path, \"other content\"\n#       #.....................................................................................................\n#       do ->\n#         result = FS.readFileSync main_shm_path, { encoding: 'utf-8', }\n#         T?.eq result, \"main content and some words\"\n#       #.....................................................................................................\n#       do ->\n#         T?.eq ( FS.existsSync extra_shm_path ), false\n#       #.....................................................................................................\n#       do ->\n#         result = FS.readFileSync other_shm_path, { encoding: 'utf-8', }\n#         T?.eq result, \"other content\"\n#       #.....................................................................................................\n#       return null\n#     #.......................................................................................................\n#     return null\n#   #.........................................................................................................\n#   return done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @GUY_temp_with_shadow_files_can_bring_along_files = ( T, done ) ->\n#   GUY         = require '../../../apps/guy'\n#   base_path   = PATH.resolve PATH.join __dirname, '../../../'\n#   data_path   = PATH.resolve PATH.join base_path, 'data/guy/temp'\n#   assets_path = PATH.resolve PATH.join base_path, 'assets/guy/temp'\n#   #.........................................................................................................\n#   prepare     = ->\n#     FS.rmSync data_path,              { recursive: true, force: true, }\n#     FS.cpSync assets_path, data_path, { recursive: true, force: false, verbatimSymlinks: true, }\n#   #.........................................................................................................\n#   do ->\n#     ### TAINT path only valid on modern Linux distros ###\n#     prepare()\n#     #.......................................................................................................\n#     GUY.temp.with_directory { tmpdir: '/dev/shm', }, ({ path: shm_dir_path }) ->\n#       shm_path = PATH.join shm_dir_path, 'main.txt'\n#       FS.writeFileSync shm_path, \"original content\"\n#       #.....................................................................................................\n#       GUY.temp.with_shadow_files { path: shm_path, all: true, }, ({ path: tmp_path, }) ->\n#         FS.writeFileSync tmp_path, \"some words\"\n#         extra_tmp_path = PATH.join ( PATH.dirname tmp_path ), 'extra.txt'\n#         FS.writeFileSync extra_tmp_path, \"some extra words\"\n#       #.....................................................................................................\n#       do ->\n#         result = FS.readFileSync shm_path, { encoding: 'utf-8', }\n#         T?.eq result, \"some words\"\n#       #.....................................................................................................\n#       do ->\n#         extra_shm_path = PATH.join ( PATH.dirname shm_path ), 'extra.txt'\n#         result = FS.readFileSync extra_shm_path, { encoding: 'utf-8', }\n#         T?.eq result, \"some extra words\"\n#       #.....................................................................................................\n#       return null\n#     #.......................................................................................................\n#     return null\n#   #.........................................................................................................\n#   return done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @GUY_temp_with_shadow_files()\n  # test @GUY_temp_with_shadow_files\n  # @GUY_temp_with_shadow_files_works_across_device_boundaries()\n  # test @GUY_temp_with_shadow_files_works_across_device_boundaries\n  # @GUY_temp_with_shadow_files_files_may_or_may_not_exist()\n  # test @GUY_temp_with_shadow_files_files_may_or_may_not_exist\n  # test @GUY_temp_context_handler_file\n  # @GUY_temp_context_handler_file()\n  # @GUY_temp_works_with_async_functions()\n  # test @GUY_temp_works_with_async_functions\n  # test @GUY_temp_with_shadow_file_works_across_device_boundaries\n  # @GUY_temp_with_shadow_file_can_pick_up_extra_files()\n  # test @GUY_temp_with_shadow_file_can_pick_up_extra_files\n  # @GUY_temp_with_shadow_file_can_bring_along_files()\n  # test @GUY_temp_with_shadow_file_can_bring_along_files\n  test @\n\n\n"
  ]
}