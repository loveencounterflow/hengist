{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/temp.tests.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,EAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,IAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,IAAI,CAAC,GAAG,CAAC,WAAT,CAAqB,gBAArB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,IAAI,CAAC,GAHjC,EAdA;;;EAmBA,IAAA,GAA4B,OAAA,CAAQ,wBAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR,EArB5B;;;EAuBA,CAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,yBAAR,CAAF,CAAqC,CAAC,SAA1C,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,OAFF,EAGE,QAHF,EAIE,MAJF,CAAA,GAI4B,KAJ5B,EAzBA;;;EAgCA,GAAA,GAGE,CAAA;;IAAA,aAAA,EAAe,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,CAAE,OAAO,CAAT,CAAA,KAAgB,QAAlB,CAAA,IAAiC,CAAE,CAAC,CAAC,MAAF,GAAW,CAAb;IAA1C,CAAf;;IAGA,YAAA,EAAc,QAAA,CAAE,CAAF,CAAA;AAChB,UAAA,KAAA,EAAA;MAAI,KAAoB,GAAG,CAAC,aAAJ,CAAkB,CAAlB,CAApB;AAAA,eAAO,MAAP;;AACA;QACE,IAAA,GAAO,EAAE,CAAC,QAAH,CAAY,CAAZ,EADT;OAEA,cAAA;QAAM;QACJ,IAAgB,KAAK,CAAC,IAAN,KAAc,QAA9B;AAAA,iBAAO,MAAP;;QACA,MAAM,MAFR;;AAGA,aAAO,IAAI,CAAC,MAAL,CAAA;IAPK,CAHd;;IAaA,iBAAA,EAAmB,QAAA,CAAE,CAAF,CAAA;AACrB,UAAA,KAAA,EAAA;MAAI,KAAoB,GAAG,CAAC,aAAJ,CAAkB,CAAlB,CAApB;AAAA,eAAO,MAAP;;AACA;QACE,IAAA,GAAO,EAAE,CAAC,QAAH,CAAY,CAAZ,EADT;OAEA,cAAA;QAAM;QACJ,IAAgB,KAAK,CAAC,IAAN,KAAc,QAA9B;AAAA,iBAAO,MAAP;;QACA,MAAM,MAFR;;AAGA,aAAO,IAAI,CAAC,WAAL,CAAA;IAPU,CAbnB;;IAuBA,SAAA,EAAW,QAAA,CAAE,CAAF,CAAA;AACb,UAAA,KAAA,EAAA;MAAI,KAAoB,GAAG,CAAC,aAAJ,CAAkB,CAAlB,CAApB;AAAA,eAAO,MAAP;;AACA;QACE,IAAA,GAAO,EAAE,CAAC,QAAH,CAAY,CAAZ,EADT;OAEA,cAAA;QAAM;QACJ,IAAgB,KAAK,CAAC,IAAN,KAAc,QAA9B;AAAA,iBAAO,MAAP;;QACA,MAAM,MAFR;;AAGA,aAAO;IAPE;EAvBX;;EAnCF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\n_GUY                      = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = _GUY.trm.get_loggers 'GUY/temp/tests'\n{ rpr\n  inspect\n  echo\n  log     }               = _GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nFS                        = require 'fs'\n# { freeze }                = require 'letsfreezethat'\nH                         = require './helpers'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype()\n{ isa\n  declare\n  type_of\n  validate\n  equals }                = types\n\n#===========================================================================================================\nisa =\n\n  #---------------------------------------------------------------------------------------------------------\n  nonempty_text: ( x ) -> ( ( typeof x ) is 'string' ) and ( x.length > 0 )\n\n  #---------------------------------------------------------------------------------------------------------\n  fs_file_path: ( x ) ->\n    return false unless isa.nonempty_text x\n    try\n      stat = FS.statSync x\n    catch error\n      return false if error.code is 'ENOENT'\n      throw error\n    return stat.isFile()\n\n  #---------------------------------------------------------------------------------------------------------\n  fs_directory_path: ( x ) ->\n    return false unless isa.nonempty_text x\n    try\n      stat = FS.statSync x\n    catch error\n      return false if error.code is 'ENOENT'\n      throw error\n    return stat.isDirectory()\n\n  #---------------------------------------------------------------------------------------------------------\n  fs_exists: ( x ) ->\n    return false unless isa.nonempty_text x\n    try\n      stat = FS.statSync x\n    catch error\n      return false if error.code is 'ENOENT'\n      throw error\n    return true\n\n# #-----------------------------------------------------------------------------------------------------------\n# @GUY_temp_context_handler_file = ( T, done ) ->\n#   GUY = require '../../../apps/guy'\n#   #.........................................................................................................\n#   do =>\n#     path = null\n#     info = GUY.temp.with_file ({ path: mypath, fd, }) ->\n#       path = mypath\n#       T?.ok isa.fs_file_path mypath\n#     T?.eq info, null\n#     T?.ok not isa.fs_file_path path\n#   #.........................................................................................................\n#   do =>\n#     path = null\n#     info = GUY.temp.with_file { keep: true, }, ({ path: mypath, fd, }) ->\n#       path = mypath\n#       T?.ok isa.fs_file_path mypath\n#     T?.eq info, null\n#     T?.ok isa.fs_file_path path\n#   #.........................................................................................................\n#   return done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @GUY_temp_context_handler_directory = ( T, done ) ->\n#   GUY = require '../../../apps/guy'\n#   #.........................................................................................................\n#   do =>\n#     path = null\n#     info = GUY.temp.with_directory ({ path: mypath, }) ->\n#       path = mypath\n#       debug '^345-1^', { path, }\n#       T?.ok isa.fs_directory_path mypath\n#     debug '^345-2^', info\n#     T?.eq info, null\n#     T?.ok not isa.fs_directory_path path\n#   #.........................................................................................................\n#   do =>\n#     path = null\n#     info = GUY.temp.with_directory { prefix: 'zzwhatever-', }, ({ path: mypath, }) ->\n#       path = mypath\n#       debug '^345-3^', { path, }\n#       T?.ok ( PATH.basename mypath ).startsWith 'zzwhatever-'\n#       T?.ok isa.fs_directory_path mypath\n#     debug '^345-4^', info\n#     T?.eq info, null\n#     T?.ok not isa.fs_directory_path path\n#   #.........................................................................................................\n#   do =>\n#     path = null\n#     info = GUY.temp.with_directory { keep: true, prefix: 'zzwhatever-', }, ({ path: mypath, }) ->\n#       path = mypath\n#       debug '^345-5^', { path, }\n#       T?.ok ( PATH.basename mypath ).startsWith 'zzwhatever-'\n#       T?.ok isa.fs_directory_path mypath\n#     debug '^345-6^', info\n#     T?.eq info, null\n#     T?.ok isa.fs_directory_path path\n#   #.........................................................................................................\n#   return done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @GUY_temp_tempfolder_removed_with_contents = ( T, done ) ->\n#   GUY = require '../../../apps/guy'\n#   #.........................................................................................................\n#   do =>\n#     path  = null\n#     fpath = null\n#     info  = GUY.temp.with_directory { prefix: 'zzwhatever-', }, ({ path: mypath, }) ->\n#       path = mypath\n#       debug '^345-3^', { path, }\n#       fpath = PATH.join path, 'myfile.txt'\n#       FS.writeFileSync fpath, \"helo\"\n#       isa.fs_file_path fpath\n#     debug '^345-4^', info\n#     T?.eq info, null\n#     T?.ok not isa.fs_file_path fpath\n#     T?.ok not isa.fs_directory_path path\n#   #.........................................................................................................\n#   return done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @GUY_temp_works_with_async_functions = ( T, done ) ->\n#   GUY       = require '../../../apps/guy'\n#   collector = []\n#   #.........................................................................................................\n#   async_fn  = ( x ) -> new Promise ( done ) ->\n#     debug '^43-1^', rpr x\n#     collector.push x\n#     await GUY.async.after 0.01, done\n#     return null\n#   #.........................................................................................................\n#   await async_fn '^43-2^'\n#   await do =>\n#     path = null\n#     info = await GUY.temp.with_file { prefix: 'yyy-', }, ({ path: mypath, fd, }) ->\n#       path = mypath\n#       await async_fn '^43-3^'\n#       T?.ok isa.fs_file_path mypath\n#     T?.eq info, null\n#     T?.ok not isa.fs_file_path path\n#   #.........................................................................................................\n#   await async_fn '^43-4^'\n#   await do =>\n#     path = null\n#     info = await GUY.temp.with_directory { prefix: 'yyy-', }, ({ path: mypath, }) ->\n#       path = mypath\n#       await async_fn '^43-5^'\n#       T?.ok isa.fs_directory_path mypath\n#     T?.eq info, null\n#     T?.ok not isa.fs_directory_path path\n#   #.........................................................................................................\n#   await async_fn '^43-6^'\n#   T?.eq collector, [ '^43-2^', '^43-3^', '^43-4^', '^43-5^', '^43-6^' ]\n#   debug '^43-7^', collector\n#   return done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @GUY_temp_create_directory = ( T, done ) ->\n#   GUY = require '../../../apps/guy'\n#   #.........................................................................................................\n#   do =>\n#     try\n#       { rm\n#         path } = GUY.temp.create_directory { prefix: 'zzwhatever-', }\n#       debug '^345-4^', { rm, path, }\n#       T?.ok /\\/zzwhatever-/.test path\n#       T?.ok isa.fs_directory_path path\n#     finally\n#       rm?()\n#     T?.ok not isa.fs_directory_path path\n#   #.........................................................................................................\n#   return done?()\n\n\n\n\n# ############################################################################################################\n# if require.main is module then do =>\n#   @GUY_temp_create_directory()\n#   test @GUY_temp_create_directory\n#   # test @\n\n\n"
  ]
}