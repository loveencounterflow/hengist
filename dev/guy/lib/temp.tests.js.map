{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/temp.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\n_GUY                      = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = _GUY.trm.get_loggers 'GUY/temp/tests'\n{ rpr\n  inspect\n  echo\n  log     }               = _GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nFS                        = require 'fs'\n# { freeze }                = require 'letsfreezethat'\nH                         = require './helpers'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype()\n{ isa\n  declare\n  type_of\n  validate\n  equals }                = types\n\n#===========================================================================================================\ndeclare.fs_file\n  isa: ( x ) ->\n    return false unless @isa.nonempty.text x\n    try\n      stat = FS.statSync x\n    catch error\n      return false if error.code is 'ENOENT'\n      throw error\n    return stat.isFile()\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.fs_directory\n  isa: ( x ) ->\n    return false unless @isa.nonempty.text x\n    try\n      stat = FS.statSync x\n    catch error\n      return false if error.code is 'ENOENT'\n      throw error\n    return stat.isDirectory()\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.fs_exists\n  isa: ( x ) ->\n    return false unless @isa.nonempty.text x\n    try\n      stat = FS.statSync x\n    catch error\n      return false if error.code is 'ENOENT'\n      throw error\n    return true\n\n#-----------------------------------------------------------------------------------------------------------\n@GUY_temp_context_handler_file = ( T, done ) ->\n  GUY = require '../../../apps/guy'\n  #.........................................................................................................\n  do =>\n    path = null\n    info = GUY.temp.with_file ({ path: mypath, fd, }) ->\n      path = mypath\n      T?.ok isa.fs_file mypath\n    T?.eq info, null\n    T?.ok not isa.fs_file path\n  #.........................................................................................................\n  do =>\n    path = null\n    info = GUY.temp.with_file { keep: true, }, ({ path: mypath, fd, }) ->\n      path = mypath\n      T?.ok isa.fs_file mypath\n    T?.eq info, null\n    T?.ok isa.fs_file path\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@GUY_temp_context_handler_directory = ( T, done ) ->\n  GUY = require '../../../apps/guy'\n  #.........................................................................................................\n  do =>\n    path = null\n    info = GUY.temp.with_directory ({ path: mypath, }) ->\n      path = mypath\n      debug '^345-1^', { path, }\n      T?.ok isa.fs_directory mypath\n    debug '^345-2^', info\n    T?.eq info, null\n    T?.ok not isa.fs_directory path\n  #.........................................................................................................\n  do =>\n    path = null\n    info = GUY.temp.with_directory { prefix: 'zzwhatever-', }, ({ path: mypath, }) ->\n      path = mypath\n      debug '^345-3^', { path, }\n      T?.ok ( PATH.basename mypath ).startsWith 'zzwhatever-'\n      T?.ok isa.fs_directory mypath\n    debug '^345-4^', info\n    T?.eq info, null\n    T?.ok not isa.fs_directory path\n  #.........................................................................................................\n  do =>\n    path = null\n    info = GUY.temp.with_directory { keep: true, prefix: 'zzwhatever-', }, ({ path: mypath, }) ->\n      path = mypath\n      debug '^345-5^', { path, }\n      T?.ok ( PATH.basename mypath ).startsWith 'zzwhatever-'\n      T?.ok isa.fs_directory mypath\n    debug '^345-6^', info\n    T?.eq info, null\n    T?.ok isa.fs_directory path\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@GUY_temp_tempfolder_removed_with_contents = ( T, done ) ->\n  GUY = require '../../../apps/guy'\n  #.........................................................................................................\n  do =>\n    path  = null\n    fpath = null\n    info  = GUY.temp.with_directory { prefix: 'zzwhatever-', }, ({ path: mypath, }) ->\n      path = mypath\n      debug '^345-3^', { path, }\n      fpath = PATH.join path, 'myfile.txt'\n      FS.writeFileSync fpath, \"helo\"\n      isa.fs_file fpath\n    debug '^345-4^', info\n    T?.eq info, null\n    T?.ok not isa.fs_file fpath\n    T?.ok not isa.fs_directory path\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@GUY_temp_works_with_async_functions = ( T, done ) ->\n  GUY       = require '../../../apps/guy'\n  collector = []\n  #.........................................................................................................\n  async_fn  = ( x ) -> new Promise ( done ) ->\n    debug '^43-1^', rpr x\n    collector.push x\n    await GUY.async.after 0.01, done\n    return null\n  #.........................................................................................................\n  await async_fn '^43-2^'\n  await do =>\n    path = null\n    info = await GUY.temp.with_file { prefix: 'yyy-', }, ({ path: mypath, fd, }) ->\n      path = mypath\n      await async_fn '^43-3^'\n      T?.ok isa.fs_file mypath\n    T?.eq info, null\n    T?.ok not isa.fs_file path\n  #.........................................................................................................\n  await async_fn '^43-4^'\n  await do =>\n    path = null\n    info = await GUY.temp.with_directory { prefix: 'yyy-', }, ({ path: mypath, }) ->\n      path = mypath\n      await async_fn '^43-5^'\n      T?.ok isa.fs_directory mypath\n    T?.eq info, null\n    T?.ok not isa.fs_directory path\n  #.........................................................................................................\n  await async_fn '^43-6^'\n  T?.eq collector, [ '^43-2^', '^43-3^', '^43-4^', '^43-5^', '^43-6^' ]\n  debug '^43-7^', collector\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@GUY_temp_create_directory = ( T, done ) ->\n  GUY = require '../../../apps/guy'\n  #.........................................................................................................\n  do =>\n    try\n      { rm\n        path } = GUY.temp.create_directory { prefix: 'zzwhatever-', }\n      debug '^345-4^', { rm, path, }\n      T?.ok /\\/zzwhatever-/.test path\n      T?.ok isa.fs_directory path\n    finally\n      rm?()\n    T?.ok not isa.fs_directory path\n  #.........................................................................................................\n  return done?()\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  @GUY_temp_create_directory()\n  test @GUY_temp_create_directory\n  # test @\n\n\n"
  ]
}