{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/basic.tests.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR,EAL5B;;;EAOA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAlB5B;;;EAoBA,IAAA,GAA4B,OAAA,CAAQ,wBAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,QAFF,EAGE,gBAHF,EAIE,MAJF,CAAA,GAI4B,KAAK,CAAC,MAAN,CAAA,CAJ5B,EAvBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAoJA,IAAC,CAAE,uBAAF,CAAD,GAA+B,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC/B,QAAA;IAAE,GAAA,GAAM,OAAA,CAAQ,CAAC,CAAC,QAAV;;MACN,CAAC,CAAE,EAAH,CAAQ,OAAA,CAAQ,GAAG,CAAC,OAAO,CAAC,OAApB,CAAR,EAAuC,UAAvC;;wCACA;EAH6B,EApJ/B;;;EA2JA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA;aAChC,IAAA,CAAK,IAAL,EAAQ;QAAE,OAAA,EAAS;MAAX,CAAR;IADgC,CAAA,IAAlC;;;EA3JA;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GUY/TESTS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of\n  equals }                = types.export()\n\n\n#===========================================================================================================\n# TESTS\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"demo\" ] = ( T, done ) ->\n#   { createRequire, }  = require 'module'\n#   guy_realpath        = require.resolve H.guy_path\n#   guy_realpath        = PATH.join guy_realpath, 'whatever' ### H.guy_path points to pkg folder, must be one element deeper ###\n#   debug '^7665^', { guy_realpath, }\n#   rq                  = createRequire guy_realpath\n#   guy                 = require H.guy_path\n#   urge '^83443^', H.guy_path\n#   help '^83443^', rq.resolve 'letsfreezethat'\n#   help '^83443^', rq.resolve 'intertype-legacy'\n#   # help '^83443^', rq.resolve 'deasync'\n#   # help '^83443^', rq.resolve 'frob'\n#   # help '^83443^', rq.resolve 'steampipes'\n#   debug '340^', guy\n#   debug '340^', guy.nowait\n#   debug '340^', guy\n#   debug '340^', guy.nowait\n#   done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"nowait\" ] = ( T, done ) ->\n#   # T?.halt_on_error()\n#   guy = require H.guy_path\n#   result = []\n#   result.push 'nw1'\n#   #.........................................................................................................\n#   frob_async = ( P... ) -> new Promise ( resolve ) =>\n#     T?.eq P, [ 1, 2, 3, ]\n#     result.push 'fa1'\n#     guy.async.after 0.25, -> warn '^455-1^', \"frob_async done\"; result.push 'fa2'; resolve 'fa3'\n#   #.........................................................................................................\n#   frob_sync = guy.nowait.for_awaitable frob_async\n#   # frob_sync = frob_async\n#   result.push frob_sync 1, 2, 3\n#   result.push 'nw2'\n#   info '^455-3^', \"call to frob_sync done\"\n#   debug '^455-x^', result\n#   T?.eq result, [ 'nw1', 'fa1', 'fa2', 'fa3', 'nw2' ]\n#   done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"await with async steampipes\" ] = ( T, done ) ->\n#   # T?.halt_on_error()\n#   guy         = require H.guy_path\n#   SP          = require 'steampipes'\n#   { $\n#     $async\n#     $show\n#     $drain }  = SP.export()\n#   trace       = []\n#   trace.push 'm1'\n#   #.........................................................................................................\n#   f_async = => new Promise ( resolve ) =>\n#     source    = [ 1 .. 3 ]\n#     pipeline  = []\n#     pipeline.push source\n#     pipeline.push $async ( d, send, done ) =>\n#       trace.push 'fa1'\n#       guy.async.after 0.25, =>\n#         trace.push 'fa2'\n#         send d ** 2\n#         done()\n#     pipeline.push $show()\n#     pipeline.push $drain ( collector ) ->\n#       debug '^4576^', collector\n#       resolve collector\n#     SP.pull pipeline...\n#   #.........................................................................................................\n#   trace.push 'm2'\n#   result = await f_async()\n#   trace.push 'm3'\n#   info '^8876^', trace\n#   T?.eq result, [ 1, 4, 9 ]\n#   T?.eq trace, [ 'm1', 'm2', 'fa1', 'fa2', 'fa1', 'fa2', 'fa1', 'fa2', 'm3' ]\n#   done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"_____ HANGS ________________ nowait with async steampipes\" ] = ( T, done ) ->\n#   # T?.halt_on_error()\n#   guy         = require H.guy_path\n#   SP          = require 'steampipes'\n#   { $\n#     $async\n#     $show\n#     $drain }  = SP.export()\n#   trace       = []\n#   trace.push 'm1'\n#   #.........................................................................................................\n#   f_async = => new Promise ( resolve ) =>\n#     source    = [ 1 .. 3 ]\n#     pipeline  = []\n#     pipeline.push source\n#     pipeline.push $async ( d, send, done ) =>\n#       trace.push 'fa1'\n#       guy.async.after 0.25, =>\n#         trace.push 'fa2'\n#         send d ** 2\n#         done()\n#     pipeline.push $show()\n#     pipeline.push $drain ( collector ) ->\n#       debug '^4576^', collector\n#       resolve collector\n#     SP.pull pipeline...\n#   #.........................................................................................................\n#   trace.push 'm2'\n#   result = ( guy.nowait.for_awaitable f_async )()\n#   trace.push 'm3'\n#   info '^8876^', trace\n#   T?.eq result, [ 1, 4, 9 ]\n#   T?.eq trace, [ 'm1', 'm2', 'fa1', 'fa2', 'fa1', 'fa2', 'fa1', 'fa2', 'm3' ]\n#   done?()\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"guy.process.on_exit()\" ] = ( T, done ) ->\n  guy = require H.guy_path\n  T?.eq ( type_of guy.process.on_exit ), 'function'\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @, { timeout: 5000, }\n  # test @[ \"guy.props.def(), .hide()\" ]\n  # test @[ \"guy.props.pick_with_fallback()\" ]\n  # test @[ \"guy.props.pluck_with_fallback()\" ]\n  # test @[ \"guy.props.nullify_undefined()\" ]\n  # @[ \"configurator\" ]()\n  # test @[ \"await with async steampipes\" ]\n  # test @[ \"nowait with async steampipes\" ]\n  # test @[ \"use-call\" ]\n  # @[ \"await with async steampipes\" ]()\n  # @[ \"demo\" ]()\n  # @[ \"nowait\" ]()\n\n\n\n"
  ]
}