{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/helpers.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;IAAA,oBAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,GAAA,GAA4B,OAAA,CAAQ,aAAR;;EAC5B,IAAC,CAAA,KAAD,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,gBAFF,EAGE,MAHF,CAAA,GAG4B,IAAC,CAAA,KAAK,CAAC,MAAP,CAAA,CAH5B;;EAIA,IAAA,GAA4B,OAAA,CAAQ,qCAAR;;EAC5B,CAAA,GAA4B;;EAEzB,CAAA,CAAA,CAAA,GAAA,EAAA;AACH,QAAA;IAAE,iBAA4B,OAAO,CAAC,MAAjC,2BAAH;MACE,CAAC,CAAC,iBAAF,GAA4B;MAC5B,CAAC,CAAC,QAAF,GAA4B;MAC5B,OAAA,GAA4B,iCAH9B;KAAA,MAAA;MAKE,CAAC,CAAC,iBAAF,GAA4B;MAC5B,CAAC,CAAC,QAAF,GAA4B;MAC5B,OAAA,GAA4B,mBAP9B;;IAQA,KAAA,CAAM,QAAN,EAAgB,GAAG,CAAC,OAAJ,CAAY,OAAZ,CAAhB;IACA,OAAO,CAAC,EAAR,CAAW,MAAX,EAAmB,QAAA,CAAA,CAAA;aACjB,KAAA,CAAM,QAAN,EAAgB,GAAG,CAAC,OAAJ,CAAY,OAAZ,CAAhB;IADiB,CAAnB;AAEA,WAAO;EAZN,CAAA;AA1BH",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GUY/TESTS/HELPERS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nFSP                       = require 'fs/promises'\n@types                    = new ( require 'intertype' ).Intertype\n{ isa\n  validate\n  validate_list_of\n  equals }                = @types.export()\nDATA                      = require '../../../lib/data-providers-nocache'\nH                         = @\n#-----------------------------------------------------------------------------------------------------------\ndo =>\n  if '--guy-use-installed' in process.argv\n    H.guy_use_installed       = true\n    H.guy_path                = 'guy'\n    message                   = \"using installed version of guy\"\n  else\n    H.guy_use_installed       = false\n    H.guy_path                = '../../../apps/guy'\n    message                   = \"using linked guy\"\n  debug '^3337^', CND.reverse message\n  process.on 'exit', ->\n    debug '^3337^', CND.reverse message\n  return null\n\n"
  ]
}