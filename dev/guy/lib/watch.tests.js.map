{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/watch.tests.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,EAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,IAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,IAAI,CAAC,GAAG,CAAC,WAAT,CAAqB,gBAArB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,IAAI,CAAC,GAHjC,EAdA;;;EAmBA,IAAA,GAA4B,OAAA,CAAQ,wBAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR,EArB5B;;;EAuBA,CAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,yBAAR,CAAF,CAAqC,CAAC,SAA1C,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,OAFF,EAGE,QAHF,EAIE,MAJF,CAAA,GAI4B,KAJ5B;;EAzBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\n_GUY                      = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = _GUY.trm.get_loggers 'GUY/temp/tests'\n{ rpr\n  inspect\n  echo\n  log     }               = _GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nFS                        = require 'fs'\n# { freeze }                = require 'letsfreezethat'\nH                         = require './helpers'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype()\n{ isa\n  declare\n  type_of\n  validate\n  equals }                = types\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# demo_GUY_reporting_watcher = ( T, done ) ->\n#   GUY       = require '../../../apps/guy'\n#   { after\n#     defer\n#     sleep } = GUY.async\n#   #.........................................................................................................\n#   f = => new Promise ( resolve, reject ) =>\n#     try\n#       { rm, path: folder_path } = GUY.temp.create_directory()\n#       # GUY.process.on_exit ->\n#       #   debug \"exit handler: removing #{folder_path}\"\n#       #   rm?()\n#       debug '^345-4^', { rm, folder_path, }\n#       new_path_1  = PATH.join folder_path, 'new_1.txt'\n#       new_path_2  = PATH.join folder_path, 'new_2.txt'\n#       debug '^888-1^'; FS.writeFileSync new_path_1, 'helo'\n#       debug '^888-2^'; FS.writeFileSync new_path_2, 'helo'\n#       # glob_path = PATH.join folder_path, '**/*'\n#       # glob_path = PATH.join folder_path, '*.txt'\n#       debug '^888-3^'; watcher = new GUY.watch.Reporting_watcher()\n#       debug '^888-4^'; watcher.add_path new_path_2\n#       debug '^888-5^'; watcher.add_path new_path_1\n#       debug '^888-9^'; await sleep 0.25\n#       debug '^888-7^'; FS.writeFileSync new_path_1, 'sfhsoifhas'\n#       debug '^888-8^'; FS.writeFileSync new_path_2, 'helo'\n#       debug '^888-9^'; await sleep 0.25\n#       debug '^888-10^'; FS.writeFileSync new_path_2, 'helo'\n#       after 5, =>\n#         resolve()\n#         # return null\n#     finally\n#       # null\n#       debug \"removing #{folder_path}\"\n#       rm?()\n#     return null\n#   #.........................................................................................................\n#   await f()\n#   return done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @GUY_watch_watcher = ( T, done ) ->\n#   GUY             = require '../../../apps/guy'\n#   { after\n#     defer\n#     sleep }       = GUY.async\n#   result          = []\n#   new_path_1      = null\n#   new_path_2      = null\n#   new_folder_path = null\n#   #.........................................................................................................\n#   class My_watcher extends GUY.watch.Watcher\n#     on_all: ( key, path ) ->\n#       whisper '^888-1^', key, path\n#       result.push [ key, path, ]\n#   #.........................................................................................................\n#   await do => new Promise ( resolve, reject ) =>\n#     { rm, path: folder_path } = GUY.temp.create_directory()\n#     GUY.process.on_exit ->\n#       if FS.existsSync folder_path\n#         debug \"exit handler: removing #{folder_path}\"\n#         rm?()\n#       else\n#         debug \"exit handler: (OK) already deleted: #{folder_path}\"\n#     #.......................................................................................................\n#     new_path_1        = PATH.join folder_path, 'new_1.txt'\n#     new_folder_path   = PATH.join folder_path, 'sub'\n#     new_path_2        = PATH.join folder_path, 'sub/new_2.txt'\n#     new_glob          = PATH.join folder_path, '**/*'\n#     #.......................................................................................................\n#     watcher = new My_watcher()\n#     watcher.add_path new_glob\n#     # await sleep 0.25\n#     FS.writeFileSync new_path_1, 'helo'\n#     FS.mkdirSync new_folder_path\n#     FS.writeFileSync new_path_2, 'helo'\n#     await sleep 0.25\n#     FS.writeFileSync new_path_1, 'sfhsoifhas'\n#     FS.writeFileSync new_path_2, 'helo'\n#     await sleep 0.25\n#     FS.writeFileSync new_path_2, 'helo'\n#     FS.rmSync new_path_2\n#     FS.rmdirSync new_folder_path\n#     after 0.25, =>\n#       debug \"stopping watcher\"\n#       await watcher.stop()\n#       debug \"removing #{folder_path}\"\n#       rm?()\n#       resolve()\n#       # return null\n#     return null\n#   #.........................................................................................................\n#   T?.eq result, [\n#     [ 'add',            new_path_1 ],\n#     [ 'add_folder',     new_folder_path ],\n#     [ 'add',            new_path_2 ],\n#     [ 'change',         new_path_1 ],\n#     [ 'change',         new_path_2 ],\n#     [ 'unlink_folder',  new_folder_path ],\n#     [ 'unlink',         new_path_2 ] ]\n#   #.........................................................................................................\n#   return done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @GUY_watcher_and_pipeline = ( T, done ) ->\n#   GUY             = require '../../../apps/guy'\n#   { Pipeline\n#     $         }   = require '../../../apps/moonriver'\n#   { after\n#     defer\n#     sleep }       = GUY.async\n#   result          = []\n#   new_path_1      = null\n#   new_path_2      = null\n#   new_folder_path = null\n#   #.........................................................................................................\n#   class My_watcher extends GUY.watch.Watcher\n#     constructor: ( pipeline ) ->\n#       super()\n#       @pipeline = pipeline\n#       return undefined\n#     on_all: ( key, path ) ->\n#       whisper '^858-1^', 'my_watcher', key, path\n#       @pipeline.send { key, path, }\n#       null for d from @pipeline.walk()\n#       return null\n#   #.........................................................................................................\n#   await do => new Promise ( resolve, reject ) =>\n#     { rm, path: folder_path } = GUY.temp.create_directory()\n#     GUY.process.on_exit ->\n#       if FS.existsSync folder_path\n#         debug '^858-2^', \"exit handler: removing #{folder_path}\"\n#         rm?()\n#       else\n#         debug '^858-3^', \"exit handler: (OK) already deleted: #{folder_path}\"\n#     #.......................................................................................................\n#     new_path_1        = PATH.join folder_path, 'new_1.txt'\n#     new_folder_path   = PATH.join folder_path, 'sub'\n#     new_path_2        = PATH.join folder_path, 'sub/new_2.txt'\n#     new_glob          = PATH.join folder_path, '**/*'\n#     #.......................................................................................................\n#     pipeline        = new Pipeline()\n#     pipeline.push ( d ) -> warn '^858-4^', 'pipeline', d\n#     pipeline.push ( d ) ->\n#       return null unless d.key in [ 'add', 'change', ]\n#       help '^858-4^', 'pipeline: changed:', d.path\n#     pipeline.push ( d ) ->\n#       result.push [ d.key, d.path, ]\n#     watcher         = new My_watcher pipeline\n#     watcher.add_path new_glob\n#     #.......................................................................................................\n#     # await sleep 0.25\n#     FS.writeFileSync new_path_1, 'helo'\n#     FS.mkdirSync new_folder_path\n#     FS.writeFileSync new_path_2, 'helo'\n#     await sleep 0.25\n#     FS.writeFileSync new_path_1, 'sfhsoifhas'\n#     FS.writeFileSync new_path_2, 'helo'\n#     await sleep 0.25\n#     FS.writeFileSync new_path_2, 'helo'\n#     FS.rmSync new_path_2\n#     FS.rmdirSync new_folder_path\n#     after 0.25, =>\n#       debug '^858-5^', \"stopping watcher\"\n#       await watcher.stop()\n#       debug '^858-6^', \"removing #{folder_path}\"\n#       rm?()\n#       resolve()\n#       # return null\n#     return null\n#   #.........................................................................................................\n#   T?.eq result, [\n#     [ 'add',            new_path_1 ],\n#     [ 'add_folder',     new_folder_path ],\n#     [ 'add',            new_path_2 ],\n#     [ 'change',         new_path_1 ],\n#     [ 'change',         new_path_2 ],\n#     [ 'unlink_folder',  new_folder_path ],\n#     [ 'unlink',         new_path_2 ] ]\n#   #.........................................................................................................\n#   return done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @GUY_watcher_accepts_cfg = ( T, done ) ->\n#   GUY             = require '../../../apps/guy'\n#   { Pipeline\n#     $         }   = require '../../../apps/moonriver'\n#   { after\n#     defer\n#     sleep }       = GUY.async\n#   extraneous      = []\n#   project_path    = PATH.resolve __dirname, '../../../apps/guy'\n#   #.........................................................................................................\n#   class My_watcher extends GUY.watch.Watcher\n#     #-------------------------------------------------------------------------------------------------------\n#     constructor: ->\n#       super { ignored: /(^|\\/)\\..|node_modules/, }\n#       return undefined\n#     #-------------------------------------------------------------------------------------------------------\n#     on_all: ( key, path ) ->\n#       short_path = PATH.relative project_path, path\n#       whisper '^858-1^', 'my_watcher', key, short_path\n#       if ( short_path.startsWith '.git' ) or ( short_path.startsWith 'node_modules' )\n#         extraneous.push short_path\n#       return null\n#   #.........................................................................................................\n#   await do => new Promise ( resolve, reject ) =>\n#     #.......................................................................................................\n#     watcher           = new My_watcher()\n#     watcher.add_path PATH.join project_path, '**/*.js'\n#     await after 3, ->\n#       await watcher.stop()\n#       T?.eq extraneous, []\n#       done?()\n#   #.........................................................................................................\n#   return null\n\n\n# ############################################################################################################\n# if require.main is module then do =>\n#   # await demo_GUY_reporting_watcher()\n#   # await @GUY_watcher_and_pipeline()\n#   await test @GUY_watcher_and_pipeline\n#   # await @GUY_watcher_accepts_cfg()\n#   # test @GUY_watcher_accepts_cfg\n#   # await @GUY_watch_watcher()\n#   # test @\n#   # test @\n#   # await @GUY_watch_demo()\n\n"
  ]
}