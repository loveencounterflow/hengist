{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/watch.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\n_GUY                      = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = _GUY.trm.get_loggers 'GUY/temp/tests'\n{ rpr\n  inspect\n  echo\n  log     }               = _GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nFS                        = require 'fs'\n# { freeze }                = require 'letsfreezethat'\nH                         = require './helpers'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype()\n{ isa\n  declare\n  type_of\n  validate\n  equals }                = types\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_GUY_reporting_watcher = ( T, done ) ->\n  GUY       = require '../../../apps/guy'\n  { after\n    defer\n    sleep } = GUY.async\n  #.........................................................................................................\n  f = => new Promise ( resolve, reject ) =>\n    try\n      { rm, path: folder_path } = GUY.temp.create_directory()\n      # GUY.process.on_exit ->\n      #   debug \"exit handler: removing #{folder_path}\"\n      #   rm?()\n      debug '^345-4^', { rm, folder_path, }\n      new_path_1  = PATH.join folder_path, 'new_1.txt'\n      new_path_2  = PATH.join folder_path, 'new_2.txt'\n      debug '^888-1^'; FS.writeFileSync new_path_1, 'helo'\n      debug '^888-2^'; FS.writeFileSync new_path_2, 'helo'\n      # glob_path = PATH.join folder_path, '**/*'\n      # glob_path = PATH.join folder_path, '*.txt'\n      debug '^888-3^'; watcher = new GUY.watch.Reporting_watcher()\n      debug '^888-4^'; watcher.add_path new_path_2\n      debug '^888-5^'; watcher.add_path new_path_1\n      debug '^888-9^'; await sleep 0.25\n      debug '^888-7^'; FS.writeFileSync new_path_1, 'sfhsoifhas'\n      debug '^888-8^'; FS.writeFileSync new_path_2, 'helo'\n      debug '^888-9^'; await sleep 0.25\n      debug '^888-10^'; FS.writeFileSync new_path_2, 'helo'\n      after 5, =>\n        resolve()\n        # return null\n    finally\n      # null\n      debug \"removing #{folder_path}\"\n      rm?()\n    return null\n  #.........................................................................................................\n  await f()\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@GUY_watch_watcher = ( T, done ) ->\n  GUY             = require '../../../apps/guy'\n  { after\n    defer\n    sleep }       = GUY.async\n  result          = []\n  new_path_1      = null\n  new_path_2      = null\n  new_folder_path = null\n  #.........................................................................................................\n  class My_watcher extends GUY.watch.Watcher\n    on_all: ( key, path ) ->\n      whisper '^888-1^', key, path\n      result.push [ key, path, ]\n  #.........................................................................................................\n  await do => new Promise ( resolve, reject ) =>\n    { rm, path: folder_path } = GUY.temp.create_directory()\n    GUY.process.on_exit ->\n      if FS.existsSync folder_path\n        debug \"exit handler: removing #{folder_path}\"\n        rm?()\n      else\n        debug \"exit handler: (OK) already deleted: #{folder_path}\"\n    #.......................................................................................................\n    new_path_1        = PATH.join folder_path, 'new_1.txt'\n    new_folder_path   = PATH.join folder_path, 'sub'\n    new_path_2        = PATH.join folder_path, 'sub/new_2.txt'\n    new_glob          = PATH.join folder_path, '**/*'\n    #.......................................................................................................\n    watcher = new My_watcher()\n    watcher.add_path new_glob\n    # await sleep 0.25\n    FS.writeFileSync new_path_1, 'helo'\n    FS.mkdirSync new_folder_path\n    FS.writeFileSync new_path_2, 'helo'\n    await sleep 0.25\n    FS.writeFileSync new_path_1, 'sfhsoifhas'\n    FS.writeFileSync new_path_2, 'helo'\n    await sleep 0.25\n    FS.writeFileSync new_path_2, 'helo'\n    FS.rmSync new_path_2\n    FS.rmdirSync new_folder_path\n    after 0.25, =>\n      debug \"stopping watcher\"\n      await watcher._watcher.close()\n      debug \"removing #{folder_path}\"\n      rm?()\n      resolve()\n      # return null\n    return null\n  #.........................................................................................................\n  T?.eq result, [\n    [ 'add',            new_path_1 ],\n    [ 'add_folder',     new_folder_path ],\n    [ 'add',            new_path_2 ],\n    [ 'change',         new_path_1 ],\n    [ 'change',         new_path_2 ],\n    [ 'unlink_folder',  new_folder_path ],\n    [ 'unlink',         new_path_2 ] ]\n  #.........................................................................................................\n  return done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # await demo_GUY_reporting_watcher()\n  await @GUY_watch_watcher()\n  test @\n  # test @\n  # await @GUY_watch_demo()\n\n"
  ]
}