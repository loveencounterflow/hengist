{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/str.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GUY/TESTS/FS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nFS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ freeze }                = require 'letsfreezethat'\n{ isa\n  type_of\n  validate\n  validate_list_of\n  equals }                = types.export()\n\n#-----------------------------------------------------------------------------------------------------------\n@guy_str_SQL_tag_function = ( T, done ) ->\n  # T?.halt_on_error()\n  GUY     = require H.guy_path\n  { SQL } = GUY.str\n  T?.eq SQL\"x\\n\\nx\", \"x\\n\\nx\"\n  T?.eq SQL\"foo #{1+2+3} bar\", \"foo 6 bar\"\n  if T?\n    ```\n    T.eq( SQL`foo ${1+2+3} bar`, \"foo 6 bar\" )\n    ```\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@guy_str_escape_for_regex = ( T, done ) ->\n  # T?.halt_on_error()\n  GUY     = require H.guy_path\n  T?.eq ( GUY.str.escape_for_regex ''                 ), ''\n  T?.eq ( GUY.str.escape_for_regex '.*+?^${}()|[]\\\\'  ), '\\\\.\\\\*\\\\+\\\\?\\\\^\\\\$\\\\{\\\\}\\\\(\\\\)\\\\|\\\\[\\\\]\\\\\\\\'\n  return done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @guy_str_escape_for_regex()\n  test @\n\n\n\n"
  ]
}