{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/str.tests.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR,EAL5B;;;EAOA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAlB5B;;;EAoBA,IAAA,GAA4B,OAAA,CAAQ,wBAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,MAAF,CAAA,GAA4B,OAAA,CAAQ,gBAAR,CAA5B;;EACA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,QAFF,EAGE,gBAHF,EAIE,MAJF,CAAA,GAI4B,KAAK,CAAC,MAAN,CAAA,CAJ5B,EA1BA;;;EAiCA,IAAC,CAAE,0BAAF,CAAD,GAAkC,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAClC,QAAA,GAAA,EAAA,GAAA;;IACE,GAAA,GAAU,OAAA,CAAQ,CAAC,CAAC,QAAV;IACV,CAAA,CAAE,GAAF,CAAA,GAAU,GAAG,CAAC,GAAd;;MACA,CAAC,CAAE,EAAH,CAAM,GAAG,CAAA,MAAA,CAAT,EAAmB,QAAnB;;;MACA,CAAC,CAAE,EAAH,CAAM,GAAG,CAAA,IAAA,CAAA,CAAO,CAAA,GAAE,CAAF,GAAI,CAAX,CAAA,IAAA,CAAT,EAA6B,WAA7B;;IACA,IAAG,SAAH;MACE;;KADF;;AAIA,wCAAO;EAVyB,EAjClC;;;EA8CA,IAAC,CAAE,8BAAF,CAAD,GAAsC,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACtC,QAAA,GAAA,EAAA,GAAA;;;;IAGQ,MAAN,MAAA,IAAA,CAAA;;MAGE,WAAa,CAAE,IAAI,CAAA,CAAN,CAAA,EAAA;;YAKb,CAAA,UAAA,CAAA;QAJE,IAAC,CAAA,CAAD,GAAK;AACL,eAAO;MAFI;;MAKb,GAAK,CAAE,KAAF,EAAA,GAAS,WAAT,CAAA;AACT,YAAA,CAAA,EAAA,UAAA,EAAA,CAAA,EAAA,GAAA,EAAA;QAAM,OAAA,CAAQ,OAAR,EAAiB,4BAAjB;QACA,KAAA,CAAM,OAAN,EAAe,KAAf;QACA,KAAA,CAAM,OAAN,EAAe,KAAK,CAAC,GAArB;QACA,KAAA,CAAM,OAAN,EAAe,WAAf;QACA,KAAA,CAAM,OAAN,EAAe,IAAC,CAAA,CAAhB;QACA,CAAA,GAAI,KAAK,CAAE,CAAF;QACT,KAAA,yDAAA;;UACE,CAAA,IAAK,UAAU,CAAC,QAAX,CAAA,CAAA,GAAwB,KAAK,CAAE,GAAA,GAAM,CAAR;QADpC;AAEA,eAAO;MATJ;;IARP,EAHF;;IAsBE,CAAA,CAAE,GAAF,CAAA,GAAU,IAAI,GAAJ,CAAA,CAAV;IACA,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,GAAG,CAAA,IAAA,CAAP,CAAd;IACA,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,GAAG,CAAA,OAAA,CAAA,CAAU,EAAV,CAAA,CAAP,CAAd;IACA,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,GAAG,CAAA,WAAA,CAAP,CAAd;IACA,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,GAAG,CAAA,mBAAA,CAAP,CAAd;AACA,wCAAO;EA5B6B,EA9CtC;;;EA+EA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA;aAChC,IAAA,CAAK,IAAL,EAAQ;QAAE,OAAA,EAAS;MAAX,CAAR;IADgC,CAAA,IAAlC;;;EA/EA;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GUY/TESTS/FS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nFS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ freeze }                = require 'letsfreezethat'\n{ isa\n  type_of\n  validate\n  validate_list_of\n  equals }                = types.export()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"guy.str.SQL tag function\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  guy     = require H.guy_path\n  { SQL } = guy.str\n  T?.eq SQL\"x\\n\\nx\", \"x\\n\\nx\"\n  T?.eq SQL\"foo #{1+2+3} bar\", \"foo 6 bar\"\n  if T?\n    ```\n    T.eq( SQL`foo ${1+2+3} bar`, \"foo 6 bar\" )\n    ```\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"____guy.str.SQL tag function\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  # guy     = require H.guy_path\n  #=========================================================================================================\n  class Sql\n\n    #-------------------------------------------------------------------------------------------------------\n    constructor: ( q = {} ) ->\n      @q = q\n      return undefined\n\n    #-------------------------------------------------------------------------------------------------------\n    SQL: ( parts, expressions... ) =>\n      whisper '^344^', '--------------------------'\n      debug '^344^', parts\n      debug '^344^', parts.raw\n      debug '^344^', expressions\n      debug '^344^', @q\n      R = parts[ 0 ]\n      for expression, idx in expressions\n        R += expression.toString() + parts[ idx + 1 ]\n      return R\n  #.........................................................................................................\n  { SQL } = new Sql()\n  urge '^344^', rpr SQL\"helo\"\n  urge '^344^', rpr SQL\"helo \\n#{42}\"\n  urge '^344^', rpr SQL\"helo #x{42}\"\n  urge '^344^', rpr SQL\"helo \\i{42}, \\L{xy}\"\n  return done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @, { timeout: 5000, }\n  # @[ \"guy.str.SQL tag function\" ]()\n\n\n\n"
  ]
}