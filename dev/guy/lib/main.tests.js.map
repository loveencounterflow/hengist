{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GUY/TESTS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\nH                         = require './helpers'\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo\" ] = ( T, done ) ->\n  { createRequire, }  = require 'module'\n  guy_realpath        = require.resolve H.guy_path\n  guy_realpath        = PATH.join guy_realpath, 'whatever' ### H.guy_path points to pkg folder, must be one element deeper ###\n  debug '^7665^', { guy_realpath, }\n  rq                  = createRequire guy_realpath\n  guy                 = require H.guy_path\n  urge '^83443^', H.guy_path\n  help '^83443^', rq.resolve 'cnd'\n  help '^83443^', rq.resolve 'intertype'\n  help '^83443^', rq.resolve 'deasync'\n  # help '^83443^', rq.resolve 'frob'\n  # help '^83443^', rq.resolve 'steampipes'\n  debug '340^', guy\n  debug '340^', guy.nowait\n  debug '340^', guy\n  debug '340^', guy.nowait\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"nowait\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  guy = require H.guy_path\n  result = []\n  result.push 'nw1'\n  #.........................................................................................................\n  frob_async = ( P... ) -> new Promise ( resolve ) =>\n    T?.eq P, [ 1, 2, 3, ]\n    result.push 'fa1'\n    guy.async.after 0.25, -> warn '^455-1^', \"frob_async done\"; result.push 'fa2'; resolve 'fa3'\n  #.........................................................................................................\n  frob_sync = guy.nowait.for_awaitable frob_async\n  # frob_sync = frob_async\n  result.push frob_sync 1, 2, 3\n  result.push 'nw2'\n  info '^455-3^', \"call to frob_sync done\"\n  debug '^455-x^', result\n  T?.eq result, [ 'nw1', 'fa1', 'fa2', 'fa3', 'nw2' ]\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"await with async steampipes\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  guy         = require H.guy_path\n  SP          = require 'steampipes'\n  { $\n    $async\n    $show\n    $drain }  = SP.export()\n  trace       = []\n  trace.push 'm1'\n  #.........................................................................................................\n  f_async = => new Promise ( resolve ) =>\n    source    = [ 1 .. 3 ]\n    pipeline  = []\n    pipeline.push source\n    pipeline.push $async ( d, send, done ) =>\n      trace.push 'fa1'\n      guy.async.after 0.25, =>\n        trace.push 'fa2'\n        send d ** 2\n        done()\n    pipeline.push $show()\n    pipeline.push $drain ( collector ) ->\n      debug '^4576^', collector\n      resolve collector\n    SP.pull pipeline...\n  #.........................................................................................................\n  trace.push 'm2'\n  result = await f_async()\n  trace.push 'm3'\n  info '^8876^', trace\n  T?.eq result, [ 1, 4, 9 ]\n  T?.eq trace, [ 'm1', 'm2', 'fa1', 'fa2', 'fa1', 'fa2', 'fa1', 'fa2', 'm3' ]\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"nowait with async steampipes\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  guy         = require H.guy_path\n  SP          = require 'steampipes'\n  { $\n    $async\n    $show\n    $drain }  = SP.export()\n  trace       = []\n  trace.push 'm1'\n  #.........................................................................................................\n  f_async = => new Promise ( resolve ) =>\n    source    = [ 1 .. 3 ]\n    pipeline  = []\n    pipeline.push source\n    pipeline.push $async ( d, send, done ) =>\n      trace.push 'fa1'\n      guy.async.after 0.25, =>\n        trace.push 'fa2'\n        send d ** 2\n        done()\n    pipeline.push $show()\n    pipeline.push $drain ( collector ) ->\n      debug '^4576^', collector\n      resolve collector\n    SP.pull pipeline...\n  #.........................................................................................................\n  trace.push 'm2'\n  result = ( guy.nowait.for_awaitable f_async )()\n  trace.push 'm3'\n  info '^8876^', trace\n  T?.eq result, [ 1, 4, 9 ]\n  T?.eq trace, [ 'm1', 'm2', 'fa1', 'fa2', 'fa1', 'fa2', 'fa1', 'fa2', 'm3' ]\n  done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @, { timeout: 5000, }\n  # test @[ \"await with async steampipes\" ]\n  test @[ \"nowait with async steampipes\" ]\n  # @[ \"await with async steampipes\" ]()\n  # @[ \"demo\" ]()\n  # @[ \"nowait\" ]()\n\n\n\n"
  ]
}