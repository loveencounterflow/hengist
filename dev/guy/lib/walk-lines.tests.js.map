{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/walk-lines.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GUY/TESTS/WALK-LINES'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nFS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ freeze }                = require 'letsfreezethat'\n{ isa\n  type_of\n  validate\n  validate_list_of\n  equals }                = types.export()\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@GUY_fs_walk_lines_yields_from_empty_file = ( T, done ) ->\n  GUY     = require H.guy_path\n  probes_and_matchers = [\n    [ '../../../assets/a-few-words.txt',                            [ \"1:Ångström's\", \"2:éclair\", \"3:éclair's\", \"4:éclairs\", \"5:éclat\", \"6:éclat's\", \"7:élan\", \"8:élan's\", \"9:émigré\", \"10:émigré's\", ], ]\n    [ '../../../assets/datamill/empty-file.txt',                    [ '1:',                                                                                                                           ], ]\n    [ '../../../assets/datamill/file-with-single-nl.txt',           [ '1:', '2:',                                                                                                                     ], ]\n    [ '../../../assets/datamill/file-with-3-lines-no-eofnl.txt',    [ '1:1', '2:2', '3:3',                                                                                                            ], ]\n    [ '../../../assets/datamill/file-with-3-lines-with-eofnl.txt',  [ '1:1', '2:2', '3:3', '4:',                                                                                                      ], ]\n    [ '../../../assets/datamill/windows-crlf.txt',                  [ '1:this', '2:file', '3:written', '4:on', '5:MS Notepad'                                                                         ], ]\n    [ '../../../assets/datamill/mixed-usage.txt',                   [ '1:all', '2:bases', '3:', '4:are belong', '5:to us', '6:' ], ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, ] in probes_and_matchers\n    # for chunk_size in [ 1 .. 200 ] by +10\n    for chunk_size in [ 20 ]\n      result  = []\n      # whisper '^45-1^', '----------------------------------'\n      path  = PATH.resolve PATH.join __dirname, probe\n      lnr   = 0\n      for line from GUY.fs.walk_lines path, { chunk_size, }\n        lnr++\n        result.push \"#{lnr}:#{line}\"\n      urge '^35-1^', result\n      help '^35-2^', matcher\n      T?.eq result, matcher\n  #.........................................................................................................\n  done?()\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @GUY_fs_walk_lines_with_custom_newline = ( T, done ) ->\n#   GUY     = require H.guy_path\n#   GUY.temp.with_file ({ path, }) ->\n#     FS.writeFileSync path, \"foo𠀀𠀐bar𠀀𠀐baz𠀀𠀐\"\n#     #.......................................................................................................\n#     # for chunk_size in [ 1 .. 5 ] by +1\n#     for chunk_size in [ 1 .. 1 ] by +1\n#       result  = []\n#       lnr     = 0\n#       for line from GUY.fs.walk_lines path, { chunk_size, newline: '𠀀𠀐', }\n#         lnr++\n#         debug '^4323^', \"##{lnr}:#{line}\"\n#         result.push \"##{lnr}:#{line}\"\n#       T?.eq result, [ '#1:foo', '#2:bar', '#3:baz', '#4:', ]\n#   #.........................................................................................................\n#   done?()\n#   return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  @GUY_fs_walk_lines_yields_from_empty_file()\n  # test @GUY_fs_walk_lines_yields_from_empty_file\n\n\n"
  ]
}