{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/src.tests.coffee"
  ],
  "names": [],
  "mappings": "AAqRoD;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n# 'use strict'\n\n\n# ############################################################################################################\n# CND                       = require 'cnd'\n# rpr                       = CND.rpr\n# badge                     = 'GUY/TESTS/SRC'\n# log                       = CND.get_logger 'plain',     badge\n# info                      = CND.get_logger 'info',      badge\n# whisper                   = CND.get_logger 'whisper',   badge\n# alert                     = CND.get_logger 'alert',     badge\n# debug                     = CND.get_logger 'debug',     badge\n# warn                      = CND.get_logger 'warn',      badge\n# help                      = CND.get_logger 'help',      badge\n# urge                      = CND.get_logger 'urge',      badge\n# echo                      = CND.echo.bind CND\n# #...........................................................................................................\n# test                      = require '../../../apps/guy-test'\n# # PATH                      = require 'path'\n# # FS                        = require 'fs'\n# # { freeze }                = require 'letsfreezethat'\n# H                         = require './helpers'\n# types                     = new ( require 'intertype' ).Intertype\n# { isa\n#   type_of\n#   validate\n#   validate_list_of\n#   equals }                = types.export()\n\n# #-----------------------------------------------------------------------------------------------------------\n# convert_to_plain_objects = ( ast ) ->\n#   if types.isa.object ast\n#     R = { ast..., }\n#     R[ key ]  = convert_to_plain_objects value for key, value of R\n#     return R\n#   if types.isa.list ast\n#     R         = [ ast..., ]\n#     R[ idx ]  = convert_to_plain_objects value for value, idx in R\n#     return R\n#   return ast\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"GUY.src.parse()\" ] = ( T, done ) ->\n#   # T?.halt_on_error()\n#   GUY     = require H.guy_path\n#   do =>\n#     result = convert_to_plain_objects GUY.src.parse text: \"42\"\n#     debug '^975-1^', result\n#     T?.eq result, { type: 'Program', start: 0, end: 2, body: [ { type: 'ExpressionStatement', start: 0, end: 2, expression: { type: 'Literal', start: 0, end: 2, value: 42, raw: '42' } } ], sourceType: 'script' }\n#   do =>\n#     result = convert_to_plain_objects GUY.src.parse text: \"var x = 'helo world';\"\n#     debug '^975-2^', result\n#     T?.eq result, { type: 'Program', start: 0, end: 21, body: [ { type: 'VariableDeclaration', start: 0, end: 21, kind: 'var', declarations: [ { type: 'VariableDeclarator', start: 4, end: 20, id: { type: 'Identifier', start: 4, end: 5, name: 'x' }, init: { type: 'Literal', start: 8, end: 20, value: 'helo world', raw: \"'helo world'\" } } ] } ], sourceType: 'script' }\n#   do =>\n#     f       = ( x ) -> 42\n#     debug '^975-3^', f.toString()\n#     result  = convert_to_plain_objects GUY.src.parse { function: f, use: 'loose', }\n#     debug '^975-3^', result\n#     T?.eq result, { type: 'Program', start: 0, end: 26, body: [ { type: 'FunctionDeclaration', start: 0, end: 26, id: { type: 'Identifier', start: 8, end: 8, name: '✖' }, params: [ { type: 'Identifier', start: 9, end: 10, name: 'x' } ], generator: false, expression: false, async: false, body: { type: 'BlockStatement', start: 12, end: 26, body: [ { type: 'ReturnStatement', start: 14, end: 24, argument: { type: 'Literal', start: 21, end: 23, value: 42, raw: '42' } } ] } } ], sourceType: 'script' }\n#   return done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"GUY.src.parse() accepts `fallback` argument, otherwise errors where appropriate\" ] = ( T, done ) ->\n#   # T?.halt_on_error()\n#   GUY     = require H.guy_path\n#   probes_and_matchers = [\n#     [ { text: \"let x = 1 + 1;\", }, { type: 'Program', start: 0, end: 14, body: [ { type: 'VariableDeclaration', start: 0, end: 14, kind: 'let', declarations: [ { type: 'VariableDeclarator', start: 4, end: 13, id: { type: 'Identifier', start: 4, end: 5, name: 'x' }, init: { type: 'BinaryExpression', start: 8, end: 13, left: { type: 'Literal', start: 8, end: 9, value: 1, raw: '1' }, operator: '+', right: { type: 'Literal', start: 12, end: 13, value: 1, raw: '1' } } } ] } ], sourceType: 'script' }, ]\n#     [ { text: \"let x = 1 ^^^^^ 1;\", use: 'strict' }, null, 'Unexpected token', ]\n#     [ { text: \"let x = 1 ^^^^^ 1;\", use: 'strict,loose' }, { type: 'Program', start: 0, end: 18, body: [ { type: 'VariableDeclaration', start: 0, end: 18, kind: 'let', declarations: [ { type: 'VariableDeclarator', start: 4, end: 17, id: { type: 'Identifier', start: 4, end: 5, name: 'x' }, init: { type: 'BinaryExpression', start: 8, end: 17, left: { type: 'BinaryExpression', start: 8, end: 14, left: { type: 'BinaryExpression', start: 8, end: 13, left: { type: 'BinaryExpression', start: 8, end: 12, left: { type: 'BinaryExpression', start: 8, end: 11, left: { type: 'Literal', start: 8, end: 9, value: 1, raw: '1' }, operator: '^', right: { type: 'Identifier', start: 11, end: 11, name: '✖' } }, operator: '^', right: { type: 'Identifier', start: 12, end: 12, name: '✖' } }, operator: '^', right: { type: 'Identifier', start: 13, end: 13, name: '✖' } }, operator: '^', right: { type: 'Identifier', start: 14, end: 14, name: '✖' } }, operator: '^', right: { type: 'Literal', start: 16, end: 17, value: 1, raw: '1' } } } ] } ], sourceType: 'script' }, ]\n#     [ { text: \"let x = 1 ^^^^^ 1;\", use: 'loose' }, { type: 'Program', start: 0, end: 18, body: [ { type: 'VariableDeclaration', start: 0, end: 18, kind: 'let', declarations: [ { type: 'VariableDeclarator', start: 4, end: 17, id: { type: 'Identifier', start: 4, end: 5, name: 'x' }, init: { type: 'BinaryExpression', start: 8, end: 17, left: { type: 'BinaryExpression', start: 8, end: 14, left: { type: 'BinaryExpression', start: 8, end: 13, left: { type: 'BinaryExpression', start: 8, end: 12, left: { type: 'BinaryExpression', start: 8, end: 11, left: { type: 'Literal', start: 8, end: 9, value: 1, raw: '1' }, operator: '^', right: { type: 'Identifier', start: 11, end: 11, name: '✖' } }, operator: '^', right: { type: 'Identifier', start: 12, end: 12, name: '✖' } }, operator: '^', right: { type: 'Identifier', start: 13, end: 13, name: '✖' } }, operator: '^', right: { type: 'Identifier', start: 14, end: 14, name: '✖' } }, operator: '^', right: { type: 'Literal', start: 16, end: 17, value: 1, raw: '1' } } } ] } ], sourceType: 'script' }, ]\n#     [ { text: \"let x = 1 ^^^^^ 1;\", use: 'strict', fallback: null, }, null, ]\n#     ]\n#   #.........................................................................................................\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n#       result  = GUY.src.parse probe\n#       # debug '^34234^', GUY.src._generate result\n#       result  = convert_to_plain_objects result\n#       resolve result\n#   #.........................................................................................................\n#   return done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"GUY.src.slug_node_from_simple_function()\" ] = ( T, done ) ->\n#   # T?.halt_on_error()\n#   GUY     = require H.guy_path\n#   f3      =  ( x ) ->\n#     return true if x > 0\n#     return false if x < 0\n#     return null\n#   probes_and_matchers = [\n#     [ { function: ( -> ), },                                                                    { type: 'BlockStatement', start: 11, end: 13, body: [] }, ]\n#     [ { function: ( ( x ) -> 42 ), },                                                           { type: 'ReturnStatement', start: 14, end: 24, argument: { type: 'Literal', start: 21, end: 23, value: 42, raw: '42' } }, ]\n#     [ { function: ( ( x ) -> ( not x? ) or ( @isa.object x ) or ( @isa.nonempty.text x ) ), },  { type: 'ReturnStatement', start: 14, end: 88, argument: { type: 'LogicalExpression', start: 21, end: 87, left: { type: 'LogicalExpression', start: 21, end: 56, left: { type: 'BinaryExpression', start: 22, end: 31, left: { type: 'Identifier', start: 22, end: 23, name: 'x' }, operator: '==', right: { type: 'Literal', start: 27, end: 31, value: null, raw: 'null' } }, operator: '||', right: { type: 'CallExpression', start: 37, end: 55, callee: { type: 'MemberExpression', start: 37, end: 52, object: { type: 'MemberExpression', start: 37, end: 45, object: { type: 'ThisExpression', start: 37, end: 41 }, property: { type: 'Identifier', start: 42, end: 45, name: 'isa' }, computed: false, optional: false }, property: { type: 'Identifier', start: 46, end: 52, name: 'object' }, computed: false, optional: false }, arguments: [ { type: 'Identifier', start: 53, end: 54, name: 'x' } ], optional: false } }, operator: '||', right: { type: 'CallExpression', start: 61, end: 86, callee: { type: 'MemberExpression', start: 61, end: 83, object: { type: 'MemberExpression', start: 61, end: 78, object: { type: 'MemberExpression', start: 61, end: 69, object: { type: 'ThisExpression', start: 61, end: 65 }, property: { type: 'Identifier', start: 66, end: 69, name: 'isa' }, computed: false, optional: false }, property: { type: 'Identifier', start: 70, end: 78, name: 'nonempty' }, computed: false, optional: false }, property: { type: 'Identifier', start: 79, end: 83, name: 'text' }, computed: false, optional: false }, arguments: [ { type: 'Identifier', start: 84, end: 85, name: 'x' } ], optional: false } } }, ]\n#     [ { function: ( `function ( x ) { 42; }` ), },                                              { type: 'BlockStatement', start: 15, end: 22, body: [ { type: 'ExpressionStatement', start: 17, end: 20, expression: { type: 'Literal', start: 17, end: 19, value: 42, raw: '42' } } ] }, ]\n#     [ { function: ( `function ( x ) { return 42; }` ), },                                       { type: 'ReturnStatement', start: 17, end: 27, argument: { type: 'Literal', start: 24, end: 26, value: 42, raw: '42' } }, ]\n#     [ { function: ( ( x ) -> if x? then true else false ), },                                   { type: 'BlockStatement', start: 12, end: 70, body: [ { type: 'IfStatement', start: 14, end: 68, test: { type: 'BinaryExpression', start: 18, end: 27, left: { type: 'Identifier', start: 18, end: 19, name: 'x' }, operator: '!=', right: { type: 'Literal', start: 23, end: 27, value: null, raw: 'null' } }, consequent: { type: 'BlockStatement', start: 29, end: 45, body: [ { type: 'ReturnStatement', start: 31, end: 43, argument: { type: 'Literal', start: 38, end: 42, value: true, raw: 'true' } } ] }, alternate: { type: 'BlockStatement', start: 51, end: 68, body: [ { type: 'ReturnStatement', start: 53, end: 66, argument: { type: 'Literal', start: 60, end: 65, value: false, raw: 'false' } } ] } } ] }, ]\n#     [ { function: ( ( x ) -> ( not x? ) or ( @isa.object x ) or ( @isa.nonempty.text x ) ), },  { type: 'ReturnStatement', start: 14, end: 88, argument: { type: 'LogicalExpression', start: 21, end: 87, left: { type: 'LogicalExpression', start: 21, end: 56, left: { type: 'BinaryExpression', start: 22, end: 31, left: { type: 'Identifier', start: 22, end: 23, name: 'x' }, operator: '==', right: { type: 'Literal', start: 27, end: 31, value: null, raw: 'null' } }, operator: '||', right: { type: 'CallExpression', start: 37, end: 55, callee: { type: 'MemberExpression', start: 37, end: 52, object: { type: 'MemberExpression', start: 37, end: 45, object: { type: 'ThisExpression', start: 37, end: 41 }, property: { type: 'Identifier', start: 42, end: 45, name: 'isa' }, computed: false, optional: false }, property: { type: 'Identifier', start: 46, end: 52, name: 'object' }, computed: false, optional: false }, arguments: [ { type: 'Identifier', start: 53, end: 54, name: 'x' } ], optional: false } }, operator: '||', right: { type: 'CallExpression', start: 61, end: 86, callee: { type: 'MemberExpression', start: 61, end: 83, object: { type: 'MemberExpression', start: 61, end: 78, object: { type: 'MemberExpression', start: 61, end: 69, object: { type: 'ThisExpression', start: 61, end: 65 }, property: { type: 'Identifier', start: 66, end: 69, name: 'isa' }, computed: false, optional: false }, property: { type: 'Identifier', start: 70, end: 78, name: 'nonempty' }, computed: false, optional: false }, property: { type: 'Identifier', start: 79, end: 83, name: 'text' }, computed: false, optional: false }, arguments: [ { type: 'Identifier', start: 84, end: 85, name: 'x' } ], optional: false } } }, ]\n#     [ { function: f3, },                                                                        { type: 'BlockStatement', start: 12, end: 85, body: [ { type: 'IfStatement', start: 14, end: 41, test: { type: 'BinaryExpression', start: 18, end: 23, left: { type: 'Identifier', start: 18, end: 19, name: 'x' }, operator: '>', right: { type: 'Literal', start: 22, end: 23, value: 0, raw: '0' } }, consequent: { type: 'BlockStatement', start: 25, end: 41, body: [ { type: 'ReturnStatement', start: 27, end: 39, argument: { type: 'Literal', start: 34, end: 38, value: true, raw: 'true' } } ] }, alternate: null }, { type: 'IfStatement', start: 42, end: 70, test: { type: 'BinaryExpression', start: 46, end: 51, left: { type: 'Identifier', start: 46, end: 47, name: 'x' }, operator: '<', right: { type: 'Literal', start: 50, end: 51, value: 0, raw: '0' } }, consequent: { type: 'BlockStatement', start: 53, end: 70, body: [ { type: 'ReturnStatement', start: 55, end: 68, argument: { type: 'Literal', start: 62, end: 67, value: false, raw: 'false' } } ] }, alternate: null }, { type: 'ReturnStatement', start: 71, end: 83, argument: { type: 'Literal', start: 78, end: 82, value: null, raw: 'null' } } ] }, ]\n#     ]\n#   #.........................................................................................................\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     # result  = GUY.src.slug_node_from_simple_function probe\n#     # result  = convert_to_plain_objects result\n#     # urge '^33424^', result\n#     await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n#       result  = GUY.src.slug_node_from_simple_function probe\n#       result  = convert_to_plain_objects result\n#       urge '^33424^', result\n#       resolve result\n#   #.........................................................................................................\n#   return done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"GUY.src.slug_from_simple_function()\" ] = ( T, done ) ->\n#   # T?.halt_on_error()\n#   GUY     = require H.guy_path\n#   f3      =  ( x ) ->\n#     return true if x > 0\n#     return false if x < 0\n#     return null\n#   probes_and_matchers = [\n#     [ { function: ( -> ), },                                                                    '', ]\n#     [ { function: ( ( x ) -> x %% 3 is 0 ), },                                                  'modulo(x, 3) === 0', ]\n#     [ { function: ( ( x ) -> 42 ), },                                                           '42', ]\n#     [ { function: ( ( x ) -> ( not x? ) or ( @isa.object x ) or ( @isa.nonempty.text x ) ), },  'x == null || this.isa.object(x) || this.isa.nonempty.text(x)', ]\n#     [ { function: ( `function ( x ) { 42; }` ), },                                              '42;', ]\n#     [ { function: ( `function ( x ) { return 42; }` ), },                                       '42', ]\n#     [ { function: ( ( x ) -> if x? then true else false ), },                                   'if (x != null) { return true; } else { return false; }', ]\n#     [ { function: ( ( x ) -> ( not x? ) or ( @isa.object x ) or ( @isa.nonempty.text x ) ), },  'x == null || this.isa.object(x) || this.isa.nonempty.text(x)', ]\n#     [ { function: f3, },                                                                        'if (x > 0) { return true; } if (x < 0) { return false; } return null;', ]\n#     [ { text: 'let x = 42;' }, 'let x = 42;', null ]\n#     ]\n#   #.........................................................................................................\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n#       result  = GUY.src.slug_from_simple_function probe\n#       # urge '^33424^', rpr result\n#       resolve result\n#   #.........................................................................................................\n#   return done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"GUY.src.slug_from_simple_function() for bound functions\" ] = ( T, done ) ->\n#   # T?.halt_on_error()\n#   GUY     = require H.guy_path\n#   f3      = ( x ) -> 42\n#   f4      = f3.bind null\n#   T?.throws /unable to parse native code/, -> GUY.src.slug_from_simple_function { function: f4, }\n#   result  = GUY.src.slug_from_simple_function { function: f4, fallback: null, }\n#   T?.eq result, null\n#   # urge '^33424^', rpr result\n#   #.........................................................................................................\n#   return done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# demo_return_clauses = ->\n#   GUY       = require H.guy_path\n#   functions = [\n#     ( x ) -> 42\n#     ( x ) -> g 42\n#     ( x ) -> if x > 0 then g 42 else g 108\n#     ]\n#   for f in functions\n#     ast = GUY.src.get_first_return_clause_node f\n#     info convert_to_plain_objects ast\n#     urge GUY.src.ASTRING.generate ast\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# demo_acorn_walk = ->\n#   ### Count return statements; if more than one, return first BlockStatement, otherwise `argument` property\n#   of first and only ReturnStatement ###\n#   GUY     = require H.guy_path\n#   acorn   = require 'acorn'\n#   walk    = require 'acorn-walk'\n#   # ast     = acorn.parse \"let x = 10;\", { ecmaVersion: '2022', }\n#   # ast     = GUY.src.parse function: ( x ) -> if x? then true else false\n#   ast     = GUY.src.parse function: ( x ) -> ( not x? ) or ( @isa.object x ) or ( @isa.nonempty.text x )\n#   # debug '^24324^', ast\n#   walk.simple ast,\n#     Literal: ( node ) ->\n#       source = GUY.src.ASTRING.generate node\n#       info \"Found a literal: #{source}\"\n#     ReturnStatement: ( node ) ->\n#       source = GUY.src.ASTRING.generate node\n#       urge \"Found a return statement: #{source}\"\n#     BlockStatement: ( node ) ->\n#       # debug node\n#       source = GUY.src.ASTRING.generate node\n#       source = source.trim().replace /\\s*\\n\\s*/g, ' '\n#       info \"Found a block statement: #{source}\"\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# demo_acorn_walk = ->\n#   ### Count return statements; if more than one, return first BlockStatement, otherwise `argument` property\n#   of first and only ReturnStatement ###\n#   GUY       = require H.guy_path\n#   f3        =  ( x ) ->\n#     return true if x > 0\n#     return false if x < 0\n#     return null\n#   cfgs      = [\n#     # { function: ( `function ( x ) { 42; }` ), }\n#     # { function: ( `function ( x ) { return 42; }` ), }\n#     # { function: ( ( x ) -> if x? then true else false ), }\n#     # { function: ( ( x ) -> ( not x? ) or ( @isa.object x ) or ( @isa.nonempty.text x ) ), }\n#     # { function: f3, }\n#     { text: 'let x ^^^ 42;', use: 'strict', fallback: 'NOTGOOD', }\n#     # { text: 'let x ^^^ 42;', use: 'strict', }\n#     { text: 'let x = 42;', use: 'strict', }\n#     { text: 'let x = 42;', }\n#     ]\n#   for cfg in cfgs\n#     whisper '————————————————————————————————————————————————————'\n#     urge '^5345^', ( cfg.function ? cfg.text ).toString()\n#     info '^5345^', rpr GUY.src.slug_from_simple_function cfg\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# demo_parse_use_and_fallback = ->\n#   GUY           = require H.guy_path\n#   error_literal = { type: 'Literal', start: 0, end: 7, value: 'ERROR', raw: \"'ERROR'\" }\n#   debug '^334^', GUY.src.parse { use: 'strict',       text: \"'ERROR'\", }\n#   debug '^334^', result = GUY.src.parse { use: 'strict',       text: 'let x = 1;', fallback: error_literal, }\n#   info rpr GUY.src._generate result\n#   debug '^334^', result = GUY.src.parse { use: 'strict,loose', text: 'let x = 1;', fallback: error_literal, }\n#   info rpr GUY.src._generate result\n#   debug '^334^', result = GUY.src.parse { use: 'loose',        text: 'let x = 1;', fallback: error_literal, }\n#   info rpr GUY.src._generate result\n#   debug '^334^', result = GUY.src.parse { use: 'strict',       text: 'let x ^^^ 1;', fallback: error_literal, }\n#   info rpr GUY.src._generate result\n#   debug '^334^', result = GUY.src.parse { use: 'strict,loose', text: 'let x ^^^ 1;', fallback: error_literal, }\n#   info rpr GUY.src._generate result\n#   debug '^334^', result = GUY.src.parse { use: 'loose',        text: 'let x ^^^ 1;', fallback: error_literal, }\n#   info rpr GUY.src._generate result\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# demo_slug_for_inadvertent_multiline_function = ->\n#   GUY           = require H.guy_path\n#   div3int       = ( x ) -> x %% 3 is 0\n#   ```\n#   const div3int_js = {\n#           function: (function(x) {\n#             return modulo(x,\n#         3) === 0;\n#           })\n#         };\n#   ```\n#   whisper '————————————————————————————————————————————————————'\n#   info '^353^', div3int.toString()\n#   urge '^353^', rpr GUY.src.slug_from_simple_function { function: div3int, }\n#   whisper '————————————————————————————————————————————————————'\n#   info '^353^', div3int_js.function.toString()\n#   urge '^353^', rpr GUY.src.slug_from_simple_function { function: div3int_js.function, }\n#   whisper '————————————————————————————————————————————————————'\n#   info '^353^', text = div3int_js.function.toString().replace /\\s*\\n\\s*/g, ' '\n#   urge '^353^', rpr GUY.src.slug_from_simple_function { text, }\n#   whisper '————————————————————————————————————————————————————'\n#   return null\n\n# ############################################################################################################\n# if require.main is module then do =>\n#   # test @\n#   # test @[ \"GUY.src.slug_from_simple_function() for bound functions\" ]\n#   # @[ \"guy.str.SQL tag function\" ]()\n#   # demo_return_clauses()\n#   # test @[ \"GUY.src.parse() accepts `fallback` argument, otherwise errors where appropriate\" ]\n#   # @[ \"GUY.src.parse()\" ]()\n#   # test @[ \"GUY.src.parse()\" ]\n#   # demo_parse_use_and_fallback()\n#   # demo_acorn_walk()\n#   # test @[ \"GUY.src.slug_node_from_simple_function()\" ]\n#   test @[ \"GUY.src.slug_from_simple_function()\" ]\n#   # demo_slug_for_inadvertent_multiline_function()\n"
  ]
}