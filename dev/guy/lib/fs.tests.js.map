{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/fs.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GUY/TESTS/FS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nFS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ freeze }                = require 'letsfreezethat'\n{ isa\n  type_of\n  validate\n  validate_list_of\n  equals }                = types.export()\n\nmatchers =\n  single: [\n    \"Ångström's\"\n    \"éclair\"\n    \"éclair's\"\n    \"éclairs\"\n    \"éclat\"\n    \"éclat's\"\n    \"élan\"\n    \"élan's\"\n    \"émigré\"\n    \"émigré's\" ]\nmatchers.triple = [ matchers.single..., matchers.single..., matchers.single..., ]\nmatchers = freeze matchers\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"guy.fs.walk_circular_lines() iterates once per default\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  guy     = require H.guy_path\n  result  = []\n  path    = PATH.resolve PATH.join __dirname, '../../../', 'assets/a-few-words.txt'\n  #.........................................................................................................\n  for line from guy.fs.walk_circular_lines path\n    result.push line\n  #.........................................................................................................\n  debug '^3434^', result\n  T?.eq result, matchers.single\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"guy.fs.walk_circular_lines() can iterate given number of loops\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  guy     = require H.guy_path\n  result  = []\n  path    = PATH.resolve PATH.join __dirname, '../../../', 'assets/a-few-words.txt'\n  #.........................................................................................................\n  for line from guy.fs.walk_circular_lines path, { loop_count: 3, }\n    result.push line\n  #.........................................................................................................\n  T?.eq result, matchers.triple\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"guy.fs.walk_circular_lines() can iterate given number of lines 1\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  guy     = require H.guy_path\n  result  = []\n  path    = PATH.resolve PATH.join __dirname, '../../../', 'assets/a-few-words.txt'\n  #.........................................................................................................\n  for line from guy.fs.walk_circular_lines path, { loop_count: 3, line_count: 12, }\n    result.push line\n  #.........................................................................................................\n  T?.eq result.length, 12\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"guy.fs.get_file_size\" ] = ( T, done ) ->\n  guy     = require H.guy_path\n  path    = 'short-proposal.mkts.md'\n  path    = PATH.resolve PATH.join __dirname, '../../../assets', path\n  #.........................................................................................................\n  do =>\n    T?.eq ( guy.fs.get_file_size path ), 405\n  #.........................................................................................................\n  do =>\n    error = null\n    try result  = guy.fs.get_file_size 'no/such/path' catch error\n      T?.ok ( error.message.match /no such file or directory/ )?\n    T?.ok error?\n  #.........................................................................................................\n  do =>\n    fallback = Symbol 'fallback'\n    T?.eq ( guy.fs.get_file_size 'no/such/path',  fallback ), fallback\n    T?.eq ( guy.fs.get_file_size path,            fallback ), 405\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@GUY_fs_get_content_hash = ( T, done ) ->\n  GUY     = require H.guy_path\n  path    = 'short-proposal.mkts.md'\n  path    = PATH.resolve PATH.join __dirname, '../../../assets', path\n  #.........................................................................................................\n  do =>\n    matcher = '2c244f1d168c54906'\n    result  = GUY.fs.get_content_hash path\n    T?.eq result, matcher\n  #.........................................................................................................\n  do =>\n    matcher = '2c24'\n    result  = GUY.fs.get_content_hash path, { length: 4, }\n    T?.eq result, matcher\n  #.........................................................................................................\n  do =>\n    error = null\n    try result  = GUY.fs.get_content_hash path, { length: 400, } catch error\n      T?.ok ( error.message.match /unable to generate hash of length 400 using/ )?\n    T?.ok error?\n  #.........................................................................................................\n  do =>\n    path = 'NONEXISTANT'\n    T?.eq ( FS.existsSync path ), false\n    T?.throws /No such file or directory/, -> GUY.fs.get_content_hash path\n    foobar = Symbol 'foobar'\n    T?.eq ( GUY.fs.get_content_hash path, { fallback: foobar, } ), foobar\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@GUY_fs_walk_lines_yields_from_empty_file = ( T, done ) ->\n  GUY     = require H.guy_path\n  paths   = [\n    [ 'fw', '../../../assets/a-few-words.txt',                            ]\n    [ 'ef', '../../../assets/datamill/empty-file.txt',                    ]\n    [ '1n', '../../../assets/datamill/file-with-single-nl.txt',           ]\n    [ '3n', '../../../assets/datamill/file-with-3-lines-no-eofnl.txt',    ]\n    [ '3w', '../../../assets/datamill/file-with-3-lines-with-eofnl.txt',  ]\n    ]\n  #.........................................................................................................\n  matcher = [\n    \"fw#1:Ångström's\", \"fw#2:éclair\", \"fw#3:éclair's\", \"fw#4:éclairs\", \"fw#5:éclat\", \"fw#6:éclat's\", \"fw#7:élan\", \"fw#8:élan's\", \"fw#9:émigré\", \"fw#10:émigré's\",\n    'ef#1:',\n    '1n#1:', '1n#2:',\n    '3n#1:1', '3n#2:2', '3n#3:3',\n    '3w#1:1', '3w#2:2', '3w#3:3', '3w#4:',\n    ]\n  #.........................................................................................................\n  for chunk_size in [ 1 .. 200 ] by +10\n    result  = []\n    for [ id, path, ] in paths\n      # whisper '^45-1^', '----------------------------------'\n      path  = PATH.resolve PATH.join __dirname, path\n      lnr   = 0\n      for line from GUY.fs.walk_lines path, { chunk_size, }\n        lnr++\n        result.push \"#{id}##{lnr}:#{line}\"\n    T?.eq result, matcher\n  #.........................................................................................................\n  done?()\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @GUY_fs_walk_lines_with_custom_newline = ( T, done ) ->\n#   GUY     = require H.guy_path\n#   GUY.temp.with_file ({ path, }) ->\n#     FS.writeFileSync path, \"foo𠀀𠀐bar𠀀𠀐baz𠀀𠀐\"\n#     #.......................................................................................................\n#     # for chunk_size in [ 1 .. 5 ] by +1\n#     for chunk_size in [ 1 .. 1 ] by +1\n#       result  = []\n#       lnr     = 0\n#       for line from GUY.fs.walk_lines path, { chunk_size, newline: '𠀀𠀐', }\n#         lnr++\n#         debug '^4323^', \"##{lnr}:#{line}\"\n#         result.push \"##{lnr}:#{line}\"\n#       T?.eq result, [ '#1:foo', '#2:bar', '#3:baz', '#4:', ]\n#   #.........................................................................................................\n#   done?()\n#   return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @, { timeout: 5000, }\n  # test @[ \"guy.fs.walk_circular_lines() can iterate given number of loops\" ]\n  # test @[ \"guy.fs.get_content_hash\" ]\n  # @[ \"guy.fs.get_content_hash\" ]()\n  # test @[ \"guy.props.def(), .hide()\" ]\n  # @[ \"configurator\" ]()\n  # test @[ \"await with async steampipes\" ]\n  # test @[ \"nowait with async steampipes\" ]\n  # test @[ \"use-call\" ]\n  # @[ \"await with async steampipes\" ]()\n  # @[ \"demo\" ]()\n  # @[ \"nowait\" ]()\n  # @GUY_fs_walk_lines_with_custom_newline()\n  # test @GUY_fs_walk_lines_with_custom_newline\n  # @GUY_fs_walk_lines_yields_from_empty_file()\n  test @GUY_fs_walk_lines_yields_from_empty_file\n  # @GUY_fs_get_content_hash()\n  # test @GUY_fs_get_content_hash\n\n\n"
  ]
}