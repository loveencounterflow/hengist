{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/fs.tests.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR,EAL5B;;;EAOA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAlB5B;;;EAoBA,IAAA,GAA4B,OAAA,CAAQ,wBAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,QAFF,EAGE,gBAHF,EAIE,MAJF,CAAA,GAI4B,KAAK,CAAC,MAAN,CAAA,CAJ5B,EAvBA;;;;;EAiCA,IAAC,CAAE,wDAAF,CAAD,GAAgE,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAChE,QAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,EAAA,MAAA;;IACE,GAAA,GAAU,OAAA,CAAQ,CAAC,CAAC,QAAV;IACV,MAAA,GAAU;IACV,OAAA,GAAU,CACR,YADQ,EAER,QAFQ,EAGR,UAHQ,EAIR,SAJQ,EAKR,OALQ,EAMR,SANQ,EAOR,MAPQ,EAQR,QARQ,EASR,QATQ,EAUR,UAVQ;IAWV,IAAA,GAAU,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,WAArB,EAAkC,wBAAlC,CAAb;AAEV;;IAAA,KAAA,WAAA;MACE,MAAM,CAAC,IAAP,CAAY,IAAZ;MACA,KAAA,CAAM,QAAN,EAAgB,IAAhB;IAFF,CAhBF;;;MAoBE,CAAC,CAAE,EAAH,CAAM,MAAN,EAAc,OAAd;;wCACA;EAtB8D,EAjChE;;;EA2DA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA;aAChC,IAAA,CAAK,IAAL,EAAQ;QAAE,OAAA,EAAS;MAAX,CAAR;IADgC,CAAA,IAAlC;;;EA3DA;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GUY/TESTS/FS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of\n  equals }                = types.export()\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"guy.fs.walk_circular_lines() iterates once per default\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  guy     = require H.guy_path\n  result  = []\n  matcher = [\n    \"Ångström's\"\n    \"éclair\"\n    \"éclair's\"\n    \"éclairs\"\n    \"éclat\"\n    \"éclat's\"\n    \"élan\"\n    \"élan's\"\n    \"émigré\"\n    \"émigré's\" ]\n  path    = PATH.resolve PATH.join __dirname, '../../../', 'assets/a-few-words.txt'\n  #.........................................................................................................\n  for line from guy.fs.walk_circular_lines path\n    result.push line\n    debug '^4433^', line\n  #.........................................................................................................\n  T?.eq result, matcher\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @, { timeout: 5000, }\n  # test @[ \"guy.props.def(), .hide()\" ]\n  # test @[ \"guy.obj.pick_with_fallback()\" ]\n  # test @[ \"guy.obj.pluck_with_fallback()\" ]\n  # test @[ \"guy.obj.nullify_undefined()\" ]\n  # test @[ \"guy.obj.omit_nullish()\" ]\n  # @[ \"configurator\" ]()\n  # test @[ \"await with async steampipes\" ]\n  # test @[ \"nowait with async steampipes\" ]\n  # test @[ \"use-call\" ]\n  # @[ \"await with async steampipes\" ]()\n  # @[ \"demo\" ]()\n  # @[ \"nowait\" ]()\n\n\n\n"
  ]
}