{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/datetime.tests.coffee"
  ],
  "names": [],
  "mappings": "AAsFqB;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n# 'use strict'\n\n\n# ############################################################################################################\n# GUY                       = require 'guy'\n# { alert\n#   debug\n#   help\n#   info\n#   plain\n#   praise\n#   urge\n#   warn\n#   whisper }               = GUY.trm.get_loggers 'GUY/datetime'\n# { rpr\n#   inspect\n#   echo\n#   log     }               = GUY.trm\n# #...........................................................................................................\n# H                         = require './helpers'\n# test                      = require '../../../apps/guy-test'\n# types                     = new ( require 'intertype' ).Intertype\n# { isa\n#   equals\n#   type_of\n#   validate }              = types\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @guy_datetime_api = ( T, done ) ->\n#   GUY     = require H.guy_path\n#   #.........................................................................................................\n#   T?.eq ( type_of GUY.datetime.parse   ), 'function'\n#   T?.eq ( type_of GUY.datetime.format  ), 'function'\n#   #.........................................................................................................\n#   done?()\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_demo_datetime = ( cfg ) ->\n#   GUY     = require H.guy_path\n#   D       = GUY.datetime\n#   #---------------------------------------------------------------------------------------------------------\n#   debug '^34534-1^', D.from_now '20220101-183000Z'\n#   debug '^34534-2^', D.format D.now(), 'YYYYMMDD-HHmmssZ'\n#   debug '^34534-3^', D.format D.now(), 'YYYY-MM-DD HH:mm UTC'\n#   debug '^34534-4^', D.srts_from_isots '2022-05-17T19:40:58Z'\n#   # since Only show notifications updated after the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\n#   d = D._dayjs().subtract 7, 'year'\n#   # D.\n#   debug '^34534-5^', d\n#   debug '^34534-6^', D.isots_from_srts '20220101-183000Z'\n#   debug '^34534-7^', D.now()\n#   debug '^34534-8^', D.now { subtract: [ 1, 'week', ], }\n#   debug '^34534-9^', D.now { subtract: [ 1, 'month', ], }\n#   debug '^34534-10^', D.now { add: [ 1, 'week', ], }\n#   debug '^34534-11^', D.now { subtract: [ 1, 'week', ], add: [ 1, 'week', ], }\n#   debug '^34534-9^', D.isots_from_srts D.now { subtract: [ 1, 'month', ], }\n#   return null\n\n# # #-----------------------------------------------------------------------------------------------------------\n# # @_demo_dayjs_duration = ->\n# #   GUY     = require H.guy_path\n# #   D       = GUY.datetime\n# #   debug '^353453^', DBay._dayjs\n# #   debug '^353453^', ( new DBay() )._dayjs\n# #   dayjs                     = require 'dayjs'\n# #   do =>\n# #     utc               = require 'dayjs/plugin/utc';               dayjs.extend utc\n# #     relativeTime      = require 'dayjs/plugin/relativeTime';      dayjs.extend relativeTime\n# #     toObject          = require 'dayjs/plugin/toObject';          dayjs.extend toObject\n# #     customParseFormat = require 'dayjs/plugin/customParseFormat'; dayjs.extend customParseFormat\n# #     duration          = require 'dayjs/plugin/duration';          dayjs.extend duration\n# #   help '^45323^', ( dayjs.duration { hours:   1, } ).asSeconds()\n# #   help '^45323^', ( dayjs.duration { minutes: 1, } ).asSeconds()\n# #   help '^45323^', ( dayjs.duration { minutes: -1, } ).asSeconds()\n# #   # help '^45323^', ( dayjs.duration \"1 minute\" ).asSeconds()\n# #   return null\n\n\n\n# ############################################################################################################\n# if require.main is module then do =>\n#   # @guy_str_escape_for_regex()\n#   # test @\n#   @_demo_datetime()\n"
  ]
}