{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/datetime.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'GUY/datetime'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\nH                         = require './helpers'\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate }              = types\n\n\n#-----------------------------------------------------------------------------------------------------------\n@guy_datetime_api = ( T, done ) ->\n  GUY     = require H.guy_path\n  #.........................................................................................................\n  T?.eq ( type_of GUY.datetime.parse   ), 'function'\n  T?.eq ( type_of GUY.datetime.format  ), 'function'\n  #.........................................................................................................\n  done?()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_demo_datetime = ( cfg ) ->\n  GUY     = require H.guy_path\n  D       = GUY.datetime\n  #---------------------------------------------------------------------------------------------------------\n  debug '^34534-1^', D.from_now '20220101-183000Z'\n  debug '^34534-2^', D.format D.now(), 'YYYYMMDD-HHmmssZ'\n  debug '^34534-3^', D.format D.now(), 'YYYY-MM-DD HH:mm UTC'\n  debug '^34534-4^', D.srts_from_isots '2022-05-17T19:40:58Z'\n  # since Only show notifications updated after the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\n  d = D._dayjs().subtract 7, 'year'\n  # D.\n  debug '^34534-5^', d\n  debug '^34534-6^', D.isots_from_srts '20220101-183000Z'\n  debug '^34534-7^', D.now()\n  debug '^34534-8^', D.now { subtract: [ 1, 'week', ], }\n  debug '^34534-9^', D.now { subtract: [ 1, 'month', ], }\n  debug '^34534-10^', D.now { add: [ 1, 'week', ], }\n  debug '^34534-11^', D.now { subtract: [ 1, 'week', ], add: [ 1, 'week', ], }\n  debug '^34534-9^', D.isots_from_srts D.now { subtract: [ 1, 'month', ], }\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_demo_dayjs_duration = ->\n#   GUY     = require H.guy_path\n#   D       = GUY.datetime\n#   debug '^353453^', DBay._dayjs\n#   debug '^353453^', ( new DBay() )._dayjs\n#   dayjs                     = require 'dayjs'\n#   do =>\n#     utc               = require 'dayjs/plugin/utc';               dayjs.extend utc\n#     relativeTime      = require 'dayjs/plugin/relativeTime';      dayjs.extend relativeTime\n#     toObject          = require 'dayjs/plugin/toObject';          dayjs.extend toObject\n#     customParseFormat = require 'dayjs/plugin/customParseFormat'; dayjs.extend customParseFormat\n#     duration          = require 'dayjs/plugin/duration';          dayjs.extend duration\n#   help '^45323^', ( dayjs.duration { hours:   1, } ).asSeconds()\n#   help '^45323^', ( dayjs.duration { minutes: 1, } ).asSeconds()\n#   help '^45323^', ( dayjs.duration { minutes: -1, } ).asSeconds()\n#   # help '^45323^', ( dayjs.duration \"1 minute\" ).asSeconds()\n#   return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @guy_str_escape_for_regex()\n  # test @\n  @_demo_datetime()\n"
  ]
}