{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/cli.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/INTERSHOP/INTERSHOP-CLI-NG'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  cast\n  type_of }               = types.export()\n\n### TAINT\n\nconsider to move to https://caporal.io\n\n###\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@serve = ->\n  Rpc                       = require '../../../apps/intershop-rpc'\n  # DB                        = require '../../../apps/intershop/intershop_modules/db'\n  # DATOM                     = require '../../../apps/datom'\n  IX                        = require '../../../apps/intertext'\n  after                     = ( time_s, f ) -> setTimeout f, time_s * 1000\n  #.........................................................................................................\n  rpc = await Rpc.create { show_counts: true, count_interval: 1, logging: true, }\n  #.........................................................................................................\n  rpc.contract '^hyphenate',            ( d ) -> hyphenate d.$value\n  rpc.contract '^slabjoints_from_text', ( d ) -> slabjoints_from_text d.$value\n  rpc.contract '^shyphenate',           ( d ) -> slabjoints_from_text hyphenate d.$value\n    # debug '^447^', rpr text\n  #.........................................................................................................\n  hyphenate = ( text ) ->\n    validate.text text\n    return IX.HYPH.hyphenate text\n  #.........................................................................................................\n  slabjoints_from_text = ( text ) ->\n    validate.text text\n    return IX.SLABS.slabjoints_from_text text\n  #.........................................................................................................\n  return rpc\n\n#-----------------------------------------------------------------------------------------------------------\n@psql_run_file = ( cwd, path ) -> new Promise ( resolve, reject ) =>\n  CP                        = require 'child_process'\n  ### TAINT must properly escape path literal ###\n  command   = \"psql -U interplot -d interplot -f \\\"#{path}\\\"\"\n  whisper '^psql_run_file@3366^', path\n  settings  =\n    cwd:    cwd\n    shell:  true\n    stdio:  [ 'inherit', 'inherit', 'inherit', ]\n  cp        = CP.spawn command, null, settings\n  cp.on 'close', ( code   ) ->\n    return resolve 0 if code is 0\n    reject new Error \"^psql_run_file@34478^ processs exited with code #{code}\"\n  cp.on 'error', ( error  ) -> reject error\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo = ->\n  rpc = await @serve()\n  # T.eq ( await DB.query_single  [ \"select IPC.rpc( $1, $2 );\", '^add-42', '{\"x\":1000}'  ] ), 1042\n  await @psql_run_file '/home/flow/jzr/interplot', 'db/080-intertext.sql'\n  await @psql_run_file '/home/flow/jzr/interplot', 'db/100-harfbuzz.sql'\n  await @psql_run_file '/home/flow/jzr/interplot', 'db/tests/080-intertext.tests.sql'\n  debug '^3334^', process.argv\n  info rpc.counts\n  await rpc.stop()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@cli = ->\n  { program } = require '@caporal/core'\n  #.........................................................................................................\n  # program.action ( { logger, } ) => logger.info \"Hello, world!\"\n  #.........................................................................................................\n  program\n    .name 'intershop'\n    .command 'psql', \"run psql\"\n    .option '-f --file <file>',       \"read commands from file rather than standard input; may be combined, repeated\" #, collect, []\n    .option '-c --command <command>', \"execute the given command string; may be combined, repeated\" #, collect, []\n    .action ( d ) =>\n      has_command = true\n      # info \"^556^ #{rpr ( key for key of d )}\"\n      # info \"^556^ #{rpr key}: #{rpr d[ key ]}\" for key in [ 'args', 'options', 'ddash', 'logger', 'program', 'command' ]\n      # info \"^556^ #{rpr key}: #{rpr d[ key ]}\" for key in [ 'args', 'options', 'ddash', ]\n      file_path     = d.options.file ? null\n      project_path  = d.options.p ? d.options.project ? process.cwd()\n      info \"^556^ file_path: #{rpr file_path}\"\n      info \"^556^ project_path: #{rpr project_path}\"\n      # info \"^556^ running psql with #{rpr { file: d.file, command: d.command, }}\"\n      if file_path?\n        await @psql_run_file project_path, file_path\n  #.........................................................................................................\n  program\n    .option '-p --project <project>', \"set path to InterShop project (only needed if not current directory)\", { global: true, }\n  #.........................................................................................................\n  await program.run()\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await @demo()\n  rpc = await @serve()\n  await @cli()\n  await rpc.stop()\n\n\n\n\n\n\n\n\n"
  ]
}