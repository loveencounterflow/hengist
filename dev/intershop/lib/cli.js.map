{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/cli.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/INTERSHOP/INTERSHOP-CLI-NG'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = ( require 'intershop' ).types\n{ isa\n  validate\n  cast\n  type_of }               = types.export()\nCP                        = require 'child_process'\n\n### TAINT\n\nconsider to move to https://caporal.io\n\n###\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@serve = ->\n  Rpc                       = require '../../../apps/intershop-rpc'\n  # DB                        = require '../../../apps/intershop/intershop_modules/db'\n  # DATOM                     = require '../../../apps/datom'\n  IX                        = require '../../../apps/intertext'\n  after                     = ( time_s, f ) -> setTimeout f, time_s * 1000\n  #.........................................................................................................\n  rpc = await Rpc.create { show_counts: true, count_interval: 100, logging: true, }\n  #.........................................................................................................\n  rpc.contract '^hyphenate',            ( d ) -> hyphenate d.$value\n  rpc.contract '^slabjoints_from_text', ( d ) -> slabjoints_from_text d.$value\n  rpc.contract '^shyphenate',           ( d ) -> slabjoints_from_text hyphenate d.$value\n    # debug '^447^', rpr text\n  #.........................................................................................................\n  hyphenate = ( text ) ->\n    validate.text text\n    return IX.HYPH.hyphenate text\n  #.........................................................................................................\n  slabjoints_from_text = ( text ) ->\n    validate.text text\n    return IX.SLABS.slabjoints_from_text text\n  #.........................................................................................................\n  return rpc\n\n#-----------------------------------------------------------------------------------------------------------\n@new_intershop_runner = ( project_path ) ->\n  return ( require 'intershop' ).new_intershop project_path\n\n#-----------------------------------------------------------------------------------------------------------\n@_prepare_commandline = ( me ) ->\n  cwd       = me.get 'intershop/host/path'\n  db_name   = me.get 'intershop/db/name'\n  db_user   = me.get 'intershop/db/user'\n  return { cwd, db_user, db_name, }\n\n#-----------------------------------------------------------------------------------------------------------\n@psql_run_file    = ( me, path    ) -> @_psql_run me, '-f', path\n@psql_run_command = ( me, command ) -> @_psql_run me, '-c', command\n\n#-----------------------------------------------------------------------------------------------------------\n@_psql_run = ( me, selector, pargument ) -> new Promise ( resolve, reject ) =>\n  validate.intershop_cli_psql_run_selector selector\n  cmd         = @_prepare_commandline me\n  ### TAINT how to respect `sudo -u postgres` and similar? ###\n  parameters  = [ '-U', cmd.db_user, '-d', cmd.db_name, selector, pargument, ]\n  # parameters  = [ '-d', cmd.db_name, selector, pargument, ]\n  debug '^37363^', parameters\n  whisper '^psql_run_file@3367^', \"psql #{parameters.join ' '}\"\n  settings    =\n    cwd:    cmd.cwd\n    shell:  false\n    stdio:  [ 'inherit', 'inherit', 'inherit', ]\n  cp        = CP.spawn 'psql', parameters, settings\n  cp.on 'close', ( code   ) ->\n    return resolve 0 if code is 0\n    reject new Error \"^psql_run_file@34479^ processs exited with code #{code}\"\n  cp.on 'error', ( error  ) -> reject error\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@cli = ->\n  { program } = require '@caporal/core'\n  #.........................................................................................................\n  # program.action ( { logger, } ) => logger.info \"Hello, world!\"\n  #.........................................................................................................\n  program\n    .name 'intershop'\n    #.......................................................................................................\n    .command 'start-rpc-server', \"start RPC server (to be accessed from psql scripts)\"\n    .action ( d ) => setTimeout ( -> ), 1e6\n    #.......................................................................................................\n    .command 'psql', \"run psql\"\n    .option '-f --file <file>',       \"read commands from file rather than standard input; may be combined, repeated\" #, collect, []\n    .option '-c --command <command>', \"execute the given command string; may be combined, repeated\" #, collect, []\n    .action ( d ) =>\n      # has_command = true\n      # info \"^556^ #{rpr ( key for key of d )}\"\n      # info \"^556^ #{rpr key}: #{rpr d[ key ]}\" for key in [ 'args', 'options', 'ddash', 'logger', 'program', 'command' ]\n      # info \"^556^ #{rpr key}: #{rpr d[ key ]}\" for key in [ 'args', 'options', 'ddash', ]\n      file_path     = d.options.file    ? null\n      command       = d.options.command ? null\n      project_path  = d.options.p ? d.options.project ? process.cwd()\n      info \"^556^ file_path: #{rpr file_path}\"\n      info \"^556^ project_path: #{rpr project_path}\"\n      me            = @new_intershop_runner project_path\n      # info \"^556^ running psql with #{rpr { file: d.file, command: d.command, }}\"\n      await @psql_run_file    me, file_path if file_path?\n      await @psql_run_command me, command   if command?\n      return null\n  #.........................................................................................................\n  program\n    .option '-p --project <project>', \"set path to InterShop project (only needed if not current directory)\", { global: true, }\n  #.........................................................................................................\n  await program.run()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @demo = ->\n#   rpc = await @serve()\n#   # T.eq ( await DB.query_single  [ \"select IPC.rpc( $1, $2 );\", '^add-42', '{\"x\":1000}'  ] ), 1042\n#   await @psql_run_file '/home/flow/jzr/interplot', 'db/080-intertext.sql'\n#   await @psql_run_file '/home/flow/jzr/interplot', 'db/100-harfbuzz.sql'\n#   await @psql_run_file '/home/flow/jzr/interplot', 'db/tests/080-intertext.tests.sql'\n#   debug '^3334^', process.argv\n#   info rpc.counts\n#   await rpc.stop()\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_intershop_object = ->\n  PATH          = require 'path'\n  project_path  = PATH.resolve PATH.join __dirname, '../../../../hengist'\n  project_path  = PATH.resolve PATH.join __dirname, '../../../../interplot'\n  INTERSHOP     = ( require 'intershop' ).new_intershop project_path\n  debug '^334^', ( k for k of INTERSHOP )\n  # debug '^334^', INTERSHOP.PTV_READER\n  for k of INTERSHOP.settings\n    continue if k.startsWith 'os/'\n    echo ( CND.gold k.padEnd 42 ), ( CND.lime INTERSHOP.settings[ k ].value )\n  return null\n\n############################################################################################################\nif module is require.main then do =>\n  # await @demo()\n  rpc = await @serve()\n  await @cli()\n  await rpc.stop()\n  # @demo_intershop_object()\n\n\n\n\n\n\n"
  ]
}