{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/070-catalog.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERSHOP/TESTS/070-CATALOG'\ndebug                     = CND.get_logger 'debug',     badge\ndebug '^76483-1^'\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\nPATH                      = require 'path'\nFS                        = require 'fs'\n# #...........................................................................................................\n# types                     = require '../types'\n# { isa\n#   validate\n#   type_of }               = types\n\n#-----------------------------------------------------------------------------------------------------------\nresolve_project_path = ( path ) -> PATH.resolve PATH.join __dirname, '../../..', path\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"CATALOG.parse_object_identifier\" ] = ( T, done ) ->\n  db = require 'intershop/lib/db'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'x.foo',      { ucschema: 'X',    name: 'foo',      fqname: 'X.foo', }, ]\n    [ 'X.foo',      { ucschema: 'X',    name: 'foo',      fqname: 'X.foo', }, ]\n    [ '\"X.foo\"',    { ucschema: null,   name: '\"X.foo\"',  fqname: '\"X.foo\"', }, ]\n    [ 'X',          { ucschema: null,   name: 'x',        fqname: 'x', }, ]\n    [ 'X.\"20\"',     { ucschema: 'X',    name: '\"20\"',     fqname: 'X.\"20\"', }, ]\n    [ 'all',            null, 'CAT22 reserved word',                  ]\n    [ 'select',         null, \"CAT22 reserved word: 'select'\"         ]\n    [ 'select.x',       null, \"CAT22 reserved word: 'select'\"         ]\n    [ 'x.select',       null, \"CAT22 reserved word: 'select'\"         ]\n    [ 'X.with space',   null, 'string is not a valid identifier'      ]\n    [ 'X.\"\"',           null, 'string is not a valid identifier'      ]\n    [ 'X.SCHEMA.F',     null, \"expected a text with at most one dot\"  ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      # debug '^766^', { error, }\n      ### TAINT why do we have to do explicit error handling here? ###\n      try\n        result = await db.query_one [ \"\"\"select * from CATALOG.parse_object_identifier( $1 );\"\"\", probe, ]\n      catch error\n        # warn error.message\n        return reject new Error error.message\n      resolve result\n  done()\n  return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n  # await @_demo_opentypejs()\n  # test @[ \"VNR sort 2\" ]\n  # test @[ \"VNR sort 3\" ]\n  # @[ \"VNR sort 3\" ]()\n  # test @[ \"test VNR._first_nonzero_is_negative()\" ]\n  # @[ \"SVGTTF.svg_from_glyphidx()\" ]()\n  # @[ \"SVGTTF.svg_from_harfbuzz_linotype()\" ]()\n  # @[ \"SVGTTF.svg_from_harfbuzz_linotype() (using CJK font)\" ]()\n\n\n\n"
  ]
}