{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/070-catalog.tests.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,oBAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR,EAjB5B;;;;;;;;;EAyBA,oBAAA,GAAuB,QAAA,CAAE,IAAF,CAAA;WAAY,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,UAArB,EAAiC,IAAjC,CAAb;EAAZ,EAzBvB;;;EA4BA,IAAC,CAAE,cAAF,CAAD,GAAsB,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACtB,QAAA,MAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,mBAAA;;IACE,MAAA,GAAS,OAAA,CAAQ,sBAAR,EADX;;;IAGE,mBAAA,GAAsB,CAEpB,CAAE,CAAE,2BAAF,EAA+B,WAA/B,CAAF,EAAiD,IAAjD,CAFoB,EAGpB,CAAE,CAAE,2BAAF,EAA+B,OAA/B,CAAF,EAA6C,IAA7C,CAHoB,EAIpB,CAAE,CAAE,2BAAF,EAA+B,QAA/B,CAAF,EAA8C,IAA9C,CAJoB,EAKpB,CAAE,CAAE,2BAAF,EAA+B,cAA/B,CAAF,EAAoD,KAApD,CALoB,EAMpB,CAAE,CAAE,2BAAF,EAA+B,EAA/B,CAAF,EAAwC,KAAxC,CANoB,EAOpB,CAAE,CAAE,4BAAF,EAAgC,EAAhC,CAAF,EAAyC,IAAzC,CAPoB,EAQpB,CAAE,CAAE,4BAAF,EAAgC,CAAE,EAAF,CAAhC,CAAF,EAA8C,IAA9C,CARoB,EASpB,CAAE,CAAE,4BAAF,EAAgC,WAAhC,CAAF,EAAkD,IAAlD,CAToB,EAHxB;;IAeE,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB;MACF,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;AAAG,eAAO,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,EAAW,MAAX,CAAA;AACjE,cAAA,IAAA,EAAA;UAAM,CAAE,IAAF,EAAQ,KAAR,CAAA,GAAmB;iBACnB,OAAA,CAAQ,MAAM,CAAC,KAAK,CAAC,GAAb,CAAiB,IAAjB,EAAuB,KAAvB,CAAR;QAF2D,CAAZ;MAAV,CAAjC;IADR;IAIA,IAAA,CAAA;AACA,WAAO;EArBa,EA5BtB;;;EAsDA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA;aAChC,IAAA,CAAK,IAAL;IADgC,CAAA,IAAlC;;;EAtDA;;;;;;;;AAAA",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERSHOP/TESTS/070-CATALOG'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\nPATH                      = require 'path'\nFS                        = require 'fs'\n# #...........................................................................................................\n# types                     = require '../types'\n# { isa\n#   validate\n#   type_of }               = types\n\n#-----------------------------------------------------------------------------------------------------------\nresolve_project_path = ( path ) -> PATH.resolve PATH.join __dirname, '../../..', path\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SVGTTF types\" ] = ( T, done ) ->\n  # SVGTTF = require resolve_project_path 'apps/svgttf'\n  SVGTTF = require '../../../apps/svgttf'\n  #.........................................................................................................\n  probes_and_matchers = [\n    # [ [ 'svgttf_svg_transform_fn', 1, ], \"translate(1)\", ]\n    [ [ 'svgttf_svg_transform_name', 'translate', ], true, ]\n    [ [ 'svgttf_svg_transform_name', 'skewX', ], true, ]\n    [ [ 'svgttf_svg_transform_name', 'rotate', ], true, ]\n    [ [ 'svgttf_svg_transform_name', 'xxxtranslate', ], false, ]\n    [ [ 'svgttf_svg_transform_name', 42, ], false, ]\n    [ [ 'svgttf_svg_transform_value', 42, ], true, ]\n    [ [ 'svgttf_svg_transform_value', [ 42, ], ], true, ]\n    [ [ 'svgttf_svg_transform_value', 'something', ], true, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ type, value, ] = probe\n      resolve SVGTTF.types.isa type, value\n  done()\n  return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n  # await @_demo_opentypejs()\n  # test @[ \"VNR sort 2\" ]\n  # test @[ \"VNR sort 3\" ]\n  # @[ \"VNR sort 3\" ]()\n  # test @[ \"test VNR._first_nonzero_is_negative()\" ]\n  # @[ \"SVGTTF.svg_from_glyphidx()\" ]()\n  # @[ \"SVGTTF.svg_from_harfbuzz_linotype()\" ]()\n  # @[ \"SVGTTF.svg_from_harfbuzz_linotype() (using CJK font)\" ]()\n\n\n\n"
  ]
}