{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SCDA'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\n{ Dba }                   = require '../../../apps/icql-dba'\nReadlines                 = require 'n-readlines'\nglob                      = require 'glob'\n{ freeze\n  lets }                  = require 'letsfreezethat'\ntypes                     = require './types'\n{ isa\n  type_of\n  validate }              = types.export()\n{ Tokenwalker }           = require './tokenwalker'\n{ Scda }                  = require '..'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_scda = ->\n  schema              = 'scda'\n  prefix              = PATH.resolve PATH.join __dirname, '../../../../icql-dba/src'\n  # prefix            = PATH.resolve PATH.join __dirname, '../src'\n  ignore_names        = [ 'rpr', 'require', ]\n  ignore_short_paths  = [ 'types.coffee', 'common.coffee', 'errors.coffee', ]\n  scda                = new Scda { schema, prefix, ignore_names, ignore_short_paths, }\n  info '^334^', scda\n  #.........................................................................................................\n  scda.add_sources()\n  console.table [ ( scda.dba.query \"select * from scda.paths order by path;\" )..., ]\n  # help '^3344^', row for row from scda.dba.query \"\"\"\n  #   select * from scda.lines\n  #   where true\n  #     -- and ( lnr between 111 and 123 )\n  #     -- and ( line != '' )\n  #   order by short_path, lnr;\"\"\"\n  # console.table [ ( scda.dba.query \"select short_path, lnr, name from scda.defs order by name;\" )..., ]\n  # console.table [ ( scda.dba.query \"select short_path, lnr, type, role, name from scda.occurrences order by name;\" )..., ]\n  # console.table [ ( scda.dba.query \"select * from scda.occurrences order by name;\" )..., ]\n  console.table [ ( scda.dba.query \"select * from scda.occurrences order by 1, 2, 3, 4;\" )..., ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_tokenwalker = ->\n  source = \"\"\"\n    @foo = -> 42\n    @foo = f = -> 42\n    @foo = => 42\n    @foo = () -> 42\n    @foo = () => 42\n    @foo = ( x ) -> x * x\n    @foo = ( x ) => x * x\n    @foo = ( x = 42 ) => x * x\n    @foo = ( x = f 42 ) => x * x\n    @foo = ( x, y ) -> x * y\n    @foo = ( x, f = ( a ) -> a ) -> f x\n    @foo()\n    @foo value\n    @foo value, value, value\n    @foo value, @bar value\n    @foo value, ( @bar value ), value\n    @foo value, ( blah.bar value ), value\n    foo = -> 42\n    foo = f = -> 42\n    foo = => 42\n    foo = () -> 42\n    foo = () => 42\n    foo = ( x ) -> x * x\n    foo = ( x ) => x * x\n    foo = ( x = 42 ) => x * x\n    foo = ( x = f 42 ) => x * x\n    foo = ( x, y ) -> x * y\n    foo = ( x, f = ( a ) -> a ) -> f x\n    foo()\n    foo value\n    foo value, value, value\n    foo value, @bar value\n    foo value, ( @bar value ), value\n    foo value, ( blah.bar value ), value\n    @foo = -> 42\n    foo value\n    foo value, value, value; bar = ->\"\"\"\n  tokenwalker = new Tokenwalker { lnr: 0, source, }\n  # debug '^4433^', tokenwalker\n  for d from tokenwalker.walk()\n    # whisper '^333443^', tokenwalker\n    info    '^333443^', d\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # @demo_lexer()\n  @demo_scda()\n  # @demo_tokenwalker()\n\n\n\n"
  ]
}