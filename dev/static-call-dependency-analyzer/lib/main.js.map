{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SCDA'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\n{ Dba }                   = require '../../../apps/icql-dba'\nReadlines                 = require 'n-readlines'\nglob                      = require 'glob'\n{ freeze\n  lets }                  = require 'letsfreezethat'\ntypes                     = require './types'\n{ isa\n  type_of\n  validate }              = types.export()\n{ Tokenwalker }           = require './tokenwalker'\n\n#===========================================================================================================\nclass Scdadba extends Dba\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    ### TAINT add validation, defaults ###\n    { schema\n      prefix }  = cfg\n    schema_i    = @as_identifier schema\n    prefix     += '/' unless prefix.endsWith '/'\n    @cfg        = freeze { @cfg..., schema, schema_i, prefix, }\n    #.......................................................................................................\n    @open { schema, ram: true, }\n    ### TAINT short_path might not be unique ###\n    ### TAINT use mirage schema with VNRs, refs ###\n    @execute \"\"\"\n      -- ---------------------------------------------------------------------------------------------------\n      create table #{schema_i}.paths (\n          short_path  text unique not null,\n          path        text primary key );\n      -- ---------------------------------------------------------------------------------------------------\n      create table #{schema_i}.lines (\n          short_path  text    not null,\n          lnr         integer not null,\n          line        text    not null,\n        primary key ( short_path, lnr ) );\n      -- ---------------------------------------------------------------------------------------------------\n      create table #{schema_i}.defs (\n          short_path  text    not null,\n          lnr         integer not null,\n          tag         text not null,\n          atsign      text,\n          name        text not null,\n          tail        text,\n        primary key ( short_path, lnr ) );\n      \"\"\"\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  $add_path: ( cfg ) ->\n    { path, }   = cfg\n    short_path  = path[ @cfg.prefix.length... ] if path.startsWith @cfg.prefix\n    @run \"\"\"\n      insert into #{@cfg.schema_i}.paths ( short_path, path ) values ( $short_path, $path );\"\"\", \\\n      { short_path, path, }\n    return short_path\n\n  #---------------------------------------------------------------------------------------------------------\n  $add_line: ( cfg ) ->\n    ### TAINT short_path might not be unique ###\n    { short_path\n      lnr\n      line } = cfg\n    @run \"\"\"\n      insert into #{@cfg.schema_i}.lines ( short_path, lnr, line )\n        values ( $short_path, $lnr, $line );\"\"\", \\\n      { short_path, lnr, line, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $add_def: ( cfg ) ->\n    ### TAINT short_path might not be unique ###\n    { short_path\n      lnr\n      tag\n      atsign\n      name\n      tail } = cfg\n    @run \"\"\"\n      insert into #{@cfg.schema_i}.defs ( short_path, lnr, tag, atsign, name, tail )\n        values ( $short_path, $lnr, $tag, $atsign, $name, $tail );\"\"\", \\\n      { short_path, lnr, tag, atsign, name, tail, }\n    return null\n\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await @demo()\n  # @demo_lexer()\n  # @demo_tokenwalker()\n\n\n\n"
  ]
}