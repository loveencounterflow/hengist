{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SCDA'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\n{ Dba }                   = require '../../../apps/icql-dba'\nReadlines                 = require 'n-readlines'\nglob                      = require 'glob'\n{ freeze\n  lets }                  = require 'letsfreezethat'\n\n\n#===========================================================================================================\nclass Scdadba extends Dba\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    ### TAINT add validation, defaults ###\n    { schema\n      prefix }  = cfg\n    schema_i    = @as_identifier schema\n    prefix     += '/' unless prefix.endsWith '/'\n    @cfg        = freeze { @cfg..., schema, schema_i, prefix, }\n    #.......................................................................................................\n    @open { schema, ram: true, }\n    ### TAINT short_path might not be unique ###\n    ### TAINT use mirage schema with VNRs, refs ###\n    @execute \"\"\"\n      -- ---------------------------------------------------------------------------------------------------\n      create table #{schema_i}.paths (\n          short_path  text unique not null,\n          path        text primary key );\n      -- ---------------------------------------------------------------------------------------------------\n      create table #{schema_i}.lines (\n          short_path  text    not null,\n          lnr         integer not null,\n          line        text    not null,\n        primary key ( short_path, lnr ) );\n      \"\"\"\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  $add_path: ( cfg ) ->\n    { path, }   = cfg\n    short_path  = path[ @cfg.prefix.length... ] if path.startsWith @cfg.prefix\n    @run \"\"\"\n      insert into #{@cfg.schema_i}.paths ( short_path, path ) values ( $short_path, $path );\"\"\", \\\n      { short_path, path, }\n    return short_path\n\n  #---------------------------------------------------------------------------------------------------------\n  $add_line: ( cfg ) ->\n    ### TAINT short_path might not be unique ###\n    { short_path\n      lnr\n      line } = cfg\n    @run \"\"\"\n      insert into #{@cfg.schema_i}.lines ( short_path, lnr, line )\n        values ( $short_path, $lnr, $line );\"\"\", \\\n      { short_path, lnr, line, }\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@patterns = [\n    [ 'method', /^\\s+(?<atsign>@?)(?<name>\\w+):(?<tail>.*)$/, ]\n    ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_groups_from_match = ( match ) ->\n  R = {}\n  for k, v of match.groups\n    continue if ( v is '' ) or ( not v? )\n    R[ k ] = v\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@demo = ->\n  schema        = 'scda'\n  prefix        = PATH.resolve PATH.join __dirname, '../../../../icql-dba/src'\n  source_glob   = PATH.join prefix, '*.coffee'\n  source_paths  = glob.sync source_glob\n  dba           = new Scdadba { schema, prefix, }\n  #.........................................................................................................\n  for path in source_paths\n    short_path  = dba.$add_path { path, }\n    continue unless /import/.test path\n    debug '^4445^', path\n    readlines   = new Readlines path\n    lnr         = 0\n    #.......................................................................................................\n    while ( line = readlines.next() ) isnt false\n      lnr++\n      line = line.toString 'utf-8'\n      #.....................................................................................................\n      continue if /^\\s*$/.test line # exclude blank lines\n      continue if /^\\s*#/.test line # exclude some comments\n      dba.$add_line { short_path, lnr, line, }\n      #.....................................................................................................\n      for [ tag, pattern, ] in @patterns\n        continue unless ( match = line.match pattern )?\n        groups = @_groups_from_match match\n        info '^342^', { lnr, tag, groups, }\n  #.........................................................................................................\n  urge '^3344^', row for row from dba.query \"select * from scda.paths order by path;\"\n  help '^3344^', row for row from dba.query \"\"\"\n    select * from scda.lines\n    where true\n      and ( lnr between 111 and 123 )\n      -- and ( line != '' )\n    order by short_path, lnr;\"\"\"\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  await @demo()\n\n\n\n"
  ]
}