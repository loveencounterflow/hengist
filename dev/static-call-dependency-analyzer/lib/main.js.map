{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SCDA'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\n{ Dba }                   = require '../../../apps/icql-dba'\nReadlines                 = require 'n-readlines'\nglob                      = require 'glob'\n{ freeze\n  lets }                  = require 'letsfreezethat'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate }              = types.export()\n\n\n#===========================================================================================================\nclass Scdadba extends Dba\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    ### TAINT add validation, defaults ###\n    { schema\n      prefix }  = cfg\n    schema_i    = @as_identifier schema\n    prefix     += '/' unless prefix.endsWith '/'\n    @cfg        = freeze { @cfg..., schema, schema_i, prefix, }\n    #.......................................................................................................\n    @open { schema, ram: true, }\n    ### TAINT short_path might not be unique ###\n    ### TAINT use mirage schema with VNRs, refs ###\n    @execute \"\"\"\n      -- ---------------------------------------------------------------------------------------------------\n      create table #{schema_i}.paths (\n          short_path  text unique not null,\n          path        text primary key );\n      -- ---------------------------------------------------------------------------------------------------\n      create table #{schema_i}.lines (\n          short_path  text    not null,\n          lnr         integer not null,\n          line        text    not null,\n        primary key ( short_path, lnr ) );\n      -- ---------------------------------------------------------------------------------------------------\n      create table #{schema_i}.defs (\n          short_path  text    not null,\n          lnr         integer not null,\n          tag         text not null,\n          atsign      text,\n          name        text not null,\n          tail        text,\n        primary key ( short_path, lnr ) );\n      \"\"\"\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  $add_path: ( cfg ) ->\n    { path, }   = cfg\n    short_path  = path[ @cfg.prefix.length... ] if path.startsWith @cfg.prefix\n    @run \"\"\"\n      insert into #{@cfg.schema_i}.paths ( short_path, path ) values ( $short_path, $path );\"\"\", \\\n      { short_path, path, }\n    return short_path\n\n  #---------------------------------------------------------------------------------------------------------\n  $add_line: ( cfg ) ->\n    ### TAINT short_path might not be unique ###\n    { short_path\n      lnr\n      line } = cfg\n    @run \"\"\"\n      insert into #{@cfg.schema_i}.lines ( short_path, lnr, line )\n        values ( $short_path, $lnr, $line );\"\"\", \\\n      { short_path, lnr, line, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $add_def: ( cfg ) ->\n    ### TAINT short_path might not be unique ###\n    { short_path\n      lnr\n      tag\n      atsign\n      name\n      tail } = cfg\n    @run \"\"\"\n      insert into #{@cfg.schema_i}.defs ( short_path, lnr, tag, atsign, name, tail )\n        values ( $short_path, $lnr, $tag, $atsign, $name, $tail );\"\"\", \\\n      { short_path, lnr, tag, atsign, name, tail, }\n    return null\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@patterns = [\n    [ 'method',   /^\\s*(?<atsign>@?)(?<name>[\\w$]+):(?<tail>.*(?:->|=>).*)$/, ]\n    # [ 'method',   /^\\s*(?<atsign>@?)(?<name>[\\w\\$]+):(?<tail>.*)$/, ]\n    [ 'function', /^\\s*(?<atsign>@?)(?<name>[\\w\\$]+)\\s*=\\s*(?<tail>.*(?:->|=>).*)$/, ]\n    ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_groups_from_match = ( match ) ->\n  R = {}\n  for k, v of match.groups\n    continue if ( v is '' ) or ( not v? )\n    R[ k ] = v\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@demo = ->\n  schema        = 'scda'\n  prefix        = PATH.resolve PATH.join __dirname, '../../../../icql-dba/src'\n  # prefix        = PATH.resolve PATH.join __dirname, '../src'\n  source_glob   = PATH.join prefix, '*.coffee'\n  source_paths  = glob.sync source_glob\n  dba           = new Scdadba { schema, prefix, }\n  #.........................................................................................................\n  for path in source_paths\n    short_path  = dba.$add_path { path, }\n    continue unless /import/.test path\n    debug '^4445^', path\n    readlines   = new Readlines path\n    lnr         = 0\n    #.......................................................................................................\n    while ( line = readlines.next() ) isnt false\n      lnr++\n      line = line.toString 'utf-8'\n      #.....................................................................................................\n      continue if /^\\s*$/.test line # exclude blank lines\n      continue if /^\\s*#/.test line # exclude some comments\n      dba.$add_line { short_path, lnr, line, }\n      #.....................................................................................................\n      for [ tag, pattern, ] in @patterns\n        continue unless ( match = line.match pattern )?\n        debug '^4336^', tag, line\n        { atsign\n          name\n          tail } = @_groups_from_match match\n        # info '^342^', { lnr, tag, groups, }\n        dba.$add_def { short_path, lnr, tag, atsign, name, tail, }\n        break\n  #.........................................................................................................\n  urge '^3344^', row for row from dba.query \"select * from scda.paths order by path;\"\n  # help '^3344^', row for row from dba.query \"\"\"\n  #   select * from scda.lines\n  #   where true\n  #     -- and ( lnr between 111 and 123 )\n  #     -- and ( line != '' )\n  #   order by short_path, lnr;\"\"\"\n  # console.table [ ( dba.query \"select short_path, lnr, name from scda.defs order by name;\" )..., ]\n  console.table [ ( dba.query \"select short_path, lnr, tag, name, tail from scda.defs order by name;\" )..., ]\n  #.........................................................................................................\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_lexer = ->\n  CS = require 'coffeescript'\n  debug ( k for k of require 'coffeescript' )\n  lex = ( require 'coffee-lex' ).default\n  source = \"\"\"\n    @foo = -> 42\n    @foo = f = -> 42\n    @foo = => 42\n    @foo = () -> 42\n    @foo = () => 42\n    @foo = ( x ) -> x * x\n    @foo = ( x ) => x * x\n    @foo = ( x = 42 ) => x * x\n    @foo = ( x = f 42 ) => x * x\n    @foo = ( x, y ) -> x * y\n    @foo = ( x, f = ( a ) -> a ) -> f x\n    @foo()\n    @foo value\n    @foo value, value, value\n    @foo value, @bar value\n    @foo value, ( @bar value ), value\n    @foo value, ( blah.bar value ), value\n    \"\"\"\n    # @foo = ( x )\n    # @foo 42\n    # @foo g 42\n    # f 3\n\n  # source = \"a = 42\"\n  # source = \"a = -> 42\"\n  # source = \"@a 42\"\n  #-----------------------------------------------------------------------------------------------------------\n  lines     = source.split /\\n/\n  lnr       = null\n  collector = null\n  patterns  = [\n    [ 'methoddef',  1, /#@#property#=#(?:->|=>)#/, ]\n    [ 'methoddef',  2, /#@#property#=#param_start#param_end#(?:->|=>)#/, ]\n    [ 'methoddef',  3, /#@#property#=#param_start#identifier(?:#|(?:#,#identifier)*)#param_end#(?:->|=>)#/, ]\n    [ 'methoddef',  4, /#@#property#=#param_start#.*#param_end#(?:->|=>)#/, ]\n    [ 'methodcall', 1, /#@#property#call_start#call_end#/, ]\n    [ 'methodcall', 2, /#@#property#call_start#identifier#call_end#/, ]\n    [ 'methodcall', 3, /#@#property#call_start#identifier#,#identifier#,#identifier#call_end#/, ]\n    ]\n  #-----------------------------------------------------------------------------------------------------------\n  match_tokenline = ( tokenline ) ->\n    count = 0\n    for [ tag, nr, pattern, ] in patterns\n      continue unless ( match = tokenline.match pattern )?\n      count++\n      help CND.reverse \" #{tag} #{nr} \"\n    warn CND.reverse \" no match \" if count is 0\n      # break\n  #-----------------------------------------------------------------------------------------------------------\n  push = ( x ) ->\n    ( collector ?= [] ).push x\n  #-----------------------------------------------------------------------------------------------------------\n  flush = ->\n    return unless ( collector?.length ? 0 ) > 0\n    tokenline = '#' + ( collector.join '#' ) + '#'\n    help rpr lines[ lnr - 1 ]\n    urge tokenline\n    match_tokenline tokenline\n    collector = null\n  #-----------------------------------------------------------------------------------------------------------\n  for [ name, text, d, ] in CS.tokens source\n    # { range: [ 0, 1 ], first_line: 0, first_column: 0, last_line: 0, last_column: 0, last_line_exclusive: 0, last_column_exclusive: 1 }\n    lnr   = d.first_line    + 1\n    cnr   = d.first_column  + 1\n    name  = name.toLowerCase()\n    switch name\n      when 'indent', 'outdent'\n        null\n      when 'terminator'\n        flush()\n        info()\n      else\n        push name\n        # info lnr, { name, text, }\n  flush()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_ast_walker = ->\n  CS = require 'coffeescript'\n  xrpr = ( x ) -> ( rpr x )[ .. 100 ]\n  #-----------------------------------------------------------------------------------------------------------\n  walk_ast = ( tree ) ->\n    whisper '^38^', '-'.repeat 108\n    urge '^38^', tree.children, CND.steel xrpr tree\n    switch tree_type = type_of tree\n      #.....................................................................................................\n      when 'root'\n        yield { name: 'root', }\n        yield from walk_ast tree.body\n      #.....................................................................................................\n      when 'block'\n        yield { name: 'block', }\n        for childname in tree.children\n          debug '^39^', childname, xrpr tree[ childname ]\n          yield from walk_ast tree[ childname ]\n      #.....................................................................................................\n      when 'list'\n        for element in tree\n          yield from walk_ast element\n      #.....................................................................................................\n      else\n        whisper \"^54^ unknown tree_type: #{rpr tree_type}\"\n    #.......................................................................................................\n    return null\n    # #.......................................................................................................\n    # whisper '^35345-1^', 'type:', type_of tree\n    # # whisper '^35345-2^', 'type:', type_of tree\n    # for childname in tree.children\n    #   whisper '^35345-3^', childname\n    #   switch childname\n    #     when 'variable'\n    #       debug '^6456-1^', 'variable:                     ', xrpr tree.variable\n    #       debug '^6456-1^', 'variable.children:            ', xrpr tree.variable.children\n    #       debug '^6456-1^', 'variable.base:                ', xrpr tree.variable.base\n    #       debug '^6456-1^', 'variable.base.children:       ', xrpr tree.variable.base.children\n    #       debug '^6456-1^', 'variable.properties:          ', xrpr tree.variable.properties\n    #       debug '^6456-1^', 'variable.properties.children: ', xrpr tree.variable.properties.children\n    #       null\n    #     when 'value'\n    #       debug '^6456-1^', 'value:                        ', xrpr tree.value\n    #       debug '^6456-1^', 'value.children:               ', xrpr tree.value.children\n    #       debug '^6456-1^', 'value.params:                 ', xrpr tree.value.params\n    #       debug '^6456-1^', 'value.params.children:        ', xrpr tree.value.params.children\n    #       debug '^6456-1^', 'value.body:                   ', xrpr tree.value.body\n    #       debug '^6456-1^', 'value.body.children:          ', xrpr tree.value.body.children\n    #       null\n    #     when 'expressions'\n    #       for node in tree.expressions\n    #         whisper '^35345-4^', 'type:', type_of node\n    #         delete node.locationData\n    #         info  '^6456-2^', node.children\n    #         # switch node_type = type_of node\n    #         #   when 'assign'\n    #         #     null\n    #         #   when 'variable'\n    #         #     null\n    #         #   when 'value'\n    #         #     null\n    #         #   else throw new Error \"unknown node type #{node_type}\"\n    #         walk_ast node\n    #     else throw new Error \"unknown node type #{rpr childname}\"\n    # return null\n  #.........................................................................................................\n  source = \"\"\"\n    @foo = ( x ) -> x * x\n    bar = -> 42\n    \"\"\"\n  for d from walk_ast CS.nodes source\n    info '^54^', d\n  #.........................................................................................................\n  return null\n\n############################################################################################################\nif module is require.main then do =>\n  # await @demo()\n  # @demo_ast_walker()\n  @demo_lexer()\n"
  ]
}