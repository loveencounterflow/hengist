{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/second-demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DEMO-COMPOSE-REGEXP'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\ntruth                     = GUY.trm.truth.bind GUY.trm\n#...........................................................................................................\n{ equals\n  copy_regex }            = GUY.samesame\n{ to_width }              = require 'to-width'\n#...........................................................................................................\n{ atomic\n  bound\n  capture\n  charSet\n  either\n  flags\n  lookAhead\n  lookBehind\n  maybe\n  namedCapture\n  noBound\n  notAhead\n  notBehind\n  ref\n  sequence\n  suffix                } = require 'compose-regexp-commonjs'\nH                         = require '../../../lib/helpers'\n{ Interlex }              = require '../../../apps/intertext-lexer'\n\n\n#-----------------------------------------------------------------------------------------------------------\nunicode = ( x ) -> if ( x instanceof RegExp ) then copy_regex x, { unicode: true, } else flags.add 'u', x\nsticky  = ( x ) -> if ( x instanceof RegExp ) then copy_regex x, { sticky: true,  } else flags.add 'y', x\ndotall  = ( x ) -> if ( x instanceof RegExp ) then copy_regex x, { dotAll: true,  } else flags.add 's', x\ndotAll  = dotall\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_htmlish = ->\n  n       = namedCapture\n  modes   = {}\n  lexer   = new Interlex()\n  #.........................................................................................................\n  do =>\n    ### NOTE arbitrarily forbidding question marks and not using fallback token to test for error tokens ###\n    mode    = 'plain'\n    lexer.add_lexeme mode, 'escchr',       /\\\\(?<chr>.)/u\n    lexer.add_lexeme mode, 'text',         suffix '+', charSet.complement /[<`\\\\?]/u\n    lexer.add_lexeme mode, 'gosub_tag',    /<(?<lslash>\\/?)/u\n    lexer.add_lexeme mode, 'E_backticks',  /`+/\n    # lexer.add_lexeme mode, 'other',        /./u\n  #.........................................................................................................\n  do =>\n    mode    = 'tag'\n    lexer.add_lexeme mode, 'escchr',       /\\\\(?<chr>.)/u\n    lexer.add_lexeme mode, 'return',       />/u\n    # lexer.add_lexeme mode, 'return',     either ( sequence ( notBehind '\\\\' ), />/u ), ( /^>/u )\n    lexer.add_lexeme mode, 'text',         suffix '+', charSet.complement /[>\\\\]/u\n    lexer.add_lexeme mode, 'other',        /./u\n  #.........................................................................................................\n  lexer.finalize()\n  #.........................................................................................................\n  probes        = [\n    # \"helo <bold>`world`</bold>\"\n    # \"<x v=\\\\> z=42>\"\n    \"<x v=\\\\> z=42\\\\>\"\n    # \"a <b\"\n    # \"what? error?\"\n    # \"d <\"\n    # \"<c\"\n    # \"<\"\n    # \"\"\n    # \"helo \\\\<bold>`world`</bold>\"\n    ]\n  #.......................................................................................................\n  for probe in probes\n    whisper '^31-1^', '————————————————————————————————————————————————————————————————————————'\n    tokens    = lexer.run probe\n    #.......................................................................................................\n    for token, idx in tokens\n      continue unless token.key is '$error'\n      token.key = GUY.trm.red token.key\n    H.tabulate \"tokens of #{rpr probe}\", tokens\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # demo_1()\n  # demo_flags()\n  demo_htmlish()\n  # res = [\n  #   /a(?<chr>.).*/u\n  #   /.*d(?<chr>.)/u\n  #   ]\n  # # re_2 = /(?<a>a(?<a𝔛b>.)).*(?<d>d(?<d𝔛b>.))/u\n  # for re, idx in res\n  #   name = \"g#{idx + 1}\"\n  #   source = re.source.replace /(?<!\\\\)\\(\\?<([^>]+)>/gu, \"(?<#{name}𝔛$1>\"\n  #   source = \"(?<#{name}>#{source})\"\n  #   res[ idx ] = new RegExp source, re.flags\n  # debug '^45-1^', res\n  # debug '^45-1^', re = sequence res...\n  # urge { ( 'abcdef'.match re )?.groups..., }\n\n"
  ]
}