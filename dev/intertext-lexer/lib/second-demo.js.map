{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/second-demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DEMO-COMPOSE-REGEXP'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\ntruth                     = GUY.trm.truth.bind GUY.trm\n#...........................................................................................................\n{ equals\n  copy_regex }            = GUY.samesame\n{ to_width }              = require 'to-width'\n#...........................................................................................................\n{ atomic\n  bound\n  capture\n  charSet\n  either\n  flags\n  lookAhead\n  lookBehind\n  maybe\n  namedCapture\n  noBound\n  notAhead\n  notBehind\n  ref\n  sequence\n  suffix                } = require 'compose-regexp-commonjs'\nH                         = require '../../../lib/helpers'\n{ Interlex }              = require '../../../apps/intertext-lexer'\n\n\n#-----------------------------------------------------------------------------------------------------------\nunicode = ( x ) -> if ( x instanceof RegExp ) then copy_regex x, { unicode: true, } else flags.add 'u', x\nsticky  = ( x ) -> if ( x instanceof RegExp ) then copy_regex x, { sticky: true,  } else flags.add 'y', x\ndotall  = ( x ) -> if ( x instanceof RegExp ) then copy_regex x, { dotAll: true,  } else flags.add 's', x\ndotAll  = dotall\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  lexemes = []\n  n       = namedCapture\n  #.........................................................................................................\n  lexemes.push n '$escchr',       /\\\\(?<chr>.)/u\n  lexemes.push n '$backslash',    '\\\\'\n  lexemes.push n '$backtick1',    ( notBehind '`' ), '`',   ( notAhead '`' )\n  lexemes.push n '$backtick3',    ( notBehind '`' ), '```', ( notAhead '`' )\n  lexemes.push n '$E_backticks',  /`+/\n  lexemes.push n '$digits',       /\\d+/\n  lexemes.push n '$tag',          /<[^>]+>/\n  lexemes.push n '$nl',           /\\n/u\n  #.........................................................................................................\n  lexemes.push n '$ws',           /// [ \\u{000b}-\\u{000d}\n                                        \\u{2000}-\\u{200a}\n                                        \\u{0009}\\u{0020}\\u{0085}\\u{00a0}\\u{2028}\\u{2029}\\u{202f}\\u{205f}\n                                        \\u{3000} ]+ ///u\n  lexemes.push n '$letters',      /\\p{L}+/u\n  lexemes.push n '$other',        /./u\n  lexemes.push n '$other_digits', /[0-9]+/\n  #.........................................................................................................\n  pattern       = sticky unicode dotall either lexemes...\n  source        = \"\"\"\n    foo `bar` <i>1234\\\\</i>\\n\\\\\n    foo ``bar``\n    foo ```bar```\n    \\\\`\\x20\\x20\n    \\\\\"\"\"\n  lexer = new Interlex()\n  prv_last_idx = 0\n  info '^30-33^', 0\n  while ( match = source.match pattern )?\n    if pattern.lastIndex is prv_last_idx\n      warn '^30-33^', GUY.trm.reverse \"detected loop, stopping\"\n      break\n    token = lexer._token_from_match prv_last_idx, match\n    info '^30-33^', pattern.lastIndex, token\n    echo() if token.key is 'nl'\n    prv_last_idx = pattern.lastIndex\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_flags = ->\n  info '^19-1^', unicode dotall /a/\n  info '^19-2^', dotall unicode /a/\n  info '^19-3^', flags.add 'u', /a/\n  try info '^19-4^', flags.add 'u', /./ catch error then warn GUY.trm.reverse error.message\n  try info '^19-5^', ( unicode /./ ) catch error then warn GUY.trm.reverse error.message\n  info '^19-6^', copy_regex /./, { unicode: true, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_htmlish = ->\n  n       = namedCapture\n  modes   = {}\n  lexer   = new Interlex()\n  #.........................................................................................................\n  do =>\n    mode    = 'plain'\n    lexer.add_lexeme mode, 'escchr',       /\\\\(?<chr>.)/u\n    lexer.add_lexeme mode, 'plain',        suffix '+', charSet.complement /[<`\\\\]/u\n    lexer.add_lexeme mode, 'start_tag',    /<(?<lslash>\\/?)/u\n    lexer.add_lexeme mode, 'E_backticks',  /`+/\n    lexer.add_lexeme mode, 'other',        /./u\n  #.........................................................................................................\n  do =>\n    mode    = 'tag'\n    lexer.add_lexeme mode, 'escchr',       /\\\\(?<chr>.)/u\n    lexer.add_lexeme mode, 'stop_tag',     sequence ( notBehind '\\\\' ), />/u\n    lexer.add_lexeme mode, 'plain',        suffix '+', charSet.complement /[\\\\]/u\n    lexer.add_lexeme mode, 'other',        /./u\n  #.........................................................................................................\n  lexer.finalize()\n  #.........................................................................................................\n  probes        = [\n    \"helo <bold>`world`</bold>\"\n    \"<x v=\\\\> z=42>\"\n    \"<x v=\\\\> z=42\\\\>\"\n    \"helo \\\\<bold>`world`</bold>\"\n    ]\n  #.......................................................................................................\n  for probe in probes\n    lexer.reset()\n    lexer.state.mode    = 'plain' # 'tag'\n    lexer.state.stack   = []\n    pattern = lexer.registry[ lexer.state.mode ].pattern\n    tokens  = []\n    #.......................................................................................................\n    loop\n      match = probe.match pattern\n      unless match?\n        ### TAINT complain if not at end or issue error token ###\n        break\n      if pattern.lastIndex is lexer.state.prv_last_idx\n        if match?\n          warn '^31-2^', { match.groups..., }\n          warn '^31-3^', token  = lexer._token_from_match lexer.state.prv_last_idx, match, lexer.state.mode\n          ### TAINT uses code units, should use codepoints ###\n          center = token.stop\n          left   = Math.max 0, center - 11\n          right  = Math.min probe.length, center + 11\n          before = probe[ left ... center ]\n          after  = probe[ center + 1 .. right ]\n          mid    = probe[ center ]\n          warn '^31-7^', { before, mid, after, }\n          warn '^31-9^', GUY.trm.reverse \"pattern #{rpr token.key} matched empty string; stopping\"\n        else\n          warn '^31-10^', GUY.trm.reverse \"nothing matched; detected loop, stopping\"\n        break\n      token = lexer._token_from_match lexer.state.prv_last_idx, match, lexer.state.mode\n      tokens.push token\n      # info '^31-11^', pattern.lastIndex, token\n      #.....................................................................................................\n      if token.key.startsWith 'start_'\n        lexer.state.stack.push lexer.state.mode\n        lexer.state.mode              = token.key.replace 'start_', ''\n        old_last_idx      = pattern.lastIndex\n        pattern           = lexer.registry[ lexer.state.mode ].pattern\n        pattern.lastIndex = old_last_idx\n      #.....................................................................................................\n      else if token.key.startsWith 'stop_'\n        # error if lexer.state.stack.length < 1\n        lexer.state.mode              = lexer.state.stack.pop()\n        old_last_idx      = pattern.lastIndex\n        pattern           = lexer.registry[ lexer.state.mode ].pattern\n        pattern.lastIndex = old_last_idx\n      #.....................................................................................................\n      echo() if token.key is 'nl'\n      lexer.state.prv_last_idx = pattern.lastIndex\n    H.tabulate \"tokens of #{rpr probe}\", tokens\n  #.......................................................................................................\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # demo_1()\n  # demo_flags()\n  demo_htmlish()\n\n\n"
  ]
}