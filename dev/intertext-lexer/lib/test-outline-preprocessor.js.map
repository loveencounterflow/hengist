{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-outline-preprocessor.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER/TESTS/OUTLINE-PREPROC'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\n# PATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\nH                         = require './helpers'\n\n\n\n#===========================================================================================================\n# START AND STOP TOKENS\n#-----------------------------------------------------------------------------------------------------------\n@outline_preprocessor_instantiation = ( T, done ) ->\n  { Interlex\n    compose\n    tools   } = require '../../../apps/intertext-lexer'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ null, { blank_line_count: 2, indent_module: 2, }, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      parser  = new tools.outline._Preparser probe\n      resolve parser.cfg\n  #.........................................................................................................\n  # lexer = new Interlex()\n  # debug '^23423^', lexer.types.create.ilx_walk_source_or_cfg null\n  done?()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@outline_preprocessor_basic = ( T, done ) ->\n  { Interlex\n    compose\n    tools       } = require '../../../apps/intertext-lexer'\n  { Transformer } = require '../../../apps/moonriver'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ '', \"N\", null ]\n    [ 'helo', \"0'helo'\", null ]\n    [ 'abc\\ndef', \"0'abc',0'def'\", null ]\n    [ 'abc\\ndef\\n\\n', \"0'abc',0'def',N,N\", null ]\n    [ 'abc\\ndef\\n\\n\\nxyz', \"0'abc',0'def',N,N,0'xyz'\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      # H.show_lexer_as_table 'new_syntax_for_modes', lexer; process.exit 111\n      # echo '^97-1^', '————————————————————————————'\n      result      = []\n      tokens      = []\n      parser      = tools.outliner.$010_lexing.as_pipeline()\n      parser.send probe\n      for d from parser.walk probe\n        tokens.push d\n        switch d.tid\n          when 'blank'\n            result.push 'N'\n          when 'material'\n            result.push \"#{d.data.level}#{rpr d.value}\"\n      result = result.join ','\n      # debug '^4353^', ( ( GUY.trm.reverse ( if d.data.active then GUY.trm.green else GUY.trm.red ) rpr d.value ) for d in tokens ).join ''\n      # H.tabulate \"#{rpr probe}\", tokens\n      # echo [ probe, result, error, ]\n      resolve result\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@outline_blank_line_consolidation = ( T, done ) ->\n  { Interlex\n    compose\n    tools       } = require '../../../apps/intertext-lexer'\n  { Transformer } = require '../../../apps/moonriver'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ '', \"N\", null ]\n    [ 'helo', \"0'helo'\", null ]\n    [ 'abc\\ndef', \"0'abc',0'def'\", null ]\n    [ 'abc\\ndef\\n\\n', \"0'abc',0'def',N,N\", null ]\n    [ 'abc\\ndef\\n\\n\\nxyz', \"0'abc',0'def',N,N,0'xyz'\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      # H.show_lexer_as_table 'new_syntax_for_modes', lexer; process.exit 111\n      # echo '^97-1^', '————————————————————————————'\n      result      = []\n      tokens      = []\n      parser      = tools.outliner.$020_consolidate.as_pipeline()\n      parser.send probe\n      for d from parser.walk probe\n        tokens.push d\n        switch d.tid\n          when 'blank'\n            result.push 'N'\n          when 'material'\n            result.push \"#{d.data.level}#{rpr d.value}\"\n      result = result.join ','\n      # debug '^4353^', ( ( GUY.trm.reverse ( if d.data.active then GUY.trm.green else GUY.trm.red ) rpr d.value ) for d in tokens ).join ''\n      H.tabulate \"#{rpr probe}\", tokens\n      # echo [ probe, result, error, ]\n      resolve result\n  #.........................................................................................................\n  done?()\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @outline_preprocessor_instantiation()\n  # @outline_preprocessor_basic()\n  # test @outline_preprocessor_basic\n  test @outline_blank_line_consolidation\n  # test @\n"
  ]
}