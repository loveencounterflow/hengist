{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-outline-preprocessor.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER/TESTS/OUTLINE-PREPROC'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\n# PATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\nH                         = require './helpers'\n\n\n\n#===========================================================================================================\n# START AND STOP TOKENS\n#-----------------------------------------------------------------------------------------------------------\n@outline_preprocessor_instantiation = ( T, done ) ->\n  { Interlex\n    compose\n    tools   } = require '../../../apps/intertext-lexer'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ null, undefined, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      parser  = new tools.Outliner probe\n      resolve parser.cfg\n  #.........................................................................................................\n  # lexer = new Interlex()\n  # debug '^23423^', lexer.types.create.ilx_walk_source_or_cfg null\n  done?()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@outline_preprocessor_lexing = ( T, done ) ->\n  { Interlex\n    compose\n    tools       } = require '../../../apps/intertext-lexer'\n  { Transformer } = require '../../../apps/moonriver'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ '', 'N', null ]\n    [ 'helo', \"0'helo',N\", null ]\n    [ 'abc\\ndef', \"0'abc',N,0'def',N\", null ]\n    [ 'abc\\ndef\\n\\n', \"0'abc',N,0'def',N,N,N\", null ]\n    [ 'abc\\ndef\\n\\n\\nxyz', \"0'abc',N,0'def',N,N,N,0'xyz',N\", null ]\n    [ 'abc\\n def\\n\\n\\nxyz', \"0'abc',N,1'def',N,N,N,0'xyz',N\", null ]\n    [ 'abc\\n  def\\n\\n\\nxyz', \"0'abc',N,2'def',N,N,N,0'xyz',N\", null ]\n    [ 'abc\\n   def\\n\\n\\nxyz', \"0'abc',N,3'def',N,N,N,0'xyz',N\", null ]\n    [ 'abc\\n    def\\n\\n\\nxyz', \"0'abc',N,4'def',N,N,N,0'xyz',N\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      # H.show_lexer_as_table 'new_syntax_for_modes', lexer; process.exit 111\n      # echo '^97-1^', '————————————————————————————'\n      result      = []\n      tokens      = []\n      parser      = tools.Outliner.$010_lexing.as_pipeline()\n      parser.send probe\n      for d from parser.walk_and_stop probe\n        tokens.push d\n        switch d.$key\n          when 'outline:nl', 'outline:nls'\n            result.push 'N'\n          when 'outline:material'\n            result.push \"#{d.data.spc_count}#{rpr d.data.material}\"\n          else\n            result.push rpr d\n      result = result.join ','\n      # debug '^4353^', ( ( GUY.trm.reverse ( if d.data.active then GUY.trm.green else GUY.trm.red ) rpr d.value ) for d in tokens ).join ''\n      H.tabulate \"#{rpr probe}\", tokens\n      # echo [ probe, result, error, ]\n      resolve result\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@outline_blank_line_consolidation = ( T, done ) ->\n  { Interlex\n    compose\n    tools       } = require '../../../apps/intertext-lexer'\n  { Transformer } = require '../../../apps/moonriver'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ '', 'N1', null ]\n    [ 'helo', \"0'helo',N1\", null ]\n    [ 'abc\\ndef', \"0'abc',N1,0'def',N1\", null ]\n    [ 'abc\\ndef\\n\\n', \"0'abc',N1,0'def',N3\", null ]\n    [ 'abc\\ndef\\n\\n\\nxyz', \"0'abc',N1,0'def',N3,0'xyz',N1\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      # H.show_lexer_as_table 'new_syntax_for_modes', lexer; process.exit 111\n      # echo '^97-1^', '————————————————————————————'\n      result      = []\n      tokens      = []\n      parser      = tools.Outliner.$020_consolidate.as_pipeline()\n      parser.send probe\n      for d from parser.walk_and_stop probe\n        tokens.push d\n        switch d.$key\n          when 'outline:nl', 'outline:nls'\n            result.push \"N#{d.data.nl_count}\"\n          when 'outline:material'\n            result.push \"#{d.data.spc_count}#{rpr d.data.material}\"\n          else\n            result.push rpr d\n      result = result.join ','\n      # debug '^4353^', ( ( GUY.trm.reverse ( if d.data.active then GUY.trm.green else GUY.trm.red ) rpr d.value ) for d in tokens ).join ''\n      # H.tabulate \"#{rpr probe}\", tokens\n      # echo [ probe, result, error, ]\n      resolve result\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@outline_structure = ( T, done ) ->\n  { Interlex\n    compose\n    tools       } = require '../../../apps/intertext-lexer'\n  { Transformer } = require '../../../apps/moonriver'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ '', 'null>0,0N1,0>null', null ]\n    [ 'helo', \"null>0,0'helo',0N1,0>null\", null ]\n    [ 'abc\\ndef', \"null>0,0'abc',0N1,0'def',0N1,0>null\", null ]\n    [ 'abc\\ndef\\n\\n', \"null>0,0'abc',0N1,0'def',0N3,0>null\", null ]\n    [ 'abc\\ndef\\n\\n\\nxyz', \"null>0,0'abc',0N1,0'def',0N3,0'xyz',0N1,0>null\", null ]\n    [ 'abc\\ndef\\n\\n\\n  xyz\\n  !', \"null>0,0'abc',0N1,0'def',0N3,0>2,2'xyz',2N1,2'!',2N1,2>null\", null ]\n    [ 'abc\\ndef\\n\\n\\n  xyz\\n\\n\\n', \"null>0,0'abc',0N1,0'def',0N3,0>2,2'xyz',2N4,2>null\", null ]\n    [ 'abc\\ndef\\n  xyz\\n\\n\\n', \"null>0,0'abc',0N1,0'def',0N1,0>2,2'xyz',2N4,2>null\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      # H.show_lexer_as_table 'new_syntax_for_modes', lexer; process.exit 111\n      # echo '^97-1^', '————————————————————————————'\n      result      = []\n      tokens      = []\n      parser      = tools.Outliner.$030_dentchgs.as_pipeline()\n      parser.send probe\n      for d from parser.walk_and_stop probe\n        tokens.push d\n        switch d.$key\n          when 'outline:nl', 'outline:nls'\n            result.push \"#{d.data.spc_count}N#{d.data.nl_count}\"\n          when 'outline:material'\n            result.push \"#{d.data.spc_count}#{rpr d.data.material}\"\n          when 'outline:dentchg'\n            result.push \"#{d.data.from}>#{rpr d.data.to}\"\n          else\n            result.push rpr d\n      result = result.join ','\n      # debug '^4353^', ( ( GUY.trm.reverse ( if d.data.active then GUY.trm.green else GUY.trm.red ) rpr d.value ) for d in tokens ).join ''\n      # H.norm_tabulate \"#{rpr probe}\", tokens\n      # echo [ probe, result, error, ]\n      resolve result\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@outline_blocks = ( T, done ) ->\n  { Interlex\n    compose\n    tools       } = require '../../../apps/intertext-lexer'\n  { Transformer } = require '../../../apps/moonriver'\n  { DATOM       } = require '../../../apps/datom'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ '', 'null>0,0N1,0>null', null ]\n    [ '\\n', 'null>0,0N2,0>null', null ]\n    [ '\\n\\n', 'null>0,0N3,0>null', null ]\n    [ 'helo', \"null>0,0【,0'helo',0】,0N1,0>null\", null ]\n    [ 'abc\\ndef', \"null>0,0【,0'abc',0N1,0'def',0】,0N1,0>null\", null ]\n    [ 'abc\\ndef\\n\\n', \"null>0,0【,0'abc',0N1,0'def',0】,0N3,0>null\", null ]\n    [ 'abc\\ndef\\n\\n\\nxyz', \"null>0,0【,0'abc',0N1,0'def',0】,0N3,0【,0'xyz',0】,0N1,0>null\", null ]\n    [ 'abc\\ndef\\n\\n\\n  xyz\\n  !', \"null>0,0【,0'abc',0N1,0'def',0】,0N3,0>2,2【,2'xyz',2N1,2'!',2】,2N1,2>null\", null ]\n    [ 'abc\\ndef\\n\\n\\n  xyz\\n\\n\\n', \"null>0,0【,0'abc',0N1,0'def',0】,0N3,0>2,2【,2'xyz',2】,2N4,2>null\", null ]\n    [ 'abc\\ndef\\n  xyz\\n\\n\\n', \"null>0,0【,0'abc',0N1,0'def',0】,0N1,0>2,2【,2'xyz',2】,2N4,2>null\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      # H.show_lexer_as_table 'new_syntax_for_modes', lexer; process.exit 111\n      # echo '^97-1^', '————————————————————————————'\n      result      = []\n      tokens      = []\n      parser      = tools.Outliner.$040_blocks.as_pipeline()\n      parser.send probe\n      for d from parser.walk_and_stop probe\n        tokens.push d\n        continue if d.$stamped\n        switch d.$key\n          when 'outline:nl', 'outline:nls'\n            result.push \"#{d.data.spc_count}N#{d.data.nl_count}\"\n          when 'outline:material'\n            result.push \"#{d.data.spc_count}#{rpr d.data.material}\"\n          when 'outline:dentchg'\n            result.push \"#{d.data.from}>#{rpr d.data.to}\"\n          when 'outline:block:start'\n            result.push \"#{d.data.spc_count}【\"\n          when 'outline:block:stop'\n            result.push \"#{d.data.spc_count}】\"\n          else\n            result.push rpr d\n      result = result.join ','\n      # debug '^4353^', ( ( GUY.trm.reverse ( if d.data.active then GUY.trm.green else GUY.trm.red ) rpr d.value ) for d in tokens ).join ''\n      # H.norm_tabulate \"#{rpr probe}\", tokens\n      # echo [ probe, result, error, ]\n      resolve result\n  #.........................................................................................................\n  done?()\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @outline_preprocessor_instantiation()\n  # test @outline_preprocessor_instantiation\n  # @outline_preprocessor_lexing()\n  # test @outline_preprocessor_lexing\n  # test @outline_blank_line_consolidation\n  # test @outline_structure\n  # @outline_blocks()\n  # test @outline_blocks\n  test @\n"
  ]
}