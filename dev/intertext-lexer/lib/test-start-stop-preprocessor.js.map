{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-start-stop-preprocessor.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER/TESTS/START-STOP-PREPROC'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\n# PATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\nH                         = require './helpers'\n\n\n\n#===========================================================================================================\n# START AND STOP TOKENS\n#-----------------------------------------------------------------------------------------------------------\n@start_stop_preprocessor_basic = ( T, done ) ->\n  { Interlex\n    compose\n    tools   } = require '../../../apps/intertext-lexer'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ 'helo', { active: false, }, ], [ [ 'helo\\n', false ] ], null ]\n    [ [ 'helo <?start?>world<?stop?>!', { active: false, }, ], [ [ 'helo <?start?>', false ], [ 'world', true ], [ '<?stop?>!\\n', false ] ], null ]\n    [ [ 'helo <?start?>world<?stop_all?>!', { active: false, }, ], [ [ 'helo <?start?>', false ], [ 'world', true ], [ '<?stop_all?>!\\n', false ] ], null ]\n    [ [ 'helo <?start?>world<?stop-all?>!', { active: false, }, ], [ [ 'helo <?start?>', false ], [ 'world', true ], [ '<?stop-all?>!\\n', false ] ], null ]\n    [ [ 'helo <?start?>world<?stop-all\\\\?>!', { active: false, }, ], [ [ 'helo <?start?>', false ], [ 'world<?stop-all\\\\?>!\\n', true ] ], null ]\n    [ [ 'helo <?start?>world\\n<?stop_all?>!', { active: false, }, ], [ [ 'helo <?start?>', false ], [ 'world\\n', true ], [ '<?stop_all?>!\\n', false ] ], null ]\n    [ [ 'helo <?stop?>comments\\ngo\\nhere\\n', { active: true } ], [ [ 'helo ', true ], [ '<?stop?>comments\\n', false ], [ 'go\\n', false ], [ 'here\\n', false ], [ '\\n', false ] ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    # await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    # H.show_lexer_as_table 'new_syntax_for_modes', lexer; process.exit 111\n    [ source\n      cfg     ] = probe\n    result      = []\n    tokens      = []\n    parser      = new tools.Start_stop_preprocessor cfg\n    for d from parser.walk source\n      tokens.push d\n      result.push [ d.value, d.data.active, ]\n    # debug '^4353^', ( ( GUY.trm.reverse ( if d.data.active then GUY.trm.green else GUY.trm.red ) rpr d.value ) for d in tokens ).join ''\n    # H.tabulate \"#{rpr probe}\", tokens\n    echo [ probe, result, error, ]\n    #.....................................................................................................\n    T?.eq result, matcher\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@positioning_api = ( T, done ) ->\n  { Interlex\n    compose\n    tools   } = require '../../../apps/intertext-lexer'\n  #.........................................................................................................\n  new_lexer = ( cfg ) ->\n    lexer   = new Interlex { split: 'lines', cfg..., }\n    #.........................................................................................................\n    do =>\n      mode = 'plain'\n      lexer.add_lexeme { mode, tid: 'number',   pattern: /[0-9]+/u,       reserved: [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ], }\n      lexer.add_lexeme { mode, tid: 'ws',       pattern: /\\s+/u,          reserved: ' ', }\n      lexer.add_lexeme { mode, tid: 'nl',       pattern: /$/u, value: '\\n', }\n      lexer.add_catchall_lexeme { mode, tid: 'text', concat: true, }\n    #.........................................................................................................\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ 'helo', { lnr: 3, x: 10, } ], \"text'helo'3,10,3,14|nl'\\\\n'3,14,3,14\", null ]\n    [ [ 'helo', { lnr: 3, x: -10, } ], null, /not a valid ilx_set_offset_cfg/, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      # H.show_lexer_as_table 'new_syntax_for_modes', lexer; process.exit 111\n      [ source\n        offset  ] = probe\n      result      = []\n      tokens      = []\n      lexer       = new_lexer()\n      lexer.set_offset offset\n      for d from lexer.walk source\n        urge '^33-2^', rpr d.value\n        tokens.push d\n        result.push \"#{d.tid}#{rpr d.value}#{d.lnr1},#{d.x1},#{d.lnr2},#{d.x2}\"\n      # debug '^4353^', ( ( GUY.trm.reverse ( if d.data.active then GUY.trm.green else GUY.trm.red ) rpr d.value ) for d in tokens ).join ''\n      H.tabulate \"#{rpr probe}\", tokens\n      result = result.join '|'\n      resolve result\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@start_stop_preprocessor_positioning = ( T, done ) ->\n  { Interlex\n    compose\n    tools   } = require '../../../apps/intertext-lexer'\n  #.........................................................................................................\n  new_lexer = ( cfg ) ->\n    lexer   = new Interlex { split: 'lines', cfg..., }\n    #.........................................................................................................\n    do =>\n      mode = 'plain'\n      lexer.add_lexeme { mode, tid: 'escchr',   pattern: /\\\\(?<chr>.)/u,  reserved: '\\\\', }\n      lexer.add_lexeme { mode, tid: 'number',   pattern: /[0-9]+/u,       reserved: [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ], }\n      lexer.add_lexeme { mode, tid: 'ws',       pattern: /\\s+/u,          reserved: ' ', }\n      lexer.add_lexeme { mode, tid: 'nl',       pattern: /$/u, value: '\\n', }\n      lexer.add_catchall_lexeme { mode, tid: 'text', concat: true, }\n    #.........................................................................................................\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ 'helo', { active: false, }, ], [ [ 'helo\\n', false ] ], null ]\n    [ [ 'helo <?start?>world<?stop?>!', { active: false, }, ], [ [ 'helo <?start?>', false ], [ 'world', true ], [ '<?stop?>!\\n', false ] ], null ]\n    [ [ 'helo <?start?>world<?stop_all?>!', { active: false, }, ], [ [ 'helo <?start?>', false ], [ 'world', true ], [ '<?stop_all?>!\\n', false ] ], null ]\n    [ [ 'helo <?start?>world<?stop-all?>!', { active: false, }, ], [ [ 'helo <?start?>', false ], [ 'world', true ], [ '<?stop-all?>!\\n', false ] ], null ]\n    [ [ 'helo <?start?>world<?stop-all\\\\?>!', { active: false, }, ], [ [ 'helo <?start?>', false ], [ 'world<?stop-all\\\\?>!\\n', true ] ], null ]\n    [ [ 'helo <?start?>world\\n<?stop_all?>!', { active: false, }, ], [ [ 'helo <?start?>', false ], [ 'world\\n', true ], [ '<?stop_all?>!\\n', false ] ], null ]\n    [ [ 'helo <?stop?>comments\\ngo\\nhere\\n', { active: true } ], [ [ 'helo ', true ], [ '<?stop?>comments\\n', false ], [ 'go\\n', false ], [ 'here\\n', false ], [ '\\n', false ] ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    # await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    # H.show_lexer_as_table 'new_syntax_for_modes', lexer; process.exit 111\n    [ source\n      cfg     ] = probe\n    result      = []\n    tokens      = []\n    parser      = new tools.Start_stop_preprocessor cfg\n    lexer       = new Interlex { split: 'lines', }\n    for d from parser.walk source\n      whisper '^33-1^', rpr d.value\n      if d.data.active\n        for token from lexer.walk d.value\n          urge '^33-2^', rpr token.value\n          tokens.push token\n      else\n        tokens.push d\n      # result.push [ d.value, d.data.active, ]\n    # debug '^4353^', ( ( GUY.trm.reverse ( if d.data.active then GUY.trm.green else GUY.trm.red ) rpr d.value ) for d in tokens ).join ''\n    H.tabulate \"#{rpr probe}\", tokens\n    # echo [ probe, result, error, ]\n    #.....................................................................................................\n    T?.eq result, matcher\n  #.........................................................................................................\n  done?()\n  return null\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # @positioning_api()\n  test @positioning_api\n  # @start_stop_preprocessor_positioning()\n  # test @start_stop_preprocessor_positioning\n"
  ]
}