{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-token-creation.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER/TESTS/BASICS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\nH2                        = require './helpers'\nafter                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@__token_creation_with_dataclass = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex } = require '../../../apps/intertext-lexer'\n  lexer = new Interlex()\n  #.........................................................................................................\n  do ->\n    T?.ok 'Token' in Object.keys lexer.types.registry\n    try lexer.types.create.Token() catch error then warn '^93-1^', GUY.trm.reverse error.message\n    T?.throws /not a valid/, -> lexer.types.create.Token()\n    return null\n  #.........................................................................................................\n  do ->\n    debug '^93-1^', lexer.types.create.Token { $key: 'foo:bar', }\n    d = lexer.types.create.Token { $key: 'plain:p:start', lnr1: 123, }\n    e = d.set_mode 'tag'\n    debug '^93-1^', d\n    debug '^93-1^', e\n    return null\n  #.........................................................................................................\n  done?()\n  return null\n\n############################################################################################################\nif require.main is module then do =>\n  # test @lex_tags\n  test @\n  # @token_creation_with_dataclass()\n  # test @lex_tags_with_rpr\n  # test @parse_md_stars_markup\n\n\n"
  ]
}