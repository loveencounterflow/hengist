{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-linewise.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER/TESTS/LINEWISE'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\nH2                        = require './helpers'\nafter                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n\n#-----------------------------------------------------------------------------------------------------------\n@use_linewise_lexing_with_external_iterator_no_linewise_cfg = ( T, done ) ->\n  FS      = require 'node:fs'\n  GUY     = require '../../../apps/guy'\n  { Interlex, compose: c, } = require '../../../apps/intertext-lexer'\n  probes_and_matchers = [\n    [ [ '../../../assets/a-few-words.txt', null ], [ { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: \"Ångström's\", lnr1: 1, x1: 0, x2: 10, x: null, source: \"Ångström's\", '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'éclair', lnr1: 2, x1: 0, x2: 6, x: null, source: 'éclair', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: \"éclair's\", lnr1: 3, x1: 0, x2: 8, x: null, source: \"éclair's\", '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'éclairs', lnr1: 4, x1: 0, x2: 7, x: null, source: 'éclairs', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'éclat', lnr1: 5, x1: 0, x2: 5, x: null, source: 'éclat', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: \"éclat's\", lnr1: 6, x1: 0, x2: 7, x: null, source: \"éclat's\", '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'élan', lnr1: 7, x1: 0, x2: 4, x: null, source: 'élan', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: \"élan's\", lnr1: 8, x1: 0, x2: 6, x: null, source: \"élan's\", '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'émigré', lnr1: 9, x1: 0, x2: 6, x: null, source: 'émigré', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: \"émigré's\", lnr1: 10, x1: 0, x2: 8, x: null, source: \"émigré's\", '$key': '^plain' } ] ]\n    [ [ '../../../assets/datamill/empty-file.txt', null ], [ { mode: 'plain', tid: 'empty', mk: 'plain:empty', jump: null, value: '', lnr1: 1, x1: 0, x2: 0, x: null, source: '', '$key': '^plain' } ] ]\n    [ [ '../../../assets/datamill/file-with-single-nl.txt', null ], [ { mode: 'plain', tid: 'empty', mk: 'plain:empty', jump: null, value: '', lnr1: 1, x1: 0, x2: 0, x: null, source: '', '$key': '^plain' }, { mode: 'plain', tid: 'empty', mk: 'plain:empty', jump: null, value: '', lnr1: 2, x1: 0, x2: 0, x: null, source: '', '$key': '^plain' } ] ]\n    [ [ '../../../assets/datamill/file-with-3-lines-no-eofnl.txt', null ], [ { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: '1', lnr1: 1, x1: 0, x2: 1, x: null, source: '1', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: '2', lnr1: 2, x1: 0, x2: 1, x: null, source: '2', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: '3', lnr1: 3, x1: 0, x2: 1, x: null, source: '3', '$key': '^plain' } ] ]\n    [ [ '../../../assets/datamill/file-with-3-lines-with-eofnl.txt', null ], [ { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: '1', lnr1: 1, x1: 0, x2: 1, x: null, source: '1', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: '2', lnr1: 2, x1: 0, x2: 1, x: null, source: '2', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: '3', lnr1: 3, x1: 0, x2: 1, x: null, source: '3', '$key': '^plain' }, { mode: 'plain', tid: 'empty', mk: 'plain:empty', jump: null, value: '', lnr1: 4, x1: 0, x2: 0, x: null, source: '', '$key': '^plain' } ] ]\n    [ [ '../../../assets/datamill/windows-crlf.txt', null ], [ { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'this', lnr1: 1, x1: 0, x2: 4, x: null, source: 'this', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'file', lnr1: 2, x1: 0, x2: 4, x: null, source: 'file', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'written', lnr1: 3, x1: 0, x2: 7, x: null, source: 'written', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'on', lnr1: 4, x1: 0, x2: 2, x: null, source: 'on', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'MS', lnr1: 5, x1: 0, x2: 2, x: null, source: 'MS Notepad', '$key': '^plain' }, { mode: 'plain', tid: 'ws', mk: 'plain:ws', jump: null, value: ' ', lnr1: 5, x1: 2, x2: 3, x: null, source: 'MS Notepad', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'Notepad', lnr1: 5, x1: 3, x2: 10, x: null, source: 'MS Notepad', '$key': '^plain' } ] ]\n    [ [ '../../../assets/datamill/mixed-usage.txt', null ], [ { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'all', lnr1: 1, x1: 0, x2: 3, x: null, source: 'all', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: '𠀀bases', lnr1: 2, x1: 0, x2: 7, x: null, source: '𠀀bases', '$key': '^plain' }, { mode: 'plain', tid: 'empty', mk: 'plain:empty', jump: null, value: '', lnr1: 3, x1: 0, x2: 0, x: null, source: '', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'are', lnr1: 4, x1: 0, x2: 3, x: null, source: 'are belong', '$key': '^plain' }, { mode: 'plain', tid: 'ws', mk: 'plain:ws', jump: null, value: ' ', lnr1: 4, x1: 3, x2: 4, x: null, source: 'are belong', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'belong', lnr1: 4, x1: 4, x2: 10, x: null, source: 'are belong', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: '𠀀to', lnr1: 5, x1: 0, x2: 4, x: null, source: '𠀀to us', '$key': '^plain' }, { mode: 'plain', tid: 'ws', mk: 'plain:ws', jump: null, value: ' ', lnr1: 5, x1: 4, x2: 5, x: null, source: '𠀀to us', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'us', lnr1: 5, x1: 5, x2: 7, x: null, source: '𠀀to us', '$key': '^plain' }, { mode: 'plain', tid: 'empty', mk: 'plain:empty', jump: null, value: '', lnr1: 6, x1: 0, x2: 0, x: null, source: '', '$key': '^plain' } ] ]\n    [ [ '../../../assets/datamill/all-empty-mixed.txt', null ], [ { mode: 'plain', tid: 'empty', mk: 'plain:empty', jump: null, value: '', lnr1: 1, x1: 0, x2: 0, x: null, source: '', '$key': '^plain' }, { mode: 'plain', tid: 'empty', mk: 'plain:empty', jump: null, value: '', lnr1: 2, x1: 0, x2: 0, x: null, source: '', '$key': '^plain' }, { mode: 'plain', tid: 'empty', mk: 'plain:empty', jump: null, value: '', lnr1: 3, x1: 0, x2: 0, x: null, source: '', '$key': '^plain' }, { mode: 'plain', tid: 'empty', mk: 'plain:empty', jump: null, value: '', lnr1: 4, x1: 0, x2: 0, x: null, source: '', '$key': '^plain' }, { mode: 'plain', tid: 'empty', mk: 'plain:empty', jump: null, value: '', lnr1: 5, x1: 0, x2: 0, x: null, source: '', '$key': '^plain' }, { mode: 'plain', tid: 'empty', mk: 'plain:empty', jump: null, value: '', lnr1: 6, x1: 0, x2: 0, x: null, source: '', '$key': '^plain' } ] ]\n    [ [ '../../../assets/datamill/lines-with-trailing-spcs.txt', null ], [ { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'line', lnr1: 1, x1: 0, x2: 4, x: null, source: 'line', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'with', lnr1: 2, x1: 0, x2: 4, x: null, source: 'with', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'trailing', lnr1: 3, x1: 0, x2: 8, x: null, source: 'trailing', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'whitespace', lnr1: 4, x1: 0, x2: 10, x: null, source: 'whitespace', '$key': '^plain' } ] ]\n    [ [ '../../../assets/datamill/lines-with-trailing-spcs.txt', { trim: true } ], [ { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'line', lnr1: 1, x1: 0, x2: 4, x: null, source: 'line', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'with', lnr1: 2, x1: 0, x2: 4, x: null, source: 'with', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'trailing', lnr1: 3, x1: 0, x2: 8, x: null, source: 'trailing', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'whitespace', lnr1: 4, x1: 0, x2: 10, x: null, source: 'whitespace', '$key': '^plain' } ] ]\n    [ [ '../../../assets/datamill/lines-with-trailing-spcs.txt', { trim: false } ], [ { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'line', lnr1: 1, x1: 0, x2: 4, x: null, source: 'line', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'with', lnr1: 2, x1: 0, x2: 4, x: null, source: 'with', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'trailing', lnr1: 3, x1: 0, x2: 8, x: null, source: 'trailing', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'whitespace', lnr1: 4, x1: 0, x2: 10, x: null, source: 'whitespace', '$key': '^plain' } ] ]\n    [ [ '../../../assets/datamill/lines-with-lf.txt', null ], [ { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'line1', lnr1: 1, x1: 0, x2: 5, x: null, source: 'line1', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'line2', lnr1: 2, x1: 0, x2: 5, x: null, source: 'line2', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'line3', lnr1: 3, x1: 0, x2: 5, x: null, source: 'line3', '$key': '^plain' }, { mode: 'plain', tid: 'empty', mk: 'plain:empty', jump: null, value: '', lnr1: 4, x1: 0, x2: 0, x: null, source: '', '$key': '^plain' } ] ]\n    [ [ '../../../assets/datamill/lines-with-crlf.txt', null ], [ { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'line1', lnr1: 1, x1: 0, x2: 5, x: null, source: 'line1', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'line2', lnr1: 2, x1: 0, x2: 5, x: null, source: 'line2', '$key': '^plain' }, { mode: 'plain', tid: 'word', mk: 'plain:word', jump: null, value: 'line3', lnr1: 3, x1: 0, x2: 5, x: null, source: 'line3', '$key': '^plain' }, { mode: 'plain', tid: 'empty', mk: 'plain:empty', jump: null, value: '', lnr1: 4, x1: 0, x2: 0, x: null, source: '', '$key': '^plain' } ] ]\n    ]\n  #.........................................................................................................\n  new_lexer = ->\n    lexer   = new Interlex { linewise: true, }\n    # T?.eq lexer.cfg.linewise, true\n    # T?.eq lexer.state.lnr1, 0\n    mode    = 'plain'\n    # lexer.add_lexeme { mode, tid: 'eol',      pattern: ( /$/u  ), }\n    lexer.add_lexeme { mode, tid: 'ws',       pattern: ( /\\s+/u ), }\n    lexer.add_lexeme { mode, tid: 'word',     pattern: ( /\\S+/u ), }\n    lexer.add_lexeme { mode, tid: 'empty',    pattern: ( /^$/u ), }\n    return lexer\n  #.........................................................................................................\n  for [ probe, matcher, ] in probes_and_matchers\n    lexer           = new_lexer()\n    result          = []\n    tokens          = []\n    [ path\n      cfg ]         = probe\n    path            = PATH.resolve PATH.join __dirname, path\n    # trimmed_source  = ( line + eol for { line, eol, } from GUY.fs.walk_lines_with_positions path, cfg ).join ''\n    # debug '^23-4^', rpr trimmed_source\n    for { lnr1, line, eol, } from GUY.fs.walk_lines_with_positions path, cfg\n      for token from lexer.walk line\n        tokens.push token\n        result.push token\n        T?.eq token.value, token.source[ token.x1 ... token.x2 ]\n    #.........................................................................................................\n    # result = result.join ','\n    # debug '^23-5^', rpr result\n    # echo [ probe, result, ]\n    T?.eq result, matcher\n    H.tabulate ( rpr path ), tokens\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@use_linewise_with_single_text = ( T, done ) ->\n  FS      = require 'node:fs'\n  GUY     = require '../../../apps/guy'\n  { Interlex, compose: c, } = require '../../../apps/intertext-lexer'\n  probes_and_matchers = [\n    [ [ '../../../assets/a-few-words.txt', null ],                                  \"\"\"1:\"Ångström's\",2:'éclair',3:\"éclair's\",4:'éclairs',5:'éclat',6:\"éclat's\",7:'élan',8:\"élan's\",9:'émigré',10:\"émigré's\\\"\"\"\" ]\n    [ [ '../../../assets/datamill/empty-file.txt', null ],                          \"1:''\" ]\n    [ [ '../../../assets/datamill/file-with-single-nl.txt', null ],                 \"1:'',2:''\" ]\n    [ [ '../../../assets/datamill/file-with-3-lines-no-eofnl.txt', null ],          \"1:'1',2:'2',3:'3'\" ]\n    [ [ '../../../assets/datamill/file-with-3-lines-with-eofnl.txt', null ],        \"1:'1',2:'2',3:'3',4:''\" ]\n    [ [ '../../../assets/datamill/windows-crlf.txt', null ],                        \"1:'this',2:'file',3:'written',4:'on',5:'MS',5:' ',5:'Notepad'\" ]\n    [ [ '../../../assets/datamill/mixed-usage.txt', null ],                         \"1:'all',2:'𠀀bases',3:'',4:'are',4:' ',4:'belong',5:'𠀀to',5:' ',5:'us',6:''\" ]\n    [ [ '../../../assets/datamill/all-empty-mixed.txt', null ],                     \"1:'',2:'',3:'',4:'',5:'',6:''\" ]\n    [ [ '../../../assets/datamill/lines-with-trailing-spcs.txt', null ],            \"1:'line',2:'with',3:'trailing',4:'whitespace'\" ]\n    [ [ '../../../assets/datamill/lines-with-trailing-spcs.txt', { trim: true } ],  \"1:'line',2:'with',3:'trailing',4:'whitespace'\" ]\n    [ [ '../../../assets/datamill/lines-with-trailing-spcs.txt', { trim: false } ], \"1:'line',1:'   ',2:'with',2:'   ',3:'trailing',3:'\\\\t\\\\t',4:'whitespace',4:'　 '\" ]\n    [ [ '../../../assets/datamill/lines-with-lf.txt', null ],                       \"1:'line1',2:'line2',3:'line3',4:''\" ]\n    [ [ '../../../assets/datamill/lines-with-crlf.txt', null ],                     \"1:'line1',2:'line2',3:'line3',4:''\" ]\n    ]\n  #.........................................................................................................\n  new_lexer = ( cfg ) ->\n    lexer   = new Interlex { linewise: true, cfg..., }\n    # T?.eq lexer.cfg.linewise, true\n    # T?.eq lexer.state.lnr1, 0\n    mode    = 'plain'\n    # lexer.add_lexeme { mode, tid: 'eol',      pattern: ( /$/u  ), }\n    lexer.add_lexeme { mode, tid: 'ws',       pattern: ( /\\s+/u ), }\n    lexer.add_lexeme { mode, tid: 'word',     pattern: ( /\\S+/u ), }\n    lexer.add_lexeme { mode, tid: 'empty',    pattern: ( /^$/u ), }\n    return lexer\n  #.........................................................................................................\n  for [ probe, matcher, ] in probes_and_matchers\n    result          = []\n    tokens          = []\n    [ path\n      cfg ]         = probe\n    lexer           = new_lexer cfg\n    path            = PATH.resolve PATH.join __dirname, path\n    source          = FS.readFileSync path, { encoding: 'utf-8', }\n    for token from lexer.walk { source, }\n      # info '^23-4^', lexer.state\n      info '^23-4^', token\n      tokens.push token\n      result.push \"#{token.lnr1}:#{rpr token.value}\"\n    #.........................................................................................................\n    result = result.join ','\n    debug '^23-4^', rpr result\n    T?.eq result, matcher\n    # H.tabulate ( rpr probe ), tokens\n  #.........................................................................................................\n  done?()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_nested_codespan_across_lines = ( T, done ) ->\n  { Pipeline,         \\\n    $,\n    transforms,     } = require '../../../apps/moonriver'\n  { Interlex\n    compose  }        = require '../../../apps/intertext-lexer'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  new_toy_md_lexer = ( mode = 'plain' ) ->\n    lexer   = new Interlex { dotall: false, }\n    #.........................................................................................................\n    lexer.add_lexeme { mode: 'plain',   tid: 'escchr',    jump: null,       pattern:  /\\\\(?<chr>.)/u,     }\n    lexer.add_lexeme { mode: 'plain',   tid: 'star1',     jump: null,       pattern:  /(?<!\\*)\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode: 'plain',   tid: 'codespan',  jump: 'literal',  pattern:  /(?<!`)`(?!`)/u,    }\n    lexer.add_lexeme { mode: 'plain',   tid: 'other',     jump: null,       pattern:  /[^*`\\\\]+/u,        }\n    lexer.add_lexeme { mode: 'literal', tid: 'codespan',  jump: '^',        pattern:  /(?<!`)`(?!`)/u,    }\n    lexer.add_lexeme { mode: 'literal', tid: 'text',      jump: null,       pattern:  /(?:\\\\`|[^`])+/u,   }\n    #.........................................................................................................\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ \"*abc*\", \"<i>abc</i>\", ]\n    [ 'helo `world`!', 'helo <code>world</code>!', null ]\n    [ '*foo* `*bar*` baz', '<i>foo</i> <code>*bar*</code> baz', null ]\n    [ '*foo* \\\\`*bar*\\\\` baz', '<i>foo</i> \\\\`<i>bar</i>\\\\` baz', null ]\n    ]\n  #.........................................................................................................\n  $parse_md_codespan = ->\n    return ( d, send ) ->\n      if d.mk is 'plain:codespan'\n        send stamp d\n        return send H2.new_token '^æ2^', d, 'html', 'tag', 'code', '<code>'\n      if d.mk is 'literal:codespan'\n        send stamp d\n        return send H2.new_token '^æ1^', d, 'html', 'tag', 'code', '</code>'\n      send d\n      return null\n  #.........................................................................................................\n  md_lexer  = new_toy_md_lexer 'md'\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      #.....................................................................................................\n      p = new Pipeline()\n      p.push ( d, send ) ->\n        return send d unless d.tid is 'p'\n        send e for e from md_lexer.walk d.value\n      p.push H2.$parse_md_star()\n      p.push $parse_md_codespan()\n      #.....................................................................................................\n      p.send H2.new_token '^æ19^', { x1: 0, x2: probe.length, }, 'plain', 'p', null, probe\n      result      = p.run()\n      result_rpr  = ( d.value for d in result when not d.$stamped ).join ''\n      # urge '^08-1^', ( Object.keys d ).sort() for d in result\n      H.tabulate \"#{probe} -> #{result_rpr} (#{matcher})\", result # unless result_rpr is matcher\n      #.....................................................................................................\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @use_linewise_lexing_with_external_iterator_no_linewise_cfg()\n  # test @use_linewise_lexing_with_external_iterator_no_linewise_cfg\n  # test @use_linewise_with_single_text\n  test @parse_nested_codespan_across_lines\n  # test @"
  ]
}