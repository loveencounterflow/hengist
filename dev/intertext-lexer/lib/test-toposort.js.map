{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-toposort.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER/TESTS/TOPOSORT'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate }              = types\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nshow = ( topograph ) ->\n  LTSORT                    = require '../../../apps/ltsort'\n  try dependencies = LTSORT.group topograph catch error\n    throw error unless ( error.message.match /detected cycle involving node/ )?\n    warn GUY.trm.reverse error.message\n    warn '^08-1^', GUY.trm.reverse error.message\n    # throw new DBay_sqlm_circular_references_error '^dbay/dbm@4^', name, ref_name\n  info '^08-2^', dependencies\n  try ordering = LTSORT.linearize topograph catch error\n    throw error unless ( error.message.match /detected cycle involving node/ )?\n    warn '^08-3^', GUY.trm.reverse error.message\n    # throw new DBay_sqlm_circular_references_error '^dbay/dbm@4^', name, ref_name\n  info '^08-4^', ordering\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@toposort = ( T, done ) ->\n  # T?.halt_on_error()\n  LTSORT                    = require '../../../apps/ltsort'\n  topograph                 = LTSORT.new_graph { loners: true, }\n  lexemes                   = []\n  ### TAINT simplify to single set? ###\n  anyother                  =\n    before: new Set()\n    after:  new Set()\n  #.........................................................................................................\n  add_lexeme = ( cfg ) ->\n    cfg         = { { name, after, before, }..., cfg..., }\n    { name\n      after\n      before  } = cfg\n    validate.nonempty.text name\n    after      ?= []\n    before     ?= []\n    after       = [ after,  ] unless isa.list after\n    before      = [ before, ] unless isa.list before\n    if ( before.length is 0 ) and ( after.length is 0 )\n      LTSORT.add topograph, name\n    else\n      for d in after\n        if d is '*'\n          anyother.after.add name\n          continue\n        LTSORT.add topograph, d, name\n      for d in before\n        if d is '*'\n          anyother.before.add name\n          continue\n        LTSORT.add topograph, name, d\n    return null\n  #.........................................................................................................\n  finalize = ->\n    ### TAINT might as well not materialize list as we check for name collision (?) ###\n    names = [ topograph.precedents.keys()..., ]\n    for name from names\n      for x from anyother.before.keys()\n        continue if x is name\n        debug '^08-5^', { name, x, }\n        LTSORT.add topograph, x, name\n      for x from anyother.after.keys()\n        continue if x is name\n        debug '^08-5^', { name, x, }\n        LTSORT.add topograph, name, x\n    return null\n  #.........................................................................................................\n  add_lexeme { name: 'shop',    before: '*', }\n  add_lexeme { name: 'cook',    before: 'eat', }\n  add_lexeme { name: 'dishes',  after: '*', }\n  add_lexeme { name: 'eat',     after: 'cook', }\n  #.........................................................................................................\n  debug '^08-6^', anyother\n  finalize()\n  show topograph\n  #.........................................................................................................\n  done?()\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  @toposort()\n  # test @\n"
  ]
}