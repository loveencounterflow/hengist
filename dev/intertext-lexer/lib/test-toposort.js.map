{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-toposort.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER/TESTS/TOPOSORT'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate }              = types\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nshow = ( topograph ) ->\n  LTSORT                    = require '../../../apps/ltsort'\n  try dependencies = LTSORT.group topograph catch error\n    throw error unless ( error.message.match /detected cycle involving node/ )?\n    warn GUY.trm.reverse error.message\n    warn '^08-1^', GUY.trm.reverse error.message\n    # throw new DBay_sqlm_circular_references_error '^dbay/dbm@4^', name, ref_name\n  info '^08-2^', dependencies\n  try ordering = LTSORT.linearize topograph catch error\n    throw error unless ( error.message.match /detected cycle involving node/ )?\n    warn '^08-3^', GUY.trm.reverse error.message\n    # throw new DBay_sqlm_circular_references_error '^dbay/dbm@4^', name, ref_name\n  table = []\n  for [ name, precedents, ] from topograph.precedents.entries()\n    precedents = precedents.join ', '\n    table.push { name, precedents, }\n  H.tabulate \"topograph\", table\n  info '^08-4^', ( GUY.trm.yellow x for x in ordering ).join GUY.trm.grey ' => '\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@toposort = ( T, done ) ->\n  # T?.halt_on_error()\n  LTSORT                    = require '../../../apps/ltsort'\n  topograph                 = LTSORT.new_graph { loners: true, }\n  lexemes                   = []\n  antecedents               = []\n  subsequents               = []\n  #.........................................................................................................\n  add_lexeme = ( cfg ) ->\n    cfg         = { { name, after, before, }..., cfg..., }\n    { name\n      after\n      before  } = cfg\n    validate.nonempty.text name\n    after      ?= []\n    before     ?= []\n    after       = [ after,  ] unless isa.list after\n    before      = [ before, ] unless isa.list before\n    if ( before.length is 0 ) and ( after.length is 0 )\n      LTSORT.add topograph, name\n    else\n      for d in after\n        if d is '*'\n          subsequents.push name unless name in subsequents\n          continue\n        LTSORT.add topograph, d, name\n      for d in before\n        if d is '*'\n          antecedents.unshift name unless name in antecedents\n          continue\n        LTSORT.add topograph, name, d\n    return null\n  #.........................................................................................................\n  finalize = ->\n    names = [ topograph.precedents.keys()..., ]\n    for antecedent, idx in antecedents\n      help '^08-5^', antecedent, antecedents[ ... idx ]\n      for name in [ names..., antecedents[ ... idx ]..., subsequents..., ]\n        continue if antecedent is name\n        LTSORT.add topograph, antecedent, name\n    for subsequent, idx in subsequents\n      warn '^08-6^', subsequent, subsequents[ ... idx ]\n      for name in [ names..., subsequents[ ... idx ]..., antecedents..., ]\n        continue if subsequent is name\n        LTSORT.add topograph, name, subsequent\n    return null\n  #.........................................................................................................\n  add_lexeme { name: 'getup',       before: '*', }\n  add_lexeme { name: 'brushteeth',  before: '*', }\n  add_lexeme { name: 'shop',        before: '*', }\n  add_lexeme { name: 'cook',        before: 'eat', }\n  add_lexeme { name: 'serve', after: 'cook', before: 'eat', }\n  add_lexeme { name: 'dishes',      after: '*', }\n  add_lexeme { name: 'sleep',       after: '*', }\n  add_lexeme { name: 'eat',         after: 'cook', }\n  #.........................................................................................................\n  debug '^08-1^', { antecedents, subsequents, }\n  finalize()\n  show topograph\n  #.........................................................................................................\n  done?()\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  @toposort()\n  # test @\n"
  ]
}