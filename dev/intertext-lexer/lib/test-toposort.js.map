{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-toposort.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER/TESTS/TOPOSORT'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate }              = types\nH                         = require '../../../lib/helpers'\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nshow = ( topograph ) ->\n  LTSORT                    = require '../../../apps/ltsort'\n  try dependencies = LTSORT.group topograph catch error\n    throw error unless ( error.message.match /detected cycle involving node/ )?\n    warn GUY.trm.reverse error.message\n    warn '^08-1^', GUY.trm.reverse error.message\n    # throw new DBay_sqlm_circular_references_error '^dbay/dbm@4^', name, ref_name\n  info '^08-2^', dependencies\n  try ordering = LTSORT.linearize topograph catch error\n    throw error unless ( error.message.match /detected cycle involving node/ )?\n    warn '^08-3^', GUY.trm.reverse error.message\n    # throw new DBay_sqlm_circular_references_error '^dbay/dbm@4^', name, ref_name\n  table = []\n  for [ name, precedents, ] from topograph.precedents.entries()\n    precedents = precedents.join ', '\n    table.push { name, precedents, }\n  H.tabulate \"topograph\", table\n  info '^08-4^', ( GUY.trm.yellow x for x in ordering ).join GUY.trm.grey ' => '\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@parse_stars_using_toposort = ( T, done ) ->\n  { Pipeline,         \\\n    $,\n    transforms,     } = require '../../../apps/moonriver'\n  { Interlex\n    compose  }        = require '../../../apps/intertext-lexer'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  new_toy_md_lexer = ( mode = 'plain' ) ->\n    lexer   = new Interlex { dotall: false, end_token: true, }\n    #.........................................................................................................\n    lexer.add_lexeme { mode, tid: 'star1',  pattern: /\\*{1}/u, needs: 'star2', }\n    lexer.add_lexeme { mode, tid: 'star2',  pattern: /\\*{2}/u, precedes: 'star1', needs: 'star3', }\n    lexer.add_lexeme { mode, tid: 'star3',  pattern: /\\*{3}/u, precedes: '*', }\n    lexer.add_lexeme { mode, tid: 'escchr', pattern: /\\\\(?<chr>.)/u, precedes: '*', }\n    lexer.add_lexeme { mode, tid: 'other',  pattern: /[^*\\\\]+/u, needs: '*', }\n    #.........................................................................................................\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ '*abc*', \"[md:star1,(0:0)(0:1),='*'][md:other,(0:1)(0:4),='abc'][md:star1,(0:4)(0:5),='*'][md:$eof,(0:5)(0:5),='']\", null ]\n    [ '*abc\\\\*', \"[md:star1,(0:0)(0:1),='*'][md:other,(0:1)(0:4),='abc'][md:escchr,(0:4)(0:6),='\\\\\\\\*',chr:'*'][md:$eof,(0:6)(0:6),='']\", null ]\n    [ '**abc**', \"[md:star2,(0:0)(0:2),='**'][md:other,(0:2)(0:5),='abc'][md:star2,(0:5)(0:7),='**'][md:$eof,(0:7)(0:7),='']\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer       = new_toy_md_lexer 'md'\n      T?.eq ( tid for tid of lexer.registry.md.lexemes ), [ 'star1', 'star2', 'star3', 'escchr', 'other', ]\n      result      = lexer.run probe\n      T?.eq ( tid for tid of lexer.registry.md.lexemes ), [ 'escchr', 'star3', 'star2', 'star1', 'other' ]\n      result_rpr  = ( lexer.rpr_token t for t in result ).join ''\n      #.....................................................................................................\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @parse_stars_using_toposort\n  # @toposort()\n  # test @\n"
  ]
}