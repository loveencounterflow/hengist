{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-forbidden-chrs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER/TESTS/BASICS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\nafter                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@add_reserved_chrs = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex, } = require '../../../apps/intertext-lexer'\n  #.........................................................................................................\n  add_lexemes   = ( lexer ) ->\n    mode    = 'plain'\n    lexer.add_lexeme { mode, tid: 'escchr',           pattern:  /\\\\(?<chr>.)/u, reserved: '\\\\', }\n    lexer.add_lexeme { mode, tid: 'star2',            pattern: ( /(?<!\\*)\\*\\*(?!\\*)/u   ), reserved: '*', }\n    lexer.add_lexeme { mode, tid: 'heading',          pattern: ( /^(?<hashes>#+)\\s+/u ), reserved: '#', }\n    lexer.add_lexeme { mode, tid: 'word',             pattern: ( /\\p{Letter}+/u ), }\n    lexer.add_lexeme { mode, tid: 'number_symbol',    pattern: ( /#(?=\\p{Number})/u ), }\n    lexer.add_lexeme { mode, tid: 'number',           pattern: ( /\\p{Number}+/u ), }\n    lexer.add_lexeme { mode, tid: 'ws',               pattern: ( /\\s+/u ), }\n    lexer.add_catchall_lexeme { mode, }\n    lexer.add_reserved_lexeme { mode, }\n    return null\n  #.........................................................................................................\n  await do =>\n    probes_and_matchers = [\n      [ 'helo', \"word:'helo'\", null ]\n      [ 'helo*x', \"word:'helo'$reserved:'*'word:'x'\", null ]\n      [ '*x', \"$reserved:'*'word:'x'\", null ]\n      [ '## question #1 and a hash: #', \"heading:'## 'word:'question'ws:' 'number_symbol:'#'number:'1'ws:' 'word:'and'ws:' 'word:'a'ws:' 'word:'hash'$catchall:':'ws:' '$reserved:'#'\", null ]\n      [ '## question #1 and a hash: \\\\#', \"heading:'## 'word:'question'ws:' 'number_symbol:'#'number:'1'ws:' 'word:'and'ws:' 'word:'a'ws:' 'word:'hash'$catchall:':'ws:' 'escchr:'\\\\\\\\#'\", null ]\n      [ ':.;*#', \"$catchall:':'$catchall:'.'$catchall:';'$reserved:'*'$reserved:'#'\", null ]\n      ]\n    for [ probe, matcher, error, ] in probes_and_matchers\n      await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n        lexer = new Interlex { catchall_concat: false, reserved_concat: false, }\n        add_lexemes lexer\n        # H.tabulate \"lexer\", ( x for _, x of lexer.registry.plain.lexemes )\n        result      = lexer.run probe\n        # H.tabulate ( rpr probe ), result\n        result_rpr  = ( \"#{t.tid}:#{rpr t.value}\" for t in result ).join ''\n        resolve result_rpr\n  #.........................................................................................................\n  await do =>\n    probes_and_matchers = [\n      [ 'helo', \"word:'helo'\", null ]\n      [ 'helo*x', \"word:'helo'$reserved:'*'word:'x'\", null ]\n      [ '*x', \"$reserved:'*'word:'x'\", null ]\n      [ '## question #1 and a hash: #', \"heading:'## 'word:'question'ws:' 'number_symbol:'#'number:'1'ws:' 'word:'and'ws:' 'word:'a'ws:' 'word:'hash'$catchall:': '$reserved:'#'\", null ]\n      [ '## question #1 and a hash: \\\\#', \"heading:'## 'word:'question'ws:' 'number_symbol:'#'number:'1'ws:' 'word:'and'ws:' 'word:'a'ws:' 'word:'hash'$catchall:': 'escchr:'\\\\\\\\#'\", null ]\n      [ ':.;*#', \"$catchall:':.;'$reserved:'*#'\", null ]\n      ]\n    for [ probe, matcher, error, ] in probes_and_matchers\n      await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n        lexer = new Interlex { catchall_concat: true, reserved_concat: true, }\n        add_lexemes lexer\n        # H.tabulate \"lexer\", ( x for _, x of lexer.registry.plain.lexemes )\n        result      = lexer.run probe\n        # H.tabulate ( rpr probe ), result\n        result_rpr  = ( \"#{t.tid}:#{rpr t.value}\" for t in result ).join ''\n        resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @add_reserved_chrs()\n  test @add_reserved_chrs\n  # test @\n"
  ]
}