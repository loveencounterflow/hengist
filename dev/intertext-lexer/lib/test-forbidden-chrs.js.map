{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-forbidden-chrs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER/TESTS/BASICS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\nafter                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@add_forbidden_chrs = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex, compose: c, } = require '../../../apps/intertext-lexer'\n  lexer = new Interlex()\n  #.........................................................................................................\n  do =>\n    mode    = 'plain'\n    lexer.add_lexeme { mode, tid: 'star1',            pattern: ( /(?<!\\*)\\*(?!\\*)/u ), forbidden: '*' }\n    # lexer.new_pattern_\n    exclude = c.charSet.complement.bind c.charSet\n    # debug pattern = c.charSet.union ( exclude '*' ), ( exclude 'x' )\n    forbidden = /[*x#]/\n    catchall = c.suffix '*', exclude forbidden\n    debug { forbidden, catchall, }\n    for probe in [ 'helo', 'helo*x', '*x', ]\n      debug GUY.trm.reverse GUY.trm.steel probe\n      help probe.match catchall\n      warn probe.match forbidden\n  #.........................................................................................................\n\n  #.........................................................................................................\n  done?()\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  @add_forbidden_chrs()\n  # test @\n"
  ]
}