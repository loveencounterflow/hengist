{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/helpers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER/TESTS/HELPERS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nMethods =\n\n  #---------------------------------------------------------------------------------------------------------\n  show_lexer_as_table: ( title, lexer ) ->\n    lexer.start()\n    lexemes = []\n    for mode, entry of lexer.registry\n      for tid, lexeme of entry.lexemes\n        { mode, tid, pattern, jump, reserved, create, value, empty_value, } = lexeme\n        lexemes.push { mode, tid, pattern, jump, reserved, create, value, empty_value, }\n    H.tabulate title, lexemes\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  new_token: ( ref, token, mode, tid, name, value, x1, x2, x = null, lexeme = null ) ->\n    ### TAINT recreation of `Interlex::new_token()` ###\n    jump      = lexeme?.jump ? null\n    { x1\n      x2  } = token\n    return new_datom \"^#{mode}\", { mode, tid, mk: \"#{mode}:#{tid}\", jump, name, value, x1, x2, x, $: ref, }\n\n\n  #---------------------------------------------------------------------------------------------------------\n  $parse_md_star: ->\n    #.........................................................................................................\n    within =\n      one:    false\n    start_of =\n      one:    null\n    #.........................................................................................................\n    enter = ( mode, x1 ) =>\n      within[   mode ] = true\n      start_of[ mode ] = x1\n      return null\n    enter.one = ( x1 ) => enter 'one', x1\n    #.........................................................................................................\n    exit = ( mode ) =>\n      within[   mode ] = false\n      start_of[ mode ] = null\n      return null\n    exit.one = => exit 'one'\n    #.........................................................................................................\n    return ( d, send ) =>\n      switch d.$key\n        #.....................................................................................................\n        when 'plain:star1'\n          send stamp d\n          if within.one then  exit.one();      send new_datom 'html:tag', { value: '</i>', }\n          else                enter.one d.x1;  send new_datom 'html:tag', { value: '<i>',  }\n        #.....................................................................................................\n        else send d\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $parse_md_stars: ->\n    within =\n      one:    false\n      two:    false\n    start_of =\n      one:    null\n      two:    null\n    #.........................................................................................................\n    enter = ( mode, x1 ) =>\n      within[   mode ] = true\n      start_of[ mode ] = x1\n      return null\n    enter.one = ( x1 ) => enter 'one', x1\n    enter.two = ( x1 ) => enter 'two', x1\n    #.........................................................................................................\n    exit = ( mode ) =>\n      within[   mode ] = false\n      start_of[ mode ] = null\n      return null\n    exit.one = => exit 'one'\n    exit.two = => exit 'two'\n    #.........................................................................................................\n    return parse_md_stars = ( d, send ) =>\n      switch d.$key\n        #.....................................................................................................\n        when 'plain:star1'\n          send stamp d\n          if within.one then  exit.one();         send new_datom 'html:tag', { value: '</i>', }\n          else                enter.one d.x1;     send new_datom 'html:tag', { value: '<i>', }\n        #.....................................................................................................\n        when 'plain:star2'\n          send stamp d\n          if within.two\n            if within.one\n              if start_of.one > start_of.two\n                exit.one();                       send new_datom 'html:tag', { value: '</i>', }\n                exit.two();                       send new_datom 'html:tag', { value: '</b>', }\n                enter.one d.x1;                   send new_datom 'html:tag', { value: '<i>', }\n              else\n                exit.two();                       send new_datom 'html:tag', { value: '</b>', }\n            else\n              exit.two();                         send new_datom 'html:tag', { value: '</b>', }\n          else\n            enter.two d.x1;                       send new_datom 'html:tag', { value: '<b>', }\n        #.....................................................................................................\n        when 'plain:star3'\n          send stamp d\n          if within.one\n            if within.two\n              if start_of.one > start_of.two\n                exit.one();                       send new_datom 'html:tag', { value: '</i>', }\n                exit.two();                       send new_datom 'html:tag', { value: '</b>', }\n              else\n                exit.two();                       send new_datom 'html:tag', { value: '</b>', }\n                exit.one();                       send new_datom 'html:tag', { value: '</i>', }\n            else\n              exit.one();                         send new_datom 'html:tag', { value: '</i>', }\n              enter.two d.x1;                     send new_datom 'html:tag', { value: '<b>', }\n          else\n            if within.two\n              exit.two();                         send new_datom 'html:tag', { value: '</b>', }\n              enter.one d.x1;                     send new_datom 'html:tag', { value: '<i>', }\n            else\n              enter.two d.x1;                     send new_datom 'html:tag', { value: '<b>', }\n              enter.one d.x1 + 2;                 send new_datom 'html:tag', { value: '<i>', x1: d.x1 + 2, x2: d.x2, }\n        #.....................................................................................................\n        else send d\n      return null\n\n#===========================================================================================================\nmodule.exports = { H..., Methods..., }\n\n\n"
  ]
}