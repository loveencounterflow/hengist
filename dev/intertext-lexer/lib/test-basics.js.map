{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER/TESTS/BASICS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\nH2                        = require './helpers'\nafter                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@simple = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex } = require '../../../apps/intertext-lexer'\n  lexer = new Interlex()\n  T?.eq lexer._metachr, '𝔛'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ 'xxx',    /123/,          ], /123/,                 ]\n    [ [ 'xxx',    /123/ug,        ], /123/ug,               ]\n    [ [ 'xxx',    /123/guy,       ], /123/guy,              ]\n    [ [ 'xxx',    /(?<a>x.)/gu    ], /(?<xxx𝔛a>x.)/gu,      ]\n    [ [ 'escchr', /\\\\(?<chr>.)/u  ], /\\\\(?<escchr𝔛chr>.)/u, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      #.....................................................................................................\n      resolve ( lexer._rename_groups probe... ), matcher\n  #.........................................................................................................\n  # re = /((?<=\\\\\\\\)|(?<!\\\\))\\(\\?<([^>]+)>/gu\n  # debug '^46^', ( rpr /\\\\(?<x>)/.source ), rpr /\\\\(?<x>)/.source.replace re, '#'\n  # debug '^46^', ( rpr /\\(?<x>\\)/.source ), rpr /\\(?<x>\\)/.source.replace re, '#'\n  # debug '^46^', ( rpr /(?<x>)/.source   ), rpr /(?<x>)/.source.replace re, '#'\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_strings_for_patterns = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex } = require '../../../apps/intertext-lexer'\n  lexer = new Interlex()\n  lexer.add_lexeme { mode: 'sql', lxid: 'select',  pattern: 'select',    }\n  lexer.add_lexeme { mode: 'sql', lxid: 'from',    pattern: 'from',      }\n  lexer.add_lexeme { mode: 'sql', lxid: 'star',    pattern: '*',         }\n  lexer.add_lexeme { mode: 'sql', lxid: 'ws',      pattern: /\\s+/u,      }\n  lexer.add_lexeme { mode: 'sql', lxid: 'other',   pattern: /\\S+/u,      }\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'select * from t;', \"select:'select'|ws:' '|star:'*'|ws:' '|from:'from'|ws:' '|other:'t;'\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    # do =>\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      #.....................................................................................................\n      result      = lexer.run probe\n      result_rpr  = ( \"#{lexer.get_token_lxid t}:#{rpr t.value}\" for t in result ).join '|'\n      H.tabulate \"#{rpr probe} -> #{rpr result_rpr}\", result\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_lexer_without_lexemes = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex }  = require '../../../apps/intertext-lexer'\n  probes_and_matchers = [\n    [ '', \"$eof:''\", null ]\n    [ 'select * from t;', \"$error:''\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    # do =>\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer       = new Interlex { end_token: true, }\n      result      = lexer.run probe\n      result_rpr  = ( \"#{lexer.get_token_lxid t}:#{rpr t.value}\" for t in result ).join '|'\n      H.tabulate \"#{rpr probe} -> #{rpr result_rpr}\", result\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@cannot_return_from_initial_mode = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex } = require '../../../apps/intertext-lexer'\n  #.........................................................................................................\n  get_lexer = ->\n    lexer = new Interlex { end_token: true, }\n    lexer.add_lexeme { mode: 'base',  lxid: 'a',             pattern: 'a', }\n    lexer.add_lexeme { mode: 'base',  lxid: 'b', jump: 'up[', pattern: 'b', }\n    lexer.add_lexeme { mode: 'up',    lxid: 'c',             pattern: 'c', }\n    lexer.add_lexeme { mode: 'up',    lxid: 'd', jump: '.]',  pattern: 'd', }\n    lexer.add_lexeme { mode: 'base',  lxid: 'e', jump: '.]',  pattern: 'e', }\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'abc', \"base:a:'a'|base:b:'b'|up:c:'c'|up:$eof:''\", null ]\n    [ 'abcde', null, \"unable to jump back from initial state\" ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    # do =>\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      #.....................................................................................................\n      lexer       = get_lexer()\n      result      = lexer.run probe\n      result_rpr  = ( \"#{t.$key}:#{rpr t.value}\" for t in result ).join '|'\n      H.tabulate \"#{rpr probe} -> #{rpr result_rpr}\", result\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@lex_tags = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex, compose: c, } = require '../../../apps/intertext-lexer'\n  #.........................................................................................................\n  new_lexer = ->\n    lexer = new Interlex { split: false, end_token: true, }\n    do =>\n      ### NOTE arbitrarily forbidding question marks and not using fallback token to test for error tokens ###\n      mode    = 'plain'\n      lexer.add_lexeme { mode, lxid: 'escchr',           pattern: ( /\\\\(?<chr>.)/u                             ), }\n      lexer.add_lexeme { mode, lxid: 'text',             pattern: ( c.suffix '+', c.charSet.complement /[<`\\\\?]/u  ), }\n      lexer.add_lexeme { mode, lxid: 'tag', jump: 'tag[', pattern: ( /<(?<lslash>\\/?)/u                         ), }\n      lexer.add_lexeme { mode, lxid: 'E_backticks',      pattern: ( /`+/                                       ), }\n      # lexer.add_lexeme mode, 'other',        /./u\n    #.........................................................................................................\n    do =>\n      mode    = 'tag'\n      lexer.add_lexeme { mode, lxid: 'escchr',         pattern: ( /\\\\(?<chr>.)/u                           ), }\n      lexer.add_lexeme { mode, lxid: 'end', jump: '.]', pattern: ( />/u                                     ), }\n      lexer.add_lexeme { mode, lxid: 'text',           pattern: ( c.suffix '+', c.charSet.complement /[>\\\\]/u  ), }\n      lexer.add_lexeme { mode, lxid: 'other',          pattern: ( /./u                                     ), }\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'helo <bold>`world`</bold>', [ { '$key': 'plain:text', jump: null, value: 'helo ', lnr1: 0, x1: 0, lnr2: 0, x2: 5, data: null, source: 'helo <bold>`world`</bold>' }, { '$key': 'plain:tag', jump: 'tag', value: '<', lnr1: 0, x1: 5, lnr2: 0, x2: 6, data: { lslash: null }, source: 'helo <bold>`world`</bold>' }, { '$key': 'tag:text', jump: null, value: 'bold', lnr1: 0, x1: 6, lnr2: 0, x2: 10, data: null, source: 'helo <bold>`world`</bold>' }, { '$key': 'tag:end', jump: 'plain', value: '>', lnr1: 0, x1: 10, lnr2: 0, x2: 11, data: null, source: 'helo <bold>`world`</bold>' }, { '$key': 'plain:E_backticks', jump: null, value: '`', lnr1: 0, x1: 11, lnr2: 0, x2: 12, data: null, source: 'helo <bold>`world`</bold>' }, { '$key': 'plain:text', jump: null, value: 'world', lnr1: 0, x1: 12, lnr2: 0, x2: 17, data: null, source: 'helo <bold>`world`</bold>' }, { '$key': 'plain:E_backticks', jump: null, value: '`', lnr1: 0, x1: 17, lnr2: 0, x2: 18, data: null, source: 'helo <bold>`world`</bold>' }, { '$key': 'plain:tag', jump: 'tag', value: '</', lnr1: 0, x1: 18, lnr2: 0, x2: 20, data: { lslash: '/' }, source: 'helo <bold>`world`</bold>' }, { '$key': 'tag:text', jump: null, value: 'bold', lnr1: 0, x1: 20, lnr2: 0, x2: 24, data: null, source: 'helo <bold>`world`</bold>' }, { '$key': 'tag:end', jump: 'plain', value: '>', lnr1: 0, x1: 24, lnr2: 0, x2: 25, data: null, source: 'helo <bold>`world`</bold>' }, { '$key': 'plain:$eof', jump: null, value: '', lnr1: 0, x1: 25, lnr2: 0, x2: 25, data: null, source: 'helo <bold>`world`</bold>' } ], null ]\n    [ '<x v=\\\\> z=42>', [ { '$key': 'plain:tag', jump: 'tag', value: '<', lnr1: 0, x1: 0, lnr2: 0, x2: 1, data: { lslash: null }, source: '<x v=\\\\> z=42>' }, { '$key': 'tag:text', jump: null, value: 'x v=', lnr1: 0, x1: 1, lnr2: 0, x2: 5, data: null, source: '<x v=\\\\> z=42>' }, { '$key': 'tag:escchr', jump: null, value: '\\\\>', lnr1: 0, x1: 5, lnr2: 0, x2: 7, data: { chr: '>' }, source: '<x v=\\\\> z=42>' }, { '$key': 'tag:text', jump: null, value: ' z=42', lnr1: 0, x1: 7, lnr2: 0, x2: 12, data: null, source: '<x v=\\\\> z=42>' }, { '$key': 'tag:end', jump: 'plain', value: '>', lnr1: 0, x1: 12, lnr2: 0, x2: 13, data: null, source: '<x v=\\\\> z=42>' }, { '$key': 'plain:$eof', jump: null, value: '', lnr1: 0, x1: 13, lnr2: 0, x2: 13, data: null, source: '<x v=\\\\> z=42>' } ], null ]\n    [ '<x v=\\\\> z=42\\\\>', [ { '$key': 'plain:tag', jump: 'tag', value: '<', lnr1: 0, x1: 0, lnr2: 0, x2: 1, data: { lslash: null }, source: '<x v=\\\\> z=42\\\\>' }, { '$key': 'tag:text', jump: null, value: 'x v=', lnr1: 0, x1: 1, lnr2: 0, x2: 5, data: null, source: '<x v=\\\\> z=42\\\\>' }, { '$key': 'tag:escchr', jump: null, value: '\\\\>', lnr1: 0, x1: 5, lnr2: 0, x2: 7, data: { chr: '>' }, source: '<x v=\\\\> z=42\\\\>' }, { '$key': 'tag:text', jump: null, value: ' z=42', lnr1: 0, x1: 7, lnr2: 0, x2: 12, data: null, source: '<x v=\\\\> z=42\\\\>' }, { '$key': 'tag:escchr', jump: null, value: '\\\\>', lnr1: 0, x1: 12, lnr2: 0, x2: 14, data: { chr: '>' }, source: '<x v=\\\\> z=42\\\\>' }, { '$key': 'tag:$eof', jump: null, value: '', lnr1: 0, x1: 14, lnr2: 0, x2: 14, data: null, source: '<x v=\\\\> z=42\\\\>' } ], null ]\n    [ 'a <b', [ { '$key': 'plain:text', jump: null, value: 'a ', lnr1: 0, x1: 0, lnr2: 0, x2: 2, data: null, source: 'a <b' }, { '$key': 'plain:tag', jump: 'tag', value: '<', lnr1: 0, x1: 2, lnr2: 0, x2: 3, data: { lslash: null }, source: 'a <b' }, { '$key': 'tag:text', jump: null, value: 'b', lnr1: 0, x1: 3, lnr2: 0, x2: 4, data: null, source: 'a <b' }, { '$key': 'tag:$eof', jump: null, value: '', lnr1: 0, x1: 4, lnr2: 0, x2: 4, data: null, source: 'a <b' } ], null ]\n    [ 'what? error?', [ { '$key': 'plain:text', jump: null, value: 'what', lnr1: 0, x1: 0, lnr2: 0, x2: 4, data: null, source: 'what? error?' }, { '$key': 'plain:$error', jump: null, value: '', lnr1: 0, x1: 4, lnr2: 0, x2: 4, data: { code: 'nomatch' }, source: 'what? error?' } ], null ]\n    [ 'd <', [ { '$key': 'plain:text', jump: null, value: 'd ', lnr1: 0, x1: 0, lnr2: 0, x2: 2, data: null, source: 'd <' }, { '$key': 'plain:tag', jump: 'tag', value: '<', lnr1: 0, x1: 2, lnr2: 0, x2: 3, data: { lslash: null }, source: 'd <' }, { '$key': 'tag:$eof', jump: null, value: '', lnr1: 0, x1: 3, lnr2: 0, x2: 3, data: null, source: 'd <' } ], null ]\n    [ '<c', [ { '$key': 'plain:tag', jump: 'tag', value: '<', lnr1: 0, x1: 0, lnr2: 0, x2: 1, data: { lslash: null }, source: '<c' }, { '$key': 'tag:text', jump: null, value: 'c', lnr1: 0, x1: 1, lnr2: 0, x2: 2, data: null, source: '<c' }, { '$key': 'tag:$eof', jump: null, value: '', lnr1: 0, x1: 2, lnr2: 0, x2: 2, data: null, source: '<c' } ], null ]\n    [ '<', [ { '$key': 'plain:tag', jump: 'tag', value: '<', lnr1: 0, x1: 0, lnr2: 0, x2: 1, data: { lslash: null }, source: '<' }, { '$key': 'tag:$eof', jump: null, value: '', lnr1: 0, x1: 1, lnr2: 0, x2: 1, data: null, source: '<' } ], null ]\n    [ '', [ { '$key': 'plain:$eof', jump: null, value: '', lnr1: 0, x1: 0, lnr2: 0, x2: 0, data: null, source: '' } ], null ]\n    [ 'helo \\\\<bold>`world`</bold>', [ { '$key': 'plain:text', jump: null, value: 'helo ', lnr1: 0, x1: 0, lnr2: 0, x2: 5, data: null, source: 'helo \\\\<bold>`world`</bold>' }, { '$key': 'plain:escchr', jump: null, value: '\\\\<', lnr1: 0, x1: 5, lnr2: 0, x2: 7, data: { chr: '<' }, source: 'helo \\\\<bold>`world`</bold>' }, { '$key': 'plain:text', jump: null, value: 'bold>', lnr1: 0, x1: 7, lnr2: 0, x2: 12, data: null, source: 'helo \\\\<bold>`world`</bold>' }, { '$key': 'plain:E_backticks', jump: null, value: '`', lnr1: 0, x1: 12, lnr2: 0, x2: 13, data: null, source: 'helo \\\\<bold>`world`</bold>' }, { '$key': 'plain:text', jump: null, value: 'world', lnr1: 0, x1: 13, lnr2: 0, x2: 18, data: null, source: 'helo \\\\<bold>`world`</bold>' }, { '$key': 'plain:E_backticks', jump: null, value: '`', lnr1: 0, x1: 18, lnr2: 0, x2: 19, data: null, source: 'helo \\\\<bold>`world`</bold>' }, { '$key': 'plain:tag', jump: 'tag', value: '</', lnr1: 0, x1: 19, lnr2: 0, x2: 21, data: { lslash: '/' }, source: 'helo \\\\<bold>`world`</bold>' }, { '$key': 'tag:text', jump: null, value: 'bold', lnr1: 0, x1: 21, lnr2: 0, x2: 25, data: null, source: 'helo \\\\<bold>`world`</bold>' }, { '$key': 'tag:end', jump: 'plain', value: '>', lnr1: 0, x1: 25, lnr2: 0, x2: 26, data: null, source: 'helo \\\\<bold>`world`</bold>' }, { '$key': 'plain:$eof', jump: null, value: '', lnr1: 0, x1: 26, lnr2: 0, x2: 26, data: null, source: 'helo \\\\<bold>`world`</bold>' } ], null ]\n    [ '<b>helo \\\\<bold>`world`</bold></b>', [ { '$key': 'plain:tag', jump: 'tag', value: '<', lnr1: 0, x1: 0, lnr2: 0, x2: 1, data: { lslash: null }, source: '<b>helo \\\\<bold>`world`</bold></b>' }, { '$key': 'tag:text', jump: null, value: 'b', lnr1: 0, x1: 1, lnr2: 0, x2: 2, data: null, source: '<b>helo \\\\<bold>`world`</bold></b>' }, { '$key': 'tag:end', jump: 'plain', value: '>', lnr1: 0, x1: 2, lnr2: 0, x2: 3, data: null, source: '<b>helo \\\\<bold>`world`</bold></b>' }, { '$key': 'plain:text', jump: null, value: 'helo ', lnr1: 0, x1: 3, lnr2: 0, x2: 8, data: null, source: '<b>helo \\\\<bold>`world`</bold></b>' }, { '$key': 'plain:escchr', jump: null, value: '\\\\<', lnr1: 0, x1: 8, lnr2: 0, x2: 10, data: { chr: '<' }, source: '<b>helo \\\\<bold>`world`</bold></b>' }, { '$key': 'plain:text', jump: null, value: 'bold>', lnr1: 0, x1: 10, lnr2: 0, x2: 15, data: null, source: '<b>helo \\\\<bold>`world`</bold></b>' }, { '$key': 'plain:E_backticks', jump: null, value: '`', lnr1: 0, x1: 15, lnr2: 0, x2: 16, data: null, source: '<b>helo \\\\<bold>`world`</bold></b>' }, { '$key': 'plain:text', jump: null, value: 'world', lnr1: 0, x1: 16, lnr2: 0, x2: 21, data: null, source: '<b>helo \\\\<bold>`world`</bold></b>' }, { '$key': 'plain:E_backticks', jump: null, value: '`', lnr1: 0, x1: 21, lnr2: 0, x2: 22, data: null, source: '<b>helo \\\\<bold>`world`</bold></b>' }, { '$key': 'plain:tag', jump: 'tag', value: '</', lnr1: 0, x1: 22, lnr2: 0, x2: 24, data: { lslash: '/' }, source: '<b>helo \\\\<bold>`world`</bold></b>' }, { '$key': 'tag:text', jump: null, value: 'bold', lnr1: 0, x1: 24, lnr2: 0, x2: 28, data: null, source: '<b>helo \\\\<bold>`world`</bold></b>' }, { '$key': 'tag:end', jump: 'plain', value: '>', lnr1: 0, x1: 28, lnr2: 0, x2: 29, data: null, source: '<b>helo \\\\<bold>`world`</bold></b>' }, { '$key': 'plain:tag', jump: 'tag', value: '</', lnr1: 0, x1: 29, lnr2: 0, x2: 31, data: { lslash: '/' }, source: '<b>helo \\\\<bold>`world`</bold></b>' }, { '$key': 'tag:text', jump: null, value: 'b', lnr1: 0, x1: 31, lnr2: 0, x2: 32, data: null, source: '<b>helo \\\\<bold>`world`</bold></b>' }, { '$key': 'tag:end', jump: 'plain', value: '>', lnr1: 0, x1: 32, lnr2: 0, x2: 33, data: null, source: '<b>helo \\\\<bold>`world`</bold></b>' }, { '$key': 'plain:$eof', jump: null, value: '', lnr1: 0, x1: 33, lnr2: 0, x2: 33, data: null, source: '<b>helo \\\\<bold>`world`</bold></b>' } ], null ]\n    [ '<i><b></b></i>', [ { '$key': 'plain:tag', jump: 'tag', value: '<', lnr1: 0, x1: 0, lnr2: 0, x2: 1, data: { lslash: null }, source: '<i><b></b></i>' }, { '$key': 'tag:text', jump: null, value: 'i', lnr1: 0, x1: 1, lnr2: 0, x2: 2, data: null, source: '<i><b></b></i>' }, { '$key': 'tag:end', jump: 'plain', value: '>', lnr1: 0, x1: 2, lnr2: 0, x2: 3, data: null, source: '<i><b></b></i>' }, { '$key': 'plain:tag', jump: 'tag', value: '<', lnr1: 0, x1: 3, lnr2: 0, x2: 4, data: { lslash: null }, source: '<i><b></b></i>' }, { '$key': 'tag:text', jump: null, value: 'b', lnr1: 0, x1: 4, lnr2: 0, x2: 5, data: null, source: '<i><b></b></i>' }, { '$key': 'tag:end', jump: 'plain', value: '>', lnr1: 0, x1: 5, lnr2: 0, x2: 6, data: null, source: '<i><b></b></i>' }, { '$key': 'plain:tag', jump: 'tag', value: '</', lnr1: 0, x1: 6, lnr2: 0, x2: 8, data: { lslash: '/' }, source: '<i><b></b></i>' }, { '$key': 'tag:text', jump: null, value: 'b', lnr1: 0, x1: 8, lnr2: 0, x2: 9, data: null, source: '<i><b></b></i>' }, { '$key': 'tag:end', jump: 'plain', value: '>', lnr1: 0, x1: 9, lnr2: 0, x2: 10, data: null, source: '<i><b></b></i>' }, { '$key': 'plain:tag', jump: 'tag', value: '</', lnr1: 0, x1: 10, lnr2: 0, x2: 12, data: { lslash: '/' }, source: '<i><b></b></i>' }, { '$key': 'tag:text', jump: null, value: 'i', lnr1: 0, x1: 12, lnr2: 0, x2: 13, data: null, source: '<i><b></b></i>' }, { '$key': 'tag:end', jump: 'plain', value: '>', lnr1: 0, x1: 13, lnr2: 0, x2: 14, data: null, source: '<i><b></b></i>' }, { '$key': 'plain:$eof', jump: null, value: '', lnr1: 0, x1: 14, lnr2: 0, x2: 14, data: null, source: '<i><b></b></i>' } ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer   = new_lexer()\n      result  = lexer.run probe\n      for token in result\n        T?.eq probe[ token.x1 ... token.x2 ], token.value\n      # H.tabulate ( rpr probe ), result\n      resolve result\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@lex_tags_with_rpr = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex, compose: c, } = require '../../../apps/intertext-lexer'\n  new_lexer = ->\n    lexer = new Interlex { split: false, end_token: true, }\n    #.........................................................................................................\n    do =>\n      ### NOTE arbitrarily forbidding question marks and not using fallback token to test for error tokens ###\n      mode    = 'plain'\n      lexer.add_lexeme { mode, lxid: 'escchr',           pattern: ( /\\\\(?<chr>.)/u                             ), }\n      lexer.add_lexeme { mode, lxid: 'text',             pattern: ( c.suffix '+', c.charSet.complement /[<`\\\\?]/u  ), }\n      lexer.add_lexeme { mode, lxid: 'tag', jump: 'tag[', pattern: ( /<(?<lslash>\\/?)/u                         ), }\n      lexer.add_lexeme { mode, lxid: 'E_backticks',      pattern: ( /`+/                                       ), }\n      # lexer.add_lexeme mode, 'other',        /./u\n    #.........................................................................................................\n    do =>\n      mode    = 'tag'\n      lexer.add_lexeme { mode, lxid: 'escchr',         pattern: ( /\\\\(?<chr>.)/u                           ), }\n      lexer.add_lexeme { mode, lxid: 'end', jump: '.]', pattern: ( />/u                                     ), }\n      lexer.add_lexeme { mode, lxid: 'text',           pattern: ( c.suffix '+', c.charSet.complement /[>\\\\]/u  ), }\n      lexer.add_lexeme { mode, lxid: 'other',          pattern: ( /./u                                     ), }\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'helo <bold>`world`</bold>', \"[plain:text,(0:0)(0:5),='helo '][plain:tag<tag[>,(0:5)(0:6),='<',lslash:null][tag:text,(0:6)(0:10),='bold'][tag:end<.]>,(0:10)(0:11),='>'][plain:E_backticks,(0:11)(0:12),='`'][plain:text,(0:12)(0:17),='world'][plain:E_backticks,(0:17)(0:18),='`'][plain:tag<tag[>,(0:18)(0:20),='</',lslash:'/'][tag:text,(0:20)(0:24),='bold'][tag:end<.]>,(0:24)(0:25),='>'][plain:$eof,(0:25)(0:25),='']\", null ]\n    [ '<x v=\\\\> z=42>', \"[plain:tag<tag[>,(0:0)(0:1),='<',lslash:null][tag:text,(0:1)(0:5),='x v='][tag:escchr,(0:5)(0:7),='\\\\\\\\>',chr:'>'][tag:text,(0:7)(0:12),=' z=42'][tag:end<.]>,(0:12)(0:13),='>'][plain:$eof,(0:13)(0:13),='']\", null ]\n    [ '<x v=\\\\> z=42\\\\>', \"[plain:tag<tag[>,(0:0)(0:1),='<',lslash:null][tag:text,(0:1)(0:5),='x v='][tag:escchr,(0:5)(0:7),='\\\\\\\\>',chr:'>'][tag:text,(0:7)(0:12),=' z=42'][tag:escchr,(0:12)(0:14),='\\\\\\\\>',chr:'>'][tag:$eof,(0:14)(0:14),='']\", null ]\n    [ 'a <b', \"[plain:text,(0:0)(0:2),='a '][plain:tag<tag[>,(0:2)(0:3),='<',lslash:null][tag:text,(0:3)(0:4),='b'][tag:$eof,(0:4)(0:4),='']\", null ]\n    [ 'what? error?', \"[plain:text,(0:0)(0:4),='what'][plain:$error,(0:4)(0:4),='',code:'nomatch']\", null ]\n    [ 'd <', \"[plain:text,(0:0)(0:2),='d '][plain:tag<tag[>,(0:2)(0:3),='<',lslash:null][tag:$eof,(0:3)(0:3),='']\", null ]\n    [ '<c', \"[plain:tag<tag[>,(0:0)(0:1),='<',lslash:null][tag:text,(0:1)(0:2),='c'][tag:$eof,(0:2)(0:2),='']\", null ]\n    [ '<', \"[plain:tag<tag[>,(0:0)(0:1),='<',lslash:null][tag:$eof,(0:1)(0:1),='']\", null ]\n    [ '', \"[plain:$eof,(0:0)(0:0),='']\", null ]\n    [ 'helo \\\\<bold>`world`</bold>', \"[plain:text,(0:0)(0:5),='helo '][plain:escchr,(0:5)(0:7),='\\\\\\\\<',chr:'<'][plain:text,(0:7)(0:12),='bold>'][plain:E_backticks,(0:12)(0:13),='`'][plain:text,(0:13)(0:18),='world'][plain:E_backticks,(0:18)(0:19),='`'][plain:tag<tag[>,(0:19)(0:21),='</',lslash:'/'][tag:text,(0:21)(0:25),='bold'][tag:end<.]>,(0:25)(0:26),='>'][plain:$eof,(0:26)(0:26),='']\", null ]\n    [ '<b>helo \\\\<bold>`world`</bold></b>', \"[plain:tag<tag[>,(0:0)(0:1),='<',lslash:null][tag:text,(0:1)(0:2),='b'][tag:end<.]>,(0:2)(0:3),='>'][plain:text,(0:3)(0:8),='helo '][plain:escchr,(0:8)(0:10),='\\\\\\\\<',chr:'<'][plain:text,(0:10)(0:15),='bold>'][plain:E_backticks,(0:15)(0:16),='`'][plain:text,(0:16)(0:21),='world'][plain:E_backticks,(0:21)(0:22),='`'][plain:tag<tag[>,(0:22)(0:24),='</',lslash:'/'][tag:text,(0:24)(0:28),='bold'][tag:end<.]>,(0:28)(0:29),='>'][plain:tag<tag[>,(0:29)(0:31),='</',lslash:'/'][tag:text,(0:31)(0:32),='b'][tag:end<.]>,(0:32)(0:33),='>'][plain:$eof,(0:33)(0:33),='']\", null ]\n    [ '<i><b></b></i>', \"[plain:tag<tag[>,(0:0)(0:1),='<',lslash:null][tag:text,(0:1)(0:2),='i'][tag:end<.]>,(0:2)(0:3),='>'][plain:tag<tag[>,(0:3)(0:4),='<',lslash:null][tag:text,(0:4)(0:5),='b'][tag:end<.]>,(0:5)(0:6),='>'][plain:tag<tag[>,(0:6)(0:8),='</',lslash:'/'][tag:text,(0:8)(0:9),='b'][tag:end<.]>,(0:9)(0:10),='>'][plain:tag<tag[>,(0:10)(0:12),='</',lslash:'/'][tag:text,(0:12)(0:13),='i'][tag:end<.]>,(0:13)(0:14),='>'][plain:$eof,(0:14)(0:14),='']\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer   = new_lexer()\n      result  = []\n      for token from lexer.walk probe\n        result.push token\n      # H.tabulate ( rpr probe ), result\n      resolve ( lexer.rpr_token token for token in result ).join ''\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_md_stars_markup = ( T, done ) ->\n  { Pipeline,         \\\n    $,\n    transforms,     } = require '../../../apps/moonriver'\n  { Interlex\n    compose  }        = require '../../../apps/intertext-lexer'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  new_toy_md_lexer = ->\n    lexer   = new Interlex { dotall: false, }\n    mode    = 'plain'\n    #.........................................................................................................\n    lexer.add_lexeme { mode, lxid: 'escchr', pattern: /\\\\(?<chr>.)/u, }\n    lexer.add_lexeme { mode, lxid: 'star1',  pattern: /(?<!\\*)\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode, lxid: 'star2',  pattern: /(?<!\\*)\\*\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode, lxid: 'star3',  pattern: /(?<!\\*)\\*\\*\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode, lxid: 'other',  pattern: /[^*]+/u, }\n    #.........................................................................................................\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ \"*abc*\", \"<i>abc</i>\", ]\n    [ \"**def**\", \"<b>def</b>\", ]\n    [ \"***def***\", \"<b><i>def</i></b>\", ]\n    [ \"**x*def*x**\", \"<b>x<i>def</i>x</b>\", ]\n    [ \"*x**def**x*\", \"<i>x<b>def</b>x</i>\", ]\n    [ \"***abc*def**\", \"<b><i>abc</i>def</b>\", ]\n    [ \"***abc**def*\", \"<b><i>abc</i></b><i>def</i>\", ]\n    [ \"*x***def**\", \"<i>x</i><b>def</b>\", ]\n    [ \"**x***def*\", \"<b>x</b><i>def</i>\", ]\n    [ \"*\", \"<i>\", ]\n    [ \"**\", \"<b>\", ]\n    [ \"***\", \"<b><i>\", ]\n    ]\n  #.........................................................................................................\n  md_lexer  = new_toy_md_lexer()\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      #.....................................................................................................\n      p = new Pipeline()\n      p.push ( source, send ) ->\n        send e for e from md_lexer.walk source\n      p.push H2.$parse_md_stars()\n      #.....................................................................................................\n      p.send probe\n      result      = p.run_and_stop()\n      result_rpr  = ( d.value for d in result when not d.$stamped ).join ''\n      # urge '^08-1^', ( Object.keys d ).sort() for d in result\n      # H.tabulate \"#{probe} -> #{result_rpr} (#{matcher})\", result # unless result_rpr is matcher\n      #.....................................................................................................\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_string_literals = ( T, done ) ->\n  { Interlex\n    compose  }        = require '../../../apps/intertext-lexer'\n  #.........................................................................................................\n  new_lexer = ->\n    lexer   = new Interlex { split: 'lines', }\n    #.........................................................................................................\n    do =>\n      mode = 'plain'\n      lexer.add_lexeme { mode, lxid: 'escchr', jump: null,           pattern: /\\\\(?<chr>.)/u, }\n      lexer.add_lexeme { mode, lxid: 'dq1',    jump: 'dq1[',          pattern: /(?<!\")\"(?!\")/u, }\n      lexer.add_lexeme { mode, lxid: 'nl',     jump: null,           pattern: /$/u, }\n      lexer.add_lexeme { mode, lxid: 'other',  jump: null,           pattern: /[^\"]+/u, }\n    #.........................................................................................................\n    do =>\n      mode = 'dq1'\n      lexer.add_lexeme { mode, lxid: 'escchr', jump: null,           pattern: /\\\\(?<chr>.)/u, }\n      lexer.add_lexeme { mode, lxid: 'text',   jump: null,           pattern: /[^\"]+/u, }\n      lexer.add_lexeme { mode, lxid: 'nl',     jump: null,           pattern: /$/u, }\n      lexer.add_lexeme { mode, lxid: 'dq1',    jump: '.]',            pattern: /\"/u, }\n    #.........................................................................................................\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'helo', [ { $key: 'plain:other', value: 'helo' }, { $key: 'plain:nl', value: '' } ], null ]\n    [ 'helo \"world\"', [ { $key: 'plain:other', value: 'helo ' }, { $key: 'plain:dq1', value: '\"' }, { $key: 'dq1:text', value: 'world' }, { $key: 'dq1:dq1', value: '\"' }, { $key: 'plain:nl', value: '' } ], null ]\n    [ 'helo \"everyone\\nout there\"!', [ { $key: 'plain:other', value: 'helo ' }, { $key: 'plain:dq1', value: '\"' }, { $key: 'dq1:text', value: 'everyone' }, { $key: 'dq1:nl', value: '' }, { $key: 'dq1:text', value: 'out there' }, { $key: 'dq1:dq1', value: '\"' }, { $key: 'plain:other', value: '!' }, { $key: 'plain:nl', value: '' } ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer       = new_lexer()\n      result      = []\n      for token from lexer.walk probe\n        result.push GUY.props.pick_with_fallback token, null, '$key', 'value'\n      result_rpr  = ( d.value for d in result when not d.$stamped ).join ''\n      H.tabulate \"#{rpr probe} -> #{rpr result_rpr}\", result # unless result_rpr is matcher\n      #.....................................................................................................\n      resolve result\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_line_by_line = ( T, done ) ->\n  { Pipeline,         \\\n    $,\n    transforms,     } = require '../../../apps/moonriver'\n  { Interlex\n    compose  }        = require '../../../apps/intertext-lexer'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  probe = \"\"\"\n    *the\n    first*\n    paragraph\n\n    the\n    **second** paragraph\n    \"\"\"\n  #.........................................................................................................\n  new_toy_md_lexer = ( mode = 'plain' ) ->\n    lexer   = new Interlex { dotall: false, end_token: false, }\n    #.........................................................................................................\n    lexer.add_lexeme { mode, lxid: 'escchr', pattern: /\\\\(?<chr>.)/u, }\n    lexer.add_lexeme { mode, lxid: 'star1',  pattern: /(?<!\\*)\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode, lxid: 'star2',  pattern: /(?<!\\*)\\*\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode, lxid: 'star3',  pattern: /(?<!\\*)\\*\\*\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode, lxid: 'other',  pattern: /[^*]+/u, }\n    #.........................................................................................................\n    return lexer\n  #.........................................................................................................\n  new_toy_parser = ( lexer ) ->\n    p = new Pipeline()\n    p.push ( d ) -> urge '^79-1^', rpr d\n    p.push ( d, send ) ->\n      return send d unless isa.text d\n      # send H2.new_token = ref: 'x1', token, mode, lxid, name, value, x1, x2\n      # send new_datom { }\n      send e for e from lexer.walk d\n    p.push H2.$parse_md_stars()\n    return p\n  #.........................................................................................................\n  md_lexer  = new_toy_md_lexer 'md'\n  parser    = new_toy_parser md_lexer\n  #.........................................................................................................\n  result    = []\n  for line from GUY.str.walk_lines probe\n    parser.send line\n    for d from parser.walk()\n      result.push d\n      info '^79-10^', rpr d\n  #.........................................................................................................\n  H.tabulate \"parse line by line\", result\n  # debug '^79-11^', result_rpr = ( md_lexer.rpr_token token for token in result ).join ''\n  result_rpr = ( token.value for token in result when not token.$stamped ? false ).join ''\n  debug '^79-11^', '\\n' + result_rpr\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_nested_codespan = ( T, done ) ->\n  { Pipeline,         \\\n    $,\n    transforms,     } = require '../../../apps/moonriver'\n  { Interlex\n    compose  }        = require '../../../apps/intertext-lexer'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  new_toy_md_lexer = ->\n    lexer   = new Interlex { dotall: false, }\n    mode    = 'plain'\n    #.........................................................................................................\n    lexer.add_lexeme { mode: 'plain',   lxid: 'escchr',    jump: null,       pattern:  /\\\\(?<chr>.)/u,     }\n    lexer.add_lexeme { mode: 'plain',   lxid: 'star1',     jump: null,       pattern:  /(?<!\\*)\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode: 'plain',   lxid: 'codespan',  jump: 'literal[',  pattern:  /(?<!`)`(?!`)/u,    }\n    lexer.add_lexeme { mode: 'plain',   lxid: 'other',     jump: null,       pattern:  /[^*`\\\\]+/u,        }\n    lexer.add_lexeme { mode: 'literal', lxid: 'codespan',  jump: '.]',        pattern:  /(?<!`)`(?!`)/u,    }\n    lexer.add_lexeme { mode: 'literal', lxid: 'text',      jump: null,       pattern:  /(?:\\\\`|[^`])+/u,   }\n    #.........................................................................................................\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ \"*abc*\", \"<i>abc</i>\", ]\n    [ 'helo `world`!', 'helo <code>world</code>!', null ]\n    [ '*foo* `*bar*` baz', '<i>foo</i> <code>*bar*</code> baz', null ]\n    [ '*foo* \\\\`*bar*\\\\` baz', '<i>foo</i> \\\\`<i>bar</i>\\\\` baz', null ]\n    ]\n  #.........................................................................................................\n  $parse_md_codespan = ->\n    return ( d, send ) ->\n      if d.$key is 'plain:codespan'\n        send stamp d\n        return send H2.new_token '^æ2^', d, 'html', 'tag', 'code', '<code>'\n      if d.$key is 'literal:codespan'\n        send stamp d\n        return send H2.new_token '^æ1^', d, 'html', 'tag', 'code', '</code>'\n      send d\n      return null\n  #.........................................................................................................\n  md_lexer  = new_toy_md_lexer()\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      #.....................................................................................................\n      p = new Pipeline()\n      p.push ( source, send ) ->\n        send e for e from md_lexer.walk source\n      p.push H2.$parse_md_star()\n      p.push $parse_md_codespan()\n      #.....................................................................................................\n      p.send probe\n      result      = p.run()\n      result_rpr  = ( d.value for d in result when not d.$stamped ).join ''\n      # urge '^08-1^', ( Object.keys d ).sort() for d in result\n      H.tabulate \"#{probe} -> #{result_rpr} (#{matcher})\", result # unless result_rpr is matcher\n      #.....................................................................................................\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@match_with_lookbehind = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex, compose: c, } = require '../../../apps/intertext-lexer'\n  lexer = new Interlex { split: false, dotall: true, }\n  #.........................................................................................................\n  do =>\n    mode    = 'plain'\n    lexer.add_lexeme { mode, lxid: 'b_after_a',        pattern: ( /(?<=a)b/u           ), }\n    # lexer.add_lexeme { mode, lxid: 'other_a',          pattern: ( /a/u                             ), }\n    # lexer.add_lexeme { mode, lxid: 'other_b',          pattern: ( /b/u                             ), }\n    lexer.add_lexeme { mode, lxid: 'other',            pattern: ( /((?<!a)b|[^b])+/u   ), }\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'foobar abracadabra', \"[plain:other,(0:0)(0:8),='foobar a'][plain:b_after_a,(0:8)(0:9),='b'][plain:other,(0:9)(0:15),='racada'][plain:b_after_a,(0:15)(0:16),='b'][plain:other,(0:16)(0:18),='ra']\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result      = lexer.run probe\n      result_rpr  = ( lexer.rpr_token token for token in result ).join ''\n      H.tabulate \"#{probe} -> #{result_rpr} (#{matcher})\", result\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@match_start_of_line = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex, compose: c, } = require '../../../apps/intertext-lexer'\n  lexer = new Interlex { split: false, dotall: true, end_token: true, }\n  #.........................................................................................................\n  do =>\n    mode    = 'plain'\n    lexer.add_lexeme { mode, lxid: 'b_after_nl',       pattern: ( /(?<=\\n)b/u          ), }\n    lexer.add_lexeme { mode, lxid: 'b_first',          pattern: ( /^b/u                ), }\n    lexer.add_lexeme { mode, lxid: 'other',            pattern: ( /((?<!\\n)b|[^b])+/u  ), }\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'foobar \\nbracad\\nbra', \"[plain:other,(0:0)(0:8),='foobar \\\\n'][plain:b_after_nl,(0:8)(0:9),='b'][plain:other,(0:9)(0:15),='racad\\\\n'][plain:b_after_nl,(0:15)(0:16),='b'][plain:other,(0:16)(0:18),='ra'][plain:$eof,(0:18)(0:18),='']\", null ]\n    [ 'b', \"[plain:b_first,(0:0)(0:1),='b'][plain:$eof,(0:1)(0:1),='']\", null ]\n    [ '\\nb', \"[plain:other,(0:0)(0:1),='\\\\n'][plain:b_after_nl,(0:1)(0:2),='b'][plain:$eof,(0:2)(0:2),='']\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result      = lexer.run probe\n      result_rpr  = ( lexer.rpr_token token for token in result ).join ''\n      # H.tabulate \"#{probe} -> #{result_rpr} (#{matcher})\", result\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@match_end_of_line = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex, compose: c, } = require '../../../apps/intertext-lexer'\n  lexer = new Interlex { split: false, }\n  #.........................................................................................................\n  do =>\n    mode    = 'plain'\n    lexer.add_lexeme { mode, lxid: 'eol',      pattern: ( /$/u  ), }\n    lexer.add_lexeme { mode, lxid: 'ws',       pattern: ( /\\s+/u ), }\n    lexer.add_lexeme { mode, lxid: 'word',     pattern: ( /\\S+/u ), }\n  #.........................................................................................................\n  probe = \"\"\"\n    A line by line\n    lexing\n    probe\\x20\\x20\\x20\n    \"\"\"\n  matcher = [\n    \"[plain:word,(0:0)(0:1),='A']\",\n    \"[plain:ws,(0:1)(0:2),=' ']\",\n    \"[plain:word,(0:2)(0:6),='line']\",\n    \"[plain:ws,(0:6)(0:7),=' ']\",\n    \"[plain:word,(0:7)(0:9),='by']\",\n    \"[plain:ws,(0:9)(0:10),=' ']\",\n    \"[plain:word,(0:10)(0:14),='line']\",\n    \"[plain:eol,(0:14)(0:14),='']\",\n    \"[plain:word,(0:0)(0:6),='lexing']\",\n    \"[plain:eol,(0:6)(0:6),='']\",\n    \"[plain:word,(0:0)(0:5),='probe']\",\n    \"[plain:eol,(0:5)(0:5),='']\" ]\n  #.........................................................................................................\n  result      = []\n  result_rpr  = []\n  for line from GUY.str.walk_lines probe\n    for token from lexer.walk line\n      result.push token\n      result_rpr.push lexer.rpr_token token\n  #.........................................................................................................\n  T?.eq result_rpr, matcher\n  H.tabulate ( rpr probe ), result\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@cannot_redeclare_lexeme = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex, compose: c, } = require '../../../apps/intertext-lexer'\n  #.........................................................................................................\n  lexer = new Interlex()\n  T?.throws /lexeme plain:eol already exists/, =>\n  # do =>\n    mode    = 'plain'\n    lexer.add_lexeme { mode, lxid: 'eol',      pattern: ( /$/u  ), }\n    lexer.add_lexeme { mode, lxid: 'eol',      pattern: ( /$/u  ), }\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@allow_value_and_empty_value = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex, compose: c, } = require '../../../apps/intertext-lexer'\n  mode = 'plain'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ { mode, lxid: 'eol',             empty_value: '\\n',  pattern: /$/u, }, '', ], [ { $key: 'plain:eol', value: '\\n' } ], null, ]\n    [ [ { mode, lxid: 'eol',                                 pattern: /$/u, }, '', ], [ { $key: 'plain:eol', value: '' } ], null, ]\n    [ [ { mode, lxid: 'eol', value: '\\n',                    pattern: /$/u, }, '', ], [ { $key: 'plain:eol', value: '\\n' } ], null, ]\n    [ [ { mode, lxid: 'x',   value: 'u',                     pattern: 'x', }, 'x', ], [ { $key: 'plain:x',   value: 'u' } ], null, ]\n    [ [ { mode, lxid: 'x',   value: 'u',                     pattern: /x/u, }, 'x', ], [ { $key: 'plain:x',   value: 'u' } ], null, ]\n    [ [ { mode, lxid: 'x',   value: 'u', empty_value: '!!!', pattern: /x|/u, }, '', ], [ { $key: 'plain:x',   value: '!!!' } ], null, ]\n    [ [ { mode, lxid: 'x',   value: 'u', empty_value: '!!!', pattern: /x/u, }, 'x', ], [ { $key: 'plain:x',   value: 'u' } ], null, ]\n    [ [ { mode, lxid: 'x',   value: 'u',                     pattern: /x|/u, }, 'x', ], [ { $key: 'plain:x',   value: 'u' }, { $key: 'plain:x',   value: 'u' } ], null, ]\n    [ [ { mode, lxid: 'x',   value: 'u', empty_value: '!!!', pattern: /x|/u, }, 'x', ], [ { $key: 'plain:x',   value: 'u' }, { $key: 'plain:x',   value: '!!!' } ], null, ]\n    [ [ { mode, lxid: 'x',   value: ( -> 'u' ), empty_value: ( -> '!!!' ), pattern: /x|/u, }, 'x', ], [ { $key: 'plain:x',   value: 'u' }, { $key: 'plain:x',   value: '!!!' } ], null, ]\n    ]\n  #.........................................................................................................\n  new_lexer = ->\n    lexer = new Interlex()\n    mode    = 'plain'\n    return lexer\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ lexeme\n        source  ] = probe\n      lexer       = new_lexer()\n      lexer.add_lexeme lexeme\n      result      = lexer.run source\n      # H.tabulate ( rpr probe ), result\n      result      = ( ( GUY.props.pick_with_fallback token, null, '$key', 'value' ) for token in result )\n      resolve result\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@value_2 = ( T, done ) ->\n  { Interlex\n    compose  }        = require '../../../apps/intertext-lexer'\n  #.........................................................................................................\n  new_lexer = ->\n    lexer   = new Interlex { split: 'lines', }\n    #.........................................................................................................\n    do =>\n      mode = 'plain'\n      lexer.add_lexeme { mode, lxid: 'escchr', jump: null,           pattern: /\\\\(?<chr>.)/u, reserved: '\\\\', }\n      lexer.add_lexeme { mode, lxid: 'dq1',    jump: 'dq1[',         pattern: /(?<!\")\"(?!\")/u, reserved: '\"', }\n      lexer.add_lexeme { mode, lxid: 'nl',     jump: null,           pattern: /$/u, value: '\\n', }\n      lexer.add_catchall_lexeme { mode, lxid: 'text', concat: true, }\n    #.........................................................................................................\n    do =>\n      mode = 'dq1'\n      lexer.add_lexeme { mode, lxid: 'escchr', jump: null,           pattern: /\\\\(?<chr>.)/u, reserved: '\\\\', }\n      lexer.add_lexeme { mode, lxid: 'dq1',    jump: '.]',            pattern: /\"/u, reserved: '\"', }\n      lexer.add_lexeme { mode, lxid: 'nl',     jump: null,           pattern: /$/u, value: '\\n', }\n      lexer.add_catchall_lexeme { mode, lxid: 'text', concat: true, }\n    #.........................................................................................................\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'helo', [ { $key: 'plain:text', value: 'helo' }, { $key: 'plain:nl', value: '\\n' } ], null ]\n    [ 'helo \"world\"', [ { $key: 'plain:text', value: 'helo ' }, { $key: 'plain:dq1', value: '\"' }, { $key: 'dq1:text', value: 'world' }, { $key: 'dq1:dq1', value: '\"' }, { $key: 'plain:nl', value: '\\n' } ], null ]\n    [ 'helo \"everyone\\nout there\"!', [ { $key: 'plain:text', value: 'helo ' }, { $key: 'plain:dq1', value: '\"' }, { $key: 'dq1:text', value: 'everyone' }, { $key: 'dq1:nl', value: '\\n' }, { $key: 'dq1:text', value: 'out there' }, { $key: 'dq1:dq1', value: '\"' }, { $key: 'plain:text', value: '!' }, { $key: 'plain:nl', value: '\\n' } ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer       = new_lexer()\n      # H.show_lexer_as_table 'new_syntax_for_modes', lexer; process.exit 111\n      result      = []\n      for token from lexer.walk probe\n        result.push GUY.props.pick_with_fallback token, null, '$key', 'value'\n      result_rpr  = ( d.value for d in result when not d.$stamped ).join ''\n      # H.tabulate \"#{rpr probe} -> #{rpr result_rpr}\", result # unless result_rpr is matcher\n      #.....................................................................................................\n      resolve result\n  #.........................................................................................................\n  done?()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@use_create_for_custom_behavior = ( T, done ) ->\n  { Interlex } = require '../../../apps/intertext-lexer'\n  create_call_count = 0\n  #.........................................................................................................\n  new_lexer = ->\n    lexer = new Interlex { split: 'lines', }\n    #.......................................................................................................\n    new_escchr_descriptor = ( mode ) ->\n      create = ( token ) ->\n        create_call_count++\n        token.data = { chr: '\\n', } unless ( token.data?.chr )?\n        return token\n      return { mode, lxid: 'escchr', pattern: /\\\\(?<chr>.|$)/u, reserved: '\\\\', create, }\n    #.......................................................................................................\n    do =>\n      mode = 'plain'\n      lexer.add_lexeme new_escchr_descriptor mode\n      lexer.add_lexeme { mode,  lxid: 'nl',        jump: null,       pattern: ( /$/u ), }\n      lexer.add_lexeme { mode,  lxid: 'ws',        jump: null,       pattern: ( /\\s+/u ), }\n      lexer.add_lexeme { mode,  lxid: 'word',      jump: null,       pattern: ( /\\S+/u ), }\n      lexer.add_catchall_lexeme { mode, lxid: 'other',     concat: true, }\n      lexer.add_reserved_lexeme { mode, lxid: 'forbidden', concat: true, }\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'foo <!-- comment --> bar', [ { $key: 'plain:word', value: 'foo' }, { $key: 'plain:ws', value: ' ' }, { $key: 'plain:word', value: '<!--' }, { $key: 'plain:ws', value: ' ' }, { $key: 'plain:word', value: 'comment' }, { $key: 'plain:ws', value: ' ' }, { $key: 'plain:word', value: '-->' }, { $key: 'plain:ws', value: ' ' }, { $key: 'plain:word', value: 'bar' }, { $key: 'plain:nl', value: '' } ], null ]\n    [ 'foo <!-- \\\\comment \\n --> bar', [ { $key: 'plain:word', value: 'foo' }, { $key: 'plain:ws', value: ' ' }, { $key: 'plain:word', value: '<!--' }, { $key: 'plain:ws', value: ' ' }, { $key: 'plain:escchr', value: '\\\\c', data: { chr: 'c' } }, { $key: 'plain:word', value: 'omment' }, { $key: 'plain:nl', value: '' }, { $key: 'plain:ws', value: ' ' }, { $key: 'plain:word', value: '-->' }, { $key: 'plain:ws', value: ' ' }, { $key: 'plain:word', value: 'bar' }, { $key: 'plain:nl', value: '' } ], null ]\n    [ 'foo <!-- comment \\\\\\n --> bar', [ { $key: 'plain:word', value: 'foo' }, { $key: 'plain:ws', value: ' ' }, { $key: 'plain:word', value: '<!--' }, { $key: 'plain:ws', value: ' ' }, { $key: 'plain:word', value: 'comment' }, { $key: 'plain:ws', value: ' ' }, { $key: 'plain:escchr', value: '\\\\', data: { chr: '\\n' } }, { $key: 'plain:nl', value: '' }, { $key: 'plain:ws', value: ' ' }, { $key: 'plain:word', value: '-->' }, { $key: 'plain:ws', value: ' ' }, { $key: 'plain:word', value: 'bar' }, { $key: 'plain:nl', value: '' } ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer   = new_lexer()\n      T?.eq ( type_of lexer.registry.plain.lexemes.escchr.create ), 'function'\n      result  = []\n      for token from lexer.walk probe\n        d = GUY.props.omit_nullish GUY.props.pick_with_fallback token, null, '$key', 'value', 'data'\n        # debug '^432^', d if d.$key.endsWith ':escchr'\n        result.push d\n      # H.tabulate ( rpr probe ), result\n      resolve result\n  #.........................................................................................................\n  T?.eq create_call_count, 2\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @lex_tags\n  test @\n  # test @lex_tags_with_rpr\n  # test @parse_md_stars_markup\n"
  ]
}