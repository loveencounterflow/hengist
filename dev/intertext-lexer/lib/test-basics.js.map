{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERTEXT-LEXER/TESTS/BASICS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\nafter                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n{ DATOM }                 = require '../../../apps/datom'\n{ new_datom\n  lets\n  stamp     }             = DATOM\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nnew_token = ( ref, token, mode, tid, name, value, start, stop, x = null, lexeme = null ) ->\n  ### TAINT recreation of `Interlex::new_token()` ###\n  jump      = lexeme?.jump ? null\n  { start\n    stop  } = token\n  return new_datom \"^#{mode}\", { mode, tid, mk: \"#{mode}:#{tid}\", jump, name, value, start, stop, x, $: ref, }\n\n#-----------------------------------------------------------------------------------------------------------\n$parse_md_star = ->\n  #.........................................................................................................\n  within =\n    one:    false\n  start_of =\n    one:    null\n  #.........................................................................................................\n  enter = ( mode, start ) ->\n    within[   mode ] = true\n    start_of[ mode ] = start\n    return null\n  enter.one = ( start ) -> enter 'one', start\n  #.........................................................................................................\n  exit = ( mode ) ->\n    within[   mode ] = false\n    start_of[ mode ] = null\n    return null\n  exit.one = -> exit 'one'\n  #.........................................................................................................\n  return ( d, send ) ->\n    switch d.tid\n      #.....................................................................................................\n      when 'star1'\n        send stamp d\n        if within.one then  exit.one();         send new_token '^æ1^', d, 'html', 'tag', 'i', '</i>'\n        else                enter.one d.start;  send new_token '^æ2^', d, 'html', 'tag', 'i', '<i>'\n      #.....................................................................................................\n      else send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$parse_md_stars = ->\n  within =\n    one:    false\n    two:    false\n  start_of =\n    one:    null\n    two:    null\n  #.........................................................................................................\n  enter = ( mode, start ) ->\n    within[   mode ] = true\n    start_of[ mode ] = start\n    return null\n  enter.one = ( start ) -> enter 'one', start\n  enter.two = ( start ) -> enter 'two', start\n  #.........................................................................................................\n  exit = ( mode ) ->\n    within[   mode ] = false\n    start_of[ mode ] = null\n    return null\n  exit.one = -> exit 'one'\n  exit.two = -> exit 'two'\n  #.........................................................................................................\n  return parse_md_stars = ( d, send ) ->\n    switch d.tid\n      #.....................................................................................................\n      when 'star1'\n        send stamp d\n        if within.one then  exit.one();         send new_token '^æ1^', d, 'html', 'tag', 'i', '</i>'\n        else                enter.one d.start;  send new_token '^æ2^', d, 'html', 'tag', 'i', '<i>'\n      #.....................................................................................................\n      when 'star2'\n        send stamp d\n        if within.two\n          if within.one\n            if start_of.one > start_of.two\n              exit.one();         send new_token '^æ3^', d, 'html', 'tag', 'i', '</i>'\n              exit.two();         send new_token '^æ4^', d, 'html', 'tag', 'b', '</b>'\n              enter.one d.start;  send new_token '^æ5^', d, 'html', 'tag', 'i', '<i>'\n            else\n              exit.two();         send new_token '^æ6^', d, 'html', 'tag', 'b', '</b>'\n          else\n            exit.two();         send new_token '^æ7^', d, 'html', 'tag', 'b', '</b>'\n        else\n          enter.two d.start;  send new_token '^æ8^', d, 'html', 'tag', 'b', '<b>'\n      #.....................................................................................................\n      when 'star3'\n        send stamp d\n        if within.one\n          if within.two\n            if start_of.one > start_of.two\n              exit.one();       send new_token '^æ9^', d, 'html', 'tag', 'i', '</i>'\n              exit.two();       send new_token '^æ10^', d, 'html', 'tag', 'b', '</b>'\n            else\n              exit.two();       send new_token '^æ11^', d, 'html', 'tag', 'b', '</b>'\n              exit.one();       send new_token '^æ12^', d, 'html', 'tag', 'i', '</i>'\n          else\n            exit.one();         send new_token '^æ13^', d, 'html', 'tag', 'i', '</i>'\n            enter.two d.start;  send new_token '^æ14^', d, 'html', 'tag', 'b', '<b>'\n        else\n          if within.two\n            exit.two();         send new_token '^æ15^', d, 'html', 'tag', 'b', '</b>'\n            enter.one d.start;  send new_token '^æ16^', d, 'html', 'tag', 'i', '<i>'\n          else\n            enter.two d.start;  send new_token '^æ17^', d, 'html', 'tag', 'b', '<b>'\n            enter.one d.start + 2;  send new_token '^æ18^', { start: d.start + 2, stop: d.stop, }, 'html', 'tag', 'i', '<i>'\n      #.....................................................................................................\n      else send d\n    return null\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@simple = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex } = require '../../../apps/intertext-lexer'\n  lexer = new Interlex()\n  T?.eq lexer._metachr, '𝔛'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ 'xxx',    /123/,          ], /123/,                 ]\n    [ [ 'xxx',    /123/ug,        ], /123/ug,               ]\n    [ [ 'xxx',    /123/guy,       ], /123/guy,              ]\n    [ [ 'xxx',    /(?<a>x.)/gu    ], /(?<xxx𝔛a>x.)/gu,      ]\n    [ [ 'escchr', /\\\\(?<chr>.)/u  ], /\\\\(?<escchr𝔛chr>.)/u, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      #.....................................................................................................\n      resolve ( lexer._rename_groups probe... ), matcher\n  #.........................................................................................................\n  # re = /((?<=\\\\\\\\)|(?<!\\\\))\\(\\?<([^>]+)>/gu\n  # debug '^46^', ( rpr /\\\\(?<x>)/.source ), rpr /\\\\(?<x>)/.source.replace re, '#'\n  # debug '^46^', ( rpr /\\(?<x>\\)/.source ), rpr /\\(?<x>\\)/.source.replace re, '#'\n  # debug '^46^', ( rpr /(?<x>)/.source   ), rpr /(?<x>)/.source.replace re, '#'\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_strings_for_patterns = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex } = require '../../../apps/intertext-lexer'\n  lexer = new Interlex()\n  lexer.add_lexeme { mode: 'sql', tid: 'select',  pattern: 'select',    }\n  lexer.add_lexeme { mode: 'sql', tid: 'from',    pattern: 'from',      }\n  lexer.add_lexeme { mode: 'sql', tid: 'star',    pattern: '*',         }\n  lexer.add_lexeme { mode: 'sql', tid: 'ws',      pattern: /\\s+/u,      }\n  lexer.add_lexeme { mode: 'sql', tid: 'other',   pattern: /\\S+/u,      }\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'select * from t;', \"select:'select'|ws:' '|star:'*'|ws:' '|from:'from'|ws:' '|other:'t;'\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    # do =>\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      #.....................................................................................................\n      result      = lexer.run probe\n      result_rpr  = ( \"#{t.tid}:#{rpr t.value}\" for t in result ).join '|'\n      H.tabulate \"#{rpr probe} -> #{rpr result_rpr}\", result\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_lexer_without_lexemes = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex }  = require '../../../apps/intertext-lexer'\n  probes_and_matchers = [\n    [ '', \"$eof:''\", null ]\n    [ 'select * from t;', \"$error:''\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    # do =>\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer       = new Interlex { end_token: true, }\n      result      = lexer.run probe\n      result_rpr  = ( \"#{t.tid}:#{rpr t.value}\" for t in result ).join '|'\n      H.tabulate \"#{rpr probe} -> #{rpr result_rpr}\", result\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@cannot_return_from_initial_mode = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex } = require '../../../apps/intertext-lexer'\n  #.........................................................................................................\n  get_lexer = ->\n    lexer = new Interlex { end_token: true, }\n    lexer.add_lexeme { mode: 'base',  tid: 'a',             pattern: 'a', }\n    lexer.add_lexeme { mode: 'base',  tid: 'b', jump: 'up', pattern: 'b', }\n    lexer.add_lexeme { mode: 'up',    tid: 'c',             pattern: 'c', }\n    lexer.add_lexeme { mode: 'up',    tid: 'd', jump: '^',  pattern: 'd', }\n    lexer.add_lexeme { mode: 'base',  tid: 'e', jump: '^',  pattern: 'e', }\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'abc', \"base:a:'a'|base:b:'b'|up:c:'c'|up:$eof:''\", null ]\n    [ 'abcde', null, \"unable to jump back from initial state\" ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    # do =>\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      #.....................................................................................................\n      lexer       = get_lexer()\n      result      = lexer.run probe\n      result_rpr  = ( \"#{t.mk}:#{rpr t.value}\" for t in result ).join '|'\n      H.tabulate \"#{rpr probe} -> #{rpr result_rpr}\", result\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@lex_tags = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex, compose: c, } = require '../../../apps/intertext-lexer'\n  #.........................................................................................................\n  new_lexer = ->\n    lexer = new Interlex { end_token: true, }\n    do =>\n      ### NOTE arbitrarily forbidding question marks and not using fallback token to test for error tokens ###\n      mode    = 'plain'\n      lexer.add_lexeme { mode, tid: 'escchr',           pattern: ( /\\\\(?<chr>.)/u                             ), }\n      lexer.add_lexeme { mode, tid: 'text',             pattern: ( c.suffix '+', c.charSet.complement /[<`\\\\?]/u  ), }\n      lexer.add_lexeme { mode, tid: 'tag', jump: 'tag', pattern: ( /<(?<lslash>\\/?)/u                         ), }\n      lexer.add_lexeme { mode, tid: 'E_backticks',      pattern: ( /`+/                                       ), }\n      # lexer.add_lexeme mode, 'other',        /./u\n    #.........................................................................................................\n    do =>\n      mode    = 'tag'\n      lexer.add_lexeme { mode, tid: 'escchr',         pattern: ( /\\\\(?<chr>.)/u                           ), }\n      lexer.add_lexeme { mode, tid: 'end', jump: '^', pattern: ( />/u                                     ), }\n      lexer.add_lexeme { mode, tid: 'text',           pattern: ( c.suffix '+', c.charSet.complement /[>\\\\]/u  ), }\n      lexer.add_lexeme { mode, tid: 'other',          pattern: ( /./u                                     ), }\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'helo <bold>`world`</bold>', [ { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'helo ', start: 0, stop: 5, x: null, source: 'helo <bold>`world`</bold>', '$key': '^plain' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 5, stop: 6, x: { lslash: null }, source: 'helo <bold>`world`</bold>', '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'bold', start: 6, stop: 10, x: null, source: 'helo <bold>`world`</bold>', '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: 'plain', value: '>', start: 10, stop: 11, x: null, source: 'helo <bold>`world`</bold>', '$key': '^tag' }, { mode: 'plain', tid: 'E_backticks', mk: 'plain:E_backticks', jump: null, value: '`', start: 11, stop: 12, x: null, source: 'helo <bold>`world`</bold>', '$key': '^plain' }, { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'world', start: 12, stop: 17, x: null, source: 'helo <bold>`world`</bold>', '$key': '^plain' }, { mode: 'plain', tid: 'E_backticks', mk: 'plain:E_backticks', jump: null, value: '`', start: 17, stop: 18, x: null, source: 'helo <bold>`world`</bold>', '$key': '^plain' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '</', start: 18, stop: 20, x: { lslash: '/' }, source: 'helo <bold>`world`</bold>', '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'bold', start: 20, stop: 24, x: null, source: 'helo <bold>`world`</bold>', '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: 'plain', value: '>', start: 24, stop: 25, x: null, source: 'helo <bold>`world`</bold>', '$key': '^tag' }, { mode: 'plain', tid: '$eof', mk: 'plain:$eof', jump: null, value: '', start: 25, stop: 25, x: null, source: 'helo <bold>`world`</bold>', '$key': '^plain' } ], null ]\n    [ '<x v=\\\\> z=42>', [ { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 0, stop: 1, x: { lslash: null }, source: '<x v=\\\\> z=42>', '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'x v=', start: 1, stop: 5, x: null, source: '<x v=\\\\> z=42>', '$key': '^tag' }, { mode: 'tag', tid: 'escchr', mk: 'tag:escchr', jump: null, value: '\\\\>', start: 5, stop: 7, x: { chr: '>' }, source: '<x v=\\\\> z=42>', '$key': '^tag' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: ' z=42', start: 7, stop: 12, x: null, source: '<x v=\\\\> z=42>', '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: 'plain', value: '>', start: 12, stop: 13, x: null, source: '<x v=\\\\> z=42>', '$key': '^tag' }, { mode: 'plain', tid: '$eof', mk: 'plain:$eof', jump: null, value: '', start: 13, stop: 13, x: null, source: '<x v=\\\\> z=42>', '$key': '^plain' } ], null ]\n    [ '<x v=\\\\> z=42\\\\>', [ { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 0, stop: 1, x: { lslash: null }, source: '<x v=\\\\> z=42\\\\>', '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'x v=', start: 1, stop: 5, x: null, source: '<x v=\\\\> z=42\\\\>', '$key': '^tag' }, { mode: 'tag', tid: 'escchr', mk: 'tag:escchr', jump: null, value: '\\\\>', start: 5, stop: 7, x: { chr: '>' }, source: '<x v=\\\\> z=42\\\\>', '$key': '^tag' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: ' z=42', start: 7, stop: 12, x: null, source: '<x v=\\\\> z=42\\\\>', '$key': '^tag' }, { mode: 'tag', tid: 'escchr', mk: 'tag:escchr', jump: null, value: '\\\\>', start: 12, stop: 14, x: { chr: '>' }, source: '<x v=\\\\> z=42\\\\>', '$key': '^tag' }, { mode: 'tag', tid: '$eof', mk: 'tag:$eof', jump: null, value: '', start: 14, stop: 14, x: null, source: '<x v=\\\\> z=42\\\\>', '$key': '^tag' } ], null ]\n    [ 'a <b', [ { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'a ', start: 0, stop: 2, x: null, source: 'a <b', '$key': '^plain' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 2, stop: 3, x: { lslash: null }, source: 'a <b', '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'b', start: 3, stop: 4, x: null, source: 'a <b', '$key': '^tag' }, { mode: 'tag', tid: '$eof', mk: 'tag:$eof', jump: null, value: '', start: 4, stop: 4, x: null, source: 'a <b', '$key': '^tag' } ], null ]\n    [ 'what? error?', [ { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'what', start: 0, stop: 4, x: null, source: 'what? error?', '$key': '^plain' }, { mode: 'plain', tid: '$error', mk: 'plain:$error', jump: null, value: '', start: 4, stop: 4, x: { code: 'nomatch' }, source: 'what? error?', '$key': '^plain' } ], null ]\n    [ 'd <', [ { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'd ', start: 0, stop: 2, x: null, source: 'd <', '$key': '^plain' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 2, stop: 3, x: { lslash: null }, source: 'd <', '$key': '^plain' }, { mode: 'tag', tid: '$eof', mk: 'tag:$eof', jump: null, value: '', start: 3, stop: 3, x: null, source: 'd <', '$key': '^tag' } ], null ]\n    [ '<c', [ { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 0, stop: 1, x: { lslash: null }, source: '<c', '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'c', start: 1, stop: 2, x: null, source: '<c', '$key': '^tag' }, { mode: 'tag', tid: '$eof', mk: 'tag:$eof', jump: null, value: '', start: 2, stop: 2, x: null, source: '<c', '$key': '^tag' } ], null ]\n    [ '<', [ { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 0, stop: 1, x: { lslash: null }, source: '<', '$key': '^plain' }, { mode: 'tag', tid: '$eof', mk: 'tag:$eof', jump: null, value: '', start: 1, stop: 1, x: null, source: '<', '$key': '^tag' } ], null ]\n    [ '', [ { mode: 'plain', tid: '$eof', mk: 'plain:$eof', jump: null, value: '', start: 0, stop: 0, x: null, source: '', '$key': '^plain' } ], null ]\n    [ 'helo \\\\<bold>`world`</bold>', [ { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'helo ', start: 0, stop: 5, x: null, source: 'helo \\\\<bold>`world`</bold>', '$key': '^plain' }, { mode: 'plain', tid: 'escchr', mk: 'plain:escchr', jump: null, value: '\\\\<', start: 5, stop: 7, x: { chr: '<' }, source: 'helo \\\\<bold>`world`</bold>', '$key': '^plain' }, { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'bold>', start: 7, stop: 12, x: null, source: 'helo \\\\<bold>`world`</bold>', '$key': '^plain' }, { mode: 'plain', tid: 'E_backticks', mk: 'plain:E_backticks', jump: null, value: '`', start: 12, stop: 13, x: null, source: 'helo \\\\<bold>`world`</bold>', '$key': '^plain' }, { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'world', start: 13, stop: 18, x: null, source: 'helo \\\\<bold>`world`</bold>', '$key': '^plain' }, { mode: 'plain', tid: 'E_backticks', mk: 'plain:E_backticks', jump: null, value: '`', start: 18, stop: 19, x: null, source: 'helo \\\\<bold>`world`</bold>', '$key': '^plain' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '</', start: 19, stop: 21, x: { lslash: '/' }, source: 'helo \\\\<bold>`world`</bold>', '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'bold', start: 21, stop: 25, x: null, source: 'helo \\\\<bold>`world`</bold>', '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: 'plain', value: '>', start: 25, stop: 26, x: null, source: 'helo \\\\<bold>`world`</bold>', '$key': '^tag' }, { mode: 'plain', tid: '$eof', mk: 'plain:$eof', jump: null, value: '', start: 26, stop: 26, x: null, source: 'helo \\\\<bold>`world`</bold>', '$key': '^plain' } ], null ]\n    [ '<b>helo \\\\<bold>`world`</bold></b>', [ { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 0, stop: 1, x: { lslash: null }, source: '<b>helo \\\\<bold>`world`</bold></b>', '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'b', start: 1, stop: 2, x: null, source: '<b>helo \\\\<bold>`world`</bold></b>', '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: 'plain', value: '>', start: 2, stop: 3, x: null, source: '<b>helo \\\\<bold>`world`</bold></b>', '$key': '^tag' }, { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'helo ', start: 3, stop: 8, x: null, source: '<b>helo \\\\<bold>`world`</bold></b>', '$key': '^plain' }, { mode: 'plain', tid: 'escchr', mk: 'plain:escchr', jump: null, value: '\\\\<', start: 8, stop: 10, x: { chr: '<' }, source: '<b>helo \\\\<bold>`world`</bold></b>', '$key': '^plain' }, { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'bold>', start: 10, stop: 15, x: null, source: '<b>helo \\\\<bold>`world`</bold></b>', '$key': '^plain' }, { mode: 'plain', tid: 'E_backticks', mk: 'plain:E_backticks', jump: null, value: '`', start: 15, stop: 16, x: null, source: '<b>helo \\\\<bold>`world`</bold></b>', '$key': '^plain' }, { mode: 'plain', tid: 'text', mk: 'plain:text', jump: null, value: 'world', start: 16, stop: 21, x: null, source: '<b>helo \\\\<bold>`world`</bold></b>', '$key': '^plain' }, { mode: 'plain', tid: 'E_backticks', mk: 'plain:E_backticks', jump: null, value: '`', start: 21, stop: 22, x: null, source: '<b>helo \\\\<bold>`world`</bold></b>', '$key': '^plain' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '</', start: 22, stop: 24, x: { lslash: '/' }, source: '<b>helo \\\\<bold>`world`</bold></b>', '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'bold', start: 24, stop: 28, x: null, source: '<b>helo \\\\<bold>`world`</bold></b>', '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: 'plain', value: '>', start: 28, stop: 29, x: null, source: '<b>helo \\\\<bold>`world`</bold></b>', '$key': '^tag' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '</', start: 29, stop: 31, x: { lslash: '/' }, source: '<b>helo \\\\<bold>`world`</bold></b>', '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'b', start: 31, stop: 32, x: null, source: '<b>helo \\\\<bold>`world`</bold></b>', '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: 'plain', value: '>', start: 32, stop: 33, x: null, source: '<b>helo \\\\<bold>`world`</bold></b>', '$key': '^tag' }, { mode: 'plain', tid: '$eof', mk: 'plain:$eof', jump: null, value: '', start: 33, stop: 33, x: null, source: '<b>helo \\\\<bold>`world`</bold></b>', '$key': '^plain' } ], null ]\n    [ '<i><b></b></i>', [ { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 0, stop: 1, x: { lslash: null }, source: '<i><b></b></i>', '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'i', start: 1, stop: 2, x: null, source: '<i><b></b></i>', '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: 'plain', value: '>', start: 2, stop: 3, x: null, source: '<i><b></b></i>', '$key': '^tag' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '<', start: 3, stop: 4, x: { lslash: null }, source: '<i><b></b></i>', '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'b', start: 4, stop: 5, x: null, source: '<i><b></b></i>', '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: 'plain', value: '>', start: 5, stop: 6, x: null, source: '<i><b></b></i>', '$key': '^tag' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '</', start: 6, stop: 8, x: { lslash: '/' }, source: '<i><b></b></i>', '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'b', start: 8, stop: 9, x: null, source: '<i><b></b></i>', '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: 'plain', value: '>', start: 9, stop: 10, x: null, source: '<i><b></b></i>', '$key': '^tag' }, { mode: 'plain', tid: 'tag', mk: 'plain:tag', jump: 'tag', value: '</', start: 10, stop: 12, x: { lslash: '/' }, source: '<i><b></b></i>', '$key': '^plain' }, { mode: 'tag', tid: 'text', mk: 'tag:text', jump: null, value: 'i', start: 12, stop: 13, x: null, source: '<i><b></b></i>', '$key': '^tag' }, { mode: 'tag', tid: 'end', mk: 'tag:end', jump: 'plain', value: '>', start: 13, stop: 14, x: null, source: '<i><b></b></i>', '$key': '^tag' }, { mode: 'plain', tid: '$eof', mk: 'plain:$eof', jump: null, value: '', start: 14, stop: 14, x: null, source: '<i><b></b></i>', '$key': '^plain' } ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer   = new_lexer()\n      result  = lexer.run probe\n      for token in result\n        T?.eq probe[ token.start ... token.stop ], token.value\n      H.tabulate ( rpr probe ), result\n      resolve result\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@lex_tags_with_rpr = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex, compose: c, } = require '../../../apps/intertext-lexer'\n  new_lexer = ->\n    lexer = new Interlex { end_token: true, }\n    #.........................................................................................................\n    do =>\n      ### NOTE arbitrarily forbidding question marks and not using fallback token to test for error tokens ###\n      mode    = 'plain'\n      lexer.add_lexeme { mode, tid: 'escchr',           pattern: ( /\\\\(?<chr>.)/u                             ), }\n      lexer.add_lexeme { mode, tid: 'text',             pattern: ( c.suffix '+', c.charSet.complement /[<`\\\\?]/u  ), }\n      lexer.add_lexeme { mode, tid: 'tag', jump: 'tag', pattern: ( /<(?<lslash>\\/?)/u                         ), }\n      lexer.add_lexeme { mode, tid: 'E_backticks',      pattern: ( /`+/                                       ), }\n      # lexer.add_lexeme mode, 'other',        /./u\n    #.........................................................................................................\n    do =>\n      mode    = 'tag'\n      lexer.add_lexeme { mode, tid: 'escchr',         pattern: ( /\\\\(?<chr>.)/u                           ), }\n      lexer.add_lexeme { mode, tid: 'end', jump: '^', pattern: ( />/u                                     ), }\n      lexer.add_lexeme { mode, tid: 'text',           pattern: ( c.suffix '+', c.charSet.complement /[>\\\\]/u  ), }\n      lexer.add_lexeme { mode, tid: 'other',          pattern: ( /./u                                     ), }\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'helo <bold>`world`</bold>', \"[plain:text,(0:5),='helo '][plain:tag>tag,(5:6),='<',lslash:null][tag:text,(6:10),='bold'][tag:end>plain,(10:11),='>'][plain:E_backticks,(11:12),='`'][plain:text,(12:17),='world'][plain:E_backticks,(17:18),='`'][plain:tag>tag,(18:20),='</',lslash:'/'][tag:text,(20:24),='bold'][tag:end>plain,(24:25),='>'][plain:$eof,(25:25),='']\", null ]\n    [ '<x v=\\\\> z=42>', \"[plain:tag>tag,(0:1),='<',lslash:null][tag:text,(1:5),='x v='][tag:escchr,(5:7),='\\\\\\\\>',chr:'>'][tag:text,(7:12),=' z=42'][tag:end>plain,(12:13),='>'][plain:$eof,(13:13),='']\", null ]\n    [ '<x v=\\\\> z=42\\\\>', \"[plain:tag>tag,(0:1),='<',lslash:null][tag:text,(1:5),='x v='][tag:escchr,(5:7),='\\\\\\\\>',chr:'>'][tag:text,(7:12),=' z=42'][tag:escchr,(12:14),='\\\\\\\\>',chr:'>'][tag:$eof,(14:14),='']\", null ]\n    [ 'a <b', \"[plain:text,(0:2),='a '][plain:tag>tag,(2:3),='<',lslash:null][tag:text,(3:4),='b'][tag:$eof,(4:4),='']\", null ]\n    [ 'what? error?', \"[plain:text,(0:4),='what'][plain:$error,(4:4),='',code:'nomatch']\", null ]\n    [ 'd <', \"[plain:text,(0:2),='d '][plain:tag>tag,(2:3),='<',lslash:null][tag:$eof,(3:3),='']\", null ]\n    [ '<c', \"[plain:tag>tag,(0:1),='<',lslash:null][tag:text,(1:2),='c'][tag:$eof,(2:2),='']\", null ]\n    [ '<', \"[plain:tag>tag,(0:1),='<',lslash:null][tag:$eof,(1:1),='']\", null ]\n    [ '', \"[plain:$eof,(0:0),='']\", null ]\n    [ 'helo \\\\<bold>`world`</bold>', \"[plain:text,(0:5),='helo '][plain:escchr,(5:7),='\\\\\\\\<',chr:'<'][plain:text,(7:12),='bold>'][plain:E_backticks,(12:13),='`'][plain:text,(13:18),='world'][plain:E_backticks,(18:19),='`'][plain:tag>tag,(19:21),='</',lslash:'/'][tag:text,(21:25),='bold'][tag:end>plain,(25:26),='>'][plain:$eof,(26:26),='']\", null ]\n    [ '<b>helo \\\\<bold>`world`</bold></b>', \"[plain:tag>tag,(0:1),='<',lslash:null][tag:text,(1:2),='b'][tag:end>plain,(2:3),='>'][plain:text,(3:8),='helo '][plain:escchr,(8:10),='\\\\\\\\<',chr:'<'][plain:text,(10:15),='bold>'][plain:E_backticks,(15:16),='`'][plain:text,(16:21),='world'][plain:E_backticks,(21:22),='`'][plain:tag>tag,(22:24),='</',lslash:'/'][tag:text,(24:28),='bold'][tag:end>plain,(28:29),='>'][plain:tag>tag,(29:31),='</',lslash:'/'][tag:text,(31:32),='b'][tag:end>plain,(32:33),='>'][plain:$eof,(33:33),='']\", null ]\n    [ '<i><b></b></i>', \"[plain:tag>tag,(0:1),='<',lslash:null][tag:text,(1:2),='i'][tag:end>plain,(2:3),='>'][plain:tag>tag,(3:4),='<',lslash:null][tag:text,(4:5),='b'][tag:end>plain,(5:6),='>'][plain:tag>tag,(6:8),='</',lslash:'/'][tag:text,(8:9),='b'][tag:end>plain,(9:10),='>'][plain:tag>tag,(10:12),='</',lslash:'/'][tag:text,(12:13),='i'][tag:end>plain,(13:14),='>'][plain:$eof,(14:14),='']\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer = new_lexer()\n      resolve ( lexer.rpr_token token for token from lexer.walk probe ).join ''\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_md_stars_markup = ( T, done ) ->\n  { Pipeline,         \\\n    $,\n    transforms,     } = require '../../../apps/moonriver'\n  { Interlex\n    compose  }        = require '../../../apps/intertext-lexer'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  new_toy_md_lexer = ( mode = 'plain' ) ->\n    lexer   = new Interlex { dotall: false, }\n    #.........................................................................................................\n    lexer.add_lexeme { mode, tid: 'escchr', pattern: /\\\\(?<chr>.)/u, }\n    lexer.add_lexeme { mode, tid: 'star1',  pattern: /(?<!\\*)\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode, tid: 'star2',  pattern: /(?<!\\*)\\*\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode, tid: 'star3',  pattern: /(?<!\\*)\\*\\*\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode, tid: 'other',  pattern: /[^*]+/u, }\n    #.........................................................................................................\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ \"*abc*\", \"<i>abc</i>\", ]\n    [ \"**def**\", \"<b>def</b>\", ]\n    [ \"***def***\", \"<b><i>def</i></b>\", ]\n    [ \"**x*def*x**\", \"<b>x<i>def</i>x</b>\", ]\n    [ \"*x**def**x*\", \"<i>x<b>def</b>x</i>\", ]\n    [ \"***abc*def**\", \"<b><i>abc</i>def</b>\", ]\n    [ \"***abc**def*\", \"<b><i>abc</i></b><i>def</i>\", ]\n    [ \"*x***def**\", \"<i>x</i><b>def</b>\", ]\n    [ \"**x***def*\", \"<b>x</b><i>def</i>\", ]\n    [ \"*\", \"<i>\", ]\n    [ \"**\", \"<b>\", ]\n    [ \"***\", \"<b><i>\", ]\n    ]\n  #.........................................................................................................\n  md_lexer  = new_toy_md_lexer 'md'\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      #.....................................................................................................\n      p = new Pipeline()\n      p.push ( d, send ) ->\n        return send d unless d.tid is 'p'\n        send e for e from md_lexer.walk d.value\n      p.push $parse_md_stars()\n      #.....................................................................................................\n      p.send new_token '^æ19^', { start: 0, stop: probe.length, }, 'plain', 'p', null, probe\n      result      = p.run()\n      result_rpr  = ( d.value for d in result when not d.$stamped ).join ''\n      urge '^08-1^', ( Object.keys d ).sort() for d in result\n      H.tabulate \"#{probe} -> #{result_rpr} (#{matcher})\", result # unless result_rpr is matcher\n      #.....................................................................................................\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_string_literals = ( T, done ) ->\n  { Interlex\n    compose  }        = require '../../../apps/intertext-lexer'\n  #.........................................................................................................\n  new_lexer = ->\n    lexer   = new Interlex { linewise: true, }\n    #.........................................................................................................\n    do =>\n      mode = 'plain'\n      lexer.add_lexeme { mode, tid: 'escchr', jump: null,           pattern: /\\\\(?<chr>.)/u, }\n      lexer.add_lexeme { mode, tid: 'dq1',    jump: 'dq1',          pattern: /(?<!\")\"(?!\")/u, }\n      lexer.add_lexeme { mode, tid: 'nl',     jump: null,           pattern: /$/u, }\n      lexer.add_lexeme { mode, tid: 'other',  jump: null,           pattern: /[^\"]+/u, }\n    #.........................................................................................................\n    do =>\n      mode = 'dq1'\n      lexer.add_lexeme { mode, tid: 'escchr', jump: null,           pattern: /\\\\(?<chr>.)/u, }\n      lexer.add_lexeme { mode, tid: 'text',   jump: null,           pattern: /[^\"]+/u, }\n      lexer.add_lexeme { mode, tid: 'nl',     jump: null,           pattern: /$/u, }\n      lexer.add_lexeme { mode, tid: 'dq1',    jump: '^',            pattern: /\"/u, }\n    #.........................................................................................................\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'helo', [ { mk: 'plain:other', value: 'helo' }, { mk: 'plain:nl', value: '' } ], null ]\n    [ 'helo \"world\"', [ { mk: 'plain:other', value: 'helo ' }, { mk: 'plain:dq1', value: '\"' }, { mk: 'dq1:text', value: 'world' }, { mk: 'dq1:dq1', value: '\"' }, { mk: 'plain:nl', value: '' } ], null ]\n    [ 'helo \"everyone\\nout there\"!', [ { mk: 'plain:other', value: 'helo ' }, { mk: 'plain:dq1', value: '\"' }, { mk: 'dq1:text', value: 'everyone' }, { mk: 'dq1:nl', value: '' }, { mk: 'dq1:text', value: 'out there' }, { mk: 'dq1:dq1', value: '\"' }, { mk: 'plain:other', value: '!' }, { mk: 'plain:nl', value: '' } ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer       = new_lexer()\n      result      = []\n      for token from lexer.walk probe\n        result.push GUY.props.pick_with_fallback token, null, 'mk', 'value'\n      result_rpr  = ( d.value for d in result when not d.$stamped ).join ''\n      H.tabulate \"#{rpr probe} -> #{rpr result_rpr}\", result # unless result_rpr is matcher\n      #.....................................................................................................\n      resolve result\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_line_by_line = ( T, done ) ->\n  { Pipeline,         \\\n    $,\n    transforms,     } = require '../../../apps/moonriver'\n  { Interlex\n    compose  }        = require '../../../apps/intertext-lexer'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  probe = \"\"\"\n    *the\n    first*\n    paragraph\n\n    the\n    **second** paragraph\n    \"\"\"\n  #.........................................................................................................\n  new_toy_md_lexer = ( mode = 'plain' ) ->\n    lexer   = new Interlex { dotall: false, end_token: false, }\n    #.........................................................................................................\n    lexer.add_lexeme { mode, tid: 'escchr', pattern: /\\\\(?<chr>.)/u, }\n    lexer.add_lexeme { mode, tid: 'star1',  pattern: /(?<!\\*)\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode, tid: 'star2',  pattern: /(?<!\\*)\\*\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode, tid: 'star3',  pattern: /(?<!\\*)\\*\\*\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode, tid: 'other',  pattern: /[^*]+/u, }\n    #.........................................................................................................\n    return lexer\n  #.........................................................................................................\n  new_toy_parser = ( lexer ) ->\n    p = new Pipeline()\n    p.push ( d ) -> urge '^79-1^', rpr d\n    p.push ( d, send ) ->\n      return send d unless isa.text d\n      # send new_token = ref: 'x1', token, mode, tid, name, value, start, stop\n      # send new_datom { }\n      send e for e from lexer.walk d\n    p.push $parse_md_stars()\n    return p\n  #.........................................................................................................\n  md_lexer  = new_toy_md_lexer 'md'\n  parser    = new_toy_parser md_lexer\n  #.........................................................................................................\n  result    = []\n  for line from GUY.str.walk_lines probe\n    parser.send line\n    for d from parser.walk()\n      result.push d\n      info '^79-10^', rpr d\n  #.........................................................................................................\n  H.tabulate \"parse line by line\", result\n  # debug '^79-11^', result_rpr = ( md_lexer.rpr_token token for token in result ).join ''\n  result_rpr = ( token.value for token in result when not token.$stamped ? false ).join ''\n  debug '^79-11^', '\\n' + result_rpr\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_nested_codespan = ( T, done ) ->\n  { Pipeline,         \\\n    $,\n    transforms,     } = require '../../../apps/moonriver'\n  { Interlex\n    compose  }        = require '../../../apps/intertext-lexer'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  new_toy_md_lexer = ( mode = 'plain' ) ->\n    lexer   = new Interlex { dotall: false, }\n    #.........................................................................................................\n    lexer.add_lexeme { mode: 'plain',   tid: 'escchr',    jump: null,       pattern:  /\\\\(?<chr>.)/u,     }\n    lexer.add_lexeme { mode: 'plain',   tid: 'star1',     jump: null,       pattern:  /(?<!\\*)\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode: 'plain',   tid: 'codespan',  jump: 'literal',  pattern:  /(?<!`)`(?!`)/u,    }\n    lexer.add_lexeme { mode: 'plain',   tid: 'other',     jump: null,       pattern:  /[^*`\\\\]+/u,        }\n    lexer.add_lexeme { mode: 'literal', tid: 'codespan',  jump: '^',        pattern:  /(?<!`)`(?!`)/u,    }\n    lexer.add_lexeme { mode: 'literal', tid: 'text',      jump: null,       pattern:  /(?:\\\\`|[^`])+/u,   }\n    #.........................................................................................................\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ \"*abc*\", \"<i>abc</i>\", ]\n    [ 'helo `world`!', 'helo <code>world</code>!', null ]\n    [ '*foo* `*bar*` baz', '<i>foo</i> <code>*bar*</code> baz', null ]\n    [ '*foo* \\\\`*bar*\\\\` baz', '<i>foo</i> \\\\`<i>bar</i>\\\\` baz', null ]\n    ]\n  #.........................................................................................................\n  $parse_md_codespan = ->\n    return ( d, send ) ->\n      if d.mk is 'plain:codespan'\n        send stamp d\n        return send new_token '^æ2^', d, 'html', 'tag', 'code', '<code>'\n      if d.mk is 'literal:codespan'\n        send stamp d\n        return send new_token '^æ1^', d, 'html', 'tag', 'code', '</code>'\n      send d\n      return null\n  #.........................................................................................................\n  md_lexer  = new_toy_md_lexer 'md'\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      #.....................................................................................................\n      p = new Pipeline()\n      p.push ( d, send ) ->\n        return send d unless d.tid is 'p'\n        send e for e from md_lexer.walk d.value\n      p.push $parse_md_star()\n      p.push $parse_md_codespan()\n      #.....................................................................................................\n      p.send new_token '^æ19^', { start: 0, stop: probe.length, }, 'plain', 'p', null, probe\n      result      = p.run()\n      result_rpr  = ( d.value for d in result when not d.$stamped ).join ''\n      # urge '^08-1^', ( Object.keys d ).sort() for d in result\n      H.tabulate \"#{probe} -> #{result_rpr} (#{matcher})\", result # unless result_rpr is matcher\n      #.....................................................................................................\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@markup_with_variable_length = ( T, done ) ->\n  { Pipeline,         \\\n    $,\n    transforms,     } = require '../../../apps/moonriver'\n  { Interlex\n    compose  }        = require '../../../apps/intertext-lexer'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  new_toy_md_lexer = ( mode = 'plain' ) ->\n    lexer           = new Interlex { dotall: false, }\n    backtick_count  = null\n    #.......................................................................................................\n    jpcs = ({ token, match, lexer, }) ->\n      # debug '^35-1^', match\n      backtick_count = token.value.length\n      return 'literal'\n    #.......................................................................................................\n    jlcs = ({ token, match, lexer, }) ->\n      # debug '^35-3^', match\n      if token.value.length is backtick_count\n        backtick_count = null\n        return '^'\n      ### TAINT setting `token.mk` should not have to be done manually ###\n      token = lets token, ( token ) -> token.tid = 'text'; token.mk = \"#{token.mode}:text\"\n      # debug '^345^', token\n      return { token, }\n    #.......................................................................................................\n    lexer.add_lexeme { mode: 'plain',   tid: 'escchr',    jump: null,       pattern:  /\\\\(?<chr>.)/u,     }\n    lexer.add_lexeme { mode: 'plain',   tid: 'star1',     jump: null,       pattern:  /(?<!\\*)\\*(?!\\*)/u, }\n    lexer.add_lexeme { mode: 'plain',   tid: 'codespan',  jump: jpcs,       pattern:  /(?<!`)`+(?!`)/u,   }\n    lexer.add_lexeme { mode: 'plain',   tid: 'other',     jump: null,       pattern:  /[^*`\\\\]+/u,        }\n    lexer.add_lexeme { mode: 'literal', tid: 'codespan',  jump: jlcs,       pattern:  /(?<!`)`+(?!`)/u,   }\n    lexer.add_lexeme { mode: 'literal', tid: 'text',      jump: null,       pattern:  /(?:\\\\`|[^`])+/u,   }\n    #.......................................................................................................\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ \"*abc*\", \"<i>abc</i>\", ]\n    [ 'helo `world`!', 'helo <code>world</code>!', null ]\n    [ '*foo* `*bar*` baz', '<i>foo</i> <code>*bar*</code> baz', null ]\n    [ '*foo* ``*bar*`` baz', '<i>foo</i> <code>*bar*</code> baz', null ]\n    [ '*foo* ````*bar*```` baz', '<i>foo</i> <code>*bar*</code> baz', null ]\n    [ '*foo* ``*bar*``` baz', '<i>foo</i> <code>*bar*``` baz', null ]\n    [ '*foo* ```*bar*`` baz', '<i>foo</i> <code>*bar*`` baz', null ]\n    ]\n  #.........................................................................................................\n  $parse_md_codespan = ->\n    return ( d, send ) ->\n      switch d.mk\n        when  'plain:codespan'\n          send stamp d\n          send new_token '^æ2^', d, 'html', 'tag', 'code', '<code>'\n        when 'literal:codespan'\n          send stamp d\n          send new_token '^æ1^', d, 'html', 'tag', 'code', '</code>'\n        else\n          send d\n      return null\n  #.........................................................................................................\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      md_lexer  = new_toy_md_lexer 'md'\n      #.....................................................................................................\n      p = new Pipeline()\n      p.push ( d, send ) ->\n        return send d unless d.tid is 'p'\n        send e for e from md_lexer.walk d.value\n      p.push $parse_md_star()\n      p.push $parse_md_codespan()\n      #.....................................................................................................\n      p.send new_token '^æ19^', { start: 0, stop: probe.length, }, 'plain', 'p', null, probe\n      result      = p.run()\n      result_rpr  = ( d.value for d in result when not d.$stamped ).join ''\n      # urge '^08-1^', ( Object.keys d ).sort() for d in result\n      H.tabulate \"#{probe} -> #{result_rpr} (#{matcher})\", result # unless result_rpr is matcher\n      #.....................................................................................................\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@match_with_lookbehind = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex, compose: c, } = require '../../../apps/intertext-lexer'\n  lexer = new Interlex { dotall: true, }\n  #.........................................................................................................\n  do =>\n    mode    = 'plain'\n    lexer.add_lexeme { mode, tid: 'b_after_a',        pattern: ( /(?<=a)b/u           ), }\n    # lexer.add_lexeme { mode, tid: 'other_a',          pattern: ( /a/u                             ), }\n    # lexer.add_lexeme { mode, tid: 'other_b',          pattern: ( /b/u                             ), }\n    lexer.add_lexeme { mode, tid: 'other',            pattern: ( /((?<!a)b|[^b])+/u   ), }\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'foobar abracadabra', \"[plain:other,(0:8),='foobar a'][plain:b_after_a,(8:9),='b'][plain:other,(9:15),='racada'][plain:b_after_a,(15:16),='b'][plain:other,(16:18),='ra']\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result      = lexer.run probe\n      result_rpr  = ( lexer.rpr_token token for token in result ).join ''\n      H.tabulate \"#{probe} -> #{result_rpr} (#{matcher})\", result\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@match_start_of_line = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex, compose: c, } = require '../../../apps/intertext-lexer'\n  lexer = new Interlex { dotall: true, end_token: true, }\n  #.........................................................................................................\n  do =>\n    mode    = 'plain'\n    lexer.add_lexeme { mode, tid: 'b_after_nl',       pattern: ( /(?<=\\n)b/u          ), }\n    lexer.add_lexeme { mode, tid: 'b_first',          pattern: ( /^b/u                ), }\n    lexer.add_lexeme { mode, tid: 'other',            pattern: ( /((?<!\\n)b|[^b])+/u  ), }\n  #.........................................................................................................\n  probes_and_matchers = [\n    # [ \"helo\\nworld\", null, ]\n    # [ \"above\\n# headline\\n\\nbelow\", null, ]\n    [ 'foobar \\nbracad\\nbra', \"[plain:other,(0:8),='foobar \\\\n'][plain:b_after_nl,(8:9),='b'][plain:other,(9:15),='racad\\\\n'][plain:b_after_nl,(15:16),='b'][plain:other,(16:18),='ra'][plain:$eof,(18:18),='']\", null ]\n    [ 'b', \"[plain:b_first,(0:1),='b'][plain:$eof,(1:1),='']\", null ]\n    [ '\\nb', \"[plain:other,(0:1),='\\\\n'][plain:b_after_nl,(1:2),='b'][plain:$eof,(2:2),='']\", null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result      = lexer.run probe\n      result_rpr  = ( lexer.rpr_token token for token in result ).join ''\n      H.tabulate \"#{probe} -> #{result_rpr} (#{matcher})\", result\n      resolve result_rpr\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@match_end_of_line = ( T, done ) ->\n  # T?.halt_on_error()\n  { Interlex, compose: c, } = require '../../../apps/intertext-lexer'\n  lexer = new Interlex()\n  #.........................................................................................................\n  do =>\n    mode    = 'plain'\n    lexer.add_lexeme { mode, tid: 'eol',      pattern: ( /$/u  ), }\n    lexer.add_lexeme { mode, tid: 'ws',       pattern: ( /\\s+/u ), }\n    lexer.add_lexeme { mode, tid: 'word',     pattern: ( /\\S+/u ), }\n  #.........................................................................................................\n  probe = \"\"\"\n    A line by line\n    lexing\n    probe\\x20\\x20\\x20\n    \"\"\"\n  matcher = [\n    \"[plain:word,(0:1),='A']\"\n    \"[plain:ws,(1:2),=' ']\"\n    \"[plain:word,(2:6),='line']\"\n    \"[plain:ws,(6:7),=' ']\"\n    \"[plain:word,(7:9),='by']\"\n    \"[plain:ws,(9:10),=' ']\"\n    \"[plain:word,(10:14),='line']\"\n    \"[plain:eol,(14:14),='']\"\n    \"[plain:word,(0:6),='lexing']\"\n    \"[plain:eol,(6:6),='']\"\n    \"[plain:word,(0:5),='probe']\"\n    \"[plain:eol,(5:5),='']\" ]\n  #.........................................................................................................\n  result      = []\n  result_rpr  = []\n  for line from GUY.str.walk_lines probe\n    for token from lexer.walk line\n      result.push token\n      result_rpr.push lexer.rpr_token token\n  #.........................................................................................................\n  T?.eq result_rpr, matcher\n  H.tabulate ( rpr probe ), result\n  done?()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@use_create_for_custom_behavior = ( T, done ) ->\n  { Interlex } = require '../../../apps/intertext-lexer'\n  create_call_count = 0\n  #.........................................................................................................\n  new_lexer = ->\n    lexer = new Interlex { linewise: true, catchall_concat: true, reserved_concat: true, }\n    #.......................................................................................................\n    new_escchr_descriptor = ( mode ) ->\n      create = ( token ) ->\n        create_call_count++\n        token.x = { chr: '\\n', } unless ( token.x?.chr )?\n        return token\n      return { mode, tid: 'escchr', pattern: /\\\\(?<chr>.|$)/u, reserved: '\\\\', create, }\n    #.......................................................................................................\n    do =>\n      mode = 'plain'\n      lexer.add_lexeme new_escchr_descriptor mode\n      lexer.add_lexeme { mode,  tid: 'nl',        jump: null,       pattern: ( /$/u ), }\n      lexer.add_lexeme { mode,  tid: 'ws',        jump: null,       pattern: ( /\\s+/u ), }\n      lexer.add_lexeme { mode,  tid: 'word',      jump: null,       pattern: ( /\\S+/u ), }\n      lexer.add_catchall_lexeme { mode, tid: 'other', }\n      lexer.add_reserved_lexeme { mode, tid: 'forbidden', }\n    return lexer\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 'foo <!-- comment --> bar', [ { mk: 'plain:word', value: 'foo' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:word', value: '<!--' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:word', value: 'comment' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:word', value: '-->' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:word', value: 'bar' }, { mk: 'plain:nl', value: '' } ], null ]\n    [ 'foo <!-- \\\\comment \\n --> bar', [ { mk: 'plain:word', value: 'foo' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:word', value: '<!--' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:escchr', value: '\\\\c', x: { chr: 'c' } }, { mk: 'plain:word', value: 'omment' }, { mk: 'plain:nl', value: '' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:word', value: '-->' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:word', value: 'bar' }, { mk: 'plain:nl', value: '' } ], null ]\n    [ 'foo <!-- comment \\\\\\n --> bar', [ { mk: 'plain:word', value: 'foo' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:word', value: '<!--' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:word', value: 'comment' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:escchr', value: '\\\\', x: { chr: '\\n' } }, { mk: 'plain:nl', value: '' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:word', value: '-->' }, { mk: 'plain:ws', value: ' ' }, { mk: 'plain:word', value: 'bar' }, { mk: 'plain:nl', value: '' } ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      lexer   = new_lexer()\n      T?.eq ( type_of lexer.registry.plain.lexemes.escchr.create ), 'function'\n      result  = []\n      for token from lexer.walk probe\n        d = GUY.props.omit_nullish GUY.props.pick_with_fallback token, null, 'mk', 'value', 'x'\n        # debug '^432^', d if d.mk.endsWith ':escchr'\n        result.push d\n      # H.tabulate ( rpr probe ), result\n      resolve result\n  #.........................................................................................................\n  T?.eq create_call_count, 2\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # test @parse_string_literals\n  test @use_create_for_custom_behavior\n  # @using_strings_for_patterns()\n  # test @using_strings_for_patterns\n  # @cannot_return_from_initial_mode()\n  # test @cannot_return_from_initial_mode\n  # test @using_lexer_without_lexemes\n  # test @lex_tags\n  # test @lex_tags_with_rpr\n  # @parse_line_by_line()\n  # test @parse_line_by_line\n  # @match_end_of_line()\n  # test @match_end_of_line\n  # test @parse_line_by_line\n  # @parse_md_stars_markup()\n  # test @parse_md_stars_markup\n  # test @parse_nested_codespan\n  # @markup_with_variable_length()\n  # test @markup_with_variable_length\n  # @_demo_markup_with_variable_length()\n  # test @match_start_of_line\n  # test @match_with_lookbehind\n"
  ]
}