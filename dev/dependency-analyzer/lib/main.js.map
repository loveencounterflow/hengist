{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n### NOTE consider to refactor this to [SCDA](https://github.com/loveencounterflow/scda) ###\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DEPENDENCY-ANALYZER'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\nSQL                       = String.raw\n{ lets\n  freeze }                = require 'letsfreezethat'\n{ Dba, }                  = require 'icql-dba'\ndef                       = Object.defineProperty\nglob                      = require 'glob'\nPATH                      = require 'path'\n\n#===========================================================================================================\ntypes.declare 'dpan_constructor_cfg', tests:\n  '@isa.object x':        ( x ) -> @isa.object x\n  'x.prefix is a prefix': ( x ) ->\n    return false unless @isa.text x.prefix\n    return true if x.prefix is ''\n    return ( /^[_a-z][_a-z0-9]*$/ ).test x.prefix\n  '@isa.boolean x.recreate': ( x ) -> @isa.boolean x.recreate\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.defaults =\n  dpan_constructor_cfg:\n    dba:        null\n    prefix:     'dpan_'\n    db_path:    PATH.resolve PATH.join __dirname, '../dpan.sqlite'\n    recreate:   false\n\n\n#===========================================================================================================\nclass Dpan\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    validate.dpan_constructor_cfg @cfg = { types.defaults.dpan_constructor_cfg..., cfg..., }\n    debug '^4877^', @cfg\n    #.......................................................................................................\n    dba  = if @cfg.dba? then @cfg.dba else new Dba()\n    def @, 'dba', { enumerable: false, value: dba, }\n    delete @cfg.dba\n    @cfg = freeze @cfg\n    #.......................................................................................................\n    if @cfg.db_path?\n      @dba.open { path: @cfg.db_path, }\n    #.......................................................................................................\n    @_clear_db() if @cfg.recreate\n    @_create_db_structure()\n    @_compile_sql()\n    # @_create_sql_functions()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure: ->\n    prefix = @cfg.prefix\n    @dba.execute SQL\"\"\"\n      create table if not exists #{prefix}packages (\n          name        text    not null,\n          version     text    not null,\n          vname       text    generated always as ( name || '@' || version ) virtual not null unique,\n        primary key ( name, version ) );\n      create unique index if not exists #{prefix}packages_vname_idx on #{prefix}packages ( vname );\n      create table if not exists #{prefix}dependencies (\n          package     text    not null references #{prefix}packages ( vname ),\n          depends_on  text    not null references #{prefix}packages ( vname ),\n        primary key ( package, depends_on ) );\n      \"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _clear_db: ->\n    ### TAINT should be a method of ICQL/DB ###\n    prefix = @cfg.prefix\n    @dba.execute SQL\"\"\"\n      drop index if exists #{prefix}packages_vname_idx;\n      drop table if exists #{prefix}dependencies;\n      drop table if exists #{prefix}packages;\n      \"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    prefix = @cfg.prefix\n    # sql =\n    #   get: SQL\"\"\"\n    #     select value from #{prefix}variables\n    #       where key = $key\n    #       limit 1;\"\"\"\n    #   set: SQL\"\"\"\n    #     insert into #{prefix}variables ( key, value )\n    #       values ( $key, $value )\n    #       on conflict do update set value = $value;\"\"\"\n    # def @, 'sql', { enumerable: false, value: sql, }\n    return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _create_sql_functions: ->\n\n  #=========================================================================================================\n  # RETRIEVE CANONICAL PACKAGE URL\n  #---------------------------------------------------------------------------------------------------------\n  _url_from_vpackage_d_homepage: ( vpackage_d ) ->\n    if ( R = vpackage_d.homepage ? null )?\n      return R.replace /#readme$/, ''\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _url_from_vpackage_d_repository: ( vpackage_d ) ->\n    if ( R = vpackage_d.repository?.url  ? null )?\n      return R.replace /^(git\\+)?(.+?)(\\.git)?$/, '$2'\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _url_from_vpackage_d_bugs: ( vpackage_d ) ->\n    if ( R = vpackage_d.bugs?.url        ? null )?\n      return R.replace /\\/issues$/, ''\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  get_package_url: ( package_d, version ) ->\n    unless ( vpackage_d = package_d.versions?[ version ] ? null )?\n      throw new Error \"^37596^ unknown version: #{rpr version}\"\n    return R if ( R = @_url_from_vpackage_d_homepage    vpackage_d )?\n    return R if ( R = @_url_from_vpackage_d_repository  vpackage_d )?\n    return R if ( R = @_url_from_vpackage_d_bugs        vpackage_d )?\n    return null\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  walk_dependencies: ->\n    home_path             = PATH.resolve PATH.join __dirname, '..'\n    project_path_pattern  = PATH.join home_path, '../../../*/package.json'\n    # pattern   = PATH.join home_path, '../../../*/node_modules/*'\n    # pattern   = PATH.join home_path, '../../../*/node_modules/*/package.json'\n    debug '^488^', project_path_pattern\n    for project_path in glob.sync project_path_pattern\n      package_json        = require project_path\n      project_version     = package_json.version\n      project_path        = PATH.dirname project_path\n      project_name        = PATH.basename project_path\n      project_deps        = package_json.dependencies ? {}\n      project_deps_names  = Object.keys project_deps\n      continue unless project_name in [ 'icql-dba-tags', 'icql-dba-vars', ]\n      debug ( CND.grey project_path ), ( CND.gold project_name ), ( CND.lime project_version )\n      #.....................................................................................................\n      if project_deps_names.length is 0\n        yield { project_name, project_version, dep_name, dep_version, is_new_project: true, }\n        continue\n      #.....................................................................................................\n      ### TAINT issue one datom in case no dependencies found ###\n      for dep_name, idx in project_deps_names\n        dep_jsonb_path = PATH.join project_path, 'node_modules', dep_name, 'package.json'\n        try\n          dep_json = require dep_jsonb_path\n        catch error\n          throw error\n        # debug dep_path\n        dep_version      = dep_json.version\n        if ( idx is 0 )\n          yield { project_name, project_version, dep_name, dep_version, is_new_project: true, }\n        else\n          yield { project_name, project_version, dep_name, dep_version, }\n        debug ' ', ( CND.gold dep_name ), ( CND.lime dep_version )\n        # debug ( CND.grey dep_path ), ( CND.gold dep_name ), ( CND.lime dep_version )\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  dpan    = new Dpan { recreate: true, }\n  debug '^332^', dpan\n  prefix  = dpan.cfg.prefix\n  for d from dpan.walk_dependencies()\n    debug '^684^', d\n    # if d.is_new_project\n    ### TAINT code duplication, same logic in SQL ###\n    package_vname = \"#{d.project_name}@#{d.project_version}\"\n    dep_vname     = \"#{d.dep_name}@#{d.dep_version}\"\n    dpan.dba.run SQL\"\"\"insert into #{prefix}packages ( name, version )\n      values ( $name, $version )\n      on conflict do nothing;\"\"\", { name: d.project_name, version: d.project_version, }\n    dpan.dba.run SQL\"\"\"insert into #{prefix}packages ( name, version )\n      values ( $name, $version )\n      on conflict do nothing;\"\"\", { name: d.dep_name, version: d.dep_version, }\n    dpan.dba.run SQL\"\"\"insert into #{prefix}dependencies ( package, depends_on )\n      values ( $package, $depends_on )\n      on conflict do nothing;\"\"\", { package: package_vname, depends_on: dep_vname, }\n\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # demo()\n  CP = require 'child_process'\n  # debug '^33442^', CP.execSync \"npm view icql-dba@^6 dependencies\", { encoding: 'utf-8', }\n  # debug '^33442^', CP.execSync \"npm view icql-dba dependencies\", { encoding: 'utf-8', }\n  cfg =\n    registry_url: 'https://registry.npmjs.org/'\n  debug '^446^', cfg\n  package_name  = 'icql-dba-vars'\n  package_name  = 'icql-dba-tags'\n  rq_url        = ( cfg.registry_url.replace /\\/$/, '') + '/' + package_name\n  debug '^2334^', rq_url\n  got = require 'got'\n  debug '^443^', rsp = await ( got rq_url ).json()\n  debug '^443^', ( k for k of rsp )\n  debug '^443^', ( k for k of rsp.versions )\n  urge '^443^', ( k for k of rsp.versions[ '0.2.1' ] )\n  debug '^443^', ( k for k of rsp.versions[ '0.2.1' ].dependencies )\n  info '^443^', rsp.versions[ '0.2.1' ].description\n  get_package_url rsp, '0.2.1'\n  info '^443^', rsp.versions[ '0.2.1' ].dependencies\n\n\n\n\n\n  # debug '^2334^', fetch rq_url\n  # request.get( xxx, {json: true}, function (err, res, obj) {\n  #   if (err || (res.statusCode < 200 || res.statusCode >= 400)) {\n  #     var message = res ? 'status = ' + res.statusCode : 'error = ' + err.message\n  #     _this.logger.log(\n  #       'could not load ' + name + '@' + task.version + ' ' + message\n\n\n\n\n\n\n\n\n\n"
  ]
}