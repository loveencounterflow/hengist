{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/_old.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n### NOTE consider to refactor this to [SCDA](https://github.com/loveencounterflow/scda) ###\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DEPENDENCY-ANALYZER'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\nSQL                       = String.raw\n{ lets\n  freeze }                = require 'letsfreezethat'\n{ Dba, }                  = require 'icql-dba'\ndef                       = Object.defineProperty\nglob                      = require 'glob'\nPATH                      = require 'path'\nFS                        = require 'fs'\ngot                       = require 'got'\nsemver_satisfies          = require 'semver/functions/satisfies'\nsemver_cmp                = require 'semver/functions/cmp'\n\n\n  # #=========================================================================================================\n  # #\n  # #---------------------------------------------------------------------------------------------------------\n  # walk_dependencies: ->\n  #   home_path             = PATH.resolve PATH.join __dirname, '..'\n  #   project_path_pattern  = PATH.join home_path, '../../../*/package.json'\n  #   # pattern   = PATH.join home_path, '../../../*/node_modules/*'\n  #   # pattern   = PATH.join home_path, '../../../*/node_modules/*/package.json'\n  #   debug '^488^', project_path_pattern\n  #   for project_path in glob.sync project_path_pattern\n  #     package_json        = require project_path\n  #     project_version     = package_json.version\n  #     project_path        = PATH.dirname project_path\n  #     project_name        = PATH.basename project_path\n  #     project_deps        = package_json.dependencies ? {}\n  #     project_deps_names  = Object.keys project_deps\n  #     continue unless project_name in [ 'icql-dba-tags', 'icql-dba-vars', ]\n  #     debug ( CND.grey project_path ), ( CND.gold project_name ), ( CND.lime project_version )\n  #     #.....................................................................................................\n  #     if project_deps_names.length is 0\n  #       yield { project_name, project_version, dep_name, dep_version, is_new_project: true, }\n  #       continue\n  #     #.....................................................................................................\n  #     ### TAINT issue one datom in case no dependencies found ###\n  #     for dep_name, idx in project_deps_names\n  #       dep_jsonb_path = PATH.join project_path, 'node_modules', dep_name, 'package.json'\n  #       try\n  #         dep_json = require dep_jsonb_path\n  #       catch error\n  #         throw error\n  #       # debug dep_path\n  #       dep_version      = dep_json.version\n  #       if ( idx is 0 )\n  #         yield { project_name, project_version, dep_name, dep_version, is_new_project: true, }\n  #       else\n  #         yield { project_name, project_version, dep_name, dep_version, }\n  #       debug ' ', ( CND.gold dep_name ), ( CND.lime dep_version )\n  #       # debug ( CND.grey dep_path ), ( CND.gold dep_name ), ( CND.lime dep_version )\n  #   return null\n\n#===========================================================================================================\ntypes.declare 'dpan_constructor_cfg', tests:\n  '@isa.object x':        ( x ) -> @isa.object x\n  'x.prefix is a prefix': ( x ) ->\n    return false unless @isa.text x.prefix\n    return true if x.prefix is ''\n    return ( /^[_a-z][_a-z0-9]*$/ ).test x.prefix\n  '@isa.boolean x.recreate': ( x ) -> @isa.boolean x.recreate\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.defaults =\n  dpan_constructor_cfg:\n    dba:          null\n    prefix:       'dpan_'\n    db_path:      PATH.resolve PATH.join __dirname, '../dpan.sqlite'\n    recreate:     false\n    registry_url: 'https://registry.npmjs.org/'\n\n\n#===========================================================================================================\nclass Dpan\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    validate.dpan_constructor_cfg @cfg = { types.defaults.dpan_constructor_cfg..., cfg..., }\n    debug '^4877^', @cfg\n    #.......................................................................................................\n    dba  = if @cfg.dba? then @cfg.dba else new Dba()\n    def @, 'dba', { enumerable: false, value: dba, }\n    delete @cfg.dba\n    @cfg = freeze @cfg\n    #.......................................................................................................\n    if @cfg.db_path?\n      @dba.open { path: @cfg.db_path, }\n    #.......................................................................................................\n    @_clear_db() if @cfg.recreate\n    @_create_db_structure()\n    @_compile_sql()\n    @_create_sql_functions()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure: ->\n    ### TAINT unify name / pkg_name, version / pkg_version ###\n    prefix = @cfg.prefix\n    @dba.execute SQL\"\"\"\n      create table if not exists #{prefix}pkgs (\n          pkg_name          text    not null references #{prefix}pkg_names    ( pkg_name    ),\n          pkg_version       text    not null references #{prefix}pkg_versions ( pkg_version ),\n          pkg_vname         text    generated always as ( pkg_name || '@' || pkg_version ) virtual not null unique,\n          description       text,\n          url               text,\n          fspath            text,\n        primary key ( pkg_name, pkg_version ) );\n      create unique index if not exists #{prefix}pkgs_vname_idx on #{prefix}pkgs ( pkg_vname );\n      create table if not exists #{prefix}deps (\n          pkg_vname         text    not null references #{prefix}pkgs ( pkg_vname ),\n          dep_vname         text    not null references #{prefix}pkgs ( pkg_vname ),\n        primary key ( pkg_vname, dep_vname ) );\n      create table if not exists #{prefix}pkg_names (\n          pkg_name          text not null primary key );\n      create table if not exists #{prefix}pkg_versions (\n          pkg_version       text not null primary key );\n      \"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _clear_db: ->\n    ### TAINT should be a method of ICQL/DB ###\n    prefix = @cfg.prefix\n    @dba.execute SQL\"\"\"\n      drop index if exists #{prefix}pkgs_vname_idx;\n      drop table if exists #{prefix}deps;\n      drop table if exists #{prefix}pkgs;\n      drop table if exists #{prefix}pkg_names;\n      drop table if exists #{prefix}pkg_versions;\n      \"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    prefix = @cfg.prefix\n    @sql =\n      add_pkg_version: SQL\"\"\"\n        insert into #{prefix}pkg_versions ( pkg_version )\n          values ( $pkg_version )\n          on conflict do nothing;\"\"\"\n      add_pkg_name: SQL\"\"\"\n        insert into #{prefix}pkg_names ( pkg_name )\n          values ( $pkg_name )\n          on conflict do nothing;\"\"\"\n      add_pkg: SQL\"\"\"\n        insert into #{prefix}pkgs ( pkg_name, pkg_version, description, url, fspath )\n          values ( $pkg_name, $pkg_version, $description, $url, $fspath )\n          on conflict do nothing;\"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    @dba.create_function name: 'semver_satisfies', call: ( version, pattern ) =>\n      return 1 if semver_satisfies version, pattern\n      return 0\n\n  #=========================================================================================================\n  # RETRIEVE CANONICAL PACKAGE URL\n  #---------------------------------------------------------------------------------------------------------\n  _url_from_vpackage_d_homepage: ( vpackage_d ) ->\n    if ( R = vpackage_d.homepage ? null )?\n      return R.replace /#readme$/, ''\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _url_from_vpackage_d_repository: ( vpackage_d ) ->\n    if ( R = vpackage_d.repository?.url  ? null )?\n      return R.replace /^(git\\+)?(.+?)(\\.git)?$/, '$2'\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _url_from_vpackage_d_bugs: ( vpackage_d ) ->\n    if ( R = vpackage_d.bugs?.url        ? null )?\n      return R.replace /\\/issues$/, ''\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  get_package_url: ( package_d, version ) ->\n    unless ( vpackage_d = package_d.versions?[ version ] ? null )?\n      throw new Error \"^37596^ unknown version: #{rpr version}\"\n    return R if ( R = @_url_from_vpackage_d_homepage    vpackage_d )?\n    return R if ( R = @_url_from_vpackage_d_repository  vpackage_d )?\n    return R if ( R = @_url_from_vpackage_d_bugs        vpackage_d )?\n    return null\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  _npm_api_url_from_package_name: ( pkg_name ) ->\n    return ( @cfg.registry_url.replace /\\/$/, '' ) + '/' + pkg_name\n\n  #---------------------------------------------------------------------------------------------------------\n  _fetch_package_d_from_package_name: ( pkg_name ) ->\n    rq_url        = @_npm_api_url_from_package_name pkg_name\n    return await ( got rq_url ).json()\n\n  #---------------------------------------------------------------------------------------------------------\n  _package_infos_from_package_d_and_version: ( package_d, version ) ->\n    R = {}\n    R.pkg_name        = package_d.name\n    R.pkg_version     = version\n    R.versions        = ( k for k of package_d.versions ? [] )\n    R.url             = @get_package_url package_d, version\n    R.description     = package_d.versions[ version ]?.description  ? null\n    R.dependencies    = package_d.versions[ version ]?.dependencies ? null\n    R.fspath          = null\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  fetch_package_infos: ( pkg_name, version ) ->\n    package_d = await @_fetch_package_d_from_package_name pkg_name\n    # debug '^443^', ( k for k of package_d )\n    # debug '^443^', ( k for k of package_d.versions )\n    # urge '^443^', ( k for k of package_d.versions[ '0.2.1' ] )\n    # debug '^443^', ( k for k of package_d.versions[ '0.2.1' ].dependencies )\n    return @_package_infos_from_package_d_and_version package_d, version\n\n#-----------------------------------------------------------------------------------------------------------\nregister_package = ( dpan, pkg_name, pkg_version ) ->\n  prefix          = dpan.cfg.prefix\n  ### TAINT code duplication, same logic in SQL ###\n  pkg_vname   = \"#{pkg_name}@#{pkg_version}\"\n  #.........................................................................................................\n  dpan._add_package_name = ( pkg_name ) ->\n    @dba.run SQL\"\"\"insert into #{prefix}pkg_names ( pkg_name )\n      values ( $pkg_name )\n      on conflict do nothing;\"\"\", { pkg_name, }\n    return null\n  #.........................................................................................................\n  dpan._add_package_version = ( pkg_version ) ->\n    @dba.run SQL\"\"\"insert into #{prefix}pkg_versions ( pkg_version )\n      values ( $pkg_version )\n      on conflict do nothing;\"\"\", { pkg_version, }\n    return null\n  #.........................................................................................................\n  dpan._add_package = ( package_info ) ->\n    @dba.run @sql.add_pkg_name,     package_info\n    @dba.run @sql.add_pkg_version,  package_info\n    @dba.run @sql.add_pkg,          package_info\n    # @_add_package_name    package_info.pkg_name\n    # @_add_package_version package_info.pkg_version\n    # @dba.run SQL\"\"\"insert into #{prefix}pkgs ( pkg_name, pkg_version )\n    #   values ( $pkg_name, $pkg_version )\n    #   on conflict do nothing;\"\"\", package_info\n    #.......................................................................................................\n    for dep_name, dep_version of package_info.dependencies\n      ### TAINT code duplication, same logic in SQL ###\n      dep_vname   = \"#{dep_name}@#{dep_version}\"\n      @_add_package_name    dep_name\n      @_add_package_version dep_version\n      @dba.run SQL\"\"\"insert into #{prefix}pkgs ( pkg_name, pkg_version )\n        values ( $pkg_name, $pkg_version )\n        on conflict do nothing;\"\"\", { pkg_name: dep_name, pkg_version: dep_version, }\n      @dba.run SQL\"\"\"insert into #{prefix}deps ( pkg_vname, dep_vname )\n        values ( $pkg_vname, $dep_vname )\n        on conflict do nothing;\"\"\", { pkg_vname, dep_vname, }\n    #.......................................................................................................\n    return null\n  #.........................................................................................................\n  package_info = await dpan.fetch_package_infos pkg_name, pkg_version\n  info '^677^', JSON.stringify package_info, null, '  '\n  #.........................................................................................................\n  dpan._add_package package_info\n  # for version in package_info.versions\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  dpan            = new Dpan { recreate: true, }\n  pkgs = [\n    { pkg_name: 'cnd',                pkg_version: '9.2.2', }\n    # { pkg_name: 'csv-parser',         pkg_version: '3.0.0', }\n    # { pkg_name: 'del',                pkg_version: '6.0.0', }\n    # { pkg_name: 'hollerith-codec',    pkg_version: '3.0.1', }\n    # { pkg_name: 'icql-dba',           pkg_version: '7.2.0', }\n    # { pkg_name: 'icql-dba-tags',      pkg_version: '0.2.1', }\n    # { pkg_name: 'intertype',          pkg_version: '7.6.7', }\n    # { pkg_name: 'is-stream',          pkg_version: '2.0.0', }\n    # { pkg_name: 'jsx-number-format',  pkg_version: '0.1.4', }\n    # { pkg_name: 'letsfreezethat',     pkg_version: '3.1.0', }\n    # { pkg_name: 'multimix',           pkg_version: '5.0.0', }\n    # { pkg_name: 'mysql-tokenizer',    pkg_version: '1.0.7', }\n    # { pkg_name: 'n-readlines',        pkg_version: '1.0.1', }\n    # { pkg_name: 'temp-dir',           pkg_version: '2.0.0', }\n    # { pkg_name: 'tempy',              pkg_version: '1.0.1', }\n    # { pkg_name: 'type-fest',          pkg_version: '0.16.0', }\n    { pkg_name: 'unique-string',      pkg_version: '2.0.0', }\n    ]\n  for { pkg_name, pkg_version, } in pkgs\n    await register_package dpan, pkg_name, pkg_version\n  debug '^577^', dpan.dba.list dpan.dba.query SQL\"select semver_satisfies( '1.2.5', '^1.2' );\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_custom_require = ->\n  RPKGUP = await import( 'read-pkg-up' )\n  debug ( k for k of RPKGUP )\n  pkg_names_and_svranges = [\n    [ '@ef-carbon/deep-freeze',    '^1.0.1', ]\n    [ '@scotttrinh/number-ranges', '^2.1.0', ]\n    [ 'argparse',                  '^2.0.1', ]\n    [ 'better-sqlite3',            '7.4.0', ]\n    [ 'chance',                    '^1.1.7', ]\n    [ 'cnd',                       '^9.2.1', ]\n    ]\n  path  = '../../../lib/main.js'\n  path  = PATH.resolve PATH.join __dirname, path\n  { createRequire, } = require 'module'\n  rq    = createRequire path\n  for [ pkg_name, svrange, ] in pkg_names_and_svranges\n    dep_fspath        = rq.resolve pkg_name\n    dep_json_info     = RPKGUP.readPackageUpSync { cwd: dep_fspath, normalize: true, }\n    dep_json          = dep_json_info.packageJson\n    dep_version       = dep_json.version\n    dep_description   = dep_json.description\n    dep_keywords      = dep_json.keywords ? []\n    dep_json_fspath   = dep_json_info.path\n    info()\n    info ( CND.yellow pkg_name )\n    info ( CND.blue dep_fspath )\n    info ( CND.gold dep_keywords )\n    # info ( CND.lime dep_pkgj_fspath )\n    info dep_version\n    info dep_description\n    # info ( CND.lime FS.realpathSync dep_fspath )\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo()\n  await demo_custom_require()\n  # CP = require 'child_process'\n  # debug '^33442^', CP.execSync \"npm view icql-dba@^6 dependencies\", { encoding: 'utf-8', }\n  # debug '^33442^', CP.execSync \"npm view icql-dba dependencies\", { encoding: 'utf-8', }\n\nf = ->\n  dpan          = new Dpan()\n  pkg_name  = 'icql-dba-vars'\n  pkg_name  = 'icql-dba-tags'\n  package_d     = await dpan._fetch_package_d_from_package_name pkg_name\n  debug '^443^', ( k for k of package_d )\n  debug '^443^', ( k for k of package_d.versions )\n  urge '^443^', ( k for k of package_d.versions[ '0.2.1' ] )\n  debug '^443^', ( k for k of package_d.versions[ '0.2.1' ].dependencies )\n  package_info  = dpan._package_infos_from_package_d_and_version package_d, '0.2.1'\n  info '^677^', JSON.stringify package_info, null, '  '\n\nf = ->\n  #.........................................................................................................\n  for d from dpan.walk_dependencies()\n    debug '^684^', d\n    ### TAINT code duplication, same logic in SQL ###\n    pkg_vname = \"#{d.project_name}@#{d.project_version}\"\n    dep_vname     = \"#{d.dep_name}@#{d.dep_version}\"\n    # if d.is_new_project\n    dpan.dba.run SQL\"\"\"insert into #{prefix}pkgs ( name, version )\n      values ( $name, $version )\n      on conflict do nothing;\"\"\", { name: d.project_name, version: d.project_version, }\n    dpan.dba.run SQL\"\"\"insert into #{prefix}pkgs ( name, version )\n      values ( $name, $version )\n      on conflict do nothing;\"\"\", { name: d.dep_name, version: d.dep_version, }\n    dpan.dba.run SQL\"\"\"insert into #{prefix}dependencies ( package, depends_on )\n      values ( $package, $depends_on )\n      on conflict do nothing;\"\"\", { package: pkg_vname, depends_on: dep_vname, }\n  #.........................................................................................................\n  return null\n\n\n\n\n\n\n\n\n"
  ]
}