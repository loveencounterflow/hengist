{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA-VNR/TESTS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of\n  equals }                = types.export()\nSQL                       = String.raw\nvnr_path                  = '../../../apps/icql-dba-vnr'\ndba_path                  = '../../../apps/icql-dba'\n{ lets\n  freeze }                = require 'letsfreezethat'\nCATALOGUE                 = require 'multimix/lib/cataloguing'\njr                        = JSON.stringify\njp                        = JSON.parse\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@[ \"API\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  #.........................................................................................................\n  { Vnr, }    = require vnr_path\n  { Dba, }    = require dba_path\n  prefix      = 'vnr_'\n  dba         = new Dba()\n  vnr         = new Vnr { dba, prefix, }\n  T?.eq ( vnr.advance      [ 1, 2, 3, ]            ), [ 1, 2, 4 ]\n  T?.eq ( vnr.recede       [ 1, 2, 3, ]            ), [ 1, 2, 2 ]\n  T?.eq ( vnr.deepen       [ 1, 2, 3, ]            ), [ 1, 2, 3, 0 ]\n  T?.eq ( vnr.cmp_fair     [ 1, 2, 3, ], [ 1, 2, ] ), 1\n  T?.eq ( vnr.cmp_partial  [ 1, 2, 3, ], [ 1, 2, ] ), 1\n  T?.eq ( vnr.cmp_total    [ 1, 2, 3, ], [ 1, 2, ] ), 1\n  T?.eq ( vnr.new_vnr      [ 1, 2, 3, ]            ), [ 1, 2, 3 ]\n  T?.eq ( vnr.new_vnr      null                    ), [ 0 ]\n  T?.eq ( vnr.encode       [ 1, 2, 3, ]            ), Buffer.from '8000000180000002800000038000000080000000', 'hex'\n  #.........................................................................................................\n  T?.eq ( jp dba.first_value dba.query SQL\"select vnr_advance(     '[ 1, 2, 3 ]' );\" ),             [ 1, 2, 4 ]\n  T?.eq ( jp dba.first_value dba.query SQL\"select vnr_recede(      '[ 1, 2, 3 ]' );\" ),             [ 1, 2, 2 ]\n  T?.eq ( jp dba.first_value dba.query SQL\"select vnr_deepen(      '[ 1, 2, 3 ]' );\" ),             [ 1, 2, 3, 0 ]\n  T?.eq (    dba.first_value dba.query SQL\"select vnr_cmp_fair(    '[ 1, 2, 3 ]', '[ 1, 2 ]' );\" ), 1\n  T?.eq (    dba.first_value dba.query SQL\"select vnr_cmp_partial( '[ 1, 2, 3 ]', '[ 1, 2 ]' );\" ), 1\n  T?.eq (    dba.first_value dba.query SQL\"select vnr_cmp_total(   '[ 1, 2, 3 ]', '[ 1, 2 ]' );\" ), 1\n  T?.eq ( jp dba.first_value dba.query SQL\"select vnr_new_vnr(     '[ 1, 2, 3 ]' );\"             ), [ 1, 2, 3 ]\n  T?.eq ( jp dba.first_value dba.query SQL\"select vnr_new_vnr(      null         );\"             ), [ 0 ]\n  T?.eq (    dba.first_value dba.query SQL\"select vnr_encode(      '[ 1, 2, 3 ]' );\"             ), Buffer.from '8000000180000002800000038000000080000000', 'hex'\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_getting and setting single values\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  #.........................................................................................................\n  probes_and_matchers = []\n  { Vnr, }    = require vnr_path\n  { Dba, }    = require dba_path\n  dba         = new Dba()\n  vnr         = new Vnr { dba, }\n  # debug '4476^', vnr\n  # debug '4476^', JSON.stringify ( CATALOGUE.all_keys_of vnr ).sort(), null, '  '\n  # console.table dba.list dba.query SQL\"select * from v_variables;\"\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n  #     [ key, value, ] = probe\n  #     vnr.set key, value\n  #     result = vnr.get key\n  #     resolve result\n  # console.table dba.list dba.query SQL\"select * from v_variables;\"\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # info '^3443^', JSON.parse '\"helo w&#x6f;rld\"'\n  test @, { timeout: 10e3, }\n  # test @[ \"DBA: tags must be declared\" ]\n\n"
  ]
}