{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'INTERVOKE/TESTS/BASIC'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype\n{ type_of }               = types\nIsa                       = null\nIsa2                      = null\n\n  # probes_and_matchers = [\n  #   ]\n  # #.........................................................................................................\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n\n#===========================================================================================================\nget_isa_class = ->\n  return Isa if Isa?\n  IVK = require '../../../apps/intervoke'\n  #===========================================================================================================\n  class Isa extends IVK.Word_prompter\n    #---------------------------------------------------------------------------------------------------------\n    @declare:\n      null:       ( x ) -> x is null\n      undefined:  ( x ) -> x is undefined\n      boolean:    ( x ) -> ( x is true ) or ( x is false )\n      float:      ( x ) -> Number.isFinite x\n      symbol:     ( x ) -> ( typeof x ) is 'symbol'\n  #===========================================================================================================\n  return Isa\n\n#===========================================================================================================\nget_isa2_class = ->\n  return Isa2 if Isa2?\n  Isa = get_isa_class()\n  #===========================================================================================================\n  class Isa2 extends Isa\n    #---------------------------------------------------------------------------------------------------------\n    @declare:\n      integer:    ( x ) -> ( @float x ) and Number.isInteger x\n  #===========================================================================================================\n  return Isa2\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@ivk_isa = ( T, done ) ->\n  IVK = require '../../../apps/intervoke'\n  Isa = get_isa_class()\n  #.........................................................................................................\n  isa = new Isa()\n  # debug '^98-1^', isa.__cache\n  T?.eq ( isa.float 42          ), true\n  T?.eq ( isa.float NaN         ), false\n  T?.eq ( isa.float '22'        ), false\n  T?.eq ( isa.boolean '22'      ), false\n  T?.eq ( isa.boolean true      ), true\n  try debug '^98-2^', isa.xxx 42 catch e then warn GUY.trm.reverse e.message\n  T?.throws /property 'xxx' is unknown/, -> isa.xxx 42\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@ivk_accessors_are_registered_in_set = ( T, done ) ->\n  IVK = require '../../../apps/intervoke'\n  Isa = get_isa_class()\n  isa = new Isa()\n  T?.eq [ isa.__accessors..., ], [ 'null', 'undefined', 'boolean', 'float', 'symbol', ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@ivk_disallowed_to_redeclare = ( T, done ) ->\n  IVK = require '../../../apps/intervoke'\n  Isa = get_isa_class()\n  isa = new Isa()\n  try debug '^98-3^', isa.__declare 'float', ( -> ) catch e then warn GUY.trm.reverse e.message\n  T?.throws /property 'float' already declared/, -> isa.__declare 'float', ( -> )\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@ivk_declarations_are_inherited = ( T, done ) ->\n  Isa2  = get_isa2_class()\n  isa2  = new Isa2()\n  T?.eq ( type_of isa2.null       ), 'function'\n  T?.eq ( type_of isa2.undefined  ), 'function'\n  T?.eq ( type_of isa2.boolean    ), 'function'\n  T?.eq ( type_of isa2.float      ), 'function'\n  T?.eq ( type_of isa2.symbol     ), 'function'\n  T?.eq ( type_of isa2.integer    ), 'function'\n  T?.eq ( isa2.null       null        ), true\n  T?.eq ( isa2.undefined  undefined   ), true\n  T?.eq ( isa2.boolean    true        ), true\n  T?.eq ( isa2.float      42.1        ), true\n  T?.eq ( isa2.symbol     Symbol 'x'  ), true\n  T?.eq ( isa2.integer    42          ), true\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@ivk_methods_are_properly_named = ( T, done ) ->\n  #.........................................................................................................\n  do ->\n    T?.ok get_isa_class()   is get_isa_class()\n    T?.ok get_isa2_class()  is get_isa2_class()\n    Isa   = get_isa_class()\n    Isa2  = get_isa2_class()\n    isa2  = new Isa2()\n    isa   = new Isa()\n    T?.ok Isa.declare.float is isa.float\n  return done?()\n  #.........................................................................................................\n  do ->\n    Isa   = get_isa_class()\n    isa   = new Isa()\n    isa.__declare 'anything', ( x ) -> true\n    T?.eq isa.null.name,        'null'\n    T?.eq isa.undefined.name,   'undefined'\n    T?.eq isa.boolean.name,     'boolean'\n    T?.eq isa.float.name,       'float'\n    T?.eq isa.symbol.name,      'symbol'\n    T?.eq isa.integer.name,     'integer'\n    T?.eq isa.anything.name,    'anything'\n  #.........................................................................................................\n  do ->\n    Isa   = get_isa_class()\n    Isa2  = get_isa2_class()\n    isa2  = new Isa2()\n    T?.ok Isa.declare.float is isa2.float\n    isa2.__declare 'anything', ( x ) -> true\n    T?.eq isa2.null.name,       'null'\n    T?.eq isa2.undefined.name,  'undefined'\n    T?.eq isa2.boolean.name,    'boolean'\n    T?.eq isa2.float.name,      'float'\n    T?.eq isa2.symbol.name,     'symbol'\n    T?.eq isa2.integer.name,    'integer'\n    T?.eq isa2.anything.name,   'anything'\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_longest_first_matching = ( T, done ) ->\n  vocabulary  = [ 'of', 'or', 'empty', 'text', 'nonempty', 'list', 'empty list', 'empty list of', 'integer', 'list of', 'of integer', ]\n  #-----------------------------------------------------------------------------------------------------------\n  sort_vocabulary = ( vocabulary ) -> [ vocabulary..., ].sort ( a, b ) ->\n    ### TAINT in edge cases, sorting can be off when code units != code points ###\n    return +1 if a.length < b.length\n    return -1 if a.length > b.length\n    return  0\n  #-----------------------------------------------------------------------------------------------------------\n  re_from_vocabulary = ( vocabulary ) ->\n    vocabulary      = sort_vocabulary vocabulary\n    words_pattern   = ( \"(?:#{GUY.str.escape_for_regex term})\" for term in vocabulary ).join '|'\n    return new RegExp \"(?<=^|\\\\s+)#{words_pattern}(?=$|\\\\s+)\", 'ug'\n  #-----------------------------------------------------------------------------------------------------------\n  analyze_ncc = ( vocabulary_re, ncc ) -> ( d for [ d, ] from probe.matchAll vocabulary_re )\n  # info '^95-1^', vocabulary\n  probes_and_matchers = [\n    [ 'list of integer', [ 'list of', 'integer' ] ]\n    [ 'empty list of integer', [ 'empty list of', 'integer' ] ]\n    [ 'nonempty integer list', [ 'nonempty', 'integer', 'list' ] ]\n    [ 'empty list of integer or list of text', [ 'empty list of', 'integer', 'or', 'list of' ] ]\n    [ 'nonempty list of integer or list of text', [ 'nonempty', 'list of', 'integer', 'or', 'list of' ] ]\n    [ 'integer', [ 'integer' ] ]\n    ]\n  vocabulary_re = re_from_vocabulary vocabulary\n  for [ probe, matcher, error, ] in probes_and_matchers\n    result  = analyze_ncc vocabulary_re, probe\n    info '^23423^', [ probe, result, ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_walk_phrase_structure = ( T, done ) ->\n  { Phrase_parser } = require '../../../apps/intervoke/lib/phrase-parser'\n  #.........................................................................................................\n  pp = new Phrase_parser()\n  sp = ( sentence ) -> sentence.split '_'\n  lf = ( fn ) -> try info '^99-1^', [ fn()..., ] catch e then warn GUY.trm.reverse e.message\n  expand = ( fn ) -> [ fn()..., ]\n  # debug '^23423^', lf pp._walk_alternative_phrases \"\".split '_'\n  # debug '^23423^', lf pp._walk_alternative_phrases \"_or_\".split '_'\n  T?.throws /empty alternative clause/, -> expand -> pp._walk_alternative_phrases sp \"or\"\n  T?.throws /empty alternative clause/, -> expand -> pp._walk_alternative_phrases sp \"or_positive_integer_or_nonempty_text\"\n  T?.throws /empty alternative clause/, -> expand -> pp._walk_alternative_phrases sp \"positive_integer_or_nonempty_text_or\"\n  T?.eq ( expand -> pp._walk_alternative_phrases sp \"positive_integer\"                   ), [ [ 'positive', 'integer' ] ]\n  T?.eq ( expand -> pp._walk_alternative_phrases sp \"positive_integer_or_nonempty_text\"  ), [ [ 'positive', 'integer' ], [ 'nonempty', 'text' ] ]\n  T?.throws /expected word 'nonempty' in phrase 'positive_nonempty' to have role 'noun'/, -> expand -> [ pp.parse \"positive_integer_or_positive_nonempty\" ]\n  T?.throws /word 'combobulate' in phrase 'combobulate_integer' is unknown/, -> expand -> [ pp.parse \"combobulate_integer\" ]\n  T?.throws /expected word 'of' in phrase 'list_of' to have role 'noun'/, -> expand -> [ pp.parse \"list_of\" ]\n  T?.eq ( expand -> [ pp.parse \"positive_integer_or_nonempty_text\" ]          ), [ { alternatives: [ { noun: 'integer', adjectives: [ 'positive' ] }, { noun: 'text', adjectives: [ 'nonempty' ] } ], optional: false } ]\n  T?.eq ( expand -> [ pp.parse \"positive_integer_or_optional_nonempty_text\" ] ), [ { alternatives: [ { noun: 'integer', adjectives: [ 'positive' ] }, { noun: 'text', adjectives: [ 'nonempty' ] } ], optional: true } ]\n  T?.eq ( expand -> [ pp.parse \"positive_integer_or_nonempty_optional_text\" ] ), [ { alternatives: [ { noun: 'integer', adjectives: [ 'positive' ] }, { noun: 'text', adjectives: [ 'nonempty' ] } ], optional: false } ]\n  T?.eq ( expand -> [ pp.parse \"list\" ]                                       ), [ { alternatives: [ { noun: 'list', adjectives: undefined } ], optional: false } ]\n  # #.........................................................................................................\n  # T?.eq ( pp._find_all [ 'nonempty', 'list', 'of', 'list', 'of', 'text', ], 'of'        ), [ 2, 4 ]\n  # T?.eq ( pp._find_all [ 'a', 'b', 'c', 'd', ], 'b'                                     ), [ 1 ]\n  # T?.eq ( pp._find_all [ 'a', 'b', 'c', 'd', ], 'd'                                     ), [ 3 ]\n  # T?.eq ( pp._find_all [ 'a', 'b', 'c', 'd', ], 'e'                                     ), []\n  # T?.eq ( pp._find_all [ 'a', 'b', 'c', 'd', 'c', ], 'c'                                ), [ 2, 4 ]\n  #.........................................................................................................\n  T?.eq ( pp._find_element_clauses [ 'nonempty', 'list', 'of', 'list', 'of', 'text', ]  ), { phrase: [ 'nonempty', 'list' ], elements: { phrase: [ 'list' ], elements: { phrase: [ 'text' ] } } }\n  help '^99-1^', pp._find_element_clauses [ 'nonempty', 'list', 'of', 'list', 'of', 'text', ]\n  T?.eq ( expand -> pp._walk_element_clauses [ 'nonempty', 'list', 'of', 'list', 'of', 'text', ] ), [ { phrase: [ 'nonempty', 'list' ], elements: { phrase: [ 'list' ], elements: { phrase: [ 'text' ] } } }, { phrase: [ 'list' ], elements: { phrase: [ 'text' ] } }, { phrase: [ 'text' ] } ]\n  # for d from pp._walk_element_clauses [ 'nonempty', 'list', 'of', 'nonempty', 'list', 'of', 'nonempty', 'text', ]\n  #   info '^99-1^', d\n  # echo '^99-8^', expand -> [ pp.parse \"list_of_integer\" ]\n  # echo '^99-9^', expand -> [ pp.parse \"list_of_integers\" ]\n  #.........................................................................................................\n  done?()\n\n#===========================================================================================================\nif module is require.main then do =>\n  # @ivk_isa()\n  # test @ivk_declarations_are_inherited\n  # test @\n  test @demo_walk_phrase_structure\n  # test @ivk_methods_are_properly_named\n  # test @ivk_isa\n  # test @ivk_disallowed_to_redeclare\n  # @demo_longest_first_matching()\n\n\n\n\n\n"
  ]
}