{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-html-in-sql.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/DEMO-MIRAGE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n# MMX                       = require '../../../apps/multimix/lib/cataloguing'\n{ DBay }                  = require H.dbay_path\n{ Drb }                   = require H.drb_path\n# { Mrg }                   = require PATH.join H.drb_path, 'lib/_mirage'\n{ width_of\n  to_width }              = require 'to-width'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_jsdom = ( cfg ) ->\n  db              = new DBay { path: '/dev/shm/demo-html-in-sql.sqlite', }\n  db SQL\"\"\"\n    drop view  if exists next_free_aid;\n    drop table if exists atrids;\n    drop table if exists atrs;\n    drop table if exists tags;\n    drop table if exists docs;\"\"\"\n  db SQL\"\"\"\n    create table atrids ( atrid integer not null primary key );\"\"\"\n  db SQL\"\"\"\n    create table atrs (\n        atrid integer not null,\n        k     text not null,\n        v     text not null,\n      primary key ( atrid, k ),\n      foreign key ( atrid ) references atrids );\"\"\"\n  db SQL\"\"\"\n    create table tags (\n        tid   integer not null primary key,\n        sgl   text not null,      -- sigil, one of `<`, `>`, `^`\n        tag   text not null,      -- use '$text' for text nodes\n        atrid integer,\n      foreign key ( atrid ) references atrids );\"\"\"\n  db SQL\"\"\"\n    create table docs (\n        doc   integer not null,   -- references docs\n        v2    integer not null,   -- VNR\n        v3    integer not null,   -- VNR\n        v4    integer not null,   -- VNR\n        tid   integer not null references tags,\n      primary key ( doc, v2, v3, v4 ) );\"\"\"\n  _insert_atrid     = db.prepare_insert { into: 'atrids', returning: '*', exclude: [ 'atrid', ], }\n  _insert_tag       = db.prepare_insert { into: 'tags',   returning: '*', exclude: [ 'tid', ], }\n  _insert_atr       = db.prepare_insert { into: 'atrs',   returning: '*', }\n  _insert_doc       = db.prepare_insert { into: 'docs',   returning: '*', }\n  #.........................................................................................................\n  doc         = 1\n  _append_tag = ( doc, sgl, tag, atrs ) ->\n    atrid = null\n    if atrs?\n      { atrid } = db.first_row _insert_atrid()\n      for k, v of atrs\n        v = rpr v unless isa.text v\n        info '^689-1^', db.first_row _insert_atr, { atrid, k, v, }\n    urge db.first_row _insert_tag, { doc, sgl, tag, atrid, }\n    return null\n  _append_tag 1, '<', 'div', { id: 'c1', class: [ 'foo', 'bar', ], }\n  #.........................................................................................................\n  console.table db.all_rows SQL\"select * from docs;\"\n  console.table db.all_rows SQL\"select * from tags;\"\n  console.table db.all_rows SQL\"select * from atrs;\"\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  @demo_jsdom()\n\n\n"
  ]
}