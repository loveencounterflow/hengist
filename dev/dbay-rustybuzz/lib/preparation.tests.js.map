{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/preparation.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/PREPARATION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n# MMX                       = require '../../../apps/multimix/lib/cataloguing'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRB get_fontmetrics()\" ] = ( T, done ) ->\n  # ### explicit path, explicitly temporary ###\n  # T?.halt_on_error()\n  # { DBay }            = require H.dbay_path\n  RBW                 = null\n  # RBW                 = require '../../../apps/rustybuzz-wasm/pkg'\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  # { Tbl, }            = require '../../../apps/icql-dba-tabulate'\n  # path                = PATH.resolve DBay.C.autolocation, 'drb-23842847.sqlite'\n  # DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  matcher             =\n    fontnick:           'gi'\n    ascender:           -710\n    capital_height:     -664\n    descender:          290\n    scale:              1\n    units_per_em:       1000\n    x_height:           -400\n    angle:              -17\n  #.........................................................................................................\n  db          = new DBay()\n  # dtab        = new Tbl { db, }\n  drb         = new Drb { db, RBW, temporary: true, }\n  fontnick    = 'gi'\n  drb.prepare_font { fontnick, }\n  fm          = drb.get_fontmetrics { fontnick, }\n  urge '^6464^', fm\n  T?.eq fm, matcher\n  #.........................................................................................................\n  # cgid_map            = drb.get_cgid_map { fontnick, chrs, }\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRB get_fontmetrics() throws Dbr_unknown_or_unprepared_fontnick\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  #.........................................................................................................\n  db          = new DBay()\n  drb         = new Drb { db, }\n  fontnick    = 'xxx'\n  error       = null\n  try\n    fm          = drb.get_fontmetrics { fontnick, }\n  catch error\n    T.eq ( type_of error ), 'dbr_unknown_or_unprepared_fontnick'\n  T?.ok error?\n  #.........................................................................................................\n  return done?()\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n  # test @[ \"DRB get_fontmetrics()\" ]\n  # @[ \"DRB foobar\" ]()\n  # test @[ \"DRB no shared state in WASM module\" ]\n  # @[ \"DRB path compression\" ]()\n  # test @[ \"DRB can pass in custom RBW\" ]\n  # @[ \"DRB get_cgid_map()\" ]()\n  # @[ \"DRB insert_outlines()\" ]()\n  # test @[ \"DRB RBW arrange() returns coordinates acc to font upem\" ]\n  # test @[ \"DRB RBW arrange() honors missing outlines\" ]\n  # test @[ \"DRB get_fontmetrics()\" ]\n  # test @[ \"DRB insert_outlines()\" ]\n  # test @[ \"DRB hyphens in many fonts behave unsurprisingly\" ]\n\n\n"
  ]
}