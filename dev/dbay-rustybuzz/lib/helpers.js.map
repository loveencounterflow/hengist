{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/helpers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DRB/TESTS/HELPERS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n# #...........................................................................................................\n# test                      = require 'guy-test'\n# jr                        = JSON.stringify\n# { inspect, }              = require 'util'\n# xrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n# xrpr2                     = ( x ) -> inspect x, { colors: yes, breakLength: 20, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nFSP                       = require 'fs/promises'\n@types                    = new ( require 'intertype' ).Intertype\n{ isa\n  validate\n  validate_list_of\n  equals }                = @types.export()\nDATA                      = require '../../../lib/data-providers-nocache'\nDATOM                     = require 'datom'\nH                         = @\n#-----------------------------------------------------------------------------------------------------------\ndo =>\n  if '--dbay-use-installed' in process.argv\n    H.dbay_use_installed  = true\n    H.dbay_path           = 'dbay'\n    message                   = \"using installed version of dbay\"\n  else\n    H.dbay_use_installed  = false\n    H.dbay_path           = '../../../apps/dbay'\n    message                   = \"using linked dbay\"\n  debug '^3337^', CND.reverse message\n  process.on 'exit', ->\n    debug '^3337^', CND.reverse message\n  return null\n#-----------------------------------------------------------------------------------------------------------\ndo =>\n  if '--drb-use-installed' in process.argv\n    H.drb_use_installed  = true\n    H.drb_path           = 'drb'\n    message                   = \"using installed version of drb\"\n  else\n    H.drb_use_installed  = false\n    H.drb_path           = '../../../apps/dbay-rustybuzz'\n    message                   = \"using linked drb\"\n  debug '^3337^', CND.reverse message\n  process.on 'exit', ->\n    debug '^3337^', CND.reverse message\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@settings_from_set_id = ( set_id ) ->\n  chrs                = null\n  cids                = null\n  cgid_map            = null\n  fontnick            = null\n  fspath              = null\n  #.........................................................................................................\n  switch set_id\n    when 'small'\n      fontnick  = 'djvs'\n      fspath    = 'DejaVuSerif.ttf'\n      chrs      = \"abcdefghijklm\"\n      text      = \"affirmation.\"\n    when 'smalli'\n      fontnick  = 'djvsi'\n      fspath    = 'DejaVuSerif-Italic.ttf'\n      chrs      = \"abcdefghijklm\"\n      text      = \"affirmation.\"\n    when 'small-eg8i'\n      fontnick  = 'eg8i'\n      fspath    = 'EBGaramond08-Italic.otf'\n      chrs      = \"abcdefghijklm\"\n      text      = \"Affirmation字缺TitianիϪSylt.\"\n    when 'medium-eg8i-da'\n      fontnick  = 'eg8i'\n      fspath    = 'EBGaramond08-Italic.otf'\n      chrs      = \"abcdefghijklm\"\n      text      = \"\"\"Dansk er et nordisk sprog, også præciseret som østnordisk, i den germanske\n        sprogfamilie. Det danske sprog tales af ca. seks millioner mennesker, hovedsageligt i Danmark, men\n        også i Sydslesvig (i Flensborg ca. 20 %), på Færøerne og Grønland. Dansk er tæt forbundet med\n        norsk og svensk, og sproghistorisk har dansk været stærkt påvirket af plattysk.\"\"\"\n    when 'medium-eg8i'\n      fontnick  = 'eg8i'\n      fspath    = 'EBGaramond08-Italic.otf'\n      chrs      = \"abcdefghijklm\"\n      text      = \"\"\"f&shy;f&shy;i f&wbr;f&wbr;i affirmation Danish is a North Germanic language spoken by about six million people, principally in\n        Denmark, Greenland, the Faroe Islands and in the region of Southern Schles&shy;wig in northern Germany,\n        where it has minority language status.\"\"\"\n    when 'small-aleo'\n      fontnick  = 'aleo'\n      fspath    = 'Aleo_font_v1.2.2/Desktop OTF/Aleo-Italic.otf'\n      chrs      = \"abcdefghijklm\"\n      text      = \"Affirmation字缺TitianիϪSylt.\"\n    when 'small-djvsi'\n      fontnick  = 'djvsi'\n      fspath    = 'DejaVuSerif-Italic.ttf'\n      chrs      = \"abcdefghijklm\"\n      text      = \"Affirmation字缺TitianիϪSylt.\"\n    when 'widechrs'\n      fontnick  = 'sfb'\n      fspath    = 'sunflower-u-cjk-xb.ttf'\n      chrs      = \"𠀀𠀁𠀂𠀃𠀄𠀅𠀆\"\n      text      = \"𠀀𠀁𠀂𠀃𠀄𠀅𠀆\"\n    when '3a'\n      fontnick  = 'djvsi'\n      fspath    = 'DejaVuSerif-Italic.ttf'\n      chrs      = \"abcdefghijklm\"\n      text      = \"abc\"\n    when '3b'\n      fontnick  = 'eg8i'\n      fspath    = 'EBGaramond08-Italic.otf'\n      chrs      = \"abcdefghijklm\"\n      text      = \"abc\"\n    when 'all'\n      fontnick  = 'qkai'\n      fspath    = 'cwTeXQKai-Medium.ttf'\n      chrs      = drb.get_assigned_unicode_chrs()\n    when 'tibetan'\n      fontnick  = 'tbm'\n      fspath    = 'TibetanMachineUni.ttf'\n      text      = \"ཨོཾ་མ་ཎི་པདྨེ་ཧཱུྃ\"\n      chrs      = 'abc'\n    when 'arabic'\n      fontnick  = 'amiri'\n      fspath    = 'arabic/Amiri-0.113/Amiri-Bold.ttf'\n      text      = ( [ \"نستعلیق‎ 字缺 الخط الأمیری\"... ].reverse() ).join ''\n      chrs      = ( [ \"الخط الأمیری\"... ].reverse() ).join ''\n    when 'urdu'\n      fontnick  = 'nur'\n      fspath    = 'noto-arabic/NotoNastaliqUrdu-unhinted/NotoNastaliqUrdu-Regular.ttf'\n      # text      = ( [ \"اُردُو‌ حُرُوفِ ‌تَہَجِّی\"... ].reverse() ).join ''\n      # text      = \"نستعلیق‎\"\n      text      = ( [ \"نستعلیق‎\"... ].reverse() ).join ''\n      chrs      = ( [ \"الخط الأمیری\"... ].reverse() ).join ''\n    else\n      throw new Error \"^345^ unknown set_id #{rpr set_id}\"\n  #.........................................................................................................\n  fspath = PATH.resolve PATH.join __dirname, '../../../assets/jizura-fonts/', fspath\n  return { chrs, cids, cgid_map, text, fontnick, fspath, }\n\n# #-----------------------------------------------------------------------------------------------------------\n# { Dba }                   = require H.dbay_path\n# dba_types                 = require H.dbay_path + '/lib/types'\n\n# #-----------------------------------------------------------------------------------------------------------\n# @types.declare 'interpolatable_value', ( x ) ->\n#   return true if @isa.text x\n#   return true if @isa.float x\n#   return true if @isa.boolean x\n#   return false\n\n# #-----------------------------------------------------------------------------------------------------------\n# @types.declare 'procure_db_cfg', tests:\n#   \"@isa.object x\":                      ( x ) -> @isa.object x\n#   \"@isa.nonempty_text x.ref\":           ( x ) -> @isa.nonempty_text x.ref\n#   \"@isa.nonempty_text x.size\":          ( x ) -> @isa.nonempty_text x.size\n#   \"@isa.boolean x.reuse\":               ( x ) -> @isa.boolean x.reuse\n\n# #-----------------------------------------------------------------------------------------------------------\n# @types.declare 'looks_like_db_cfg', tests:\n#   \"@isa.object x\":                      ( x ) -> @isa.object x\n#   \"dba_types.isa.dba x.dba\":            ( x ) -> dba_types.isa.dba x.dba\n#   \"dba_types.isa.ic_schema x.schema\":   ( x ) -> dba_types.isa.ic_schema x.schema\n\n# #-----------------------------------------------------------------------------------------------------------\n# @types.declare 'datamill_db_lookalike', ( cfg ) ->\n#   @validate.looks_like_db_cfg cfg\n#   { dba, schema, }  = cfg\n#   schema_i          = dba.sql.I schema\n#   try\n#     return false unless ( dba.first_value dba.query \"select count(*) from #{schema_i}.main;\" ) is 327\n#     # debug '^35354^', dba.list dba.query \"select * from #{schema_i}.main order by vnr_blob limit 3;\"\n#   catch error\n#     throw error unless error.code is 'SQLITE_ERROR'\n#     return false\n#   return true\n\n# #-----------------------------------------------------------------------------------------------------------\n# @types.declare 'chinook_db_lookalike', ( cfg ) ->\n#   @validate.looks_like_db_cfg cfg\n#   { dba, schema, }  = cfg\n#   schema_i          = dba.sql.I schema\n#   try\n#     db_objects = dba.list dba.query \"select type, name from #{schema_i}.sqlite_schema where true or type is 'table' order by name;\"\n#     info db_objects\n#     return false unless equals db_objects, [\n#       { type: 'table', name: 'Album',                             }\n#       { type: 'table', name: 'Artist',                            }\n#       { type: 'table', name: 'Customer',                          }\n#       { type: 'table', name: 'Employee',                          }\n#       { type: 'table', name: 'Genre',                             }\n#       { type: 'index', name: 'IFK_AlbumArtistId',                 }\n#       { type: 'index', name: 'IFK_CustomerSupportRepId',          }\n#       { type: 'index', name: 'IFK_EmployeeReportsTo',             }\n#       { type: 'index', name: 'IFK_InvoiceCustomerId',             }\n#       { type: 'index', name: 'IFK_InvoiceLineInvoiceId',          }\n#       { type: 'index', name: 'IFK_InvoiceLineTrackId',            }\n#       { type: 'index', name: 'IFK_PlaylistTrackTrackId',          }\n#       { type: 'index', name: 'IFK_TrackAlbumId',                  }\n#       { type: 'index', name: 'IFK_TrackGenreId',                  }\n#       { type: 'index', name: 'IFK_TrackMediaTypeId',              }\n#       { type: 'table', name: 'Invoice',                           }\n#       { type: 'table', name: 'InvoiceLine',                       }\n#       { type: 'table', name: 'MediaType',                         }\n#       { type: 'table', name: 'Playlist',                          }\n#       { type: 'table', name: 'PlaylistTrack',                     }\n#       { type: 'table', name: 'Track',                             }\n#       { type: 'index', name: 'sqlite_autoindex_PlaylistTrack_1',  }\n#       { type: 'table', name: 'sqlite_sequence',                   } ]\n#   catch error\n#     throw error unless error.code is 'SQLITE_ERROR'\n#     return false\n#   return true\n\n# #-----------------------------------------------------------------------------------------------------------\n# @types.declare 'micro_db_lookalike', ( cfg ) ->\n#   @validate.looks_like_db_cfg cfg\n#   { dba, schema, }  = cfg\n#   schema_i          = dba.sql.I schema\n#   try\n#     db_objects = dba.list dba.query \"select type, name from #{schema_i}.sqlite_schema order by name;\"\n#     info db_objects\n#     return false unless equals db_objects, [\n#       { type: 'table', name: 'main',                   } ]\n#   catch error\n#     throw error unless error.code is 'SQLITE_ERROR'\n#     return false\n#   return true\n\n\n# #===========================================================================================================\n# #\n# #-----------------------------------------------------------------------------------------------------------\n# @file_exists = ( path ) ->\n#   try ( stat = FS.statSync path ) catch error\n#     return false if error.code is 'ENOENT'\n#     throw error\n#   return true if stat.isFile()\n#   throw new Error \"^434534^ not a file: #{rpr path}\\n#{rpr stat}\"\n\n# #-----------------------------------------------------------------------------------------------------------\n# @ensure_file_exists = ( path ) ->\n#   throw new Error \"^434534^ not a file: #{rpr path}\" unless @file_exists path\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @try_to_remove_file = ( path ) ->\n#   try FS.unlinkSync path catch error\n#     return if error.code is 'ENOENT'\n#     throw error\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @resolve_path = ( path ) -> PATH.resolve PATH.join __dirname, '../../../', path\n\n# #-----------------------------------------------------------------------------------------------------------\n# @copy_over = ( from_path, to_path ) ->\n#   @try_to_remove_file to_path unless to_path in [ ':memory:', '', ]\n#   await FSP.copyFile from_path, to_path\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @interpolate  = ( template, namespace ) ->\n#   validate.text template\n#   validate.object namespace\n#   R = template\n#   for name, value of namespace\n#     continue unless ( R.indexOf ( pattern = \"{#{name}}\" ) ) > -1\n#     validate.interpolatable_value value\n#     R = R.replaceAll pattern, value\n#   if ( match = R.match /(?<!\\\\)\\{/ )\n#     throw new Error \"unresolved curly bracket in template #{rpr template}\"\n#   R = R.replaceAll '\\\\{', '{'\n#   R = R.replaceAll '\\\\}', '}'\n#   return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# @get_data = ( cfg ) ->\n#   return data_cache if data_cache?\n#   whisper \"retrieving test data...\"\n#   #.........................................................................................................\n#   texts       = DATA.get_words cfg.word_count\n#   #.........................................................................................................\n#   data_cache  = { texts, }\n#   data_cache  = DATOM.freeze data_cache\n#   whisper \"...done\"\n#   return data_cache\n\n# #-----------------------------------------------------------------------------------------------------------\n# @get_cfg = ->\n#   R =\n#     # word_count: 10_000\n#     word_count: 10\n#     sql:\n#       small:  @resolve_path 'assets/icql/small-datamill.sql'\n#       big:    @resolve_path 'assets/icql/Chinook_Sqlite_AutoIncrementPKs.sql'\n#     csv:\n#       small:  @resolve_path 'assets/icql/chineselexicaldatabase2.1.small.txt'\n#       holes:  @resolve_path 'assets/icql/ncrglyphwbf-with-holes.csv'\n#     tsv:\n#       micro:  @resolve_path 'assets/icql/ncrglyphwbf.tsv'\n#       holes:  @resolve_path 'assets/icql/ncrglyphwbf-with-holes.tsv'\n#     db:\n#       templates:\n#         nnt:    @resolve_path 'assets/icql/numbersandtexts.db'\n#         micro:  @resolve_path 'assets/icql/micro.db'\n#         small:  @resolve_path 'assets/icql/small-datamill.db'\n#         big:    @resolve_path 'assets/icql/Chinook_Sqlite_AutoIncrementPKs.db'\n#       target:\n#         small:  @resolve_path 'data/dbay/dbay-{ref}-{size}.db'\n#         big:    @resolve_path 'data/dbay/dbay-{ref}-{size}.db'\n#       work:\n#         mem:    ':memory:'\n#         fle:    @resolve_path 'data/dbay/dbay-{ref}-{size}.db'\n#       temp:\n#         small:  @resolve_path 'data/dbay/dbay-{ref}-{size}-temp.db'\n#         big:    @resolve_path 'data/dbay/dbay-{ref}-{size}-temp.db'\n#       old:\n#         small:  @resolve_path 'data/dbay/dbay-{ref}-{size}-old.db'\n#         big:    @resolve_path 'data/dbay/dbay-{ref}-{size}-old.db'\n#     pragma_sets:\n#       #.....................................................................................................\n#       ### thx to https://forum.qt.io/topic/8879/solved-saving-and-restoring-an-in-memory-sqlite-database/2 ###\n#       fle: [\n#         'page_size = 4096'\n#         'cache_size = 16384'\n#         'temp_store = MEMORY'\n#         'journal_mode = WAL'\n#         'locking_mode = EXCLUSIVE'\n#         'synchronous = OFF' ]\n#       #.....................................................................................................\n#       mem: []\n#       bare: []\n#   return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# @nonexistant_path_from_ref = ( ref ) ->\n#   R = @interpolate @get_cfg().db.work.fle, { ref, size: 'any', }\n#   @try_to_remove_file R\n#   return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# @procure_db = ( cfg ) ->\n#   cfg           = { reuse: false, cfg..., }\n#   validate.procure_db_cfg cfg\n#   xcfg          = @get_cfg()\n#   template_path = @interpolate xcfg.db.templates[ cfg.size ], cfg\n#   @ensure_file_exists template_path\n#   # work_path     = @interpolate xcfg.db.work[      cfg.mode ], cfg\n#   work_path     = @interpolate xcfg.db.work.fle, cfg\n#   unless cfg.reuse and @file_exists work_path\n#     help \"^4341^ procuring DB #{work_path}\"\n#     await @copy_over template_path, work_path\n#   else\n#     warn \"^4341^ skipping DB file creation (#{work_path} already exists)\"\n#   return { template_path, work_path, }\n\n# #-----------------------------------------------------------------------------------------------------------\n# @procure_file = ( cfg ) ->\n#   { path\n#     name  }     = cfg\n#   @ensure_file_exists path\n#   work_path     = @resolve_path PATH.join 'data/icql', name\n#   await @copy_over path, work_path\n#   return work_path\n\n\n"
  ]
}