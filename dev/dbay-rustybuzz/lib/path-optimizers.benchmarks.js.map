{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/path-optimizers.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAYRB/BENCHMARKS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\ngcfg                      = { verbose: false, }\n{ freeze }                = require 'letsfreezethat'\nZLIB                      = require 'zlib'\nSVGO                      = require 'svgo'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  whisper \"retrieving test data...\"\n  # DATOM = require '../../../apps/datom'\n  #.........................................................................................................\n  svg_paths   = DATA.get_svg_pathdata cfg.path_count\n  #.........................................................................................................\n  deflate_dict  = Buffer.from \"M 727 -397 Q 748 -397 794 -370 Q 840 -342 840 -322 Q 840 -315 832 -310 Q 824 -305 817 -305 L 784 -309 Q 697 -320 630 -320 Q 494 -320 285 -291 Q 282 -29M 811 -601 Q 811 -588 784 -588 Q 782 -588 757 -589 Q 731 -590 691 -591 Q 651 -593 613 -593 Q 549 -593 502 -588 L 461 -582\"\n  data_cache    = { svg_paths, deflate_dict, }\n  data_cache    = freeze data_cache\n  whisper \"...done\"\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@svgo = ( cfg ) -> new Promise ( resolve ) =>\n  { svg_paths       } = @get_data cfg\n  original_size       = 0\n  compressed_size     = 0\n  count               = 0\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    for svg_path in svg_paths\n      svg                       = \"\"\"<svg><path d='#{svg_path}'/></svg>\"\"\"\n      { data: svg_optimized, }  = SVGO.optimize svg\n      compressed_svg_path       = svg_optimized.replace /^.*d=\"([^\"]+)\".*$/, '$1'\n      original_size            += svg_path.length\n      compressed_size          += compressed_svg_path.length\n      count++\n      if cfg.show\n        debug '^3343^', svg_path\n        debug '^3343^', compressed_svg_path\n    original_size_txt   = CND.format_number original_size\n    compressed_size_txt = CND.format_number compressed_size\n    ratio               = compressed_size / original_size\n    ratio_txt           = ratio.toFixed 3\n    debug '^23^', \"original_size: #{original_size_txt}, compressed_size: #{compressed_size_txt}, ratio: #{ratio_txt}\"\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_zlib = ( cfg ) -> new Promise ( resolve ) =>\n  compress      = switch cfg.method\n    when 'deflate'        then ZLIB.deflateSync\n    when 'deflateraw'     then ZLIB.deflateRawSync\n    when 'deflaterawdict' then ZLIB.deflateRawSync\n    when 'gzip'           then ZLIB.gzipSync\n    when 'brotli'         then ZLIB.brotliCompressSync\n    else throw new Error \"^445488^ unknown method #{rpr cfg.method}\"\n  decompress    = switch cfg.method\n    when 'deflate'        then ZLIB.inflateSync\n    when 'deflateraw'     then ZLIB.inflateRawSync\n    when 'deflaterawdict' then ZLIB.inflateRawSync\n    when 'gzip'           then ZLIB.gunzipSync\n    when 'brotli'         then ZLIB.brotliDecompressSync\n    else throw new Error \"^445488^ unknown method #{rpr cfg.method}\"\n  #.........................................................................................................\n  { svg_paths\n    deflate_dict  }   = @get_data cfg\n  count               = 0\n  decompression_count = 0\n  zlib_cfg            = {}\n  zlib_cfg.dictionary = deflate_dict if cfg.method is 'deflaterawdict'\n  zlib_cfg.level      = cfg.level ? -1\n  zlib_cfg.strategy   = cfg.strategy ? ZLIB.constants.Z_DEFAULT_STRATEGY\n  original_size       = 0\n  compressed_size     = 0\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    for svg_path in svg_paths\n      original_size      += ( Buffer.from svg_path ).length\n      original_buffer     = Buffer.from svg_path\n      compressed_buffer   = compress original_buffer, zlib_cfg\n      compressed_size    += compressed_buffer.length\n      if Math.random() < cfg.outline_usage_rate\n        decompression_count++\n        decompressed_buffer = decompress compressed_buffer\n        decompressed_size   = decompressed_buffer.length\n        warn \"^3445^\", { decompressed_size, original_size: original_buffer.length, }, cfg if original_buffer.length isnt decompressed_size\n      if cfg.show\n        debug '^4354^', original_buffer.toString()[ .. 50 ]\n        debug '^4354^', original_buffer.length, compressed_buffer.length\n      count++\n    original_size_txt   = CND.format_number original_size\n    compressed_size_txt = CND.format_number compressed_size\n    ratio               = compressed_size / original_size\n    ratio_txt           = ratio.toFixed 3\n    debug '^23^', \"original_size: #{original_size_txt}, compressed_size: #{compressed_size_txt}, ratio: #{ratio_txt}; decompression_count: #{decompression_count}\"\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@zlib_deflateraw_1            = ( cfg ) => @_zlib { cfg..., method: 'deflateraw',     'level': 1, strategy: ZLIB.constants.Z_DEFAULT_STRATEGY, }\n@zlib_deflateraw_1_hfm        = ( cfg ) => @_zlib { cfg..., method: 'deflateraw',     'level': 1, strategy: ZLIB.constants.Z_HUFFMAN_ONLY, }\n@zlib_deflateraw_1_rle        = ( cfg ) => @_zlib { cfg..., method: 'deflateraw',     'level': 1, strategy: ZLIB.constants.Z_RLE, }\n@zlib_deflateraw_1_fixed      = ( cfg ) => @_zlib { cfg..., method: 'deflateraw',     'level': 1, strategy: ZLIB.constants.Z_FIXED, }\n@zlib_gzip_1                  = ( cfg ) => @_zlib { cfg..., method: 'gzip',           'level': 1, strategy: ZLIB.constants.Z_DEFAULT_STRATEGY, }\n@zlib_gzip_1_hfm              = ( cfg ) => @_zlib { cfg..., method: 'gzip',           'level': 1, strategy: ZLIB.constants.Z_HUFFMAN_ONLY, }\n@zlib_gzip_1_rle              = ( cfg ) => @_zlib { cfg..., method: 'gzip',           'level': 1, strategy: ZLIB.constants.Z_RLE, }\n@zlib_gzip_1_fixed            = ( cfg ) => @_zlib { cfg..., method: 'gzip',           'level': 1, strategy: ZLIB.constants.Z_FIXED, }\n\n@zlib_deflate                 = ( cfg ) => @_zlib { cfg..., method: 'deflate',                    }\n@zlib_deflate_1               = ( cfg ) => @_zlib { cfg..., method: 'deflate',        'level': 1, }\n@zlib_deflate_5               = ( cfg ) => @_zlib { cfg..., method: 'deflate',        'level': 5, }\n@zlib_deflate_9               = ( cfg ) => @_zlib { cfg..., method: 'deflate',        'level': 9, }\n@zlib_deflateraw              = ( cfg ) => @_zlib { cfg..., method: 'deflateraw',                 }\n@zlib_deflateraw_5            = ( cfg ) => @_zlib { cfg..., method: 'deflateraw',     'level': 5, }\n@zlib_deflateraw_9            = ( cfg ) => @_zlib { cfg..., method: 'deflateraw',     'level': 9, }\n@zlib_deflaterawdict          = ( cfg ) => @_zlib { cfg..., method: 'deflaterawdict',             }\n@zlib_gzip                    = ( cfg ) => @_zlib { cfg..., method: 'gzip',                       }\n@zlib_gzip_5                  = ( cfg ) => @_zlib { cfg..., method: 'gzip',           'level': 5, }\n@zlib_gzip_9                  = ( cfg ) => @_zlib { cfg..., method: 'gzip',           'level': 9, }\n# @zlib_brotli          = ( cfg ) => @_zlib { cfg..., method: 'brotli',         }\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  gcfg.verbose  = true\n  gcfg.verbose  = false\n  bench         = BM.new_benchmarks()\n  cfg           = { path_count: 1_000, }\n  # cfg           = { path_count: 10_000, }\n  # cfg           = { path_count: 3, }\n  #.........................................................................................................\n  ### outline_usage_rate controls how many of the compressed outlines will get decompressed, thereby\n  reflecting the fact that as more and more (hundreds of thousand) outlines are stored, fewer and fewer will\n  ever be used for typesetting. It is therefore a measure of how much more we value compression speed over\n  decompression speed. ###\n  if          0 < cfg.path_count < 1_000  then  cfg.outline_usage_rate = 1.00\n  else if 1_000 < cfg.path_count < 5_000  then  cfg.outline_usage_rate = 0.50\n  else if 5_000 < cfg.path_count < 10_000 then  cfg.outline_usage_rate = 0.25\n  else                                          cfg.outline_usage_rate = 0.10\n  #.........................................................................................................\n  cfg.show      = cfg.path_count < 10\n  repetitions   = 5\n  test_names    = [\n\n    'zlib_deflateraw_1_hfm'\n    'zlib_gzip_1_hfm'\n    'zlib_deflateraw_1_rle'\n    'zlib_gzip_1_rle'\n\n    # 'zlib_deflateraw_1_fixed'\n    # 'zlib_deflateraw_1'\n    # 'zlib_gzip_1_fixed'\n    # 'zlib_gzip_1'\n\n    # # 'svgo'\n    # 'zlib_deflate_1'\n    # 'zlib_deflate'\n    # 'zlib_deflate_5'\n    # 'zlib_deflate_9'\n    # 'zlib_deflateraw'\n    # 'zlib_deflateraw_5'\n    # 'zlib_deflateraw_9'\n    # # 'zlib_deflaterawdict'\n    # 'zlib_gzip'\n    # 'zlib_gzip_5'\n    # 'zlib_gzip_9'\n    # # 'zlib_brotli'\n    ]\n  global.gc() if global.gc?\n  data_cache = null\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      global.gc() if global.gc?\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n  # debug '^233^', \"Z_NO_COMPRESSION:       \", ZLIB.constants.Z_NO_COMPRESSION\n  # debug '^233^', \"Z_BEST_SPEED:           \", ZLIB.constants.Z_BEST_SPEED\n  # debug '^233^', \"Z_BEST_COMPRESSION:     \", ZLIB.constants.Z_BEST_COMPRESSION\n  # debug '^233^', \"Z_DEFAULT_COMPRESSION:  \", ZLIB.constants.Z_DEFAULT_COMPRESSION\n  # debug '^233^', \"Z_FILTERED:             \", ZLIB.constants.Z_FILTERED\n  # debug '^233^', \"Z_HUFFMAN_ONLY:         \", ZLIB.constants.Z_HUFFMAN_ONLY\n  # debug '^233^', \"Z_RLE:                  \", ZLIB.constants.Z_RLE\n  # debug '^233^', \"Z_FIXED:                \", ZLIB.constants.Z_FIXED\n  # debug '^233^', \"Z_DEFAULT_STRATEGY:     \", ZLIB.constants.Z_DEFAULT_STRATEGY\n  # pd                        = 'M839-18C839-31 832-31 812-31C754-31 754-39 754-48C754-48 754-56 758-71L893-612C901-644 909-652 972-652C993-652 1002-652 1002-670C1002-683 994-683 977-683L849-683C827-683 824-683 813-665L473-100L417-661C415-683 413-683 389-683L256-683C240-683 229-683 229-664C229-652 237-652 256-652C287-652 314-652 314-635C314-632 314-630 310-616L182-101C168-45 130-33 85-31C77-31 66-30 66-12C66-3 72 0 79 0C109 0 143-3 174-3C206-3 241 0 272 0C278 0 290 0 290-18C290-30 283-31 271-31C214-33 212-59 212-74C212-77 212-83 216-99L349-630L350-630L411-24C413-7 413 0 428 0C441 0 446-7 452-18L825-639L826-639L685-73C677-39 671-31 603-31C587-31 576-31 576-12C576 0 587 0 590 0C627 0 666-3 704-3C742-3 783 0 820 0C827 0 839 0 839-18Z'\n  # svg                       = \"\"\"<svg><path d='#{pd}'/></svg>\"\"\"\n  # { data: svg_optimized, }  = SVGO.optimize svg\n  # pd_optimized              = svg_optimized.replace /^.*d=\"([^\"]+)\".*$/, '$1'\n  # debug '^746^', pd\n  # debug '^746^', pd_optimized\n  # debug '^746^', svg.length, svg_optimized.length, svg_optimized.length / svg.length\n\n\n"
  ]
}