{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-typeset-sample-page.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/DEMOS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\n# H                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n# MMX                       = require '../../../apps/multimix/lib/cataloguing'\nRBW                       = require 'rustybuzz-wasm'\nH                         = require './helpers'\n{ DBay }                  = require H.dbay_path\n{ Drb }                   = require H.drb_path\ntpl_path                  = PATH.resolve PATH.join __dirname, '../../../assets/dbay-rustybuzz/demo-typeset-sample-page.template.html'\ntpl                       = FS.readFileSync tpl_path, { encoding: 'utf-8', }\ntarget_path               = PATH.resolve PATH.join __dirname, '../../../apps-typesetting/html+svg-demos/demo-typeset-sample-page.output.html'\n{ to_width }              = require 'to-width'\n\n\n#-----------------------------------------------------------------------------------------------------------\nXXX_show_clusters = ( text, arrangement ) ->\n  ### This is probably based on a misunderstanding of what `rustybuzz` means by 'cluster';\n  see https://docs.rs/rustybuzz/0.4.0/rustybuzz/struct.GlyphInfo.html ###\n  for d, d_idx in arrangement\n    cur_bidx  = d.bidx\n    nxt_bidx  = arrangement[ d_idx + 1 ]?.bidx ? arrangement.length\n    cur_text  = text[ cur_bidx ... nxt_bidx ]\n    info '^4448^', rpr cur_text\n  help '^4448^', rpr text\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\nappend_to = ( page, name, text ) ->\n  text = rpr text unless isa.text text\n  echo ( CND.reverse CND.grey to_width name, 15 ) + ( CND.reverse CND.gold ' ' + to_width text, 108 )\n  marker = \"<!--?#{name}-end?-->\"\n  return page.replace marker, text.toString() + marker + '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_typeset_sample_page = ( cfg ) ->\n  defaults        = { set_id: 'small-eg8i', }\n  cfg             = { defaults..., cfg..., }\n  { set_id }      = cfg\n  RBW             = require '../../../apps/rustybuzz-wasm/pkg'\n  db              = new DBay { path: '/dev/shm/typesetting-1.sqlite', }\n  drb             = new Drb { db, create: true, RBW, path: '/dev/shm/typesetting-2.sqlite', }\n  { I, L, V }     = db.sql\n  #.........................................................................................................\n  { text\n    chrs\n    cids\n    cgid_map\n    fontnick\n    fspath      } = H.settings_from_set_id set_id\n  size_mm         = 10\n  scale           = size_mm / 1000\n  scale_txt       = scale.toFixed 4\n  # chrs            = [ ( new Set Array.from text )..., ]\n  #.........................................................................................................\n  ### Need to find a way to find associations between CIDs and GIDs ###\n  drb.register_fontnick { fontnick, fspath, }\n  drb.prepare_font      { fontnick, }\n  drb.insert_outlines   { fontnick, chrs, cids, cgid_map, }\n  arrangement     = drb.shape_text { fontnick, text, }\n  # debug '^33443^', arrangement\n  #.........................................................................................................\n  page                  = tpl\n  required_xds          = {}\n  required_xds[ d.sid ] = d for d in arrangement\n  known_ods             = {}\n  debug '^3343^', \"required_xds:\", ( Object.keys required_xds ).length\n  debug '^3343^', \"known_ods:   \", ( Object.keys known_ods ).length\n  do =>\n    required_sids         = Object.keys required_xds\n    for od from db SQL\"\"\"\n      select\n          *\n        from outlines\n        where sid in #{V required_sids};\"\"\"\n      urge '^33443^', to_width ( rpr od ), 100\n      known_ods[ od.sid ] = od\n      delete required_xds[ od.sid ]\n    return null\n  debug '^3343^', \"required_xds:\", ( Object.keys required_xds ).length\n  debug '^3343^', \"known_ods:   \", ( Object.keys known_ods ).length\n  info k, ( to_width ( rpr v ), 100 ) for k, v of required_xds\n  info k, ( to_width ( rpr v ), 100 ) for k, v of known_ods\n  #.........................................................................................................\n  cgid_map = new Map\n  for d from drb.insert_and_walk_outlines { fontnick, chrs, cids, cgid_map, }\n    debug '^3443^', d\n  #.........................................................................................................\n  return null\n\n  # known_ods[ d.]      =\n  known_sids      = new Set db.first_values SQL\"select sid from outlines where fontnick = $fontnick;\", { fontnick, }\n  # missing_sids    = new Set [ required_sids..., ].filter ( sid ) -> not known_sids.has sid\n  debug '^44552^', { required_sids, known_sids, missing_sids, }\n  #.........................................................................................................\n  # fetch_outlines  = SQL\"select * from outlines where fontnick = $fontnick and gid in #{V [ missing_sids..., ]};\"\n  return null\n\n  # outlines        = {}\n  # bboxes          = {}\n  for sid from missing_sids\n    { bbox\n      pd  } = drb.get_single_outline { sid, }\n    # debug '^3332^', entry\n    continue\n    urge '^3343^', to_width ( rpr d ), 108\n    known_sids.add d.gid\n    page    = append_to page, 'outlines', \"<path id='#{d.uoid}' d='#{d.pd}'/>\"\n    # debug '^3332^',\n  return null\n  #.........................................................................................................\n  fm          = drb.get_font_metrics { fontnick, }\n  page        = append_to page, 'remarks', rpr fm\n  #.........................................................................................................\n  ### Part I: insert unscaled outlines ###\n  insert_outlines = ( page ) ->\n    unscaled_outlines = []\n    for gid in gids\n      outline = drb.get_single_outline { fontnick, gid, }\n      uoid    = \"o#{gid}#{fontnick}\"\n      page    = append_to page, 'outlines', \"<path id='#{uoid}' d='#{outline.pd}'/>\"\n    return page\n  #.........................................................................................................\n  ### Part II: insert outline refs (the typesetting proper so to speak) ###\n  insert_content = ( page ) ->\n    content = []\n    x0      = 0\n    y0      = 50\n    swdth   = 0.25 # stroke width in mm\n    swdth  *= 1000 * size_mm * scale\n    page    = append_to page, 'content', \"<g transform='translate(#{x0} #{y0}) scale(#{scale_txt})'>\"\n    # page    = append_to page, 'content', \"<rect class='typeframe' x='0' y='-800' width='10000' height='1000'/>\"\n    page    = append_to page, 'content', \"<line class='fontmetric' stroke-width='#{swdth}' x1='0' y1='#{fm.ascender}' x2='10000' y2='#{fm.ascender}'/>\"\n    page    = append_to page, 'content', \"<line class='fontmetric' stroke-width='#{swdth}' x1='0' y1='#{fm.descender}' x2='10000' y2='#{fm.descender}'/>\"\n    page    = append_to page, 'content', \"<line class='fontmetric' stroke-width='#{swdth}' x1='0' y1='#{fm.x_height}' x2='10000' y2='#{fm.x_height}'/>\"\n    page    = append_to page, 'content', \"<line class='fontmetric' stroke-width='#{swdth}' x1='0' y1='#{fm.capital_height}' x2='10000' y2='#{fm.capital_height}'/>\"\n    for xxx in arrangement\n      gid     = xxx.gid\n      uoid    = \"o#{gid}#{fontnick}\"\n      x       = Math.round xxx.x\n      y       = Math.round xxx.y\n      if y != 0 then  element = \"<use href='##{uoid}' x='#{x}' y='#{y}'/>\"\n      else            element = \"<use href='##{uoid}' x='#{x}'/>\"\n      page    = append_to page, 'content', element\n    page    = append_to page, 'content', \"</g>\"\n    return page\n  #.........................................................................................................\n  page = insert_outlines  page\n  page = insert_content   page\n  FS.writeFileSync target_path, page\n  #.........................................................................................................\n  return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # await @demo_store_outlines()\n  # await @demo_store_outlines { set_id: 'all', }\n  await @demo_typeset_sample_page { set_id: 'small-eg8i', }\n  # await @demo_typeset_sample_page { set_id: 'small-aleo', }\n  # await @demo_typeset_sample_page { set_id: 'widechrs', }\n  # await @demo_typeset_sample_page { set_id: 'small-djvsi', }\n  # await @demo_use_linked_rustybuzz_wasm()\n\n\n"
  ]
}