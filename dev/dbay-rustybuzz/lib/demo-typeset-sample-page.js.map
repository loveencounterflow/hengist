{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-typeset-sample-page.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/DEMOS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\n# H                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n# MMX                       = require '../../../apps/multimix/lib/cataloguing'\nRBW                       = require 'rustybuzz-wasm'\nH                         = require './helpers'\n{ DBay }                  = require H.dbay_path\n{ Drb }                   = require H.drb_path\ntemplate_path             = PATH.resolve PATH.join __dirname, '../../../assets/dbay-rustybuzz/demo-typeset-sample-page.template.html'\ncm_grid_path              = PATH.resolve PATH.join __dirname, '../../../assets/dbay-rustybuzz/demo-typeset-sample-cmgrid.svg'\ntarget_path               = PATH.resolve PATH.join __dirname, '../../../apps-typesetting/html+svg-demos/demo-typeset-sample-page.output.html'\nui_font_path              = PATH.resolve PATH.join __dirname, '../../../apps-typesetting/iosevka-medium.woff2.data-uri'\n{ to_width }              = require 'to-width'\nITXT                      = require 'intertext'\n\n\n#-----------------------------------------------------------------------------------------------------------\nXXX_show_clusters = ( text, ads ) ->\n  ### This is probably based on a misunderstanding of what `rustybuzz` means by 'cluster';\n  see https://docs.rs/rustybuzz/0.4.0/rustybuzz/struct.GlyphInfo.html ###\n  for d, d_idx in ads\n    cur_bidx  = d.bidx\n    nxt_bidx  = ads[ d_idx + 1 ]?.bidx ? ads.length\n    cur_text  = text[ cur_bidx ... nxt_bidx ]\n    info '^4448^', rpr cur_text\n  help '^4448^', rpr text\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nappend_remarks = ( cfg ) ->\n  { drb, dsk, fontnick, } = cfg\n  fm              = drb.get_fontmetrics { fontnick, }\n  drb.mrg.append_to_loc { dsk, locid: 'remarks', text: \"<div>fm: #{rpr fm}</div>\", }\n  # missing_txt     = ( rpr ad.chrs for ad in missing_chrs ).join ', '\n  # 'remarks', \"<div>missing_chrs: #{missing_txt}</div>\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nappend_grid = ( cfg ) ->\n  { drb\n    dsk   } = cfg\n  grid_txt  = FS.readFileSync cm_grid_path, { encoding: 'utf-8', }\n  drb.mrg.append_to_loc { dsk, locid: 'grid', text: grid_txt, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nappend_title = ( cfg ) ->\n  { drb\n    dsk\n    title } = cfg\n  drb.mrg.append_to_loc { dsk, locid: 'title_page',     text: title, }\n  drb.mrg.append_to_loc { dsk, locid: 'title_heading',  text: title, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n_escape_syms = ( text ) ->\n  R = text\n  R = R.replace /\\xad/g,   '&shy;'\n  R = R.replace /\\u200b/g, '&wbr;'\n  return R\n#-----------------------------------------------------------------------------------------------------------\n_escape_for_html_text = ( text ) -> ( ( text ? '' ).replace /&/g, '&amp;' ).replace /</g, '&lt;'\n\n#-----------------------------------------------------------------------------------------------------------\n_escape_for_html_comment = ( text ) ->\n  R = text ? ''\n  R = R.replace /-/g,  '&hhy;'\n  R = R.replace /\\n/g, '\\\\n'\n  R = R.replace /\\r/g, '\\\\r'\n  # R = R.replace /\\b/g, '\\\\b'\n  R = R.replace /\\t/g, '\\\\t'\n  R = R.replace /\\v/g, '\\\\v'\n  R = R.replace /\\f/g, '\\\\f'\n  R = R.replace /\\x20/g, '&spc;'\n  R = R.replace /\\p{C}|\\p{Z}/ug, ( $0 ) -> \"&#x#{( $0.codePointAt 0 ).toString 16 };\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nappend_outlines = ( cfg ) ->\n  { drb, dsk, fontnick, size_mm, mm_p_u, missing_sid, } = cfg\n  fm          = drb.get_fontmetrics { fontnick, }\n  swdth       = 0.5 # stroke width in mm\n  swdth      *= 1000 * size_mm * mm_p_u\n  owdth       = 3 * swdth\n  top         = fm.ascender  - owdth\n  bottom      = fm.descender + owdth\n  left        = Math.round owdth * 0.5\n  right       = Math.round 1000 - owdth * 0.5\n  # debug '^432433^', 2\n  for od from drb.db SQL\"select * from outlines;\"\n    # continue if od.gid is missing.gid\n    ### TAINT use standard method ###\n    chrs_txt  = _escape_for_html_comment od.chrs\n    drb.mrg.append_to_loc { dsk, locid: 'outlines', text: \"<!--#{chrs_txt}-->#{od.gd}\", }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n_append_fontmetrics = ( cfg ) ->\n  { drb, dsk, fontnick, size_mm, mm_p_u, } = cfg\n  fm      = drb.get_fontmetrics { fontnick, }\n  swdth   = 0.25 # stroke width in mm\n  swdth  *= 1000 * size_mm * mm_p_u\n  drb.mrg.append_to_loc { dsk, locid: 'content', text: \"<line class='fontmetric' stroke-width='#{swdth}' x1='0' y1='#{fm.ascender}' x2='10000' y2='#{fm.ascender}'/>\",              }\n  drb.mrg.append_to_loc { dsk, locid: 'content', text: \"<line class='fontmetric' stroke-width='#{swdth}' x1='0' y1='#{fm.descender}' x2='10000' y2='#{fm.descender}'/>\",            }\n  drb.mrg.append_to_loc { dsk, locid: 'content', text: \"<line class='fontmetric' stroke-width='#{swdth}' x1='0' y1='0' x2='10000' y2='0'/>\",                                        }\n  drb.mrg.append_to_loc { dsk, locid: 'content', text: \"<line class='fontmetric' stroke-width='#{swdth}' x1='0' y1='#{fm.x_height}' x2='10000' y2='#{fm.x_height}'/>\",              }\n  drb.mrg.append_to_loc { dsk, locid: 'content', text: \"<line class='fontmetric' stroke-width='#{swdth}' x1='0' y1='#{fm.capital_height}' x2='10000' y2='#{fm.capital_height}'/>\",  }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nappend_content = ( cfg ) ->\n  { drb, dsk, fontnick, x0, y0, width_mm, size_mm, mm_p_u, mm_p_u_txt, text, missing_sid, } = cfg\n  { specials  } = drb.constructor.C\n  { missing   } = specials\n  ### TAINT add to cfg type ###\n  fm            = drb.get_fontmetrics { fontnick, }\n  cfg.skip_shy_etc  ?= false\n  cfg.skip_ws       ?= false\n  drb.mrg.append_to_loc { dsk, locid: 'textcontainer', text: \"<div style='left:#{x0}mm;top:#{y0 - size_mm}mm;'>#{text}</div>\", }\n  # for ad in ads\n  #   urge '^3980^', ad\n  line_y0       = 20\n  line_y_delta  = 10\n  line_y        = line_y0 - line_y_delta\n  doc           = 1\n  par           = 1\n  #.........................................................................................................\n  lnr_1         = 1\n  ### TAINT use API ###\n  ### TAINT use field `rnr` to determine where to stop ###\n  lnr_2         = drb.db.single_value SQL\"\"\"\n    select\n        max( lnr ) as lnr_2\n      from #{drb.cfg.schema}.lines\n      where true\n        and ( doc = $doc )\n        and ( par = $par );\"\"\", { doc, par, }\n  for lnr in [ lnr_1 .. lnr_2 ]\n    drb.mrg.append_to_loc {\n      dsk,\n      locid: 'content',\n      text:  \"<g transform='translate(#{x0} #{line_y}) scale(#{mm_p_u_txt})'>\", }\n    line_text = ''\n    line_y    = line_y0 + ( line_y_delta * ( lnr - 1 ) )\n    for ad from drb.db SQL\"\"\"\n      select\n          a.sid     as sid,\n          a.chrs    as chrs,\n          a.dx      as dx,\n          a.dy      as dy,\n          l.x       as x,\n          l.y       as y,\n          l.lnr     as lnr,\n          l.ads_id  as ads_id\n        from #{drb.cfg.schema}.line_ads as l\n        left join #{drb.cfg.schema}.ads as a on ( l.ads_id = a.id )\n        where true\n          and ( l.doc = $doc )\n          and ( l.par = $par )\n          and ( l.lnr = $lnr )\n        order by a.b1;\"\"\", { doc, par, lnr, }\n      # debug '^6684048^', ad\n      line_text  += ad.chrs ? ''\n      chrs_ctxt   = _escape_for_html_comment ad.chrs\n      if ad.gid is missing.gid\n        ### TAINT use standard method ###\n        chrs_htxt = _escape_for_html_text ad.chrs\n        relwdth   = ad.dx / 1000 ### relative width of missing outline rectangle ###\n        element   = \"\"\"<!--#{chrs_ctxt}--><use href='##{missing_sid}' class='missing' transform='translate(#{ad.x} #{ad.y}) scale(#{relwdth} 1)'/>\\\n          <text class='missing-chrs' style='font-size:1000px;transform:skew(#{fm.angle}deg)' x='#{ad.x}' y='#{ad.y}'>#{chrs_htxt}</text>\"\"\"\n      else\n        if ad.y is 0 then element = \"<!--#{chrs_ctxt}--><use href='##{ad.sid}' x='#{ad.x}'/>\"\n        else              element = \"<!--#{chrs_ctxt}--><use href='##{ad.sid}' x='#{ad.x}' y='#{ad.y}'/>\"\n      drb.mrg.append_to_loc { dsk, locid: 'content', text: element, }\n    drb.mrg.append_to_loc { dsk, locid: 'content', text: \"</g>\", }\n    info '^43487^', { doc, par, lnr, }, rpr line_text\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# append_used_outlines_overview = ( page ) ->\n#   x0      = 0\n#   y0      = 70\n#   swdth   = 0.25 # stroke width in mm\n#   swdth  *= 1000 * size_mm * mm_p_u\n#   page    = drb.mrg.append_to_loc { dsk, locid: 'content', text: \"<g transform='translate(#{x0} #{y0}) scale(#{mm_p_u_txt})'>\", }\n#   dx      = 1000 * 100 * mm_p_u\n#   x       = -dx\n#   for od from db SQL\"select * from drb.outlines where fontnick = $fontnick order by sid;\", { fontnick, }\n#     x    += dx\n#     page  = drb.mrg.append_to_loc { dsk, locid: 'content', text: \"<!--#{od.chrs}--><use href='##{od.sid}' x='#{x}'/>\", }\n#   page = drb.mrg.append_to_loc { dsk, locid: 'content', text: \"</g>\", }\n#   return page\n\n#-----------------------------------------------------------------------------------------------------------\nwrite_output = ( cfg ) ->\n  { drb\n    dsk } = cfg\n  page    = drb.mrg.get_text { dsk, keep_locs: false, }\n  FS.writeFileSync target_path, page\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_typeset_sample_page = ( cfg ) ->\n  defaults        = { set_id: 'medium-eg8i', }\n  cfg             = { defaults..., cfg..., }\n  { set_id }      = cfg\n  ### NOTE: for testing we want to use the most recent `rustybuzz-wasm`: ###\n  RBW             = require '../../../apps/rustybuzz-wasm/pkg'\n  { Tbl, }        = require '../../../apps/icql-dba-tabulate'\n  db              = new DBay { path: '/dev/shm/typesetting-1.sqlite', }\n  dtab            = new Tbl { db, }\n  drb             = new Drb { db, rebuild: true, RBW, }\n  dsk             = 'demo'\n  ui_font_data    = FS.readFileSync ui_font_path, { encoding: 'utf-8', }\n  drb.mrg.register_dsk        { dsk, path: template_path, }\n  drb.mrg.refresh_datasource  { dsk, }\n  drb.mrg.append_to_loc       { dsk, locid: 'ui_font_data',  text: ui_font_data, }\n  doc             = 1\n  par             = 1\n  #.........................................................................................................\n  { I, L, V }     = db.sql\n  #.........................................................................................................\n  { text\n    chrs\n    cgid_map\n    fontnick\n    fspath      } = H.settings_from_set_id set_id\n  #---------------------------------------------------------------------------------------------------------\n  text            = drb.prepare_text {\n    text\n    entities:         true\n    ncrs:             true\n    hyphenate:        true\n    newlines:         true\n    uax14:            true\n    trim:             true\n    chomp:            true }\n  #---------------------------------------------------------------------------------------------------------\n  width_mm        = 100\n  size_mm         = 10\n  mm_p_u          = size_mm / 1000 # mm per unit as valid inside scaled `<g>` line element\n  mm_p_u_txt      = mm_p_u.toFixed 4\n  { specials    } = Drb.C\n  { missing     } = specials\n  missing_sid     = drb._get_sid { fontnick, gid: missing.gid, }\n  known_ods       = { [missing_sid]: { gid: missing.gid, sid: missing_sid, fontnick, }, }\n  #.........................................................................................................\n  ### Register, load and prepopulate font: ###\n  drb.register_fontnick { fontnick, fspath, } if fspath?\n  drb.prepare_font      { fontnick, }\n  drb.arrange           { fontnick, text, doc, par, }\n  drb.distribute        { doc, par, mm_p_u, width_mm, size_mm, }\n  drb.compose           { fontnick, text, doc, par, }\n  append_remarks        { drb, dsk, fontnick, }\n  append_grid           { drb, dsk, }\n  append_title          { drb, dsk, title: \"DBay Rustybuzz Typesetting Demo\", }\n  #.........................................................................................................\n  x0    = 0\n  y0    = 50\n  append_outlines { drb, dsk, fontnick, size_mm, mm_p_u, missing_sid, known_ods, }\n  append_content  { drb, dsk, fontnick, x0, y0, width_mm, size_mm, mm_p_u, mm_p_u_txt, text, missing_sid, }\n  # page  = _append_fontmetrics { drb, page, fontnick, size_mm, mm_p_u, }\n  #.........................................................................................................\n  write_output { drb, dsk, }\n  console.table db.all_rows SQL\"\"\"\n    select\n        fontnick,\n        gid,\n        sid,\n        chrs,\n        x,\n        y,\n        x1,\n        y1,\n        olt,\n        substring( gd, 1, 12 ) as gd\n        -- gd\n      from outlines\n      order by chrs;\"\"\"\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_glyfgrid = ( cfg ) ->\n  defaults        = { fontnick: 'b42', fspath: null, gid_1: 1, gid_2: 100, }\n  cfg             = { defaults..., cfg..., }\n  { fontnick\n    fspath\n    gid_1\n    gid_2    }    = cfg\n  width_mm        = 100\n  size_mm         = 10\n  mm_p_u          = size_mm / 1000 # mm per unit as valid inside scaled `<g>` line element\n  mm_p_u_txt      = mm_p_u.toFixed 4\n  ### NOTE: for testing we want to use the most recent `rustybuzz-wasm`: ###\n  # { Tbl, }        = require '../../../apps/icql-dba-tabulate'\n  db              = new DBay { path: '/dev/shm/typesetting-1.sqlite', }\n  drb             = new Drb { db, rebuild: true, RBW, path: '/dev/shm/typesetting-2.sqlite', }\n  # dtab            = new Tbl { db, }\n  page            = FS.readFileSync template_path, { encoding: 'utf-8', }\n  append_grid     { drb, dsk, }\n  { I, L, V }     = db.sql\n  #.........................................................................................................\n  drb.register_fontnick { fontnick, fspath, } if fspath?\n  drb.prepare_font      { fontnick, }\n  #.........................................................................................................\n  drb.mrg.append_to_loc { dsk, locid: 'content', text: \"<g transform='translate(#{0} #{10}) scale(#{mm_p_u_txt})'>\", }\n  #.........................................................................................................\n  for gid in [ gid_1 .. gid_2 ]\n    { bbox\n      gd    }   = drb.get_single_outline { gid, fontnick, }\n    { x,  y,\n      x1, y1, } = bbox\n    sid         = drb._get_sid { fontnick, gid, }\n    px          = ( gid %% 10 ) / mm_p_u * size_mm\n    py          = ( gid // 10 ) / mm_p_u * size_mm\n    tx          = px + ( ( 0.5 * size_mm ) / mm_p_u )\n    ty          = py - ( ( 0.7 * size_mm ) / mm_p_u )\n    drb.mrg.append_to_loc { dsk, locid: 'outlines', text: \"<path id='#{sid}' d='#{gd}'/>\",                                }\n    drb.mrg.append_to_loc { dsk, locid: 'content',  text: \"<use href='##{sid}' x='#{px}' y='#{py}'/>\",                    }\n    drb.mrg.append_to_loc { dsk, locid: 'content',  text: \"<text class='glyfgridgid' x='#{tx}' y='#{ty}'>#{gid}</text>\",  }\n  #.........................................................................................................\n  drb.mrg.append_to_loc { dsk, locid: 'content', text: \"</g>\", }\n  FS.writeFileSync target_path, page\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @demo_typeset_sample_page { set_id: 'affirm-b42', }\n  # @demo_typeset_sample_page { set_id: 'missing-t-b42', }\n  # @demo_typeset_sample_page { set_id: 'medium-eg12i', }\n  # @demo_typeset_sample_page { set_id: 'typo-b42', }\n  # @demo_typeset_sample_page { set_id: 'gaga-b42', }\n  # @demo_typeset_sample_page { set_id: 'medium-n1518', }\n  # @demo_typeset_sample_page { set_id: 'shorties-b42', }\n  # @demo_typeset_sample_page { set_id: 'shorties-eg8i', }\n  # @demo_typeset_sample_page { set_id: 'specials-eg8i', }\n  # @demo_typeset_sample_page { set_id: 'twolines-eg8i', }\n  # @demo_typeset_sample_page { set_id: 'typo-b36', }\n  @demo_typeset_sample_page { set_id: 'typo-gr', }\n  # @demo_typeset_sample_page { set_id: 'small-eg8i', }\n  # @demo_typeset_sample_page { set_id: 'egypt-eg12i', }\n  # @demo_typeset_sample_page { set_id: 'egypt-b42', }\n  # @demo_store_outlines()\n  # @demo_store_outlines { set_id: 'all', }\n  # @demo_typeset_sample_page { set_id: 'small-eg12i', }\n  # @demo_typeset_sample_page { set_id: 'small-b42', }\n  # @demo_typeset_sample_page { set_id: 'apollo-b42', }\n  # @demo_glyfgrid { fontnick: 'b42', gid_1: 0, gid_2: 599, }\n  # @demo_typeset_sample_page { set_id: 'medium-eg8i', }\n  # @demo_typeset_sample_page { set_id: 'longwords-eg12i', }\n  # @demo_typeset_sample_page { set_id: 'short-eg12i', }\n  # @demo_typeset_sample_page { set_id: 'medium-b42', }\n  # @demo_typeset_sample_page { set_id: 'uppercasehyphen-eg12i', }\n  # @demo_typeset_sample_page { set_id: 'memphis-b42', }\n  # @demo_typeset_sample_page { set_id: 'small-arya', }\n  # @demo_typeset_sample_page { set_id: 'small-aleo', }\n  # @demo_typeset_sample_page { set_id: 'widechrs', }\n  # @demo_typeset_sample_page { set_id: 'tibetan', }\n  # @demo_typeset_sample_page { set_id: 'arabic', }\n  # @demo_typeset_sample_page { set_id: 'urdu', }\n  # @demo_typeset_sample_page { set_id: 'small-djvsi', }\n  # @demo_use_linked_rustybuzz_wasm()\n\n\n"
  ]
}