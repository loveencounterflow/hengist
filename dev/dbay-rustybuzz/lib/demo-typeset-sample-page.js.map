{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-typeset-sample-page.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/DEMOS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\n# H                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n# MMX                       = require '../../../apps/multimix/lib/cataloguing'\nRBW                       = require 'rustybuzz-wasm'\nH                         = require './helpers'\n{ DBay }                  = require H.dbay_path\n{ Drb }                   = require H.drb_path\ntemplate_path             = PATH.resolve PATH.join __dirname, '../../../assets/dbay-rustybuzz/demo-typeset-sample-page.template.html'\ntarget_path               = PATH.resolve PATH.join __dirname, '../../../apps-typesetting/html+svg-demos/demo-typeset-sample-page.output.html'\n{ to_width }              = require 'to-width'\n\n\n#-----------------------------------------------------------------------------------------------------------\nXXX_show_clusters = ( text, ads ) ->\n  ### This is probably based on a misunderstanding of what `rustybuzz` means by 'cluster';\n  see https://docs.rs/rustybuzz/0.4.0/rustybuzz/struct.GlyphInfo.html ###\n  for d, d_idx in ads\n    cur_bidx  = d.bidx\n    nxt_bidx  = ads[ d_idx + 1 ]?.bidx ? ads.length\n    cur_text  = text[ cur_bidx ... nxt_bidx ]\n    info '^4448^', rpr cur_text\n  help '^4448^', rpr text\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\nappend_to = ( page, name, text ) ->\n  text = rpr text unless isa.text text\n  echo ( CND.reverse CND.grey to_width name, 15 ) + ( CND.reverse CND.gold ' ' + to_width text, 108 )\n  marker = \"<!--?#{name}-end?-->\"\n  return page.replace marker, '\\n' + text.toString() + marker\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_typeset_sample_page = ( cfg ) ->\n  defaults        = { set_id: 'small-eg8i', }\n  cfg             = { defaults..., cfg..., }\n  { set_id }      = cfg\n  ### NOTE: for testing we want to use the most recent `rustybuzz-wasm`: ###\n  RBW             = require '../../../apps/rustybuzz-wasm/pkg'\n  { Tbl, }        = require '../../../apps/icql-dba-tabulate'\n  db              = new DBay { path: '/dev/shm/typesetting-1.sqlite', }\n  drb             = new Drb { db, rebuild: true, RBW, path: '/dev/shm/typesetting-2.sqlite', }\n  dtab            = new Tbl { db, }\n  page            = FS.readFileSync template_path, { encoding: 'utf-8', }\n  { I, L, V }     = db.sql\n  #.........................................................................................................\n  { text\n    chrs\n    cgid_map\n    fontnick\n    fspath      } = H.settings_from_set_id set_id\n  size_mm         = 10\n  scale           = size_mm / 1000\n  scale_txt       = scale.toFixed 4\n  #.........................................................................................................\n  ### Register, load and prepopulate font: ###\n  drb.register_fontnick { fontnick, fspath, }\n  drb.prepare_font      { fontnick, }\n  #.........................................................................................................\n  ### Shape text, which gives us positions, GIDs/SIDs, and the characters corresponding to each outline. The\n  `required_ads` maps from SIDs to arrangement data items (ADs): ###\n  ads                   = drb.shape_text { fontnick, text, }\n  required_ads          = {}\n  required_ads[ d.sid ] = d for d in ads\n  known_ods             = {}\n  #.........................................................................................................\n  debug '^3343-1^', \"required_ads:\", ( Object.keys required_ads ).length\n  debug '^3343-2^', \"known_ods:   \", ( Object.keys known_ods ).length\n  #.........................................................................................................\n  fm          = drb.get_font_metrics { fontnick, }\n  page        = append_to page, 'remarks', rpr fm\n  do =>\n    required_sids = Object.keys required_ads\n    for od from db SQL\"\"\"\n      select\n          *\n        from outlines\n        where sid in #{V required_sids};\"\"\"\n      known_ods[ od.sid ] = od\n      delete required_ads[ od.sid ]\n    return null\n  #.........................................................................................................\n  ### Retrieve (from font) and insert (into DB) missing outline data (ODs) items: ###\n  do =>\n    cgid_map      = drb._get_cgid_map_from_ads ads\n    for od from drb.insert_and_walk_outlines { fontnick, cgid_map, }\n      delete required_ads[ od.sid ]\n      known_ods[ od.sid ] = od\n  #.........................................................................................................\n  debug '^3343-3^', \"required_ads:\", ( Object.keys required_ads ).length\n  debug '^3343-4^', \"known_ods:   \", ( Object.keys known_ods ).length\n  #.........................................................................................................\n  ### `append_outlines()`: ###\n  append_outlines = ( page ) ->\n    for sid, od of known_ods\n      ### TAINT not safe to use unescaped `chrs` inside XML comment ###\n      page = append_to page, 'outlines', \"<!--#{od.chrs}--><path id='#{sid}' d='#{od.pd}'/>\"\n    return page\n  #.........................................................................................................\n  append_content = ( page ) ->\n    x0      = 0\n    y0      = 50\n    swdth   = 0.25 # stroke width in mm\n    swdth  *= 1000 * size_mm * scale\n    page    = append_to page, 'content', \"<g transform='translate(#{x0} #{y0}) scale(#{scale_txt})'>\"\n    # page    = append_to page, 'content', \"<rect class='typeframe' x='0' y='-800' width='10000' height='1000'/>\"\n    page    = append_to page, 'content', \"<line class='fontmetric' stroke-width='#{swdth}' x1='0' y1='#{fm.ascender}' x2='10000' y2='#{fm.ascender}'/>\"\n    page    = append_to page, 'content', \"<line class='fontmetric' stroke-width='#{swdth}' x1='0' y1='#{fm.descender}' x2='10000' y2='#{fm.descender}'/>\"\n    page    = append_to page, 'content', \"<line class='fontmetric' stroke-width='#{swdth}' x1='0' y1='#{fm.x_height}' x2='10000' y2='#{fm.x_height}'/>\"\n    page    = append_to page, 'content', \"<line class='fontmetric' stroke-width='#{swdth}' x1='0' y1='#{fm.capital_height}' x2='10000' y2='#{fm.capital_height}'/>\"\n    for ad in ads\n      if ad.y is 0 then element = \"<!--#{ad.chrs}--><use href='##{ad.sid}' x='#{ad.x}'/>\"\n      else              element = \"<!--#{ad.chrs}--><use href='##{ad.sid}' x='#{ad.x}' y='#{ad.y}'/>\"\n      page  = append_to page, 'content', element\n    page = append_to page, 'content', \"</g>\"\n    return page\n  #.........................................................................................................\n  append_overview = ( page ) ->\n    x0      = 0\n    y0      = 70\n    swdth   = 0.25 # stroke width in mm\n    swdth  *= 1000 * size_mm * scale\n    page    = append_to page, 'content', \"<g transform='translate(#{x0} #{y0}) scale(#{scale_txt})'>\"\n    dx      = 1000 * 100 * scale\n    x       = -dx\n    for od from db SQL\"select * from drb.outlines where fontnick = $fontnick order by sid;\", { fontnick, }\n      x    += dx\n      page  = append_to page, 'content', \"<!--#{od.chrs}--><use href='##{od.sid}' x='#{x}'/>\"\n    page = append_to page, 'content', \"</g>\"\n    return page\n  #.........................................................................................................\n  page  = append_outlines page\n  page  = append_content  page\n  page  = append_overview page\n  #.........................................................................................................\n  FS.writeFileSync target_path, page\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  # await @demo_store_outlines()\n  # await @demo_store_outlines { set_id: 'all', }\n  # await @demo_typeset_sample_page { set_id: 'small-eg8i', }\n  # await @demo_typeset_sample_page { set_id: 'small-aleo', }\n  # await @demo_typeset_sample_page { set_id: 'widechrs', }\n  # await @demo_typeset_sample_page { set_id: 'tibetan', }\n  await @demo_typeset_sample_page { set_id: 'arabic', }\n  # await @demo_typeset_sample_page { set_id: 'small-djvsi', }\n  # await @demo_use_linked_rustybuzz_wasm()\n\n\n"
  ]
}