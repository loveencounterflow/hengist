{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sundry.tests.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,wBAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR,EAhB5B;;;EAkBA,CAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,MADF,EAEE,OAFF,EAGE,QAHF,EAIE,gBAJF,CAAA,GAI4B,KAAK,CAAC,MAAN,CAAA,CAJ5B;;EAKA,GAAA,GAA4B,MAAM,CAAC;;EACnC,GAAA,GAA4B,OAAA,CAAQ,mBAAR,EA1B5B;;;;;EAgCA,IAAC,CAAE,wBAAF,CAAD,GAAgC,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAChC,QAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA;IAAE,mBAAA,GAAsB,CACpB,CAAE,CAAE,IAAF,EAAQ,IAAR,EAAc,eAAd,CAAF,EAAyC,uCAAzC,CADoB,EAEpB,CAAE,CAAE,IAAF,EAAQ,IAAR,EAAc,gBAAd,CAAF,EAAyC,0CAAzC,CAFoB,EAGpB,CAAE,CAAE,IAAF,EAAQ,IAAR,EAAc,oBAAd,CAAF,EAAyC,uCAAzC,CAHoB,EAIpB,CAAE,CAAE,IAAF,EAAQ,IAAR,EAAc,mBAAd,CAAF,EAAyC,kCAAzC,CAJoB,EAKpB,CAAE,CAAE,IAAF,EAAQ,IAAR,EAAc,SAAd,CAAF,EAAyC,KAAzC,CALoB,EAMpB,CAAE,CAAE,IAAF,EAAQ,IAAR,EAAc,aAAd,CAAF,EAAyC,WAAzC,CANoB,EAOpB,CAAE,CAAE,IAAF,EAAQ,IAAR,EAAc,iBAAd,CAAF,EAAyC,WAAzC,CAPoB;IAStB,CAAA,CAAE,IAAF,CAAA,GAAsB,OAAA,CAAQ,CAAC,CAAC,SAAV,CAAtB;IACA,CAAA,CAAE,GAAF,CAAA,GAAsB,OAAA,CAAQ,CAAC,CAAC,QAAV,CAAtB;IACA,EAAA,GAAsB,IAAI,IAAJ,CAAA;IACtB,GAAA,GAAsB,IAAI,GAAJ,CAAQ;MAAE,EAAF;MAAM,SAAA,EAAW;IAAjB,CAAR,EAZxB;;IAcE,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB;MACF,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;eAAG,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,CAAA;AAC1D,cAAA,GAAA,EAAA,SAAA,EAAA,MAAA,EAAA,IAAA;;UACM,GAAA,GAAwB,KAAK,CAAE,CAAF;UAC7B,SAAA,GAAwB,KAAK,CAAE,CAAF;UAC7B,IAAA,GAAwB,KAAK,CAAE,CAAF;UAC7B,MAAA,GAAwB,GAAG,CAAC,YAAJ,CAAiB,CAAE,GAAA,GAAF,EAAU,IAAV,CAAjB;UACxB,IAA2C,SAA3C;YAAA,MAAA,GAAwB,CAAC,CAAC,MAAF,CAAS,MAAT,EAAxB;WALN;;iBAOM,OAAA,CAAQ,MAAR;QARoD,CAAZ;MAAH,CAAjC;IADR;AAWA,wCAAO;EA1BuB,EAhChC;;;EA6DA,IAAC,CAAE,+BAAF,CAAD,GAAuC,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACvC,QAAA,GAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,mBAAA,EAAA;IAAE,mBAAA,GAAsB,CACpB,CAAE,CAAE,KAAF,EAAS,kBAAT,CAAF,EAA8C,IAA9C,CADoB,EAEpB,CAAE,CAAE,IAAF,EAAS,OAAT,CAAF,EAA8C,UAA9C,CAFoB,EAGpB,CAAE,CAAE,IAAF,EAAS,OAAT,CAAF,EAA8C,QAA9C,CAHoB,EAAxB;;IAME,GAAA,GAAsB,OAAA,CAAQ,kCAAR;IACtB,MAAA,GAAsB,QAAA,CAAE,IAAF,CAAA;AACpB,aAAO,IAAI,CAAC,OAAL,CAAa,gBAAb,EAA+B,QAAA,CAAE,EAAF,CAAA;eAAU,CAAA,GAAA,CAAA,CAAM,CAAC,EAAE,CAAC,WAAH,CAAe,CAAf,CAAD,CAAkB,CAAC,QAAnB,CAA4B,EAA5B,CAAN,EAAA;MAAV,CAA/B;IADa,EAPxB;;IAUE,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB;MACF,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;eAAG,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,CAAA;AAC1D,cAAA,SAAA,EAAA,MAAA,EAAA,IAAA;;UACM,SAAA,GAAwB,KAAK,CAAE,CAAF;UAC7B,IAAA,GAAwB,KAAK,CAAE,CAAF;UAC7B,MAAA,GAAwB,GAAG,CAAC,WAAJ,CAAgB,IAAhB;UACxB,IAAyC,SAAzC;YAAA,MAAA,GAAwB,MAAA,CAAO,MAAP,EAAxB;WAJN;;iBAMM,OAAA,CAAQ,MAAR;QAPoD,CAAZ;MAAH,CAAjC;IADR;AAUA,wCAAO;EArB8B,EA7DvC;;;EAqFA,IAAC,CAAE,0CAAF,CAAD,GAAkD,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA,EAAA;;AAClD,QAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,YAAA,EAAA,aAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,IAAA,EAAA,QAAA;;;IAEE,aAAA,GAAgB,QAAA,CAAE,IAAF,CAAA;AAClB,UAAA,IAAA,EAAA;MAAI,IAAA,GAAO,OAAA,CAAQ,WAAR;MACP,CAAA,GAAI;MACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,GAAjB;MACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,WAAV,EAAuB,GAAvB;MACJ,CAAA,GAAI,IAAI,CAAC,IAAI,CAAC,SAAV,CAAoB,CAApB;MACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,QAAV,EAAoB,MAApB;MACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,QAAV,EAAoB,QAApB,EANR;;AAQI,aAAO;IATO;IAWhB,YAAA,GAA4B,QAAA,CAAE,IAAF,CAAA;AAC9B,UAAA;MAAI,CAAA,GAAI;MACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,OAAV,EAAqB,OAArB;MACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,SAAV,EAAqB,OAArB;AACJ,aAAO;IAJmB;IAK5B,MAAA,GAAsB,QAAA,CAAE,IAAF,CAAA;AACpB,aAAO,IAAI,CAAC,OAAL,CAAa,gBAAb,EAA+B,QAAA,CAAE,EAAF,CAAA;eAAU,CAAA,GAAA,CAAA,CAAM,CAAC,EAAE,CAAC,WAAH,CAAe,CAAf,CAAD,CAAkB,CAAC,QAAnB,CAA4B,EAA5B,CAAN,EAAA;MAAV,CAA/B;IADa;IAEtB,OAAA,GAAsB;IACtB,CAAA,CAAE,IAAF,CAAA,GAAsB,OAAA,CAAQ,CAAC,CAAC,SAAV,CAAtB;IACA,CAAA,CAAE,GAAF,CAAA,GAAsB,OAAA,CAAQ,CAAC,CAAC,QAAV,CAAtB;IACA,EAAA,GAAsB,IAAI,IAAJ,CAAA;IACtB,GAAA,GAAsB,IAAI,GAAJ,CAAQ;MAAE,EAAF;MAAM,SAAA,EAAW;IAAjB,CAAR,EAxBxB;;IA0BE,IAAA,GAAsB;IACtB,IAAA,GAAsB,aAAA,CAAc,IAAd;IACtB,QAAA,GAAsB,MAAM,CAAC,IAAP,CAAY,IAAZ;IACtB,IAAA,GAAsB,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,GAAG,CAAC,yBAAR,CAAkC,IAAlC,CAAX;IACtB,KAAA,kDAAA;;MACE,IAAa,iCAAb;AAAA,cAAA;;MACA,IAAA,GAAO,QAAQ,oBAAmB,CAAC,QAA5B,CAAqC,OAArC;MACP,IAAA,GAAO,YAAA,CAAa,IAAb;MACP,IAAA,CAAK,QAAL,EAAe,CAAE,GAAF,EAAO,OAAP,CAAf,EAAkC,GAAA,CAAI,IAAJ,CAAlC;IAJF;IAKA,KAAA;;AAAU;MAAA,KAAA,oDAAA;;qBAAE,QAAQ,wDAAsC,CAAC,QAA/C,CAAwD,OAAxD;MAAF,CAAA;;;IACV,IAAA,CAAK,GAAA,CAAI,QAAA,GAAW,KAAK,CAAC,IAAN,CAAW,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,GAA1C,CAAf,CAAL;IACA,QAAA,GAAY,QAAQ,CAAC,OAAT,CAAiB,aAAjB,EAAgC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,GAA/D;IACZ,QAAA,GAAY,QAAQ,CAAC,OAAT,CAAiB,aAAjB,EAAkC,MAAlC;IACZ,QAAA,GAAY,QAAQ,CAAC,OAAT,CAAiB,aAAjB,EAAgC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,GAA/D;IACZ,QAAA,GAAY,QAAQ,CAAC,OAAT,CAAiB,UAAjB,EAA6B,EAA7B;IACZ,IAAA,CAAK,GAAA,CAAI,MAAA,CAAO,QAAP,CAAJ,CAAL;;MACA,CAAC,CAAE,EAAH,CAAM,OAAN,EAAe,MAAA,CAAO,QAAP,CAAf;KA1CF;;IA4CE,GAAA,GAAsB,OAAA,CAAQ,kCAAR;IACtB,KAAA,CAAM,QAAN,EAAgB,GAAA,CAAI,GAAG,CAAC,WAAJ,CAAgB,kBAAhB,CAAJ,CAAhB;AAMA,wCAAO;EApDyC,EArFlD;;;EAgJA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,IAAlC;;;EAhJA;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/TESTS/BASIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n# MMX                       = require '../../../apps/multimix/lib/cataloguing'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRB RBW prepare_text()\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ [ null, true, 'extraordinary',      ], 'ex&#xad;tra&#xad;or&#xad;di&#xad;nary',       ]\n    [ [ null, true, 'extra-ordinary',     ], 'ex&#xad;tra-&#x200b;or&#xad;di&#xad;nary',    ]\n    [ [ null, true, 'extra&shy;ordinary', ], 'ex&#xad;tra&#xad;or&#xad;di&#xad;nary',       ]\n    [ [ null, true, 'extra\\n\\nordinary',  ], 'ex&#xad;tra or&#xad;di&#xad;nary',            ]\n    [ [ null, true, '  xxx  ',            ], 'xxx',                                         ]\n    [ [ null, true, '&nbsp;xxx  ',        ], '&#xa0;xxx',                                   ]\n    [ [ null, true, '&nbsp;xxx\\n\\n\\n',    ], '&#xa0;xxx',                                   ]\n    ]\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  db                  = new DBay()\n  drb                 = new Drb { db, temporary: true, }\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      # [ cfg, do_reveal, text, ]  = probe\n      cfg                   = probe[ 0 ]\n      do_reveal             = probe[ 1 ]\n      text                  = probe[ 2 ]\n      result                = drb.prepare_text { cfg..., text, }\n      result                = H.reveal result if do_reveal\n      # T?.eq result, matcher\n      resolve result\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_______ DRB RBW decode_ncrs()\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ [ false, '&#x5443;&#x4e00;',  ],            '呃一', ]\n    [ [ true,  '&wbr;',             ],            '&#x200b;', ]\n    [ [ true,  '&shy;',             ],            '&#xad;', ]\n    ]\n  #.........................................................................................................\n  RBW                 = require '../../../apps/rustybuzz-wasm/pkg'\n  reveal              = ( text ) ->\n    return text.replace /[^\\x20-\\x7f]/ug, ( $0 ) -> \"&#x#{($0.codePointAt 0).toString 16};\"\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      # [ do_reveal, text, ]  = probe\n      do_reveal             = probe[ 0 ]\n      text                  = probe[ 1 ]\n      result                = RBW.decode_ncrs text\n      result                = reveal result if do_reveal\n      # T?.eq result, matcher\n      resolve result\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_______ DRB RBW finds UAX#14 breakpoints\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  ### TAINT make this a DRB method ###\n  _prepare_text = ( text ) ->\n    ITXT = require 'intertext'\n    R = text\n    R = R.replace /\\n/g, ' '\n    R = R.replace /\\x20{2,}/g, ' '\n    R = ITXT.HYPH.hyphenate R\n    R = R.replace /&shy;/g, '\\xad'\n    R = R.replace /&wbr;/g, '\\u200b'\n    # debug '^9865^', ITXT.HYPH.reveal_hyphens R, '|'; process.exit 1\n    return R\n  ### TAINT make this a DRB method ###\n  _escape_syms              = ( text ) ->\n    R = text\n    R = R.replace /\\xad/g,   '&shy;'\n    R = R.replace /\\u200b/g, '&wbr;'\n    return R\n  reveal              = ( text ) ->\n    return text.replace /[^\\x20-\\x7f]/ug, ( $0 ) -> \"&#x#{($0.codePointAt 0).toString 16};\"\n  matcher             = 'con&#xad;fir&#xad;ma&#xad;tion/&#x200b;bias pro&#xad;duc&#xad;tion a&#x200b;b this&#x200b;&#x2014;&#x200b;or that'\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  db                  = new DBay()\n  drb                 = new Drb { db, temporary: true, }\n  #.........................................................................................................\n  text                = 'confirmation/bias production a&wbr;&wbr;b this—or that'\n  text                = _prepare_text text\n  text_bfr            = Buffer.from text\n  bris                = JSON.parse drb.RBW.find_line_break_positions text\n  for bri, idx in bris\n    break unless ( nxt_bri = bris[ idx + 1 ] )?\n    part = text_bfr[ bri ... nxt_bri ].toString 'utf-8'\n    part = _escape_syms part\n    urge '^3409^', { bri, nxt_bri, }, rpr part\n  parts = ( ( text_bfr[ bri ... bris[ idx + 1 ] ? Infinity ].toString 'utf-8' ) for bri, idx in bris )\n  echo rpr new_text = parts.join drb.constructor.C.special_chrs.wbr\n  new_text  = new_text.replace /\\xad\\u200b/g, drb.constructor.C.special_chrs.shy\n  new_text  = new_text.replace /\\x20\\u200b/g,   '\\x20'\n  new_text  = new_text.replace /\\u200b{2,}/g, drb.constructor.C.special_chrs.wbr\n  new_text  = new_text.replace /\\u200b$/g, ''\n  echo rpr reveal new_text\n  T?.eq matcher, reveal new_text\n  #.........................................................................................................\n  RBW                 = require '../../../apps/rustybuzz-wasm/pkg'\n  debug '^7098^', rpr RBW.decode_ncrs '&#x5443;&#x4e00;'\n  # for name, matcher of require '../../../assets/html-character-entity-names'\n  #   entity = \"&#{name};\"\n  #   info '^5557^', entity, rpr matcher unless equals entity, matcher\n  #   # T?.eq ( RBW.decode_ncrs entity ), matcher\n  #.........................................................................................................\n  return done?()\n\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # test @[ \"DRB RBW finds UAX#14 breakpoints\" ]\n  # test @[ \"DRB RBW decode_ncrs()\" ]\n  # test @[ \"DRB RBW prepare_text()\" ]\n  # @[ \"DRB foobar\" ]()\n  # test @[ \"DRB no shared state in WASM module\" ]\n  # @[ \"DRB path compression\" ]()\n  # test @[ \"DRB can pass in custom RBW\" ]\n  # test @[ \"DRB RBW returns despaced pathdata\" ]\n\n  # test @[ \"DRB foobar\" ]\n  # test @[ \"DRB no shared state in WASM module\" ]\n  # test @[ \"___________ DRB path compression\" ]\n  # test @[ \"DRB can pass in custom RBW\" ]\n  # test @[ \"DRB RBW returns despaced pathdata\" ]\n"
  ]
}