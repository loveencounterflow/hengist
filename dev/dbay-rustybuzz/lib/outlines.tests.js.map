{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/outlines.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/OUTLINES/BASIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n# MMX                       = require '../../../apps/multimix/lib/cataloguing'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRB get_cgid_map()\" ] = ( T, done ) ->\n  # ### explicit path, explicitly temporary ###\n  # T?.halt_on_error()\n  # { DBay }            = require H.dbay_path\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  # path                = PATH.resolve DBay.C.autolocation, 'drb-23842847.sqlite'\n  # DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  chrs                = \"affirm無字\"\n  matcher             = new Map [ [ 66, 'a', ], [ 1536, 'ffi', ], [ 83, 'r', ], [ 78, 'm', ], ]\n  #.........................................................................................................\n  do =>\n    db          = new DBay()\n    drb         = new Drb { db, temporary: true, }\n    fontnick    = 'gi'\n    drb.prepare_font { fontnick, }\n    debug '^33234^', result = drb.get_cgid_map { fontnick, chrs, }\n    T?.eq ( type_of result ), 'map'\n    T?.eq result, matcher\n  #.........................................................................................................\n  do =>\n    db          = new DBay()\n    drb         = new Drb { db, temporary: true, }\n    fontnick    = 'gi'\n    drb.prepare_font { fontnick, }\n    T?.throws /not a valid dbr_get_cgid_map_cfg/, => drb.get_cgid_map { fontnick, cids: [ 42, ], }\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRB insert_outlines()\" ] = ( T, done ) ->\n  # ### explicit path, explicitly temporary ###\n  # T?.halt_on_error()\n  # { DBay }            = require H.dbay_path\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  { Tbl, }            = require '../../../apps/icql-dba-tabulate'\n  # path                = PATH.resolve DBay.C.autolocation, 'drb-23842847.sqlite'\n  # DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  chrs                = \"'ab-c'.\"\n  matcher             = new Map [ [ 116, 85 ], [ 104, 73 ], [ 101, 70 ], [ 114, 83 ], [ 39, 8 ], [ 115, 84 ], [ 32, 1 ], [ 117, 86 ], [ 98, 67 ], ]\n  #.........................................................................................................\n  do =>\n    db          = new DBay()\n    dtab        = new Tbl { db, }\n    drb         = new Drb { db, temporary: true, }\n    fontnick    = 'gi'\n    drb.prepare_font { fontnick, }\n    drb.insert_outlines { fontnick, chrs, }\n    result      = db.all_rows SQL\"select * from drb.outlines order by chrs;\"\n    for row in result\n      { pd_blob, } = guy.obj.pluck_with_fallback row, null, 'pd_blob'\n      T?.eq ( type_of pd_blob ), 'buffer'\n      if row.text is '.'\n        T?.eq row, {\n          fontnick: 'gi',\n          gid:      15,\n          sid:      'o15gi',\n          chrs:     '.',\n          x:        25,\n          y:        -101,\n          x1:       135,\n          y1:       14,\n          pd:       'M90-101C54-101 25-72 25-36C25-10 44 14 70 14C106 14 135-15 135-51C135-77 116-101 90-101Z' }\n    # T?.eq ( type_of result ), 'map'\n    # T?.eq result, matcher\n    echo dtab._tabulate db SQL\"\"\"\n      select\n          fontnick,\n          gid,\n          sid,\n          chrs,\n          x,\n          y,\n          x1,\n          y1,\n          substr( pd, 0, 10 ) as \"(pd)\"\n        from drb.outlines\n        order by chrs;\"\"\"\n  #.........................................................................................................\n  # cgid_map            = drb.get_cgid_map { fontnick, chrs, }\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRB RBW shape_text() returns coordinates acc to font upem\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  use_linked_RBW      = true\n  globalThis.info     = info\n  RBW                 = require '../../../apps/rustybuzz-wasm/pkg'\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  db                  = new DBay()\n  if use_linked_RBW\n    debug '^4445^', CND.reverse \" using linked RBW \"\n    drb                 = new Drb { db, temporary: true, RBW, }\n    T?.ok drb.RBW is RBW\n  else\n    drb                 = new Drb { db, temporary: true, }\n  #.........................................................................................................\n  result = {}\n  for set_id in [ '3a', '3b', ]\n    do =>\n      { chrs\n        cids\n        cgid_map\n        text\n        fontnick\n        fspath          } = H.settings_from_set_id set_id\n      #.....................................................................................................\n      drb.register_fontnick { fontnick, fspath, }\n      drb.prepare_font      { fontnick, }\n      drb.insert_outlines   { fontnick, cgid_map, cids, chrs, }\n      result[ fontnick ] = ( drb.shape_text { fontnick, text, } )[ 0 ]\n  #.........................................................................................................\n  T?.eq result, {\n    djvsi:\n      gid: 68,\n      b: 0,\n      x: 0,\n      y: 0,\n      dx: 596,\n      dy: 0,\n      chrs: 'a',\n      sid: 'o68djvsi'\n    eg8i:\n      gid: 66,\n      b: 0,\n      x: 0,\n      y: 0,\n      dx: 492,\n      dy: 0,\n      chrs: 'a',\n      sid: 'o66eg8i' }\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRB RBW shape_text() honors missing outlines\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  globalThis.info     = info\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  db                  = new DBay()\n  drb                 = new Drb { db, temporary: true, }\n  set_id              = 'small-eg8i'\n  text                = \"買ne 來ca\"\n  { missing }         = Drb.C\n  #.........................................................................................................\n  { chrs\n    cids\n    cgid_map\n    fontnick\n    fspath          } = H.settings_from_set_id set_id\n  missing_sid         = \"o#{missing.gid}#{fontnick}\"\n  #.....................................................................................................\n  matcher = [\n    { gid: 0, b: 0, x: 0, y: 0, dx: 1000, dy: 0, chrs: '買', sid: 'o0eg8i' }\n    { gid: 79, b: 3, x: 1000, y: 0, dx: 508, dy: 0, chrs: 'n', sid: 'o79eg8i' }\n    { gid: 70, b: 4, x: 1508, y: 0, dx: 367, dy: 0, chrs: 'e', sid: 'o70eg8i' }\n    { gid: 1, b: 5, x: 1875, y: 0, dx: 243, dy: 0, chrs: ' ', sid: 'o1eg8i', br: 'spc' }\n    { gid: 0, b: 6, x: 2118, y: 0, dx: 1000, dy: 0, chrs: '來', sid: 'o0eg8i' }\n    { gid: 68, b: 9, x: 3118, y: 0, dx: 359, dy: 0, chrs: 'c', sid: 'o68eg8i' }\n    { gid: 66, b: 10, x: 3477, y: 0, dx: 492, dy: 0, chrs: 'a', sid: 'o66eg8i' }\n    ]\n  #.....................................................................................................\n  drb.register_fontnick { fontnick, fspath, }\n  drb.prepare_font      { fontnick, }\n  drb.insert_outlines   { fontnick, cgid_map, cids, chrs, }\n  result = drb.shape_text { fontnick, text, }\n  urge '^45958^', ad.chrs, ad.sid, ad for ad in result\n  for ad, idx in result\n    help '^33443^', ad\n    urge '^33443^', matcher[ idx ]\n    if equals ad, matcher[ idx ]\n      T.ok true\n      help '^45958^', ad.chrs, ad.sid, ad\n    else\n      warn '^45958^', ad.chrs, ad.sid, ad\n      warn '^45958^', ad.chrs, ad.sid, CND.reverse matcher[ idx ]\n      T.ok false\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRB get_font_metrics()\" ] = ( T, done ) ->\n  # ### explicit path, explicitly temporary ###\n  # T?.halt_on_error()\n  # { DBay }            = require H.dbay_path\n  RBW                 = null\n  # RBW                 = require '../../../apps/rustybuzz-wasm/pkg'\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  { Tbl, }            = require '../../../apps/icql-dba-tabulate'\n  # path                = PATH.resolve DBay.C.autolocation, 'drb-23842847.sqlite'\n  # DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  matcher             =\n    ascender:           -710\n    capital_height:     -664\n    descender:          290\n    scale:              1\n    units_per_em:       1000\n    x_height:           -400\n    angle:              -17\n  #.........................................................................................................\n  db          = new DBay()\n  dtab        = new Tbl { db, }\n  drb         = new Drb { db, RBW, temporary: true, }\n  fontnick    = 'gi'\n  drb.prepare_font { fontnick, }\n  fm          = drb.get_font_metrics { fontnick, }\n  urge '^6464^', fm\n  T?.eq fm, matcher\n  #.........................................................................................................\n  # cgid_map            = drb.get_cgid_map { fontnick, chrs, }\n  return done?()\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # @[ \"DRB foobar\" ]()\n  # test @[ \"DRB no shared state in WASM module\" ]\n  # @[ \"DRB path compression\" ]()\n  # test @[ \"DRB can pass in custom RBW\" ]\n  # test @[ \"DRB get_cgid_map()\" ]\n  # @[ \"DRB insert_outlines()\" ]()\n  # test @[ \"DRB RBW shape_text() returns coordinates acc to font upem\" ]\n  test @[ \"DRB RBW shape_text() honors missing outlines\" ]\n  # test @[ \"DRB get_font_metrics()\" ]\n  # test @[ \"DRB insert_outlines()\" ]\n"
  ]
}