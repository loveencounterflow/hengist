{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/outlines.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/OUTLINES/BASIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n# MMX                       = require '../../../apps/multimix/lib/cataloguing'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRB get_cgid_map()\" ] = ( T, done ) ->\n  # ### explicit path, explicitly temporary ###\n  # T?.halt_on_error()\n  # { DBay }            = require H.dbay_path\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  # path                = PATH.resolve DBay.C.autolocation, 'drb-23842847.sqlite'\n  # DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  chrs                = \"there's the rub\"\n  cids                = ( ( chr.codePointAt 0 ) for chr in Array.from chrs )\n  matcher             = new Map [ [ 116, 85 ], [ 104, 73 ], [ 101, 70 ], [ 114, 83 ], [ 39, 8 ], [ 115, 84 ], [ 32, 1 ], [ 117, 86 ], [ 98, 67 ], ]\n  #.........................................................................................................\n  do =>\n    db          = new DBay()\n    drb         = new Drb { db, temporary: true, }\n    fontnick    = 'gi'\n    drb.prepare_font { fontnick, }\n    debug '^33234^', result = drb.get_cgid_map { fontnick, cids, }\n    T?.eq ( type_of result ), 'map'\n    T?.eq result, matcher\n  #.........................................................................................................\n  do =>\n    db          = new DBay()\n    drb         = new Drb { db, temporary: true, }\n    fontnick    = 'gi'\n    drb.prepare_font { fontnick, }\n    debug '^33234^', result = drb.get_cgid_map { fontnick, chrs, }\n    T?.eq ( type_of result ), 'map'\n    T?.eq result, matcher\n  #.........................................................................................................\n  do =>\n    db          = new DBay()\n    drb         = new Drb { db, temporary: true, }\n    fontnick    = 'gi'\n    drb.prepare_font { fontnick, }\n    T?.throws /not a valid dbr_get_cgid_map_cfg/, => drb.get_cgid_map { fontnick, cids, chrs, }\n  #.........................................................................................................\n  do =>\n    db          = new DBay()\n    drb         = new Drb { db, temporary: true, }\n    fontnick    = 'gi'\n    drb.prepare_font { fontnick, }\n    T?.throws /not a valid dbr_get_cgid_map_cfg/, => drb.get_cgid_map { fontnick, }\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRB insert_outlines()\" ] = ( T, done ) ->\n  # ### explicit path, explicitly temporary ###\n  # T?.halt_on_error()\n  # { DBay }            = require H.dbay_path\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  { Tbl, }            = require '../../../apps/icql-dba-tabulate'\n  # path                = PATH.resolve DBay.C.autolocation, 'drb-23842847.sqlite'\n  # DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  chrs                = \"'ab-c'.\"\n  cids                = ( ( chr.codePointAt 0 ) for chr in Array.from chrs )\n  matcher             = new Map [ [ 116, 85 ], [ 104, 73 ], [ 101, 70 ], [ 114, 83 ], [ 39, 8 ], [ 115, 84 ], [ 32, 1 ], [ 117, 86 ], [ 98, 67 ], ]\n  #.........................................................................................................\n  do =>\n    db          = new DBay()\n    dtab        = new Tbl { db, }\n    drb         = new Drb { db, temporary: true, }\n    fontnick    = 'gi'\n    drb.prepare_font { fontnick, }\n    drb.insert_outlines { fontnick, cids, }\n    result      = db.all_rows SQL\"select * from drb.outlines order by cid;\"\n    for row in result\n      { pd_blob, } = guy.obj.pluck_with_fallback row, null, 'pd_blob'\n      T?.eq ( type_of pd_blob ), 'buffer'\n      if row.glyph is '.'\n        T?.eq row, {\n          fontnick: 'gi',\n          gid:      15,\n          cid:      46,\n          glyph:    '.',\n          uoid:     'o15gi',\n          x:        25,\n          y:        -101,\n          x1:       135,\n          y1:       14,\n          pd:       'M90-101C54-101 25-72 25-36C25-10 44 14 70 14C106 14 135-15 135-51C135-77 116-101 90-101Z', }\n    # T?.eq ( type_of result ), 'map'\n    # T?.eq result, matcher\n    echo dtab._tabulate db SQL\"\"\"\n      select\n          fontnick,\n          gid,\n          cid,\n          glyph,\n          uoid,\n          x,\n          y,\n          x1,\n          y1,\n          substr( pd, 0, 10 ) as \"(pd)\"\n        from drb.outlines\n        order by cid;\"\"\"\n  #.........................................................................................................\n  # cgid_map            = drb.get_cgid_map { fontnick, chrs, }\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRB RBW shape_text() returns scaled coordinates\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  use_linked_RBW      = false\n  globalThis.info     = info\n  RBW                 = require '../../../apps/rustybuzz-wasm/pkg'\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  db                  = new DBay()\n  if use_linked_RBW\n    debug '^4445^', CND.reverse \" using linked RBW \"\n    drb                 = new Drb { db, temporary: true, RBW, }\n    T?.ok drb.RBW is RBW\n  else\n    drb                 = new Drb { db, temporary: true, }\n  set_id              = 'small'\n  #.........................................................................................................\n  { chrs\n    cids\n    cgid_map\n    text\n    fontnick\n    fspath          } = H.settings_from_set_id set_id\n  size_mm             = 6\n  info '^33443^', { fontnick, text, size_mm, }\n  #.........................................................................................................\n  drb.register_fontnick { fontnick, fspath, }\n  drb.prepare_font      { fontnick, }\n  drb.insert_outlines   { fontnick, cgid_map, cids, chrs, }\n  size_mm = 1;  urge '^3343^', { size_mm, }, d for d in drb.shape_text { fontnick, text, size_mm, }\n  size_mm = 10; help '^3343^', { size_mm, }, d for d in drb.shape_text { fontnick, text, size_mm, }\n  #.........................................................................................................\n  return done?()\n\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # @[ \"DRB foobar\" ]()\n  # test @[ \"DRB no shared state in WASM module\" ]\n  # @[ \"DRB path compression\" ]()\n  # test @[ \"DRB can pass in custom RBW\" ]\n  # test @[ \"DRB get_cgid_map()\" ]\n  # @[ \"DRB insert_outlines()\" ]()\n  @[ \"DRB RBW shape_text() returns scaled coordinates\" ]()\n\n"
  ]
}