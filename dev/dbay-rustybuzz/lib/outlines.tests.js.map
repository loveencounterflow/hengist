{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/outlines.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/OUTLINES/BASIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n# MMX                       = require '../../../apps/multimix/lib/cataloguing'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRB get_cgid_map()\" ] = ( T, done ) ->\n  # ### explicit path, explicitly temporary ###\n  # T?.halt_on_error()\n  # { DBay }            = require H.dbay_path\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  { Tbl, }            = require '../../../apps/icql-dba-tabulate'\n  path                = PATH.resolve DBay.C.autolocation, 'drb-23842847.sqlite'\n  # DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  db                  = new DBay()\n  drb                 = new Drb { path, db, temporary: true, }\n  dtab                = new Tbl { db, }\n  schema              = drb.cfg.schema\n  text                = \"there's the rub\"\n  matcher             = [ [ 116, 85 ], [ 104, 73 ], [ 101, 70 ], [ 114, 83 ], [ 39, 8 ], [ 115, 84 ], [ 32, 1 ], [ 117, 86 ], [ 98, 67 ], ]\n  #.........................................................................................................\n  do =>\n    fontnick    = 'gi'\n    drb.prepare_font { fontnick, }\n    cids        = ( ( chr.codePointAt 0 ) for chr in Array.from text )\n    debug '^33234^', result = drb.get_cgid_map { fontnick, cids, }\n    T?.eq ( type_of result ), 'map'\n    debug result, new Map matcher\n    debug equals result, new Map matcher\n    T?.eq [ result..., ], matcher\n  #.........................................................................................................\n  return done?()\n\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # @[ \"DRB foobar\" ]()\n  # test @[ \"DRB no shared state in WASM module\" ]\n  # @[ \"DRB path compression\" ]()\n  # test @[ \"DRB can pass in custom RBW\" ]\n  test @[ \"DRB get_cgid_map()\" ]\n\n"
  ]
}