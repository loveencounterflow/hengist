{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/DEMOS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\n# H                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n# MMX                       = require '../../../apps/multimix/lib/cataloguing'\nRBW                       = require 'rustybuzz-wasm'\nH                         = require './helpers'\ncids_from_text            = ( text ) -> ( ( chr.codePointAt 0 ) for chr in Array.from text )\nZLIB                      = require 'zlib'\n\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_store_outlines = ->\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  { Tbl, }            = require '../../../apps/icql-dba-tabulate'\n  path                = '/tmp/dbay-rustybuzz.sqlite'\n  db                  = new DBay { path, }\n  schema              = 'drb'\n  drb_cfg             =\n    db:             db\n    path:           '/dev/shm/rustybuzz.sqlite'\n    create:         true\n    schema:         schema\n  drb                 = new Drb drb_cfg\n  dtab                = new Tbl { db, }\n  # fontnick = 'jzr';   fspath = PATH.resolve PATH.join __dirname, '../../../', 'assets/jizura-fonts/jizura3b.ttf'\n  fontnick = 'djvs';  fspath = PATH.resolve PATH.join __dirname, '../../../', 'assets/jizura-fonts/DejaVuSerif.ttf'\n  # fontnick = 'qkai';  fspath = PATH.resolve PATH.join __dirname, '../../../', 'assets/jizura-fonts/cwTeXQKai-Medium.ttf'\n  drb.register_fontnick { fontnick, fspath, }\n  echo dtab._tabulate db SQL\"select * from #{schema}.outlines order by fontnick, gid;\"\n  echo dtab._tabulate db SQL\"select * from #{schema}.fontnicks order by fontnick;\"\n  whisper '^3334^', \"loading font #{rpr fontnick}...\"\n  drb.prepare_font { fontnick, }\n  whisper '^3334^', \"... done\"\n  #.........................................................................................................\n  # gid                 = drb.gids_from_cids { cids: ( cids_from_text 'O' ), fontnick, }\n  gid                 = 74\n  font_idx            = 0\n  # urge '^290^', outline = JSON.parse drb.RBW.glyph_to_svg_pathdata font_idx, gid\n  urge '^290^', { bbox, pd, } = drb.get_single_outline { fontnick, gid, }\n  #.........................................................................................................\n  ### TAINT obtain list of all valid Unicode codepoints (again) ###\n  cids                = cids_from_text \"sampletextç®—\"\n  # cids                = [ 0x0021 .. 0xd000 ]\n  # cids                = [ 0x4e00 .. 0x9fff ]\n  # cids                = [ 0x4e00 .. 0x4e02 ]\n  t0                  = Date.now()\n  gid_by_cids         = drb.gids_from_cids { cids, fontnick, }\n  t1                  = Date.now()\n  ### TAINT might want to turn this into a benchmark (or improve reporting) ###\n  debug '^324^', cids.length      + ' cids'\n  debug '^324^', gid_by_cids.size + ' gids'\n  debug '^324^', ( dt = ( t1 - t0 ) / 1000 ) + 's'\n  help '^290^',  ( rpr gid_by_cids )[ ... 200 ] + '...'\n  #.........................................................................................................\n  t0                  = Date.now()\n  drb.insert_outlines { fontnick, gid_by_cids, }\n  t1                  = Date.now()\n  debug '^324^', ( dt = ( t1 - t0 ) / 1000 ) + 's'\n  #.........................................................................................................\n  echo dtab._tabulate db SQL\"\"\"\n    select\n        fontnick,\n        gid,\n        cid,\n        glyph,\n        uoid,\n        x,\n        y,\n        x1,\n        y1,\n        substring( pd, 0, 25 ) || '...' as \"(pd)\"\n        -- substring( pd_blob, 0, 25 ) || '...' as \"(pd_blob)\"\n      from #{schema}.outlines\n      order by fontnick, gid\n      limit 100;\"\"\"\n  echo dtab._tabulate db SQL\"\"\"\n    with v1 as ( select count(*) as outline_count from #{schema}.outlines )\n    select\n      v1.outline_count / ? as \"outlines per second\"\n    from v1;\"\"\", [ dt, ]\n  return null\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @demo_text_shaping = ->\n#   me                  = @new_demo()\n#   fontnick            = 'garamond_italic'\n#   font_idx            = @register_font me, fontnick\n#   size                = 5\n#   # format              = 'short'\n#   format              = 'json'\n#   # format              = 'rusty'\n#   text                = \"a certain minimum\"\n#   text                = text.replace /#/g, me.shy\n#   cfg                 = { format, text, }\n#   arrangement         = JSON.parse RBW.shape_text cfg\n#   debug '^4455^', arrangement\n#   debug '^4455^', RBW.shape_text { format: 'rusty', text, }\n#   #.........................................................................................................\n#   urge \"glyf IDs and positions of font #{rpr fontnick} for text #{rpr text}:\"\n#   for d in arrangement\n#     goid   = @_get_glyf_outline_id       fontnick, d.gid\n#     sgoid  = @_get_sized_glyf_outline_id fontnick, d.gid, size\n#     info '^223^', goid, sgoid\n#   #.........................................................................................................\n#   urge \"unique glyf IDs in this text:\"\n#   gids                = new Set ( d.gid for d in arrangement )\n#   debug '^3344^', gids\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @demo_svg_typesetting = ->\n#   me        = @new_demo()\n#   format    = 'json' # 'short', 'rusty'\n#   #.........................................................................................................\n#   fontnick  = 'tibetan';          text =  \"à½¨à½¼à½¾à¼‹à½˜à¼‹à½Žà½²à¼‹à½”à½‘à¾¨à½ºà¼‹à½§à½±à½´à¾ƒ\"\n#   fontnick  = 'amiri';            text = ( [ \"Ø§Ù„Ø®Ø· Ø§Ù„Ø£Ù…ÛŒØ±ÛŒ\"... ].reverse() ).join ''\n#   fontnick  = 'garamond_italic';  text = \"a certain minimum\"\n#   fontnick  = 'garamond_italic';  text = \"af#fix\"\n#   #.........................................................................................................\n#   font_idx  = @register_font me, fontnick\n#   text      = text.replace /#/g, me.shy\n#   #.........................................................................................................\n#   echo \"\"\"<?xml version='1.0' encoding='UTF-8'?>\n#     <svg xmlns='http://www.w3.org/2000/svg' width='6000' height='3000' viewBox='-100 -1500 10500 1500' version='2'>\"\"\"\n#   cfg         = { format, text, }\n#   arrangement = JSON.parse RBW.shape_text cfg\n#   gids        = new Set ( d.gid for d in arrangement )\n#   debug '^3344^', gids\n#   #.........................................................................................................\n#   echo \"\"\"<style>\n#     path {\n#       stroke:                 transparent;\n#       stroke-width:           0mm;\n#       fill:                   black;; }\n#     rect {\n#       stroke:                 transparent;\n#       stroke-width:           0;\n#       fill:                   transparent; }\n#       </style>\"\"\"\n#   # echo \"\"\"<style>\n#   #   path {\n#   #     stroke:                 black;\n#   #     stroke-width:           8px;\n#   #     fill:                   #880000bd;; }\n#   #   rect {\n#   #     stroke:                 black;\n#   #     stroke-width:           3px;\n#   #     fill:                   #ffeb3b42; }\n#   #     </style>\"\"\"\n#   #.........................................................................................................\n#   echo \"<defs>\"\n#   for gid from gids.values()\n#     outline = JSON.parse RBW.glyph_to_svg_pathdata font_idx, gid\n#     debug '^3344^', gid, outline.pd[ .. 100 ]\n#     # continue if outline.pd is ''\n#     echo \"<symbol overflow='visible' id='b#{gid}'>#{outline.br}</symbol>\"\n#     echo \"<symbol overflow='visible' id='g#{gid}'><path d='#{outline.pd}'/></symbol>\"\n#   echo \"</defs>\"\n#   #.........................................................................................................\n#   for d in arrangement\n#     echo \"<use href='#g#{d.gid}' x='#{d.x}' y='#{d.y}'/>\"\n#     echo \"<use href='#b#{d.gid}' x='#{d.x}' y='#{d.y}'/>\"\n#     # echo \"<g x='#{d.x}' y='#{d.y + 1000}'>\"\n#     # echo \"#{outline.br}\"\n#     # echo \"</g>\"\n#   #.........................................................................................................\n#   echo \"</svg>\"\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_use_linked_rustybuzz_wasm = ->\n  RBW = require '../../../apps/rustybuzz-wasm/pkg'\n  debug '^455^', RBW\n  fontnick    = 'djvs';  fspath = PATH.resolve PATH.join __dirname, '../../../', 'assets/jizura-fonts/DejaVuSerif.ttf'\n  font_idx    = 0\n  font_bytes  = ( FS.readFileSync fspath ).toString 'hex'\n  RBW.register_font font_idx, font_bytes\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @demo_store_outlines()\n  # await @demo_use_linked_rustybuzz_wasm()\n\n"
  ]
}