{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/DEMOS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\n# H                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n# MMX                       = require '../../../apps/multimix/lib/cataloguing'\nRBW                       = require 'rustybuzz-wasm'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Xxx\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    # @state =\n    # shy:          '\\xad'\n    @_prv_fontidx   = -1\n    @_last_fontidx  = 15\n    @fonts =\n      garamond_italic:  { path: 'EBGaramond08-Italic.otf', }\n      amiri:            { path: 'arabic/Amiri-0.113/Amiri-Bold.ttf', }\n      tibetan:          { path: '/usr/share/fonts/truetype/tibetan-machine/TibetanMachineUni.ttf', }\n      notoserif:        { path: 'NotoSerifJP/NotoSerifJP-Medium.otf', }\n    ### TAINT disregarding font, size for the moment ###\n    # @slab_widths = {}\n    #.........................................................................................................\n    for fontname, entry of @fonts\n      @fonts[ fontname ].font_idx  = null\n      @fonts[ fontname ].path      = @_resolve_font_path entry.path\n    #.........................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _resolve_font_path: ( font_path ) ->\n    return font_path if font_path.startsWith '/'\n    jzrfonts_path = '../../../assets/jizura-fonts'\n    return PATH.resolve PATH.join __dirname, jzrfonts_path, font_path\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_font_bytes: ( font_path ) -> ( FS.readFileSync font_path ).toString 'hex'\n\n  #---------------------------------------------------------------------------------------------------------\n  register_font: ( fontnick ) ->\n    #.........................................................................................................\n    unless ( font_entry = @fonts[ fontnick ] )?\n      throw new Error \"^1w37^ unknown fontnick #{rpr fontnick}\"\n    #.........................................................................................................\n    unless @_prv_fontidx < @_last_fontidx\n      throw new Error \"^1w37^ capacity of #{@_last_fontidx + 1} fonts exceeded\"\n    #.........................................................................................................\n    return R if ( R = font_entry.font_idx )?\n    #.........................................................................................................\n    R           = @_prv_fontidx += 1\n    whisper \"^register_font@1^ reading font #{fontnick}...\"\n    font_bytes  = @_get_font_bytes font_entry.path\n    whisper \"^register_font@2^ ...done\"\n    whisper \"^register_font@3^ sending font #{fontnick} to registry...\"\n    RBW.register_font R, font_bytes\n    whisper \"^register_font@4^ ...done\"\n    font_entry.font_idx = R\n    return R\n\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_load_font_outlines = ->\n  xxx = new Xxx()\n  debug '^290^', xxx\n  debug '^290^', font_idx = xxx.register_font 'garamond_italic'\n  gid = 74\n  urge '^290^', outline = JSON.parse RBW.glyph_to_svg_pathdata font_idx, gid\n\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @demo_load_font_outlines()\n\n"
  ]
}