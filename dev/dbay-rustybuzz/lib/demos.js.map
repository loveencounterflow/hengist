{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/DEMOS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\n# H                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n# MMX                       = require '../../../apps/multimix/lib/cataloguing'\nRBW                       = require 'rustybuzz-wasm'\nH                         = require './helpers'\nZLIB                      = require 'zlib'\n{ DBay }                  = require H.dbay_path\n{ Drb }                   = require H.drb_path\n\n\n#-----------------------------------------------------------------------------------------------------------\nshow_db = ( db, schema ) ->\n  { Tbl, }            = require '../../../apps/icql-dba-tabulate'\n  dtab                = new Tbl { db, }\n  # echo dtab._tabulate db SQL\"select * from #{schema}.outlines order by fontnick, gid;\"\n  echo dtab._tabulate db SQL\"select * from #{schema}.fontnicks order by fontnick;\"\n  echo dtab._tabulate db SQL\"\"\"\n    select\n        fontnick,\n        gid,\n        cid,\n        glyph,\n        uoid,\n        -- soid,\n        x,\n        y,\n        x1,\n        y1,\n        -- pd\n        substring( pd, 0, 25 ) || '...' as \"(pd)\"\n        -- substring( pd_blob, 0, 25 ) || '...' as \"(pd_blob)\"\n      from #{schema}.outlines\n      order by fontnick, gid\n      limit 100;\"\"\"\n  echo dtab._tabulate db SQL\"\"\"\n    select distinct\n        fontnick,\n        count(*) over ( partition by fontnick ) as outlines\n      from #{schema}.outlines\n      order by fontnick, gid\n      limit 100;\"\"\"\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_store_outlines = ( cfg ) ->\n  defaults            = { set_id: 'small', }\n  cfg                 = { defaults..., cfg..., }\n  { set_id }          = cfg\n  path                = '/tmp/dbay-rustybuzz.sqlite'\n  db                  = new DBay { path, }\n  schema              = 'drb'\n  drb_cfg             =\n    db:             db\n    path:           '/dev/shm/rustybuzz.sqlite'\n    create:         true\n    schema:         schema\n  drb                 = new Drb drb_cfg\n  #.........................................................................................................\n  { chrs\n    cids\n    cgid_map\n    fontnick\n    fspath          } = H.settings_from_set_id set_id\n  #.........................................................................................................\n  drb.register_fontnick { fontnick, fspath, }\n  whisper '^3334^', \"loading font #{rpr fontnick}...\"; drb.prepare_font { fontnick, }; whisper '^3334^', \"... done\"\n  #.........................................................................................................\n  urge '^290^', { bbox, pd, } = drb.get_single_outline { fontnick, gid: 74, }\n  #.........................................................................................................\n  t0                  = Date.now()\n  ### NOTE exactly one of `cids`, `chrs` must be set ###\n  cgid_map            = drb.get_cgid_map { cids, chrs, fontnick, }\n  t1                  = Date.now()\n  ### TAINT might want to turn this into a benchmark (or improve reporting) ###\n  debug '^324^', cgid_map.size + ' gids'\n  debug '^324^', ( dt = ( t1 - t0 ) / 1000 ) + 's'\n  help '^290^',  ( rpr cgid_map )[ ... 200 ] + '...'\n  #.........................................................................................................\n  t0                  = Date.now()\n  drb.insert_outlines { fontnick, cgid_map, }\n  t1                  = Date.now()\n  debug '^324^', ( dt = ( t1 - t0 ) / 1000 ) + 's'\n  #.........................................................................................................\n  # echo dtab._tabulate db SQL\"\"\"\n  #   with v1 as ( select count(*) as outline_count from #{schema}.outlines )\n  #   select\n  #     v1.outline_count / ? as \"outlines per second\"\n  #   from v1;\"\"\", [ dt, ]\n  #.........................................................................................................\n  show_db db, schema\n\n# #-----------------------------------------------------------------------------------------------------------\n# @demo_text_shaping = ->\n\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @demo_store_outlines()\n  # await @demo_store_outlines { set_id: 'all', }\n  # await @demo_typeset_sample_page()\n  # await @demo_use_linked_rustybuzz_wasm()\n\n\n"
  ]
}