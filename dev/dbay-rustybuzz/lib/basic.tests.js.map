{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/basic.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/TESTS/BASIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n# MMX                       = require '../../../apps/multimix/lib/cataloguing'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRB foobar\" ] = ( T, done ) ->\n  # ### explicit path, explicitly temporary ###\n  # T?.halt_on_error()\n  # { DBay }            = require H.dbay_path\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  { Tbl, }            = require '../../../apps/icql-dba-tabulate'\n  path                = PATH.resolve DBay.C.autolocation, 'drb.sqlite'\n  # DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  db                  = new DBay()\n  drb                 = new Drb { path, db, temporary: true, }\n  dtab                = new Tbl { db, }\n  schema              = drb.cfg.schema\n  #.........................................................................................................\n  db =>\n    echo dtab._tabulate db SQL\"select type, name from #{schema}.sqlite_schema;\"\n    echo dtab._tabulate db SQL\"select * from #{schema}.pragma_table_info( 'outlines' );\"\n  #.........................................................................................................\n  #.........................................................................................................\n  db =>\n    echo dtab._tabulate db SQL\"select * from #{schema}.pragma_table_info( 'fontnicks' );\"\n    echo dtab._tabulate db SQL\"select * from #{schema}.outlines order by fontnick, gid;\"\n    echo dtab._tabulate db SQL\"select * from #{schema}.fontnicks order by fontnick;\"\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRB no shared state in WASM module\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  fontnick            = 'gi'\n  gid                 = 74\n  font_idx            = 0\n  #.........................................................................................................\n  ### Establish that trying to retrieve an outline with an unused `font_idx` throws an error: ###\n  do =>\n    db                  = new DBay()\n    drb                 = new Drb { db, temporary: true, }\n    try\n      urge '^290^', outline = JSON.parse drb.RBW.glyph_to_svg_pathdata font_idx, gid\n    catch error\n      { name, message, } = error\n      warn { name, message, }\n    T?.fail \"^5568347-1^ failed to throw an error\" unless error?\n  #.........................................................................................................\n  ### Establish that after associating `font_idx` with a loaded font, outline retrieval does work: ###\n  do =>\n    db                  = new DBay()\n    drb                 = new Drb { db, temporary: true, }\n    drb.load_font { fontnick, }\n    urge '^290^', outline = JSON.parse drb.RBW.glyph_to_svg_pathdata font_idx, gid\n  #.........................................................................................................\n  do =>\n    db                  = new DBay()\n    drb                 = new Drb { db, temporary: true, }\n    ### we do not call `drb.load_font { fontnick, }` ###\n    try\n      urge '^290^', outline = JSON.parse drb.RBW.glyph_to_svg_pathdata font_idx, gid\n    catch error\n      { name, message, } = error\n      warn { name, message, }\n    T?.fail \"^5568347-2^ failed to throw an error\" unless error?\n  #.........................................................................................................\n  return done?()\n\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # @[ \"DRB foobar\" ]()\n  test @[ \"DRB no shared state in WASM module\" ]\n\n\n\n"
  ]
}