{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/basic.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/TESTS/BASIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n# MMX                       = require '../../../apps/multimix/lib/cataloguing'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRB foobar\" ] = ( T, done ) ->\n  # ### explicit path, explicitly temporary ###\n  # T?.halt_on_error()\n  # { DBay }            = require H.dbay_path\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  { Tbl, }            = require '../../../apps/icql-dba-tabulate'\n  path                = PATH.resolve DBay.C.autolocation, 'drb.sqlite'\n  # DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  db                  = new DBay()\n  drb                 = new Drb { path, db, temporary: true, }\n  dtab                = new Tbl { db, }\n  schema              = drb.cfg.schema\n  #.........................................................................................................\n  db =>\n    echo dtab._tabulate db SQL\"select type, name from #{schema}.sqlite_schema;\"\n    echo dtab._tabulate db SQL\"select * from #{schema}.pragma_table_info( 'outlines' );\"\n  #.........................................................................................................\n  #.........................................................................................................\n  db =>\n    echo dtab._tabulate db SQL\"select * from #{schema}.pragma_table_info( 'fontnicks' );\"\n    echo dtab._tabulate db SQL\"select * from #{schema}.outlines order by fontnick, gid;\"\n    echo dtab._tabulate db SQL\"select * from #{schema}.fontnicks order by fontnick;\"\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRB no shared state in WASM module\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  fontnick            = 'gi'\n  gid                 = 74\n  font_idx            = 0\n  #.........................................................................................................\n  ### Establish that trying to retrieve an outline with an unused `font_idx` throws an error: ###\n  do =>\n    db                  = new DBay()\n    drb                 = new Drb { db, temporary: true, }\n    try\n      urge '^290^', outline = JSON.parse drb.RBW.glyph_to_svg_pathdata font_idx, gid\n    catch error\n      { name, message, } = error\n      warn { name, message, }\n    T?.fail \"^5568347-1^ failed to throw an error\" unless error?\n  #.........................................................................................................\n  ### Establish that after associating `font_idx` with a loaded font, outline retrieval does work: ###\n  do =>\n    db                  = new DBay()\n    drb                 = new Drb { db, temporary: true, }\n    drb.load_font { fontnick, }\n    urge '^290^', outline = JSON.parse drb.RBW.glyph_to_svg_pathdata font_idx, gid\n  #.........................................................................................................\n  do =>\n    db                  = new DBay()\n    drb                 = new Drb { db, temporary: true, }\n    ### we do not call `drb.load_font { fontnick, }` ###\n    try\n      urge '^290^', outline = JSON.parse drb.RBW.glyph_to_svg_pathdata font_idx, gid\n    catch error\n      { name, message, } = error\n      warn { name, message, }\n    T?.fail \"^5568347-2^ failed to throw an error\" unless error?\n  #.........................................................................................................\n  return done?()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"___________ DRB path compression\" ] = ( T, done ) ->\n  SVGO = require 'svgo'\n  probe   = 'M 759 -105 Q 787 -105 844 -57 Q 844 -34 835 -34 Q 803 -34 680 -37 Q 558 -40 541 -40 Q 427 -40 271 -20 L 136 3 Q 131 3 126 3 Q 122 4 119 4 Q 78 4 55 -31 Q 55 -40 63 -40 L 288 -57 L 288 -69 Q 288 -102 285 -147 Q 281 -192 277 -237 Q 272 -282 271 -296 Q 264 -378 221 -454 L 221 -456 Q 221 -474 235 -474 Q 245 -474 264 -465 Q 282 -457 289 -451 L 384 -535 Q 433 -581 452 -624 L 452 -629 Q 452 -646 457 -652 Q 462 -657 472 -657 Q 488 -657 531 -649 Q 574 -642 580 -636 Q 590 -627 590 -610 Q 555 -595 449 -524 Q 343 -454 308 -438 Q 315 -428 315 -395 Q 315 -383 314 -368 Q 313 -354 313 -351 Q 420 -357 626 -410 Q 647 -415 660 -415 Q 697 -415 718 -393 Q 718 -367 592 -348 L 536 -338 Q 571 -316 576 -293 L 534 -80 Q 539 -79 552 -79 Q 591 -79 667 -92 Q 742 -105 759 -105 Z M 316 -318 Q 316 -292 320 -237 Q 323 -182 328 -125 Q 333 -69 333 -63 Q 482 -74 490 -74 Q 490 -86 497 -154 Q 503 -222 503 -243 Q 503 -295 490 -329 L 380 -311 Q 374 -310 362 -310 Q 337 -310 316 -318 Z'\n  matcher = 'M759-105q28 0 85 48 0 23-9 23-32 0-155-3-122-3-139-3-114 0-270 20L136 3h-10q-4 1-7 1-41 0-64-35 0-9 8-9l225-17v-12q0-33-3-78l-8-90q-5-45-6-59-7-82-50-158v-2q0-18 14-18 10 0 29 9 18 8 25 14l95-84q49-46 68-89v-5q0-17 5-23 5-5 15-5 16 0 59 8 43 7 49 13 10 9 10 26-35 15-141 86-106 70-141 86 7 10 7 43 0 12-1 27-1 14-1 17 107-6 313-59 21-5 34-5 37 0 58 22 0 26-126 45l-56 10q35 22 40 45L534-80q5 1 18 1 39 0 115-13 75-13 92-13ZM316-318q0 26 4 81 3 55 8 112 5 56 5 62 149-11 157-11 0-12 7-80 6-68 6-89 0-52-13-86l-110 18q-6 1-18 1-25 0-46-8Z'\n  #.........................................................................................................\n  optimize = ( svg_path ) ->\n    svg                       = \"\"\"<svg><path d='#{svg_path}'/></svg>\"\"\"\n    { data: svg_optimized, }  = SVGO.optimize svg\n    return svg_optimized.replace /^.*d=\"([^\"]+)\".*$/, '$1'\n  #.........................................................................................................\n  R = probe\n  R = R.replace /([0-9])\\x20([^0-9])/g, '$1$2'\n  R = R.replace /([^0-9])\\x20([0-9])/g, '$1$2'\n  result  = R\n  debug '^280^', probe\n  debug '^280^', result\n  debug '^280^', optimize result\n  debug '^280^', result is matcher\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DRB can pass in custom RBW\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  RBW                 = require '../../../apps/rustybuzz-wasm/pkg'\n  { DBay }            = require H.dbay_path\n  { Drb }             = require H.drb_path\n  db                  = new DBay()\n  drb                 = new Drb { db, temporary: true, RBW, }\n  T?.ok drb.RBW is RBW\n  #.........................................................................................................\n  return done?()\n\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # @[ \"DRB foobar\" ]()\n  # test @[ \"DRB no shared state in WASM module\" ]\n  # @[ \"DRB path compression\" ]()\n  test @[ \"DRB can pass in custom RBW\" ]\n\n"
  ]
}