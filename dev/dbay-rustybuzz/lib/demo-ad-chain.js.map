{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-ad-chain.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/DEMO-AD-CHAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n# MMX                       = require '../../../apps/multimix/lib/cataloguing'\n{ DBay }                  = require H.dbay_path\n{ Drb }                   = require H.drb_path\n{ width_of\n  to_width }              = require 'to-width'\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_ad_chain_1 = ( cfg ) ->\n  # defaults        = { fontnick: 'b42', fspath: null, gid_1: 1, gid_2: 100, }\n  # cfg             = { defaults..., cfg..., }\n  # { fontnick\n  #   fspath\n  #   gid_1\n  #   gid_2    }    = cfg\n  # { Tbl, }        = require '../../../apps/icql-dba-tabulate'\n  db              = new DBay { path: '/dev/shm/typesetting-1.sqlite', }\n  drb             = new Drb { db, rebuild: false, path: '/dev/shm/typesetting-2.sqlite', }\n  # dtab            = new Tbl { db, }\n  collector       = [\n    []\n    []\n    []\n    []\n    []\n    ]\n  for ad from db SQL\"\"\"\n    select\n        *\n      from ads\n      where true\n        and ( alt = 1 )\n      order by b1\n      limit 50;\n    \"\"\", {}\n    { gid\n      chrs\n      b1\n      b2  } = ad\n    chrs    = chrs.replace '\\xad', '¬'\n    chrs    = chrs.replace '\\x20', '␣'\n    # chrs    = ' ' + chrs + ' '\n    # chrs    = to_width chrs, 5, { align: 'center', }\n    width   = ( width_of chrs ) + 3 * 2\n    hborder = '─'.repeat width\n    gid     = to_width gid.toString(), width, { align: 'center', }\n    b1_b2   = \"#{b1}, #{b2}\"\n    b1_b2   = to_width b1_b2, width, { align: 'center', }\n    for line, idx in [\n      \"  #{gid}  \"\n      \" ┌#{hborder}┐ \"\n      \"─┼─▶ #{chrs} ◀─┼─\"\n      \" └#{hborder}┘ \"\n      \"  #{b1_b2}  \" ]\n      collector[ idx ].push line\n  for line in collector\n    echo to_width ( line.join '' ), 200, { align: 'center', ellipsis: '', }\n  return null\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_ad_chain_2 = ( cfg ) ->\n  db              = new DBay { path: '/dev/shm/typesetting-1.sqlite', }\n  drb             = new Drb { db, rebuild: false, path: '/dev/shm/typesetting-2.sqlite', }\n  collector       = [\n    []\n    []\n    []\n    []\n    []\n    ]\n  for ad from db SQL\"\"\"\n    select\n        *\n      from ads\n      where true\n        and ( alt > 1 )\n      order by b1\n      limit 50;\n    \"\"\", {}\n    { gid\n      chrs\n      b1  } = ad\n    b       = ' ' + b1.toString()\n    chrs    = chrs.replace '\\xad', '¬'\n    chrs    = chrs.replace '\\x20', '␣'\n    gid     = gid.toString()\n    width   = Math.max 1, ( width_of b ), ( width_of chrs ), ( width_of gid )\n    b       = to_width b,     width, { align: 'left', }\n    chrs    = to_width chrs,  width, { align: 'right', }\n    gid     = to_width gid,   width, { align: 'right', }\n    h       = '─'.repeat width\n    collector[ 0 ].push b + ' '\n    collector[ 1 ].push '┬' + h\n    collector[ 2 ].push '│' + chrs\n    collector[ 3 ].push '│' + gid\n    collector[ 4 ].push '┴' + h\n  for line in collector\n    echo to_width ( line.join '' ), 120, { align: 'left', }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_ad_chain_3 = ( cfg ) ->\n  db              = new DBay { path: '/dev/shm/typesetting-1.sqlite', }\n  drb             = new Drb { db, rebuild: false, path: '/dev/shm/typesetting-2.sqlite', }\n  echo drb.render_ad_chain { format: 'compact', b: 125, context: 10, }\n  return null\n\n###\n\nb       10 11 12 14 15  16 17  18 19\n         ┬──┬──┬──┬──┬───┬──┬───┬──┬───\nchrs     │a │f │ ¬│ f│ i │r │ m │ ␣│\ngid      │23|85| 3|-1|176|40|180| 3│\n         ┴──┴──┴──┴──┴───┴──┴───┴──┴───\n\n###\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @demo_ad_chain_1()\n  # @demo_ad_chain_2()\n  @demo_ad_chain_3()\n\n\n"
  ]
}