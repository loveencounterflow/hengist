{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/content-hash.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'CONTENT-HASH-BENCHMARKS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\ngcfg                      = { verbose: false, }\nGUY                       = require 'guy'\nXXHADD                    = require 'xxhash-addon'\n{ walk_lines }            = ( require '../../../apps/guy' ).fs\nCRYPTO                    = require 'crypto'\nXXH                       = require 'xxhashjs'\nCP                        = require 'child_process'\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @get_data = ( cfg ) ->\n#   return data_cache if data_cache?\n#   whisper \"retrieving test data...\"\n#   # DATOM = require '../../../apps/datom'\n#   #.........................................................................................................\n#   buffer        = Buffer.from DATA.get_svg_pathdata cfg.path_count\n#   data_cache    = GUY.lft.freeze { buffer, }\n#   whisper \"...done\"\n#   return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@_crypto = ( cfg ) -> new Promise ( resolve ) =>\n  { classname         } = cfg\n  # { buffer            } = @get_data cfg\n  clasz                 = XXHADD[ classname ]\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count   = 0\n    hasher  = CRYPTO.createHash classname\n    for line from walk_lines cfg.path, { decode: false, }\n      count += line.length\n      hasher.update line\n    digest = hasher.digest()\n    debug '^339^', digest.toString 'hex' if cfg.show\n    # hasher.reset();\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_xxhadd = ( cfg ) -> new Promise ( resolve ) =>\n  { classname         } = cfg\n  # { buffer            } = @get_data cfg\n  clasz                 = XXHADD[ classname ]\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count   = 0\n    hasher  = new clasz()\n    for line from walk_lines cfg.path, { decode: false, }\n      count += line.length\n      hasher.update line\n    digest = hasher.digest()\n    debug '^339^', digest.toString 'hex' if cfg.show\n    # hasher.reset();\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_xxh = ( cfg ) -> new Promise ( resolve ) =>\n  { classname         } = cfg\n  # { buffer            } = @get_data cfg\n  clasz                 = XXH[ classname ]\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count   = 0\n    hasher  = clasz()\n    for line from walk_lines cfg.path, { decode: false, }\n      count += line.length\n      hasher.update line\n    digest = hasher.digest()\n    debug '^339^', digest.toString 16 if cfg.show\n    # hasher.reset();\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_cp = ( cfg ) -> new Promise ( resolve ) =>\n  ###\n  sha224sum\n  sha256sum-mint\n  sha512sum\n  sha256sum\n  sharesec\n  sha1sum\n  sha384sum\n  shasum\n  ###\n  count = ( FS.statSync cfg.path ).size\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    # options = [ '-b', 'nonexistingfile', ]\n    options = [ '-b', cfg.path, ]\n    result  = CP.spawnSync cfg.classname, options\n    throw ( new Error result.stderr.toString 'utf-8' ) if result.status isnt 0\n    digest  = result.stdout.toString 'utf-8'\n    if cfg.show\n      debug '^339^', digest\n      # debug '^339^', 'stdout', rpr result.stdout\n      # debug '^339^', 'stderr', rpr result.stderr\n      # debug '^339^', 'status', rpr result.status\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@sha1                 = ( cfg ) => @_crypto { cfg..., classname: 'sha1',      }\n@sha256               = ( cfg ) => @_crypto { cfg..., classname: 'sha256',    }\n@md5                  = ( cfg ) => @_crypto { cfg..., classname: 'md5',       }\n@xxhadd_32            = ( cfg ) => @_xxhadd { cfg..., classname: 'XXHash32',  }\n@xxhadd_64            = ( cfg ) => @_xxhadd { cfg..., classname: 'XXHash64',  }\n@xxhadd_3             = ( cfg ) => @_xxhadd { cfg..., classname: 'XXHash3',   }\n@xxhadd_128           = ( cfg ) => @_xxhadd { cfg..., classname: 'XXHash128', }\n@xxh32                = ( cfg ) => @_xxh    { cfg..., classname: 'h32',       }\n@xxh64                = ( cfg ) => @_xxh    { cfg..., classname: 'h64',       }\n@cp_sha1sum           = ( cfg ) => @_cp     { cfg..., classname: 'sha1sum',   }\n@cp_sha512sum         = ( cfg ) => @_cp     { cfg..., classname: 'sha512sum', }\n@cp_sha256sum         = ( cfg ) => @_cp     { cfg..., classname: 'sha256sum', }\n@cp_sha224sum         = ( cfg ) => @_cp     { cfg..., classname: 'sha224sum', }\n@cp_md5sum            = ( cfg ) => @_cp     { cfg..., classname: 'md5sum',    }\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@guy_fs_walk_lines = ( cfg ) -> new Promise ( resolve ) =>\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count         = 0\n    for line from walk_lines cfg.path, { decode: false, }\n      count += line.length\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  gcfg.verbose  = true\n  gcfg.verbose  = false\n  bench         = BM.new_benchmarks()\n  path          = 'larry-wall-on-regexes.html';   show = false\n  path          = 'short-proposal.mkts.md';       show = true\n  path          = 'svg-pathdata.txt';             show = false\n  path          = PATH.resolve PATH.join __dirname, '../../../assets', path\n  #.........................................................................................................\n  cfg           = { path, show, }\n  repetitions   = 3\n  test_names    = [\n    'sha1'\n    'sha256'\n    'md5'\n    # 'xxhadd_32'\n    # 'xxhadd_64'\n    # 'xxhadd_3'\n    'xxhadd_128'\n    'cp_sha512sum'\n    'cp_sha256sum'\n    'cp_sha1sum'\n    'cp_sha224sum'\n    'cp_md5sum'\n    'guy_fs_walk_lines'\n    # 'xxh32'\n    # 'xxh64'\n    ]\n  global.gc() if global.gc?\n  data_cache = null\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      global.gc() if global.gc?\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n"
  ]
}