{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/home/flow/jzr/hengist/dev/kitty-font-config-writer-kfcw/src/demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  pseudo_css_configuration = [\n    [ 'font1', '[B-H] [J] [L] [N-X]          ', ]\n    [ 'font2', '[B-D]                        ', ]\n    [ 'font3', '[G-I]                        ', ]\n    [ 'font4', '[M-Q]                        ', ]\n    [ 'font5', '[M] [O-T]                    ', ]\n    [ 'font6', '[M] [U] [X-Y]                ', ]\n    ]\n\n  #-----------------------------------------------------------------------------------------------------------\n  overlapping_laps_from_pseudo_css = ( pseudo_css ) ->\n    R = []\n    for [ fontnick, ranges_txt, ] in pseudo_css\n      matches         = ranges_txt.matchAll /// \\[ (?<range_literal> [^ \\] ]+ ) \\]///g\n      range_literals  = ( match.groups.range_literal for match from matches )\n      range_endpoints = ( range_literal.trim().split /\\s*-\\s*/ for range_literal in range_literals )\n      segments        = []\n      for range_endpoint in range_endpoints\n        first_chr = range_endpoint[ 0 ]\n        last_chr  = range_endpoint[ 1 ] ? first_chr\n        lo        = first_chr.codePointAt 0\n        hi        = last_chr.codePointAt  0\n        segments.push [ lo, hi, ]\n      lap = new LAP.Interlap segments\n      R.push [ fontnick, lap, ]\n    return R\n\n  #.........................................................................................................\n  chr_from_cid = ( cid ) -> String.fromCodePoint cid\n\n  #.........................................................................................................\n  segment_as_demo_text = ( segment ) ->\n    validate.segment segment\n    return \"[#{chr_from_cid segment.lo}]\" if segment.lo is segment.hi\n    return \"[#{chr_from_cid segment.lo}-#{chr_from_cid segment.hi}]\"\n\n  #.........................................................................................................\n  interlap_as_demo_text = ( interlap ) ->\n    validate.interlap interlap\n    return ( segment_as_demo_text s for s in interlap ).join ' '\n\n  #.........................................................................................................\n  overlaps = overlapping_laps_from_pseudo_css pseudo_css_configuration\n  for [ fontnick, lap, ] from overlaps\n    fontnick_txt  = to_width ( fontnick                   ), 20\n    lap_txt       = to_width ( interlap_as_demo_text lap  ), 20\n    info ( CND.lime fontnick_txt ), ( CND.gold lap_txt )\n  #.........................................................................................................\n  info()\n  exclusion   = new LAP.Interlap()\n  disjuncts   = []\n  exclusions  = []\n  for idx in [ overlaps.length - 1 .. 0 ] by -1\n    [ fontnick, lap, ]  = overlaps[ idx ]\n    disjunct            = LAP.difference  lap, exclusion\n    exclusion           = LAP.union       lap, exclusion\n    disjuncts.unshift disjunct\n    exclusions.unshift exclusion\n  for exclusion in exclusions\n    info ( CND.yellow interlap_as_demo_text exclusion )\n  for [ fontnick, lap, ], idx in overlaps\n    disjunct      = disjuncts[ idx ]\n    fontnick_txt  = to_width ( fontnick                       ), 20\n    lap_txt       = to_width ( interlap_as_demo_text lap      ), 20\n    disjunct_txt  = to_width ( interlap_as_demo_text disjunct ), 20\n    info ( CND.lime fontnick_txt ), ( CND.gold lap_txt ), ( CND.blue disjunct_txt ), ( CND.steel LAP.as_unicode_range disjunct )\n    for segment in disjunct\n      unicode_range = LAP.as_unicode_range segment\n      help \"symbol_map \\t#{unicode_range} \\t#{fontnick}\"\n  disjuncts_uranges = ( LAP.as_unicode_range d for d in disjuncts ).join '\\n'\n  validate.true equals disjuncts_uranges, \"\"\"U+0045-U+0046,U+004a-U+004a,U+004c-U+004c,U+0056-U+0057\n    U+0042-U+0044\n    U+0047-U+0049\n    U+004e-U+004e\n    U+004f-U+0054\n    U+004d-U+004d,U+0055-U+0055,U+0058-U+0059\"\"\"\n  return null\n"
  ]
}