{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/home/flow/jzr/hengist/dev/kitty-font-config-writer-kfcw/src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'kittyfonts'\nrpr                       = CND.rpr\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nhex                       = ( n ) -> ( n.toString 16 ).toUpperCase().padStart 4, '0'\nLAP                       = require '../../../apps/interlap'\n{ type_of\n  isa\n  validate\n  equals    }             = LAP.types.export()\n\n\n#-----------------------------------------------------------------------------------------------------------\nto_width = ( text, width ) ->\n  ### TAINT use `to_width` module ###\n  validate.text text\n  validate.positive_integer width\n  return text[ .. width ].padEnd width, ' '\n\n#===========================================================================================================\n# PERTAINING TO SPECIFIC SETTINGS / FONT CHOICES\n#-----------------------------------------------------------------------------------------------------------\nS =\n  # source_path:  '../../../assets/write-font-configuration-for-kitty-terminal.sample-data.json'\n  paths:\n    # configured_cid_ranges:  '../../../../ucdb/cfg/styles-codepoints-and-fontnicks.txt'\n    configured_cid_ranges:  '../../../assets/ucdb/styles-codepoints-and-fontnicks.short.txt'\n    cid_ranges_by_rsgs:     '../../../../ucdb/cfg/rsgs-and-blocks.txt'\n\n  psname_by_fontnicks:\n    babelstonehan:              'BabelStoneHan'\n    cwtexqheibold:              'cwTeXQHei-Bold'\n    dejavuserif:                'DejaVuSerif'\n    hanaminaotf:                'HanaMinA'\n    hanaminbotf:                'HanaMinB'\n    ipamp:                      'IPAPMincho'\n    jizurathreeb:               'jizura3b'\n    nanummyeongjo:              'NanumMyeongjo'\n    sunexta:                    'Sun-ExtA'\n    thtshynpone:                'TH-Tshyn-P1'\n    thtshynptwo:                'TH-Tshyn-P2'\n    thtshynpzero:               'TH-Tshyn-P0'\n    umingttcone:                'UMingCN'\n    # @default\n    # asanamath\n    # ebgaramondtwelveregular:    ''\n    # hanaminexatwootf:           ''\n    lmromantenregular:          'Iosevka-Slab'\n    iosevkaslab:                'Iosevka-Slab'\n    # sourcehanserifheavytaiwan:  ''\n    # unifonttwelve:              ''\n    lastresort:                 'LastResort'\n\n  illegal_codepoints: [ # see https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Special_code_points\n    [   0x0000,   0x0000, ]\n    [   0xd800,   0xdfff, ] # surrogates\n    [   0xfdd0,   0xfdef, ]\n    [   0xfffe,   0xffff, ]\n    [  0x1fffe,  0x1ffff, ]\n    [  0x2fffe,  0x2ffff, ]\n    [  0x3fffe,  0x3ffff, ]\n    [  0x4fffe,  0x4ffff, ]\n    [  0x5fffe,  0x5ffff, ]\n    [  0x6fffe,  0x6ffff, ]\n    [  0x7fffe,  0x7ffff, ]\n    [  0x8fffe,  0x8ffff, ]\n    [  0x9fffe,  0x9ffff, ]\n    [  0xafffe,  0xaffff, ]\n    [  0xbfffe,  0xbffff, ]\n    [  0xcfffe,  0xcffff, ]\n    [  0xdfffe,  0xdffff, ]\n    [  0xefffe,  0xeffff, ]\n    [  0xffffe,  0xfffff, ]\n    [ 0x10fffe, 0x10ffff, ] ]\n\n\n#===========================================================================================================\n# GENERIC STUFF\n#-----------------------------------------------------------------------------------------------------------\ncid_range_pattern = ///^ 0x (?<first_cid_txt> [0-9a-fA-F]+ ) \\.\\. 0x (?<last_cid_txt> [0-9a-fA-F]+ ) $ ///\nparse_cid_hex_range_txt = ( cid_range_txt ) ->\n  unless ( match = cid_range_txt.match cid_range_pattern )?\n    throw new Error \"^33736^ illegal line #{rpr line} (unable to parse CID range #{rpr cid_range_txt})\"\n  { first_cid_txt\n    last_cid_txt  } = match.groups\n  first_cid         = parseInt first_cid_txt, 16\n  last_cid          = parseInt last_cid_txt,  16\n  return [ first_cid, last_cid, ]\n\n#-----------------------------------------------------------------------------------------------------------\nsegment_from_cid_hex_range_txt = ( cid_range_txt ) -> new LAP.Segment parse_cid_hex_range_txt cid_range_txt\n\n#-----------------------------------------------------------------------------------------------------------\n@_read_cid_ranges_by_rsgs = ( settings ) ->\n  return R if ( R = settings.cid_ranges_by_rsgs )?\n  R                 = settings.cid_ranges_by_rsgs = {}\n  source_path       = PATH.resolve PATH.join __dirname, settings.paths.cid_ranges_by_rsgs\n  lines             = ( FS.readFileSync source_path, { encoding: 'utf-8', } ).split '\\n'\n  for line in lines\n    line = line.replace /^\\s+$/g, ''\n    continue if ( line.length is 0 ) or ( /^\\s*#/.test line )\n    [ icgroup, rsg, is_cjk_txt, cid_range_txt, range_name..., ] = line.split /\\s+/\n    continue if rsg.startsWith 'u-x-'\n    R[ rsg ] = segment_from_cid_hex_range_txt cid_range_txt\n  return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_read_illegal_codepoints = ( settings ) ->\n#   return R if isa.interlap ( R = settings.illegal_codepoints )\n#   R = settings.illegal_codepoints = new LAP.Interlap settings.illegal_codepoints\n#   return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_read_configured_cid_ranges = ( settings ) ->\n  return R if ( R = settings.configured_cid_ranges )?\n  cid_ranges_by_rsgs  = @_read_cid_ranges_by_rsgs settings\n  R                   = settings.configured_cid_ranges = []\n  source_path         = PATH.resolve PATH.join __dirname, settings.paths.configured_cid_ranges\n  lines               = ( FS.readFileSync source_path, { encoding: 'utf-8', } ).split '\\n'\n  unknown_fontnicks   = new Set()\n  unknown_rsgs        = new Set()\n  for line in lines\n    line = line.replace /^\\s+$/g, ''\n    continue if ( line.length is 0 ) or ( /^\\s*#/.test line )\n    [ styletag, cid_literal, fontnick, glyphstyle..., ] = line.split /\\s+/\n    glyphstyle = glyphstyle.join ' '\n    validate.nonempty_text styletag\n    validate.nonempty_text cid_literal\n    validate.nonempty_text fontnick\n    validate.text glyphstyle\n    # continue unless fontnick?\n    # continue unless first_cid?\n    # continue unless last_cid?\n    continue unless styletag is '+style:ming'\n    continue if     glyphstyle? and /\\bglyph\\b/.test glyphstyle\n    #.......................................................................................................\n    unless ( psname = settings.psname_by_fontnicks[ fontnick ] )?\n      unless unknown_fontnicks.has fontnick\n        unknown_fontnicks.add fontnick\n        warn \"unknown fontnick #{rpr fontnick}\"\n      continue\n    #.......................................................................................................\n    ### TAINT the below as function ###\n    #.......................................................................................................\n    if cid_literal is '*'\n      segment = new LAP.Segment [ 0x000000, 0x10ffff, ]\n    #.......................................................................................................\n    else if ( cid_literal.startsWith \"'\" ) and ( cid_literal.endsWith \"'\" )\n      validate.chr chr  = cid_literal[ 1 ... cid_literal.length - 1 ]\n      first_cid         = chr.codePointAt 0\n      last_cid          = first_cid\n      segment           = new LAP.Segment [ first_cid, last_cid, ]\n    #.......................................................................................................\n    else if ( cid_literal.startsWith 'rsg:' )\n      rsg = cid_literal[ 4 .. ]\n      validate.nonempty_text rsg\n      unless ( segment = cid_ranges_by_rsgs[ rsg ] )?\n        unknown_rsgs.add rsg\n        warn \"unknown rsg #{rpr rsg}\"\n        continue\n    #.......................................................................................................\n    else\n      segment = segment_from_cid_hex_range_txt cid_literal\n    #.......................................................................................................\n    ### NOTE for this particular file format, we could use segments inbstead of laps since there can be only\n    one segment per record; however, for consistency with those cases where several disjunct segments per\n    record are allowed, we use laps. ###\n    ### TAINT consider to use a non-committal name like `cids` instead of `lap`, which is bound to a\n    particular data type; allow to use segments and laps for this and similar attributes. ###\n    lap = new LAP.Interlap segment\n    R.push { fontnick, psname, lap, }\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_read_disjunct_cid_ranges = ( settings ) ->\n  overlaps            = @_read_configured_cid_ranges settings\n  R                   = settings.disjunct_cid_ranges = []\n  org_by_fontnicks    = {}\n  exclusion           = new LAP.Interlap settings.illegal_codepoints\n  for idx in [ overlaps.length - 1 .. 0 ] by -1\n    rule                = overlaps[ idx ]\n    { fontnick\n      psname\n      lap       }       = rule\n    disjunct            = LAP.difference  lap, exclusion\n    exclusion           = LAP.union       lap, exclusion\n    R.unshift { fontnick, psname, lap: disjunct, }\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@write_font_configuration_for_kitty_terminal = ( settings ) ->\n  fontnicks_and_laps = @_read_disjunct_cid_ranges S\n  # debug '^443^', fontnicks_and_laps\n  for disjunct_range in fontnicks_and_laps\n    { fontnick\n      psname\n      lap     } = disjunct_range\n    # debug lap\n    if lap.size is 0\n      filler = ( '-/-' ).padEnd 30\n      echo \"# symbol_map      #{filler} (#{psname})\"\n    else\n      for segment in lap\n        # help fontnick, LAP.as_unicode_range lap\n        unicode_range_txt = ( LAP.as_unicode_range segment ).padEnd 30\n        echo \"symbol_map      #{unicode_range_txt} #{psname}\"\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  pseudo_css_configuration = [\n    [ 'font1', '[B-H] [J] [L] [N-X]          ', ]\n    [ 'font2', '[B-D]                        ', ]\n    [ 'font3', '[G-I]                        ', ]\n    [ 'font4', '[M-Q]                        ', ]\n    [ 'font5', '[M] [O-T]                    ', ]\n    [ 'font6', '[M] [U] [X-Y]                ', ]\n    ]\n\n  #-----------------------------------------------------------------------------------------------------------\n  overlapping_laps_from_pseudo_css = ( pseudo_css ) ->\n    R = []\n    for [ fontnick, ranges_txt, ] in pseudo_css\n      matches         = ranges_txt.matchAll /// \\[ (?<range_literal> [^ \\] ]+ ) \\]///g\n      range_literals  = ( match.groups.range_literal for match from matches )\n      range_endpoints = ( range_literal.trim().split /\\s*-\\s*/ for range_literal in range_literals )\n      segments        = []\n      for range_endpoint in range_endpoints\n        first_chr = range_endpoint[ 0 ]\n        last_chr  = range_endpoint[ 1 ] ? first_chr\n        lo        = first_chr.codePointAt 0\n        hi        = last_chr.codePointAt  0\n        segments.push [ lo, hi, ]\n      lap = new LAP.Interlap segments\n      R.push [ fontnick, lap, ]\n    return R\n\n  #.........................................................................................................\n  chr_from_cid = ( cid ) -> String.fromCodePoint cid\n\n  #.........................................................................................................\n  segment_as_demo_text = ( segment ) ->\n    validate.segment segment\n    return \"[#{chr_from_cid segment.lo}]\" if segment.lo is segment.hi\n    return \"[#{chr_from_cid segment.lo}-#{chr_from_cid segment.hi}]\"\n\n  #.........................................................................................................\n  interlap_as_demo_text = ( interlap ) ->\n    validate.interlap interlap\n    return ( segment_as_demo_text s for s in interlap ).join ' '\n\n  #.........................................................................................................\n  overlaps = overlapping_laps_from_pseudo_css pseudo_css_configuration\n  for [ fontnick, lap, ] from overlaps\n    fontnick_txt  = to_width ( fontnick                   ), 20\n    lap_txt       = to_width ( interlap_as_demo_text lap  ), 20\n    info ( CND.lime fontnick_txt ), ( CND.gold lap_txt )\n  #.........................................................................................................\n  info()\n  exclusion   = new LAP.Interlap()\n  disjuncts   = []\n  exclusions  = []\n  for idx in [ overlaps.length - 1 .. 0 ] by -1\n    [ fontnick, lap, ]  = overlaps[ idx ]\n    disjunct            = LAP.difference  lap, exclusion\n    exclusion           = LAP.union       lap, exclusion\n    disjuncts.unshift disjunct\n    exclusions.unshift exclusion\n  for exclusion in exclusions\n    info ( CND.yellow interlap_as_demo_text exclusion )\n  for [ fontnick, lap, ], idx in overlaps\n    disjunct      = disjuncts[ idx ]\n    fontnick_txt  = to_width ( fontnick                       ), 20\n    lap_txt       = to_width ( interlap_as_demo_text lap      ), 20\n    disjunct_txt  = to_width ( interlap_as_demo_text disjunct ), 20\n    info ( CND.lime fontnick_txt ), ( CND.gold lap_txt ), ( CND.blue disjunct_txt ), ( CND.steel LAP.as_unicode_range disjunct )\n    for segment in disjunct\n      unicode_range = LAP.as_unicode_range segment\n      help \"symbol_map \\t#{unicode_range} \\t#{fontnick}\"\n  disjuncts_uranges = ( LAP.as_unicode_range d for d in disjuncts ).join '\\n'\n  validate.true equals disjuncts_uranges, \"\"\"U+0045-U+0046,U+004a-U+004a,U+004c-U+004c,U+0056-U+0057\n    U+0042-U+0044\n    U+0047-U+0049\n    U+004e-U+004e\n    U+004f-U+0054\n    U+004d-U+004d,U+0055-U+0055,U+0058-U+0059\"\"\"\n  return null\n\n#===========================================================================================================\n# DATA STRUCTURE DEMOS\n#-----------------------------------------------------------------------------------------------------------\n@demo_cid_ranges_by_rsgs = ->\n  echo CND.steel CND.reverse \"CID Ranges by RSGs\".padEnd 108\n  for rsg, segment of @_read_cid_ranges_by_rsgs S\n    continue unless /kana|kata|hira/.test rsg\n    rsg_txt   = ( rsg.padEnd 25 )\n    range_txt = LAP.as_unicode_range segment\n    echo ( CND.grey \"rsg and CID range\" ), ( CND.blue rsg_txt ), ( CND.lime range_txt )\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_configured_ranges = ->\n  echo CND.steel CND.reverse \"Configured CID Ranges\".padEnd 108\n  # debug @_read_configured_cid_ranges S\n  for configured_range in @_read_configured_cid_ranges S\n    { fontnick\n      psname\n      lap     } = configured_range\n    font_txt  = ( psname.padEnd 25 )\n    range_txt = LAP.as_unicode_range lap\n    # echo ( CND.grey \"configured range\" ), ( CND.yellow configured_range )\n    echo ( CND.grey \"configured range\" ), ( CND.yellow font_txt ), ( CND.lime range_txt )\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_disjunct_ranges = ->\n  echo CND.steel CND.reverse \"Disjunct CID Ranges\".padEnd 108\n  for disjunct_range in @_read_disjunct_cid_ranges S\n    { fontnick\n      psname\n      lap     } = disjunct_range\n    font_txt  = ( psname.padEnd 25 )\n    if lap.size is 0\n      echo ( CND.grey \"disjunct range\" ), ( CND.grey font_txt ), ( CND.grey \"no codepoints\" )\n    else\n      for segment in lap\n        range_txt = LAP.as_unicode_range segment\n        echo ( CND.grey \"disjunct range\" ), ( CND.yellow font_txt ), ( CND.lime range_txt )\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_kitty_font_config = ->\n  echo CND.steel CND.reverse \"Kitty Font Config\".padEnd 108\n  @write_font_configuration_for_kitty_terminal S\n\n\n############################################################################################################\nif module is require.main then do =>\n  @demo_cid_ranges_by_rsgs()\n  @demo_configured_ranges()\n  @demo_disjunct_ranges()\n  @demo_kitty_font_config()\n  #.........................................................................................................\n  # @write_font_configuration_for_kitty_terminal S\n  # demo()\n\n\n\n\n\n"
  ]
}