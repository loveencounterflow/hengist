{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/usecase1.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'LFT'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  # @types.validate.hengist_dataprv_cfg cfg\n  #.........................................................................................................\n  lists_of_values = []\n  for _ in [ 1 .. cfg.set_count ]\n    lists_of_values.push DATA.get_values cfg.datom_length\n  #.........................................................................................................\n  lists_of_keys = ( ( DATA.get_words cfg.datom_length ) for idx in [ 1 .. cfg.set_count ] )\n  #.........................................................................................................\n  lists_of_key_value_pairs = []\n  for keys, set_idx in lists_of_keys\n    values = lists_of_values[ set_idx ]\n    lists_of_key_value_pairs.push ( [ key, values[ key_idx ] ] for key, key_idx in keys )\n  #.........................................................................................................\n  lists_of_facet_keys = []\n  for keys in lists_of_keys\n    lists_of_facet_keys.push \\\n      ( keys[ idx ] for idx in DATA.get_integers cfg.change_facet_count, 0, cfg.datom_length - 1 )\n  #.........................................................................................................\n  lists_of_facet_values = []\n  for keys in lists_of_keys\n    lists_of_facet_values.push DATA.get_values cfg.change_facet_count\n  # #.........................................................................................................\n  # debug '^337^', v for v in lists_of_values\n  # urge '^776^', k for k in lists_of_keys\n  # help '^776^', k, lists_of_keys[ idx ] for k, idx in lists_of_facet_keys\n  # info '^776^', v for v in lists_of_facet_values\n  #.........................................................................................................\n  data_cache  = {\n    lists_of_keys\n    lists_of_values\n    lists_of_facet_keys\n    lists_of_facet_values\n    lists_of_key_value_pairs }\n  data_cache  = ( require 'letsfreezethat' ).freeze data_cache\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@using_letsfreezethat = ( cfg, sublibrary ) -> new Promise ( resolve ) =>\n  LFT = require '../../../apps/letsfreezethat'\n  switch sublibrary\n    when 'standard' then { lets, } = LFT\n    when 'nofreeze' then { lets, } = LFT.nofreeze\n    else throw new Error \"^bm/lft@223 unknown sublibrary #{rpr sublibrary}\"\n  # @types.validate.hengist_dataprv_cfg cfg\n  data          = @get_data cfg\n  count         = 0\n  resolve => new Promise ( resolve ) =>\n    for key_value_pairs, datom_idx in data.lists_of_key_value_pairs\n      facet_keys    = data.lists_of_facet_keys[   datom_idx ]\n      facet_values  = data.lists_of_facet_values[ datom_idx ]\n      probe         = LFT.lets Object.fromEntries key_value_pairs\n      probe = LFT.lets probe, ( probe ) ->\n        for key, key_idx in facet_keys\n          probe[ key ]  = facet_values[ key_idx ]\n      count++ ### NOTE counting datoms, not facets ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_letsfreezethat_standard    = ( cfg ) -> @using_letsfreezethat cfg, 'standard'\n@using_letsfreezethat_nofreeze    = ( cfg ) -> @using_letsfreezethat cfg, 'nofreeze'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@using_immutable = ( cfg ) -> new Promise ( resolve ) =>\n  { Map }       = require 'immutable'\n  count         = 0\n  data          = @get_data cfg\n  resolve => new Promise ( resolve ) =>\n    for key_value_pairs, datom_idx in data.lists_of_key_value_pairs\n      facet_keys    = data.lists_of_facet_keys[   datom_idx ]\n      facet_values  = data.lists_of_facet_values[ datom_idx ]\n      probe         = Map Object.fromEntries key_value_pairs\n      for key, key_idx in facet_keys\n        probe = probe.set key, facet_values[ key_idx ]\n      count++ ### NOTE counting datoms, not facets ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_hamt = ( cfg ) -> new Promise ( resolve ) =>\n  HAMT          = require 'hamt'\n  count         = 0\n  data          = @get_data cfg\n  resolve => new Promise ( resolve ) =>\n    for key_value_pairs, datom_idx in data.lists_of_key_value_pairs\n      facet_keys    = data.lists_of_facet_keys[   datom_idx ]\n      facet_values  = data.lists_of_facet_values[ datom_idx ]\n      probe         = HAMT.empty\n      probe         = probe.set key, value for [ key, value, ] in key_value_pairs\n      for key, key_idx in facet_keys\n        probe = probe.set key, facet_values[ key_idx ]\n      count++ ### NOTE counting datoms, not facets ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_mori = ( cfg ) -> new Promise ( resolve ) =>\n  M               = require 'mori'\n  count           = 0\n  data            = @get_data cfg\n  key_value_pairs = ( d.flat() for d in data.lists_of_key_value_pairs )\n  resolve => new Promise ( resolve ) =>\n    for kvps, datom_idx in key_value_pairs\n      facet_keys    = data.lists_of_facet_keys[   datom_idx ]\n      facet_values  = data.lists_of_facet_values[ datom_idx ]\n      probe         = M.hashMap kvps...\n      # debug '3338^', M.intoArray( M.keys probe ), M.intoArray( M.vals probe )\n      for key, key_idx in facet_keys\n        probe = M.assoc probe, key, facet_values[ key_idx ]\n      # debug '3338^', M.intoArray( M.keys probe ), M.intoArray( M.vals probe )\n      count++ ### NOTE counting datoms, not facets ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_immer = ( cfg ) -> new Promise ( resolve ) =>\n  IMMER         = require 'immer'\n  { produce, }  = IMMER\n  data          = @get_data cfg\n  count         = 0\n  resolve => new Promise ( resolve ) =>\n    for key_value_pairs, datom_idx in data.lists_of_key_value_pairs\n      facet_keys    = data.lists_of_facet_keys[   datom_idx ]\n      facet_values  = data.lists_of_facet_values[ datom_idx ]\n      probe         = produce ( Object.fromEntries key_value_pairs ), ( probe ) -> probe\n      # whisper '^331^', probe\n      probe         = produce probe, ( probe ) ->\n        for key, key_idx in facet_keys\n          probe[ key ]  = facet_values[ key_idx ]\n        return undefined\n      # whisper '^331^', probe\n      count++ ### NOTE counting datoms, not facets ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_plainjs_immutable = ( cfg ) -> new Promise ( resolve ) =>\n  # @types.validate.hengist_dataprv_cfg cfg\n  data          = @get_data cfg\n  count         = 0\n  resolve => new Promise ( resolve ) =>\n    for key_value_pairs, datom_idx in data.lists_of_key_value_pairs\n      facet_keys    = data.lists_of_facet_keys[   datom_idx ]\n      facet_values  = data.lists_of_facet_values[ datom_idx ]\n      probe         = Object.freeze Object.fromEntries key_value_pairs\n      probe         = { probe..., }\n      # whisper '^331^', probe\n      for key, key_idx in facet_keys\n        probe[ key ]  = facet_values[ key_idx ]\n      # whisper '^331^', probe\n      Object.freeze probe\n      count++ ### NOTE counting datoms, not facets ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_plainjs_mutable = ( cfg ) -> new Promise ( resolve ) =>\n  # @types.validate.hengist_dataprv_cfg cfg\n  data          = @get_data cfg\n  count         = 0\n  resolve => new Promise ( resolve ) =>\n    for key_value_pairs, datom_idx in data.lists_of_key_value_pairs\n      facet_keys    = data.lists_of_facet_keys[   datom_idx ]\n      facet_values  = data.lists_of_facet_values[ datom_idx ]\n      probe         = Object.fromEntries key_value_pairs\n      for key, key_idx in facet_keys\n        probe[ key ]  = facet_values[ key_idx ]\n      # whisper '^331^', probe\n      count++ ### NOTE counting datoms, not facets ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_ltfngrc2_assign_lets = ( cfg ) -> new Promise ( resolve ) =>\n  LFT           = require './letsfreezethat-NG-rc2'\n  # @types.validate.hengist_dataprv_cfg cfg\n  data          = @get_data cfg\n  count         = 0\n  resolve => new Promise ( resolve ) =>\n    for key_value_pairs, datom_idx in data.lists_of_key_value_pairs\n      facet_keys    = data.lists_of_facet_keys[   datom_idx ]\n      facet_values  = data.lists_of_facet_values[ datom_idx ]\n      probe         = LFT.assign Object.fromEntries key_value_pairs\n      # whisper '^331^', probe\n      probe         = LFT.lets probe, ( probe ) ->\n        for key, key_idx in facet_keys\n          probe[ key ]  = facet_values[ key_idx ]\n        return null\n      # whisper '^331^', probe\n      count++ ### NOTE counting datoms, not facets ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_using_ltfngrc2_thaw_freeze = ( cfg, lft_cfg ) -> new Promise ( resolve ) =>\n  LFT           = ( require './letsfreezethat-NG-rc2' ).new lft_cfg\n  # @types.validate.hengist_dataprv_cfg cfg\n  data          = @get_data cfg\n  count         = 0\n  resolve => new Promise ( resolve ) =>\n    for key_value_pairs, datom_idx in data.lists_of_key_value_pairs\n      facet_keys    = data.lists_of_facet_keys[   datom_idx ]\n      facet_values  = data.lists_of_facet_values[ datom_idx ]\n      probe         = LFT.assign Object.fromEntries key_value_pairs\n      # whisper '^331^', probe\n      probe         = LFT.thaw probe\n      for key, key_idx in facet_keys\n        probe[ key ]  = facet_values[ key_idx ]\n      probe         = LFT.freeze probe\n      count++ ### NOTE counting datoms, not facets ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_ltfngrc2_thaw_freeze_f1 = ( cfg ) -> @_using_ltfngrc2_thaw_freeze cfg, { freeze: true,  }\n@using_ltfngrc2_thaw_freeze_f0 = ( cfg ) -> @_using_ltfngrc2_thaw_freeze cfg, { freeze: false, }\n\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  bench       = BM.new_benchmarks()\n  # n           = 100000\n  # cfg         = { set_count: 100, datom_length: 5, change_facet_count: 3, }\n  cfg         = { set_count: 3, datom_length: 2, change_facet_count: 1, }\n  repetitions = 3\n  test_names  = [\n    'using_immer'\n    'using_letsfreezethat_standard'\n    'using_letsfreezethat_nofreeze'\n    'using_ltfngrc2_assign_lets'\n    'using_ltfngrc2_thaw_freeze_f1'\n    'using_ltfngrc2_thaw_freeze_f0'\n    'using_immutable'\n    'using_hamt'\n    'using_mori'\n    'using_plainjs_mutable'\n    'using_plainjs_immutable'\n    ]\n  # for _ in [ 1 .. repetitions ]\n  #   whisper '-'.repeat 108\n  #   data_cache = null\n  #   for test_name in CND.shuffle test_names\n  #     await BM.benchmark bench, cfg, false, @, test_name\n  for test_name in CND.shuffle test_names\n    whisper '-'.repeat 108\n    for _ in [ 1 .. repetitions ]\n      data_cache = null\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n  # await @demo_letsfreezethat_new_api()\n  # await @demo_immutable()\n  # await @demo_hamt()\n  # await @demo_mori()\n  # require 'hamt'\n\n###\n\ncfg: { set_count: 100, datom_length: 5, change_facet_count: 3, }\n00:09 HENGIST/BENCHMARKS  ▶  using_plainjs_mutable                             31,481 Hz   100.0 % │████████████▌│\n00:09 HENGIST/BENCHMARKS  ▶  using_ltfngrc2_thaw_freeze_f0                     22,900 Hz    72.7 % │█████████▏   │\n00:09 HENGIST/BENCHMARKS  ▶  using_plainjs_immutable                           20,245 Hz    64.3 % │████████     │\n00:09 HENGIST/BENCHMARKS  ▶  using_ltfngrc2_thaw_freeze_f1                     14,796 Hz    47.0 % │█████▉       │\n00:09 HENGIST/BENCHMARKS  ▶  using_ltfngrc2_assign_lets                        12,472 Hz    39.6 % │█████        │\n00:09 HENGIST/BENCHMARKS  ▶  using_letsfreezethat_nofreeze                      9,634 Hz    30.6 % │███▉         │\n00:09 HENGIST/BENCHMARKS  ▶  using_letsfreezethat_standard                      7,971 Hz    25.3 % │███▏         │\n00:09 HENGIST/BENCHMARKS  ▶  using_immutable                                    5,045 Hz    16.0 % │██           │\n00:09 HENGIST/BENCHMARKS  ▶  using_mori                                         4,939 Hz    15.7 % │██           │\n00:09 HENGIST/BENCHMARKS  ▶  using_hamt                                         3,395 Hz    10.8 % │█▍           │\n\n###"
  ]
}