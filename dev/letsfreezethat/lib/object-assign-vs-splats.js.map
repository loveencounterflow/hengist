{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/object-assign-vs-splats.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'LFT'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers'\ntest                      = require 'guy-test'\nLFT                       = require '../../../apps/letsfreezethat'\nIMMER                     = require 'immer'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( n ) ->\n  return data_cache if data_cache?\n  probes_A    = DATA.get_random_words n, null, true\n  probes_B    = DATA.get_random_words n, null, true\n  probes_A.push 'XXX' while probes_A.length < probes_B.length\n  probes_B.push 'XXX' while probes_B.length < probes_A.length\n  data_cache  = { probes_A, probes_B, }\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@using_object_assign_single = ( n, show ) -> new Promise ( resolve ) =>\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  probe         = {}\n  resolve => new Promise ( resolve ) =>\n    for word_A, idx in probes_A\n      probe     = Object.assign {}, probe, { [word_A]: probes_B[ idx ], }\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_splats_single = ( n, show ) -> new Promise ( resolve ) =>\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  probe         = null\n  resolve => new Promise ( resolve ) =>\n    for word_A, idx in probes_A\n      probe     = { probe..., { [word_A]: probes_B[ idx ], }..., }\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_object_assign_single_let = ( n, show ) -> new Promise ( resolve ) =>\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  `let probe = {};`\n  resolve => new Promise ( resolve ) =>\n    for word_A, idx in probes_A\n      `probe = Object.assign( {}, probe, { [word_A]: probes_B[ idx ], } );`\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_splats_single_let = ( n, show ) -> new Promise ( resolve ) =>\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  `let probe = null;`\n  resolve => new Promise ( resolve ) =>\n    for word_A, idx in probes_A\n      `probe = { ...probe, ...{ [word_A]: probes_B[ idx ], }, };`\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_object_assign_bulk = ( n, show ) -> new Promise ( resolve ) =>\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  probe         = {}\n  data          = {}\n  data[ w ]     = probes_B[ idx ] for w, idx in probes_A\n  resolve => new Promise ( resolve ) =>\n    probe   = Object.assign {}, probe, data\n    count  += probes_A.length\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_splats_bulk = ( n, show ) -> new Promise ( resolve ) =>\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  probe         = {}\n  data          = {}\n  data[ w ]     = probes_B[ idx ] for w, idx in probes_A\n  resolve => new Promise ( resolve ) =>\n    probe   = { probe..., data..., }\n    count  += probes_A.length\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  bench       = BM.new_benchmarks()\n  n           = 1000\n  # n           = 10\n  show        = false\n  repetitions = 3\n  test_names  = [\n    'using_splats_bulk'\n    'using_object_assign_bulk'\n    'using_splats_single'\n    'using_object_assign_single'\n    'using_splats_single_let'\n    'using_object_assign_single_let'\n    ]\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      await BM.benchmark bench, n, show, @, test_name\n  BM.show_totals bench\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n\n###\n\n# Verdict\n\n* Using splats (as in `d = { d..., e..., }`) is sometimes up to 10% faster, sometimes up to 10% slower than\n  doing the same using `Object.assign {}, d, e`, so we can always use either and discard the other, except\n  that `Object.assign()` has the added functionality of mutating an object value which splats syntax can't\n  do.\n\n* Using a loop to assign new properties one by one is 500 to 3000 times slower than doing the same in one\n  fell swoop, so it would seem advisable to always update as many properties in a single go as feasible.\n\n* V8 does not appear to be able to leverage functional considerations and behaves as if side effects could\n  always appear when doing object attribute assignments, even though the values used in tests are never used\n  again except for in a small loop. In other words, although the workings and the value changes within the\n  loops as well as the upated bindings are not observable (without a debugger) at all, V8 still performs all\n  the chores. A sufficiently smart functional language could conceivably just set `count = probes_A.length`\n  and be done in both the bulk assignment and single assignment setups.\n\n* Since we're doing these benchmarks to optimize for immutable value handling we cannot use `const` (except\n  when opting for using new names on each assignment as in `const d1 = 42; const d2 = d1 + 1` which would be\n  horribly tedious). Using `let` declarations over the `var` declarations used by CoffeeScript does seem to\n  afford a teeeny improvement in throughput which is hardly worth the effort of putting JS syntax islands\n  into one's code (ie. other considerations might favor `let` usage, but performance is not one of them).\n\n###\n"
  ]
}