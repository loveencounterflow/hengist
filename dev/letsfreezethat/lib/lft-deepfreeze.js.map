{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/lft-deepfreeze.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'LFT'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  debug '^2233^'\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@using_letsfreezethat = ( cfg, sublibrary ) -> new Promise ( resolve ) =>\n  LFT = require '../../../apps/letsfreezethat'\n  switch sublibrary\n    when 'standard' then { lets, } = LFT\n    when 'nofreeze' then { lets, } = LFT.nofreeze\n    else throw new Error \"^bm/lft@223 unknown sublibrary #{rpr sublibrary}\"\n  # @types.validate.hengist_dataprv_cfg cfg\n  data          = @get_data cfg\n  count         = 0\n  resolve => new Promise ( resolve ) =>\n    for key_value_pairs, datom_idx in data.lists_of_key_value_pairs\n      facet_keys    = data.lists_of_facet_keys[   datom_idx ]\n      facet_values  = data.lists_of_facet_values[ datom_idx ]\n      probe         = LFT.lets Object.fromEntries key_value_pairs\n      probe = LFT.lets probe, ( probe ) ->\n        for key, key_idx in facet_keys\n          probe[ key ]  = facet_values[ key_idx ]\n      count++ ### NOTE counting datoms, not facets ###\n    resolve count\n  return null\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  bench       = BM.new_benchmarks()\n  # n           = 100000\n  cfg         = { set_count: 100, datom_length: 5, change_facet_count: 3, }\n  # cfg         = { set_count: 3, datom_length: 2, change_facet_count: 1, }\n  repetitions = 3\n  test_names  = []\n  # for _ in [ 1 .. repetitions ]\n  #   whisper '-'.repeat 108\n  #   data_cache = null\n  #   for test_name in CND.shuffle test_names\n  #     await BM.benchmark bench, cfg, false, @, test_name\n  data_cache = null\n  for test_name in CND.shuffle test_names\n    whisper '-'.repeat 108\n    for _ in [ 1 .. repetitions ]\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n  # await @demo_letsfreezethat_new_api()\n  # await @demo_immutable()\n  # await @demo_hamt()\n  # await @demo_mori()\n  # require 'hamt'\n\n###\n\ncfg: { set_count: 100, datom_length: 5, change_facet_count: 3, }\n00:09 HENGIST/BENCHMARKS  ▶  using_plainjs_mutable                             31,481 Hz   100.0 % │████████████▌│\n00:09 HENGIST/BENCHMARKS  ▶  using_ltfng_thaw_freeze_cnfn                      26,939 Hz    85.6 % │██████████▊  │\n00:09 HENGIST/BENCHMARKS  ▶  using_ltfng_thaw_freeze_cyfn                      22,900 Hz    72.7 % │█████████▏   │\n00:09 HENGIST/BENCHMARKS  ▶  using_plainjs_immutable                           20,245 Hz    64.3 % │████████     │\n00:09 HENGIST/BENCHMARKS  ▶  using_ltfng_thaw_freeze_cyfy                      14,796 Hz    47.0 % │█████▉       │\n00:09 HENGIST/BENCHMARKS  ▶  using_ltfng_assign_lets                           12,472 Hz    39.6 % │█████        │\n00:09 HENGIST/BENCHMARKS  ▶  using_letsfreezethat_nofreeze                      9,634 Hz    30.6 % │███▉         │\n00:09 HENGIST/BENCHMARKS  ▶  using_letsfreezethat_standard                      7,971 Hz    25.3 % │███▏         │\n00:09 HENGIST/BENCHMARKS  ▶  using_immutable                                    5,045 Hz    16.0 % │██           │\n00:09 HENGIST/BENCHMARKS  ▶  using_mori                                         4,939 Hz    15.7 % │██           │\n00:09 HENGIST/BENCHMARKS  ▶  using_hamt                                         3,395 Hz    10.8 % │█▍           │\n\n###"
  ]
}