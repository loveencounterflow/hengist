{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/letsfreezethat-NG-rc2.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'LFTNG'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\nMultimix                  = require 'multimix'\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype()\nfrozen                    = Object.isFrozen\nassign                    = Object.assign\nshallow_freeze            = Object.freeze\nshallow_copy              = ( x ) -> assign ( if Array.isArray x then [] else {} ), x\n{ klona: deep_copy, }     = require 'klona/json'\n\n\n#===========================================================================================================\ntypes.declare 'mutable', ( x ) -> ( @isa.object x ) or ( @isa.list x )\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'lft_cfg', tests:\n  \"x is an object\":                       ( x ) -> @isa.object x\n  \"x.freeze is a boolean\":                ( x ) -> @isa.boolean x.freeze\n  ### NOTE the following restriction is only there to help API transition and will be omitted in the realease version ###\n  \"x.copy must not be used\":              ( x ) -> not x.copy?\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults =\n  cfg:\n    freeze: true\n\n#===========================================================================================================\ndeep_freeze = ( d ) ->\n  ### immediately return for zero, empty string, null, undefined, NaN, false, true: ###\n  return d if ( not d ) or d is true\n  ### thx to https://github.com/lukeed/klona/blob/master/src/json.js ###\n  switch ( Object::toString.call d )\n    when '[object Array]'\n      k = d.length\n      while ( k-- )\n        continue unless ( v = d[ k ] )? and ( ( typeof v ) is 'object' )\n        d[ k ] = deep_freeze v\n      return shallow_freeze d\n    when '[object Object]'\n      for k, v of d\n        continue unless v? and ( ( typeof v ) is 'object' )\n        d[ k ] = deep_freeze v\n      return shallow_freeze d\n  return d\n\n#===========================================================================================================\nf1_set = ( me, k, v ) ->\n  R       = shallow_copy me\n  R[ k ]  = v\n  return shallow_freeze R\n\n#-----------------------------------------------------------------------------------------------------------\nf0_set = ( me, k, v ) ->\n  R       = shallow_copy me\n  R[ k ]  = v\n  return R\n\n#===========================================================================================================\nf1_assign = ( me, P... ) -> deep_freeze deep_copy assign {}, me, P...\nf0_assign = ( me, P... ) ->             deep_copy assign {}, me, P...\n\n#===========================================================================================================\nf1_lets = ( original, modifier ) ->\n  draft = @thaw original\n  modifier draft if modifier?\n  return deep_freeze draft\n\n#-----------------------------------------------------------------------------------------------------------\nf0_lets = ( original, modifier ) ->\n  draft = @thaw original\n  modifier draft if modifier?\n  ### TAINT do not copy ###\n  return deep_copy draft\n\n#===========================================================================================================\nf1_freeze  = ( me ) -> deep_freeze me\nf0_freeze  = ( me ) -> me\n\n#===========================================================================================================\nf1_thaw    = ( me ) -> deep_copy me\nf0_thaw    = ( me ) -> deep_copy me\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Lft extends Multimix\n\n  #---------------------------------------------------------------------------------------------------------\n  @types: types\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    types.validate.lft_cfg @cfg = shallow_freeze { defaults.cfg..., cfg..., }\n    if @cfg.freeze\n      @set        = f1_set\n      @assign     = f1_assign\n      @lets       = f1_lets\n      @freeze     = f1_freeze\n      @thaw       = f1_thaw\n    else\n      @set        = f0_set\n      @assign     = f0_assign\n      @lets       = f0_lets\n      @freeze     = f0_freeze\n      @thaw       = f0_thaw\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  get: ( me, k ) -> me[ k ]\n\n\n\n############################################################################################################\nmodule.exports = LFT = new Lft()\nassign LFT, { Lft, }\n\n\n\n"
  ]
}