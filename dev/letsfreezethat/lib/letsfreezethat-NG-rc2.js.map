{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/letsfreezethat-NG-rc2.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,QAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,sBAAA,EAAA,sBAAA,EAAA,oBAAA,EAAA,0BAAA,EAAA,mBAAA,EAAA,oBAAA,EAAA,sBAAA,EAAA,sBAAA,EAAA,oBAAA,EAAA,0BAAA,EAAA,mBAAA,EAAA,oBAAA,EAAA,sBAAA,EAAA,sBAAA,EAAA,oBAAA,EAAA,0BAAA,EAAA,mBAAA,EAAA,oBAAA,EAAA,KAAA,EAAA,QAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,QAAA,GAA4B,OAAA,CAAQ,UAAR,EAf5B;;;EAiBA,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,MAAA,GAA4B,MAAM,CAAC;;EACnC,MAAA,GAA4B,MAAM,CAAC;;EACnC,CAAA;IAAE,KAAA,EAAO;EAAT,CAAA,GAA4B,OAAA,CAAQ,YAAR,CAA5B,EApBA;;;EAwBA,KAAK,CAAC,OAAN,CAAc,SAAd,EAAyB,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ,CAAF,CAAA,IAAqB,CAAE,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,CAAV,CAAF;EAA9B,CAAzB,EAxBA;;;EA2BA,KAAK,CAAC,OAAN,CAAc,SAAd,EAAyB;IAAA,KAAA,EACvB;MAAA,gBAAA,EAAwC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAAxC;MACA,qBAAA,EAAwC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAC,CAAC,IAAf;MAAT,CADxC;MAEA,uBAAA,EAAwC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAC,CAAC,MAAf;MAAT,CAFxC;MAGA,sCAAA,EAAwC,QAAA,CAAE,CAAF,CAAA;QAAS,IAAG,CAAI,CAAC,CAAC,IAAT;iBAAmB,CAAI,CAAC,CAAC,OAAzB;SAAA,MAAA;iBAAqC,KAArC;;MAAT;IAHxC;EADuB,CAAzB,EA3BA;;;EAkCA,QAAA,GACE;IAAA,GAAA,EACE;MAAA,IAAA,EAAQ,IAAR;MACA,MAAA,EAAQ;IADR;EADF,EAnCF;;;EAwCA,mBAAA,GAAsB,QAAA,CAAE,EAAF,EAAM,CAAN,EAAS,CAAT,CAAA;AACtB,QAAA;IAAE,CAAA,GAAU,IAAA,CAAK,EAAL;IACV,CAAC,CAAE,CAAF,CAAD,GAAU;AACV,WAAO,MAAM,CAAC,MAAP,CAAc,CAAd;EAHa,EAxCtB;;;EA8CA,mBAAA,GAAsB,QAAA,CAAE,EAAF,EAAM,CAAN,EAAS,CAAT,CAAA;AACtB,QAAA;IAAE,CAAA,GAAU,IAAA,CAAK,EAAL;IACV,CAAC,CAAE,CAAF,CAAD,GAAU;AACV,WAAO;EAHa,EA9CtB;;;EAoDA,mBAAA,GAAsB,QAAA,CAAE,EAAF,EAAM,CAAN,EAAS,CAAT,CAAA;IACpB,EAAE,CAAE,CAAF,CAAF,GAAU;AACV,WAAO;EAFa,EApDtB;;;EAyDA,0BAAA,GAA8B,QAAA,CAAA,GAAE,CAAF,CAAA;WAAY,MAAM,CAAC,MAAP,CAAc,IAAA,CAAK,MAAA,CAAO,CAAA,CAAP,EAAW,GAAA,CAAX,CAAL,CAAd;EAAZ;;EAC9B,0BAAA,GAA8B,QAAA,CAAA,GAAE,CAAF,CAAA;WAA0B,IAAA,CAAK,MAAA,CAAO,CAAA,CAAP,EAAW,GAAA,CAAX,CAAL;EAA1B;;EAC9B,0BAAA,GAA8B,QAAA,CAAA,GAAE,CAAF,CAAA;WAA+B,MAAA,CAAO,CAAA,CAAP,EAAW,GAAA,CAAX;EAA/B,EA3D9B;;;EA8DA,sBAAA,GAA8B,QAAA,CAAE,EAAF,EAAA,GAAM,CAAN,CAAA;WAAgB,MAAM,CAAC,MAAP,CAAc,IAAA,CAAK,MAAA,CAAO,CAAA,CAAP,EAAW,EAAX,EAAe,GAAA,CAAf,CAAL,CAAd;EAAhB;;EAC9B,sBAAA,GAA8B,QAAA,CAAE,EAAF,EAAA,GAAM,CAAN,CAAA;WAA8B,IAAA,CAAK,MAAA,CAAO,CAAA,CAAP,EAAW,EAAX,EAAe,GAAA,CAAf,CAAL;EAA9B;;EAC9B,sBAAA,GAA8B,QAAA,CAAE,EAAF,EAAA,GAAM,CAAN,CAAA;WAAmC,MAAA,CAAW,EAAX,EAAe,GAAA,CAAf;EAAnC,EAhE9B;;;EAmEA,oBAAA,GAAuB,QAAA,CAAE,QAAF,EAAY,QAAZ,CAAA;AACvB,QAAA;IAAE,KAAA,GAAQ,IAAC,CAAA,IAAD,CAAM,QAAN;IACR,IAAkB,gBAAlB;MAAA,QAAA,CAAS,KAAT,EAAA;;AACA,WAAO,MAAM,CAAC,MAAP,CAAc,KAAd;EAHc,EAnEvB;;;EAyEA,oBAAA,GAAuB,QAAA,CAAE,QAAF,EAAY,QAAZ,CAAA;AACvB,QAAA;IAAE,KAAA,GAAQ,IAAC,CAAA,IAAD,CAAM,QAAN;IACR,IAAkB,gBAAlB;MAAA,QAAA,CAAS,KAAT,EAAA;;AACA,WAAO,IAAA,CAAK,KAAL;EAHc,EAzEvB;;;EA+EA,oBAAA,GAAuB,QAAA,CAAE,QAAF,EAAY,QAAZ,CAAA;AACvB,QAAA;IAAE,KAAA,GAAQ,IAAC,CAAA,IAAD,CAAM,QAAN;IACR,IAAkB,gBAAlB;MAAA,QAAA,CAAS,KAAT,EAAA;;AACA,WAAO;EAHc,EA/EvB;;;EAsFA,sBAAA,GAA0B,QAAA,CAAE,EAAF,CAAA;WAAU,MAAM,CAAC,MAAP,CAAc,EAAd;EAAV;;EAC1B,sBAAA,GAA0B,QAAA,CAAE,EAAF,CAAA;WAAU;EAAV;;EAC1B,sBAAA,GAA0B,QAAA,CAAE,EAAF,CAAA;WAAU;EAAV,EAxF1B;;;;EA4FA,oBAAA,GAA0B,QAAA,CAAE,EAAF,CAAA;WAAU,IAAA,CAAK,EAAL;EAAV;;EAC1B,oBAAA,GAA0B,QAAA,CAAE,EAAF,CAAA;WAAU,IAAA,CAAK,EAAL;EAAV;;EAC1B,oBAAA,GAA0B,QAAA,CAAE,EAAF,CAAA;IAAU,IAAK,MAAA,CAAO,EAAP,CAAL;aAAsB,IAAA,CAAK,EAAL,EAAtB;KAAA,MAAA;aAAmC,GAAnC;;EAAV;;EAMpB;;;;IAAN,MAAA,IAAA,QAAkB,SAAlB,CAAA;;MAME,WAAa,CAAE,GAAF,CAAA;aACX,CAAA;QACA,KAAK,CAAC,QAAQ,CAAC,OAAf,CAAuB,IAAC,CAAA,GAAD,GAAO,MAAM,CAAC,MAAP,CAAc,CAAE,GAAA,QAAQ,CAAC,GAAX,EAAmB,GAAA,GAAnB,CAAd,CAA9B;QACA,IAAG,IAAC,CAAA,GAAG,CAAC,IAAR;UACE,IAAG,IAAC,CAAA,GAAG,CAAC,MAAR;YACE,IAAC,CAAA,UAAD,GAAc;YACd,IAAC,CAAA,GAAD,GAAc;YACd,IAAC,CAAA,MAAD,GAAc;YACd,IAAC,CAAA,IAAD,GAAc;YACd,IAAC,CAAA,MAAD,GAAc;YACd,IAAC,CAAA,IAAD,GAAc,qBANhB;WAAA,MAAA;YAQE,IAAC,CAAA,UAAD,GAAc;YACd,IAAC,CAAA,GAAD,GAAc;YACd,IAAC,CAAA,MAAD,GAAc;YACd,IAAC,CAAA,IAAD,GAAc;YACd,IAAC,CAAA,MAAD,GAAc;YACd,IAAC,CAAA,IAAD,GAAc,qBAbhB;WADF;SAAA,MAAA;UAgBE,IAAG,IAAC,CAAA,GAAG,CAAC,MAAR;;YAEE,MAAM,IAAI,KAAJ,CAAU,2DAAV,EAFR;WAAA,MAAA;YAIE,IAAC,CAAA,UAAD,GAAc;YACd,IAAC,CAAA,GAAD,GAAc;YACd,IAAC,CAAA,MAAD,GAAc;YACd,IAAC,CAAA,IAAD,GAAc;YACd,IAAC,CAAA,MAAD,GAAc;YACd,IAAC,CAAA,IAAD,GAAc,qBAThB;WAhBF;;AA0BA,eAAO;MA7BI,CAJf;;;MAoCE,GAAK,CAAE,EAAF,EAAM,CAAN,CAAA;eAAa,EAAE,CAAE,CAAF;MAAf;;IAtCP;;;IAGE,GAAC,CAAA,KAAD,GAAQ;;;;gBAvGV;;;EA+IA,MAAM,CAAC,OAAP,GAAiB,GAAA,GAAM,IAAI,GAAJ,CAAA;;EACvB,MAAA,CAAO,GAAP,EAAY,CAAE,GAAF,CAAZ;AAhJA",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'LFTNG'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\nMultimix                  = require 'multimix'\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype()\nfrozen                    = Object.isFrozen\nassign                    = Object.assign\n{ klona: copy, }          = require 'klona/json'\n\n\n#===========================================================================================================\ntypes.declare 'mutable', ( x ) -> ( @isa.object x ) or ( @isa.list x )\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'lft_cfg', tests:\n  \"x is an object\":                       ( x ) -> @isa.object x\n  \"x.copy is a boolean\":                  ( x ) -> @isa.boolean x.copy\n  \"x.freeze is a boolean\":                ( x ) -> @isa.boolean x.freeze\n  \"x.copy: false implies x.freeze false\": ( x ) -> if not x.copy then not x.freeze else true\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults =\n  cfg:\n    copy:   true\n    freeze: true\n\n#===========================================================================================================\ncopy_y_freeze_y$set = ( me, k, v ) ->\n  R       = copy me\n  R[ k ]  = v\n  return Object.freeze R\n\n#-----------------------------------------------------------------------------------------------------------\ncopy_y_freeze_n$set = ( me, k, v ) ->\n  R       = copy me\n  R[ k ]  = v\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\ncopy_n_freeze_n$set = ( me, k, v ) ->\n  me[ k ] = v\n  return me\n\n#===========================================================================================================\ncopy_y_freeze_y$new_object  = ( P... ) -> Object.freeze copy assign {}, P...\ncopy_y_freeze_n$new_object  = ( P... ) ->               copy assign {}, P...\ncopy_n_freeze_n$new_object  = ( P... ) ->                    assign {}, P...\n\n#===========================================================================================================\ncopy_y_freeze_y$assign      = ( me, P... ) -> Object.freeze copy assign {}, me, P...\ncopy_y_freeze_n$assign      = ( me, P... ) ->               copy assign {}, me, P...\ncopy_n_freeze_n$assign      = ( me, P... ) ->                    assign     me, P...\n\n#===========================================================================================================\ncopy_y_freeze_y$lets = ( original, modifier ) ->\n  draft = @thaw original\n  modifier draft if modifier?\n  return Object.freeze draft\n\n#-----------------------------------------------------------------------------------------------------------\ncopy_y_freeze_n$lets = ( original, modifier ) ->\n  draft = @thaw original\n  modifier draft if modifier?\n  return copy draft\n\n#-----------------------------------------------------------------------------------------------------------\ncopy_n_freeze_n$lets = ( original, modifier ) ->\n  draft = @thaw original\n  modifier draft if modifier?\n  return draft\n\n\n#===========================================================================================================\ncopy_y_freeze_y$freeze  = ( me ) -> Object.freeze me\ncopy_y_freeze_n$freeze  = ( me ) -> me\ncopy_n_freeze_n$freeze  = ( me ) -> me\n\n#===========================================================================================================\n### NOTE with `{ copy: false, }` the `thaw()` method will still make a copy if value is frozen ###\ncopy_y_freeze_y$thaw    = ( me ) -> copy me\ncopy_y_freeze_n$thaw    = ( me ) -> copy me\ncopy_n_freeze_n$thaw    = ( me ) -> if ( frozen me ) then copy me else me\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Lft extends Multimix\n\n  #---------------------------------------------------------------------------------------------------------\n  @types: types\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    types.validate.lft_cfg @cfg = Object.freeze { defaults.cfg..., cfg..., }\n    if @cfg.copy\n      if @cfg.freeze\n        @new_object = copy_y_freeze_y$new_object\n        @set        = copy_y_freeze_y$set\n        @assign     = copy_y_freeze_y$assign\n        @lets       = copy_y_freeze_y$lets\n        @freeze     = copy_y_freeze_y$freeze\n        @thaw       = copy_y_freeze_y$thaw\n      else\n        @new_object = copy_y_freeze_n$new_object\n        @set        = copy_y_freeze_n$set\n        @assign     = copy_y_freeze_n$assign\n        @lets       = copy_y_freeze_n$lets\n        @freeze     = copy_y_freeze_n$freeze\n        @thaw       = copy_y_freeze_n$thaw\n    else\n      if @cfg.freeze\n        ### TAINT move to `types.validate.lft_settings cfg` ###\n        throw new Error \"^3446^ cannot use { copy: false, } with { freeze: true, }\"\n      else\n        @new_object = copy_n_freeze_n$new_object\n        @set        = copy_n_freeze_n$set\n        @assign     = copy_n_freeze_n$assign\n        @lets       = copy_n_freeze_n$lets\n        @freeze     = copy_n_freeze_n$freeze\n        @thaw       = copy_n_freeze_n$thaw\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  get: ( me, k ) -> me[ k ]\n\n\n\n############################################################################################################\nmodule.exports = LFT = new Lft()\nassign LFT, { Lft, }\n\n\n\n"
  ]
}