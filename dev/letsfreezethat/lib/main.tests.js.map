{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "'use strict'\nassert                    = ( require 'assert' ).strict\nlog                       = console.log\njr                        = JSON.stringify\njoin_paths                = ( require 'path' ).join\nlft_path                  = '../../../apps/letsfreezethat'\n{ type_of, }              = require join_paths lft_path, 'lib/helpers'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"freeze, modify object copy\" ] = ->\n  { lets, freeze, thaw, fix, } = require lft_path\n  d = lets { foo: 'bar', nested: [ 2, 3, 5, 7, ], u: { v: { w: 'x', }, }, }\n  e = lets d, ( d ) -> d.nested.push 11\n  assert.deepEqual d, ( { foo: 'bar', nested: [ 2, 3, 5, 7 ], u: { v: { w: 'x', }, }, }     ), '^lft@1^'\n  assert.deepEqual e, ( { foo: 'bar', nested: [ 2, 3, 5, 7, 11 ], u: { v: { w: 'x', }, }, } ), '^lft@2^'\n  assert.ok ( d isnt e                                                        ), '^lft@3^'\n  assert.ok ( Object.isFrozen d                                               ), '^lft@4^'\n  assert.ok ( Object.isFrozen d.nested                                        ), '^lft@5^'\n  assert.ok ( Object.isFrozen d.u                                             ), '^lft@6^'\n  assert.ok ( Object.isFrozen d.u.v                                           ), '^lft@7^'\n  assert.ok ( Object.isFrozen d.u.v.w                                         ), '^lft@8^'\n  assert.ok ( Object.isFrozen e                                               ), '^lft@9^'\n  assert.ok ( Object.isFrozen e.nested                                        ), '^lft@10^'\n  assert.ok ( Object.isFrozen e.u                                             ), '^lft@11^'\n  assert.ok ( Object.isFrozen e.u.v                                           ), '^lft@12^'\n  assert.ok ( Object.isFrozen e.u.v.w                                         ), '^lft@13^'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"null, primitive values are kept as-is\" ] = ->\n  { lets, freeze, thaw, fix, } = require lft_path\n  ### from SQLite File Mirror: ###\n  defaults = lets\n    mirrors:\n      read_method: 'batches_of_sql_literals_async'\n    source:\n      one:          1\n      a:            'A'\n      nothing:      null\n  assert.deepEqual defaults.source.one,     1,    '^lft@14^'\n  assert.deepEqual defaults.source.a,       'A',  '^lft@15^'\n  assert.deepEqual defaults.source.nothing, null, '^lft@16^'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"use nofreeze option for speedup\" ] = ->\n  { lets, freeze, thaw, fix, } = ( require lft_path ).nofreeze\n  d = lets { foo: 'bar', nested: [ 2, 3, 5, 7, ], }\n  e = lets d, ( d ) -> d.nested.push 11\n  assert.deepEqual d, ( { foo: 'bar', nested: [ 2, 3, 5, 7 ] }                ), '^lft@17^'\n  assert.deepEqual e, ( { foo: 'bar', nested: [ 2, 3, 5, 7, 11 ] }            ), '^lft@18^'\n  assert.ok ( d isnt e                                                        ), '^lft@19^'\n  assert.ok ( not Object.isFrozen d                                           ), '^lft@20^'\n  assert.ok ( not Object.isFrozen d.nested                                    ), '^lft@21^'\n  assert.ok ( not Object.isFrozen e                                           ), '^lft@22^'\n  assert.ok ( not Object.isFrozen e.nested                                    ), '^lft@23^'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"circular references cause custom error\" ] = ->\n  { lets, freeze, thaw, fix, } = require lft_path\n  d = { a: 42, }\n  assert.throws ( -> d = lets d, ( d ) -> d.d = d ), { message: /unable to freeze circular/ }, '^lft@24^'\n  d = [ 4, 8, 16, ]\n  # d = lets d, ( d ) -> d.push d\n  assert.throws ( -> d = lets d, ( d ) -> d.push d ), { message: /unable to freeze circular/ }, '^lft@25^'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"fix select attributes\" ] = ->\n  { lets, freeze, thaw, fix, } = require lft_path\n  d   = { foo: 'bar', }\n  e   = fix d, 'sql', { query: \"select * from main;\", }\n  assert.ok ( d is e ),                                                       '^lft@26^'\n  assert.ok ( not Object.isFrozen d ),                                        '^lft@27^'\n  assert.deepEqual ( Object.keys d  ), [ 'foo', 'sql', ],                     '^lft@28^'\n  assert.deepEqual d, { foo: 'bar', sql: { query: 'select * from main;' } },  '^lft@29^'\n  assert.throws ( -> d.sql       = 'other' ), { message: /Cannot assign to read only property/,   }, '^lft@30^'\n  assert.throws ( -> d.sql.query = 'other' ), { message: /Cannot assign to read only property/, }, '^lft@31^'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"use partial freezing (1/3)\" ] = ->\n  ### Pretest: Ensure invariant behavior for non-special attributes (copy of first test, above): ###\n  { lets, freeze, thaw, fix, } = ( require lft_path ).partial\n  is_readonly = ( d, key ) ->\n    descriptor = Object.getOwnPropertyDescriptor d, key\n    return ( not descriptor.writable ) and ( not descriptor.configurable )\n  #.........................................................................................................\n  matcher_a = { foo: 'bar',   nested: [ 2, 3, 5, 7,          ], u: { v: { w: 'x',     }, }, }\n  matcher_b = { foo: 'bar',   nested: [ 2, 3, 5, 7, 11,      ], u: { v: { w: 'x',     }, }, }\n  matcher_c = { foo: 'other', nested: [ 2, 3, 5, 7, 'other', ], u: { v: { w: 'other', }, }, blah: 'other', }\n  d         = lets matcher_a\n  e         = lets d, ( d ) -> d.nested.push 11\n  assert.ok ( d isnt e                      ), '^lft@32^'\n  assert.ok ( d isnt matcher_a              ), '^lft@33^'\n  assert.deepEqual d, matcher_a,               '^lft@34^'\n  assert.deepEqual e, matcher_b,               '^lft@35^'\n  assert.ok ( is_readonly d,      'nested'  ), '^lft@36^'\n  assert.ok ( is_readonly d,      'u'       ), '^lft@37^'\n  assert.ok ( is_readonly d.u,    'v'       ), '^lft@38^'\n  assert.ok ( is_readonly d.u.v,  'w'       ), '^lft@39^'\n  assert.ok ( Object.isSealed d             ), '^lft@40^'\n  assert.ok ( Object.isSealed d.nested      ), '^lft@41^'\n  assert.ok ( Object.isSealed d.u           ), '^lft@42^'\n  assert.ok ( Object.isSealed d.u.v         ), '^lft@43^'\n  assert.ok ( Object.isSealed e             ), '^lft@44^'\n  assert.ok ( Object.isSealed e.nested      ), '^lft@45^'\n  assert.ok ( Object.isSealed e.u           ), '^lft@46^'\n  assert.ok ( Object.isSealed e.u.v         ), '^lft@47^'\n  assert.throws ( -> d.nested.push 'other' ), { message: /Cannot add property/,             }, '^lft@48^'\n  assert.throws ( -> d.foo  = 'other' ), { message: /Cannot assign to read only property/,  }, '^lft@49^'\n  assert.throws ( -> d.blah = 'other' ), { message: /Cannot add property/,                  }, '^lft@50^'\n  #.........................................................................................................\n  d2 = lets d, ( d_copy ) ->\n    assert.ok ( d isnt d_copy ),  '^lft@51^'\n    assert.ok ( not is_readonly d_copy,      'nested'  ), '^lft@52^'\n    assert.ok ( not is_readonly d_copy,      'u'       ), '^lft@53^'\n    assert.ok ( not is_readonly d_copy.u,    'v'       ), '^lft@54^'\n    assert.ok ( not is_readonly d_copy.u.v,  'w'       ), '^lft@55^'\n    assert.ok ( not Object.isSealed d_copy             ), '^lft@56^'\n    assert.ok ( not Object.isSealed d_copy.nested      ), '^lft@57^'\n    assert.ok ( not Object.isSealed d_copy.u           ), '^lft@58^'\n    assert.ok ( not Object.isSealed d_copy.u.v         ), '^lft@59^'\n    try d_copy.nested.push 'other' catch e then throw new Error '^lft@60^ ' + e.message\n    try d_copy.foo  = 'other'      catch e then throw new Error '^lft@61^ ' + e.message\n    try d_copy.blah = 'other'      catch e then throw new Error '^lft@62^ ' + e.message\n    try d_copy.u.v.w = 'other'     catch e then throw new Error '^lft@63^ ' + e.message\n  assert.ok ( d2 isnt d ), '^lft@64^'\n  assert.deepEqual d,  matcher_a,               '^lft@65^'\n  assert.deepEqual d2, matcher_c,               '^lft@66^'\n  #.........................................................................................................\n  d_thawed = thaw d\n  assert.deepEqual d_thawed, d,                           '^lft@67^'\n  assert.ok ( d isnt d_thawed ),                          '^lft@68^'\n  assert.ok ( not is_readonly d_thawed,      'nested'  ), '^lft@69^'\n  assert.ok ( not is_readonly d_thawed,      'u'       ), '^lft@70^'\n  assert.ok ( not is_readonly d_thawed.u,    'v'       ), '^lft@71^'\n  assert.ok ( not is_readonly d_thawed.u.v,  'w'       ), '^lft@72^'\n  assert.ok ( not Object.isSealed d_thawed             ), '^lft@73^'\n  assert.ok ( not Object.isSealed d_thawed.nested      ), '^lft@74^'\n  assert.ok ( not Object.isSealed d_thawed.u           ), '^lft@75^'\n  assert.ok ( not Object.isSealed d_thawed.u.v         ), '^lft@76^'\n  try d_thawed.nested.push 'other' catch e then throw new Error '^lft@77^ ' + e.message\n  try d_thawed.foo  = 'other'      catch e then throw new Error '^lft@78^ ' + e.message\n  try d_thawed.blah = 'other'      catch e then throw new Error '^lft@79^ ' + e.message\n  try d_thawed.u.v.w = 'other'     catch e then throw new Error '^lft@80^ ' + e.message\n  assert.deepEqual d_thawed, matcher_c,               '^lft@81^'\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"use partial freezing (2/3)\" ] = ->\n  ### Pretest: test approximate 'manual' implementation of partial freezing, implemented using object\n  sealing and selective `fix()`ing of attributes: ###\n  { lets, freeze, thaw, fix, } = ( require lft_path ).partial\n  #.........................................................................................................\n  counter = 0\n  d       = { foo: 'bar', nested: [ 2, 3, 5, 7, ], u: { v: { w: 'x', }, }, }\n  e       = d.nested.push 11\n  open_vz = { a: 123, }\n  Object.defineProperty d, 'foo',    { enumerable: true, writable: false, configurable: false, value: freeze d.foo }\n  Object.defineProperty d, 'nested', { enumerable: true, writable: false, configurable: false, value: freeze d.nested }\n  Object.defineProperty d, 'count',\n    enumerable:     true\n    configurable:   false\n    get:            -> ++counter\n    set:            ( value ) -> counter = value\n  Object.defineProperty d, 'open_vz',\n    enumerable:     true\n    configurable:   false\n    get:            -> open_vz\n  # log Object.getOwnPropertyDescriptors d\n  Object.seal d\n  #.........................................................................................................\n  assert.ok ( ( type_of ( Object.getOwnPropertyDescriptor d, 'count' ).set ) is 'function' ),   '^lft@82^'\n  assert.ok ( Object.isSealed d ),                                                              '^lft@83^'\n  assert.deepEqual ( Object.keys d ), [ 'foo', 'nested', 'u', 'count', 'open_vz', ],            '^lft@84^'\n  assert.ok ( d.count is 1                  ), '^lft@85^'\n  assert.ok ( d.count is 2                  ), '^lft@86^'\n  assert.ok ( ( d.count = 42 ) is 42        ), '^lft@87^'\n  assert.ok ( d.count is 43                 ), '^lft@88^'\n  assert.throws ( -> d.blah = 'other' ), { message: /Cannot add property blah, object is not extensible/, }, '^lft@89^'\n  assert.throws ( -> d.foo  = 'other' ), { message: /Cannot assign to read only property/,                }, '^lft@90^'\n  try d.open_vz.new_property = 42 catch e then throw new Error '^lft@91^ ' + e.message\n  assert.deepEqual d.open_vz.new_property, 42, '^lft@92^'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"use partial freezing (3/3)\" ] = ->\n  { lets, freeze, thaw, fix, lets_compute, } = ( require lft_path ).partial\n  #.........................................................................................................\n  counter = 0\n  open_vz = { a: 123, }\n  d       = lets { foo: 'bar', nested: [ 2, 3, 5, 7, ], u: { v: { w: 'x', }, }, }\n  e       = lets d, ( d ) -> d.nested.push 11\n  d       = lets_compute d, 'count', ( -> ++counter ), ( ( x ) -> counter = x )\n  d       = lets_compute d, 'open_vz', ( -> open_vz )\n  assert.ok ( ( type_of ( Object.getOwnPropertyDescriptor d, 'count' ).set ) is 'function' ),   '^lft@93^'\n  assert.ok ( d.count is 1                  ), '^lft@94^'\n  assert.ok ( d.count is 2                  ), '^lft@95^'\n  assert.ok ( ( d.count = 42 ) is 42        ), '^lft@96^'\n  assert.ok ( d.count is 43                 ), '^lft@97^'\n  assert.ok ( d.open_vz is open_vz          ), '^lft@98^'\n  try d.open_vz.new_property = 'new value' catch e then throw new Error '^lft@99^ ' + e.message\n  assert.ok ( d.open_vz is open_vz          ), '^lft@100^'\n  assert.deepEqual open_vz, { a: 123, new_property: 'new value', }, '^lft@101^'\n  assert.throws ( -> d.blah = 'other' ), { message: /Cannot add property blah, object is not extensible/, }, '^lft@102^'\n  assert.throws ( -> d.foo  = 'other' ), { message: /Cannot assign to read only property/,                }, '^lft@103^'\n  lets d, ( d ) ->\n    dsc = Object.getOwnPropertyDescriptor d, 'count'\n    assert.deepEqual dsc.configurable, true, '^lft@104^'\n  lets d, ( d ) ->\n    dsc = Object.getOwnPropertyDescriptor d, 'open_vz'\n    assert.deepEqual dsc.configurable, true, '^lft@105^'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"may pass in null to lets_compute as getter, setter\" ] = ->\n  { lets, lets_compute, } = ( require lft_path ).partial\n  # log '^!!!!!!!!!!!!!!!!!!!!!!!!!!^'; return\n  #.........................................................................................................\n  counter = 0\n  d       = lets { foo: 'bar', }\n  d       = lets_compute d, 'count', ( -> ++counter )\n  assert.ok ( d.count is 1                  ), '^lft@106^'\n  assert.ok ( d.count is 2                  ), '^lft@107^'\n  #.........................................................................................................\n  counter = 0\n  d       = lets { foo: 'bar', }\n  d       = lets_compute d, 'count', ( -> ++counter ), null\n  assert.ok ( d.count is 1                  ), '^lft@108^'\n  assert.ok ( d.count is 2                  ), '^lft@109^'\n  #.........................................................................................................\n  counter = 0\n  d       = lets { foo: 'bar', }\n  d       = lets_compute d, 'count', null, ( -> ++counter )\n  #.........................................................................................................\n  counter = 0\n  d       = lets { foo: 'bar', }\n  assert.throws ( -> lets_compute d, 'count', null, null ), /must define getter or setter/, '^lft@110^'\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"functions are kept as functions\" ] = ->\n  #.........................................................................................................\n  do =>\n    { lets, freeze, thaw, lets_compute, } = ( require lft_path ).partial\n    d = lets { e: { f: ( ( x ) -> x ** 2 ) } }\n    assert.deepEqual ( type_of d.e.f ), 'function', '^lft@111^'\n    assert.deepEqual ( d.e.f 42 ), 42 * 42\n  #.........................................................................................................\n  do =>\n    { lets, freeze, thaw, lets_compute, } = ( require lft_path ).nofreeze\n    d = lets { e: { f: ( ( x ) -> x ** 2 ) } }\n    assert.deepEqual ( type_of d.e.f ), 'function', '^lft@112^'\n    assert.deepEqual ( d.e.f 42 ), 42 * 42\n  #.........................................................................................................\n  do =>\n    { lets, freeze, thaw, lets_compute, } = ( require lft_path )\n    d = lets { e: { f: ( ( x ) -> x ** 2 ) } }\n    assert.deepEqual ( type_of d.e.f ), 'function', '^lft@113^'\n    assert.deepEqual ( d.e.f 42 ), 42 * 42\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"lets_compute keeps object identity\" ] = ->\n  { lets, freeze, thaw, lets_compute, } = ( require lft_path ).partial\n  #.........................................................................................................\n  class Otherclass\n    constructor: ->\n      @this_is_otherclass = true\n    g: -> ( 'Otherclass.' + k for k of @ )\n  #.........................................................................................................\n  class Someclass extends Otherclass\n    constructor: ->\n      super()\n      @this_is_someclass = true\n    f: -> ( 'Someclass.' + k for k of @ )\n  #.........................................................................................................\n  test_something_ok = ( x, n ) ->\n    tests = [\n      -> assert.ok ( ( ( require 'util' ).inspect x ).startsWith 'Someclass' ), '^lft@114^' + \"(##{n})\"\n      -> assert.deepEqual ( Object.getOwnPropertyNames x ), [ 'this_is_otherclass', 'this_is_someclass' ], '^lft@115^' + \"(##{n})\"\n      -> assert.ok     x.hasOwnProperty 'this_is_otherclass',  '^lft@116^' + \"(##{n})\"\n      -> assert.ok     x.hasOwnProperty 'this_is_someclass',   '^lft@117^' + \"(##{n})\"\n      -> assert.ok not x.hasOwnProperty 'f',                   '^lft@118^' + \"(##{n})\"\n      -> assert.ok not x.hasOwnProperty 'g',                   '^lft@119^' + \"(##{n})\"\n      -> assert.deepEqual x.g(), [ 'Otherclass.this_is_otherclass', 'Otherclass.this_is_someclass' ], '^lft@120^' + \"(##{n})\"\n      -> assert.deepEqual x.f(), [ 'Someclass.this_is_otherclass', 'Someclass.this_is_someclass' ], '^lft@121^' + \"(##{n})\"\n      ]\n    error_count = 0\n    for test, idx in tests\n      # log test.toString()\n      try\n        test()\n      catch error\n        error_count++\n        log '^lft@122^', \"ERROR:\", error.message\n    if error_count > 0\n      assert.ok false, \"^lft@123^(##{n}) #{error_count} tests failed\"\n    return null\n  #.........................................................................................................\n  tests = [\n    #.......................................................................................................\n    ->\n      something = new Someclass\n      test_something_ok something, '1'\n    #.......................................................................................................\n    ->\n      something = new Someclass\n      d = lets {}\n      d = lets_compute d, 'something', ( -> something )\n      test_something_ok d.something, '2'\n    #.......................................................................................................\n    ->\n      something = new Someclass\n      d = lets {}\n      d = lets_compute d, 'something', ( -> something )\n      d = freeze d\n      test_something_ok d.something, '3'\n    #.......................................................................................................\n    ->\n      something = new Someclass\n      d = lets {}\n      d = lets_compute d, 'something', ( -> something )\n      d = thaw d\n      test_something_ok d.something, '4'\n    #.......................................................................................................\n    ->\n      something = new Someclass\n      d = lets {}\n      d = lets_compute d, 'something', ( -> something )\n      d = lets d, ( d ) -> d.other = 42\n      test_something_ok d.something, '5'\n    ]\n  #.........................................................................................................\n  do =>\n    error_count = 0\n    for test in tests\n      try\n        test()\n      catch error\n        error_count++\n        log '^lft@124^', \"ERROR:\", error.message\n    if error_count > 0\n      assert.ok false, \"^lft@125^ #{error_count} tests failed\"\n    return null\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"breadboard mode\" ] = ->\n  { lets, freeze, thaw, lets_compute, } = ( require lft_path ).breadboard\n  e = {}\n  d = { e, }\n  Object.preventExtensions d\n  assert.throws ( -> d.x = 42 ), { message: /object is not extensible/ }, '^lft@126^'\n  Object.defineProperty d, 'e', { writable: true, }\n  #.........................................................................................................\n  to  = { x: 42, }\n  tp  = new Proxy to,\n    get: ( target, key ) -> return if ( R = target[ key ] )? then R else 'NOTFOUND'\n    defineProperty: ( target, key, descriptor ) ->\n      log '^887^', \"define property #{jr key}\"\n      Object.defineProperty target, key, descriptor\n  #.........................................................................................................\n  log '^4776^', to\n  log '^4776^', tp\n  assert.ok to isnt tp, '@'\n  log '^4776^', tp.x\n  log '^4776^', tp.y\n  Object.defineProperty tp, 'y', { value: 'Y!', writable: false, configurable: false, }\n  log '^4776^', to\n  log '^4776^', tp\n  log '^4776^', to.y\n  log '^4776^', tp.y\n  log '^4776^', tp.z\n  return null\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  error_count = 0\n  for name, test of @\n    log name\n    try\n      await test.call @\n    catch error\n      log \"ERROR:\", error.message\n      error_count++\n  if error_count isnt 0\n    log \"there were errors\"\n    process.exit 1\n  log \"ok\"\n\n\n"
  ]
}