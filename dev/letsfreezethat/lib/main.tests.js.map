{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'LETSFREEZETHAT/TESTS/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nassert                    = ( require 'assert' ).strict\nlog                       = console.log\njr                        = JSON.stringify\njoin_paths                = ( require 'path' ).join\nlft_path                  = '../../../apps/letsfreezethat'\nlft_nofreeze_path         = '../../../apps/letsfreezethat/nofreeze'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of }               = types.export()\ntest                      = require 'guy-test'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"freeze, modify object copy\" ] = ( T, done ) ->\n  { lets, freeze, thaw, } = require lft_path\n  a = { foo: 'bar', nested: [ 2, 3, 5, 7, ], u: { v: { w: 'x', }, }, }\n  d = lets a\n  e = lets d, ( d ) -> d.nested.push 11\n  T.eq a, { foo: 'bar', nested: [ 2, 3, 5, 7, ], u: { v: { w: 'x', }, }, }\n  debug d\n  debug e\n  T.eq d, { foo: 'bar', nested: [ 2, 3, 5, 7 ], u: { v: { w: 'x', }, }, }\n  T.eq e, { foo: 'bar', nested: [ 2, 3, 5, 7, 11 ], u: { v: { w: 'x', }, }, }\n  T.ok a isnt d\n  T.ok d isnt e\n  T.ok Object.isFrozen d\n  T.ok Object.isFrozen d.nested\n  T.ok Object.isFrozen d.u\n  T.ok Object.isFrozen d.u.v\n  T.ok Object.isFrozen d.u.v.w\n  T.ok Object.isFrozen e\n  T.ok Object.isFrozen e.nested\n  T.ok Object.isFrozen e.u\n  T.ok Object.isFrozen e.u.v\n  T.ok Object.isFrozen e.u.v.w\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"null, primitive values are kept as-is\" ] = ( T, done ) ->\n  { lets, freeze, thaw, } = require lft_path\n  ### from SQLite File Mirror: ###\n  defaults = lets {\n    mirrors:\n      read_method: 'batches_of_sql_literals_async'\n    source:\n      one:          1\n      a:            'A'\n      nothing:      null }\n  T.eq defaults.source.one,     1\n  T.eq defaults.source.a,       'A'\n  T.eq defaults.source.nothing, null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"use nofreeze option for speedup\" ] = ( T, done ) ->\n  # debug require lft_path\n  # debug ( require lft_path ).lets\n  { lets, freeze, thaw, } = ( require lft_path ).nofreeze\n  d = lets { foo: 'bar', nested: [ 2, 3, 5, 7, ], }\n  e = lets d, ( d ) -> d.nested.push 11\n  T.eq d, { foo: 'bar', nested: [ 2, 3, 5, 7 ] }\n  T.eq e, { foo: 'bar', nested: [ 2, 3, 5, 7, 11 ] }\n  T.ok d isnt e\n  T.ok not Object.isFrozen d\n  T.ok not Object.isFrozen d.nested\n  T.ok not Object.isFrozen e\n  T.ok not Object.isFrozen e.nested\n  done()\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"circular references cause custom error\" ] = ( T, done ) ->\n#   { lets, freeze, thaw, } = require lft_path\n#   d = { a: 42, }\n#   T.throws /unable to freeze circular/, ( -> d = lets d, ( d ) -> d.d = d )\n#   d = [ 4, 8, 16, ]\n#   # d = lets d, ( d ) -> d.push d\n#   T.throws /unable to freeze circular/, ( -> d = lets d, ( d ) -> d.push d )\n#   done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"fix select attributes\" ] = ( T, done ) ->\n#   { lets, freeze, thaw, } = require lft_path\n#   d   = { foo: 'bar', }\n#   e   = fix d, 'sql', { query: \"select * from main;\", }\n#   assert.ok ( d is e ),                                                       '^lft@26^'\n#   assert.ok ( not Object.isFrozen d ),                                        '^lft@27^'\n#   assert.deepEqual ( Object.keys d  ), [ 'foo', 'sql', ],                     '^lft@28^'\n#   assert.deepEqual d, { foo: 'bar', sql: { query: 'select * from main;' } },  '^lft@29^'\n#   assert.throws ( -> d.sql       = 'other' ), { message: /Cannot assign to read only property/,   }, '^lft@30^'\n#   assert.throws ( -> d.sql.query = 'other' ), { message: /Cannot assign to read only property/, }, '^lft@31^'\n#   done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"use partial freezing (1/3)\" ] = ( T, done ) ->\n#   ### Pretest: Ensure invariant behavior for non-special attributes (copy of first test, above): ###\n#   { lets, freeze, thaw, } = ( require lft_path ).partial\n#   is_readonly = ( d, key ) ->\n#     descriptor = Object.getOwnPropertyDescriptor d, key\n#     return ( not descriptor.writable ) and ( not descriptor.configurable )\n#   #.........................................................................................................\n#   matcher_a = { foo: 'bar',   nested: [ 2, 3, 5, 7,          ], u: { v: { w: 'x',     }, }, }\n#   matcher_b = { foo: 'bar',   nested: [ 2, 3, 5, 7, 11,      ], u: { v: { w: 'x',     }, }, }\n#   matcher_c = { foo: 'other', nested: [ 2, 3, 5, 7, 'other', ], u: { v: { w: 'other', }, }, blah: 'other', }\n#   d         = lets matcher_a\n#   e         = lets d, ( d ) -> d.nested.push 11\n#   assert.ok ( d isnt e                      ), '^lft@32^'\n#   assert.ok ( d isnt matcher_a              ), '^lft@33^'\n#   assert.deepEqual d, matcher_a,               '^lft@34^'\n#   assert.deepEqual e, matcher_b,               '^lft@35^'\n#   assert.ok ( is_readonly d,      'nested'  ), '^lft@36^'\n#   assert.ok ( is_readonly d,      'u'       ), '^lft@37^'\n#   assert.ok ( is_readonly d.u,    'v'       ), '^lft@38^'\n#   assert.ok ( is_readonly d.u.v,  'w'       ), '^lft@39^'\n#   assert.ok ( Object.isSealed d             ), '^lft@40^'\n#   assert.ok ( Object.isSealed d.nested      ), '^lft@41^'\n#   assert.ok ( Object.isSealed d.u           ), '^lft@42^'\n#   assert.ok ( Object.isSealed d.u.v         ), '^lft@43^'\n#   assert.ok ( Object.isSealed e             ), '^lft@44^'\n#   assert.ok ( Object.isSealed e.nested      ), '^lft@45^'\n#   assert.ok ( Object.isSealed e.u           ), '^lft@46^'\n#   assert.ok ( Object.isSealed e.u.v         ), '^lft@47^'\n#   assert.throws ( -> d.nested.push 'other' ), { message: /Cannot add property/,             }, '^lft@48^'\n#   assert.throws ( -> d.foo  = 'other' ), { message: /Cannot assign to read only property/,  }, '^lft@49^'\n#   assert.throws ( -> d.blah = 'other' ), { message: /Cannot add property/,                  }, '^lft@50^'\n#   #.........................................................................................................\n#   d2 = lets d, ( d_copy ) ->\n#     assert.ok ( d isnt d_copy ),  '^lft@51^'\n#     assert.ok ( not is_readonly d_copy,      'nested'  ), '^lft@52^'\n#     assert.ok ( not is_readonly d_copy,      'u'       ), '^lft@53^'\n#     assert.ok ( not is_readonly d_copy.u,    'v'       ), '^lft@54^'\n#     assert.ok ( not is_readonly d_copy.u.v,  'w'       ), '^lft@55^'\n#     assert.ok ( not Object.isSealed d_copy             ), '^lft@56^'\n#     assert.ok ( not Object.isSealed d_copy.nested      ), '^lft@57^'\n#     assert.ok ( not Object.isSealed d_copy.u           ), '^lft@58^'\n#     assert.ok ( not Object.isSealed d_copy.u.v         ), '^lft@59^'\n#     try d_copy.nested.push 'other' catch e then throw new Error '^lft@60^ ' + e.message\n#     try d_copy.foo  = 'other'      catch e then throw new Error '^lft@61^ ' + e.message\n#     try d_copy.blah = 'other'      catch e then throw new Error '^lft@62^ ' + e.message\n#     try d_copy.u.v.w = 'other'     catch e then throw new Error '^lft@63^ ' + e.message\n#   assert.ok ( d2 isnt d ), '^lft@64^'\n#   assert.deepEqual d,  matcher_a,               '^lft@65^'\n#   assert.deepEqual d2, matcher_c,               '^lft@66^'\n#   #.........................................................................................................\n#   d_thawed = thaw d\n#   assert.deepEqual d_thawed, d,                           '^lft@67^'\n#   assert.ok ( d isnt d_thawed ),                          '^lft@68^'\n#   assert.ok ( not is_readonly d_thawed,      'nested'  ), '^lft@69^'\n#   assert.ok ( not is_readonly d_thawed,      'u'       ), '^lft@70^'\n#   assert.ok ( not is_readonly d_thawed.u,    'v'       ), '^lft@71^'\n#   assert.ok ( not is_readonly d_thawed.u.v,  'w'       ), '^lft@72^'\n#   assert.ok ( not Object.isSealed d_thawed             ), '^lft@73^'\n#   assert.ok ( not Object.isSealed d_thawed.nested      ), '^lft@74^'\n#   assert.ok ( not Object.isSealed d_thawed.u           ), '^lft@75^'\n#   assert.ok ( not Object.isSealed d_thawed.u.v         ), '^lft@76^'\n#   try d_thawed.nested.push 'other' catch e then throw new Error '^lft@77^ ' + e.message\n#   try d_thawed.foo  = 'other'      catch e then throw new Error '^lft@78^ ' + e.message\n#   try d_thawed.blah = 'other'      catch e then throw new Error '^lft@79^ ' + e.message\n#   try d_thawed.u.v.w = 'other'     catch e then throw new Error '^lft@80^ ' + e.message\n#   assert.deepEqual d_thawed, matcher_c,               '^lft@81^'\n#   #.........................................................................................................\n#   done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"use partial freezing (2/3)\" ] = ( T, done ) ->\n#   ### Pretest: test approximate 'manual' implementation of partial freezing, implemented using object\n#   sealing and selective `fix()`ing of attributes: ###\n#   { lets, freeze, thaw, } = ( require lft_path ).partial\n#   #.........................................................................................................\n#   counter = 0\n#   d       = { foo: 'bar', nested: [ 2, 3, 5, 7, ], u: { v: { w: 'x', }, }, }\n#   e       = d.nested.push 11\n#   open_vz = { a: 123, }\n#   Object.defineProperty d, 'foo',    { enumerable: true, writable: false, configurable: false, value: freeze d.foo }\n#   Object.defineProperty d, 'nested', { enumerable: true, writable: false, configurable: false, value: freeze d.nested }\n#   Object.defineProperty d, 'count',\n#     enumerable:     true\n#     configurable:   false\n#     get:            -> ++counter\n#     set:            ( value ) -> counter = value\n#   Object.defineProperty d, 'open_vz',\n#     enumerable:     true\n#     configurable:   false\n#     get:            -> open_vz\n#   # log Object.getOwnPropertyDescriptors d\n#   Object.seal d\n#   #.........................................................................................................\n#   assert.ok ( ( type_of ( Object.getOwnPropertyDescriptor d, 'count' ).set ) is 'function' ),   '^lft@82^'\n#   assert.ok ( Object.isSealed d ),                                                              '^lft@83^'\n#   assert.deepEqual ( Object.keys d ), [ 'foo', 'nested', 'u', 'count', 'open_vz', ],            '^lft@84^'\n#   assert.ok ( d.count is 1                  ), '^lft@85^'\n#   assert.ok ( d.count is 2                  ), '^lft@86^'\n#   assert.ok ( ( d.count = 42 ) is 42        ), '^lft@87^'\n#   assert.ok ( d.count is 43                 ), '^lft@88^'\n#   assert.throws ( -> d.blah = 'other' ), { message: /Cannot add property blah, object is not extensible/, }, '^lft@89^'\n#   assert.throws ( -> d.foo  = 'other' ), { message: /Cannot assign to read only property/,                }, '^lft@90^'\n#   try d.open_vz.new_property = 42 catch e then throw new Error '^lft@91^ ' + e.message\n#   assert.deepEqual d.open_vz.new_property, 42, '^lft@92^'\n#   done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"use partial freezing (3/3)\" ] = ( T, done ) ->\n#   { lets, freeze, thaw, fix, lets_compute, } = ( require lft_path ).partial\n#   #.........................................................................................................\n#   counter = 0\n#   open_vz = { a: 123, }\n#   d       = lets { foo: 'bar', nested: [ 2, 3, 5, 7, ], u: { v: { w: 'x', }, }, }\n#   e       = lets d, ( d ) -> d.nested.push 11\n#   d       = lets_compute d, 'count', ( -> ++counter ), ( ( x ) -> counter = x )\n#   d       = lets_compute d, 'open_vz', ( -> open_vz )\n#   assert.ok ( ( type_of ( Object.getOwnPropertyDescriptor d, 'count' ).set ) is 'function' ),   '^lft@93^'\n#   assert.ok ( d.count is 1                  ), '^lft@94^'\n#   assert.ok ( d.count is 2                  ), '^lft@95^'\n#   assert.ok ( ( d.count = 42 ) is 42        ), '^lft@96^'\n#   assert.ok ( d.count is 43                 ), '^lft@97^'\n#   assert.ok ( d.open_vz is open_vz          ), '^lft@98^'\n#   try d.open_vz.new_property = 'new value' catch e then throw new Error '^lft@99^ ' + e.message\n#   assert.ok ( d.open_vz is open_vz          ), '^lft@100^'\n#   assert.deepEqual open_vz, { a: 123, new_property: 'new value', }, '^lft@101^'\n#   assert.throws ( -> d.blah = 'other' ), { message: /Cannot add property blah, object is not extensible/, }, '^lft@102^'\n#   assert.throws ( -> d.foo  = 'other' ), { message: /Cannot assign to read only property/,                }, '^lft@103^'\n#   lets d, ( d ) ->\n#     dsc = Object.getOwnPropertyDescriptor d, 'count'\n#     assert.deepEqual dsc.configurable, true, '^lft@104^'\n#   lets d, ( d ) ->\n#     dsc = Object.getOwnPropertyDescriptor d, 'open_vz'\n#     assert.deepEqual dsc.configurable, true, '^lft@105^'\n#     done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"may pass in null to lets_compute as getter, setter\" ] = ( T, done ) ->\n#   { lets, lets_compute, } = ( require lft_path ).partial\n#   # log '^!!!!!!!!!!!!!!!!!!!!!!!!!!^'; return\n#   #.........................................................................................................\n#   counter = 0\n#   d       = lets { foo: 'bar', }\n#   d       = lets_compute d, 'count', ( -> ++counter )\n#   assert.ok ( d.count is 1                  ), '^lft@106^'\n#   assert.ok ( d.count is 2                  ), '^lft@107^'\n#   #.........................................................................................................\n#   counter = 0\n#   d       = lets { foo: 'bar', }\n#   d       = lets_compute d, 'count', ( -> ++counter ), null\n#   assert.ok ( d.count is 1                  ), '^lft@108^'\n#   assert.ok ( d.count is 2                  ), '^lft@109^'\n#   #.........................................................................................................\n#   counter = 0\n#   d       = lets { foo: 'bar', }\n#   d       = lets_compute d, 'count', null, ( -> ++counter )\n#   #.........................................................................................................\n#   counter = 0\n#   d       = lets { foo: 'bar', }\n#   assert.throws ( -> lets_compute d, 'count', null, null ), /must define getter or setter/, '^lft@110^'\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"functions are kept as functions\" ] = ( T, done ) ->\n  #.........................................................................................................\n  do =>\n    { lets, freeze, thaw, } = require lft_path\n    d = lets { e: { f: ( ( x ) -> x ** 2 ) } }\n    T.eq ( type_of d.e.f ), 'function'\n    T.eq ( d.e.f 42 ), 42 * 42\n  #.........................................................................................................\n  do =>\n    { lets, freeze, thaw, } = require lft_path\n    d = lets { e: { f: ( ( x ) -> x ** 2 ) } }\n    T.eq ( type_of d.e.f ), 'function'\n    T.eq ( d.e.f 42 ), 42 * 42\n  #.........................................................................................................\n  do =>\n    { lets, freeze, thaw, } = require lft_path\n    d = lets { e: { f: ( ( x ) -> x ** 2 ) } }\n    T.eq ( type_of d.e.f ), 'function'\n    T.eq ( d.e.f 42 ), 42 * 42\n  #.........................................................................................................\n  done()\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"lets_compute keeps object identity\" ] = ( T, done ) ->\n#   { lets, freeze, thaw, lets_compute, } = ( require lft_path ).partial\n#   #.........................................................................................................\n#   class Otherclass\n#     constructor: ->\n#       @this_is_otherclass = true\n#     g: -> ( 'Otherclass.' + k for k of @ )\n#   #.........................................................................................................\n#   class Someclass extends Otherclass\n#     constructor: ->\n#       super()\n#       @this_is_someclass = true\n#     f: -> ( 'Someclass.' + k for k of @ )\n#   #.........................................................................................................\n#   test_something_ok = ( x, n ) ->\n#     tests = [\n#       -> assert.ok ( ( ( require 'util' ).inspect x ).startsWith 'Someclass' ), '^lft@114^' + \"(##{n})\"\n#       -> assert.deepEqual ( Object.getOwnPropertyNames x ), [ 'this_is_otherclass', 'this_is_someclass' ], '^lft@115^' + \"(##{n})\"\n#       -> assert.ok     x.hasOwnProperty 'this_is_otherclass',  '^lft@116^' + \"(##{n})\"\n#       -> assert.ok     x.hasOwnProperty 'this_is_someclass',   '^lft@117^' + \"(##{n})\"\n#       -> assert.ok not x.hasOwnProperty 'f',                   '^lft@118^' + \"(##{n})\"\n#       -> assert.ok not x.hasOwnProperty 'g',                   '^lft@119^' + \"(##{n})\"\n#       -> assert.deepEqual x.g(), [ 'Otherclass.this_is_otherclass', 'Otherclass.this_is_someclass' ], '^lft@120^' + \"(##{n})\"\n#       -> assert.deepEqual x.f(), [ 'Someclass.this_is_otherclass', 'Someclass.this_is_someclass' ], '^lft@121^' + \"(##{n})\"\n#       ]\n#     error_count = 0\n#     for test, idx in tests\n#       # log test.toString()\n#       try\n#         test()\n#       catch error\n#         error_count++\n#         log '^lft@122^', \"ERROR:\", error.message\n#     if error_count > 0\n#       assert.ok false, \"^lft@123^(##{n}) #{error_count} tests failed\"\n#     return null\n#   #.........................................................................................................\n#   tests = [\n#     #.......................................................................................................\n#     ->\n#       something = new Someclass\n#       test_something_ok something, '1'\n#     #.......................................................................................................\n#     ->\n#       something = new Someclass\n#       d = lets {}\n#       d = lets_compute d, 'something', ( -> something )\n#       test_something_ok d.something, '2'\n#     #.......................................................................................................\n#     ->\n#       something = new Someclass\n#       d = lets {}\n#       d = lets_compute d, 'something', ( -> something )\n#       d = freeze d\n#       test_something_ok d.something, '3'\n#     #.......................................................................................................\n#     ->\n#       something = new Someclass\n#       d = lets {}\n#       d = lets_compute d, 'something', ( -> something )\n#       d = thaw d\n#       test_something_ok d.something, '4'\n#     #.......................................................................................................\n#     ->\n#       something = new Someclass\n#       d = lets {}\n#       d = lets_compute d, 'something', ( -> something )\n#       d = lets d, ( d ) -> d.other = 42\n#       test_something_ok d.something, '5'\n#     ]\n#   #.........................................................................................................\n#   do =>\n#     error_count = 0\n#     for test in tests\n#       try\n#         test()\n#       catch error\n#         error_count++\n#         log '^lft@124^', \"ERROR:\", error.message\n#     if error_count > 0\n#       assert.ok false, \"^lft@125^ #{error_count} tests failed\"\n#     return null\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"breadboard mode\" ] = ( T, done ) ->\n#   { lets, freeze, thaw, lets_compute, } = ( require lft_path ).breadboard\n#   e = {}\n#   d = { e, }\n#   Object.preventExtensions d\n#   assert.throws ( -> d.x = 42 ), { message: /object is not extensible/ }, '^lft@126^'\n#   Object.defineProperty d, 'e', { writable: true, }\n#   #.........................................................................................................\n#   to  = { x: 42, }\n#   tp  = new Proxy to,\n#     get: ( target, key ) -> return if ( R = target[ key ] )? then R else 'NOTFOUND'\n#     defineProperty: ( target, key, descriptor ) ->\n#       log '^887^', \"define property #{jr key}\"\n#       Object.defineProperty target, key, descriptor\n#   #.........................................................................................................\n#   log '^4776^', to\n#   log '^4776^', tp\n#   assert.ok to isnt tp, '@'\n#   log '^4776^', tp.x\n#   log '^4776^', tp.y\n#   Object.defineProperty tp, 'y', { value: 'Y!', writable: false, configurable: false, }\n#   log '^4776^', to\n#   log '^4776^', tp\n#   log '^4776^', to.y\n#   log '^4776^', tp.y\n#   log '^4776^', tp.z\n#   return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@[ \"LFTNG API\" ] = ( T, done ) ->\n  LFT = require lft_path\n  #.........................................................................................................\n  T.eq 'function', type_of LFT.assign;      T.eq 1, LFT.assign.length ### NOTE actually splat argument ###\n  T.eq 'function', type_of LFT.freeze;      T.eq 1, LFT.freeze.length\n  T.eq 'function', type_of LFT.thaw;        T.eq 1, LFT.thaw.length\n  T.eq 'function', type_of LFT.lets;        T.eq 1, LFT.lets.length\n  T.eq 'function', type_of LFT.get;         T.eq 2, LFT.get.length\n  T.eq 'function', type_of LFT.set;         T.eq 3, LFT.set.length\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"LFTNG lets, set, get\" ] = ( T, done ) ->\n  # #.........................................................................................................\n  # urge '^33738-1^'\n  # LFT_CNFY      = null\n  # T.throws /not a valid.*cfg/, -> LFT_CNFY = LFT_DFLT.new { copy: false, freeze: true, }\n  # T.eq LFT_CNFY, null\n  #.........................................................................................................\n  do =>\n    LFT = require lft_path\n    d1 = {}\n    d2 = LFT.lets d1\n    T.ok d1 isnt d2\n    T.ok isa.frozen d2\n    d3 = LFT.set d2, 'key', 'value'\n    T.eq ( LFT.get d3, 'key' ), 'value'\n    T.eq d3.key, 'value'\n    T.ok d2 isnt d3\n    T.eq ( LFT.get d2, 'key' ), undefined\n    T.eq d2.key, undefined\n  #.........................................................................................................\n  do =>\n    LFT = require lft_nofreeze_path\n    d1 = {}\n    d2 = LFT.lets d1\n    T.ok d1 isnt d2\n    T.ok not isa.frozen d2\n    d3 = LFT.set d2, 'key', 'value'\n    T.ok not isa.frozen d3\n    T.eq ( LFT.get d3, 'key' ), 'value'\n    T.eq d3.key, 'value'\n    T.ok d2 isnt d3\n    T.eq ( LFT.get d2, 'key' ), undefined\n    T.eq d2.key, undefined\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"LFTNG freeze, thaw (shallow)\" ] = ( T, done ) ->\n  LFT       = require lft_path\n  { lets\n    freeze\n    thaw }  = LFT\n  #.........................................................................................................\n  d1 = lets { a: 42, b: 'helo', }\n  T.ok isa.frozen d1\n  d2 = thaw d1\n  T.ok isa.frozen d1\n  T.ok not isa.frozen d2\n  d2.a += +1\n  d2.b += ' world'\n  d3    = freeze d2\n  T.ok isa.frozen d2\n  T.ok isa.frozen d3\n  T.ok d2 is d3\n  T.eq d3, { a: 43, b: 'helo world', }\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"LFTNG freeze, thaw (deep)\" ] = ( T, done ) ->\n  LFT       = require lft_path\n  { lets\n    freeze\n    thaw }  = LFT\n  #.........................................................................................................\n  d1 = lets { $key: '^a-list', $value: [ 1, 2, { $key: '^another', $value: [ 'c', 'd', ], }, ], }\n  T.ok isa.frozen d1\n  T.ok isa.frozen d1.$value\n  T.ok isa.frozen d1.$value[ 2 ]\n  T.ok isa.frozen d1.$value[ 2 ].$value\n  T.eq d1, { $key: '^a-list', $value: [ 1, 2, { $key: '^another', $value: [ 'c', 'd', ], }, ], }\n  d2 = thaw d1\n  T.eq d1, { $key: '^a-list', $value: [ 1, 2, { $key: '^another', $value: [ 'c', 'd', ], }, ], }\n  T.eq d2, { $key: '^a-list', $value: [ 1, 2, { $key: '^another', $value: [ 'c', 'd', ], }, ], }\n  T.ok isa.frozen d1\n  T.ok isa.frozen d1.$value\n  T.ok isa.frozen d1.$value[ 2 ]\n  T.ok isa.frozen d1.$value[ 2 ].$value\n  T.ok not isa.frozen d2\n  T.ok not isa.frozen d2.$value\n  T.ok not isa.frozen d2.$value[ 2 ]\n  T.ok not isa.frozen d2.$value[ 2 ].$value\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"LFTNG lets makes a copy on entry, not on exit\" ] = ( T, done ) ->\n  LFT       = require lft_path\n  { lets\n    freeze\n    thaw }  = LFT\n  #.........................................................................................................\n  d1      = { a: 42, b: 'helo', }\n  d2_ref  = null\n  d3      = lets d1, ( d2 ) -> d2_ref = d2; d2.c = 'value'\n  T.ok not isa.frozen d1\n  T.ok isa.frozen d3\n  T.ok d1 isnt  d2_ref\n  T.ok d1 isnt  d3\n  T.ok d3 is    d2_ref\n  T.eq d3.a, 42\n  T.eq d3.b, 'helo'\n  T.eq d3.c, 'value'\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"LFTNG thaw makes a copy, freeze does not\" ] = ( T, done ) ->\n  LFT       = require lft_path\n  { lets\n    freeze\n    thaw }  = LFT\n  #.........................................................................................................\n  d1      = { a: 42, b: 'helo', }\n  d2      = thaw d1\n  d3      = freeze d2\n  d4      = thaw d3\n  T.ok d2 isnt  d1\n  T.ok d3 is    d2\n  T.ok d4 isnt  d3\n  T.ok not  isa.frozen d1\n  T.ok      isa.frozen d2\n  T.ok      isa.frozen d3\n  T.ok not  isa.frozen d4\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"LFTNG can freeze frozen object, attribute\" ] = ( T, done ) ->\n  #.........................................................................................................\n  do =>\n    try\n      { freeze, } = require lft_path\n      d           = { a: 42, b: { c: [ 'X', 'Y', ], }, }\n      d.b.c       = freeze d.b.c\n      T.eq d, { a: 42, b: { c: [ 'X', 'Y', ], }, }\n      e           = freeze d\n      T.ok d is e\n    catch error\n      T.fail error.message\n  #.........................................................................................................\n  do =>\n    try\n      { freeze, } = require lft_path\n      d           = { a: 42, b: { c: [ 'X', 'Y', ], }, }\n      d.b         = freeze d.b\n      T.eq d, { a: 42, b: { c: [ 'X', 'Y', ], }, }\n      e           = freeze d\n      T.ok d is e\n    catch error\n      T.fail error.message\n  #.........................................................................................................\n  do =>\n    try\n      { freeze, } = require lft_path\n      d           = { a: 42, b: { c: [ 'X', 'Y', ], }, }\n      e           = freeze d\n      T.eq d, { a: 42, b: { c: [ 'X', 'Y', ], }, }\n      T.ok d is e\n    catch error\n      T.fail error.message\n  #.........................................................................................................\n  done()\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n  # test @[ \"LFTNG can freeze frozen object, attribute\" ]\n  # test @[ \"freeze, modify object copy\" ]\n  # test @[ \"null, primitive values are kept as-is\" ]\n  # test @[ \"use nofreeze option for speedup\" ]\n  # test @[ \"circular references cause custom error\" ]\n  # test @[ \"functions are kept as functions\" ]\n\n"
  ]
}