{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/lft-deepfreeze.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'LFT'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\n\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg, fresh = true ) ->\n  @get_data.cache = null if fresh\n  return @get_data.cache if @get_data.cache?\n  datoms          = DATA.get_random_datoms cfg.set_count\n  @get_data.cache = { datoms, }\n  return @get_data.cache\n@get_data.cache = null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@freeze___letsfreezethat = ( cfg ) -> new Promise ( resolve ) =>\n  LFT           = require '../../../apps/letsfreezethat'\n  { lets\n    freeze\n    thaw }      = LFT\n  data          = @get_data cfg\n  count         = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = freeze d\n      throw new Error '^445-1^ identical' if e is d\n      throw new Error '^445-2^ not frozen' unless Object.isFrozen e\n      throw new Error '^445-3^ not frozen' unless Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@thaw_____letsfreezethat = ( cfg ) -> new Promise ( resolve ) =>\n  LFT           = require '../../../apps/letsfreezethat'\n  { lets\n    freeze\n    thaw }      = LFT\n  data          = @get_data cfg\n  data.datoms   = ( ( freeze d ) for d in data.datoms )\n  count         = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = thaw d\n      throw new Error '^445-4^ identical' if e is d\n      throw new Error '^445-5^ not thawed' if Object.isFrozen e\n      throw new Error '^445-6^ not thawed' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@_freeze___lftrc2 = ( cfg, lft_cfg ) -> new Promise ( resolve ) =>\n  LFT           = ( require './letsfreezethat-NG-rc2' ).new lft_cfg\n  { lets\n    freeze\n    thaw }      = LFT\n  data          = @get_data cfg\n  count         = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = freeze d\n      throw new Error '^445-16^ not identical' unless e is d\n      if lft_cfg.freeze\n        throw new Error '^445-17^ not frozen' unless Object.isFrozen e\n        throw new Error '^445-18^ not frozen' unless Object.isFrozen e.$vnr\n      else\n        throw new Error '^445-19^ frozen' if Object.isFrozen e\n        throw new Error '^445-20^ frozen' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_thaw_____lftrc2 = ( cfg, lft_cfg ) -> new Promise ( resolve ) =>\n  LFT           = ( require './letsfreezethat-NG-rc2' ).new lft_cfg\n  { lets\n    freeze\n    thaw }      = LFT\n  data          = @get_data cfg\n  data.datoms   = ( ( freeze d ) for d in data.datoms )\n  count         = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = thaw d\n      throw new Error '^445-21^ identical' if e is d\n      throw new Error '^445-22^ not thawed' if Object.isFrozen e\n      throw new Error '^445-23^ not thawed' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@freeze___lftrc2_cyfy = ( cfg ) -> @_freeze___lftrc2 cfg, { freeze: true,  }\n@freeze___lftrc2_cyfn = ( cfg ) -> @_freeze___lftrc2 cfg, { freeze: false, }\n@thaw_____lftrc2_cyfy = ( cfg ) -> @_thaw_____lftrc2 cfg, { freeze: true,  }\n@thaw_____lftrc2_cyfn = ( cfg ) -> @_thaw_____lftrc2 cfg, { freeze: false, }\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@freeze___deepfreeze = ( cfg ) -> new Promise ( resolve ) =>\n  freeze        = require 'deepfreeze'\n  data          = @get_data cfg\n  count         = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = freeze d ### freezes in-place ###\n      throw new Error '^445-24^ not identical' unless e is d\n      throw new Error '^445-25^ not frozen' unless Object.isFrozen e\n      throw new Error '^445-26^ not frozen' unless Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@freeze___deepfreezer = ( cfg ) -> new Promise ( resolve ) =>\n  { freeze\n    deepFreeze\n    thaw\n    deepThaw }  = require 'deepfreezer'\n  data          = @get_data cfg\n  count         = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = deepFreeze d, true ### NOTE use `true` to avoid copying ###\n      throw new Error '^445-27^ not identical' unless e is d\n      throw new Error '^445-28^ not frozen' unless Object.isFrozen e\n      throw new Error '^445-29^ not frozen' unless Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@thaw_____deepfreezer = ( cfg ) -> new Promise ( resolve ) =>\n  { freeze\n    deepFreeze\n    thaw\n    deepThaw }  = require 'deepfreezer'\n  data          = @get_data cfg\n  data.datoms   = ( ( deepFreeze d ) for d in data.datoms )\n  count         = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = deepThaw d, true ### NOTE use `true` to avoid copying ###\n      throw new Error '^445-30^ identical' if e is d\n      throw new Error '^445-31^ frozen' if Object.isFrozen e\n      throw new Error '^445-32^ frozen' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@freeze___shallow_native = ( cfg ) -> new Promise ( resolve ) =>\n  { freeze }    = Object\n  data          = @get_data cfg\n  count         = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = freeze d, true ### NOTE use `true` to avoid copying ###\n      throw new Error '^445-33^ not identical' unless e is d\n      throw new Error '^445-34^ not frozen' unless Object.isFrozen e\n      throw new Error '^445-35^ is frozen' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@thaw_____shallow_native = ( cfg ) -> new Promise ( resolve ) =>\n  { freeze }    = Object\n  data          = @get_data cfg\n  count         = 0\n  data.datoms   = ( ( Object.freeze d ) for d in data.datoms )\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = Object.assign {}, d\n      throw new Error '^445-36^ identical' if e is d\n      throw new Error '^445-37^ frozen' if Object.isFrozen e\n      throw new Error '^445-38^ is frozen' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@thaw_____fast_copy = ( cfg ) -> new Promise ( resolve ) =>\n  # debug require 'fast-copy'\n  # debug ( require 'fast-copy').copy\n  # debug ( require 'fast-copy').strict\n  copy          = require 'fast-copy'\n  data          = @get_data cfg\n  count         = 0\n  data.datoms   = ( ( Object.freeze d ) for d in data.datoms )\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = copy d\n      throw new Error '^445-39^ identical' if e is d\n      throw new Error '^445-40^ frozen' if Object.isFrozen e\n      throw new Error '^445-41^ is frozen' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@thaw_____fast_copy_strict = ( cfg ) -> new Promise ( resolve ) =>\n  # debug require 'fast-copy'\n  # debug ( require 'fast-copy').copy\n  # debug ( require 'fast-copy').strict\n  copy          = require 'fast-copy'\n  data          = @get_data cfg\n  count         = 0\n  data.datoms   = ( ( Object.freeze d ) for d in data.datoms )\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = copy.strict d\n      throw new Error '^445-42^ identical' if e is d\n      throw new Error '^445-43^ frozen' if Object.isFrozen e\n      throw new Error '^445-44^ is frozen' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@thaw_____klona = ( cfg ) -> new Promise ( resolve ) =>\n  { klona }     = require 'klona/json'\n  data          = @get_data cfg\n  count         = 0\n  data.datoms   = ( ( Object.freeze d ) for d in data.datoms )\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = klona d\n      throw new Error '^445-45^ identical' if e is d\n      throw new Error '^445-46^ frozen' if Object.isFrozen e\n      throw new Error '^445-47^ is frozen' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@thaw_____deepcopy = ( cfg ) -> new Promise ( resolve ) =>\n  deepcopy      = require 'deepcopy'\n  data          = @get_data cfg\n  count         = 0\n  data.datoms   = ( ( Object.freeze d ) for d in data.datoms )\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = deepcopy d\n      throw new Error '^445-48^ identical' if e is d\n      throw new Error '^445-49^ frozen' if Object.isFrozen e\n      throw new Error '^445-50^ is frozen' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@_prewarm = ( cfg ) ->\n  ignore = []\n  for _ in [ 1 .. cfg.repetitions ]\n    ignore.push @get_data cfg.set_count for _ in [ 1 .. 5 ]\n  # ignore.length = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  return -> new Promise ( resolve ) -> resolve 1\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  bench       = BM.new_benchmarks()\n  # n           = 100000\n  cfg         = { repetitions: 3, set_count: 100, }\n  cfg         = { repetitions: 3, set_count: 1, }\n  cfg         = { repetitions: 3, set_count: 10000, }\n  cfg         = { repetitions: 3, set_count: 10, }\n  cfg         = { repetitions: 3, set_count: 1000, }\n  test_names  = [\n    'thaw_____letsfreezethat'\n    'thaw_____klona'\n    'thaw_____fast_copy'\n    'thaw_____lftrc2_cyfy'\n    'thaw_____deepfreezer'\n    'thaw_____shallow_native'\n    'thaw_____fast_copy_strict'\n    'thaw_____deepcopy'\n    'thaw_____lftrc2_cyfn'\n\n    'freeze___lftrc2_cyfn'\n    'freeze___lftrc2_cyfy'\n    'freeze___lftrc2_cyfn'\n    'freeze___letsfreezethat'\n    'freeze___deepfreeze'\n    'freeze___deepfreezer'\n    'freeze___shallow_native'\n    ]\n  # await BM.benchmark bench, cfg, false, @, '_prewarm'\n  global.gc() if global.gc?\n  for test_name in CND.shuffle test_names\n    whisper '-'.repeat 108\n    for _ in [ 1 .. cfg.repetitions ]\n      await BM.benchmark bench, cfg, false, @, test_name\n      global.gc() if global.gc?\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n\n\n\n"
  ]
}