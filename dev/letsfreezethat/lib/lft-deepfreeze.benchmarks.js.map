{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/lft-deepfreeze.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'LFT'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nprovide_LFT_candidate = ->\n  @copy_1 = ( d ) ->\n    switch ( Object::toString.call d )\n      when '[object Array]'\n        return ( @copy_1 v for v in d )\n      when '[object Object]'\n        R = {}\n        R[ k ] = @copy_1 v for k, v of d\n        return R\n    return d\n  @copy_2 = ( d ) ->\n    ### immediately return for zero, empty string, null, undefined, NaN, false, true: ###\n    return d if ( not d ) or d is true\n    ### thx to https://github.com/lukeed/klona/blob/master/src/json.js ###\n    switch ( Object::toString.call d )\n      when '[object Array]'\n        R = Array ( k = d.length )\n        while ( k-- )\n          R[ k ] = if ( v = d[ k ] )? and ( ( typeof v ) is 'object' ) then ( @copy_2 v ) else v\n        return R\n      when '[object Object]'\n        R = {}\n        for k of d\n          if k == '__proto__'\n            ### TAINT do we ever need this? ###\n            Object.defineProperty R, k, {\n              value:        @copy_2 d[ k ]\n              configurable: true\n              enumerable:   true\n              writable:     true }\n          else\n            R[ k ] = if ( v = d[ k ] )? and ( ( typeof v ) is 'object' ) then ( @copy_2 v ) else v\n        return R\n    return d\n  @copy_3 = ( d ) ->\n    ### immediately return for zero, empty string, null, undefined, NaN, false, true: ###\n    return d if ( not d ) or d is true\n    ### thx to https://github.com/lukeed/klona/blob/master/src/json.js ###\n    if Array.isArray d\n      R = Array ( k = d.length | 0 )\n      while ( k-- ) | 0\n        R[ k ] = if ( v = d[ k ] )? and ( ( typeof v ) is 'object' ) then ( @copy_2 v ) else v\n      return R\n    return d unless typeof d is 'object'\n    R = {}\n    for k of d\n      R[ k ] = if ( v = d[ k ] )? and ( ( typeof v ) is 'object' ) then ( @copy_2 v ) else v\n    return R\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg, fresh = true ) ->\n  @get_data.cache = null if fresh\n  return @get_data.cache if @get_data.cache?\n  datoms          = DATA.get_random_datoms cfg.set_count\n  @get_data.cache = { datoms, }\n  return @get_data.cache\n@get_data.cache = null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@freeze___letsfreezethat = ( cfg ) -> new Promise ( resolve ) =>\n  LFT           = require '../../../apps/letsfreezethat'\n  { lets\n    freeze\n    thaw }      = LFT\n  data          = @get_data cfg\n  count         = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = freeze d\n      throw new Error '^445-1^ identical' if e is d\n      throw new Error '^445-2^ not frozen' unless Object.isFrozen e\n      throw new Error '^445-3^ not frozen' unless Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@thaw_____letsfreezethat = ( cfg ) -> new Promise ( resolve ) =>\n  LFT           = require '../../../apps/letsfreezethat'\n  { lets\n    freeze\n    thaw }      = LFT\n  data          = @get_data cfg\n  data.datoms   = ( ( freeze d ) for d in data.datoms )\n  count         = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = thaw d\n      throw new Error '^445-4^ identical' if e is d\n      throw new Error '^445-5^ not thawed' if Object.isFrozen e\n      throw new Error '^445-6^ not thawed' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@copy_____lft_xxx_1 = ( cfg ) -> new Promise ( resolve ) =>\n  provide_LFT_candidate.apply LFT = {}\n  copy          = LFT.copy_1.bind LFT\n  data          = @get_data cfg\n  { freeze }    = require 'letsfreezethat'\n  data.datoms   = ( ( freeze d ) for d in data.datoms )\n  count         = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = copy d\n      throw new Error '^445-7^ identical' if e is d\n      throw new Error '^445-8^ not thawed' if Object.isFrozen e\n      throw new Error '^445-9^ not thawed' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@copy_____lft_xxx_2 = ( cfg ) -> new Promise ( resolve ) =>\n  provide_LFT_candidate.apply LFT = {}\n  copy          = LFT.copy_2.bind LFT\n  data          = @get_data cfg\n  { freeze }    = require 'letsfreezethat'\n  data.datoms   = ( ( freeze d ) for d in data.datoms )\n  count         = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = copy d\n      throw new Error '^445-7^ identical' if e is d\n      throw new Error '^445-8^ not thawed' if Object.isFrozen e\n      throw new Error '^445-9^ not thawed' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@copy_____lft_xxx_3 = ( cfg ) -> new Promise ( resolve ) =>\n  provide_LFT_candidate.apply LFT = {}\n  copy          = LFT.copy_3.bind LFT\n  data          = @get_data cfg\n  { freeze }    = require 'letsfreezethat'\n  data.datoms   = ( ( freeze d ) for d in data.datoms )\n  count         = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = copy d\n      throw new Error '^445-7^ identical' if e is d\n      throw new Error '^445-8^ not thawed' if Object.isFrozen e\n      throw new Error '^445-9^ not thawed' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@freeze___deepfreeze = ( cfg ) -> new Promise ( resolve ) =>\n  freeze        = require 'deepfreeze'\n  data          = @get_data cfg\n  count         = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = freeze d ### freezes in-place ###\n      throw new Error '^445-10^ not identical' unless e is d\n      throw new Error '^445-11^ not frozen' unless Object.isFrozen e\n      throw new Error '^445-12^ not frozen' unless Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@freeze___deepfreezer = ( cfg ) -> new Promise ( resolve ) =>\n  { freeze\n    deepFreeze\n    thaw\n    deepThaw }  = require 'deepfreezer'\n  data          = @get_data cfg\n  count         = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = deepFreeze d, true ### NOTE use `true` to avoid copying ###\n      throw new Error '^445-13^ not identical' unless e is d\n      throw new Error '^445-14^ not frozen' unless Object.isFrozen e\n      throw new Error '^445-15^ not frozen' unless Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@thaw_____deepfreezer = ( cfg ) -> new Promise ( resolve ) =>\n  { freeze\n    deepFreeze\n    thaw\n    deepThaw }  = require 'deepfreezer'\n  data          = @get_data cfg\n  data.datoms   = ( ( deepFreeze d ) for d in data.datoms )\n  count         = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = deepThaw d, true ### NOTE use `true` to avoid copying ###\n      throw new Error '^445-16^ identical' if e is d\n      throw new Error '^445-17^ frozen' if Object.isFrozen e\n      throw new Error '^445-18^ frozen' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@freeze___shallow_native = ( cfg ) -> new Promise ( resolve ) =>\n  { freeze }    = Object\n  data          = @get_data cfg\n  count         = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = freeze d, true ### NOTE use `true` to avoid copying ###\n      throw new Error '^445-19^ not identical' unless e is d\n      throw new Error '^445-20^ not frozen' unless Object.isFrozen e\n      throw new Error '^445-21^ is frozen' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@thaw_____shallow_native = ( cfg ) -> new Promise ( resolve ) =>\n  { freeze }    = Object\n  data          = @get_data cfg\n  count         = 0\n  data.datoms   = ( ( Object.freeze d ) for d in data.datoms )\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = Object.assign {}, d\n      throw new Error '^445-22^ identical' if e is d\n      throw new Error '^445-23^ frozen' if Object.isFrozen e\n      throw new Error '^445-24^ is frozen' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@copy_____shallow_native = @thaw_____shallow_native\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@copy_____fast_copy = ( cfg ) -> new Promise ( resolve ) =>\n  # debug require 'fast-copy'\n  # debug ( require 'fast-copy').copy\n  # debug ( require 'fast-copy').strict\n  copy          = require 'fast-copy'\n  data          = @get_data cfg\n  count         = 0\n  data.datoms   = ( ( Object.freeze d ) for d in data.datoms )\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = copy d\n      throw new Error '^445-25^ identical' if e is d\n      throw new Error '^445-26^ frozen' if Object.isFrozen e\n      throw new Error '^445-27^ is frozen' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@copy_____fast_copy_strict = ( cfg ) -> new Promise ( resolve ) =>\n  # debug require 'fast-copy'\n  # debug ( require 'fast-copy').copy\n  # debug ( require 'fast-copy').strict\n  copy          = require 'fast-copy'\n  data          = @get_data cfg\n  count         = 0\n  data.datoms   = ( ( Object.freeze d ) for d in data.datoms )\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = copy.strict d\n      throw new Error '^445-28^ identical' if e is d\n      throw new Error '^445-29^ frozen' if Object.isFrozen e\n      throw new Error '^445-30^ is frozen' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@copy_____klona = ( cfg ) -> new Promise ( resolve ) =>\n  { klona }     = require 'klona/json'\n  data          = @get_data cfg\n  count         = 0\n  data.datoms   = ( ( Object.freeze d ) for d in data.datoms )\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = klona d\n      throw new Error '^445-31^ identical' if e is d\n      throw new Error '^445-32^ frozen' if Object.isFrozen e\n      throw new Error '^445-33^ is frozen' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@copy_____deepcopy = ( cfg ) -> new Promise ( resolve ) =>\n  deepcopy      = require 'deepcopy'\n  data          = @get_data cfg\n  count         = 0\n  data.datoms   = ( ( Object.freeze d ) for d in data.datoms )\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  resolve => new Promise ( resolve ) =>\n    for d in data.datoms\n      e = deepcopy d\n      throw new Error '^445-34^ identical' if e is d\n      throw new Error '^445-35^ frozen' if Object.isFrozen e\n      throw new Error '^445-36^ is frozen' if Object.isFrozen e.$vnr\n      count++\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@_prewarm = ( cfg ) ->\n  ignore = []\n  for _ in [ 1 .. cfg.repetitions ]\n    ignore.push @get_data cfg.set_count for _ in [ 1 .. 5 ]\n  # ignore.length = 0\n  global.gc() if global.gc? ### TAINT consider to do this in BM moduke ###\n  return -> new Promise ( resolve ) -> resolve 1\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  bench       = BM.new_benchmarks()\n  # n           = 100000\n  cfg         = { repetitions: 3, set_count: 100, }\n  cfg         = { repetitions: 3, set_count: 1000, }\n  cfg         = { repetitions: 3, set_count: 1, }\n  cfg         = { repetitions: 3, set_count: 10, }\n  cfg         = { repetitions: 3, set_count: 10000, }\n  test_names  = [\n    'thaw_____letsfreezethat'\n    'copy_____klona'\n    'copy_____lft_xxx_1'\n    'copy_____lft_xxx_2'\n    'copy_____lft_xxx_3'\n    'copy_____fast_copy'\n\n    # 'copy_____shallow_native'\n    # 'freeze___letsfreezethat'\n    # 'freeze___deepfreeze'\n    # 'freeze___deepfreezer'\n    # 'thaw_____deepfreezer'\n    # 'freeze___shallow_native'\n    # 'thaw_____shallow_native'\n    # 'copy_____fast_copy_strict'\n    # 'copy_____deepcopy'\n    ]\n  # await BM.benchmark bench, cfg, false, @, '_prewarm'\n  global.gc() if global.gc?\n  for test_name in CND.shuffle test_names\n    whisper '-'.repeat 108\n    for _ in [ 1 .. cfg.repetitions ]\n      await BM.benchmark bench, cfg, false, @, test_name\n      global.gc() if global.gc?\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n\n\n\n"
  ]
}