{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/deep-copy.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'LFT'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\nlft225                    = require 'letsfreezethat225'\nlft310                    = require 'letsfreezethat310'\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  # @types.validate.hengist_dataprv_cfg cfg\n  #.........................................................................................................\n  lists_of_values = []\n  for _ in [ 1 .. cfg.set_count ]\n    lists_of_values.push DATA.get_values cfg.datom_length\n  #.........................................................................................................\n  lists_of_keys = ( ( DATA.get_words cfg.datom_length ) for idx in [ 1 .. cfg.set_count ] )\n  #.........................................................................................................\n  lists_of_key_value_pairs = []\n  for keys, set_idx in lists_of_keys\n    values = lists_of_values[ set_idx ]\n    lists_of_key_value_pairs.push ( [ key, values[ key_idx ] ] for key, key_idx in keys )\n  #.........................................................................................................\n  lists_of_facet_keys = []\n  for keys in lists_of_keys\n    lists_of_facet_keys.push \\\n      ( keys[ idx ] for idx in DATA.get_integers cfg.change_facet_count, 0, cfg.datom_length - 1 )\n  #.........................................................................................................\n  lists_of_facet_values = []\n  for keys in lists_of_keys\n    lists_of_facet_values.push DATA.get_values cfg.change_facet_count\n  # #.........................................................................................................\n  # debug '^337^', v for v in lists_of_values\n  # urge '^776^', k for k in lists_of_keys\n  # help '^776^', k, lists_of_keys[ idx ] for k, idx in lists_of_facet_keys\n  # info '^776^', v for v in lists_of_facet_values\n  #.........................................................................................................\n  data_cache  = {\n    lists_of_keys\n    lists_of_values\n    lists_of_facet_keys\n    lists_of_facet_values\n    lists_of_key_value_pairs }\n  data_cache  = ( require '../../../apps/letsfreezethat' ).freeze data_cache\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@letsfreezethat_v2 = ( cfg, sublibrary ) -> new Promise ( resolve ) =>\n  LFT = require '../letsfreezethat@2.2.5'\n  switch sublibrary\n    when 'standard' then { lets, } = LFT\n    when 'nofreeze' then { lets, } = LFT.nofreeze\n    else throw new Error \"^bm/lft@223 unknown sublibrary #{rpr sublibrary}\"\n  # @types.validate.hengist_dataprv_cfg cfg\n  data          = @get_data cfg\n  count         = 0\n  resolve => new Promise ( resolve ) =>\n    for key_value_pairs, datom_idx in data.lists_of_key_value_pairs\n      facet_keys    = data.lists_of_facet_keys[   datom_idx ]\n      facet_values  = data.lists_of_facet_values[ datom_idx ]\n      probe         = LFT.lets Object.fromEntries key_value_pairs\n      probe = LFT.lets probe, ( probe ) ->\n        for key, key_idx in facet_keys\n          probe[ key ]  = facet_values[ key_idx ]\n      count++ ### NOTE counting datoms, not facets ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@letsfreezethat_v2_standard = ( cfg ) -> @letsfreezethat_v2 cfg, 'standard'\n@letsfreezethat_v2_nofreeze = ( cfg ) -> @letsfreezethat_v2 cfg, 'nofreeze'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_letsfreezethat_v3_lets = ( cfg, lft_cfg ) -> new Promise ( resolve ) =>\n  if lft_cfg.freeze then  LFT = require '../../../apps/letsfreezethat/freeze'\n  else                    LFT = require '../../../apps/letsfreezethat/nofreeze'\n  data          = @get_data cfg\n  count         = 0\n  resolve => new Promise ( resolve ) =>\n    for key_value_pairs, datom_idx in data.lists_of_key_value_pairs\n      facet_keys    = data.lists_of_facet_keys[   datom_idx ]\n      facet_values  = data.lists_of_facet_values[ datom_idx ]\n      probe         = LFT.assign Object.fromEntries key_value_pairs\n      # whisper '^331^', probe\n      probe         = LFT.lets probe, ( probe ) ->\n        for key, key_idx in facet_keys\n          probe[ key ]  = facet_values[ key_idx ]\n        return null\n      # whisper '^331^', probe\n      count++ ### NOTE counting datoms, not facets ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@letsfreezethat_v3_lets_f1 = ( cfg ) -> @_letsfreezethat_v3_lets cfg, { freeze: true,  }\n@letsfreezethat_v3_lets_f0 = ( cfg ) -> @_letsfreezethat_v3_lets cfg, { freeze: false, }\n\n#-----------------------------------------------------------------------------------------------------------\n@_letsfreezethat_v3_thaw_freeze = ( cfg, lft_cfg ) -> new Promise ( resolve ) =>\n  if lft_cfg.freeze then  LFT = require '../../../apps/letsfreezethat/freeze'\n  else                    LFT = require '../../../apps/letsfreezethat/nofreeze'\n  data          = @get_data cfg\n  count         = 0\n  resolve => new Promise ( resolve ) =>\n    for key_value_pairs, datom_idx in data.lists_of_key_value_pairs\n      facet_keys    = data.lists_of_facet_keys[   datom_idx ]\n      facet_values  = data.lists_of_facet_values[ datom_idx ]\n      probe         = LFT.assign Object.fromEntries key_value_pairs\n      # whisper '^331^', probe\n      probe         = LFT.thaw probe\n      for key, key_idx in facet_keys\n        probe[ key ]  = facet_values[ key_idx ]\n      probe         = LFT.freeze probe\n      count++ ### NOTE counting datoms, not facets ###\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@letsfreezethat_v3_thaw_freeze_f1 = ( cfg ) -> @_letsfreezethat_v3_thaw_freeze cfg, { freeze: true,  }\n@letsfreezethat_v3_thaw_freeze_f0 = ( cfg ) -> @_letsfreezethat_v3_thaw_freeze cfg, { freeze: false, }\n\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  # debug '^446^', Object.keys ( require '../letsfreezethat@2.2.5' )\n  # debug '^446^', Object.keys lft225\n  # debug '^446^', Object.keys lft310\n  # process.exit 119\n  bench       = BM.new_benchmarks()\n  cfg         = { set_count: 100, datom_length: 5, change_facet_count: 3, }\n  # cfg         = { set_count: 3, datom_length: 2, change_facet_count: 1, }\n  repetitions = 3\n  test_names  = [\n    'letsfreezethat_v2_standard'\n    'letsfreezethat_v2_nofreeze'\n    'letsfreezethat_v3_lets_f1'\n    'letsfreezethat_v3_lets_f0'\n    'letsfreezethat_v3_thaw_freeze_f1'\n    'letsfreezethat_v3_thaw_freeze_f0'\n    ]\n  global.gc() if global.gc?\n  for _ in [ 1 .. repetitions ]\n    data_cache = null\n    global.gc() if global.gc?\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n\n# globalThis.structuredClone\n\n"
  ]
}