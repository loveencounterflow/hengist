{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/lftng-basics.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/LFTNG-BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  type_of }               = types.export()\n\n#-----------------------------------------------------------------------------------------------------------\nresolve_project_path = ( path ) -> PATH.resolve PATH.join __dirname, '../../..', path\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"LFTNG API\" ] = ( T, done ) ->\n  lft_cfg       = { copy: true, freeze: true, }\n  LFT           = ( require './letsfreezethat-NG' ).new lft_cfg\n  #.........................................................................................................\n  T.eq 'function', type_of LFT.new_object;  T.eq 0, LFT.new_object.length ### NOTE actually splat argument ###\n  T.eq 'function', type_of LFT.assign;      T.eq 1, LFT.assign.length ### NOTE actually splat argument ###\n  T.eq 'function', type_of LFT.freeze;      T.eq 1, LFT.freeze.length\n  T.eq 'function', type_of LFT.thaw;        T.eq 1, LFT.thaw.length\n  T.eq 'function', type_of LFT.lets;        T.eq 2, LFT.lets.length\n  T.eq 'function', type_of LFT.get;         T.eq 2, LFT.get.length\n  T.eq 'function', type_of LFT.set;         T.eq 3, LFT.set.length\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"LFTNG freeze, thaw\" ] = ( T, done ) ->\n  LFT_DFLT      = require './letsfreezethat-NG'\n  #.........................................................................................................\n  urge '^33738-1^'\n  LFT_CNFY      = null\n  T.throws /not a valid.*cfg/, -> LFT_CNFY = LFT_DFLT.new { copy: false, freeze: true, }\n  T.eq LFT_CNFY, null\n  #.........................................................................................................\n  do =>\n    urge '^33738-2^'\n    LFT = LFT_DFLT\n    d1 = {}\n    d2 = LFT.lets d1\n    T.ok d1 isnt d2\n    T.ok isa.frozen d2\n    d3 = LFT.set d2, 'key', 'value'\n    T.eq ( LFT.get d3, 'key' ), 'value'\n    T.eq d3.key, 'value'\n    T.ok d2 isnt d3\n    T.eq ( LFT.get d2, 'key' ), undefined\n    T.eq d2.key, undefined\n  #.........................................................................................................\n  do =>\n    urge '^33738-3^'\n    LFT = LFT_DFLT.new { copy: true,  freeze: true,   }\n    d1 = {}\n    d2 = LFT.lets d1\n    T.ok d1 isnt d2\n    T.ok isa.frozen d2\n    d3 = LFT.set d2, 'key', 'value'\n    T.ok isa.frozen d3\n    T.eq ( LFT.get d3, 'key' ), 'value'\n    T.eq d3.key, 'value'\n    T.ok d2 isnt d3\n    T.eq ( LFT.get d2, 'key' ), undefined\n    T.eq d2.key, undefined\n  #.........................................................................................................\n  do =>\n    LFT = LFT_DFLT.new { copy: true,  freeze: false,  }\n    urge '^33738-4^'\n    d1 = {}\n    d2 = LFT.lets d1\n    T.ok d1 isnt d2\n    T.ok not isa.frozen d2\n    d3 = LFT.set d2, 'key', 'value'\n    T.ok not isa.frozen d3\n    T.eq ( LFT.get d3, 'key' ), 'value'\n    T.eq d3.key, 'value'\n    T.ok d2 isnt d3\n    T.eq ( LFT.get d2, 'key' ), undefined\n    T.eq d2.key, undefined\n  #.........................................................................................................\n  do =>\n    LFT = LFT_DFLT.new { copy: false, freeze: false,  }\n    urge '^33738-5^'\n    d1 = {}\n    d2 = LFT.lets d1\n    T.ok d1 is d2\n    T.ok not isa.frozen d2\n    d3 = LFT.set d2, 'key', 'value'\n    T.ok not isa.frozen d3\n    T.eq ( LFT.get d3, 'key' ), 'value'\n    T.eq d3.key, 'value'\n    T.ok d2 is d3\n    T.eq ( LFT.get d2, 'key' ), 'value'\n    T.eq d2.key, 'value'\n  #.........................................................................................................\n  done()\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"LFTNG API\" ] = ( T, done ) ->\n#   lft_cfg       = { copy: true, freeze: true, }\n#   LFT           = ( require './letsfreezethat-NG' ).new lft_cfg\n#   #.........................................................................................................\n#   probes_and_matchers = []\n#     ]\n#   #.........................................................................................................\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n#       [ type, value, ] = probe\n#       resolve LFTNG.types.isa type, value\n#   done()\n#   return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  test @\n  # test @[ \"test VNR._first_nonzero_is_negative()\" ]\n\n\n\n"
  ]
}