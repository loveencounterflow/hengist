{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'LFT'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( n ) ->\n  return data_cache if data_cache?\n  probes_A  = DATA.get_random_nested_objects n, null, true\n  probes_B  = DATA.get_random_nested_objects n, null, true\n  # debug '^3342^', probes_A\n  # debug '^3342^', probes_B\n  # debug '^3342^', probes_C\n  ### NOTE could count number of actual properties in nested objects ###\n  data_cache = { probes_A, probes_B, }\n  return ( require '../../../apps/letsfreezethat' ).freeze data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@_letsfreezethat_v3_lets = ( n, show, lft_cfg ) -> new Promise ( resolve ) =>\n  if lft_cfg.freeze then  lets = require '../../../apps/letsfreezethat/freeze'\n  else                    lets = require '../../../apps/letsfreezethat/nofreeze'\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  resolve => new Promise ( resolve ) =>\n    for probe, idx in probes_A\n      probe = lets probe\n      probe = lets probe, ( probe ) ->\n        for k, v of probes_B[ idx ]\n          probe[ k ] = v\n        return null\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@letsfreezethat_v3_f1_lets = ( n, show ) -> @_letsfreezethat_v3_lets n, show, { freeze: true,  }\n@letsfreezethat_v3_f0_lets = ( n, show ) -> @_letsfreezethat_v3_lets n, show, { freeze: false, }\n\n#-----------------------------------------------------------------------------------------------------------\n@_letsfreezethat_v3_freezethaw = ( n, show, lft_cfg ) -> new Promise ( resolve ) =>\n  if lft_cfg.freeze then  lets = require '../../../apps/letsfreezethat/freeze'\n  else                    lets = require '../../../apps/letsfreezethat/nofreeze'\n  { thaw\n    freeze }    = lets\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  resolve => new Promise ( resolve ) =>\n    for probe, idx in probes_A\n      probe = thaw probe\n      for k, v of probes_B[ idx ]\n        probe[ k ] = v\n      probe = freeze probe\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@letsfreezethat_v3_f1_freezethaw = ( n, show ) -> @_letsfreezethat_v3_freezethaw n, show, { freeze: true,  }\n@letsfreezethat_v3_f0_freezethaw = ( n, show ) -> @_letsfreezethat_v3_freezethaw n, show, { freeze: false, }\n\n#-----------------------------------------------------------------------------------------------------------\n@_letsfreezethat_v2_lets = ( n, show, lft_cfg ) -> new Promise ( resolve ) =>\n  LFT = require '../letsfreezethat@2.2.5'\n  if lft_cfg.freeze then  { lets } = LFT\n  else                    { lets } = LFT.nofreeze\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  resolve => new Promise ( resolve ) =>\n    for probe, idx in probes_A\n      probe = lets probe\n      probe = lets probe, ( probe ) ->\n        for k, v of probes_B[ idx ]\n          probe[ k ] = v\n        return null\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@letsfreezethat_v2_f1_lets = ( n, show ) -> @_letsfreezethat_v2_lets n, show, { freeze: true,  }\n@letsfreezethat_v2_f0_lets = ( n, show ) -> @_letsfreezethat_v2_lets n, show, { freeze: false, }\n\n#-----------------------------------------------------------------------------------------------------------\n@_letsfreezethat_v2_freezethaw = ( n, show, lft_cfg ) -> new Promise ( resolve ) =>\n  LFT = require '../letsfreezethat@2.2.5'\n  if lft_cfg.freeze then  { freeze, } = LFT\n  else                    { freeze, } = LFT.nofreeze\n  ### Bug (or feature?) of LFTv2: in nofreeze mode, `thaw()` does not copy object ###\n  { thaw, }     = LFT\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  resolve => new Promise ( resolve ) =>\n    for probe, idx in probes_A\n      probe = thaw probe\n      for k, v of probes_B[ idx ]\n        probe[ k ] = v\n      probe = freeze probe\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@letsfreezethat_v2_f1_freezethaw = ( n, show ) -> @_letsfreezethat_v2_freezethaw n, show, { freeze: true,  }\n@letsfreezethat_v2_f0_freezethaw = ( n, show ) -> @_letsfreezethat_v2_freezethaw n, show, { freeze: false, }\n\n#-----------------------------------------------------------------------------------------------------------\n@immutable = ( n, show ) -> new Promise ( resolve ) =>\n  { Map }       = require 'immutable'\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  resolve => new Promise ( resolve ) =>\n    for probe, idx in probes_A\n      probe   = Map probe\n      for k, v of probes_B[ idx ]\n        probe = probe.set k, v\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@hamt = ( n, show ) -> new Promise ( resolve ) =>\n  hamt          = require 'hamt'\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  resolve => new Promise ( resolve ) =>\n    for probe, idx in probes_A\n      probe   = hamt.empty\n      probe   = probe.set k, v for k, v of probe ### NOTE must always iterate over facets, no bulk `set()` ###\n      for k, v of probes_B[ idx ]\n        probe = probe.set k, v\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@mori = ( n, show ) -> new Promise ( resolve ) =>\n  M = require 'mori'\n  count             = 0\n  { probes_A\n    probes_B }      = @get_data n\n  probes_A_entries  = []\n  for probe in probes_A\n    probes_A_entries.push ( [ k, v, ] for k, v of probe )\n  resolve => new Promise ( resolve ) =>\n    for probe, idx in probes_A_entries\n      probe   = M.hashMap probe...\n      for k, v of probes_B[ idx ]\n        probe = M.assoc probe, k, v\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@immer = ( n, show ) -> new Promise ( resolve ) =>\n  IMMER         = require 'immer'\n  { produce, }  = IMMER\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  resolve => new Promise ( resolve ) =>\n    for probe, idx in probes_A\n      probe   = produce probe, ( probe ) -> probe\n      probe = produce probe, ( probe ) ->\n        for k, v of probes_B[ idx ]\n          probe[ k ] = v\n        return probe\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@plainjs_mutable = ( n, show ) -> new Promise ( resolve ) =>\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  resolve => new Promise ( resolve ) =>\n    for probe, idx in probes_A\n      probe = Object.assign {}, probe\n      for k, v of probes_B[ idx ]\n        probe[ k ] = v\n      count++\n    resolve count\n  return null\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_immutable = ->\n  ```\n  const { Map } = require('immutable');\n  const map1 = Map({ a: 1, b: 2, c: 3 });\n  const map2 = map1.set('b', 50);\n  ```\n  help map1.get('b') + \" vs. \" + map2.get('b'); # 2 vs. 50\n  whisper Object.keys map1\n  whisper [ map1.keys()..., ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_hamt = ->\n  ```\n  var hamt = require('hamt');\n\n  // Keys can be any string and the map can store any value.\n  var h = hamt.empty\n      .set('key', 'value')\n      .set('object', { prop: 1 })\n      .set('falsy', null);\n\n  h.size === 0\n  h.has('key') === true\n  h.has('falsy') === true\n  h.get('key') === 'value'\n\n  // Iteration\n  for (let [key, value] of h)\n      console.log(key, value);\n\n  // Array.from(h.values()) === [{ prop: 1 }, 'value'], null];\n\n  // The data structure is fully immutable\n  var h2 = h.delete('key');\n  h2.get('key') === undefined\n  h.get('key') === 'value'\n  ```\n  urge '^33387^', h\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_mori = ->\n  M = require 'mori'\n  debug ( k for k of M ).sort()\n  debug M.vector 'a', 42\n  d = M.hashMap()\n  # d = M.mutable.thaw d\n  for n in [ 1 .. 100 ]\n    d = M.assoc d, n, n ** 2\n  # d = M.mutable.freeze d\n  d = M.assoc d, 'helo', 'world'\n  urge d\n  help M.toClj  d\n  urge M.toJs   d\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_letsfreezethat_new_api = ->\n  lets    = require '../../../apps/letsfreezethat'\n  d1      = lets { first: 1, }, { second: 2, }\n  d2      = lets.set d1, 'foo', 42\n  d3      = lets.assign d2, { foo: 108, bar: 'baz', }, { gnu: 'gnat', }\n  urge Object.isFrozen d1\n  urge Object.isFrozen d2\n  urge Object.isFrozen d3\n  help d1\n  help d2\n  help d3\n  urge d1 is d2\n  urge lets.get d1, 'foo'\n  urge lets.get d2, 'foo'\n  urge Object.keys d2\n  urge ( k for k of d2 )\n  urge Object.keys d3\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  bench       = BM.new_benchmarks()\n  # n           = 100000\n  n           = 100\n  n           = 10\n  n           = 1000\n  show        = false\n  repetitions = 3\n  test_names  = [\n    'immer'\n    'letsfreezethat_v3_f1_lets'\n    'letsfreezethat_v3_f0_lets'\n    'letsfreezethat_v2_f1_lets'\n    'letsfreezethat_v2_f0_lets'\n    'letsfreezethat_v3_f1_freezethaw'\n    'letsfreezethat_v3_f0_freezethaw'\n    'letsfreezethat_v2_f1_freezethaw'\n    'letsfreezethat_v2_f0_freezethaw'\n    'immutable'\n    'hamt'\n    'mori'\n    'plainjs_mutable'\n    ]\n  global.gc() if global.gc?\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      data_cache = null\n      global.gc() if global.gc?\n      await BM.benchmark bench, n, show, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n\n###\n\n# To Do\n\n* ramda (https://www.skypack.dev/search?q=ramda&p=1)\n* rambda (Lightweight and faster alternative to Ramda)\n* ramdax\n\n\n###\n\n\n\n###\n\n00:11 HENGIST/BENCHMARKS  ▶  letsfreezethat_v3_f0_freezethaw                  116,513 Hz   100.0 % │████████████▌│\n00:11 HENGIST/BENCHMARKS  ▶  letsfreezethat_v3_f1_freezethaw                   97,101 Hz    83.3 % │██████████▍  │\n00:11 HENGIST/BENCHMARKS  ▶  letsfreezethat_v3_f0_lets                         93,101 Hz    79.9 % │██████████   │\n00:11 HENGIST/BENCHMARKS  ▶  letsfreezethat_v3_f1_lets                         76,045 Hz    65.3 % │████████▏    │\n00:11 HENGIST/BENCHMARKS  ▶  plainjs_mutable                                   28,035 Hz    24.1 % │███          │\n00:11 HENGIST/BENCHMARKS  ▶  letsfreezethat_v2_f0_lets                         22,410 Hz    19.2 % │██▍          │\n00:11 HENGIST/BENCHMARKS  ▶  letsfreezethat_v2_f0_freezethaw                   16,854 Hz    14.5 % │█▊           │\n00:11 HENGIST/BENCHMARKS  ▶  letsfreezethat_v2_f1_freezethaw                   16,443 Hz    14.1 % │█▊           │\n00:11 HENGIST/BENCHMARKS  ▶  letsfreezethat_v2_f1_lets                         13,648 Hz    11.7 % │█▌           │\n00:11 HENGIST/BENCHMARKS  ▶  immutable                                          8,359 Hz     7.2 % │▉            │\n00:11 HENGIST/BENCHMARKS  ▶  mori                                               7,845 Hz     6.7 % │▉            │\n00:11 HENGIST/BENCHMARKS  ▶  hamt                                               7,449 Hz     6.4 % │▊            │\n00:11 HENGIST/BENCHMARKS  ▶  immer                                              4,943 Hz     4.2 % │▌            │\n\n###\n\n"
  ]
}