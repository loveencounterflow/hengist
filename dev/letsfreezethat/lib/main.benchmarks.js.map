{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'LFT'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( n ) ->\n  return data_cache if data_cache?\n  probes_A  = DATA.get_random_nested_objects n, null, true\n  probes_B  = DATA.get_random_nested_objects n, null, true\n  # debug '^3342^', probes_A\n  # debug '^3342^', probes_B\n  # debug '^3342^', probes_C\n  ### NOTE could count number of actual properties in nested objects ###\n  data_cache = { probes_A, probes_B, }\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@using_letsfreezethat = ( n, show, sublibrary ) -> new Promise ( resolve ) =>\n  LFT = require '../../../apps/letsfreezethat'\n  switch sublibrary\n    when 'standard' then { lets, } = LFT\n    when 'nofreeze' then { lets, } = LFT.nofreeze\n    when 'partial'  then { lets, } = LFT.partial\n    else throw new Error \"^bm/lft@223 unknown sublibrary #{rpr sublibrary}\"\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  resolve => new Promise ( resolve ) =>\n    for probe, idx in probes_A\n      # whisper '^331^', jr probe\n      keys    = Object.keys probe\n      probe   = lets probe #, ( probe ) -> null\n      count  += keys.length\n      for k, v of probes_B[ idx ]\n        probe = lets probe, ( probe ) ->\n          # whisper '^556^', k, jr v\n          count++\n          probe[ k ] = v\n          return null\n      for k in keys\n        probe = lets probe, ( probe ) ->\n          count++\n          probe[ k ] = 1234\n          return null\n      # help '^331^', jr probe\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_immutable = ( n, show ) -> new Promise ( resolve ) =>\n  { Map }       = require 'immutable'\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  resolve => new Promise ( resolve ) =>\n    for probe, idx in probes_A\n      # whisper '^331^', jr probe\n      keys    = Object.keys probe\n      probe   = Map probe\n      count  += keys.length\n      for k, v of probes_B[ idx ]\n        probe = probe.set k, v\n        count++\n      for k in keys\n        probe = probe.set k, 1234\n        count++\n      # help '^331^', jr probe\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_hamt = ( n, show ) -> new Promise ( resolve ) =>\n  hamt          = require 'hamt'\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  resolve => new Promise ( resolve ) =>\n    for probe, idx in probes_A\n      # whisper '^331^', jr probe\n      keys    = Object.keys probe\n      probe   = hamt.empty\n      probe   = probe.set k, v for k, v of probe\n      count  += keys.length\n      for k, v of probes_B[ idx ]\n        probe = probe.set k, v\n        count++\n      for k in keys\n        probe = probe.set k, 1234\n        count++\n      # help '^331^', jr probe\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_mori = ( n, show ) -> new Promise ( resolve ) =>\n  M = require 'mori'\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  resolve => new Promise ( resolve ) =>\n    for probe, idx in probes_A\n      # whisper '^331^', jr probe\n      keys    = Object.keys probe\n      probe   = M.hashMap()\n      probe   = M.assoc probe, k, v for k, v of probe\n      count  += keys.length\n      for k, v of probes_B[ idx ]\n        probe = M.assoc probe, k, v\n        count++\n      for k in keys\n        probe = M.assoc probe, k, 1234\n        count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_immer = ( n, show ) -> new Promise ( resolve ) =>\n  IMMER         = require 'immer'\n  { produce, }  = IMMER\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  resolve => new Promise ( resolve ) =>\n    for probe, idx in probes_A\n      # whisper '^331^', jr probe\n      keys    = Object.keys probe\n      probe   = produce probe, ( probe ) -> probe\n      count  += keys.length\n      for k, v of probes_B[ idx ]\n        probe = produce probe, ( probe ) ->\n          count++\n          probe[ k ] = v\n          return probe\n      for k in keys\n        probe = produce probe, ( probe ) ->\n          count++\n          probe[ k ] = 1234\n          return probe\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_plainjs_mutable = ( n, show ) -> new Promise ( resolve ) =>\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  resolve => new Promise ( resolve ) =>\n    for probe, idx in probes_A\n      # whisper '^331^', jr probe\n      keys        = Object.keys probe\n      probe       = {}\n      probe[ k ]  = v for k, v of probes_A[ idx ]\n      count      += keys.length\n      for k, v of probes_B[ idx ]\n        count++\n        probe[ k ] = v\n      for k in keys\n        count++\n        probe[ k ] = 1234\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_letsfreezethat_standard    = ( n, show ) -> @using_letsfreezethat n, show, 'standard'\n@using_letsfreezethat_nofreeze    = ( n, show ) -> @using_letsfreezethat n, show, 'nofreeze'\n@using_letsfreezethat_partial     = ( n, show ) -> @using_letsfreezethat n, show, 'partial'\n\n#-----------------------------------------------------------------------------------------------------------\n@using_ltfng_single = ( n, show ) -> new Promise ( resolve ) =>\n  LFT           = require './letsfreezethat-NG-rc2'\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  resolve => new Promise ( resolve ) =>\n    for probe, idx in probes_A\n      # whisper '^331^', jr probe\n      keys        = Object.keys probe\n      probe       = LFT.new_object probes_A\n      count      += keys.length\n      for k, v of probes_B[ idx ]\n        count++\n        probe = LFT.set probe, k, v\n      for k in keys\n        count++\n        probe = LFT.set probe, k, 1234\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_ltfng_assign_lets = ( n, show ) -> new Promise ( resolve ) =>\n  LFT           = require './letsfreezethat-NG-rc2'\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  lengths       = ( ( Object.keys probe_B ).length for probe_B in probes_B )\n  resolve => new Promise ( resolve ) =>\n    for probe, idx in probes_A\n      keys        = Object.keys probe\n      probe       = LFT.new_object probes_A\n      count      += keys.length\n      probe       = LFT.assign probe, probes_B[ idx ]\n      count      += lengths[ idx ]\n      probe       = LFT.lets probe, ( probe ) ->\n        for k in keys\n          count++\n          probe[ k ] = 1234\n        return null\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@using_ltfng_thaw_freeze = ( n, show ) -> new Promise ( resolve ) =>\n  LFT           = require './letsfreezethat-NG-rc2'\n  count         = 0\n  { probes_A\n    probes_B }  = @get_data n\n  lengths       = ( ( Object.keys probe_B ).length for probe_B in probes_B )\n  resolve => new Promise ( resolve ) =>\n    for probe, idx in probes_A\n      keys        = Object.keys probe\n      probe       = LFT.new_object probes_A\n      count      += keys.length\n      probe       = LFT.thaw probe\n      Object.assign probe, probes_B[ idx ]\n      count      += lengths[ idx ]\n      for k in keys\n        count++\n        probe[ k ] = 1234\n      probe       = LFT.freeze probe\n    resolve count\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_immutable = ->\n  ```\n  const { Map } = require('immutable');\n  const map1 = Map({ a: 1, b: 2, c: 3 });\n  const map2 = map1.set('b', 50);\n  ```\n  help map1.get('b') + \" vs. \" + map2.get('b'); # 2 vs. 50\n  whisper Object.keys map1\n  whisper [ map1.keys()..., ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_hamt = ->\n  ```\n  var hamt = require('hamt');\n\n  // Keys can be any string and the map can store any value.\n  var h = hamt.empty\n      .set('key', 'value')\n      .set('object', { prop: 1 })\n      .set('falsy', null);\n\n  h.size === 0\n  h.has('key') === true\n  h.has('falsy') === true\n  h.get('key') === 'value'\n\n  // Iteration\n  for (let [key, value] of h)\n      console.log(key, value);\n\n  // Array.from(h.values()) === [{ prop: 1 }, 'value'], null];\n\n  // The data structure is fully immutable\n  var h2 = h.delete('key');\n  h2.get('key') === undefined\n  h.get('key') === 'value'\n  ```\n  urge '^33387^', h\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_mori = ->\n  M = require 'mori'\n  debug ( k for k of M ).sort()\n  debug M.vector 'a', 42\n  d = M.hashMap()\n  # d = M.mutable.thaw d\n  for n in [ 1 .. 100 ]\n    d = M.assoc d, n, n ** 2\n  # d = M.mutable.freeze d\n  d = M.assoc d, 'helo', 'world'\n  urge d\n  help M.toClj  d\n  urge M.toJs   d\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_letsfreezethat_new_api = ->\n  LFT           = require './letsfreezethat-NG-rc2'\n  d1      = LFT.new_object { first: 1, }, { second: 2, }\n  d2      = LFT.set d1, 'foo', 42\n  d3      = LFT.assign d2, { foo: 108, bar: 'baz', }, { gnu: 'gnat', }\n  urge Object.isFrozen d1\n  urge Object.isFrozen d2\n  urge Object.isFrozen d3\n  help d1\n  help d2\n  help d3\n  urge d1 is d2\n  urge LFT.get d1, 'foo'\n  urge LFT.get d2, 'foo'\n  urge Object.keys d2\n  urge ( k for k of d2 )\n  urge Object.keys d3\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  bench       = BM.new_benchmarks()\n  # n           = 100000\n  n           = 100\n  show        = false\n  repetitions = 3\n  test_names  = [\n    'using_immer'\n    'using_letsfreezethat_standard'\n    'using_letsfreezethat_nofreeze'\n    # 'using_letsfreezethat_partial'\n    'using_ltfng_single'\n    'using_ltfng_assign_lets'\n    'using_ltfng_thaw_freeze'\n    'using_immutable'\n    'using_hamt'\n    'using_mori'\n    'using_plainjs_mutable'\n    ]\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      await BM.benchmark bench, n, show, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n  # await @demo_letsfreezethat_new_api()\n  # await @demo_immutable()\n  # await @demo_hamt()\n  # await @demo_mori()\n  # require 'hamt'\n\n###\n\n# To Do\n\n* ramda (https://www.skypack.dev/search?q=ramda&p=1)\n* rambda (Lightweight and faster alternative to Ramda)\n* ramdax\n\n\n###\n\n\n\n###\n\nn: 10, count: 143\n00:01 HENGIST/BENCHMARKS  ▶  using_plainjs_mutable                            928,465 Hz   100.0 % │████████████▌│\n00:01 HENGIST/BENCHMARKS  ▶  using_letsfreezethat_nofreeze                    149,161 Hz    16.1 % │██           │\n00:01 HENGIST/BENCHMARKS  ▶  using_letsfreezethat_standard                     36,536 Hz     3.9 % │▌            │\n00:01 HENGIST/BENCHMARKS  ▶  using_immutable                                   35,932 Hz     3.9 % │▌            │\n00:01 HENGIST/BENCHMARKS  ▶  using_hamt                                        25,408 Hz     2.7 % │▍            │\n00:01 HENGIST/BENCHMARKS  ▶  using_mori                                        10,344 Hz     1.1 % │▏            │\n00:01 HENGIST/BENCHMARKS  ▶  using_immer                                        9,069 Hz     1.0 % │▏            │\n00:01 HENGIST/BENCHMARKS  ▶  using_letsfreezethat_partial                       8,914 Hz     1.0 % │▏            │\n\nn: 100, count: 1313\n00:02 HENGIST/BENCHMARKS  ▶  using_plainjs_mutable                          1,623,933 Hz   100.0 % │████████████▌│\n00:02 HENGIST/BENCHMARKS  ▶  using_letsfreezethat_nofreeze                    339,169 Hz    20.9 % │██▋          │\n00:02 HENGIST/BENCHMARKS  ▶  using_immutable                                  119,138 Hz     7.3 % │▉            │\n00:02 HENGIST/BENCHMARKS  ▶  using_hamt                                       111,030 Hz     6.8 % │▉            │\n00:02 HENGIST/BENCHMARKS  ▶  using_letsfreezethat_standard                     93,930 Hz     5.8 % │▊            │\n00:02 HENGIST/BENCHMARKS  ▶  using_mori                                        29,827 Hz     1.8 % │▎            │\n00:02 HENGIST/BENCHMARKS  ▶  using_immer                                       16,342 Hz     1.0 % │▏            │\n00:02 HENGIST/BENCHMARKS  ▶  using_letsfreezethat_partial                      15,471 Hz     1.0 % │▏            │\n\nn: 10'000, count: 134'491\n00:43 HENGIST/BENCHMARKS  ▶  using_plainjs_mutable                            547,914 Hz   100.0 % │████████████▌│\n00:43 HENGIST/BENCHMARKS  ▶  using_immutable                                  328,788 Hz    60.0 % │███████▌     │\n00:43 HENGIST/BENCHMARKS  ▶  using_hamt                                       277,877 Hz    50.7 % │██████▍      │\n00:43 HENGIST/BENCHMARKS  ▶  using_letsfreezethat_nofreeze                    272,873 Hz    49.8 % │██████▎      │\n00:43 HENGIST/BENCHMARKS  ▶  using_mori                                       108,792 Hz    19.9 % │██▌          │\n00:43 HENGIST/BENCHMARKS  ▶  using_letsfreezethat_standard                     65,763 Hz    12.0 % │█▌           │\n00:43 HENGIST/BENCHMARKS  ▶  using_immer                                       18,940 Hz     3.5 % │▍            │\n00:43 HENGIST/BENCHMARKS  ▶  using_letsfreezethat_partial                      14,840 Hz     2.7 % │▍            │\n\nn: 100'000, count: 1'349'766\n07:13 HENGIST/BENCHMARKS  ▶  using_plainjs_mutable                            499,935 Hz   100.0 % │████████████▌│\n07:13 HENGIST/BENCHMARKS  ▶  using_immutable                                  444,554 Hz    88.9 % │███████████▏ │\n07:13 HENGIST/BENCHMARKS  ▶  using_hamt                                       356,847 Hz    71.4 % │████████▉    │\n07:13 HENGIST/BENCHMARKS  ▶  using_letsfreezethat_nofreeze                    195,966 Hz    39.2 % │████▉        │\n07:13 HENGIST/BENCHMARKS  ▶  using_mori                                       128,844 Hz    25.8 % │███▎         │\n07:13 HENGIST/BENCHMARKS  ▶  using_letsfreezethat_standard                     59,905 Hz    12.0 % │█▌           │\n07:13 HENGIST/BENCHMARKS  ▶  using_immer                                       18,180 Hz     3.6 % │▌            │\n07:13 HENGIST/BENCHMARKS  ▶  using_letsfreezethat_partial                      14,707 Hz     2.9 % │▍            │\n\n\n\n###"
  ]
}