{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/open-close.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/OPEN-CLOSE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY open() 1\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  db                  = new DBay()\n  schema              = 'aux'\n  db.open { schema, }\n  T?.eq db._dbs.aux.temporary, true\n  T?.eq ( Object.keys db._dbs ).length, 2\n  try\n    db ->\n      db SQL\"create table aux.squares ( n int not null primary key, square int not null );\"\n      throw new Error 'xxx'\n  catch error\n    throw error unless error.message is 'xxx'\n  info db.all_rows SQL\"select * from sqlite_schema;\"\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"______ DBAY open multiple connections\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  { Random }          = require PATH.join H.dbay_path, 'lib/random'\n  rnd                 = new Random()\n  path1               = PATH.join '/dev/shm', rnd.get_random_filename()\n  path2               = PATH.join '/dev/shm', rnd.get_random_filename()\n  path3               = PATH.join '/dev/shm', rnd.get_random_filename()\n  debug '^347654^', path1\n  debug '^347654^', path2\n  debug '^347654^', path3\n  db = do ->\n    ### Open all DBs separately, then attach them to a main DB; we can now write schema-less queries\n    using the `DBay` instances under `db.schema.${schema}` as well as cross-DB (cross-schema) queries\n    using the main `DBay` instance. ###\n    one                 = new DBay { path: path1, temporary: true, }\n    two                 = new DBay { path: path2, temporary: true, }\n    db                  = new DBay { path: path3, temporary: true, }\n    db.open { path: path1, schema: 'one', }\n    db.open { path: path2, schema: 'two', }\n    db.schema           = { one, two, }\n    db.create_table_function\n      name:       'dbay_schemas'\n      parameters: []\n      columns:    [ 'schema', ]\n      rows:       ( -> yield [ schema, ] for schema of @schema ).bind db\n    return db\n  db.schema.one SQL\"create table t1 ( x text primary key );\"\n  db.schema.one SQL\"insert into t1 values ( 'first1' );\"\n  db.schema.two SQL\"create table t2 ( x text primary key );\"\n  db.schema.two SQL\"insert into t2 values ( 'first2' );\"\n  db.schema.one =>\n    db.schema.one SQL\"insert into t1 values ( 'foo' ), ( 'bar' ), ( 'baz' );\"\n    urge '^347-1^'; console.table db.schema.one.all_rows SQL\"select * from t1;\"\n    urge '^347-2^'; console.table db.all_rows SQL\"select * from t1;\"\n    urge '^347-3^'; console.table db.all_rows SQL\"\"\"\n      select * from one.t1\n      union all\n      select * from two.t2;\"\"\"\n    return null\n  db SQL\"insert into one.t1 values ( 'other1' );\"\n  urge '^347-4^'; console.table db.all_rows SQL\"select * from one.t1;\"\n  urge '^347-5^'; console.table db.all_rows SQL\"select * from two.t2;\"\n  urge '^347-5^'; console.table db.all_rows SQL\"select * from dbay_schemas();\"\n  return done?()\n\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # test @[ \"DBAY open() 1\" ]\n  @[ \"______ DBAY open multiple connections\" ]()"
  ]
}