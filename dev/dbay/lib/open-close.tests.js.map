{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/open-close.tests.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,wBAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,MADF,EAEE,OAFF,EAGE,QAHF,EAIE,gBAJF,CAAA,GAI4B,KAAK,CAAC,MAAN,CAAA,CAJ5B;;EAKA,GAAA,GAA4B,MAAM,CAAC;;EACnC,GAAA,GAA4B,OAAA,CAAQ,mBAAR,EAzB5B;;;EA6BA,IAAC,CAAE,eAAF,CAAD,GAAuB,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACvB,QAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA;;MAAE,CAAC,CAAE,aAAH,CAAA;;IACA,CAAA,CAAE,IAAF,CAAA,GAAsB,OAAA,CAAQ,CAAC,CAAC,SAAV,CAAtB;IACA,EAAA,GAAsB,OAAA,CAAQ,IAAI,CAAC,IAAL,CAAU,CAAC,CAAC,SAAZ,EAAuB,aAAvB,CAAR;IACtB,EAAA,GAAsB,IAAI,IAAJ,CAAA;IACtB,MAAA,GAAsB;IACtB,EAAE,CAAC,IAAH,CAAQ,CAAE,MAAF,CAAR;;MACA,CAAC,CAAE,EAAH,CAAM,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,SAAlB,EAA6B,IAA7B;;;MACA,CAAC,CAAE,EAAH,CAAM,CAAE,MAAM,CAAC,IAAP,CAAY,EAAE,CAAC,IAAf,CAAF,CAAuB,CAAC,MAA9B,EAAsC,CAAtC;;AACA;MACE,EAAA,CAAG,QAAA,CAAA,CAAA;QACD,EAAA,CAAG,GAAG,CAAA,6EAAA,CAAN;QACA,MAAM,IAAI,KAAJ,CAAU,KAAV;MAFL,CAAH,EADF;KAIA,cAAA;MAAM;MACJ,IAAmB,KAAK,CAAC,OAAN,KAAiB,KAApC;QAAA,MAAM,MAAN;OADF;;IAEA,IAAA,CAAK,EAAE,CAAC,QAAH,CAAY,GAAG,CAAA,4BAAA,CAAf,CAAL;AACA,wCAAO;EAhBc,EA7BvB;;;EAoDA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA;;aAEhC,IAAA,CAAK,IAAC,CAAE,eAAF,CAAN;IAFgC,CAAA,IAAlC;;AApDA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/OPEN-CLOSE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY open() 1\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { Dbay }            = require H.dbay_path\n  DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  db                  = new Dbay()\n  schema              = 'aux'\n  db.open { schema, }\n  T?.eq db._dbs.aux.temporary, true\n  T?.eq ( Object.keys db._dbs ).length, 2\n  try\n    db ->\n      db SQL\"create table aux.squares ( n int not null primary key, square int not null );\"\n      throw new Error 'xxx'\n  catch error\n    throw error unless error.message is 'xxx'\n  info db.all_rows SQL\"select * from sqlite_schema;\"\n  return done?()\n\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  test @[ \"DBAY open() 1\" ]\n"
  ]
}