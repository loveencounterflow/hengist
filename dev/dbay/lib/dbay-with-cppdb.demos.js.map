{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/dbay-with-cppdb.demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/CONSTRUCTION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Dbay2\n\n  #---------------------------------------------------------------------------------------------------------\n  @C = guy.lft.freeze\n    ### TAINT consider to use package `bindings` ###\n    sqlt_node_path: PATH.resolve PATH.join __dirname, \\\n      '../../../apps/icql-dba/node_modules/better-sqlite3/build/Release/better_sqlite3.node'\n    defaults:\n      dbay_create_function_cfg:\n        safeIntegers:     2\n        deterministic:    true\n        directOnly:       false\n        varargs:          false\n\n  #---------------------------------------------------------------------------------------------------------\n  _cast_booleans_as_numbers: ( d ) ->\n    for k, v of d\n      if      v is true  then d[ k ] = 1\n      else if v is false then d[ k ] = 0\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  create_sqlt_connection: ( path_or_url ) ->\n    ### TAINT use `cfg`, validate ###\n    { Database, } = require @constructor.C.sqlt_node_path\n    cfg =\n      filename:       path_or_url\n      filenameGiven:  path_or_url\n      anonymous:      true        ### ??? ###\n      readonly:       false\n      fileMustExist:  false\n      timeout:        5000\n      verbose:        null\n      buffer:         null\n    return new Database cfg.filename, cfg.filenameGiven, cfg.anonymous, cfg.readonly, \\\n      cfg.fileMustExist, cfg.timeout, cfg.verbose, cfg.buffer\n\n  #---------------------------------------------------------------------------------------------------------\n  create_function: ( sqlt, name, cfg, fn ) ->\n    ### TAINT use `cfg`, validate ###\n    cfg           = { @constructor.C.defaults.dbay_create_function_cfg..., cfg..., }\n    # @_cast_booleans_as_numbers cfg\n    debug '^334^', cfg\n    arity         = if cfg.varargs then -1 else fn.length\n    # if (arity > 100) throw new RangeError('User-defined functions cannot have more than 100 arguments');\n    sqlt.function fn, name, arity, cfg.safeIntegers, cfg.deterministic, cfg.directOnly\n    return null\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ndemo_attach_memory_connections_1 = ->\n  db = new Dbay2()\n  sqlt1 = db.create_sqlt_connection 'file:your_db_name_here?mode=memory&cache=shared'\n  sqlt2 = db.create_sqlt_connection 'file:your_db_name_here?mode=memory&cache=shared'\n  #.........................................................................................................\n  sqlt1.exec SQL\"create table x ( n text );\"\n  sqlt2.exec SQL\"insert into x ( n ) values ( 'helo world' );\"\n  select = sqlt2.prepare SQL\"select * from x;\", {}, false\n  debug '^340^', select.run()\n  #.........................................................................................................\n  for row from select.iterate()\n    info row\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_udf_1 = ->\n  db        = new Dbay2()\n  new_bsqlt = require '../../../apps/icql-dba/node_modules/better-sqlite3'\n  # new_bsqlt = require '/tmp/icql-dba-interim/node_modules/better-sqlite3' ### test with cloned, fresh `npm install` ###\n  bsqlt1    = new_bsqlt 'file:your_db_name_here?mode=memory&cache=shared'\n  bsqlt2    = new_bsqlt 'file:your_db_name_here?mode=memory&cache=shared'\n  #.........................................................................................................\n  ### Create table on first connection, can insert data on second connconnection: ###\n  bsqlt1.exec SQL\"create table x ( n text );\"\n  bsqlt2.exec SQL\"insert into x ( n ) values ( 'helo world' );\"\n  bsqlt2.exec SQL\"insert into x ( n ) values ( 'good to see' );\"\n  bsqlt2.exec SQL\"insert into x ( n ) values ( 'it does work' );\"\n  #.........................................................................................................\n  do =>\n    ### Sanity check that data was persisted: ###\n    select = bsqlt2.prepare SQL\"select * from x;\", {}, false\n    select.run()\n    info '^309-1^', row for row from select.iterate()\n  #.........................................................................................................\n  do =>\n    ### Sanity check that UDF does work (on the same connconnection): ###\n    bsqlt1.function 'std_square', { varargs: false, }, ( n ) -> n ** 2\n    # select  = bsqlt1.prepare SQL\"select sqrt( 42 ) as n;\"\n    select  = bsqlt1.prepare SQL\"select std_square( 42 ) as n;\"\n    select.run()\n    info '^309-1^', row for row from select.iterate()\n  #.........................................................................................................\n  do =>\n    ### Run query (on 1st connconnection) that calls UDF running another query (on the 2nd connconnection): ###\n    bsqlt1.function 'std_row_count', { varargs: false, deterministic: false, }, ->\n      statement = bsqlt2.prepare SQL\"select count(*) as count from x;\", {}, false\n      statement.run()\n      rows      = [ statement.iterate()..., ]\n      return rows[ 0 ]?.count ? null\n    select  = bsqlt1.prepare SQL\"select std_row_count() as n;\"\n    select.run()\n    info '^309-1^', row for row from select.iterate()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_udf_2 = ->\n  # db = new Dbay2()\n  sqlt1 = db.create_sqlt_connection 'file:your_db_name_here?mode=memory&cache=shared'\n  sqlt2 = db.create_sqlt_connection 'file:your_db_name_here?mode=memory&cache=shared'\n  db.create_function sqlt1, 'std_square', null, ( n ) -> n ** 2\n  # db.create_function sqlt1, 'std_row_count', null, ( n ) ->\n  #   statement = sqlt1.prepare SQL\"select count(*) as count from x;\", {}, false\n  #   statement.run()\n  #   rows      = [ statement.iterate()..., ]\n  #   return rows[ 0 ]?.count ? null\n  # select  = sqlt1.prepare SQL\"select 42 as n, std_square( n ) as p;\", sqlt1, false\n  # select  = sqlt1.prepare SQL\"select 42 as n;\", db, false\n  # select  = sqlt1.prepare SQL\"select sqrt( 42 ) as n;\", db, false\n  # select  = sqlt1.prepare SQL\"select foo( 42 ) as n;\", db, false\n  select.run()\n  info '^309^', row for row from select.iterate()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_udf_dbay_sqlt = ->\n  { Dbay }  = require H.dbay_path\n  class Dbayx extends Dbay\n    @_rnd_int_cfg: true\n  db        = new Dbayx()\n  #.........................................................................................................\n  ### Create table on first connection, can insert data on second connconnection: ###\n  db.sqlt1.exec SQL\"create table x ( n text );\"\n  db.sqlt2.exec SQL\"insert into x ( n ) values ( 'helo world' );\"\n  db.sqlt2.exec SQL\"insert into x ( n ) values ( 'good to see' );\"\n  db.sqlt2.exec SQL\"insert into x ( n ) values ( 'it does work' );\"\n  #.........................................................................................................\n  do =>\n    ### Sanity check that data was persisted: ###\n    select = db.sqlt2.prepare SQL\"select * from x;\", {}, false\n    select.run()\n    info '^309-1^', row for row from select.iterate()\n  #.........................................................................................................\n  do =>\n    ### Sanity check that UDF does work (on the same connconnection): ###\n    db.sqlt1.function 'std_square', { varargs: false, }, ( n ) -> n ** 2\n    # select  = db.sqlt1.prepare SQL\"select sqrt( 42 ) as n;\"\n    select  = db.sqlt1.prepare SQL\"select std_square( 42 ) as n;\"\n    select.run()\n    info '^309-1^', row for row from select.iterate()\n  #.........................................................................................................\n  do =>\n    ### Run query (on 1st connconnection) that calls UDF running another query (on the 2nd connconnection): ###\n    db.sqlt1.function 'std_row_count', { varargs: false, deterministic: false, }, ->\n      statement = db.sqlt2.prepare SQL\"select count(*) as count from x;\", {}, false\n      statement.run()\n      rows      = [ statement.iterate()..., ]\n      return rows[ 0 ]?.count ? null\n    select  = db.sqlt1.prepare SQL\"select std_row_count() as n;\"\n    select.run()\n    info '^309-1^', row for row from select.iterate()\n  return null\n\n############################################################################################################\nif require.main is module then do =>\n  # demo_attach_memory_connections_1()\n  # demo_udf_1()\n  demo_udf_dbay_sqlt()\n"
  ]
}