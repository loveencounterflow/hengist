{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sql.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/CONSTRUCTION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n# MMX                       = require '../../../apps/multimix/lib/cataloguing'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY advanced interpolation\" ] = ( T, done ) ->\n  { DBay }          = require H.dbay_path\n  E                 = require H.dbay_path + '/lib/errors'\n  db                = new DBay()\n  do => #...................................................................................................\n    sql     = SQL\"select $:col_a, $:col_b where $:col_b in $V:choices\"\n    d       = { col_a: 'foo', col_b: 'bar', choices: [ 1, 2, 3, ], }\n    result  = db.sql.interpolate sql, d\n    info '^23867^', result\n    T.eq result, SQL\"\"\"select \"foo\", \"bar\" where \"bar\" in ( 1, 2, 3 )\"\"\"\n  do => #...................................................................................................\n    sql     = SQL\"select ?:, ?: where ?: in ?V:\"\n    d       = [ 'foo', 'bar', 'bar', [ 1, 2, 3, ], ]\n    result  = db.sql.interpolate sql, d\n    info '^23867^', result\n    T.eq result, SQL\"\"\"select \"foo\", \"bar\" where \"bar\" in ( 1, 2, 3 )\"\"\"\n  T.throws /unknown interpolation format 'X'/, => #.........................................................\n    sql     = SQL\"select ?:, ?X: where ?: in ?V:\"\n    d       = [ 'foo', 'bar', 'bar', [ 1, 2, 3, ], ]\n    result  = db.sql.interpolate sql, d\n  done() #..................................................................................................\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n"
  ]
}