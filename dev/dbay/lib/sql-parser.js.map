{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sql-parser.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/OUTLINES/BASIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n\n\nf = ->\n  sql = SQL\"\"\"\n      -- drop table if exists main.outlines;\n      -- drop table if exists main.fontnicks;\n      -- drop index if exists main.ads_location_idx;\n      -- drop table if exists main.ads;\n      -- drop table if exists main.lines;\n      -- ...................................................................................................\n      -- vacuum main;\n      -- ...................................................................................................\n      create table main.fontnicks (\n          fontnick    text    not null,\n          fspath      text    not null,\n        primary key ( fontnick ) );\n      -- ...................................................................................................\n      create table main.outlines (\n          fontnick  text    not null references fontnicks ( fontnick ),\n          gid       integer not null,\n          sid       text generated always as ( 'o' || gid || fontnick ) virtual,\n          chrs      text,\n          /* Shape ID (SID): */\n          /* bounding box */\n          x         float   not null,\n          y         float   not null,\n          x1        float   not null,\n          y1        float   not null,\n          /* PathData (PD): */\n          pd        text generated always as ( drb_unzip( pd_blob ) ) virtual,\n          pd_blob   blob    not null,\n          primary key ( fontnick, gid ) );\n      -- ...................................................................................................\n      create table main.ads (\n          id      integer not null primary key,\n          doc     integer not null, -- document idx\n          par     integer not null, -- paragraph idx\n          adi     integer not null, -- arr. dat. idx\n          sgi     integer not null, -- shape group idx, being a suite of ADs that must be reshaped if broken\n          alt     integer not null, -- variant idx\n          gid     integer,\n          b       integer,\n          x       integer not null,\n          y       integer not null,\n          dx      integer not null,\n          dy      integer not null,\n          lx      integer, -- line x, i.e. actual x when put onto the line\n          x1      integer generated always as ( x + dx ) virtual not null,\n          -- y1      integer generated always as ( y + dy ) virtual not null,\n          chrs    text,\n          sid     text, -- references main.outlines ( sid ) ??\n          nobr    boolean not null, -- if true, must re-shape when separated from previous outline\n          br      text\n          );\n      -- ...................................................................................................\n      create unique index main.ads_location_idx on ads ( doc, par, adi, sgi, alt );\n      -- ...................................................................................................\n      create table main.line_ads (\n          doc     integer not null, -- document idx  ### TAINT should be FK\n          par     integer not null, -- paragraph idx ### TAINT should be FK\n          lnr     integer not null,\n          ads_id  integer not null references main.ads ( id ),\n          primary key ( doc, par, lnr, ads_id )\n          );\n      -- ...................................................................................................\n      create table main.lines (\n          -- id      integer not null primary key,\n          doc     integer not null, -- document idx  ### TAINT should be FK\n          par     integer not null, -- paragraph idx ### TAINT should be FK\n          lnr     integer default null, -- line number (from the left)\n          rnr     integer default null, -- line number (from the right)\n          x0      integer not null, -- x coord. of start-of-line (rel. to single line set by `shape_text()`)\n          x1      integer not null, -- x coord. of end-of-line   (rel. to single line set by `shape_text()`)\n          primary key ( doc, par, lnr )\n          );\n    \"\"\"\n  return sql\n\n#-----------------------------------------------------------------------------------------------------------\nquick_demo_1 = ->\n  sqliteParser  = require '/tmp/sql-parsing/sqlite-parser'\n  sql           = SQL\"\"\"select pants from laundry;\"\"\"\n  sql           = SQL\"\"\"create table x ( a integer foobar );\"\"\"\n  sql           = f()\n  try\n    ast           = sqliteParser sql\n    debug ast\n  catch error\n    debug ( k for k of error )\n    debug error.expected\n    debug error.found\n    debug error.name\n    debug error.location\n    debug error.message\n    # debug error.constructor\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nquick_demo_2 = ->\n  # { Parser }  = require '/tmp/sql-parsing/node_modules/node-sql-parser'\n  # { Parser }  = require '/tmp/sql-parsing/node_modules/node-sql-parser/build/bigquery'\n  # { Parser }  = require '/tmp/sql-parsing/node_modules/node-sql-parser/build/db2'\n  # { Parser }  = require '/tmp/sql-parsing/node_modules/node-sql-parser/build/flinksql'\n  # { Parser }  = require '/tmp/sql-parsing/node_modules/node-sql-parser/build/hive'\n  # { Parser }  = require '/tmp/sql-parsing/node_modules/node-sql-parser/build/mariadb'\n  # { Parser }  = require '/tmp/sql-parsing/node_modules/node-sql-parser/build/mysql'\n  { Parser }  = require '/tmp/sql-parsing/node_modules/node-sql-parser/build/postgresql'\n  # { Parser }  = require '/tmp/sql-parsing/node_modules/node-sql-parser/build/sqlite'\n  # { Parser }  = require '/tmp/sql-parsing/node_modules/node-sql-parser/build/transactsql'\n  sql         = SQL\"\"\"create table x ( a integer foobar );\"\"\"\n  sql         = f()\n  # lines       = sql.split '\\n'\n  parser      = new Parser()\n  try\n    ast = parser.astify sql\n    debug ast\n  catch error\n    debug ( k for k of error )\n    debug error.message\n    debug error.expected\n    # debug error.found\n    debug error.name\n    debug error.location\n    head  = sql[ ... error.location.start.offset ]\n    mid   = sql[ error.location.start.offset .. error.location.end.offset ]\n    tail  = sql[ error.location.end.offset + 1 ... ]\n    info ( CND.blue head ) + ( CND.yellow CND.reverse mid ) + ( CND.blue tail )\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  quick_demo_2()\n\n"
  ]
}