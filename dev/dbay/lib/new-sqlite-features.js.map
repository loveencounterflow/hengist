{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/new-sqlite-features.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/NEW-SQLITE-FEATURES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SQLite 202201112328 date and time functions\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { DBay }        = require H.dbay_path\n  db              = new DBay()\n  db.create_function\n    name: 'xxx_timestamp_s'\n    call: -> Date.now() / 1000\n  #.........................................................................................................\n  ### Mysteriously, delta t varies between 0 and 0.9 in observed cases. It shouldnt, but it does. ###\n  T?.ok ( db.single_value SQL\"select abs( unixepoch() - xxx_timestamp_s() );\" ) < 2\n  #.........................................................................................................\n  ### These should (https://www.sqlite.org/draft/lang_datefunc.html#uepch) accept timestamps but they\n  don't? But the methods are there. ###\n  debug '^323^', db.first_row SQL\"\"\"\n    with v1 as ( select unixepoch() as ue )\n    select\n        ue                                    as d0,\n        datetime()                            as d1,\n        strftime( '%Y-%m-%d %H:%M:%S' )       as d2\n      from v1;\"\"\"\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"SQLite 202201112328 JSON operators\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { DBay }        = require H.dbay_path\n  db              = new DBay()\n  #.........................................................................................................\n  T?.eq ( db.single_value SQL\"\"\"select '{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> '$' as d;\"\"\" ), '{\"a\":2,\"c\":[4,5,{\"f\":7}]}'\n  T?.eq ( db.single_value SQL\"\"\"select '[11,22,33,41]' -> 3               as d;\"\"\" ), '41'\n  T?.eq ( db.single_value SQL\"\"\"select '[11,22,33,41]' ->> 3              as d;\"\"\" ), 41\n  T?.eq ( db.single_value SQL\"\"\"select json_insert('{\"a\":2,\"c\":4}', '$.a', 99)             as d;\"\"\" ), '{\"a\":2,\"c\":4}'\n  T?.eq ( db.single_value SQL\"\"\"select json_insert('{\"a\":2,\"c\":4}', '$.e', 99)             as d;\"\"\" ), '{\"a\":2,\"c\":4,\"e\":99}'\n  T?.eq ( db.single_value SQL\"\"\"select json_replace('{\"a\":2,\"c\":4}', '$.a', 99)            as d;\"\"\" ), '{\"a\":99,\"c\":4}'\n  T?.eq ( db.single_value SQL\"\"\"select json_replace('{\"a\":2,\"c\":4}', '$.e', 99)            as d;\"\"\" ), '{\"a\":2,\"c\":4}'\n  T?.eq ( db.single_value SQL\"\"\"select json_set('{\"a\":2,\"c\":4}', '$.a', 99)                as d;\"\"\" ), '{\"a\":99,\"c\":4}'\n  T?.eq ( db.single_value SQL\"\"\"select json_set('{\"a\":2,\"c\":4}', '$.e', 99)                as d;\"\"\" ), '{\"a\":2,\"c\":4,\"e\":99}'\n  T?.eq ( db.single_value SQL\"\"\"select json_set('{\"a\":2,\"c\":4}', '$.c', '[97,96]')         as d;\"\"\" ), '{\"a\":2,\"c\":\"[97,96]\"}'\n  T?.eq ( db.single_value SQL\"\"\"select json_set('{\"a\":2,\"c\":4}', '$.c', json('[97,96]'))   as d;\"\"\" ), '{\"a\":2,\"c\":[97,96]}'\n  T?.eq ( db.single_value SQL\"\"\"select json_set('{\"a\":2,\"c\":4}', '$.c', json_array(97,96)) as d;\"\"\" ), '{\"a\":2,\"c\":[97,96]}'\n  #.........................................................................................................\n  done?()\n\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n"
  ]
}