{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/parametrized-views.demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/WINDOWED-SEARCH.DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\n# types                     = new ( require 'intertype' ).Intertype\n# { isa\n#   type_of\n#   validate\n#   validate_list_of }      = types.export()\nSQL                       = String.raw\n\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_2 = ->\n  { DBay }          = require H.dbay_path\n  { Tbl, }          = require '../../../apps/icql-dba-tabulate'\n  path              = '/dev/shm/cities.sqlite'\n  db                = new DBay { path, }\n  dtab              = new Tbl { db, }\n  v                 = { city: null, }\n  cities            = require '../../../assets/german-cities.json'\n  #.........................................................................................................\n  db.create_function name: 'euclidean_distance', deterministic: true, call: ( x1, y1, x2, y2 ) =>\n    Math.sqrt ( x1 - x2 ) ** 2 + ( y1 - y2 ) ** 2\n  #.........................................................................................................\n  get_var = ( name ) =>\n    throw new Error \"value not set: #{rpr name}\" unless ( R = v[ name ] )?\n    return switch\n      when R is true  then 1\n      when R is false then 0\n      else R\n  #.........................................................................................................\n  db.create_function name: 'get_var', deterministic: false, call: get_var\n  #.........................................................................................................\n  db.create_table_function\n    name:           'variables',\n    deterministic:  false,\n    columns:        [ 'name', 'value', ]\n    parameters:     []\n    rows:           ( name ) -> yield [ name, ( get_var name ), ] for name of v\n  #.........................................................................................................\n  db =>\n    db SQL\"\"\"\n      drop view   if exists distance_from_current_city;\n      drop view   if exists current_city;\n      drop table  if exists cities;\n      create table cities(\n          city text not null primary key,\n          lat float not null,\n          lng float not null,\n          x float generated always as ( lat * 111 ) virtual,\n          y float generated always as ( lng *  85 ) virtual );\n      create view current_city as select * from cities where city = get_var( 'city' );\n      create view distance_from_current_city as\n        with v1 as ( select * from cities where city = get_var( 'city' ) limit 1 )\n        select\n          v1.city                                     as city_from,\n          c.city                                      as city_to,\n          -- c.lat ,\n          -- c.lng,\n          -- c.x,\n          -- c.y,\n          euclidean_distance( c.x, c.y, v1.x, v1.y )  as distance\n        from cities as c, v1\n        where city_from != city_to\n      \"\"\"\n  #.........................................................................................................\n  db =>\n    insert_city = db.prepare_insert { into: 'cities', }\n    for city in cities\n      try\n        insert_city.run city\n      catch error\n        warn error.message, rpr city.city\n  #.........................................................................................................\n  echo dtab._tabulate db SQL\"select * from cities order by city limit 10;\"\n  v.city = 'Bremen'\n  echo dtab._tabulate db SQL\"select get_var( 'city' ) as city;\"\n  echo dtab._tabulate db SQL\"select * from current_city;\"\n  echo dtab._tabulate db SQL\"select * from distance_from_current_city where distance < 50 order by distance;\"\n  v.x     = 20\n  v.n     = 123.4567890123456789\n  v.foo   = 'bar'\n  v.baz   = true\n  v.sqrt2 = Math.sqrt 2\n  echo dtab._tabulate db SQL\"select * from variables();\"\n  #.........................................................................................................\n  return null\n\n\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  @demo_2()\n\n\n\n\n"
  ]
}