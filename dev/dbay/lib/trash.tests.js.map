{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/trash.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/TRASH'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nguy                       = require '../../../apps/guy'\nMMX                       = require '../../../apps/multimix/lib/cataloguing'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY trash basic functionality with private API\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  { SQL  }            = DBay\n  db                  = new DBay()\n  db._implement_trash()\n  db SQL\"\"\"\n    create table first ( a integer not null primary key, b text unique not null );\n    create table second ( x integer references first ( a ), y text references first ( b ) );\n    \"\"\"\n  result  = db.all_rows SQL\"select * from dbay_create_table_statements;\"\n  result  = ( row.txt for row from result when not row.txt.startsWith '--' ).join '\\n'\n  debug result\n  T?.eq result, \"\"\"\n    .bail on\n    pragma foreign_keys = false;\n    begin transaction;\n    drop table if exists \"first\";\n    drop table if exists \"second\";\n    create table \"first\" (\n        \"a\" integer not null,\n        \"b\" text not null unique,\n      primary key ( \"a\" )\n     );\n    create table \"second\" (\n        \"x\" integer,\n        \"y\" text,\n      foreign key ( \"x\" ) references \"first\" ( \"a\" ),\n      foreign key ( \"y\" ) references \"first\" ( \"b\" )\n     );\n    commit;\"\"\"\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY trash basic functionality with public API\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  { SQL  }            = DBay\n  db                  = new DBay()\n  db._implement_trash()\n  db SQL\"\"\"\n    create table first ( a integer not null primary key, b text unique not null );\n    create table second ( x integer references first ( a ), y text references first ( b ) );\n    \"\"\"\n  result  = db.trash()\n  result  = ( row.txt for row from result when not row.txt.startsWith '--' ).join '\\n'\n  T?.eq result, \"\"\"\n    .bail on\n    pragma foreign_keys = false;\n    begin transaction;\n    drop table if exists \"first\";\n    drop table if exists \"second\";\n    create table \"first\" (\n        \"a\" integer not null,\n        \"b\" text not null unique,\n      primary key ( \"a\" )\n     );\n    create table \"second\" (\n        \"x\" integer,\n        \"y\" text,\n      foreign key ( \"x\" ) references \"first\" ( \"a\" ),\n      foreign key ( \"y\" ) references \"first\" ( \"b\" )\n     );\n    commit;\"\"\"\n  return done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n  # test @[ \"DBAY trash basic functionality with public API\" ]\n  # @[ \"DBAY trash basic functionality with public API\" ]()\n\n\n\n"
  ]
}