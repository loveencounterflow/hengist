{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/macros.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DBAY/sqlx'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate }              = types\n# X                         = require '../../../lib/helpers'\nr                         = String.raw\nnew_xregex                = require 'xregexp'\nE                         = require '../../../apps/dbay/lib/errors'\nequals                    = ( require 'util' ).isDeepStrictEqual\n{ Tbl, }                  = require '../../../apps/icql-dba-tabulate'\ndtab                      = new Tbl { dba: null, }\nsql_lexer                 = require '../../../apps/dbay-sql-lexer'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_methods = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  { SQL  }          = DBay\n  db                = new DBay()\n  #.........................................................................................................\n  T?.eq ( type_of db.macros?.declare ), 'function'\n  T?.eq ( type_of db.macros?.resolve ), 'function'\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_assert_basic_functionality = ( T, done ) ->\n  ### NOTE this test is a shortened version of the more extensive tests to be found at\n  https://github.com/loveencounterflow/hengist/tree/master/dev/dbay-sql-macros/src; it's only here to\n  assert that `declare()` and `resolve()` behave in roughly the expted ways. ###\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  { SQL  }          = DBay\n  db                = new DBay()\n  #.........................................................................................................\n  _test = ( probe, matcher ) ->\n    try\n      sqlx  = probe\n      sql   = db.macros.resolve sqlx\n      help rpr sqlx\n      info rpr sql\n      T?.eq sql, matcher\n    catch error\n      T?.eq \"ERROR\", \"#{error.message}\\n#{rpr probe}\"\n  #.........................................................................................................\n  db.macros.declare SQL\"\"\"@secret_power( @a, @b ) = power( @a, @b ) / @b;\"\"\"\n  do ->\n    sqlx  = SQL\"\"\"select @secret_power( 3, 2 );\"\"\"\n    sql   = SQL\"\"\"select power( 3, 2 ) / 2;\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_implicit_expansion = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  { SQL  }          = DBay\n  db                = new DBay { macros: true, }\n  #.........................................................................................................\n  db.macros.declare SQL\"\"\"@secret_power( @a, @b ) = power( @a, @b ) / @b;\"\"\"\n  #.........................................................................................................\n  do ->\n    probe   = SQL\"\"\"select @secret_power( 3, 2 ) as p;\"\"\"\n    matcher = [ { p: 4.5 } ]\n    result  = db.all_rows probe\n    T?.eq result, matcher\n  #.........................................................................................................\n  do ->\n    probe   = SQL\"\"\"select @secret_power( 3, 2 ) as p;\"\"\"\n    matcher = [ 4.5, ]\n    result  = db.all_first_values probe\n    T?.eq result, matcher\n  #.........................................................................................................\n  do ->\n    probe   = SQL\"\"\"select @secret_power( 3, 2 ) as p;\"\"\"\n    matcher = [ { p: 4.5 } ]\n    result  = db probe\n    result  = [ result..., ]\n    T?.eq result, matcher\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @dbay_macros_methods()\n  # test @dbay_macros_methods\n  # @dbay_macros_implicit_expansion()\n  test @\n\n\n\n"
  ]
}