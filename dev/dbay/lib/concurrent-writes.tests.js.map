{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/concurrent-writes.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DBAY/sqlx'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate }              = types\n# X                         = require '../../../lib/helpers'\nr                         = String.raw\nnew_xregex                = require 'xregexp'\nE                         = require '../../../apps/dbay/lib/errors'\nequals                    = ( require 'util' ).isDeepStrictEqual\n{ Tbl, }                  = require '../../../apps/icql-dba-tabulate'\ndtab                      = new Tbl { dba: null, }\nsql_lexer                 = require '../../../apps/dbay-sql-lexer'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@dbay_shadow_db = ( T, done ) ->\n  { DBay }            = require '../../../apps/dbay'\n  { SQL  }            = DBay\n  #.........................................................................................................\n  my_path = '/tmp/helo.db'\n  db      = new DBay { path: my_path, }\n  db ->\n    if ( db.all_rows SQL\"select name from sqlite_schema where name = 'numbers';\" ).length is 0\n      db SQL\"\"\"create table numbers (\n        n   integer not null primary key,\n        sqr integer );\"\"\"\n    #.......................................................................................................\n    insert_number = db.prepare_insert { into: 'numbers', on_conflict: { update: true, }, }\n    db insert_number, { n, sqr: null, } for n in [ 0 .. 10 ]\n  #.........................................................................................................\n  # H.tabulate \"numbers\", db SQL\"\"\"select * from numbers order by n;\"\"\"\n  select_numbers = db.prepare SQL\"select * from numbers order by n;\"\n  T?.eq ( db.all_rows SQL\"select * from numbers order by n;\" ), [ { n: 0, sqr: null }, { n: 1, sqr: null }, { n: 2, sqr: null }, { n: 3, sqr: null }, { n: 4, sqr: null }, { n: 5, sqr: null }, { n: 6, sqr: null }, { n: 7, sqr: null }, { n: 8, sqr: null }, { n: 9, sqr: null }, { n: 10, sqr: null } ]\n  #.........................................................................................................\n  db = db.with_shadow read_db = db, ({ db: write_db, }) ->\n    db.pragma SQL\"journal_mode = wal;\"\n    db ->\n      insert_number = write_db.prepare_insert { into: 'numbers', on_conflict: { update: true, }, }\n      for d from read_db select_numbers\n        write_db insert_number, { n, sqr: n ** 2, } for n in [ 0 .. 10 ]\n      return null\n    return null\n  #.........................................................................................................\n  T?.eq ( db.all_rows SQL\"select * from numbers order by n;\" ), [ { n: 0, sqr: 0 }, { n: 1, sqr: 1 }, { n: 2, sqr: 4 }, { n: 3, sqr: 9 }, { n: 4, sqr: 16 }, { n: 5, sqr: 25 }, { n: 6, sqr: 36 }, { n: 7, sqr: 49 }, { n: 8, sqr: 64 }, { n: 9, sqr: 81 }, { n: 10, sqr: 100 } ]\n  # H.tabulate \"numbers\", db SQL\"\"\"select * from numbers order by n;\"\"\"\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @dbay_macros_methods()\n  # test @dbay_macros_methods\n  # @dbay_macros_implicit_expansion()\n  test @\n\n\n\n"
  ]
}