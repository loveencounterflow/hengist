{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/concurrent-writes.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DBAY/sqlx'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate }              = types\n# X                         = require '../../../lib/helpers'\nr                         = String.raw\nnew_xregex                = require 'xregexp'\nE                         = require '../../../apps/dbay/lib/errors'\nequals                    = ( require 'util' ).isDeepStrictEqual\n{ Tbl, }                  = require '../../../apps/icql-dba-tabulate'\ndtab                      = new Tbl { dba: null, }\nsql_lexer                 = require '../../../apps/dbay-sql-lexer'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@dbay_virtual_concurrent_writes = ( T, done ) ->\n  { DBay }            = require '../../../apps/dbay'\n  { SQL  }            = DBay\n  #.........................................................................................................\n  my_path = '/tmp/helo.db'\n  db      = new DBay { path: my_path, }\n  debug '^23-1^'\n  db ->\n    if ( db.all_rows SQL\"select name from sqlite_schema where name = 'numbers';\" ).length is 0\n      db SQL\"\"\"create table numbers (\n        n   integer not null primary key,\n        sqr integer );\"\"\"\n    #.......................................................................................................\n    insert_number = db.prepare_insert { into: 'numbers', on_conflict: { update: true, }, }\n    db insert_number, { n, sqr: null, } for n in [ 0 .. 10 ]\n  #.........................................................................................................\n  select_numbers  = db.prepare SQL\"select * from numbers order by n;\"\n  insert_number   = db.prepare_insert { into: 'numbers', on_conflict: { update: true, }, }\n  T?.eq ( db.all_rows select_numbers ), [ { n: 0, sqr: null }, { n: 1, sqr: null }, { n: 2, sqr: null }, { n: 3, sqr: null }, { n: 4, sqr: null }, { n: 5, sqr: null }, { n: 6, sqr: null }, { n: 7, sqr: null }, { n: 8, sqr: null }, { n: 9, sqr: null }, { n: 10, sqr: null } ]\n  #.........................................................................................................\n  db.with_deferred_write ( write ) ->\n    for d from db select_numbers\n      write insert_number, { n: d.n, sqr: d.n ** 2, }\n  #.........................................................................................................\n  result = db.all_rows select_numbers\n  T?.eq result, [ { n: 0, sqr: 0 }, { n: 1, sqr: 1 }, { n: 2, sqr: 4 }, { n: 3, sqr: 9 }, { n: 4, sqr: 16 }, { n: 5, sqr: 25 }, { n: 6, sqr: 36 }, { n: 7, sqr: 49 }, { n: 8, sqr: 64 }, { n: 9, sqr: 81 }, { n: 10, sqr: 100 } ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_concurrency_with_explicitly_two_connections = ( T, done ) ->\n  { DBay }            = require '../../../apps/dbay'\n  { SQL  }            = DBay\n  dbr                 = new DBay()\n  dbw                 = new DBay { path: dbr.cfg.path, }\n  T?.eq dbr.get_journal_mode(), 'wal'\n  T?.eq dbw.get_journal_mode(), 'wal'\n  #.........................................................................................................\n  dbr SQL\"\"\"create table numbers (\n    n   integer not null primary key,\n    sqr integer );\"\"\"\n  insert_number = dbw.prepare_insert { into: 'numbers', on_conflict: { update: true, }, }\n  #.........................................................................................................\n  dbr ->\n    for n in [ 0 .. 4 ]\n      dbr insert_number, { n, sqr: null, }\n  #.........................................................................................................\n  do ->\n    result = dbr.all_rows SQL\"\"\"select * from numbers order by n;\"\"\"\n    T?.eq result, [ { n: 0, sqr: null }, { n: 1, sqr: null }, { n: 2, sqr: null }, { n: 3, sqr: null }, { n: 4, sqr: null } ]\n  #.........................................................................................................\n  # dbr.with_transaction ->\n  for d from dbr SQL\"select * from numbers order by n;\"\n    d.sqr = d.n ** 2\n    dbw insert_number, d\n    d.n = d.n + 100\n    d.sqr = d.n ** 2\n    dbw insert_number, d\n  #.........................................................................................................\n  do ->\n    result = dbr.all_rows SQL\"\"\"select * from numbers order by n;\"\"\"\n    T?.eq result, [ { n: 0, sqr: 0 }, { n: 1, sqr: 1 }, { n: 2, sqr: 4 }, { n: 3, sqr: 9 }, { n: 4, sqr: 16 }, { n: 100, sqr: 10000 }, { n: 101, sqr: 10201 }, { n: 102, sqr: 10404 }, { n: 103, sqr: 10609 }, { n: 104, sqr: 10816 } ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_concurrency_with_implicitly_two_connections = ( T, done ) ->\n  { DBay }            = require '../../../apps/dbay'\n  { SQL  }            = DBay\n  db                  = new DBay()\n  T?.eq db.get_journal_mode(), 'wal'\n  T?.eq db.get_journal_mode(), 'wal'\n  #.........................................................................................................\n  db SQL\"\"\"create table numbers (\n    n   integer not null primary key,\n    sqr integer );\"\"\"\n  insert_number = db.prepare_insert { into: 'numbers', on_conflict: { update: true, }, }\n  #.........................................................................................................\n  db ->\n    for n in [ 0 .. 4 ]\n      db insert_number, { n, sqr: null, }\n  #.........................................................................................................\n  do ->\n    result = db.all_rows SQL\"\"\"select * from numbers order by n;\"\"\"\n    T?.eq result, [ { n: 0, sqr: null }, { n: 1, sqr: null }, { n: 2, sqr: null }, { n: 3, sqr: null }, { n: 4, sqr: null } ]\n  #.........................................................................................................\n  # db.with_transaction ->\n  for d from db SQL\"select * from numbers order by n;\"\n    d.sqr = d.n ** 2\n    db insert_number, d\n    d.n = d.n + 100\n    d.sqr = d.n ** 2\n    db insert_number, d\n  #.........................................................................................................\n  do ->\n    result = db.all_rows SQL\"\"\"select * from numbers order by n;\"\"\"\n    T?.eq result, [ { n: 0, sqr: 0 }, { n: 1, sqr: 1 }, { n: 2, sqr: 4 }, { n: 3, sqr: 9 }, { n: 4, sqr: 16 }, { n: 100, sqr: 10000 }, { n: 101, sqr: 10201 }, { n: 102, sqr: 10404 }, { n: 103, sqr: 10609 }, { n: 104, sqr: 10816 } ]\n  #.........................................................................................................\n  done?()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_concurrency_with_table_function = ( T, done ) ->\n  # T.halt_on_error()\n  { DBay }          = require H.dbay_path\n  { SQL }           = DBay\n  schema            = 'main'\n  { template_path\n    work_path }     = await H.procure_db { size: 'nnt', ref: 'fn', }\n  debug { template_path, work_path, }\n  db                = new DBay { path: work_path, schema, }\n  numbers           = db.all_first_values SQL\"select n from nnt order by n;\"\n  console.table db.all_rows SQL\"select * from nnt order by n;\"\n  #.........................................................................................................\n  db.create_table_function\n    name:         're_matches'\n    columns:      [ 'match', 'capture', ]\n    parameters:   [ 'text', 'pattern', ]\n    rows: ( text, pattern ) ->\n      regex = new RegExp pattern, 'g'\n      while ( match = regex.exec text )?\n        yield [ match[ 0 ], match[ 1 ], ]\n      return null\n  #.........................................................................................................\n  do =>\n    insert_number   = db.prepare_insert { into: 'nnt', }\n    select_numbers  = SQL\"\"\"select n from nnt order by n;\"\"\"\n    select_rows     = SQL\"\"\"\n      select\n          *\n        from\n          nnt,\n          re_matches( t, '^.*(point).*$' ) as rx\n        order by rx.match;\"\"\"\n    #.......................................................................................................\n    console.table db.all_rows select_rows\n    T?.eq ( db.all_first_values select_numbers ), [ 0, 1, 1.5, 2, 2.3, 3, 3.1, 4, 5, 6, 7, 8, 9, 10, 11, 12 ]\n    #.......................................................................................................\n    for d from db select_rows\n      db insert_number, { d..., n: d.n + 100, }\n    #.......................................................................................................\n    console.table db.all_rows select_rows\n    T?.eq ( db.all_first_values select_numbers ), [ 0, 1, 1.5, 2, 2.3, 3, 3.1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 101.5, 102.3, 103.1 ]\n    return null\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @dbay_virtual_concurrent_writes()\n  # @dbay_concurrency_with_explicitly_two_connections()\n  # test @dbay_concurrency_with_explicitly_two_connections\n  # test @dbay_concurrency_with_implicitly_two_connections\n  # @dbay_concurrency_with_table_function()\n  test @dbay_concurrency_with_table_function\n  # test @\n\n\n\n"
  ]
}