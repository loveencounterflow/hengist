{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-clockpatterns.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require '../../../apps/guy'\n# { HDML }                  = require '../../../apps/hdml'\nH                         = require '../../../lib/helpers'\n{ lets\n  freeze }                = GUY.lft\n{ to_width }              = require 'to-width'\n{ raw }                   = String\n\n\n#-----------------------------------------------------------------------------------------------------------\ntabulate = ( db, query ) -> H.tabulate query, db query\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_clockpatterns = ( cfg ) ->\n  { DBay }        = require '../../../apps/dbay'\n  { SQL }         = DBay\n  path            = '/tmp/clockpatterns.sqlite'\n  db              = new DBay { path, }\n  functions       = {}\n  nbool           = ( bool ) ->\n    return switch bool\n      when true then 1\n      when false then 0\n      else throw new Error \"^345^ expected a boolean, got a #{type_of bool}\"\n  db.create_stdlib()\n  #---------------------------------------------------------------------------------------------------------\n  db ->\n    #.......................................................................................................\n    db.create_function\n      name:     'digits_from_time'\n      call:     ( time ) -> JSON.stringify ( parseInt d, 10 for d in time when d isnt ':' )\n    db.create_function\n      name:     'call'\n      call:     ( name, time, digits ) -> functions[ name ] time, ( JSON.parse digits )...\n    #.......................................................................................................\n    db SQL\"\"\"\n      drop table if exists times;\n      create table times (\n        nr      integer not null primary key,\n        time    text not null unique,\n        digits  json not null generated always as ( digits_from_time( time ) ) virtual,\n        check ( std_re_is_match( time, '^([01][0-9]|2[0-3]):[0-5][0-9]$' ) ) );\"\"\"\n    #.......................................................................................................\n    db SQL\"\"\"\n      drop table if exists patterns;\n        create table patterns (\n        nr      integer not null primary key,\n        name    text not null unique,\n        pattern text unique,\n        kind    text not null,\n        check ( length( pattern ) > 0 ),\n        check ( kind in ( 're', 'fn' ) ) );\"\"\"\n    # insert_time.run { time: '24:30', }\n    # insert_time.run { time: '25:10', }\n  #---------------------------------------------------------------------------------------------------------\n  db ->\n    insert_time = db.prepare_insert { into: 'times', exclude: [ 'nr', ], returning: '*', }\n    for hour in [ 0 .. 23 ]\n      hour_str = hour.toString().padStart 2, '0'\n      for minute in [ 0 .. 59 ]\n        time = hour_str + ':' + minute.toString().padStart 2, '0'\n        insert_time.run { time, }\n  #---------------------------------------------------------------------------------------------------------\n  db ->\n    functions.asc     = ( time, d1, d2, d3, d4 ) -> nbool d1 < d2 < d3 < d4\n    functions.inc4    = ( time, d1, d2, d3, d4 ) -> nbool d1 is d2 - 1 is d3 - 2 is d4 - 3\n    functions.dec4    = ( time, d1, d2, d3, d4 ) -> nbool d1 is d2 + 1 is d3 + 2 is d4 + 3\n    functions.dec3a   = ( time, d1, d2, d3, d4 ) -> nbool d1 is d2 + 1 is d3 + 2\n    functions.dec3b   = ( time, d1, d2, d3, d4 ) -> nbool d2 is d3 + 1 is d4 + 2\n    functions.inc3a   = ( time, d1, d2, d3, d4 ) -> nbool d1 is d2 - 1 is d3 - 2\n    functions.inc3b   = ( time, d1, d2, d3, d4 ) -> nbool d2 is d3 - 1 is d4 - 2\n    # functions.hism = ( time, d1, d2, d3, d4 ) -> nbool ( d1 is d2 - 1 is d3 - 2 ) or ( d2 is d3 - 1 is d4 - 2 )\n    insert_pattern = db.prepare_insert { into: 'patterns', exclude: [ 'nr', ], returning: '*', }\n    insert_pattern.run { kind: 're', name: 'all4', pattern: raw'(?<d>\\d)\\k<d>:\\k<d>\\k<d>', }\n    insert_pattern.run { kind: 're', name: 'hism', pattern: raw'(?<dd>\\d\\d):\\k<dd>', } # hour is minute\n    insert_pattern.run { kind: 're', name: 'pal', pattern: raw'(?<d1>\\d)(?<d2>\\d):\\k<d2>\\k<d1>', } # palindrome\n    # insert_pattern.run { kind: 'fn', pattern: 'asc',    }\n    insert_pattern.run { kind: 'fn', name: 'inc4', pattern: null, }\n    insert_pattern.run { kind: 'fn', name: 'dec4', pattern: null, }\n    insert_pattern.run { kind: 'fn', name: 'dec3a', pattern: null, }\n    insert_pattern.run { kind: 'fn', name: 'dec3b', pattern: null, }\n    insert_pattern.run { kind: 'fn', name: 'inc3a', pattern: null, }\n    insert_pattern.run { kind: 'fn', name: 'inc3b', pattern: null, }\n  #.........................................................................................................\n  tabulate db, SQL\"select * from times limit 25 offset 123;\"\n  tabulate db, SQL\"select * from patterns order by kind, name;\"\n  tabulate db, SQL\"\"\"\n    -- with v1 as ( select * from times where time between '11:00' and '11:59' )\n    with\n      v1 as ( select * from times where time between '00:00' and '23:59' ),\n      v2 as ( select count(*) as count from v1 )\n    select\n        row_number() over ( order by v1.time, p.nr )        as match_nr,\n        v1.nr                                               as time_nr,\n        p.nr                                                as pattern_nr,\n        p.kind                                              as kind,\n        p.name                                              as name,\n        v2.count                                            as count,\n        v1.digits                                           as digits,\n        v1.time                                             as time\n      from v1, v2, patterns as p\n      where case p.kind\n        when 're' then std_re_is_match( v1.time, pattern )\n        when 'fn' then call( p.name, time, digits )\n        else std_raise( 'unknown kind ' || quote( p.kind ) ) end\n      order by name, time\n        ;\"\"\"\n  return null\n\n############################################################################################################\nif require.main is module then do =>\n  @demo_clockpatterns()\n\n\n\n\n"
  ]
}