{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-simplified-sql-generation.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nGUY                       = require '../../../apps/guy'\n# { HDML }                  = require '../../../apps/hdml'\nH                         = require '../../../lib/helpers'\n{ lets\n  freeze }                = GUY.lft\n{ to_width }              = require 'to-width'\n{ DBay }                  = require '../../../apps/dbay'\n{ Sql }                   = require '../../../apps/dbay/lib/sql'\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nadd_views = ( db ) ->\n  db.create_stdlib()\n  schema = 'main'\n        # -- tl.ncol           as tl_ncol,\n        # -- tl.wr             as tl_wr, -- without rowid\n        # -- tl.strict         as tl_strict,\n  db SQL\"\"\"\n    -- ### NOTE this is a best-effort approach to recover the correct ordering for DDL statements\n    -- from the data provided by SQLite. It is not quite clear whether the ordering in\n    -- `sqlite_schema` can be relied upon and whether it is safe to assume that adding `row_number()`\n    -- to the query will not accidentally change the ordering in absence of an `order by` clause.\n    -- To attain a modicum of reliability the filtering has been separated from the raw numbering\n    -- to keep that aspect from juggling around rows.\n    -- ### TAINT replace existing `select from pragma_table_list` by `select from dbay_tables`\n    -- ### TAINT consider to always list `table_nr` along with `table_name` or to omit it where not needed (?)\n    drop view if exists #{schema}.dbay_tables;\n    create view #{schema}.dbay_tables as with v1 as ( select\n        row_number() over ()                                        as table_nr,\n        type                                                        as type,\n        name                                                        as table_name\n      from #{schema}.sqlite_schema )\n    select\n        row_number() over ()                                        as table_nr,\n        type                                                        as type,\n        #{db.sql.L schema}                                          as schema,\n        table_name                                                  as table_name\n      from v1\n      where true\n        and ( type in ( 'table', 'view' ) )\n        and ( table_name not like 'sqlite_%' )\n        and ( table_name not like 'dbay_%' )\n      order by table_nr;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_unique_fields;\n    create view #{schema}.dbay_unique_fields as select\n        tb.schema                                                   as schema,\n        tb.table_name                                               as table_name,\n        ii.name                                                     as field_name,\n        il.seq                                                      as index_idx,\n        il.name                                                     as index_name\n      from #{schema}.dbay_tables as tb\n      join #{schema}.pragma_index_list( tb.table_name ) as il on ( true )\n      join #{schema}.pragma_index_info( il.name ) as ii on ( true )\n      where true\n        and ( il.origin = 'u' )\n        and ( il.\"unique\" )\n      ;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_fields_1;\n    create view #{schema}.dbay_fields_1 as select\n        tb.schema                                                   as schema,\n        tb.table_nr                                                 as table_nr,\n        ti.cid                                                      as field_nr,\n        tb.table_name                                               as table_name,\n        tb.type                                                     as table_type,\n        ti.name                                                     as field_name,\n        case ti.type when '' then 'any' else lower( ti.type ) end   as field_type,\n        not ti.\"notnull\"                                            as nullable,\n        ti.dflt_value                                               as fallback,\n        case ti.pk when 0 then null else ti.pk end                  as pk_nr,\n        ti.hidden                                                   as hidden\n      from #{schema}.dbay_tables as tb\n      join #{schema}.pragma_table_xinfo( tb.table_name ) as ti on ( true )\n      order by schema, table_nr, field_nr;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_fields;\n    create view #{schema}.dbay_fields as select\n        fd.*,\n        case when uf.field_name is null then 0 else 1 end           as is_unique\n      from #{schema}.dbay_fields_1 as fd\n      left join #{schema}.dbay_unique_fields as uf using ( schema, table_name, field_name )\n      order by schema, table_nr, field_nr;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_foreign_key_clauses_1;\n    create view #{schema}.dbay_foreign_key_clauses_1 as select\n        fk.id                                                       as fk_id,\n        fk.seq                                                      as fk_idx,\n        tb.schema                                                   as schema,\n        tb.table_nr                                                 as from_table_nr,\n        tb.table_name                                               as from_table_name,\n        fk.\"from\"                                                   as from_field_name,\n        fk.\"table\"                                                  as to_table_name,\n        fk.\"to\"                                                     as to_field_name\n      from #{schema}.dbay_tables as tb\n      join #{schema}.pragma_foreign_key_list( tb.table_name ) as fk\n      order by schema, from_table_name, fk_id, fk_idx;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_foreign_key_clauses_2;\n    create view #{schema}.dbay_foreign_key_clauses_2 as select distinct\n        fk_id                                                       as fk_id,\n        schema                                                      as schema,\n        from_table_nr                                               as from_table_nr,\n        from_table_name                                             as from_table_name,\n        group_concat( std_sql_i( from_field_name ), ', ' ) over w   as from_field_names,\n        to_table_name                                               as to_table_name,\n        group_concat( std_sql_i(   to_field_name ), ', ' ) over w   as to_field_names\n      from #{schema}.dbay_foreign_key_clauses_1\n      window w as (\n        partition by schema, from_table_name, fk_id\n        order by fk_idx\n        rows between unbounded preceding and unbounded following )\n      order by schema, from_table_name, fk_id, fk_idx;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_foreign_key_clauses;\n    create view #{schema}.dbay_foreign_key_clauses as select distinct\n        schema                                                      as schema,\n        from_table_nr                                               as table_nr,\n        from_table_name                                             as table_name,\n        group_concat(\n          '  foreign key ( ' || from_field_names || ' ) references '\n            || std_sql_i( to_table_name )\n            || ' ( ' || to_field_names || ' )',\n            ',' || char( 10 ) ) over w                              as fk_clauses\n      from #{schema}.dbay_foreign_key_clauses_2\n      window w as (\n        partition by schema, from_table_name\n        order by fk_id desc\n        rows between unbounded preceding and unbounded following )\n      order by schema, from_table_name, fk_id;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_primary_key_clauses_1;\n    create view #{schema}.dbay_primary_key_clauses_1 as select distinct\n        schema                                                      as schema,\n        table_nr                                                    as table_nr,\n        table_name                                                  as table_name,\n        group_concat( std_sql_i( field_name ), ', ' ) over w        as field_names\n      from #{schema}.dbay_fields\n      where pk_nr is not null\n      window w as (\n        partition by schema, table_name\n        order by pk_nr\n        rows between unbounded preceding and unbounded following )\n      order by schema, table_name;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_primary_key_clauses;\n    create view #{schema}.dbay_primary_key_clauses as select distinct\n        schema                                                      as schema,\n        table_nr                                                    as table_nr,\n        table_name                                                  as table_name,\n        '  primary key ( ' || field_names || ' )'                   as pk_clause\n      from #{schema}.dbay_primary_key_clauses_1\n      order by schema, table_name;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_field_clauses_1;\n    create view #{schema}.dbay_field_clauses_1 as select\n        schema                                                          as schema,\n        table_nr                                                        as table_nr,\n        field_nr                                                        as field_nr,\n        table_name                                                      as table_name,\n        field_name                                                      as field_name,\n        '    ' || std_sql_i( field_name ) || ' ' || field_type                   as fc_name_type,\n        case when not nullable         then ' not null'             else '' end  as fc_null,\n        case when is_unique            then ' unique'               else '' end  as fc_unique,\n        case when fallback is not null then ' default ' || fallback else '' end  as fc_default\n      from #{schema}.dbay_fields\n      order by schema, table_nr, field_nr;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_field_clauses;\n    create view #{schema}.dbay_field_clauses as select\n        schema                                                          as schema,\n        table_nr                                                        as table_nr,\n        field_nr                                                        as field_nr,\n        table_name                                                      as table_name,\n        field_name                                                      as field_name,\n        fc_name_type || fc_null || fc_unique || fc_default              as field_clause\n      from #{schema}.dbay_field_clauses_1\n      order by schema, table_nr, field_nr;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_create_table_clauses;\n    create view #{schema}.dbay_create_table_clauses as select\n        schema                                                            as schema,\n        table_nr                                                          as table_nr,\n        table_name                                                        as table_name,\n        'create table ' || std_sql_i( table_name ) || ' (' || char( 10 )  as create_start,\n        ' );'                                                             as create_end\n      from #{schema}.dbay_tables;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_create_table_statements;\n    create view #{schema}.dbay_create_table_statements as select distinct\n        ct.schema                                                       as schema,\n        tb.table_nr                                                     as table_nr,\n        ct.table_name                                                   as table_name,\n        ct.create_start\n          || group_concat( fc.field_clause, ', ' || char( 10 ) ) over w\n          || case when pk.table_name is null then '' else ',' || char( 10 ) || pk.pk_clause end\n          || case when fk.table_name is null then '' else ',' || char( 10 ) || fk.fk_clauses end\n          || ct.create_end                                              as create_table_statement\n      from #{schema}.dbay_create_table_clauses as ct\n      join #{schema}.dbay_field_clauses as fc using ( schema, table_name )\n      left join #{schema}.dbay_primary_key_clauses as pk using ( schema, table_name )\n      left join #{schema}.dbay_foreign_key_clauses as fk using ( schema, table_name )\n      join #{schema}.dbay_tables as tb using ( schema, table_name )\n      window w as (\n        partition by ct.schema, ct.table_name\n        order by fc.field_nr\n        rows between unbounded preceding and unbounded following );\"\"\"\n  # db SQL\"\"\"\n  #   drop view if exists #{schema}.dbay_db_dump;\n  #   create view #{schema}.dbay_db_dump as select\n  #     'pragma foreign_keys=off;'\n  #     'begin transaction;'\n  #   ;\"\"\"\n  return db\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_two_kinds_of_foreign_keys = ( cfg ) ->\n  trycatch = ( ref, db, sql ) => try db sql catch error then warn ref, ( sql ), CND.reverse error.message\n  do =>\n    urge '################################'\n    db              = add_views new DBay { path: '/tmp/fk-demo-1.sqlite', }\n    db SQL\"\"\"\n      pragma foreign_keys = false;\n      drop table if exists a;\n      drop table if exists b;\n      pragma foreign_keys = true;\n      create table a (\n          xnr   integer  not null unique,\n          name  text     not null unique,\n        primary key ( xnr, name ) );\n      create table b (\n          xnr    integer  not null,\n          name  text     not null,\n        foreign key ( xnr, name ) references a ( xnr, name ) );\n      \"\"\"\n    trycatch '^578-1^', db, SQL\"insert into a ( xnr, name ) values ( 1, 'one' );\"\n    trycatch '^578-2^', db, SQL\"insert into a ( xnr, name ) values ( 2, 'two' );\"\n    trycatch '^578-3^', db, SQL\"insert into b ( xnr, name ) values ( 1, 'one' );\"\n    trycatch '^578-4^', db, SQL\"insert into b ( xnr, name ) values ( 2, 'two' );\"\n    trycatch '^578-5^', db, SQL\"insert into b ( xnr, name ) values ( 1, 'two' );\"\n    H.tabulate \"select * from a;\", db SQL\"select * from a;\"\n    H.tabulate \"select * from b;\", db SQL\"select * from b;\"\n    # H.tabulate \"pragma_foreign_key_list( 'b' )\", db SQL\"select * from pragma_foreign_key_list( 'b' );\"\n    H.tabulate \"dbay_fields\", db SQL\"select * from dbay_fields;\"\n    # H.tabulate \"dbay_foreign_key_clauses_1\", db SQL\"select * from dbay_foreign_key_clauses_1;\"\n    # H.tabulate \"dbay_foreign_key_clauses_2\", db SQL\"select * from dbay_foreign_key_clauses_2;\"\n    H.tabulate \"dbay_foreign_key_clauses\", db SQL\"select * from dbay_foreign_key_clauses;\"\n    H.tabulate \"dbay_primary_key_clauses\", db SQL\"select * from dbay_primary_key_clauses;\"\n    # H.tabulate \"dbay_field_clauses_1\", db SQL\"select * from dbay_field_clauses_1;\"\n    H.tabulate \"dbay_unique_fields\", db SQL\"select * from dbay_unique_fields;\"\n    H.tabulate \"dbay_field_clauses\", db SQL\"select * from dbay_field_clauses;\"\n  do =>\n    urge '################################'\n    db              = add_views new DBay { path: '/tmp/fk-demo-2.sqlite', }\n    db SQL\"\"\"\n      pragma foreign_keys = false;\n      drop table if exists a;\n      drop table if exists b;\n      pragma foreign_keys = true;\n      create table a (\n          xnr   integer  not null unique,\n          name  text     not null unique,\n        primary key ( xnr, name ) );\n      create table b (\n          xnr   integer  not null,\n          name  text     not null,\n        foreign key ( xnr    ) references a ( xnr   ),\n        foreign key ( name  ) references a ( name ) );\n      \"\"\"\n    # db \"pragma foreign_keys = false;\"\n    # H.tabulate \"select * from pragma_foreign_key_check();\", db SQL\"select * from pragma_foreign_key_check();\"\n    trycatch '^578-7^', db, SQL\"insert into a ( xnr, name ) values ( 1, 'one' );\"\n    trycatch '^578-8^', db, SQL\"insert into a ( xnr, name ) values ( 2, 'two' );\"\n    trycatch '^578-9^', db, SQL\"insert into b ( xnr, name ) values ( 1, 'one' );\"\n    trycatch '^578-10^', db, SQL\"insert into b ( xnr, name ) values ( 2, 'two' );\"\n    trycatch '^578-11^', db, SQL\"insert into b ( xnr, name ) values ( 1, 'two' );\"\n    H.tabulate \"select * from a;\", db SQL\"select * from a;\"\n    H.tabulate \"select * from b;\", db SQL\"select * from b;\"\n    # H.tabulate \"pragma_foreign_key_list( 'b' )\", db SQL\"select * from pragma_foreign_key_list( 'b' );\"\n    H.tabulate \"dbay_fields\", db SQL\"select * from dbay_fields;\"\n    # H.tabulate \"dbay_foreign_key_clauses_1\", db SQL\"select * from dbay_foreign_key_clauses_1;\"\n    # H.tabulate \"dbay_foreign_key_clauses_2\", db SQL\"select * from dbay_foreign_key_clauses_2;\"\n    H.tabulate \"dbay_foreign_key_clauses\", db SQL\"select * from dbay_foreign_key_clauses;\"\n    H.tabulate \"dbay_primary_key_clauses\", db SQL\"select * from dbay_primary_key_clauses;\"\n    # H.tabulate \"dbay_field_clauses_1\", db SQL\"select * from dbay_field_clauses_1;\"\n    H.tabulate \"dbay_unique_fields\", db SQL\"select * from dbay_unique_fields;\"\n    H.tabulate \"dbay_field_clauses\", db SQL\"select * from dbay_field_clauses;\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_simplified_sql_generation = ( cfg ) ->\n  { Mrg }         = require '../../../apps/dbay-mirage'\n  db              = add_views new DBay { path: '/tmp/foobar.sqlite', }\n  # mrg             = new Mrg { db, }\n  urge '################################'\n  #.........................................................................................................\n  db SQL\"\"\"\n    pragma foreign_keys = false;\n    drop table if exists a;\n    drop table if exists b;\n    drop table if exists c;\n    drop table if exists b2;\n    drop view if exists ab;\n    pragma foreign_keys = true;\n    create table a (\n        xnr integer,\n        foo float,\n        bar float default 42,\n        baz float unique,\n        this,\n        that any,\n        stealth integer hidden,\n        x421 integer generated always as ( 42 ) virtual,\n        x422 integer generated always as ( 42 ) stored,\n        x423 integer generated always as ( 42 ) stored,\n      primary key ( xnr ) );\n    create unique index athisthat on a ( this, that );\n    create table b (\n        idx integer not null,\n        name text unique,\n      primary key ( idx, name ),\n      -- foreign key ( idx ) references a ( xnr ),\n      foreign key ( idx, name ) references a ( xnr, baz ) );\n    create table b2 (\n        idx integer not null,\n        name text unique,\n      primary key ( idx, name ),\n      foreign key ( idx ) references a ( xnr ),\n      foreign key ( name ) references a ( baz ) );\n    create table c (\n        x integer primary key references a ( xnr ),\n        y text default 'whatever' references b ( name ),\n        z float references a ( baz ) );\n    create view ab as select\n        3 * 4 as twelve,\n        x421,\n        xnr\n      from a\n      order by x421;\n    \"\"\"\n  #.........................................................................................................\n  # H.tabulate 'sqlite_schema', db SQL\"select type, name, tbl_name from sqlite_schema;\"\n  # H.tabulate \"pragma_table_info( 'a' )\", db SQL\"select * from pragma_table_info( 'a' );\"\n  # # H.tabulate \"pragma_index_list( 'a' )\", db SQL\"select * from pragma_index_list( 'a' );\"\n  # H.tabulate \"pragma_foreign_key_list( 'b' )\", db SQL\"select * from pragma_foreign_key_list( 'b' );\"\n  # H.tabulate \"pragma_foreign_key_list( 'c' )\", db SQL\"select * from pragma_foreign_key_list( 'c' );\"\n  # H.tabulate \"pragma_table_info( 'b' )\", db SQL\"select * from pragma_table_info( 'b' );\"\n  # H.tabulate \"pragma_table_info( 'c' )\", db SQL\"select * from pragma_table_info( 'c' );\"\n  # H.tabulate \"pragma_index_list( 'a' )\", db SQL\"select * from pragma_index_list( 'a' );\"\n  # H.tabulate \"pragma_index_list( 'c' )\", db SQL\"select * from pragma_index_list( 'c' );\"\n  # H.tabulate \"pragma_index_info( 'athisthat' )\", db SQL\"select * from pragma_index_info( 'athisthat' );\"\n  # H.tabulate \"dbay_foreign_key_clauses_1\", db SQL\"select * from dbay_foreign_key_clauses_1;\"\n  # H.tabulate \"dbay_foreign_key_clauses_2\", db SQL\"select * from dbay_foreign_key_clauses_2;\"\n  # H.tabulate \"pragma_index_list( 'b2' )\", db SQL\"select * from pragma_index_list( 'b2' );\"\n  # H.tabulate \"pragma_index_info( 'sqlite_autoindex_b2_2' )\", db SQL\"select * from pragma_index_info( 'sqlite_autoindex_b2_2' );\"\n  # H.tabulate \"pragma_index_xinfo( 'sqlite_autoindex_b2_2' )\", db SQL\"select * from pragma_index_xinfo( 'sqlite_autoindex_b2_2' );\"\n  # H.tabulate \"dbay_unique_fields\", db SQL\"select * from dbay_unique_fields;\"\n  # H.tabulate \"dbay_fields\", db SQL\"select * from dbay_fields;\"\n  # H.tabulate \"pragma_table_list()\", db SQL\"select * from pragma_table_list();\"\n  # H.tabulate \"pragma_table_xinfo( 'a' )\", db SQL\"select * from pragma_table_xinfo( 'a' );\"\n  H.tabulate \"select * from dbay_tables;\", db SQL\"select * from dbay_tables;\"\n  H.tabulate \"dbay_field_clauses\", db SQL\"select * from dbay_field_clauses;\"\n  H.tabulate \"dbay_foreign_key_clauses\", db SQL\"select * from dbay_foreign_key_clauses;\"\n  H.tabulate \"dbay_primary_key_clauses\", db SQL\"select * from dbay_primary_key_clauses;\"\n  H.tabulate \"dbay_create_table_clauses\", db SQL\"select * from dbay_create_table_clauses;\"\n  H.tabulate \"dbay_create_table_statements\", db SQL\"select schema, table_nr, table_name, substring( create_table_statement, 1, 100 ) from dbay_create_table_statements;\"\n  for row from db SQL\"select * from dbay_create_table_statements order by schema, table_nr;\"\n    urge row.schema, row.table_nr, '\\n' + row.create_table_statement\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  @demo_two_kinds_of_foreign_keys()\n  @demo_simplified_sql_generation()\n\n\n\n\n\n\n"
  ]
}