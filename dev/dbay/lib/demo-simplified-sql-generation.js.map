{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-simplified-sql-generation.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nGUY                       = require '../../../apps/guy'\n# { HDML }                  = require '../../../apps/hdml'\nH                         = require '../../../lib/helpers'\n{ lets\n  freeze }                = GUY.lft\n{ to_width }              = require 'to-width'\n{ DBay }                  = require '../../../apps/dbay'\n{ Sql }                   = require '../../../apps/dbay/lib/sql'\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nadd_views = ( db ) ->\n  db.create_stdlib()\n  schema = 'main'\n        # -- tl.ncol           as tl_ncol,\n        # -- tl.wr             as tl_wr, -- without rowid\n        # -- tl.strict         as tl_strict,\n  db SQL\"\"\"\n    -- ### NOTE this is a best-effort approach to recover the correct ordering for DDL statements\n    -- from the data provided by SQLite. It is not quite clear whether the ordering in\n    -- `sqlite_schema` can be relied upon and whether it is safe to assume that adding `row_number()`\n    -- to the query will not accidentally change the ordering in absence of an `order by` clause.\n    -- To attain a modicum of reliability the filtering has been separated from the raw numbering\n    -- to keep that aspect from juggling around rows.\n    drop view if exists #{schema}.dbay_relation_nrs;\n    create view #{schema}.dbay_relation_nrs as with v1 as ( select\n        row_number() over ()  as nr,\n        type                  as type,\n        name                  as name\n      from #{schema}.sqlite_schema )\n    select\n        row_number() over ()  as nr,\n        type                  as type,\n        #{db.sql.L schema}    as schema,\n        name                  as name\n      from v1\n      where true\n        and ( type in ( 'table', 'view' ) )\n        and ( name not like 'sqlite_%' )\n        and ( name not like 'dbay_%' )\n      order by nr;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_unique_fields;\n    create view #{schema}.dbay_unique_fields as select\n        tl.schema                                                   as schema,\n        tl.name                                                     as table_name,\n        ii.name                                                     as field_name,\n        il.seq                                                      as index_idx,\n        il.name                                                     as index_name\n      from #{schema}.pragma_table_list() as tl\n      join #{schema}.pragma_index_list( tl.name ) as il on ( true )\n      join #{schema}.pragma_index_info( il.name ) as ii on ( true )\n      where true\n        and ( il.origin = 'u' )\n        and ( il.\"unique\" )\n      ;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_fields_1;\n    create view #{schema}.dbay_fields_1 as select\n        tl.schema                                                   as schema,\n        tl.name                                                     as table_name,\n        tl.type                                                     as table_type,\n        ti.cid                                                      as field_nr,\n        ti.name                                                     as field_name,\n        case ti.type when '' then 'any' else lower( ti.type ) end   as field_type,\n        not ti.\"notnull\"                                            as nullable,\n        ti.dflt_value                                               as fallback,\n        case ti.pk when 0 then null else ti.pk end                  as pk_nr,\n        ti.hidden                                                   as hidden\n      from #{schema}.pragma_table_list() as tl\n      join #{schema}.pragma_table_xinfo( tl.name ) as ti on ( true )\n      where true\n        and ( tl.name not like 'sqlite_%' )\n        and ( tl.name not like 'dbay_%' )\n      order by schema, table_name, field_nr;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_fields;\n    create view #{schema}.dbay_fields as select\n        fd.*,\n        case when uf.field_name is null then 0 else 1 end           as is_unique\n      from #{schema}.dbay_fields_1 as fd\n      left join #{schema}.dbay_unique_fields as uf using ( schema, table_name, field_name )\n      order by schema, table_name, field_nr;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_field_clauses_1;\n    create view #{schema}.dbay_field_clauses_1 as select\n        schema                                                      as schema,\n        table_name                                                  as table_name,\n        table_type                                                  as table_type,\n        field_nr                                                    as field_nr,\n        field_name                                                  as field_name,\n        field_type                                                  as field_type,\n        nullable                                                    as nullable,\n        fallback                                                    as fallback,\n        pk_nr                                                       as pk_nr,\n        hidden                                                      as hidden,\n        std_sql_i( field_name ) || ' ' || field_type                as field_clause_1,\n        case when nullable then 'null' else 'not null' end          as field_clause_2\n      from #{schema}.dbay_fields\n      order by schema, table_name, field_nr;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_foreign_key_clauses_1;\n    create view #{schema}.dbay_foreign_key_clauses_1 as select\n        fk.id                                                       as fk_id,\n        fk.seq                                                      as fk_idx,\n        tl.schema                                                   as schema,\n        tl.name                                                     as from_table_name,\n        fk.\"from\"                                                   as from_field_name,\n        fk.\"table\"                                                  as to_table_name,\n        fk.\"to\"                                                     as to_field_name\n      from #{schema}.pragma_table_list() as tl\n      join #{schema}.pragma_foreign_key_list( tl.name ) as fk\n      where true\n        and ( tl.name not like 'sqlite_%' )\n        and ( tl.name not like 'dbay_%' )\n      order by schema, from_table_name, fk_id, fk_idx;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_foreign_key_clauses_2;\n    create view #{schema}.dbay_foreign_key_clauses_2 as select distinct\n        fk_id                                                       as fk_id,\n        schema                                                      as schema,\n        from_table_name                                             as from_table_name,\n        group_concat( std_sql_i( from_field_name ), ', ' ) over w   as from_field_names,\n        to_table_name                                               as to_table_name,\n        group_concat( std_sql_i(   to_field_name ), ', ' ) over w   as to_field_names\n      from #{schema}.dbay_foreign_key_clauses_1\n      window w as (\n        partition by schema, from_table_name, fk_id\n        order by fk_idx\n        rows between unbounded preceding and unbounded following )\n      order by schema, from_table_name, fk_id, fk_idx;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_foreign_key_clauses;\n    create view #{schema}.dbay_foreign_key_clauses as select distinct\n        schema                                                      as schema,\n        from_table_name                                             as table_name,\n        group_concat(\n          'foreign key ( ' || from_field_names || ' ) references '\n            || std_sql_i( to_table_name )\n            || ' ( ' || to_field_names || ' )',\n            ',' || char( 10 ) ) over w                              as fk_clauses\n      from #{schema}.dbay_foreign_key_clauses_2\n      window w as (\n        partition by schema, from_table_name\n        order by fk_id desc\n        rows between unbounded preceding and unbounded following )\n      order by schema, from_table_name, fk_id;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_primary_key_clauses_1;\n    create view #{schema}.dbay_primary_key_clauses_1 as select distinct\n        schema                                                      as schema,\n        table_name                                                  as table_name,\n        group_concat( std_sql_i( field_name ), ', ' ) over w        as field_names\n      from #{schema}.dbay_fields\n      where pk_nr is not null\n      window w as (\n        partition by schema, table_name\n        order by pk_nr\n        rows between unbounded preceding and unbounded following )\n      order by schema, table_name;\"\"\"\n  db SQL\"\"\"\n    drop view if exists #{schema}.dbay_primary_key_clauses;\n    create view #{schema}.dbay_primary_key_clauses as select distinct\n        schema                                                      as schema,\n        table_name                                                  as table_name,\n        group_concat(\n          'primary key ( ' || field_names || ' )' ) over w          as pk_clause\n      from #{schema}.dbay_primary_key_clauses_1\n      window w as (\n        partition by schema, table_name\n        rows between unbounded preceding and unbounded following )\n      order by schema, table_name\n    ;\"\"\"\n  return db\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_two_kinds_of_foreign_keys = ( cfg ) ->\n  trycatch = ( ref, db, sql ) => try db sql catch error then warn ref, ( sql ), CND.reverse error.message\n  do =>\n    urge '################################'\n    db              = add_views new DBay { path: '/tmp/fk-demo-1.sqlite', }\n    db SQL\"\"\"\n      pragma foreign_keys = false;\n      drop table if exists a;\n      drop table if exists b;\n      pragma foreign_keys = true;\n      create table a (\n          nr    integer  not null unique,\n          name  text     not null unique,\n        primary key ( nr, name ) );\n      create table b (\n          nr    integer  not null,\n          name  text     not null,\n        foreign key ( nr, name ) references a ( nr, name ) );\n      \"\"\"\n    trycatch '^578-1^', db, SQL\"insert into a ( nr, name ) values ( 1, 'one' );\"\n    trycatch '^578-2^', db, SQL\"insert into a ( nr, name ) values ( 2, 'two' );\"\n    trycatch '^578-3^', db, SQL\"insert into b ( nr, name ) values ( 1, 'one' );\"\n    trycatch '^578-4^', db, SQL\"insert into b ( nr, name ) values ( 2, 'two' );\"\n    trycatch '^578-5^', db, SQL\"insert into b ( nr, name ) values ( 1, 'two' );\"\n    H.tabulate \"select * from a;\", db SQL\"select * from a;\"\n    H.tabulate \"select * from b;\", db SQL\"select * from b;\"\n    # H.tabulate \"pragma_foreign_key_list( 'b' )\", db SQL\"select * from pragma_foreign_key_list( 'b' );\"\n    H.tabulate \"dbay_fields\", db SQL\"select * from dbay_fields;\"\n    # H.tabulate \"dbay_foreign_key_clauses_1\", db SQL\"select * from dbay_foreign_key_clauses_1;\"\n    # H.tabulate \"dbay_foreign_key_clauses_2\", db SQL\"select * from dbay_foreign_key_clauses_2;\"\n    H.tabulate \"dbay_foreign_key_clauses\", db SQL\"select * from dbay_foreign_key_clauses;\"\n    H.tabulate \"dbay_primary_key_clauses\", db SQL\"select * from dbay_primary_key_clauses;\"\n    # H.tabulate \"dbay_field_clauses_1\", db SQL\"select * from dbay_field_clauses_1;\"\n    H.tabulate \"dbay_unique_fields\", db SQL\"select * from dbay_unique_fields;\"\n  do =>\n    urge '################################'\n    db              = add_views new DBay { path: '/tmp/fk-demo-2.sqlite', }\n    db SQL\"\"\"\n      pragma foreign_keys = false;\n      drop table if exists a;\n      drop table if exists b;\n      pragma foreign_keys = true;\n      create table a (\n          nr    integer  not null unique,\n          name  text     not null unique,\n        primary key ( nr, name ) );\n      create table b (\n          nr    integer  not null,\n          name  text     not null,\n        foreign key ( nr    ) references a ( nr   ),\n        foreign key ( name  ) references a ( name ) );\n      \"\"\"\n    # db \"pragma foreign_keys = false;\"\n    # H.tabulate \"select * from pragma_foreign_key_check();\", db SQL\"select * from pragma_foreign_key_check();\"\n    trycatch '^578-7^', db, SQL\"insert into a ( nr, name ) values ( 1, 'one' );\"\n    trycatch '^578-8^', db, SQL\"insert into a ( nr, name ) values ( 2, 'two' );\"\n    trycatch '^578-9^', db, SQL\"insert into b ( nr, name ) values ( 1, 'one' );\"\n    trycatch '^578-10^', db, SQL\"insert into b ( nr, name ) values ( 2, 'two' );\"\n    trycatch '^578-11^', db, SQL\"insert into b ( nr, name ) values ( 1, 'two' );\"\n    H.tabulate \"select * from a;\", db SQL\"select * from a;\"\n    H.tabulate \"select * from b;\", db SQL\"select * from b;\"\n    # H.tabulate \"pragma_foreign_key_list( 'b' )\", db SQL\"select * from pragma_foreign_key_list( 'b' );\"\n    H.tabulate \"dbay_fields\", db SQL\"select * from dbay_fields;\"\n    # H.tabulate \"dbay_foreign_key_clauses_1\", db SQL\"select * from dbay_foreign_key_clauses_1;\"\n    # H.tabulate \"dbay_foreign_key_clauses_2\", db SQL\"select * from dbay_foreign_key_clauses_2;\"\n    H.tabulate \"dbay_foreign_key_clauses\", db SQL\"select * from dbay_foreign_key_clauses;\"\n    H.tabulate \"dbay_primary_key_clauses\", db SQL\"select * from dbay_primary_key_clauses;\"\n    # H.tabulate \"dbay_field_clauses_1\", db SQL\"select * from dbay_field_clauses_1;\"\n    H.tabulate \"dbay_unique_fields\", db SQL\"select * from dbay_unique_fields;\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_simplified_sql_generation = ( cfg ) ->\n  { Mrg }         = require '../../../apps/dbay-mirage'\n  db              = add_views new DBay()\n  # mrg             = new Mrg { db, }\n  urge '################################'\n  #.........................................................................................................\n  db SQL\"\"\"\n    create table a (\n        nr integer,\n        foo float,\n        bar float,\n        baz float unique,\n        this,\n        that any,\n        stealth integer hidden,\n        x421 integer generated always as ( 42 ) virtual,\n        x422 integer generated always as ( 42 ) stored,\n        x423 integer generated always as ( 42 ) stored,\n      primary key ( nr ) );\n    create unique index athisthat on a ( this, that );\n    create table b (\n        idx integer not null,\n        name text unique,\n      primary key ( idx, name ),\n      -- foreign key ( idx ) references a ( nr ),\n      foreign key ( idx, name ) references a ( nr, baz ) );\n    create table b2 (\n        idx integer not null,\n        name text unique,\n      primary key ( idx, name ),\n      foreign key ( idx ) references a ( nr ),\n      foreign key ( name ) references a ( baz ) );\n    create table c (\n        x integer primary key references a ( nr ),\n        y text default 'whatever' references b ( name ),\n        z float references a ( baz ) );\n    \"\"\"\n  #.........................................................................................................\n  # H.tabulate 'sqlite_schema', db SQL\"select type, name, tbl_name from sqlite_schema;\"\n  # H.tabulate \"pragma_table_info( 'a' )\", db SQL\"select * from pragma_table_info( 'a' );\"\n  # # H.tabulate \"pragma_index_list( 'a' )\", db SQL\"select * from pragma_index_list( 'a' );\"\n  # H.tabulate \"pragma_foreign_key_list( 'b' )\", db SQL\"select * from pragma_foreign_key_list( 'b' );\"\n  # H.tabulate \"pragma_foreign_key_list( 'c' )\", db SQL\"select * from pragma_foreign_key_list( 'c' );\"\n  # H.tabulate \"pragma_table_info( 'b' )\", db SQL\"select * from pragma_table_info( 'b' );\"\n  # H.tabulate \"pragma_table_info( 'c' )\", db SQL\"select * from pragma_table_info( 'c' );\"\n  # H.tabulate \"pragma_index_list( 'a' )\", db SQL\"select * from pragma_index_list( 'a' );\"\n  # H.tabulate \"pragma_index_list( 'c' )\", db SQL\"select * from pragma_index_list( 'c' );\"\n  # H.tabulate \"pragma_index_info( 'athisthat' )\", db SQL\"select * from pragma_index_info( 'athisthat' );\"\n  # H.tabulate \"dbay_foreign_key_clauses_1\", db SQL\"select * from dbay_foreign_key_clauses_1;\"\n  # H.tabulate \"dbay_foreign_key_clauses_2\", db SQL\"select * from dbay_foreign_key_clauses_2;\"\n  H.tabulate \"dbay_foreign_key_clauses\", db SQL\"select * from dbay_foreign_key_clauses;\"\n  H.tabulate \"dbay_primary_key_clauses\", db SQL\"select * from dbay_primary_key_clauses;\"\n  H.tabulate \"dbay_field_clauses_1\", db SQL\"select * from dbay_field_clauses_1;\"\n  # H.tabulate \"pragma_index_list( 'b2' )\", db SQL\"select * from pragma_index_list( 'b2' );\"\n  # H.tabulate \"pragma_index_info( 'sqlite_autoindex_b2_2' )\", db SQL\"select * from pragma_index_info( 'sqlite_autoindex_b2_2' );\"\n  # H.tabulate \"pragma_index_xinfo( 'sqlite_autoindex_b2_2' )\", db SQL\"select * from pragma_index_xinfo( 'sqlite_autoindex_b2_2' );\"\n  H.tabulate \"dbay_unique_fields\", db SQL\"select * from dbay_unique_fields;\"\n  H.tabulate \"dbay_fields\", db SQL\"select * from dbay_fields;\"\n  H.tabulate \"dbay_fields where is_unique\", db SQL\"select * from dbay_fields where is_unique;\"\n  H.tabulate \"pragma_table_list()\", db SQL\"select * from pragma_table_list();\"\n  # H.tabulate \"pragma_table_xinfo( 'a' )\", db SQL\"select * from pragma_table_xinfo( 'a' );\"\n  H.tabulate \"select * from dbay_relation_nrs;\", db SQL\"select * from dbay_relation_nrs;\"\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  @demo_two_kinds_of_foreign_keys()\n  @demo_simplified_sql_generation()\n\n\n\n\n\n\n\n"
  ]
}