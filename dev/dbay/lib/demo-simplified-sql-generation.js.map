{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-simplified-sql-generation.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,QAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAKA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAd5B;;;EAgBA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,MADF,EAEE,OAFF,EAGE,QAHF,EAIE,gBAJF,CAAA,GAI4B,KAAK,CAAC,MAAN,CAAA,CAJ5B;;EAKA,GAAA,GAA4B,MAAM,CAAC;;EACnC,GAAA,GAA4B,OAAA,CAAQ,mBAAR,EAzB5B;;;EA2BA,CAAA,GAA4B,OAAA,CAAQ,sBAAR;;EAC5B,CAAA,CAAE,IAAF,EACE,MADF,CAAA,GAC4B,GAAG,CAAC,GADhC;;EAEA,CAAA,CAAE,QAAF,CAAA,GAA4B,OAAA,CAAQ,UAAR,CAA5B;;EACA,CAAA,CAAE,IAAF,CAAA,GAA4B,OAAA,CAAQ,oBAAR,CAA5B;;EACA,CAAA,CAAE,GAAF,CAAA,GAA4B,OAAA,CAAQ,4BAAR,CAA5B,EAhCA;;;;;EAuCA,IAAC,CAAA,8BAAD,GAAkC,QAAA,CAAE,GAAF,CAAA;IAC7B,CAAA,CAAA,CAAA,GAAA;AACL,UAAA;MAAI,EAAA,GAAkB,IAAI,IAAJ,CAAA;MAClB,EAAA,CAAG,GAAG,CAAA;;;;;;uDAAA,CAAN;aASA,EAAA,CAAG,GAAG,CAAA,6DAAA,CAAN;IAXC,CAAA;IAeA,CAAA,CAAA,CAAA,GAAA,EAAA;;;AACL,UAAA;MAAI,EAAA,GAAkB,IAAI,IAAJ,CAAA;MAClB,EAAA,CAAG,GAAG,CAAA;;;;;;;gDAAA,CAAN;MAUA,EAAA,CAAG,GAAG,CAAA,6DAAA,CAAN;MACA,EAAA,CAAG,GAAG,CAAA,6DAAA,CAAN;MACA,EAAA,CAAG,GAAG,CAAA,+CAAA,CAAN;MACA,CAAC,CAAC,QAAF,CAAW,kBAAX,EAA+B,EAAA,CAAG,GAAG,CAAA,gBAAA,CAAN,CAA/B;aACA,CAAC,CAAC,QAAF,CAAW,kBAAX,EAA+B,EAAA,CAAG,GAAG,CAAA,gBAAA,CAAN,CAA/B;IAhBC,CAAA;AAiBH,WAAO;EAjCyB,EAvClC;;;EA2EA,IAAC,CAAA,8BAAD,GAAkC,QAAA,CAAE,GAAF,CAAA;AAClC,QAAA,GAAA,EAAA;IAAE,CAAA,CAAE,GAAF,CAAA,GAAkB,OAAA,CAAQ,2BAAR,CAAlB;IACA,EAAA,GAAkB,IAAI,IAAJ,CAAA,EADpB;;;IAIE,EAAA,CAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAA,CAAN,EAJF;;;IAqCE,CAAC,CAAC,QAAF,CAAW,qBAAX,EAAkC,EAAA,CAAG,GAAG,CAAA,kCAAA,CAAN,CAAlC;IACA,CAAC,CAAC,QAAF,CAAW,0BAAX,EAAuC,EAAA,CAAG,GAAG,CAAA,uCAAA,CAAN,CAAvC;IACA,CAAC,CAAC,QAAF,CAAW,2BAAX,EAAwC,EAAA,CAAG,GAAG,CAAA,wCAAA,CAAN,CAAxC;IACA,CAAC,CAAC,QAAF,CAAW,iBAAX,EAA8B,EAAA,CAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;wCAAA,CAAN,CAA9B,EAxCF;;IA4DE,CAAC,CAAC,QAAF,CAAW,gCAAX,EAA6C,EAAA,CAAG,GAAG,CAAA,6CAAA,CAAN,CAA7C;IACA,CAAC,CAAC,QAAF,CAAW,iCAAX,EAA8C,EAAA,CAAG,GAAG,CAAA,8CAAA,CAAN,CAA9C;IACA,CAAC,CAAC,QAAF,CAAW,gCAAX,EAA6C,EAAA,CAAG,GAAG,CAAA,6CAAA,CAAN,CAA7C,EA9DF;;;;;;AAoEE,WAAO;EArEyB,EA3ElC;;;EAoJA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA;;aAEhC,IAAC,CAAA,8BAAD,CAAA;IAFgC,CAAA,IAAlC;;AApJA",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nGUY                       = require '../../../apps/guy'\n# { HDML }                  = require '../../../apps/hdml'\nH                         = require '../../../lib/helpers'\n{ lets\n  freeze }                = GUY.lft\n{ to_width }              = require 'to-width'\n{ DBay }                  = require '../../../apps/dbay'\n{ Sql }                   = require '../../../apps/dbay/lib/sql'\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_two_kinds_of_foreign_keys = ( cfg ) ->\n  do =>\n    db              = new DBay()\n    db SQL\"\"\"\n      create table a (\n          nr    integer  not null primary key,\n          name  text     not null unique );\n      create table b (\n          nr    integer  not null,\n          name  text     not null,\n        foreign key ( nr, name ) references a ( nr, name ) );\n      \"\"\"\n    db SQL\"insert into a ( nr, name ) values ( 1, 'one' ), ( 2, 'two' );\"\n    # SQL\"insert into b ( nr, name ) values ( 1, 'one' ), ( 2, 'two' );\"\n    # H.tabulate \"select * from a;\", db SQL\"select * from a;\"\n    # H.tabulate \"select * from b;\", db SQL\"select * from b;\"\n  do =>\n    db              = new DBay()\n    db SQL\"\"\"\n      create table a (\n          nr    integer  not null primary key,\n          name  text     not null unique );\n      create table b (\n          nr    integer  not null,\n          name  text     not null,\n        foreign key ( nr    ) references a ( nr   ),\n        foreign key ( name  ) references a ( name ) );\n      \"\"\"\n    db SQL\"insert into a ( nr, name ) values ( 1, 'one' ), ( 2, 'two' );\"\n    db SQL\"insert into b ( nr, name ) values ( 1, 'one' ), ( 2, 'two' );\"\n    db SQL\"insert into b ( nr, name ) values ( 1, 'two' );\"\n    H.tabulate \"select * from a;\", db SQL\"select * from a;\"\n    H.tabulate \"select * from b;\", db SQL\"select * from b;\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_simplified_sql_generation = ( cfg ) ->\n  { Mrg }         = require '../../../apps/dbay-mirage'\n  db              = new DBay()\n  # mrg             = new Mrg { db, }\n  #.........................................................................................................\n  db SQL\"\"\"\n    create table a (\n        nr integer,\n        foo float,\n        bar float,\n        baz float unique,\n        this,\n        that any,\n        stealth integer hidden,\n        x421 integer generated always as ( 42 ) virtual,\n        x422 integer generated always as ( 42 ) stored,\n        x423 integer generated always as ( 42 ) stored,\n      primary key ( nr ) );\n    create unique index athisthat on a ( this, that );\n    create table b (\n        idx integer not null,\n        name text unique,\n      primary key ( idx, name ),\n      -- foreign key ( idx ) references a ( nr ),\n      foreign key ( idx, name ) references a ( nr, baz ) );\n    create table b2 (\n        idx integer not null,\n        name text unique,\n      primary key ( idx, name ),\n      foreign key ( idx ) references a ( nr ),\n      foreign key ( name ) references a ( baz ) );\n    create table c (\n        x integer primary key references a ( nr ),\n        y text references b ( name ),\n        z float references a ( baz ) );\n    \"\"\"\n  #.........................................................................................................\n  # H.tabulate 'sqlite_schema', db SQL\"select type, name, tbl_name from sqlite_schema;\"\n  H.tabulate \"pragma_table_list()\", db SQL\"select * from pragma_table_list();\"\n  H.tabulate \"pragma_table_info( 'a' )\", db SQL\"select * from pragma_table_info( 'a' );\"\n  H.tabulate \"pragma_table_xinfo( 'a' )\", db SQL\"select * from pragma_table_xinfo( 'a' );\"\n  H.tabulate \"all the columns\", db SQL\"\"\"\n      select\n          tl.schema         as schema,\n          tl.name           as table_name,\n          tl.type           as table_type,\n          -- tl.ncol           as tl_ncol,\n          -- tl.wr             as tl_wr, -- without rowid\n          -- tl.strict         as tl_strict,\n          ti.cid            as field_nr,\n          ti.name           as field_name,\n          case ti.type when '' then 'any' else lower( ti.type ) end         as field_type,\n          not ti.\"notnull\"        as nullable,\n          ti.dflt_value     as fallback,\n          ti.pk             as ti_pk,\n          ti.hidden             as hidden\n        from pragma_table_list() as tl\n        join pragma_table_xinfo( tl.name ) as ti on ( true )\n        where true\n          and ( tl.name not like 'sqlite_%' );\"\"\"\n  # H.tabulate \"pragma_index_list( 'a' )\", db SQL\"select * from pragma_index_list( 'a' );\"\n  H.tabulate \"pragma_foreign_key_list( 'b' )\", db SQL\"select * from pragma_foreign_key_list( 'b' );\"\n  H.tabulate \"pragma_foreign_key_list( 'b2' )\", db SQL\"select * from pragma_foreign_key_list( 'b2' );\"\n  H.tabulate \"pragma_foreign_key_list( 'c' )\", db SQL\"select * from pragma_foreign_key_list( 'c' );\"\n  # # H.tabulate \"pragma_table_info( 'b' )\", db SQL\"select * from pragma_table_info( 'b' );\"\n  # # H.tabulate \"pragma_table_info( 'c' )\", db SQL\"select * from pragma_table_info( 'c' );\"\n  # # H.tabulate \"pragma_index_list( 'a' )\", db SQL\"select * from pragma_index_list( 'a' );\"\n  # # H.tabulate \"pragma_index_list( 'c' )\", db SQL\"select * from pragma_index_list( 'c' );\"\n  # # H.tabulate \"pragma_index_info( 'athisthat' )\", db SQL\"select * from pragma_index_info( 'athisthat' );\"\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # @demo_simplified_sql_generation()\n  @demo_two_kinds_of_foreign_keys()\n\n\n\n\n\n\n\n"
  ]
}