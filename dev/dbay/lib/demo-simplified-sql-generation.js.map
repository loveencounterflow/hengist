{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-simplified-sql-generation.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nGUY                       = require '../../../apps/guy'\n# { HDML }                  = require '../../../apps/hdml'\nH                         = require '../../../lib/helpers'\n{ lets\n  freeze }                = GUY.lft\n{ to_width }              = require 'to-width'\n{ DBay }                  = require '../../../apps/dbay'\n{ Sql }                   = require '../../../apps/dbay/lib/sql'\n\nclass Sql2 extends Sql\n\nclass DBay2 extends DBay\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( P... ) ->\n    super P...\n    @sql = new Sql2  \n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  get_primary_keys: ( cfg ) ->\n    { schema  } = @cfg\n    R = @all_rows SQL\"\"\"\n      select \n          -- pk                          as nr,\n          $table                      as \"table\",\n          name                        as field, \n          lower( type )               as type,\n          not \"notnull\"               as nullable\n        from #{schema}.pragma_table_info( $table )\n        where true \n          and ( pk > 0 )\n        order by pk;\"\"\", cfg\n    row.nullable = not not row.nullable for row in R\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  get_foreign_keys: ( cfg ) ->\n    { schema  } = @cfg\n    R = @all_rows SQL\"\"\"\n      select \n          $table                      as from_table,\n          \"from\"                      as from_field,\n          \"table\"                     as to_table,\n          coalesce( \"to\", \"from\" )    as to_field\n        from #{schema}.pragma_foreign_key_list( $table )\n        order by seq;\"\"\", cfg\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_foreign_key_by_from_fields: ( cfg ) ->\n    { schema  } = @cfg\n    R = {}\n    for row from @query SQL\"\"\"\n      select \n          \"from\"                      as from_field,\n          \"table\"                     as to_table,\n          coalesce( \"to\", \"from\" )    as to_field\n        from #{schema}.pragma_foreign_key_list( $table );\"\"\", cfg\n      R[ row.from_field ] = { table: row.to_table, field: row.to_field, }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_primary_key_clause: ( cfg ) ->\n    { I     } = @sql\n    pks       = @get_primary_keys cfg \n    pk_names  = ( I pk.field for pk in pks ).join ', '\n    return SQL\"primary key ( #{pk_names} )\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_foreign_key_clauses: ( cfg ) ->\n    { I     } = @sql\n    R         = {}\n    for from_field, { table, field, } of @_get_foreign_key_by_from_fields cfg \n      R[ from_field ] = \"references #{I table} ( #{I field} )\"\n    return R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_simplified_sql_generation = ( cfg ) ->\n  { Mrg }         = require '../../../apps/dbay-mirage'\n  db              = new DBay2()\n  mrg             = new Mrg { db, }\n  #.........................................................................................................\n  db SQL\"\"\"\n    create table a ( \n        foo float,\n        bar float,\n        baz float unique,\n        nr integer,\n      primary key ( nr ) );\n    create table b ( \n        idx integer not null, \n        name text unique, \n      primary key ( idx ), \n      foreign key ( idx ) references a ( nr ) );\n    create table c (\n        x integer primary key references a ( nr ),\n        y text references b ( name ), \n        z float references a ( baz ) );\n    \"\"\"\n  #.........................................................................................................\n  # H.tabulate 'sqlite_schema', db SQL\"select * from sqlite_schema;\"\n  H.tabulate \"pragma_table_list()\", db SQL\"select * from pragma_table_list();\"\n  H.tabulate \"pragma_table_info( 'mrg_mirror' )\", db SQL\"select * from pragma_table_info( 'mrg_mirror' );\"\n  H.tabulate \"pragma_foreign_key_list( 'mrg_mirror' )\", db SQL\"select * from pragma_foreign_key_list( 'mrg_mirror' );\"\n  H.tabulate \"pragma_table_info( 'mrg_raw_mirror' )\", db SQL\"select * from pragma_table_info( 'mrg_raw_mirror' );\"\n  H.tabulate \"pragma_foreign_key_list( 'mrg_raw_mirror' )\", db SQL\"select * from pragma_foreign_key_list( 'mrg_raw_mirror' );\"\n  H.tabulate \"db.get_primary_keys { table: 'mrg_raw_mirror', }\", db.get_primary_keys { table: 'mrg_raw_mirror', }\n  H.tabulate \"pragma_table_info( 'a' )\", db SQL\"select * from pragma_table_info( 'a' );\"\n  H.tabulate \"pragma_foreign_key_list( 'a' )\", db SQL\"select * from pragma_foreign_key_list( 'a' );\"\n  H.tabulate \"pragma_table_info( 'b' )\", db SQL\"select * from pragma_table_info( 'b' );\"\n  H.tabulate \"pragma_foreign_key_list( 'b' )\", db SQL\"select * from pragma_foreign_key_list( 'b' );\"\n  H.tabulate \"db.get_primary_keys { table: 'b', }\", db.get_primary_keys { table: 'b', }\n  H.tabulate \"db.get_foreign_keys { table: 'b', }\", db.get_foreign_keys { table: 'b', }\n  H.tabulate \"db.get_foreign_keys { table: 'mrg_raw_mirror', }\", db.get_foreign_keys { table: 'mrg_raw_mirror', }\n  urge '^546^', db._get_primary_key_clause { table: 'mrg_raw_mirror', }\n  urge '^546^', db._get_foreign_key_clauses { table: 'mrg_raw_mirror', }\n  urge '^546^', db._get_primary_key_clause { table: 'a', }\n  urge '^546^', db._get_primary_key_clause { table: 'b', }\n  urge '^546^', db._get_foreign_key_clauses { table: 'b', }\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  @demo_simplified_sql_generation()\n\n\n\n\n\n\n\n\n"
  ]
}