{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-simplified-sql-generation.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require '../../../apps/guy'\n# { HDML }                  = require '../../../apps/hdml'\nH                         = require '../../../lib/helpers'\n{ lets\n  freeze }                = GUY.lft\n{ to_width }              = require 'to-width'\n{ DBay }                  = require '../../../apps/dbay'\n{ SQL }                   = DBay\n{ Sql }                   = require '../../../apps/dbay/lib/sql'\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nadd_views = ( db ) ->\n  db.create_stdlib()\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    -- ### NOTE this is a best-effort approach to recover the correct ordering for DDL statements\n    -- from the data provided by SQLite. It is not quite clear whether the ordering in\n    -- `sqlite_schema` can be relied upon and whether it is safe to assume that adding `row_number()`\n    -- to the query will not accidentally change the ordering in absence of an `order by` clause.\n    -- To attain a modicum of reliability the filtering has been separated from the raw numbering\n    -- to keep that aspect from juggling around rows.\n    -- ### TAINT replace existing `select from pragma_table_list` by `select from dbay_tables`\n    -- ### TAINT consider to always list `table_nr` along with `table_name` or to omit it where not needed (?)\n    drop view if exists dbay_tables;\n    create view dbay_tables as with v1 as ( select\n        row_number() over ()                                                      as table_nr,\n        type                                                                      as type,\n        name                                                                      as table_name\n      from sqlite_schema )\n    select\n        row_number() over ()                                                      as table_nr,\n        type                                                                      as type,\n        table_name                                                                as table_name\n      from v1\n      where true\n        and ( type in ( 'table', 'view' ) )\n        and ( table_name not like 'sqlite_%' )\n        and ( table_name not like 'dbay_%' )\n      order by table_nr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_unique_fields;\n    create view dbay_unique_fields as select\n        tb.table_name                                                             as table_name,\n        ii.name                                                                   as field_name,\n        il.seq                                                                    as index_idx,\n        il.name                                                                   as index_name\n      from dbay_tables as tb\n      join pragma_index_list( tb.table_name ) as il on ( true )\n      join pragma_index_info( il.name ) as ii on ( true )\n      where true\n        and ( il.origin = 'u' )\n        and ( il.\"unique\" )\n      ;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_fields_1;\n    create view dbay_fields_1 as select\n        tb.table_nr                                                               as table_nr,\n        ti.cid + 1                                                                as field_nr,\n        tb.table_name                                                             as table_name,\n        tb.type                                                                   as table_type,\n        ti.name                                                                   as field_name,\n        case ti.type when '' then 'any' else lower( ti.type ) end                 as field_type,\n        not ti.\"notnull\"                                                          as nullable,\n        ti.dflt_value                                                             as fallback,\n        case ti.pk when 0 then null else ti.pk end                                as pk_nr,\n        ti.hidden                                                                 as hidden\n      from dbay_tables as tb\n      join pragma_table_xinfo( tb.table_name ) as ti on ( true )\n      order by table_nr, field_nr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_fields_2;\n    create view dbay_fields_2 as select\n        fd.*,\n        case when uf.field_name is null then 0 else 1 end                         as is_unique\n      from dbay_fields_1 as fd\n      left join dbay_unique_fields as uf using ( table_name, field_name )\n      order by table_nr, field_nr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_fields;\n    create view dbay_fields as select\n        table_nr                                                                  as table_nr,\n        field_nr                                                                  as field_nr,\n        count() over w - field_nr + 1                                             as field_rnr,\n        table_name                                                                as table_name,\n        table_type                                                                as table_type,\n        field_name                                                                as field_name,\n        field_type                                                                as field_type,\n        nullable                                                                  as nullable,\n        fallback                                                                  as fallback,\n        pk_nr                                                                     as pk_nr,\n        hidden                                                                    as hidden,\n        is_unique                                                                 as is_unique\n      from dbay_fields_2\n      window w as ( partition by table_name )\n      order by table_nr, field_nr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_foreign_key_clauses_1;\n    create view dbay_foreign_key_clauses_1 as select\n        fk.id                                                                     as fk_id,\n        fk.seq                                                                    as fk_idx,\n        tb.table_nr                                                               as from_table_nr,\n        tb.table_name                                                             as from_table_name,\n        fk.\"from\"                                                                 as from_field_name,\n        fk.\"table\"                                                                as to_table_name,\n        fk.\"to\"                                                                   as to_field_name\n      from dbay_tables as tb\n      join pragma_foreign_key_list( tb.table_name ) as fk\n      order by from_table_name, fk_id, fk_idx;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_foreign_key_clauses_2;\n    create view dbay_foreign_key_clauses_2 as select distinct\n        fk_id                                                                     as fk_id,\n        from_table_nr                                                             as from_table_nr,\n        from_table_name                                                           as from_table_name,\n        group_concat( std_sql_i( from_field_name ), ', ' ) over w                 as from_field_names,\n        to_table_name                                                             as to_table_name,\n        group_concat( std_sql_i(   to_field_name ), ', ' ) over w                 as to_field_names\n      from dbay_foreign_key_clauses_1\n      window w as (\n        partition by from_table_name, fk_id\n        order by fk_idx\n        rows between unbounded preceding and unbounded following )\n      order by from_table_name, fk_id, fk_idx;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_foreign_key_clauses_3;\n    create view dbay_foreign_key_clauses_3 as select\n        *,\n        count(*) over w                                                           as line_count\n      from dbay_foreign_key_clauses_2\n      window w as (\n        partition by from_table_name );\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_foreign_key_clauses;\n    create view dbay_foreign_key_clauses as select\n        from_table_nr                                                             as table_nr,\n        from_table_name                                                           as table_name,\n        row_number() over w                                                       as fk_nr,\n        '  foreign key ( ' || from_field_names || ' ) references '\n          || std_sql_i( to_table_name )\n          || ' ( ' || to_field_names || ' )'\n          || case when row_number() over w = line_count then '' else ',' end      as fk_clause\n      from dbay_foreign_key_clauses_3\n      window w as (\n        partition by from_table_name\n        order by fk_id desc\n        rows between unbounded preceding and unbounded following )\n      order by from_table_name, fk_nr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_primary_key_clauses_1;\n    create view dbay_primary_key_clauses_1 as select distinct\n        table_nr                                                                  as table_nr,\n        table_name                                                                as table_name,\n        group_concat( std_sql_i( field_name ), ', ' ) over w                      as field_names\n      from dbay_fields\n      where pk_nr is not null\n      window w as (\n        partition by table_name\n        order by pk_nr\n        rows between unbounded preceding and unbounded following )\n      order by table_name;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_primary_key_clauses;\n    create view dbay_primary_key_clauses as select distinct\n        p1.table_nr                                                               as table_nr,\n        p1.table_name                                                             as table_name,\n        '  primary key ( ' || p1.field_names || ' )'\n          || case when fc.fk_clause is null then '' else ',' end                  as pk_clause\n      from dbay_primary_key_clauses_1     as p1\n      left join dbay_foreign_key_clauses  as fc on ( p1.table_name = fc.table_name and fc.fk_nr = 1 )\n      order by p1.table_nr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_field_clauses_1;\n    create view dbay_field_clauses_1 as select\n        table_nr                                                                  as table_nr,\n        field_nr                                                                  as field_nr,\n        field_rnr                                                                 as field_rnr,\n        table_name                                                                as table_name,\n        field_name                                                                as field_name,\n        '    ' || std_sql_i( field_name ) || ' ' || field_type                    as fc_name_type,\n        case when not nullable         then ' not null'             else '' end   as fc_null,\n        case when is_unique            then ' unique'               else '' end   as fc_unique,\n        case when fallback is not null then ' default ' || fallback else '' end   as fc_default\n      from dbay_fields\n      order by table_nr, field_nr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_field_clauses;\n    create view dbay_field_clauses as select\n        f1.table_nr                                                               as table_nr,\n        f1.field_nr                                                               as field_nr,\n        f1.table_name                                                             as table_name,\n        f1.field_name                                                             as field_name,\n        f1.fc_name_type || f1.fc_null || f1.fc_unique || f1.fc_default\n          || case when f1.field_rnr > 1 then ','\n             else case when fc.fk_clause is null and pc.pk_clause is null then ''\n             else ',' end end                                                     as field_clause\n      from dbay_field_clauses_1           as f1\n      left join dbay_foreign_key_clauses  as fc on ( f1.table_name = fc.table_name and fc.fk_nr = 1 )\n      left join dbay_primary_key_clauses  as pc on ( f1.table_name = pc.table_name )\n      order by f1.table_nr, f1.field_nr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_create_table_clauses;\n    create view dbay_create_table_clauses as select\n        table_nr                                                                  as table_nr,\n        table_name                                                                as table_name,\n        'create table ' || std_sql_i( table_name ) || ' ('                        as create_start,\n        ' );'                                                                     as create_end\n      from dbay_tables;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_drop_table_clauses;\n    create view dbay_drop_table_clauses as select\n        table_nr                                                                  as table_nr,\n        table_name                                                                as table_name,\n        'drop table if exists ' || std_sql_i( table_name ) || ';'                 as txt\n      from dbay_tables;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_create_table_statements_1;\n    create view dbay_create_table_statements_1 as\n      with x as ( select * from dbay_create_table_clauses )\n      -- ...................................................................................................\n      select\n        null                                                                      as section_nr,\n        null                                                                      as table_nr,\n        null                                                                      as part_nr,\n        null                                                                      as lnr,\n        null                                                                      as table_name,\n        null                                                                      as txt\n      where false\n      -- ...................................................................................................\n      union all select distinct 10, null, 10, 1, null, '-- autogenerated'                     from x\n      union all select distinct 10, null, 10, 2, null, '\\b simplified\\n-- schema'             from x\n      union all select distinct 10, null, 10, 3, null, '.bail on'                             from x\n      union all select distinct 10, null, 10, 4, null, 'pragma foreign_keys = false;'         from x\n      union all select distinct 10, null, 10, 5, null, 'begin transaction;'                   from x\n      union all select distinct 90, null, 10, 1, null, 'commit;'                              from x\n      union all select distinct 90, null, 10, 2, null, 'pragma foreign_keys = true;'          from x\n      -- ...................................................................................................\n      union all select\n        15                                                                        as section_nr,\n        table_nr                                                                  as table_nr,\n        null                                                                      as part_nr,\n        1                                                                         as lnr,\n        table_name                                                                as table_name,\n        txt                                                                       as txt\n      from dbay_drop_table_clauses\n      -- ...................................................................................................\n      union all select\n        20                                                                        as section_nr,\n        table_nr                                                                  as table_nr,\n        20                                                                        as part_nr,\n        1                                                                         as lnr,\n        table_name                                                                as table_name,\n        create_start                                                              as txt\n      from dbay_create_table_clauses as ct\n      -- ...................................................................................................\n      union all select\n        20                                                                        as section_nr,\n        table_nr                                                                  as table_nr,\n        30                                                                        as part_nr,\n        field_nr                                                                  as lnr,\n        table_name                                                                as table_name,\n        field_clause                                                              as txt\n      from dbay_field_clauses\n      -- ...................................................................................................\n      union all select\n        20                                                                        as section_nr,\n        table_nr                                                                  as table_nr,\n        40                                                                        as part_nr,\n        1                                                                         as lnr,\n        table_name                                                                as table_name,\n        pk_clause                                                                 as txt\n      from dbay_primary_key_clauses\n      -- ...................................................................................................\n      union all select\n        20                                                                        as section_nr,\n        table_nr                                                                  as table_nr,\n        50                                                                        as part_nr,\n        1                                                                         as lnr,\n        table_name                                                                as table_name,\n        fk_clause                                                                 as txt\n      from dbay_foreign_key_clauses\n      -- ...................................................................................................\n      union all select\n        20                                                                        as section_nr,\n        table_nr                                                                  as table_nr,\n        90                                                                        as part_nr,\n        1                                                                         as lnr,\n        table_name                                                                as table_name,\n        create_end                                                                as txt\n      from dbay_create_table_clauses as ct\n      -- ...................................................................................................\n      order by section_nr, table_nr, part_nr, lnr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_create_table_statements_2;\n    create view dbay_create_table_statements_2 as select\n        row_number() over ()                                                      as lnr,\n        1                                                                         as tail,\n        txt                                                                       as txt\n      from dbay_create_table_statements_1 as r1\n      order by section_nr, table_nr, part_nr, r1.lnr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_create_table_statements_3;\n    create view dbay_create_table_statements_3 as select\n        r1.lnr                                                                    as lnr,\n        r2.lnr                                                                    as tail,\n        r2.part                                                                   as txt\n      from dbay_create_table_statements_2 as r1,\n      std_str_split( r1.txt, '\\n' )       as r2\n      order by lnr, tail;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_create_table_statements_4;\n    create view dbay_create_table_statements_4 as select\n        r1.lnr                                                                    as lnr,\n        r1.tail                                                                   as tail,\n        lead( r1.txt ) over ()                                                    as nxt_txt,\n        r1.txt                                                                    as txt\n      from dbay_create_table_statements_3 as r1\n      order by lnr, tail;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  skip = false\n  db.create_table_function\n    name:         'mrg_lines_from_text'\n    parameters:   [ 'line', 'nxt_line', ]\n    columns:      [ 'vnr2', 'txt', ]\n    rows: ( line, nxt_line ) ->\n      # debug [ line, nxt_line, ]\n      if skip\n        skip = false\n      else if nxt_line.startsWith '\\b'\n        skip = true\n        yield [ 1, line + nxt_line[ 1 .. ], ]\n      else\n        yield [ 1, line, ]\n      return null\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_create_table_statements;\n    create view dbay_create_table_statements as select\n        row_number() over ( order by r1.lnr, r1.tail, r2.vnr2 )                   as lnr,\n        r2.txt                                                                    as txt\n      from dbay_create_table_statements_4     as r1,\n      mrg_lines_from_text( r1.txt, nxt_txt )  as r2\n      order by r1.lnr, r1.tail, r2.vnr2;\"\"\"\n  #-------------------------------------------------------------------------------------------------------\n  # db SQL\"\"\"\n  #   drop view if exists dbay_db_dump;\n  #   create view dbay_db_dump as select\n  #     'pragma foreign_keys=off;'\n  #     'begin transaction;'\n  #   ;\"\"\"\n  return db\n\n#-----------------------------------------------------------------------------------------------------------\nshow_overview = ( db ) ->\n  info '#############################################################################'\n  H.tabulate \"dbay_tables\",                   db SQL\"select * from dbay_tables\"\n  H.tabulate \"dbay_unique_fields\",            db SQL\"select * from dbay_unique_fields\"\n  # H.tabulate \"dbay_fields_1\",                 db SQL\"select * from dbay_fields_1\"\n  H.tabulate \"dbay_fields\",                   db SQL\"select * from dbay_fields\"\n  # H.tabulate \"dbay_foreign_key_clauses_1\",    db SQL\"select * from dbay_foreign_key_clauses_1\"\n  # H.tabulate \"dbay_foreign_key_clauses_2\",    db SQL\"select * from dbay_foreign_key_clauses_2\"\n  # H.tabulate \"dbay_foreign_key_clauses_3\",    db SQL\"select * from dbay_foreign_key_clauses_3\"\n  H.tabulate \"dbay_foreign_key_clauses\",      db SQL\"select * from dbay_foreign_key_clauses\"\n  # H.tabulate \"dbay_primary_key_clauses_1\",    db SQL\"select * from dbay_primary_key_clauses_1\"\n  H.tabulate \"dbay_primary_key_clauses\",      db SQL\"select * from dbay_primary_key_clauses\"\n  # H.tabulate \"dbay_field_clauses_1\",          db SQL\"select * from dbay_field_clauses_1\"\n  H.tabulate \"dbay_field_clauses\",            db SQL\"select * from dbay_field_clauses\"\n  H.tabulate \"dbay_create_table_clauses\",     db SQL\"select * from dbay_create_table_clauses\"\n  # H.tabulate \"dbay_create_table_statements_1\", db SQL\"select * from dbay_create_table_statements_1\"\n  # H.tabulate \"dbay_create_table_statements_2\", db SQL\"select * from dbay_create_table_statements_2\"\n  # H.tabulate \"dbay_create_table_statements_3\", db SQL\"select * from dbay_create_table_statements_3\"\n  # H.tabulate \"dbay_create_table_statements_4\", db SQL\"select * from dbay_create_table_statements_4\"\n  H.tabulate \"dbay_create_table_statements\",  db SQL\"select * from dbay_create_table_statements\"\n  # H.tabulate \"dbay_create_table_statements\",  db SQL\"\"\"\n  #   select\n  #       lnr,\n  #       tail,\n  #       substring( txt, 1, 100 ) as txt\n  #     from dbay_create_table_statements;\"\"\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_two_kinds_of_foreign_keys = ( cfg ) ->\n  trycatch = ( ref, db, sql ) => try db sql catch error then warn ref, ( sql ), CND.reverse error.message\n  do =>\n    urge '################################'\n    db              = add_views new DBay { path: '/tmp/fk-demo-1.sqlite', }\n    db SQL\"\"\"\n      pragma foreign_keys = false;\n      drop table if exists a;\n      drop table if exists b;\n      pragma foreign_keys = true;\n      create table a (\n          xnr   integer  not null unique,\n          name  text     not null unique,\n        primary key ( xnr, name ) );\n      create table b (\n          xnr    integer  not null,\n          name  text     not null,\n        foreign key ( xnr, name ) references a ( xnr, name ) );\n      \"\"\"\n    trycatch '^578-1^', db, SQL\"insert into a ( xnr, name ) values ( 1, 'one' );\"\n    trycatch '^578-2^', db, SQL\"insert into a ( xnr, name ) values ( 2, 'two' );\"\n    trycatch '^578-3^', db, SQL\"insert into b ( xnr, name ) values ( 1, 'one' );\"\n    trycatch '^578-4^', db, SQL\"insert into b ( xnr, name ) values ( 2, 'two' );\"\n    trycatch '^578-5^', db, SQL\"insert into b ( xnr, name ) values ( 1, 'two' );\"\n    H.tabulate \"select * from a;\", db SQL\"select * from a;\"\n    H.tabulate \"select * from b;\", db SQL\"select * from b;\"\n    # H.tabulate \"pragma_foreign_key_list( 'b' )\", db SQL\"select * from pragma_foreign_key_list( 'b' );\"\n    H.tabulate \"dbay_fields\", db SQL\"select * from dbay_fields;\"\n    # H.tabulate \"dbay_foreign_key_clauses_1\", db SQL\"select * from dbay_foreign_key_clauses_1;\"\n    # H.tabulate \"dbay_foreign_key_clauses_2\", db SQL\"select * from dbay_foreign_key_clauses_2;\"\n    H.tabulate \"dbay_primary_key_clauses\", db SQL\"select * from dbay_primary_key_clauses;\"\n    # H.tabulate \"dbay_field_clauses_1\", db SQL\"select * from dbay_field_clauses_1;\"\n    H.tabulate \"dbay_unique_fields\", db SQL\"select * from dbay_unique_fields;\"\n    H.tabulate \"dbay_field_clauses\", db SQL\"select * from dbay_field_clauses;\"\n  do =>\n    urge '################################'\n    db              = add_views new DBay { path: '/tmp/fk-demo-2.sqlite', }\n    db SQL\"\"\"\n      pragma foreign_keys = false;\n      drop table if exists a;\n      drop table if exists b;\n      drop view  if exists c;\n      pragma foreign_keys = true;\n      create table a (\n          xnr   integer  not null unique,\n          name  text     not null unique,\n        primary key ( xnr, name ) );\n      create table b (\n          xnr   integer  not null,\n          name  text     not null,\n        foreign key ( xnr    ) references a ( xnr   ),\n        foreign key ( name  ) references a ( name ) );\n      create view c as select\n          xnr,\n          name\n        from b\n        where xnr > 1\n        order by xnr;\n      \"\"\"\n    # db \"pragma foreign_keys = false;\"\n    # H.tabulate \"select * from pragma_foreign_key_check();\", db SQL\"select * from pragma_foreign_key_check();\"\n    trycatch '^578-7^', db, SQL\"insert into a ( xnr, name ) values ( 1, 'one' );\"\n    trycatch '^578-8^', db, SQL\"insert into a ( xnr, name ) values ( 2, 'two' );\"\n    trycatch '^578-9^', db, SQL\"insert into b ( xnr, name ) values ( 1, 'one' );\"\n    trycatch '^578-10^', db, SQL\"insert into b ( xnr, name ) values ( 2, 'two' );\"\n    trycatch '^578-11^', db, SQL\"insert into b ( xnr, name ) values ( 1, 'two' );\"\n    H.tabulate \"select * from a;\", db SQL\"select * from a;\"\n    H.tabulate \"select * from b;\", db SQL\"select * from b;\"\n    # H.tabulate \"pragma_foreign_key_list( 'b' )\", db SQL\"select * from pragma_foreign_key_list( 'b' );\"\n    H.tabulate \"dbay_fields\", db SQL\"select * from dbay_fields;\"\n    # H.tabulate \"dbay_foreign_key_clauses_1\", db SQL\"select * from dbay_foreign_key_clauses_1;\"\n    # H.tabulate \"dbay_foreign_key_clauses_2\", db SQL\"select * from dbay_foreign_key_clauses_2;\"\n    # H.tabulate \"dbay_foreign_key_clauses_OLD\", db SQL\"select * from dbay_foreign_key_clauses_OLD;\"\n    H.tabulate \"dbay_primary_key_clauses\", db SQL\"select * from dbay_primary_key_clauses;\"\n    # H.tabulate \"dbay_field_clauses_1\", db SQL\"select * from dbay_field_clauses_1;\"\n    H.tabulate \"dbay_unique_fields\", db SQL\"select * from dbay_unique_fields;\"\n    H.tabulate \"dbay_field_clauses\", db SQL\"select * from dbay_field_clauses;\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_simplified_sql_generation = ( cfg ) ->\n  { Mrg }         = require '../../../apps/dbay-mirage'\n  db              = add_views new DBay { path: '/tmp/foobar.sqlite', }\n  # mrg             = new Mrg { db, }\n  urge '################################'\n  #.........................................................................................................\n  db SQL\"\"\"\n    pragma foreign_keys = false;\n    drop table if exists a;\n    drop table if exists b;\n    drop table if exists c;\n    drop table if exists b2;\n    drop table if exists only_fk;\n    drop view if exists ab;\n    pragma foreign_keys = true;\n    create table a (\n        xnr integer,\n        foo float,\n        bar float default 42,\n        baz float unique,\n        this,\n        that any,\n        stealth integer hidden,\n        x421 integer generated always as ( 42 ) virtual,\n        x422 integer generated always as ( 42 ) stored,\n        x423 integer generated always as ( 42 ) stored,\n      primary key ( xnr ) );\n    create unique index athisthat on a ( this, that );\n    create table b (\n        idx integer not null,\n        name text unique,\n      primary key ( idx, name ),\n      -- foreign key ( idx ) references a ( xnr ),\n      foreign key ( idx, name ) references a ( xnr, baz ) );\n    create table b2 (\n        idx integer not null,\n        name text unique,\n      primary key ( idx, name ),\n      foreign key ( idx ) references a ( xnr ),\n      foreign key ( name ) references a ( baz ) );\n    create table c (\n        x integer primary key references a ( xnr ),\n        y text default 'whatever' references b ( name ),\n        z float references a ( baz ) );\n    create table only_fk (\n        x integer,\n        y text,\n      foreign key ( x ) references a ( xnr ),\n      foreign key ( y ) references b ( name ) );\n    create view ab as select\n        3 * 4 as twelve,\n        x421,\n        xnr\n      from a\n      order by x421;\n    \"\"\"\n  #.........................................................................................................\n  H.tabulate \"select * from dbay_tables;\", db SQL\"select * from dbay_tables;\"\n  H.tabulate \"dbay_field_clauses\", db SQL\"select * from dbay_field_clauses;\"\n  H.tabulate \"dbay_primary_key_clauses\", db SQL\"select * from dbay_primary_key_clauses;\"\n  H.tabulate \"dbay_create_table_clauses\", db SQL\"select * from dbay_create_table_clauses;\"\n  show_overview db\n  txt = ( row.txt for row from db SQL\"select * from dbay_create_table_statements\" ).join '\\n'\n  FS.writeFileSync '/tmp/dbay-sample-dump.sql', txt\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # @demo_two_kinds_of_foreign_keys()\n  @demo_simplified_sql_generation()\n\n\n\n\n\n"
  ]
}