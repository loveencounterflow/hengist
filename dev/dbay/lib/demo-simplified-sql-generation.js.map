{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-simplified-sql-generation.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require '../../../apps/guy'\n# { HDML }                  = require '../../../apps/hdml'\nH                         = require '../../../lib/helpers'\n{ lets\n  freeze }                = GUY.lft\n{ to_width }              = require 'to-width'\n{ DBay }                  = require '../../../apps/dbay'\n{ SQL }                   = DBay\n{ Sql }                   = require '../../../apps/dbay/lib/sql'\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nshow_overview = ( db ) ->\n  info '#############################################################################'\n  H.tabulate \"dbay_tables\",                   db SQL\"select * from dbay_tables\"\n  H.tabulate \"dbay_unique_fields\",            db SQL\"select * from dbay_unique_fields\"\n  # H.tabulate \"dbay_fields_1\",                 db SQL\"select * from dbay_fields_1\"\n  H.tabulate \"dbay_fields\",                   db SQL\"select * from dbay_fields\"\n  # H.tabulate \"dbay_foreign_key_clauses_1\",    db SQL\"select * from dbay_foreign_key_clauses_1\"\n  # H.tabulate \"dbay_foreign_key_clauses_2\",    db SQL\"select * from dbay_foreign_key_clauses_2\"\n  # H.tabulate \"dbay_foreign_key_clauses_3\",    db SQL\"select * from dbay_foreign_key_clauses_3\"\n  H.tabulate \"dbay_foreign_key_clauses\",      db SQL\"select * from dbay_foreign_key_clauses\"\n  # H.tabulate \"dbay_primary_key_clauses_1\",    db SQL\"select * from dbay_primary_key_clauses_1\"\n  H.tabulate \"dbay_primary_key_clauses\",      db SQL\"select * from dbay_primary_key_clauses\"\n  # H.tabulate \"dbay_field_clauses_1\",          db SQL\"select * from dbay_field_clauses_1\"\n  H.tabulate \"dbay_field_clauses\",            db SQL\"select * from dbay_field_clauses\"\n  H.tabulate \"dbay_create_table_clauses\",     db SQL\"select * from dbay_create_table_clauses\"\n  # H.tabulate \"dbay_create_table_statements_1\", db SQL\"select * from dbay_create_table_statements_1\"\n  # H.tabulate \"dbay_create_table_statements_2\", db SQL\"select * from dbay_create_table_statements_2\"\n  # H.tabulate \"dbay_create_table_statements_3\", db SQL\"select * from dbay_create_table_statements_3\"\n  # H.tabulate \"dbay_create_table_statements_4\", db SQL\"select * from dbay_create_table_statements_4\"\n  H.tabulate \"dbay_create_table_statements\",  db SQL\"select * from dbay_create_table_statements\"\n  # H.tabulate \"dbay_create_table_statements\",  db SQL\"\"\"\n  #   select\n  #       lnr,\n  #       tail,\n  #       substring( txt, 1, 100 ) as txt\n  #     from dbay_create_table_statements;\"\"\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_two_kinds_of_foreign_keys = ( cfg ) ->\n  trycatch = ( ref, db, sql ) => try db sql catch error then warn ref, ( sql ), CND.reverse error.message\n  do =>\n    urge '################################'\n    db              = new DBay { path: '/tmp/fk-demo-1.sqlite', }\n    db._implement_trash()\n    db SQL\"\"\"\n      pragma foreign_keys = false;\n      drop table if exists a;\n      drop table if exists b;\n      pragma foreign_keys = true;\n      create table a (\n          xnr   integer  not null unique,\n          name  text     not null unique,\n        primary key ( xnr, name ) );\n      create table b (\n          xnr    integer  not null,\n          name  text     not null,\n        foreign key ( xnr, name ) references a ( xnr, name ) );\n      \"\"\"\n    trycatch '^578-1^', db, SQL\"insert into a ( xnr, name ) values ( 1, 'one' );\"\n    trycatch '^578-2^', db, SQL\"insert into a ( xnr, name ) values ( 2, 'two' );\"\n    trycatch '^578-3^', db, SQL\"insert into b ( xnr, name ) values ( 1, 'one' );\"\n    trycatch '^578-4^', db, SQL\"insert into b ( xnr, name ) values ( 2, 'two' );\"\n    trycatch '^578-5^', db, SQL\"insert into b ( xnr, name ) values ( 1, 'two' );\"\n    H.tabulate \"select * from a;\", db SQL\"select * from a;\"\n    H.tabulate \"select * from b;\", db SQL\"select * from b;\"\n    # H.tabulate \"pragma_foreign_key_list( 'b' )\", db SQL\"select * from pragma_foreign_key_list( 'b' );\"\n    H.tabulate \"dbay_fields\", db SQL\"select * from dbay_fields;\"\n    # H.tabulate \"dbay_foreign_key_clauses_1\", db SQL\"select * from dbay_foreign_key_clauses_1;\"\n    # H.tabulate \"dbay_foreign_key_clauses_2\", db SQL\"select * from dbay_foreign_key_clauses_2;\"\n    H.tabulate \"dbay_primary_key_clauses\", db SQL\"select * from dbay_primary_key_clauses;\"\n    # H.tabulate \"dbay_field_clauses_1\", db SQL\"select * from dbay_field_clauses_1;\"\n    H.tabulate \"dbay_unique_fields\", db SQL\"select * from dbay_unique_fields;\"\n    H.tabulate \"dbay_field_clauses\", db SQL\"select * from dbay_field_clauses;\"\n  do =>\n    urge '################################'\n    db              = new DBay { path: '/tmp/fk-demo-2.sqlite', }\n    db._implement_trash()\n    db SQL\"\"\"\n      pragma foreign_keys = false;\n      drop table if exists a;\n      drop table if exists b;\n      drop view  if exists c;\n      pragma foreign_keys = true;\n      create table a (\n          xnr   integer  not null unique,\n          name  text     not null unique,\n        primary key ( xnr, name ) );\n      create table b (\n          xnr   integer  not null,\n          name  text     not null,\n        foreign key ( xnr    ) references a ( xnr   ),\n        foreign key ( name  ) references a ( name ) );\n      create view c as select\n          xnr,\n          name\n        from b\n        where xnr > 1\n        order by xnr;\n      \"\"\"\n    # db \"pragma foreign_keys = false;\"\n    # H.tabulate \"select * from pragma_foreign_key_check();\", db SQL\"select * from pragma_foreign_key_check();\"\n    trycatch '^578-7^', db, SQL\"insert into a ( xnr, name ) values ( 1, 'one' );\"\n    trycatch '^578-8^', db, SQL\"insert into a ( xnr, name ) values ( 2, 'two' );\"\n    trycatch '^578-9^', db, SQL\"insert into b ( xnr, name ) values ( 1, 'one' );\"\n    trycatch '^578-10^', db, SQL\"insert into b ( xnr, name ) values ( 2, 'two' );\"\n    trycatch '^578-11^', db, SQL\"insert into b ( xnr, name ) values ( 1, 'two' );\"\n    H.tabulate \"select * from a;\", db SQL\"select * from a;\"\n    H.tabulate \"select * from b;\", db SQL\"select * from b;\"\n    # H.tabulate \"pragma_foreign_key_list( 'b' )\", db SQL\"select * from pragma_foreign_key_list( 'b' );\"\n    H.tabulate \"dbay_fields\", db SQL\"select * from dbay_fields;\"\n    # H.tabulate \"dbay_foreign_key_clauses_1\", db SQL\"select * from dbay_foreign_key_clauses_1;\"\n    # H.tabulate \"dbay_foreign_key_clauses_2\", db SQL\"select * from dbay_foreign_key_clauses_2;\"\n    # H.tabulate \"dbay_foreign_key_clauses_OLD\", db SQL\"select * from dbay_foreign_key_clauses_OLD;\"\n    H.tabulate \"dbay_primary_key_clauses\", db SQL\"select * from dbay_primary_key_clauses;\"\n    # H.tabulate \"dbay_field_clauses_1\", db SQL\"select * from dbay_field_clauses_1;\"\n    H.tabulate \"dbay_unique_fields\", db SQL\"select * from dbay_unique_fields;\"\n    H.tabulate \"dbay_field_clauses\", db SQL\"select * from dbay_field_clauses;\"\n    show_overview db\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_simplified_sql_generation = ( cfg ) ->\n  { Mrg }         = require '../../../apps/dbay-mirage'\n  db              = new DBay { path: '/tmp/foobar.sqlite', }\n  db._implement_trash()\n  # mrg             = new Mrg { db, }\n  urge '################################'\n  #.........................................................................................................\n  db SQL\"\"\"\n    pragma foreign_keys = false;\n    drop table if exists a;\n    drop table if exists b;\n    drop table if exists c;\n    drop table if exists b2;\n    drop table if exists only_fk;\n    drop view if exists ab;\n    pragma foreign_keys = true;\n    create table a (\n        xnr integer,\n        foo float,\n        bar float default 42,\n        baz float unique,\n        this,\n        that any,\n        stealth integer hidden,\n        x421 integer generated always as ( 42 ) virtual,\n        x422 integer generated always as ( 42 ) stored,\n        x423 integer generated always as ( 42 ) stored,\n      primary key ( xnr ) );\n    create unique index athisthat on a ( this, that );\n    create table b (\n        idx integer not null,\n        name text unique,\n      primary key ( idx, name ),\n      -- foreign key ( idx ) references a ( xnr ),\n      foreign key ( idx, name ) references a ( xnr, baz ) );\n    create table b2 (\n        idx integer not null,\n        name text unique,\n      primary key ( idx, name ),\n      foreign key ( idx ) references a ( xnr ),\n      foreign key ( name ) references a ( baz ) );\n    create table c (\n        x integer primary key references a ( xnr ),\n        y text default 'whatever' references b ( name ),\n        z float references a ( baz ) );\n    create table only_fk (\n        x integer,\n        y text,\n      foreign key ( x ) references a ( xnr ),\n      foreign key ( y ) references b ( name ) );\n    create view ab as select\n        3 * 4 as twelve,\n        x421,\n        xnr\n      from a\n      order by x421;\n    \"\"\"\n  #.........................................................................................................\n  H.tabulate \"select * from dbay_tables;\", db SQL\"select * from dbay_tables;\"\n  H.tabulate \"dbay_field_clauses\", db SQL\"select * from dbay_field_clauses;\"\n  H.tabulate \"dbay_primary_key_clauses\", db SQL\"select * from dbay_primary_key_clauses;\"\n  H.tabulate \"dbay_create_table_clauses\", db SQL\"select * from dbay_create_table_clauses;\"\n  show_overview db\n  txt = ( row.txt for row from db SQL\"select * from dbay_create_table_statements\" ).join '\\n'\n  FS.writeFileSync '/tmp/dbay-sample-dump.sql', txt\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # @demo_two_kinds_of_foreign_keys()\n  @demo_simplified_sql_generation()\n\n\n\n\n\n"
  ]
}