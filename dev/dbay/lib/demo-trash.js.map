{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-trash.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/DEMO/TRASH'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require '../../../apps/guy'\n# { HDML }                  = require '../../../apps/hdml'\nH                         = require './helpers'\nX                         = require '../../../lib/helpers'\n{ lets\n  freeze }                = GUY.lft\n{ to_width }              = require 'to-width'\n{ DBay }                  = require '../../../apps/dbay'\n{ SQL }                   = DBay\n{ Sql }                   = require '../../../apps/dbay/lib/sql'\nxrpr                      = ( x ) -> ( require 'util' ).inspect x, {\n  colors: true, depth: Infinity, maxArrayLength: null, breakLength: Infinity, }\nto_snake_case             = require 'just-snake-case'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nshow_overview = ( db ) ->\n  info '#############################################################################'\n  X.tabulate \"dbay_tables\",                   db SQL\"select * from dbay_tables\"\n  X.tabulate \"dbay_unique_fields\",            db SQL\"select * from dbay_unique_fields\"\n  # X.tabulate \"dbay_fields_1\",                 db SQL\"select * from dbay_fields_1\"\n  X.tabulate \"dbay_fields\",                   db SQL\"select * from dbay_fields\"\n  X.tabulate \"dbay_foreign_key_clauses_1\",    db SQL\"select * from dbay_foreign_key_clauses_1\"\n  X.tabulate \"dbay_foreign_key_clauses_2\",    db SQL\"select * from dbay_foreign_key_clauses_2\"\n  # X.tabulate \"dbay_foreign_key_clauses_3\",    db SQL\"select * from dbay_foreign_key_clauses_3\"\n  X.tabulate \"dbay_foreign_key_clauses\",      db SQL\"select * from dbay_foreign_key_clauses\"\n  X.tabulate \"dbay_primary_key_clauses_1\",    db SQL\"select * from dbay_primary_key_clauses_1\"\n  X.tabulate \"dbay_primary_key_clauses\",      db SQL\"select * from dbay_primary_key_clauses\"\n  # X.tabulate \"dbay_field_clauses_1\",          db SQL\"select * from dbay_field_clauses_1\"\n  X.tabulate \"dbay_field_clauses\",            db SQL\"select * from dbay_field_clauses\"\n  # X.tabulate \"dbay_create_table_clauses\",     db SQL\"select * from dbay_create_table_clauses\"\n  # X.tabulate \"dbay_create_table_statements_1\", db SQL\"select * from dbay_create_table_statements_1\"\n  # X.tabulate \"dbay_create_table_statements_2\", db SQL\"select * from dbay_create_table_statements_2\"\n  # X.tabulate \"dbay_create_table_statements_3\", db SQL\"select * from dbay_create_table_statements_3\"\n  # X.tabulate \"dbay_create_table_statements_4\", db SQL\"select * from dbay_create_table_statements_4\"\n  # X.tabulate \"dbay_create_table_statements\",  db SQL\"select * from dbay_create_table_statements\"\n  # X.tabulate \"dbay_create_table_statements\",  db SQL\"\"\"\n  #   select\n  #       lnr,\n  #       tail,\n  #       substring( txt, 1, 100 ) as txt\n  #     from dbay_create_table_statements;\"\"\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ntabulate = ( db, query ) -> X.tabulate query, db query\n\n#-----------------------------------------------------------------------------------------------------------\nqueries = [\n  SQL\"drop view if exists dbay_foreign_key_clauses_2;\",\n  SQL\"\"\"\n    create view dbay_foreign_key_clauses_2 as select distinct\n        fk_id                                                                     as fk_id,\n        from_table_nr                                                             as from_table_nr,\n        from_table_name                                                           as from_table_name,\n        group_concat( std_sql_i( from_field_name ), ', ' ) over w                 as from_field_names,\n        to_table_name                                                             as to_table_name,\n        group_concat( std_sql_i(   to_field_name ), ', ' ) over w                 as to_field_names\n      from dbay_foreign_key_clauses_1\n      window w as (\n        partition by from_table_name, fk_id\n        order by fk_idx\n        rows between unbounded preceding and unbounded following )\n      order by from_table_name, fk_id, fk_idx;\"\"\"\n  SQL\"create table d ( x integer ) strict;\"\n  SQL\"\"\"create table d ( x \"any\" );\"\"\"\n  SQL\"select a from t;\"\n  SQL\"insert into products ( nr, name ) values ( 1234, 'frob' );\"\n  SQL\"select a, b from s join t using ( c );\"\n  SQL\"select t1.a as alias, t2.b from s as t1 join t as t2 using ( c );\"\n  SQL\"create view v as select a, b, c, f( d ) as k from t where e > 2;\"\n  SQL\"create view v as select a, b, c, f( d ) as k from t join t2 using ( uuu ) where e > 2 order by k;\"\n  SQL\"select a, b, c, f( d ) as k from t join t2 using ( uuu ) where e > 2 order by k;\"\n  ]\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_trash_empty_db = ( cfg ) ->\n  { DBay }        = require '../../../apps/dbay'\n  do =>\n    db = new DBay()\n    db.create_trashlib()\n    show_overview db\n  do =>\n    db = new DBay()\n    # db.\n    # urge '^2334^', db.trash_to_sql()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_trash = ( cfg ) ->\n  { DBay }        = require '../../../apps/dbay'\n  { Mrg }         = require '../../../apps/dbay-mirage'\n  from_path       = PATH.resolve __dirname, '../../../assets/dbay/demo-html-parsing.sqlite'\n  db_path         = PATH.resolve __dirname, '../../../data/dbay/demo-html-parsing.sqlite'\n  trash_path      = PATH.resolve __dirname, '../../../data/dbay/demo-html-parsing.trashed.sqlite'\n  H.copy_over from_path, db_path\n  help \"^43587^ using DB at #{db_path}\"\n  db              = new DBay { path: db_path, }\n  mrg             = new Mrg { db, }\n  db.create_trashlib()\n  show_overview db\n  db.trash_to_sqlite { path: trash_path, overwrite: true, }\n  help \"^43587^ trashed DB to #{trash_path}\"\n    # urge '^2334^', db.trash_to_sql()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_field_matrix = ( cfg ) ->\n  { DBay }        = require '../../../apps/dbay'\n  { Mrg }         = require '../../../apps/dbay-mirage'\n  from_path       = PATH.resolve __dirname, '../../../assets/dbay/demo-html-parsing.sqlite'\n  db_path         = PATH.resolve __dirname, '../../../data/dbay/demo-html-parsing.sqlite'\n  trash_path      = PATH.resolve __dirname, '../../../data/dbay/demo-html-parsing.trashed.sqlite'\n  H.copy_over from_path, db_path\n  help \"^43587^ using DB at #{db_path}\"\n  db              = new DBay { path: db_path, }\n  mrg             = new Mrg { db, }\n  includes        = [\n    'mrg_datasources'\n    'mrg_html_atrids'\n    'mrg_html_atrs'\n    'mrg_html_mirror'\n    'mrg_html_typs'\n    'mrg_mirror'\n    'mrg_raw_mirror' ]\n  db.create_trashlib()\n  # show_overview db\n  foreign_keys  = {}\n  field_count   = 0\n  all_fields    = []\n  seen_tables   = new Set()\n  for { from_table_name, from_field_name, to_table_name, to_field_name } from db.all_rows SQL\"select * from dbay_foreign_key_clauses_1;\"\n    from_key      = from_table_name + '/' + from_field_name\n    to_key        = to_table_name   + '/' + to_field_name\n    foreign_keys[ from_key ] = to_key ### TAINT can have multiple references ###\n    debug { from_table_name, from_field_name, to_table_name, to_field_name, }\n    unless seen_tables.has from_table_name\n      seen_tables.add from_table_name\n      for { field_name, } from db.all_rows SQL\"select * from dbay_fields where table_name = $from_table_name\", { from_table_name, }\n        all_fields.push from_table_name + '/' + field_name\n    unless seen_tables.has to_table_name\n      seen_tables.add to_table_name\n      for { field_name, } from db.all_rows SQL\"select * from dbay_fields where table_name = $to_table_name\", { to_table_name, }\n        all_fields.push to_table_name + '/' + field_name\n  urge foreign_keys\n  info all_fields\n  for key in all_fields\n    urge key\n  for { sql, } from db SQL\"select * from sqlite_schema;\"\n    continue unless sql?\n    continue if sql is ''\n    echo sql + ';'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_analyze = ( cfg ) ->\n  { DBay }        = require '../../../apps/dbay'\n  db              = new DBay()\n  db SQL\"\"\"\n    drop table if exists a;\n    drop table if exists b;\n    drop view  if exists c;\n    create table a ( d1 integer primary key, d2 text unique, c );\n    create table b ( d1 integer unique, d2 text unique, foreign key ( d1, d2 ) references a );\n    -- create view  c as select * from a union all select * from b;\n    create view c as select a.d1 as d1, b.d2 as d2 from a join b using ( d1, d2 );\n    \"\"\"\n  db SQL\"\"\"\n    insert into a ( d1, d2 ) values ( 1, 'one' );\n    \"\"\"\n  db SQL\"analyze;\"\n  tabulate db, \"select * from sqlite_stat1;\"\n  tabulate db, \"select * from sqlite_stat4;\"\n  tabulate db, \"explain query plan select * from a join b using ( d1, d2 );\"\n  tabulate db, \"explain select * from a join b using ( d1, d2 );\"\n  tabulate db, \"explain query plan select * from c;\"\n  tabulate db, \"explain select * from c;\"\n  tabulate db, \"explain select * from c where d1 > 0;\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_sql_tokenizer = ->\n  cfg           =\n    regExp: ( require 'mysql-tokenizer/lib/regexp-sql92' )\n  tokenize      = ( require 'mysql-tokenizer' ) cfg\n  sql           = \"\"\"select *, 'helo world' as \"text\" from blah order by 1; insert sfksi 1286982342 &/$/&;\"\"\"\n  sql           = \"\"\"create view d as select a + b + f( c ) as d from t;\"\"\"\n  tokens        = tokenize sql + '\\n'\n  debug token for token in tokens\n  colors        = [\n    ( ( P... ) -> CND.reverse CND.lime P... )\n    ( ( P... ) -> CND.reverse CND.blue P... )\n    ( ( P... ) -> CND.reverse CND.orange P... ) ]\n  color_count   = colors.length\n  tokens        = ( colors[ idx %% color_count ] token for token, idx in tokens )\n  info tokens.join ''\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_highlightjs = ->\n  for query in queries\n    @analyze_with_highlightjs queries[ 0 ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@analyze_with_highlightjs = ( query ) ->\n  hljs    = require 'highlight.js/lib/core'\n  hljs.registerLanguage 'sql', require 'highlight.js/lib/languages/sql'\n  hljs.configure { classPrefix: '', }\n  #.........................................................................................................\n  hl      = hljs.highlightAuto query\n  parts   = hl.value.split '<span class=\"'\n  rows    = []\n  for part in parts\n    continue if part is ''\n    unless ( match = part.match /^(?<type>[^\"]+)\">(?<tspan>[^<]*)<\\/span>(?<tail>.*)$/s )?\n      warn \"not recognized: #{rpr part}\"\n      continue\n    rows.push { match.groups..., }\n  X.tabulate query, rows\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_pgsql_parser = ->\n  ```\n  const { parse, deparse } = require('pgsql-parser');\n  const stmts = parse( sql );\n  // stmts[0].RawStmt.stmt.SelectStmt.fromClause[0].RangeVar.relname = 'another_table';\n  console.log(deparse(stmts));\n  ```\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_pg_query_native = ->\n  PQN = require 'pg-query-native'\n  for query in queries\n    info query[ .. 100 ]\n    pr = PQN.parse query\n    if pr.error?\n      warn pr.error.message.replace /\\n.*/s, ''\n      col = pr.cursorPosition\n      warn query[ col - 20 ... col ] + CND.reverse query[ col ... col + 20 ]\n      @analyze_with_highlightjs query\n      continue\n    for t in pr.query\n      echo xrpr t\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_sql_highlight = ->\n  { highlight } = require 'sql-highlight'\n  for query in queries\n    highlighted = highlight query\n    echo highlighted\n  echo highlight SQL\"\"\"select x from t;\"\"\"\n  echo highlight SQL\"\"\"select 'x' from t;\"\"\"\n  echo highlight SQL\"\"\"select \"x\" from t;\"\"\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_rhombic_antlr = ->\n  { antlr  } = require 'rhombic'\n  parser_cfg =\n    doubleQuotedIdentifier: true\n  lineage_cfg =\n    positionalRefsEnabled: true\n  # q = antlr.parse \"SELECT * FROM abc join users as u;\", parser_cfg\n  # for query in [ queries[ queries.length - 1 ], ]\n  # for query in [ SQL\"\"\"select d as \"d1\" from a as a1;\"\"\", ]\n  # for query in [ SQL\"\"\"select d + e + f( x ) as \"d1\" from a as a1;\"\"\", ]\n  # for query in [ SQL\"\"\"select * from a left join b where k > 1 order by m limit 1;\"\"\", ]\n  for query in [ SQL\"SELECT 42 as a;\", ]\n    X.banner query\n    q = antlr.parse query, parser_cfg\n    # debug type_of q\n    debug GUY.props.keys q\n    info q.getUsedTables()\n    show_antler_tree q.tree\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nshow_antler_tree = ( tree ) ->\n  objects_by_type = _show_antler_tree { children: [ tree, ], }, 0, {}\n  types           = ( k for k of objects_by_type ).sort()\n  # for type in types\n  #   d     = objects_by_type[ type ]\n  #   keys  = ( k for k of d when not k.startsWith '_' ).sort()\n  #   urge type, keys\n    # debug '^5600-1^', Object.keys d._start\n    # debug '^5600-2^', Object.keys d._start?.source\n    # debug '^5600-3^', type_of d._start?.source?.source\n    # debug '^5600-4^', d._start?.start\n    # debug '^5600-5^', d._start?.stop\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nantler_types =\n  terminal: null\n  select_clause: ( node ) ->\n    terminal = node.children[ 0 ]\n    unless ( type = type_of_antler_node terminal ) is 'terminal'\n      throw new Error \"unexpected type #{rpr type}\"\n    unless ( /^select$/i  ).test ( text = terminal.text )\n      throw new Error \"unexpected terminal #{rpr text}\"\n    debug '^4353^', { type, text, subs: [], }\n\n#-----------------------------------------------------------------------------------------------------------\ntype_of_antler_node = ( node ) ->\n  R = node.constructor.name\n  R = R.replace /(Node|Context)$/, ''\n  R = to_snake_case R\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n_show_antler_tree = ( tree, level, R ) ->\n  dent  = '  '.repeat level\n  # debug '^4656-1^' + dent + ( type_of tree ) + ' ' + rpr tree.text\n  for child in tree.children\n    type        = type_of_antler_node child\n    R[ type ]  ?= child\n    type_entry  = antler_types[ type ]\n    switch type_entry_type = type_of type_entry\n      when 'undefined'\n        warn '^4656-1^' + dent + type + ' ' + ( CND.gold rpr child.text )\n      when 'null'\n        whisper '^4656-1^' + dent + type + ' ' + ( rpr child.text )\n      when 'function'\n        info '^4656-1^' + dent + type + ' ' + ( CND.gold rpr child.text )\n        debug '^4656-1^', type_entry child\n      else\n        warn CND.reverse '^4656-1^' + dent + type + ' ' + ( CND.gold rpr child.text ) + \" unknown type entry type #{rpr type_entry_type}\"\n    if child.children?\n      _show_antler_tree child, level + 1, R\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_rhombic_chevrotain = ->\n  rhombic = ( require 'rhombic' ).default\n  for query in queries\n    X.banner query\n    try\n      debug '^345-1', ( rpr rhombic.parse query )[ .. 100 ]\n    catch error\n      warn error.message\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # @demo_trash()\n  # @demo_field_matrix()\n  # @demo_analyze()\n  # @demo_sql_tokenizer()\n  # Syntax = require 'syntax'\n  # debug s = new Syntax { language: 'sql', }\n  # info s.plaintext \"select * from t;\"\n  # help s.html()\n  # @demo_highlightjs()\n  # @demo_pgsql_parser()\n  # @demo_pg_query_native()\n  # @demo_sql_highlight()\n  @demo_rhombic_antlr()\n  # @demo_rhombic_chevrotain()\n\n\n#   #---------------------------------------------------------------------------------------------------------\n#   _walk_statements_from_path: ( sql_path ) ->\n#     ### Given a path, iterate over SQL statements which are signalled by semicolons (`;`) that appear outside\n#     of literals and comments (and the end of input). ###\n#     ### thx to https://stackabuse.com/reading-a-file-line-by-line-in-node-js/ ###\n#     ### thx to https://github.com/nacholibre/node-readlines ###\n#     readlines       = new ( require 'n-readlines' ) sql_path\n#     #.......................................................................................................\n#     cfg           =\n#       regExp: ( require 'mysql-tokenizer/lib/regexp-sql92' )\n#     tokenize      = ( require 'mysql-tokenizer' ) cfg\n#     collector     = null\n#     # stream        = FS.createReadStream sql_path\n#     #.......................................................................................................\n#     flush = ->\n#       R         = collector.join ''\n#       collector = null\n#       return R\n#     #.......................................................................................................\n#     while ( line = readlines.next() ) isnt false\n#       for token, cur_idx in tokenize line + '\\n'\n#         if token is ';'\n#           ( collector ?= [] ).push token\n#           yield flush()\n#           continue\n#         # if token.startsWith '--'\n#         #   continue\n#         ( collector ?= [] ).push token\n#     #.......................................................................................................\n#     yield flush() if collector?\n#     return null\n\n"
  ]
}