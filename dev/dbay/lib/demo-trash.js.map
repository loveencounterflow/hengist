{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-trash.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require '../../../apps/guy'\n# { HDML }                  = require '../../../apps/hdml'\nH                         = require '../../../lib/helpers'\n{ lets\n  freeze }                = GUY.lft\n{ to_width }              = require 'to-width'\n{ DBay }                  = require '../../../apps/dbay'\n{ SQL }                   = DBay\n{ Sql }                   = require '../../../apps/dbay/lib/sql'\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nshow_overview = ( db ) ->\n  info '#############################################################################'\n  H.tabulate \"dbay_tables\",                   db SQL\"select * from dbay_tables\"\n  H.tabulate \"dbay_unique_fields\",            db SQL\"select * from dbay_unique_fields\"\n  # H.tabulate \"dbay_fields_1\",                 db SQL\"select * from dbay_fields_1\"\n  H.tabulate \"dbay_fields\",                   db SQL\"select * from dbay_fields\"\n  H.tabulate \"dbay_foreign_key_clauses_1\",    db SQL\"select * from dbay_foreign_key_clauses_1\"\n  H.tabulate \"dbay_foreign_key_clauses_2\",    db SQL\"select * from dbay_foreign_key_clauses_2\"\n  # H.tabulate \"dbay_foreign_key_clauses_3\",    db SQL\"select * from dbay_foreign_key_clauses_3\"\n  H.tabulate \"dbay_foreign_key_clauses\",      db SQL\"select * from dbay_foreign_key_clauses\"\n  # H.tabulate \"dbay_primary_key_clauses_1\",    db SQL\"select * from dbay_primary_key_clauses_1\"\n  H.tabulate \"dbay_primary_key_clauses\",      db SQL\"select * from dbay_primary_key_clauses\"\n  # H.tabulate \"dbay_field_clauses_1\",          db SQL\"select * from dbay_field_clauses_1\"\n  H.tabulate \"dbay_field_clauses\",            db SQL\"select * from dbay_field_clauses\"\n  H.tabulate \"dbay_create_table_clauses\",     db SQL\"select * from dbay_create_table_clauses\"\n  # H.tabulate \"dbay_create_table_statements_1\", db SQL\"select * from dbay_create_table_statements_1\"\n  # H.tabulate \"dbay_create_table_statements_2\", db SQL\"select * from dbay_create_table_statements_2\"\n  # H.tabulate \"dbay_create_table_statements_3\", db SQL\"select * from dbay_create_table_statements_3\"\n  # H.tabulate \"dbay_create_table_statements_4\", db SQL\"select * from dbay_create_table_statements_4\"\n  H.tabulate \"dbay_create_table_statements\",  db SQL\"select * from dbay_create_table_statements\"\n  # H.tabulate \"dbay_create_table_statements\",  db SQL\"\"\"\n  #   select\n  #       lnr,\n  #       tail,\n  #       substring( txt, 1, 100 ) as txt\n  #     from dbay_create_table_statements;\"\"\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_trash_empty_db = ( cfg ) ->\n  { DBay }        = require '../../../apps/dbay'\n  do =>\n    db = new DBay()\n    db.create_stdlib()\n    db.setv '_use_dot_cmds', true\n    db.create_trashlib()\n    db.create_stdlib()\n    show_overview db\n  do =>\n    db = new DBay()\n    # db.\n    # urge '^2334^', db.trash_to_sql()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_trash = ( cfg ) ->\n  { DBay }        = require '../../../apps/dbay'\n  { Mrg }         = require '../../../apps/dbay-mirage'\n  path            = PATH.resolve __dirname, '../../../assets/dbay/demo-html-parsing.sqlite'\n  help \"^43587^ using DB at #{path}\"\n  db              = new DBay { path, }\n  mrg             = new Mrg { db, }\n  do =>\n    db.create_stdlib()\n    db.setv '_use_dot_cmds', true\n    db.create_trashlib()\n    db.create_stdlib()\n    show_overview db\n  do =>\n    # urge '^2334^', db.trash_to_sql()\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # @demo_two_kinds_of_foreign_keys()\n  @demo_trash_empty_db()\n  # @demo_trash()\n\n\n\n\n"
  ]
}