{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/udf.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/UDFS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\non_process_exit           = require 'exit-hook'\nsleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\nSQL                       = String.raw\njr                        = JSON.stringify\njp                        = JSON.parse\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: window functions etc.\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dbay }          = require H.dbay_path\n  schema            = 'main'\n  { template_path\n    work_path }     = await H.procure_db { size: 'nnt', ref: 'fn', }\n  debug { template_path, work_path, }\n  db                = new Dbay { path: work_path, schema, }\n  numbers           = db.all_first_values SQL\"select n from nnt order by n;\"\n  # console.table db.list db.walk_objects { schema, }\n  #.........................................................................................................\n  await do =>\n    ### single-valued function ###\n    db.create_function name: 'square', deterministic: true, varargs: false, call: ( n ) -> n ** 2\n    matcher = ( ( n * n ) for n in numbers )\n    result  = db.all_rows SQL\"select *, square( n ) as square from nnt order by square;\"\n    console.table result\n    result  = ( row.square for row in result )\n    T?.eq result, matcher\n  #.........................................................................................................\n  await do =>\n    ### aggregate function ###\n    db.create_aggregate_function\n      name:           'product'\n      start:          -> null\n      step:           ( total, element ) -> debug '^4476^', { total, element, }; ( total ? 1 ) * element\n      # inverse:        ( total, dropped ) -> total.pop(); total\n      # result:         ( total ) -> total\n    # matcher = ( ( n * n ) for n in numbers )\n    #.......................................................................................................\n    do =>\n      result  = db.all_rows SQL\"select product( n ) as product from nnt where n != 0;\"\n      console.table result\n      matcher = [ 5122922112, ]\n      result  = ( row.product for row in result )\n      T?.eq result, matcher\n    #.......................................................................................................\n    do =>\n      result  = db.all_rows SQL\"select product( n ) as product from nnt where n > 100;\"\n      console.table result\n      matcher = [ null, ]\n      result  = ( row.product for row in result )\n      T?.eq result, matcher\n    #.......................................................................................................\n    do =>\n      try\n        db.query SQL\"select product( n ) over () as product from nnt;\"\n      catch error\n        T?.eq error.code, 'SQLITE_ERROR'\n        T?.eq error.name, 'SqliteError'\n        T?.eq error.message, 'product() may not be used as a window function'\n      unless error?\n        T.fail \"expected error\"\n      # console.table result\n      # matcher = [ null, ]\n      # result  = ( row.product for row in result )\n      # T?.eq result, matcher\n  #.........................................................................................................\n  await do =>\n    ### window function ###\n    db.create_window_function\n      name:           'array_agg'\n      varargs:        false\n      deterministic:  true\n      start:          -> [] # must be new object for each partition, therefore use function, not constant\n      step:           ( total, element ) -> total.push element; total\n      inverse:        ( total, dropped ) -> total.pop(); total\n      result:         ( total ) -> jr total\n    #.......................................................................................................\n    do =>\n      result  = db.all_rows SQL\"select array_agg( t ) as names from nnt;\"\n      console.table result\n      matcher = [ '[\"naught\",\"one\",\"one point five\",\"two\",\"two point three\",\"three\",\"three point one\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"eleven\",\"twelve\"]' ]\n      result  = ( row.names for row in result )\n      T?.eq result, matcher\n    #.......................................................................................................\n    do =>\n      result  = db.all_rows SQL\"\"\"\n        select distinct\n            array_agg( t ) over w as names\n          from nnt\n          window w as (\n            partition by substring( t, 1, 1 )\n            order by t\n            range between unbounded preceding and unbounded following\n            );\"\"\"\n      console.table result\n      matcher = [ '[\"eight\",\"eleven\"]', '[\"five\",\"four\"]', '[\"naught\",\"nine\"]', '[\"one\",\"one point five\"]', '[\"seven\",\"six\"]', '[\"ten\",\"three\",\"three point one\",\"twelve\",\"two\",\"two point three\"]' ]\n      result  = ( row.names for row in result )\n      debug '^878^', result\n      T?.eq result, matcher\n  #.........................................................................................................\n  await do =>\n    ### table-valued function ###\n    db.create_table_function\n      name:         're_matches'\n      columns:      [ 'match', 'capture', ]\n      parameters:   [ 'text', 'pattern', ]\n      rows: ( text, pattern ) ->\n        regex = new RegExp pattern, 'g'\n        while ( match = regex.exec text )?\n          yield [ match[ 0 ], match[ 1 ], ]\n        return null\n    await do =>\n      result  = db.all_rows SQL\"\"\"\n        select\n            *\n          from\n            nnt,\n            re_matches( t, '^.*([aeiou].e).*$' ) as rx\n          order by rx.match;\"\"\"\n      console.table result\n      matcher = [ 'eleven:eve', 'five:ive', 'nine:ine', 'one:one', 'one point five:ive', 'seven:eve', 'three point one:one' ]\n      result  = ( \"#{row.t}:#{row.capture}\" for row in result )\n      debug '^984^', result\n      T?.eq result, matcher\n    await do =>\n      result  = db.all_rows SQL\"\"\"\n        select\n            *\n          from\n            nnt,\n            re_matches( t, 'o' ) as rx\n          order by t;\"\"\"\n      console.table result\n      matcher = [ 'four', 'one', 'one point five', 'one point five', 'three point one', 'three point one', 'two', 'two point three', 'two point three' ]\n      result  = ( row.t for row in result )\n      debug '^984^', result\n      T?.eq result, matcher\n  #.........................................................................................................\n  await do =>\n    ### virtual table ###\n    FS = require 'fs'\n    db.create_virtual_table\n      name:   'file_contents'\n      create: ( filename, P... ) ->\n        urge '^46456^', { filename, P, }\n        R =\n          columns: [ 'path', 'lnr', 'line', ],\n          rows: ->\n            path  = PATH.resolve PATH.join __dirname, '../../../assets/icql', filename\n            lines = ( FS.readFileSync path, { encoding: 'utf-8', } ).split '\\n'\n            for line, line_idx in lines\n              yield { path, lnr: line_idx + 1, line, }\n            return null\n        return R\n    db.execute SQL\"\"\"\n      create virtual table contents_of_wbftsv\n        using file_contents( ncrglyphwbf.tsv, any stuff goes here, and more here );\"\"\"\n    result  = db.all_rows SQL\"select * from contents_of_wbftsv where lnr between 10 and 14 order by 1, 2, 3;\"\n    console.table result\n    matcher = [ 'u-cjk-xa-3417\\t㐗\\t<1213355>', '', 'u-cjk-xa-34ab\\t㒫\\t<121135>', 'u-cjk-xa-342a\\t㐪\\t<415234>', 'u-cjk-xa-342b\\t㐫\\t<413452>' ]\n    result  = ( row.line for row in result )\n    debug '^984^', result\n    T?.eq result, matcher\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: User-Defined Window Function\" ] = ( T, done ) ->\n  ### see https://github.com/nalgeon/sqlean/blob/main/docs/vsv.md ###\n  # T.halt_on_error()\n  { Dbay }          = require H.dbay_path\n  schema            = 'main'\n  db                = new Dbay()\n  # db.load_extension PATH.resolve PATH.join __dirname, '../../../assets/sqlite-extensions/json1.so'\n  # db.sqlt.unsafeMode true\n  { I, L, V, }      = db.sql\n  #.........................................................................................................\n  db.create_window_function\n    name:           'udf_json_array_agg'\n    varargs:        false\n    deterministic:  true\n    start:          -> [] # must be new object for each partition, therefore use function, not constant\n    step:           ( total, element ) -> total.push element; total\n    inverse:        ( total, dropped ) -> total.pop(); total\n    result:         ( total ) -> jr total\n  #.........................................................................................................\n  await do =>\n    #.......................................................................................................\n    db.execute SQL\"\"\"\n      create view multiples as select distinct\n          n                                               as n,\n          udf_json_array_agg( multiple ) over w           as multiples\n        from multiples_idx\n        window w as ( partition by n order by idx range between unbounded preceding and unbounded following )\n        order by n;\n      -- ...................................................................................................\n      create table multiples_idx (\n        n         integer not null,\n        idx       integer not null,\n        multiple  integer not null,\n        primary key ( n, idx ) );\n      create index multiples_idx_idx_idx on multiples_idx ( idx );\n      create index multiples_idx_multiple_idx on multiples_idx ( multiple );\n      -- ...................................................................................................\n      create trigger multiple_instead_insert instead of insert on multiples begin\n        insert into multiples_idx( n, idx, multiple )\n          select new.n, j.key, j.value from json_each( new.multiples ) as j;\n        end;\n      -- ...................................................................................................\n      create trigger multiple_instead_delete instead of delete on multiples begin\n        delete from multiples_idx where n = old.n;\n        end;\n      -- ...................................................................................................\n      create trigger multiple_instead_update instead of update on multiples begin\n        delete from multiples_idx where n = old.n;\n        insert into multiples_idx( n, idx, multiple )\n          select new.n, j.key, j.value from json_each( new.multiples ) as j;\n        end;\n      \"\"\"\n    #.......................................................................................................\n    for n in [ 1 .. 3 ]\n      multiples = jr ( n * idx for idx in [ 0 .. 9 ] )\n      db SQL\"\"\"insert into multiples ( n, multiples ) values ( $n, $multiples )\"\"\", { n, multiples, }\n    db SQL\"insert into multiples ( n, multiples ) values ( 5, '[0,5,10,15,20]' );\"\n    #.......................................................................................................\n    console.table db.all_rows SQL\"select * from multiples_idx;\"\n    console.table db.all_rows SQL\"select * from multiples;\"\n    T?.eq ( db.all_rows SQL\"select * from multiples_idx order by n, idx;\" ), [ { n: 1, idx: 0, multiple: 0 }, { n: 1, idx: 1, multiple: 1 }, { n: 1, idx: 2, multiple: 2 }, { n: 1, idx: 3, multiple: 3 }, { n: 1, idx: 4, multiple: 4 }, { n: 1, idx: 5, multiple: 5 }, { n: 1, idx: 6, multiple: 6 }, { n: 1, idx: 7, multiple: 7 }, { n: 1, idx: 8, multiple: 8 }, { n: 1, idx: 9, multiple: 9 }, { n: 2, idx: 0, multiple: 0 }, { n: 2, idx: 1, multiple: 2 }, { n: 2, idx: 2, multiple: 4 }, { n: 2, idx: 3, multiple: 6 }, { n: 2, idx: 4, multiple: 8 }, { n: 2, idx: 5, multiple: 10 }, { n: 2, idx: 6, multiple: 12 }, { n: 2, idx: 7, multiple: 14 }, { n: 2, idx: 8, multiple: 16 }, { n: 2, idx: 9, multiple: 18 }, { n: 3, idx: 0, multiple: 0 }, { n: 3, idx: 1, multiple: 3 }, { n: 3, idx: 2, multiple: 6 }, { n: 3, idx: 3, multiple: 9 }, { n: 3, idx: 4, multiple: 12 }, { n: 3, idx: 5, multiple: 15 }, { n: 3, idx: 6, multiple: 18 }, { n: 3, idx: 7, multiple: 21 }, { n: 3, idx: 8, multiple: 24 }, { n: 3, idx: 9, multiple: 27 }, { n: 5, idx: 0, multiple: 0 }, { n: 5, idx: 1, multiple: 5 }, { n: 5, idx: 2, multiple: 10 }, { n: 5, idx: 3, multiple: 15 }, { n: 5, idx: 4, multiple: 20 } ]\n    T?.eq ( db.all_rows SQL\"select * from multiples order by n;\" ), [ { n: 1, multiples: '[0,1,2,3,4,5,6,7,8,9]' }, { n: 2, multiples: '[0,2,4,6,8,10,12,14,16,18]' }, { n: 3, multiples: '[0,3,6,9,12,15,18,21,24,27]' }, { n: 5, multiples: '[0,5,10,15,20]' } ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: view with UDF\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dbay }          = require H.dbay_path\n  schema            = 'main'\n  { template_path\n    work_path }     = await H.procure_db { size: 'nnt', ref: 'fnsquareview', }\n  db                = new Dbay { path: work_path, schema, }\n  numbers           = db.all_first_values SQL\"select n from nnt order by n;\"\n  #.........................................................................................................\n  db.create_function name: 'square', deterministic: true, varargs: false, call: ( n ) -> n ** 2\n  db.execute SQL\"create view squares as select n, square( n ) as square from nnt order by n;\"\n  matcher = [ 0, 1, 2.25, 4, 5.289999999999999, 9, 9.610000000000001, 16, 25, 36, 49, 64, 81, 100, 121, 144 ]\n  result  = db.all_rows SQL\"select * from squares;\"\n  console.table result\n  result  = ( row.square for row in result )\n  debug '^984^', result\n  T?.eq result, matcher\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: typing\" ] = ( T, done ) ->\n  # T.halt_on_error()\n  { Dbay }          = require H.dbay_path\n  schema            = 'main'\n  { template_path\n    work_path }     = await H.procure_db { size: 'small', ref: 'typing', }\n  db                = new Dbay { path: work_path, schema, }\n  #.........................................................................................................\n  ### In 'simple' cases, there's meaningful type information present: ###\n  statement = db.prepare SQL\"select stamped as d from main;\"\n  iterator  = statement.iterate []\n  [ iterator..., ] ### NOTE: consume iterator to free connection ###\n  d         = ( [ d.name, d.type, ] for d in statement.columns() )\n  T?.eq d, [ [ 'd', 'boolean' ] ]\n  #.........................................................................................................\n  ### But as soon as any operation is done on data: that typing information vanishes: ###\n  statement = db.prepare SQL\"select ( stamped and not stamped ) as d from main;\"\n  iterator  = statement.iterate []\n  [ iterator..., ] ### NOTE: consume iterator to free connection ###\n  d         = ( [ d.name, d.type, ] for d in statement.columns() )\n  T?.eq d, [ [ 'd', null ] ]\n  #.........................................................................................................\n  ### We can even explicitly cast results but that does not bring back typing: ###\n  statement = db.prepare SQL\"select cast( stamped and not stamped as boolean ) as d from main;\"\n  iterator  = statement.iterate []\n  [ iterator..., ] ### NOTE: consume iterator to free connection ###\n  d         = ( [ d.name, d.type, ] for d in statement.columns() )\n  T?.eq d, [ [ 'd', null ] ]\n  #.........................................................................................................\n  ### We can enforce better type checking in SQLite by using `check` constraints and UDFs: ###\n  as_boolean = ( d ) -> if d then 1 else 0\n  db.create_function name: 'validate_integer', call: ( n ) ->\n    debug '^534^', \"validating #{rpr n}\"\n    return as_boolean types.isa.integer n\n  db.execute SQL\"create table x( n integer, check ( validate_integer( n ) ) );\"\n  db.execute SQL\"insert into x ( n ) values ( 42 );\"; T?.ok true\n  try db.execute SQL\"insert into x ( n ) values ( 1.23 );\" catch error then T?.ok error.message is \"CHECK constraint failed: validate_integer( n )\"\n  try db.execute SQL\"insert into x ( n ) values ( 'foobar' );\" catch error then T?.ok error.message is \"CHECK constraint failed: validate_integer( n )\"\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: concurrent UDFs 2\" ] = ( T, done ) ->\n  prefix            = 'dcat_'\n  schema            = 'main'\n  { Dbay }          = require H.dbay_path\n  { template_path\n    work_path }     = await H.procure_db { size: 'small', ref: 'fnc', }\n  debug { template_path, work_path, }\n  db                = new Dbay { path: work_path, }\n  # db2              = new Dbay(); db2.open  { schema, path: work_path, }\n  #.........................................................................................................\n  select_sql        = SQL\"\"\"\n    select\n        #{db.sql.L schema} as schema,\n        type,\n        name,\n        tbl_name,\n        rootpage\n      from sqlite_schema\n      order by rootpage;\"\"\"\n  #.........................................................................................................\n  db.create_table_function\n    name:           prefix + 'reltrigs'\n    columns:        [ 'schema', 'type', 'name', 'tbl_name', 'rootpage', ]\n    parameters:     []\n    varargs:        false\n    deterministic:  false\n    rows:           -> yield from db.query select_sql\n  #.........................................................................................................\n  show_db_objects = ->\n    console.table db.all_rows SQL\"\"\"\n      select\n          'main' as schema,\n          type,\n          name,\n          tbl_name,\n          rootpage\n        from sqlite_schema\n        order by rootpage;\"\"\"\n  #.........................................................................................................\n  count = 0\n  for row1 from db.query SQL\"select * from sqlite_schema where type in ( 'table', 'view' );\"\n    for row2 from db.query SQL\"select * from pragma_table_info( $name )\", { name: row1.name, }\n      count++\n      break if count > 5\n      info '^875-1^', row2\n  #.........................................................................................................\n  count = 0\n  db.with_unsafe_mode ->\n    for row1 from db.query SQL\"select * from sqlite_schema where type in ( 'table', 'view' );\"\n      for row2 from db.query SQL\"select * from pragma_table_info( $name )\", { name: row1.name, }\n        count++\n        break if count > 5\n        info '^875-1^', row2\n        db.execute \"create table if not exists foo ( n text );\"\n  #.........................................................................................................\n  try\n    for row from db.query SQL\"select * from dcat_reltrigs;\"\n      info '^875-2^', row\n  catch error\n    warn CND.reverse '^875-3^', error.message\n    T?.eq error.message, \"This database connection is busy executing a query\"\n  #.........................................................................................................\n  try\n    db.with_unsafe_mode ->\n      for row from db.query SQL\"select * from dcat_reltrigs;\"\n        info '^875-4^', row\n  catch error\n    warn CND.reverse '^875-5^', error.message\n    T?.eq error.message, \"This database connection is busy executing a query\"\n  #.........................................................................................................\n  show_db_objects()\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: with_transaction() 1\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dbay }          = require H.dbay_path\n  #.........................................................................................................\n  do =>\n    db = new Dbay()\n    T?.throws /expected between 1 and 2 arguments, got 0/, -> db.with_transaction()\n  #.........................................................................................................\n  do =>\n    db   = new Dbay()\n    # db.open { schema: 'main', }\n    create_table = ( cfg ) ->\n      debug '^435^', { cfg, }\n      db.with_transaction ->\n        help '^70^', \"creating a table with\", cfg\n        db.execute SQL\"create table foo ( bar integer );\"\n        throw new Error \"oops\" if cfg.throw_error\n    #.......................................................................................................\n    error = null\n    try create_table { throw_error: true, } catch error\n      T?.ok error.message is \"oops\"\n      T?.eq ( db.all_rows \"select * from sqlite_schema;\" ), []\n    T.fail \"expected error but none was thrown\" unless error?\n    #.......................................................................................................\n    create_table { throw_error: false, }\n    T?.eq ( db.all_first_values \"select name from sqlite_schema;\" ), [ 'foo', ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: with_transaction() 2\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dbay }          = require H.dbay_path\n  #.........................................................................................................\n  do =>\n    db = new Dbay()\n    T?.throws /expected between 1 and 2 arguments, got 0/, -> db.with_transaction()\n  #.........................................................................................................\n  do =>\n    error = null\n    db   = new Dbay()\n    try\n      db.with_transaction ->\n        help '^70^', \"creating a table\"\n        db.execute SQL\"create table foo ( bar integer );\"\n        throw new Error \"oops\"\n    catch error\n      warn error.message\n      T?.ok error.message is \"oops\"\n    T.fail \"expected error but none was thrown\" unless error?\n    T?.eq ( db.all_rows \"select * from sqlite_schema;\" ), []\n    #.......................................................................................................\n    db.with_transaction ->\n      help '^70^', \"creating a table\"\n      db.execute SQL\"create table foo ( bar integer );\"\n    #.......................................................................................................\n    T?.eq ( db.all_first_values SQL\"select name from sqlite_schema;\" ), [ 'foo', ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: with_unsafe_mode()\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { Dbay }          = require H.dbay_path\n  #.........................................................................................................\n  do =>\n    db = new Dbay()\n    T?.throws /not a valid function/, -> db.with_unsafe_mode()\n  #.........................................................................................................\n  do =>\n    error = null\n    db   = new Dbay()\n    # db.open { schema: 'main', }\n    db.execute SQL\"create table foo ( n integer, is_new boolean default false );\"\n    for n in [ 10 .. 19 ]\n      db.run SQL\"insert into foo ( n ) values ( $n );\", { n, }\n    db.with_unsafe_mode ->\n      for row from db.query SQL\"select * from foo where not is_new;\"\n        db.run SQL\"insert into foo ( n, is_new ) values ( $n, $is_new );\", { n: row.n * 3, is_new: 1, }\n      db.execute SQL\"update foo set is_new = false where is_new;\"\n    #.......................................................................................................\n    console.table rows = db.all_rows SQL\"select * from foo order by n;\"\n    result = ( d.n for d in rows )\n    T?.eq result, [ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57 ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: with_foreign_keys_deferred(), preliminaries\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dbay }          = require H.dbay_path\n  list_table_a      = ( db ) -> ( row.n for row from db.query SQL\"select n from a;\" )\n  list_table_b      = ( db ) -> ( row.n for row from db.query SQL\"select n from b;\" )\n  #---------------------------------------------------------------------------------------------------------\n  do =>\n    urge '^50-1^', \"begin transaction, then defer fks\"\n    db                = new Dbay()\n    { sqlt, }         = db\n    db.execute SQL\"\"\"\n      create table a ( n integer not null primary key references b ( n ) );\n      create table b ( n integer not null primary key references a ( n ) );\n      \"\"\"\n    #.......................................................................................................\n    ### ensure DB transaction, fk state ###\n    info '^50-2^', sqlt.inTransaction;                   T?.eq sqlt.inTransaction, false\n    info '^50-3^', db.get_foreign_keys_state();        T?.eq db.get_foreign_keys_state(), true\n    info '^50-4^', sqlt.pragma SQL\"defer_foreign_keys;\"; T?.eq ( sqlt.pragma SQL\"defer_foreign_keys;\" ), [ { defer_foreign_keys: 0 } ]\n    #.......................................................................................................\n    ### begin transaction, then  start deferred fks ###\n    debug '^50-5^'; db.execute SQL\"begin transaction;\"\n    debug '^50-6^'; sqlt.pragma SQL\"defer_foreign_keys=1;\"\n    #.......................................................................................................\n    ### ensure DB transaction, fk state ###\n    info '^50-7^', sqlt.inTransaction;                   T?.eq sqlt.inTransaction, true\n    info '^50-8^', db.get_foreign_keys_state();        T?.eq db.get_foreign_keys_state(), true\n    info '^50-9^', sqlt.pragma SQL\"defer_foreign_keys;\"; T?.eq ( sqlt.pragma SQL\"defer_foreign_keys;\" ), [ { defer_foreign_keys: 1 } ]\n    #.......................................................................................................\n    ### insert partly bogus values, check ###\n    debug '^50-10^'; db.execute SQL\"insert into a ( n ) values ( 1 );\"\n    debug '^50-11^'; db.execute SQL\"insert into b ( n ) values ( 1 );\"\n    debug '^50-12^'; db.execute SQL\"insert into a ( n ) values ( 2 );\"\n    # debug '^50-13^'; db.execute SQL\"insert into b ( n ) values ( 2 );\"\n    error = null\n    debug '^50-14^', list_table_a db; T?.eq ( list_table_a db ), [ 1, 2, ]\n    debug '^50-15^', list_table_b db; T?.eq ( list_table_b db ), [ 1, ]\n    #.......................................................................................................\n    ### try to commit, rollback on error ###\n    try\n      debug '^50-16^'; db.execute SQL\"commit;\"\n    catch error\n      debug '^50-17^', sqlt.inTransaction; T?.eq sqlt.inTransaction, true\n      warn error.message\n      T?.eq error.message, \"FOREIGN KEY constraint failed\"\n      debug '^50-18^'; db.execute SQL\"rollback;\"\n      debug '^50-19^', sqlt.inTransaction; T?.eq sqlt.inTransaction, false\n    finally\n      debug '^50-20^', sqlt.inTransaction; T?.eq sqlt.inTransaction, false\n    #.......................................................................................................\n    ### Ensure error happened, tables empty as before ###\n    T.fail '^50-21^', \"expected error, got none\" unless error?\n    debug '^50-22^', list_table_a db; T?.eq ( list_table_a db ), []\n    debug '^50-23^', list_table_b db; T?.eq ( list_table_b db ), []\n    #.......................................................................................................\n    ### ensure DB transaction, fk state ###\n    info '^50-24^', sqlt.inTransaction;                   T?.eq sqlt.inTransaction, false\n    info '^50-25^', db.get_foreign_keys_state();        T?.eq db.get_foreign_keys_state(), true\n    info '^50-26^', sqlt.pragma SQL\"defer_foreign_keys;\"; T?.eq ( sqlt.pragma SQL\"defer_foreign_keys;\" ), [ { defer_foreign_keys: 0 } ]\n  #---------------------------------------------------------------------------------------------------------\n  do =>\n    urge '^50-27^', \"defer fks, then begin transaction\"\n    db                = new Dbay()\n    { sqlt, }         = db\n    db.execute SQL\"\"\"\n      create table a ( n integer not null primary key references b ( n ) );\n      create table b ( n integer not null primary key references a ( n ) );\n      \"\"\"\n    #.......................................................................................................\n    ### ensure DB transaction, fk state ###\n    info '^50-28^', sqlt.inTransaction;                   T?.eq sqlt.inTransaction, false\n    info '^50-29^', db.get_foreign_keys_state();        T?.eq db.get_foreign_keys_state(), true\n    info '^50-30^', sqlt.pragma SQL\"defer_foreign_keys;\"; T?.eq ( sqlt.pragma SQL\"defer_foreign_keys;\" ), [ { defer_foreign_keys: 0 } ]\n    #.......................................................................................................\n    ### begin transaction, then  start deferred fks ###\n    debug '^50-31^'; sqlt.pragma SQL\"defer_foreign_keys=1;\"\n    debug '^50-32^'; db.execute SQL\"begin transaction;\"\n    #.......................................................................................................\n    ### ensure DB transaction, fk state ###\n    info '^50-33^', sqlt.inTransaction;                   T?.eq sqlt.inTransaction, true\n    info '^50-34^', db.get_foreign_keys_state();        T?.eq db.get_foreign_keys_state(), true\n    info '^50-35^', sqlt.pragma SQL\"defer_foreign_keys;\"; T?.eq ( sqlt.pragma SQL\"defer_foreign_keys;\" ), [ { defer_foreign_keys: 1 } ]\n    #.......................................................................................................\n    ### insert partly bogus values, check ###\n    debug '^50-36^'; db.execute SQL\"insert into a ( n ) values ( 1 );\"\n    debug '^50-37^'; db.execute SQL\"insert into b ( n ) values ( 1 );\"\n    debug '^50-38^'; db.execute SQL\"insert into a ( n ) values ( 2 );\"\n    # debug '^50-39^'; db.execute SQL\"insert into b ( n ) values ( 2 );\"\n    error = null\n    debug '^50-40^', list_table_a db; T?.eq ( list_table_a db ), [ 1, 2, ]\n    debug '^50-41^', list_table_b db; T?.eq ( list_table_b db ), [ 1, ]\n    #.......................................................................................................\n    ### try to commit, rollback on error ###\n    try\n      debug '^50-42^'; db.execute SQL\"commit;\"\n    catch error\n      debug '^50-43^', sqlt.inTransaction; T?.eq sqlt.inTransaction, true\n      warn error.message\n      T?.eq error.message, \"FOREIGN KEY constraint failed\"\n      debug '^50-44^'; db.execute SQL\"rollback;\"\n      debug '^50-45^', sqlt.inTransaction; T?.eq sqlt.inTransaction, false\n      # throw error ### in production, re-throw error after rollback ###\n    finally\n      debug '^50-46^', sqlt.inTransaction; T?.eq sqlt.inTransaction, false\n    #.......................................................................................................\n    ### Ensure error happened, tables empty as before ###\n    T.fail '^50-47^', \"expected error, got none\" unless error?\n    debug '^50-48^', list_table_a db; T?.eq ( list_table_a db ), []\n    debug '^50-49^', list_table_b db; T?.eq ( list_table_b db ), []\n    #.......................................................................................................\n    ### ensure DB transaction, fk state ###\n    info '^50-50^', sqlt.inTransaction;                   T?.eq sqlt.inTransaction, false\n    info '^50-51^', db.get_foreign_keys_state();        T?.eq db.get_foreign_keys_state(), true\n    info '^50-52^', sqlt.pragma SQL\"defer_foreign_keys;\"; T?.eq ( sqlt.pragma SQL\"defer_foreign_keys;\" ), [ { defer_foreign_keys: 0 } ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBA: with_foreign_keys_deferred(), ensure checks\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Dbay }          = require H.dbay_path\n  #.........................................................................................................\n  list_table_a      = ( db ) -> ( row.n for row from db.query SQL\"select n from a;\" )\n  #.........................................................................................................\n  error             = null\n  db                = new Dbay()\n  # db.open { schema: 'main', }\n  db.execute SQL\"\"\"\n    create table a ( n integer not null primary key references b ( n ) );\n    create table b ( n integer not null primary key references a ( n ) );\n    \"\"\"\n  #.........................................................................................................\n  T?.eq CND.truth db.sqlt.inTransaction, false\n  T?.eq db.get_foreign_keys_state(), true\n  db.with_foreign_keys_deferred ->\n    T?.eq CND.truth db.sqlt.inTransaction, true\n    T?.eq db.get_foreign_keys_state(), true\n    db.execute SQL\"insert into a ( n ) values ( 1 );\"\n    db.execute SQL\"insert into a ( n ) values ( 2 );\"\n    db.execute SQL\"insert into a ( n ) values ( 3 );\"\n    db.execute SQL\"insert into b ( n ) values ( 1 );\"\n    db.execute SQL\"insert into b ( n ) values ( 2 );\"\n    db.execute SQL\"insert into b ( n ) values ( 3 );\"\n    # db.execute SQL\"insert into a ( n ) values ( 4 );\"\n    console.table db.all_rows SQL\"select * from a;\"\n    console.table db.all_rows SQL\"select * from b;\"\n  T?.eq CND.truth db.sqlt.inTransaction, false\n  #.........................................................................................................\n  T?.eq db.get_foreign_keys_state(), true\n  T?.eq ( db.pragma SQL\"foreign_key_check;\" ), []\n  T?.eq ( db.pragma SQL\"integrity_check;\"   ), [ { integrity_check: 'ok' } ]\n  #.........................................................................................................\n  debug '^778-1^', ( prv_values = list_table_a db )\n  T?.eq ( nxt_values = list_table_a db ), prv_values; prv_values = nxt_values\n  debug '^778-2^'\n  T?.eq db.sqlt.inTransaction, false\n  try\n    db.with_foreign_keys_deferred ->\n      T?.eq db.sqlt.inTransaction, true\n      db.execute SQL\"insert into a ( n ) values ( 101 );\"\n  catch error\n    warn error.message\n    T?.eq error.message, \"FOREIGN KEY constraint failed\"\n  T?.eq db.sqlt.inTransaction, false\n  debug '^778-4^', list_table_a db\n  T?.eq ( nxt_values = list_table_a db ), prv_values; prv_values = nxt_values\n  #.........................................................................................................\n  debug '^778-5^'\n  try\n    db.with_transaction ->\n      db.with_foreign_keys_deferred ->\n        db.execute SQL\"insert into a ( n ) values ( 102 );\"\n  catch error\n    warn error.message\n    T?.eq error.message, \"^db-functions@901^ (Dba_no_deferred_fks_in_tx) cannot defer foreign keys inside a transaction\"\n  debug '^778-6^', list_table_a db\n  T?.eq ( nxt_values = list_table_a db ), prv_values; prv_values = nxt_values\n  #.........................................................................................................\n  debug '^778-7^'\n  try\n    db.with_foreign_keys_deferred ->\n      db.with_transaction ->\n        db.execute SQL\"insert into a ( n ) values ( 103 );\"\n  catch error\n    warn error.message\n    T?.eq error.message, \"^db-functions@901^ (Dba_no_nested_transactions) cannot start a transaction within a transaction\"\n  debug '^778-8^', list_table_a db\n  T?.eq ( nxt_values = list_table_a db ), prv_values; prv_values = nxt_values\n  #.........................................................................................................\n  T?.eq ( db.pragma SQL\"foreign_key_check;\" ), []\n  T?.eq ( db.pragma SQL\"integrity_check;\"   ), [ { integrity_check: 'ok' } ]\n  #.........................................................................................................\n  console.table rows = db.all_rows SQL\"\"\"\n    select\n        a.n as a_n,\n        b.n as b_n\n      from a\n      left join b using ( n )\n      order by n;\"\"\"\n  debug '^400^', rows\n  result = ( [ d.a_n, d.b_n ] for d in rows )\n  T?.eq result, [ [ 1, 1 ], [ 2, 2 ], [ 3, 3 ] ]\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # test @, { timeout: 10e3, }\n  # test @[ \"DBA: window functions etc.\" ]\n  # test @[ \"DBA: User-Defined Window Function\" ]\n  # test @[ \"DBA: view with UDF\" ]\n  # test @[ \"DBA: typing\" ]\n  test @[ \"DBA: concurrent UDFs 2\" ]\n  # @[ \"DBA: with_transaction() 1\" ]()\n  # @[ \"DBA: with_transaction() 2\" ]()\n  # @[ \"DBA: with_unsafe_mode()\" ]()\n  # @[ \"DBA: with_foreign_keys_deferred(), preliminaries\" ]()\n  # @[ \"DBA: with_foreign_keys_deferred(), ensure checks\" ]()"
  ]
}