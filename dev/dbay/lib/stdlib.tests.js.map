{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/stdlib.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/STDLIB'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nr                         = String.raw\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY stdlib functions\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  #.........................................................................................................\n  db = new DBay()\n  db.create_stdlib()\n  #.........................................................................................................\n  test_and_show = ( probe, matcher ) =>\n    urge '^341-1', probe\n    info '^341-2', result = db.all_rows probe\n    T?.eq result, matcher\n    return null\n  #.........................................................................................................\n  test_and_show ( SQL\"select std_str_reverse( 'abc一無所有𫠣' ) as x;\" ), [ { x: '𫠣有所無一cba' } ]\n  test_and_show ( SQL\"select std_str_join( '-', '1', '1', '1', '1', '1', '1'  ) as x;\" ), [ { \"x\": '1-1-1-1-1-1' } ]\n  test_and_show ( SQL\"select * from std_str_split_first( 'foo/bar/baz', '/' ) as x;\" ), [ { prefix: 'foo', suffix: 'bar/baz' } ]\n  test_and_show ( SQL\"select * from std_str_split( '/foo/bar/baz', '/' ) as x;\" ), [ { lnr: 1, rnr: 4, part: '' }, { lnr: 2, rnr: 3, part: 'foo' }, { lnr: 3, rnr: 2, part: 'bar' }, { lnr: 4, rnr: 1, part: 'baz' } ]\n  test_and_show ( SQL\"select * from std_str_split( '/foo/bar/baz', '/', true ) as x;\" ), [ { lnr: 1, rnr: 3, part: 'foo' }, { lnr: 2, rnr: 2, part: 'bar' }, { lnr: 3, rnr: 1, part: 'baz' } ]\n  test_and_show ( SQL\"select * from std_str_split_re( 'unanimous', '[aeiou]' ) as x;\" ), [ { lnr: 1, rnr: 6, part: '' }, { lnr: 2, rnr: 5, part: 'n' }, { lnr: 3, rnr: 4, part: 'n' }, { lnr: 4, rnr: 3, part: 'm' }, { lnr: 5, rnr: 2, part: '' }, { lnr: 6, rnr: 1, part: 's' } ]\n  test_and_show ( SQL\"select * from std_str_split_re( 'unanimous', '[aeiou]', 'i', true ) as x;\" ), [ { lnr: 1, rnr: 4, part: 'n' }, { lnr: 2, rnr: 3, part: 'n' }, { lnr: 3, rnr: 2, part: 'm' }, { lnr: 4, rnr: 1, part: 's' } ]\n  test_and_show ( SQL\"select * from std_str_split_re( 'unanimous', '[aeiou]', '', true ) as x;\" ), [ { lnr: 1, rnr: 4, part: 'n' }, { lnr: 2, rnr: 3, part: 'n' }, { lnr: 3, rnr: 2, part: 'm' }, { lnr: 4, rnr: 1, part: 's' } ]\n  # test_and_show ( SQL\"select * from std_str_split_re( 'unanimous', '[aeiou]', null, true ) as x;\" ), [ { part: 'n' }, { part: 'n' }, { part: 'm' }, { part: 's' } ]\n  test_and_show ( SQL\"select * from std_str_split_re( 'unanimous', '([AEIOU])', 'i' ) as x;\" ), [ { lnr: 1, rnr: 11, part: '' }, { lnr: 2, rnr: 10, part: 'u' }, { lnr: 3, rnr: 9, part: 'n' }, { lnr: 4, rnr: 8, part: 'a' }, { lnr: 5, rnr: 7, part: 'n' }, { lnr: 6, rnr: 6, part: 'i' }, { lnr: 7, rnr: 5, part: 'm' }, { lnr: 8, rnr: 4, part: 'o' }, { lnr: 9, rnr: 3, part: '' }, { lnr: 10, rnr: 2, part: 'u' }, { lnr: 11, rnr: 1, part: 's' } ]\n  test_and_show ( SQL\"select * from std_str_split_re( 'unanimous', '([AEIOU])', 'i', true ) as x;\" ), [ { lnr: 1, rnr: 9, part: 'u' }, { lnr: 2, rnr: 8, part: 'n' }, { lnr: 3, rnr: 7, part: 'a' }, { lnr: 4, rnr: 6, part: 'n' }, { lnr: 5, rnr: 5, part: 'i' }, { lnr: 6, rnr: 4, part: 'm' }, { lnr: 7, rnr: 3, part: 'o' }, { lnr: 8, rnr: 2, part: 'u' }, { lnr: 9, rnr: 1, part: 's' } ]\n  test_and_show ( SQL\"select * from std_generate_series( 1, 3, 1 ) as x;\" ), [ { value: 1 }, { value: 2 }, { value: 3 } ]\n  test_and_show ( SQL\"select * from std_re_matches( 'abcdefghijklmnopqrstuvqxyz', '[aeiou](..)' ) as x;\" ), [ { match: 'abc', capture: 'bc' }, { match: 'efg', capture: 'fg' }, { match: 'ijk', capture: 'jk' }, { match: 'opq', capture: 'pq' }, { match: 'uvq', capture: 'vq' } ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY std_str_split_re()\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  #.........................................................................................................\n  db = new DBay()\n  db.create_stdlib()\n  #.........................................................................................................\n  db SQL\"create table entries ( entry text not null );\"\n  db SQL\"insert into entries values ( 'some nice words' );\"\n  db SQL\"insert into entries values ( 'can help a lot' );\"\n  # info word for word from db.first_values SQL\"\"\"\n  info row for row in result = db.all_rows SQL\"\"\"\n    select\n        r1.entry  as entry,\n        r2.lnr    as lnr,\n        r2.rnr    as rnr,\n        r2.part   as word\n      from\n        entries as r1,\n        std_str_split_re( r1.entry, '\\s' ) as r2;\"\"\"\n  T?.eq result, [\n    { entry: 'some nice words', lnr: 1, rnr: 3, word: 'some' }\n    { entry: 'some nice words', lnr: 2, rnr: 2, word: 'nice' }\n    { entry: 'some nice words', lnr: 3, rnr: 1, word: 'words' }\n    { entry: 'can help a lot', lnr: 1, rnr: 4, word: 'can' }\n    { entry: 'can help a lot', lnr: 2, rnr: 3, word: 'help' }\n    { entry: 'can help a lot', lnr: 3, rnr: 2, word: 'a' }\n    { entry: 'can help a lot', lnr: 4, rnr: 1, word: 'lot' }\n    ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY std_getv()\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  { Tbl, }          = require '../../../apps/icql-dba-tabulate'\n  #.........................................................................................................\n  db                = new DBay()\n  db.create_stdlib()\n  dtab              = new Tbl { db, }\n  #.........................................................................................................\n  do =>\n    error = null\n    try db.all_rows SQL\"select std_getv( 'city' ) as city;\" catch error\n      warn CND.reverse error.message\n      T?.ok ( error.message.match /unknown variable 'city'/ )?\n    T?.ok error?\n  #.........................................................................................................\n  db.setv 'city',   'Hamburg'\n  db.setv 'x',      20\n  db.setv 'n',      123.4567890123456789\n  db.setv 'foo',    'bar'\n  db.setv 'baz',    true\n  db.setv 'sqrt2',  Math.sqrt 2\n  T?.eq db.variables.city, 'Hamburg'\n  #.........................................................................................................\n  echo rpr db.all_rows SQL\"select std_getv( 'city' ) as city;\"\n  T?.eq ( db.all_rows SQL\"select std_getv( 'city' )  as city;\"  ), [ { city: 'Hamburg',             }, ]\n  T?.eq ( db.all_rows SQL\"select std_getv( 'x' )     as x;\"     ), [ { x:     20,                   }, ]\n  T?.eq ( db.all_rows SQL\"select std_getv( 'n' )     as n;\"     ), [ { n:     123.4567890123456789, }, ]\n  T?.eq ( db.all_rows SQL\"select std_getv( 'foo' )   as foo;\"   ), [ { foo:   'bar',                }, ]\n  T?.eq ( db.all_rows SQL\"select std_getv( 'baz' )   as baz;\"   ), [ { baz:   1,                    }, ]\n  T?.eq ( db.all_rows SQL\"select std_getv( 'sqrt2' ) as sqrt2;\" ), [ { sqrt2: Math.sqrt 2,          }, ]\n  echo dtab._tabulate db SQL\"select * from std_variables order by name;\"\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY stdlib error throwing\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  #.........................................................................................................\n  db                = new DBay()\n  db.create_stdlib()\n  #.........................................................................................................\n  db.create_function\n    name:           'std_raise'\n    deterministic:  true\n    varargs:        false\n    call: ( message ) ->\n      throw new Error message\n  #.........................................................................................................\n  db.create_function\n    name:           'std_raise_json'\n    deterministic:  true\n    varargs:        false\n    call: ( facets_json ) ->\n      try facets = JSON.parse facets_json catch error\n        throw new Error \"not a valid argument for std_raise_json: #{rpr facets}\"\n      error = new Error facets.message ? \"(no error message given)\"\n      for k, v of facets\n        continue if k is 'message'\n        error[ k ] = v\n      throw error\n  #.........................................................................................................\n  db.create_function\n    name:           'std_assert',\n    deterministic:  true,\n    varargs:        false,\n    call:           ( test, message ) ->\n      if ( not test? ) or ( test is 0 )\n        throw new Error message\n      return test\n  #.........................................................................................................\n  do =>\n    error = null\n    try db.all_rows SQL\"select std_raise( '^foo@34^ an error has occurred' );\" catch error\n      help '^45678-1', CND.reverse error.message\n      T?.eq error.message, '^foo@34^ an error has occurred'\n    T?.ok error?\n  #.........................................................................................................\n  do =>\n    error = null\n    try db.all_rows SQL\"\"\"\n      select std_raise_json( '{\"ref\":\"^foo@34^\",\"message\":\"another error has occurred\"}' );\"\"\" catch error\n      help '^45678-2', CND.reverse error.ref\n      help '^45678-3', CND.reverse error.message\n      T?.eq error.ref,      '^foo@34^'\n      T?.eq error.message,  'another error has occurred'\n    T?.ok error?\n  #.........................................................................................................\n  do =>\n    error = null\n    db SQL\"\"\"\n      create table d ( x integer primary key );\n      insert into d values ( 42 );\"\"\"\n    T?.eq [ { some_value: 42 } ], db.all_rows SQL\"\"\"\n      select std_assert( 42, '^bar@567^ expected something else' ) as some_value;\"\"\"\n    T?.eq [ { some_value: 1 } ], db.all_rows SQL\"\"\"\n      select std_assert( 42 is not null, '^bar@567^ expected something else' ) as some_value;\"\"\"\n    try\n      debug '^1345^', db.all_rows SQL\"\"\"\n        select std_assert( 42 is null, '^bar@567^ expected something else' ) as some_value;\"\"\"\n    catch error\n      help '^45678-4', CND.reverse error.message\n      T?.eq error.message,  '^bar@567^ expected something else'\n    T?.ok error?\n  #.........................................................................................................\n  # db.all_rows SQL\"\"\"\n  #   select std_raise_json( '{\"ref\":\"^foo@34^\",\"message\":\"another error has occurred\"}' );\"\"\"\n  done?()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # test @, { timeout: 10e3, }\n  # @[ \"DBAY std_getv()\" ]()\n  # test @[ \"DBAY std_getv()\" ]\n  test @[ \"DBAY stdlib error throwing\" ]\n  # @[ \"DBAY stdlib error throwing\" ]()\n  # @[ \"DBAY stdlib functions\" ]()\n  # @[ \"DBAY std_str_split_re()\" ]()\n\n\n\n\n\n\n\n"
  ]
}