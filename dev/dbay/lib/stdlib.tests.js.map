{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/stdlib.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/STDLIB'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY stdlib functions\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  #.........................................................................................................\n  db = new DBay()\n  db.create_stdlib()\n  #.........................................................................................................\n  test_and_show = ( probe, matcher ) =>\n    urge '^341-1', probe\n    info '^341-2', result = db.all_rows probe\n    T?.eq result, matcher\n    return null\n  #.........................................................................................................\n  test_and_show ( SQL\"select std_str_reverse( 'abc一無所有𫠣' ) as x;\" ), [ { x: '𫠣有所無一cba' } ]\n  test_and_show ( SQL\"select std_str_join( '-', '1', '1', '1', '1', '1', '1'  ) as x;\" ), [ { \"x\": '1-1-1-1-1-1' } ]\n  test_and_show ( SQL\"select * from std_str_split_first( 'foo/bar/baz', '/' ) as x;\" ), [ { prefix: 'foo', suffix: 'bar/baz' } ]\n  test_and_show ( SQL\"select * from std_generate_series( 1, 3, 1 ) as x;\" ), [ { value: 1 }, { value: 2 }, { value: 3 } ]\n  test_and_show ( SQL\"select * from std_re_matches( 'abcdefghijklmnopqrstuvqxyz', '[aeiou](..)' ) as x;\" ), [ { match: 'abc', capture: 'bc' }, { match: 'efg', capture: 'fg' }, { match: 'ijk', capture: 'jk' }, { match: 'opq', capture: 'pq' }, { match: 'uvq', capture: 'vq' } ]\n  #.........................................................................................................\n  done?()\n\n\n\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  test @, { timeout: 10e3, }\n  # @[ \"DBAY stdlib functions\" ]()\n\n\n\n\n\n\n\n"
  ]
}