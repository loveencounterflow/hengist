{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/stdlib.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/STDLIB'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nr                         = String.raw\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY stdlib functions\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  #.........................................................................................................\n  db = new DBay()\n  db.create_stdlib()\n  #.........................................................................................................\n  test_and_show = ( probe, matcher ) =>\n    urge '^341-1', probe\n    info '^341-2', result = db.all_rows probe\n    T?.eq result, matcher\n    return null\n  #.........................................................................................................\n  test_and_show ( SQL\"select std_str_reverse( 'abc一無所有𫠣' ) as x;\" ), [ { x: '𫠣有所無一cba' } ]\n  test_and_show ( SQL\"select std_str_join( '-', '1', '1', '1', '1', '1', '1'  ) as x;\" ), [ { \"x\": '1-1-1-1-1-1' } ]\n  test_and_show ( SQL\"select * from std_str_split_first( 'foo/bar/baz', '/' ) as x;\" ), [ { prefix: 'foo', suffix: 'bar/baz' } ]\n  test_and_show ( SQL\"select * from std_str_split( '/foo/bar/baz', '/' ) as x;\" ), [ { lnr: 1, rnr: 4, part: '' }, { lnr: 2, rnr: 3, part: 'foo' }, { lnr: 3, rnr: 2, part: 'bar' }, { lnr: 4, rnr: 1, part: 'baz' } ]\n  test_and_show ( SQL\"select * from std_str_split( '/foo/bar/baz', '/', true ) as x;\" ), [ { lnr: 1, rnr: 3, part: 'foo' }, { lnr: 2, rnr: 2, part: 'bar' }, { lnr: 3, rnr: 1, part: 'baz' } ]\n  test_and_show ( SQL\"select * from std_str_split_re( 'unanimous', '[aeiou]' ) as x;\" ), [ { lnr: 1, rnr: 6, part: '' }, { lnr: 2, rnr: 5, part: 'n' }, { lnr: 3, rnr: 4, part: 'n' }, { lnr: 4, rnr: 3, part: 'm' }, { lnr: 5, rnr: 2, part: '' }, { lnr: 6, rnr: 1, part: 's' } ]\n  test_and_show ( SQL\"select * from std_str_split_re( 'unanimous', '[aeiou]', 'i', true ) as x;\" ), [ { lnr: 1, rnr: 4, part: 'n' }, { lnr: 2, rnr: 3, part: 'n' }, { lnr: 3, rnr: 2, part: 'm' }, { lnr: 4, rnr: 1, part: 's' } ]\n  test_and_show ( SQL\"select * from std_str_split_re( 'unanimous', '[aeiou]', '', true ) as x;\" ), [ { lnr: 1, rnr: 4, part: 'n' }, { lnr: 2, rnr: 3, part: 'n' }, { lnr: 3, rnr: 2, part: 'm' }, { lnr: 4, rnr: 1, part: 's' } ]\n  # test_and_show ( SQL\"select * from std_str_split_re( 'unanimous', '[aeiou]', null, true ) as x;\" ), [ { part: 'n' }, { part: 'n' }, { part: 'm' }, { part: 's' } ]\n  test_and_show ( SQL\"select * from std_str_split_re( 'unanimous', '([AEIOU])', 'i' ) as x;\" ), [ { lnr: 1, rnr: 11, part: '' }, { lnr: 2, rnr: 10, part: 'u' }, { lnr: 3, rnr: 9, part: 'n' }, { lnr: 4, rnr: 8, part: 'a' }, { lnr: 5, rnr: 7, part: 'n' }, { lnr: 6, rnr: 6, part: 'i' }, { lnr: 7, rnr: 5, part: 'm' }, { lnr: 8, rnr: 4, part: 'o' }, { lnr: 9, rnr: 3, part: '' }, { lnr: 10, rnr: 2, part: 'u' }, { lnr: 11, rnr: 1, part: 's' } ]\n  test_and_show ( SQL\"select * from std_str_split_re( 'unanimous', '([AEIOU])', 'i', true ) as x;\" ), [ { lnr: 1, rnr: 9, part: 'u' }, { lnr: 2, rnr: 8, part: 'n' }, { lnr: 3, rnr: 7, part: 'a' }, { lnr: 4, rnr: 6, part: 'n' }, { lnr: 5, rnr: 5, part: 'i' }, { lnr: 6, rnr: 4, part: 'm' }, { lnr: 7, rnr: 3, part: 'o' }, { lnr: 8, rnr: 2, part: 'u' }, { lnr: 9, rnr: 1, part: 's' } ]\n  test_and_show ( SQL\"select * from std_generate_series( 1, 3, 1 ) as x;\" ), [ { value: 1 }, { value: 2 }, { value: 3 } ]\n  test_and_show ( SQL\"select * from std_re_matches( 'abcdefghijklmnopqrstuvqxyz', '[aeiou](..)' ) as x;\" ), [ { match: 'abc', capture: 'bc' }, { match: 'efg', capture: 'fg' }, { match: 'ijk', capture: 'jk' }, { match: 'opq', capture: 'pq' }, { match: 'uvq', capture: 'vq' } ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY std_str_split_re()\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  #.........................................................................................................\n  db = new DBay()\n  db.create_stdlib()\n  #.........................................................................................................\n  db SQL\"create table entries ( entry text not null );\"\n  db SQL\"insert into entries values ( 'some nice words' );\"\n  db SQL\"insert into entries values ( 'can help a lot' );\"\n  # info word for word from db.first_values SQL\"\"\"\n  info row for row in result = db.all_rows SQL\"\"\"\n    select\n        r1.entry  as entry,\n        r2.lnr    as lnr,\n        r2.rnr    as rnr,\n        r2.part   as word\n      from\n        entries as r1,\n        std_str_split_re( r1.entry, '\\s' ) as r2;\"\"\"\n  T?.eq result, [\n    { entry: 'some nice words', lnr: 1, rnr: 3, word: 'some' }\n    { entry: 'some nice words', lnr: 2, rnr: 2, word: 'nice' }\n    { entry: 'some nice words', lnr: 3, rnr: 1, word: 'words' }\n    { entry: 'can help a lot', lnr: 1, rnr: 4, word: 'can' }\n    { entry: 'can help a lot', lnr: 2, rnr: 3, word: 'help' }\n    { entry: 'can help a lot', lnr: 3, rnr: 2, word: 'a' }\n    { entry: 'can help a lot', lnr: 4, rnr: 1, word: 'lot' }\n    ]\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  test @, { timeout: 10e3, }\n  # @[ \"DBAY stdlib functions\" ]()\n  # @[ \"DBAY std_str_split_re()\" ]()\n\n\n\n\n\n\n\n"
  ]
}