{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sqlx.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/CONSTRUCTION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nguy                       = require '../../../apps/guy'\nX                         = require '../../../lib/helpers'\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_sqlx_function = ( T, done ) ->\n  # T?.halt_on_error()\n  E                 = require '../../../apps/dbay/lib/errors'\n  { DBay }          = require H.dbay_path\n  { SQL  }          = DBay\n  { DBay }          = require H.dbay_path\n  db                = new DBay()\n  { Tbl, }          = require '../../../apps/icql-dba-tabulate'\n  dtab              = new Tbl { dba: db, }\n  #.........................................................................................................\n  class E.DBay_sqlx_error            extends E.DBay_error\n    constructor: ( ref, message )     -> super ref, message\n  #.........................................................................................................\n  db.definitions = {}\n  db.declare = ( sqlx ) ->\n    @types.validate.nonempty_text sqlx\n    parameters_re           = null\n    #.......................................................................................................\n    name_re                 = /^(?<name>@[^\\s^(]+)/y\n    unless ( match = sqlx.match name_re )?\n      throw new E.DBay_sqlx_error '^dbay/sqlx@1^', \"syntax error in #{rpr sqlx}\"\n    { name, }               = match.groups\n    #.......................................................................................................\n    if sqlx[ name_re.lastIndex ] is '('\n      parameters_re           = /\\(\\s*(?<parameters>[^)]*?)\\s*\\)\\s*=\\s*/y\n      parameters_re.lastIndex = name_re.lastIndex\n      unless ( match = sqlx.match parameters_re )?\n        throw new E.DBay_sqlx_error '^dbay/sqlx@2^', \"syntax error in #{rpr sqlx}\"\n      { parameters, }         = match.groups\n      parameters              = parameters.split /\\s*,\\s*/\n    else\n      ### extension for declaration, call w/out parentheses left for later ###\n      throw new E.DBay_sqlx_error '^dbay/sqlx@3^', \"syntax error: parentheses are obligatory but missing in #{rpr sqlx}\"\n      # parameters              = []\n    current_idx             = parameters_re?.lastIndex ? name_re.lastIndex\n    body                    = sqlx[ current_idx ... ].replace /\\s*;\\s*$/, ''\n    @definitions[ name ]    = { name, parameters, body, }\n  #.......................................................................................................\n    return null\n  #.........................................................................................................\n  db.resolve = ( sqlx ) ->\n    @types.validate.nonempty_text sqlx\n    return sqlx.replace /(?<name>@[^\\s^(]+)\\(\\s*(?<values>[^)]*?)\\s*\\)/g, ( P..., groups ) =>\n      { name, values, } = groups\n      values            = values.split /\\s*,\\s*/\n      unless ( definition = @definitions[ name ] )?\n        throw new E.DBay_sqlx_error '^dbay/sqlx@4^', \"unknown name #{rpr name}\"\n      unless ( call_arity = values.length ) is ( definition_arity = definition.parameters.length )\n        throw new E.DBay_sqlx_error '^dbay/sqlx@5^', \"expected #{definition_arity} arguments, got #{call_arity}\"\n      #.....................................................................................................\n      R = definition.body\n      for parameter, idx in definition.parameters\n        value = values[ idx ]\n        R = R.replace ///#{parameter}///g, value\n      return R\n  #.........................................................................................................\n  db ->\n    db.declare SQL\"\"\"@secret_power( @a, @b ) = power( @a, @b ) / @b;\"\"\"\n    sqlx  = SQL\"\"\"select @secret_power( 3, 2 );\"\"\"\n    sql   = db.resolve sqlx\n    help rpr sqlx\n    info rpr sql\n    echo dtab._tabulate db db.resolve sql\n  #.........................................................................................................\n  db ->\n    db.declare SQL\"\"\"@max( @a, @b ) = case when @a > @b then @a else @b end;\"\"\"\n    sqlx  = SQL\"\"\"select @max( 3, 2 ) as the_bigger_the_better;\"\"\"\n    sql   = db.resolve sqlx\n    help rpr sqlx\n    info rpr sql\n    echo dtab._tabulate db db.resolve sql\n  #.........................................................................................................\n  db ->\n    db.declare SQL\"\"\"@intnn() = integer not null;\"\"\"\n    sqlx  = SQL\"\"\"\n      create table numbers (\n        n @intnn() primary key );\"\"\"\n    sql   = db.resolve sqlx\n    help rpr sqlx\n    info rpr sql\n  # #.........................................................................................................\n  # db ->\n  #   db.declare SQL\"\"\"@intnn = integer not null;\"\"\"\n  #   sqlx  = SQL\"\"\"\n  #     create table numbers (\n  #       n @intnn primary key );\"\"\"\n  #   sql   = db.resolve sqlx\n  #   help rpr sqlx\n  #   info rpr sql\n  #.........................................................................................................\n  done?()\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  @dbay_sqlx_function()\n  # test @dbay_sqlx_function\n\n"
  ]
}