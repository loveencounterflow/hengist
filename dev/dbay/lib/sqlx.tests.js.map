{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sqlx.tests.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,SAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,UAAA,EAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,GAAA,EAAA,SAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;IAAA,kBAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,WAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC,EAdA;;;EAmBA,IAAA,GAA4B,OAAA,CAAQ,wBAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR,EApB5B;;;EAsBA,CAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,MADF,EAEE,OAFF,EAGE,QAHF,EAIE,gBAJF,CAAA,GAI4B,KAAK,CAAC,MAAN,CAAA,CAJ5B,EAxBA;;;EA8BA,CAAA,GAA4B,MAAM,CAAC;;EACnC,UAAA,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,+BAAR;;EAC5B,MAAA,GAA4B,CAAE,OAAA,CAAQ,MAAR,CAAF,CAAkB,CAAC;;EAC/C,CAAA,CAAE,GAAF,CAAA,GAA4B,OAAA,CAAQ,iCAAR,CAA5B;;EACA,IAAA,GAA4B,IAAI,GAAJ,CAAQ;IAAE,GAAA,EAAK;EAAP,CAAR,EAnC5B;;;EAqCA,SAAA,GAA4B,OAAA,CAAQ,4BAAR,EArC5B;;;EAyCM,CAAC,CAAC,kBAAR,MAAA,gBAAA,QAA2C,CAAC,CAAC,WAA7C;IACE,WAAa,CAAE,GAAF,EAAO,OAAP,CAAA;WAAwB,CAAM,GAAN,EAAW,OAAX;IAAxB;;EADf,EAzCA;;;EA8CM,YAAN,MAAA,UAAA,QAAwB,CAAE,OAAA,CAAQ,CAAC,CAAC,SAAV,CAAF,CAAuB,CAAC,KAAhD,CAAA;;IAGE,WAAa,CAAA,GAAE,CAAF,CAAA;WACX,CAAM,GAAA,CAAN;MACA,GAAG,CAAC,KAAK,CAAC,IAAV,CAAe,IAAf,EAAkB,oBAAlB,EAAwC,CAAA,CAAxC;MACA,GAAG,CAAC,KAAK,CAAC,IAAV,CAAe,IAAf,EAAkB,cAAlB,EAAwC,IAAxC;AACA,aAAO;IAJI,CADf;;;IAQE,OAAS,CAAE,IAAF,CAAA;AACX,UAAA,KAAA,EAAA,IAAA,EAAA,WAAA,EAAA,KAAA,EAAA,IAAA,EAAA,OAAA,EAAA,UAAA,EAAA,aAAA,EAAA;MAAI,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,aAAhB,CAA8B,IAA9B;MACA,aAAA,GAA0B,KAD9B;;MAGI,OAAA,GAA0B;MAC1B,IAAO,qCAAP;QACE,MAAM,IAAI,CAAC,CAAC,eAAN,CAAsB,eAAtB,EAAuC,CAAA,gBAAA,CAAA,CAAmB,GAAA,CAAI,IAAJ,CAAnB,CAAA,CAAvC,EADR;;MAEA,CAAA,CAAE,IAAF,CAAA,GAA0B,KAAK,CAAC,MAAhC,EANJ;;MAQI,IAAG,IAAI,CAAE,OAAO,CAAC,SAAV,CAAJ,KAA6B,GAAhC;QACE,aAAA,GAA0B;QAC1B,aAAa,CAAC,SAAd,GAA0B,OAAO,CAAC;QAClC,IAAO,2CAAP;UACE,MAAM,IAAI,CAAC,CAAC,eAAN,CAAsB,eAAtB,EAAuC,CAAA,gBAAA,CAAA,CAAmB,GAAA,CAAI,IAAJ,CAAnB,CAAA,CAAvC,EADR;;QAEA,CAAA,CAAE,UAAF,CAAA,GAA0B,KAAK,CAAC,MAAhC;QACA,UAAA,GAA0B,UAAU,CAAC,KAAX,CAAiB,SAAjB;QAC1B,IAAgC,MAAA,CAAO,UAAP,EAAmB,CAAE,EAAF,CAAnB,CAAhC;UAAA,UAAA,GAA0B,GAA1B;SAPF;OAAA,MAAA;;;QAWE,UAAA,GAA0B,GAX5B;OARJ;;MAqBI,WAAA,sFAAyD,OAAO,CAAC;MACjE,IAAA,GAA8B,IAAI,mBAAmB,CAAC,OAAxB,CAAgC,UAAhC,EAA4C,EAA5C;MAC9B,KAAA,GAA8B,UAAU,CAAC;MACzC,IAAC,CAAA,aAAD,CAAe,CAAE,IAAF,EAAQ,UAAR,EAAoB,KAApB,EAA2B,IAA3B,CAAf,EAxBJ;;AA0BI,aAAO;IA3BA,CARX;;;IAsCE,gBAAkB,CAAA,CAAA;AACpB,UAAA,CAAA,EAAA,IAAA,EAAA;MAAI,IAAY,+BAAZ;AAAA,eAAO,EAAP;;MACA,KAAA,GAAQ,CAAE,MAAM,CAAC,IAAP,CAAY,IAAC,CAAA,kBAAb,CAAF,CAAmC,CAAC,IAApC,CAAyC,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;QAC/C,CAAA,GAAI,CAAE,KAAK,CAAC,IAAN,CAAW,CAAX,CAAF,CAAgB,CAAC;QACrB,CAAA,GAAI,CAAE,KAAK,CAAC,IAAN,CAAW,CAAX,CAAF,CAAgB,CAAC;QACrB,IAAa,CAAA,GAAI,CAAjB;AAAA,iBAAO,CAAC,EAAR;;QACA,IAAa,CAAA,GAAI,CAAjB;AAAA,iBAAO,CAAC,EAAR;;AACA,eAAO;MALwC,CAAzC;MAMR,KAAA,GAAQ;;AAAE;QAAA,KAAA,uCAAA;;uBAAA,IAAC,CAAA,yBAAD,CAA2B,IAA3B;QAAA,CAAA;;mBAAF,CAAqD,CAAC,IAAtD,CAA2D,GAA3D;AACR,aAAO,IAAC,CAAA,YAAD,GAAgB,MAAA,CAAA,CAAA,kBAAA,CAAA,CAA6B,KAA7B,CAAA,sBAAA,CAAA,EAAsE,GAAtE;IATP,CAtCpB;;;;;IAoDE,yBAA2B,CAAE,OAAF,CAAA;aAAe,OAAO,CAAC,OAAR,CAAgB,qBAAhB,EAAuC,MAAvC;IAAf,CApD7B;;;IAuDE,aAAe,CAAE,GAAF,CAAA;MACb,IAAG,yCAAH;QACE,MAAM,IAAI,CAAC,CAAC,eAAN,CAAsB,eAAtB,EAAuC,CAAA,mBAAA,CAAA,CAAsB,GAAA,CAAI,GAAG,CAAC,IAAR,CAAtB,CAAA,CAAvC,EADR;;MAEA,IAAC,CAAA,YAAD,GAAkC;MAClC,IAAC,CAAA,kBAAkB,CAAE,GAAG,CAAC,IAAN,CAAnB,GAAkC;AAClC,aAAO;IALM,CAvDjB;;;IA+DE,OAAS,CAAE,IAAF,CAAA;AACX,UAAA,KAAA,EAAA,SAAA,EAAA;MAAI,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,aAAhB,CAA8B,IAA9B;MACA,UAAA,GAAc;MACd,KAAA,GAAc;AAEd,aAAA,IAAA;QACE,IAAS,KAAA,EAAA,GAAU,MAAO,0CAA1B;;AAAA,gBAAA;;QACA,SAAA,GAAY,UAAU,CAAC,OAAX,CAAmB,IAAC,CAAA,gBAAD,CAAA,CAAnB,EAAwC,CAAA,GAAE,QAAF,CAAA,GAAA;AAC1D,cAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,OAAA,EAAA,UAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA;kDADyE,KAAK,OAAO,oCACrF;;UACQ,CAAA,CAAE,IAAF,EACE,IADF,CAAA,GACY,MADZ,EADR;;UAIQ,IAAO,qDAAP;;YAEE,MAAM,IAAI,CAAC,CAAC,eAAN,CAAsB,eAAtB,EAAuC,CAAA,aAAA,CAAA,CAAgB,GAAA,CAAI,IAAJ,CAAhB,CAAA,CAAvC,EAFR;WAJR;;UAQQ,IAAG,IAAI,CAAC,UAAL,CAAgB,GAAhB,CAAH;YACE,OAAA,GAAc,UAAU,CAAC,cAAX,CAA0B,IAA1B,EAAgC,KAAhC,EAAuC,KAAvC,EAA8C,EAA9C,EACZ;cAAE,UAAA,EAAY,IAAd;cAAoB,UAAA,EAAY,WAAhC;cAA6C,UAAA,EAAY,CAAE,SAAF,EAAa,QAAb,EAAuB,SAAvB,EAAkC,OAAlC;YAAzD,CADY;YAEd,CAAE,MAAF,EACE,OADF,EAEE,KAFF,CAAA,GAEc;YACd,IAAA,GAAc,IAAI;YAClB,MAAA,GAAc,IAAC,CAAA,eAAD,CAAiB,OAAO,CAAC,KAAzB;YACd,UAAA,GAAc,MAAM,CAAC,OARvB;WAAA,MAAA;YAUE,UAAA,GAAc,EAVhB;WARR;;UAoBQ,IAAO,UAAA,KAAc,WAAW,CAAC,KAAjC;YACE,MAAM,IAAI,CAAC,CAAC,eAAN,CAAsB,eAAtB,EAAuC,CAAA,SAAA,CAAA,CAAY,WAAW,CAAC,KAAxB,CAAA,kBAAA,CAAA,CAAkD,UAAlD,CAAA,CAAvC,EADR;WApBR;;UAuBQ,CAAA,GAAI,WAAW,CAAC;AAChB;UAAA,KAAA,kDAAA;;YACE,KAAA,GAAQ,MAAM,CAAE,GAAF;YACd,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,MAAA,CAAA,CAAA,CAAA,CAAK,SAAL,CAAA,CAAA,EAAkB,GAAlB,CAAV,EAA+B,KAA/B;YACJ,KAAA,CAAM,QAAN,EAAgB,GAAA,CAAI,CAAA,GAAI,IAAR,CAAhB;UAHF;AAIA,iBAAO,CAAA,GAAI;QA7BuC,CAAxC;QA8BZ,IAAS,SAAA,KAAa,UAAtB;AAAA,gBAAA;;QACA,UAAA,GAAa;MAjCf,CAJJ;;AAuCI,aAAO;IAxCA,CA/DX;;;IA0GE,eAAiB,CAAE,IAAF,CAAA;AACnB,UAAA,CAAA,EAAA,OAAA,EAAA,UAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA;MAAI,IAAA,GAAU,IAAI,CAAC,IAAL,CAAA;MACV,MAAA,GAAU;MACV,CAAA,GAAU,GAFd;;MAII,OAAA,GAAU,SAAS,CAAC,QAAV,CAAmB,IAAnB;MACV,KAAA,yCAAA;QAAI,CAAE,IAAF,EAAQ,IAAR,EAAc,GAAd,EAAmB,MAAnB;QACF,MAAM,CAAC,IAAP,CAAY,CAAE,IAAF,EAAQ,IAAR,EAAc,GAAd,EAAmB,MAAnB,CAAZ;MADF,CALJ;;;MASI,KAAA,GAAc;MACd,UAAA,GAAc;QAAE;UAAE,KAAA,EAAO,IAAT;UAAe,IAAA,EAAM;QAArB,CAAF;;MACd,KAAA,0CAAA;;AACE,gBAAO,KAAK,CAAC,IAAb;AAAA,eACO,YADP;;YAGI,KAAA;AAFG;AADP,eAIO,aAJP;YAKI,KAAA;AADG;;AAJP,eAOO,OAPP;;YASI,IAAG,KAAA,KAAS,CAAZ;cACE,UAAU,CAAC,IAAX,CAAgB;gBAAE,KAAA,EAAO,KAAK,CAAC,MAAf;gBAAuB,IAAA,EAAM,KAAK,CAAC,MAAN,GAAe,KAAK,CAAC,IAAI,CAAC;cAAvD,CAAhB,EADF;;AAFG;AAPP;YAYI;AAZJ;MADF,CAXJ;;MA0BI,UAAU,CAAC,IAAX,CAAgB;QAAE,KAAA,EAAO,IAAI,CAAC,MAAd;QAAsB,IAAA,EAAM;MAA5B,CAAhB,EA1BJ;;MA4BI,KAAW,qGAAX;QACE,KAAA,GAAQ,UAAU,CAAE,GAAA,GAAM,CAAR,CAAW,CAAC;QAC9B,IAAA,GAAQ,UAAU,CAAE,GAAF,CAAW,CAAC;QAC9B,CAAC,CAAC,IAAF,CAAO,IAAI,mBAAkB,CAAC,IAAvB,CAAA,CAAP;MAHF;MAKA,IAAU,MAAA,CAAO,CAAP,EAAU,CAAE,EAAF,CAAV,CAAV;;QAAA,CAAA,GAAI,GAAJ;;AACA,aAAO;IAnCQ;;EA5GnB,EA9CA;;;EAgMA,IAAC,CAAA,kBAAD,GAAsB,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACtB,QAAA,GAAA,EAAA,KAAA,EAAA,EAAA;;IACE,CAAA,CAAE,GAAF,CAAA,GAAoB,SAApB;IACA,EAAA,GAAoB,IAAI,SAAJ,CAAA,EAFtB;;IAIE,KAAA,GAAQ,QAAA,CAAE,KAAF,EAAS,OAAT,CAAA;AACV,UAAA,KAAA,EAAA,GAAA,EAAA;AAAI;QACE,IAAA,GAAQ;QACR,GAAA,GAAQ,EAAE,CAAC,OAAH,CAAW,IAAX;QACR,IAAA,CAAK,GAAA,CAAI,IAAJ,CAAL;QACA,IAAA,CAAK,GAAA,CAAI,GAAJ,CAAL;2BACA,CAAC,CAAE,EAAH,CAAM,GAAN,EAAW,OAAX,WALF;OAMA,cAAA;QAAM;2BACJ,CAAC,CAAE,EAAH,CAAM,OAAN,EAAe,CAAA,CAAA,CAAG,KAAK,CAAC,OAAT,CAAA,EAAA,CAAA,CAAqB,GAAA,CAAI,KAAJ,CAArB,CAAA,CAAf,WADF;;IAPM,EAJV;;IAcE,EAAE,CAAC,OAAH,CAAW,GAAG,CAAA,+CAAA,CAAd;IACA,EAAE,CAAC,OAAH,CAAW,GAAG,CAAA,uDAAA,CAAd;IACA,EAAE,CAAC,OAAH,CAAW,GAAG,CAAA,+CAAA,CAAd;IACA,EAAE,CAAC,OAAH,CAAW,GAAG,CAAA,4BAAA,CAAd;IAEG,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,GAAA,EAAA;MAAI,IAAA,GAAQ,GAAG,CAAA,6BAAA;MACX,GAAA,GAAQ,GAAG,CAAA,yBAAA;aACX,KAAA,CAAM,IAAN,EAAY,GAAZ;IAHC,CAAA;IAKA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,GAAA,EAAA;MAAI,IAAA,GAAQ,GAAG,CAAA,6CAAA;MACX,GAAA,GAAQ,GAAG,CAAA,kEAAA;aACX,KAAA,CAAM,IAAN,EAAY,GAAZ;IAHC,CAAA;IAKA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,GAAA,EAAA;MAAI,IAAA,GAAQ,GAAG,CAAA,gCAAA;MACX,GAAA,GAAQ,GAAG,CAAA,uBAAA;aACX,KAAA,CAAM,IAAN,EAAY,GAAZ;IAHC,CAAA;IAKA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,GAAA,EAAA;MAAI,IAAA,GAAQ,GAAG,CAAA;2BAAA;MAGX,GAAA,GAAQ,GAAG,CAAA;mCAAA;aAGX,KAAA,CAAM,IAAN,EAAY,GAAZ;IAPC,CAAA;IASA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,GAAA,EAAA;MAAI,IAAA,GAAQ,GAAG,CAAA;yBAAA;MAGX,GAAA,GAAQ,GAAG,CAAA;mCAAA;aAGX,KAAA,CAAM,IAAN,EAAY,GAAZ;IAPC,CAAA;IASA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,GAAA,EAAA;MAAI,IAAA,GAAQ,GAAG,CAAA,4DAAA;MACX,GAAA,GAAQ,GAAG,CAAA,0CAAA;aACX,KAAA,CAAM,IAAN,EAAY,GAAZ;IAHC,CAAA;IAKA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,GAAA,EAAA;MAAI,IAAA,GAAQ,GAAG,CAAA,2CAAA;MACX,GAAA,GAAQ,GAAG,CAAA,yBAAA;aACX,KAAA,CAAM,IAAN,EAAY,GAAZ;IAHC,CAAA;IAKA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,GAAA,EAAA;MAAI,IAAA,GAAQ,GAAG,CAAA,2CAAA;MACX,GAAA,GAAQ,GAAG,CAAA,yBAAA;aACX,KAAA,CAAM,IAAN,EAAY,GAAZ;IAHC,CAAA;wCAKH;EApEoB,EAhMtB;;;EAuQA,IAAC,CAAA,wBAAD,GAA4B,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC5B,QAAA,GAAA,EAAA,KAAA,EAAA,EAAA;;IACE,CAAA,CAAE,GAAF,CAAA,GAAY,SAAZ;IACA,EAAA,GAAY,IAAI,SAAJ,CAAA;IACZ,KAAA,GAAY,QAAA,CAAE,KAAF,EAAS,OAAT,CAAA;AACd,UAAA;MAAI,MAAA,GAAS,EAAE,CAAC,eAAH,CAAmB,KAAnB;MACT,IAAA,CAAK,QAAL,EAAe,KAAf;MACA,IAAA,CAAK,QAAL,EAAe,MAAf;yBACA,CAAC,CAAE,EAAH,CAAM,MAAN,EAAc,OAAd;IAJU;IAKZ,KAAA,CAAM,GAAG,CAAA,MAAA,CAAT,EAA4C,CAAE,GAAF,EAAO,GAAP,CAA5C;IACA,KAAA,CAAM,GAAG,CAAA,cAAA,CAAT,EAA4C,CAAE,GAAF,EAAO,WAAP,CAA5C;IACA,KAAA,CAAM,GAAG,CAAA,0BAAA,CAAT,EAA4C,CAAE,GAAF,EAAO,uBAAP,CAA5C;IACA,KAAA,CAAM,GAAG,CAAA,sBAAA,CAAT,EAA4C,CAAE,GAAF,EAAO,GAAP,EAAY,gBAAZ,CAA5C;IACA,KAAA,CAAM,GAAG,YAAA,CAAT,EAA4C,EAA5C;wCACA;EAd0B,EAvQ5B;;;EAwRA,IAAC,CAAA,cAAD,GAAkB,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAClB,QAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA;IAAE,CAAA,CAAE,GAAF,CAAA,GAAoB,SAApB;IACA,KAAA,GAAoB,OAAA,CAAQ,4BAAR;AACpB;IAAA,KAAA,sCAAA;;MAAA,IAAA,CAAK,CAAL;IAAA;IACA,IAAA,GAAO,QAAA,CAAE,GAAF,CAAA;AACT,UAAA,OAAA,EAAA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA;MAAI,IAAA,CAAK,GAAA,CAAI,GAAJ,CAAL;AACA;QACE,OAAA,GAAU,KAAK,CAAC,QAAN,CAAe,GAAf,EADZ;OAEA,cAAA;QAAM;QACJ,IAAA,CAAK,SAAL,EAAgB,GAAG,CAAC,GAAG,CAAC,OAAR,CAAgB,GAAG,CAAC,KAAK,CAAC,IAAV,CAAe,KAAf,CAAhB,CAAhB;QACA,IAAA,CAAK,SAAL,EAAgB,GAAG,CAAC,GAAG,CAAC,OAAR,CAAgB,KAAK,CAAC,OAAtB,CAAhB;QACA,IAAA,CAAK,SAAL,EAAgB,GAAG,CAAC,GAAG,CAAC,OAAR,CAAgB,KAAK,CAAC,IAAtB,CAAhB;AACA,eAAO,KAJT;;MAKA,MAAA,GAAS;MACT,KAAA,2CAAA;QAAI,CAAE,IAAF,EAAQ,IAAR,EAAc,KAAd,EAAqB,IAArB;QACF,MAAM,CAAC,IAAP,CAAY,CAAE,IAAF,EAAQ,IAAR,EAAc,KAAd,EAAqB,IAArB,CAAZ;MADF,CATJ;;MAYI,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,MAAf,CAAL;AACA,aAAO;IAdF;IAeP,IAAA,CAAK,GAAG,CAAA,sBAAA,CAAR;IACA,IAAA,CAAK,GAAG,CAAA,EAAA,CAAR;IACA,IAAA,CAAK,GAAG,CAAA,+BAAA,CAAR;IACA,IAAA,CAAK,GAAG,CAAA,6BAAA,CAAR;IACA,IAAA,CAAK,GAAG,CAAA,eAAA,CAAR;IACA,IAAA,CAAK,GAAG,CAAA,yBAAA,CAAR;IACA,IAAA,CAAK,GAAG,CAAA,wBAAA,CAAR;wCAEA;EA3BgB,EAxRlB;;;EAuTA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA;aAChC,IAAA,CAAK,IAAL;IADgC,CAAA,IAAlC;;;EAvTA;;;;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DBAY/sqlx'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# X                         = require '../../../lib/helpers'\nr                         = String.raw\nnew_xregex                = require 'xregexp'\nE                         = require '../../../apps/dbay/lib/errors'\nequals                    = ( require 'util' ).isDeepStrictEqual\n{ Tbl, }                  = require '../../../apps/icql-dba-tabulate'\ndtab                      = new Tbl { dba: null, }\n# { SQL  }          = DBay_sqlx\nsql_lexer                 = require '../../../../dbay-sql-lexer'\n\n\n#===========================================================================================================\nclass E.DBay_sqlx_error            extends E.DBay_error\n  constructor: ( ref, message )     -> super ref, message\n\n\n#===========================================================================================================\nclass DBay_sqlx extends ( require H.dbay_path ).DBay\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( P... ) ->\n    super P...\n    GUY.props.hide @, '_sqlx_declarations', {}\n    GUY.props.hide @, '_sqlx_cmd_re',       null\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  declare: ( sqlx ) ->\n    @types.validate.nonempty_text sqlx\n    parameters_re           = null\n    #.......................................................................................................\n    name_re                 = /^(?<name>@[^\\s^(]+)/y\n    unless ( match = sqlx.match name_re )?\n      throw new E.DBay_sqlx_error '^dbay/sqlx@1^', \"syntax error in #{rpr sqlx}\"\n    { name, }               = match.groups\n    #.......................................................................................................\n    if sqlx[ name_re.lastIndex ] is '('\n      parameters_re           = /\\(\\s*(?<parameters>[^)]*?)\\s*\\)\\s*=\\s*/y\n      parameters_re.lastIndex = name_re.lastIndex\n      unless ( match = sqlx.match parameters_re )?\n        throw new E.DBay_sqlx_error '^dbay/sqlx@2^', \"syntax error in #{rpr sqlx}\"\n      { parameters, }         = match.groups\n      parameters              = parameters.split /\\s*,\\s*/\n      parameters              = [] if equals parameters, [ '', ]\n    else\n      ### extension for declaration, call w/out parentheses left for later ###\n      # throw new E.DBay_sqlx_error '^dbay/sqlx@3^', \"syntax error: parentheses are obligatory but missing in #{rpr sqlx}\"\n      parameters              = []\n    #.......................................................................................................\n    current_idx                 = parameters_re?.lastIndex ? name_re.lastIndex\n    body                        = sqlx[ current_idx ... ].replace /\\s*;\\s*$/, ''\n    arity                       = parameters.length\n    @_sqlx_declare { name, parameters, arity, body, }\n  #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _sqlx_get_cmd_re: ->\n    return R if ( R = @_sqlx_cmd_re )?\n    names = ( Object.keys @_sqlx_declarations ).sort ( a, b ) ->\n      a = ( Array.from a ).length\n      b = ( Array.from b ).length\n      return +1 if a > b\n      return -1 if a < b\n      return 0\n    names = ( @_escape_literal_for_regex name for name in names ).join '|'\n    return @_sqlx_cmd_re = /// (?<= \\W | ^ ) (?<name> #{names} ) (?= \\W | $ ) (?<tail> .* ) $ ///g\n\n  #---------------------------------------------------------------------------------------------------------\n  ### thx to https://stackoverflow.com/a/6969486/7568091 and\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping ###\n  _escape_literal_for_regex: ( literal ) -> literal.replace /[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'\n\n  #---------------------------------------------------------------------------------------------------------\n  _sqlx_declare: ( cfg ) ->\n    if @_sqlx_declarations[ cfg.name ]?\n      throw new E.DBay_sqlx_error '^dbay/sqlx@2^', \"can not re-declare #{rpr cfg.name}\"\n    @_sqlx_cmd_re                   = null\n    @_sqlx_declarations[ cfg.name ] = cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  resolve: ( sqlx ) ->\n    @types.validate.nonempty_text sqlx\n    sql_before  = sqlx\n    count       = 0\n    #.......................................................................................................\n    loop\n      break if count++ > 10_000 ### NOTE to avoid deadlock, just in case ###\n      sql_after = sql_before.replace @_sqlx_get_cmd_re(), ( _matches..., idx, _sqlx, groups ) =>\n        # debug '^546^', rpr sqlx[ idx ... idx + groups.name.length ]\n        { name\n          tail  } = groups\n        #...................................................................................................\n        unless ( declaration = @_sqlx_declarations[ name ] )?\n          ### NOTE should never happen as we always re-compile pattern from declaration keys ###\n          throw new E.DBay_sqlx_error '^dbay/sqlx@4^', \"unknown name #{rpr name}\"\n        #...................................................................................................\n        if tail.startsWith '('\n          matches     = new_xregex.matchRecursive tail, '\\\\(', '\\\\)', '', \\\n            { escapeChar: '\\\\', unbalanced: 'skip-lazy', valueNames: [ 'outside', 'before', 'between', 'after', ], }\n          [ before\n            between\n            after   ] = matches\n          tail        = tail[ after.end ... ]\n          values      = @_find_arguments between.value\n          call_arity  = values.length\n        else\n          call_arity  = 0\n        #...................................................................................................\n        unless call_arity is declaration.arity\n          throw new E.DBay_sqlx_error '^dbay/sqlx@5^', \"expected #{declaration.arity} argument(s), got #{call_arity}\"\n        #...................................................................................................\n        R = declaration.body\n        for parameter, idx in declaration.parameters\n          value = values[ idx ]\n          R = R.replace ///#{parameter}///g, value\n          debug '^43-1^', rpr R + tail\n        return R + tail\n      break if sql_after is sql_before\n      sql_before = sql_after\n    #.......................................................................................................\n    return sql_after\n\n  #---------------------------------------------------------------------------------------------------------\n  _find_arguments: ( sqlx ) ->\n    sqlx    = sqlx.trim()\n    tokens  = []\n    R       = []\n    #.......................................................................................................\n    _tokens = sql_lexer.tokenize sqlx\n    for [ type, text, lnr, offset, ] in _tokens\n      tokens.push { type, text, lnr, offset, }\n    #.......................................................................................................\n    # echo dtab._tabulate tokens\n    level       = 0\n    comma_idxs  = [ { start: null, stop: 0, }, ]\n    for token in tokens\n      switch token.type\n        when 'LEFT_PAREN'\n          # info \"bracket #{rpr token} (#{level})\"\n          level++\n        when 'RIGHT_PAREN'\n          level--\n          # info \"bracket #{rpr token} (#{level})\"\n        when 'COMMA'\n          # info \"comma #{rpr token} (#{level})\"\n          if level is 0\n            comma_idxs.push { start: token.offset, stop: token.offset + token.text.length, }\n        else\n          null\n          # warn \"skipping #{rpr token}\"\n    comma_idxs.push { start: sqlx.length, stop: null, }\n    #.......................................................................................................\n    for idx in [ 1 ... comma_idxs.length ]\n      start = comma_idxs[ idx - 1 ].stop\n      stop  = comma_idxs[ idx     ].start\n      R.push sqlx[ start ... stop ].trim()\n    #.......................................................................................................\n    R = [] if equals R, [ '', ]\n    return R\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_sqlx_function = ( T, done ) ->\n  # T?.halt_on_error()\n  { SQL  }          = DBay_sqlx\n  db                = new DBay_sqlx()\n  #.........................................................................................................\n  _test = ( probe, matcher ) ->\n    try\n      sqlx  = probe\n      sql   = db.resolve sqlx\n      help rpr sqlx\n      info rpr sql\n      T?.eq sql, matcher\n    catch error\n      T?.eq \"ERROR\", \"#{error.message}\\n#{rpr probe}\"\n  #.........................................................................................................\n  db.declare SQL\"\"\"@secret_power( @a, @b ) = power( @a, @b ) / @b;\"\"\"\n  db.declare SQL\"\"\"@max( @a, @b ) = case when @a > @b then @a else @b end;\"\"\"\n  db.declare SQL\"\"\"@concat( @first, @second ) = @first || @second;\"\"\"\n  db.declare SQL\"\"\"@intnn() = integer not null;\"\"\"\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @secret_power( 3, 2 );\"\"\"\n    sql   = SQL\"\"\"select power( 3, 2 ) / 2;\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @max( 3, 2 ) as the_bigger_the_better;\"\"\"\n    sql   = SQL\"\"\"select case when 3 > 2 then 3 else 2 end as the_bigger_the_better;\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( 'here', '\\\\)' );\"\"\"\n    sql   = SQL\"\"\"select 'here' || '\\\\)';\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"\n      create table numbers (\n        n @intnn() primary key );\"\"\"\n    sql   = SQL\"\"\"\n      create table numbers (\n        n integer not null primary key );\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"\n      create table numbers (\n        n @intnn primary key );\"\"\"\n    sql   = SQL\"\"\"\n      create table numbers (\n        n integer not null primary key );\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( 'a', 'b' ) as c1, @concat( 'c', 'd' ) as c2;\"\"\"\n    sql   = SQL\"\"\"select 'a' || 'b' as c1, 'c' || 'd' as c2;\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( 'a', @concat( 'c', 'd' ) );\"\"\"\n    sql   = SQL\"\"\"select 'a' || 'c' || 'd';\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( ',', @concat( ',', ',' ) );\"\"\"\n    sql   = SQL\"\"\"select ',' || ',' || ',';\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_sqlx_find_arguments = ( T, done ) ->\n  # T?.halt_on_error()\n  { SQL  }  = DBay_sqlx\n  db        = new DBay_sqlx()\n  _test     = ( probe, matcher ) ->\n    result = db._find_arguments probe\n    help '^43-1^', probe\n    urge '^43-1^', result\n    T?.eq result, matcher\n  _test SQL\"\"\" 3, 2 \"\"\",                      [ '3', '2', ]\n  _test SQL\"\"\" 3, f( 2, 4 ) \"\"\",              [ '3', 'f( 2, 4 )' ]\n  _test SQL\"\"\" 3, f( 2, @g( 4, 5, 6 ) ) \"\"\",  [ '3', 'f( 2, @g( 4, 5, 6 ) )' ]\n  _test SQL\"\"\" 3, 2, \"strange,name\" \"\"\",      [ '3', '2', '\"strange,name\"' ]\n  _test SQL\"\"\"           \"\"\",                 []\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_sql_lexer = ( T, done ) ->\n  { SQL  }          = DBay_sqlx\n  lexer             = require '../../../../dbay-sql-lexer'\n  info k for k in ( GUY.props.keys lexer ).sort()\n  show = ( sql ) ->\n    info rpr sql\n    try\n      _tokens = lexer.tokenize sql\n    catch error\n      warn '^35345^', GUY.trm.reverse GUY.props.keys error\n      warn '^35345^', GUY.trm.reverse error.message\n      warn '^35345^', GUY.trm.reverse error.name\n      return null\n    tokens = []\n    for [ type, text, start, stop, ] in _tokens\n      tokens.push { type, text, start, stop, }\n      # urge type, text, start, stop\n    echo dtab._tabulate tokens\n    return null\n  show SQL\"\"\"select * from my_table\"\"\"\n  show SQL\"\"\"42\"\"\"\n  show SQL\"\"\"( 'text', 'another''text', 42 )\"\"\"\n  show SQL\"\"\"( 'text', @f( 1, 2, 3 ), 42 )\"\"\"\n  show SQL\"\"\"SELECT 42 as c;\"\"\"\n  show SQL\"\"\"select 'helo', 'world''';\"\"\"\n  show SQL\"\"\"select 'helo', 'world'''\"\"\"\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n  # @dbay_sql_lexer()\n  # @dbay_sqlx_find_arguments()\n  # test @dbay_sqlx_find_arguments\n  # @dbay_sqlx_function()\n  # test @dbay_sqlx_function\n\n\n"
  ]
}