{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sqlx.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DBAY/sqlx'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# X                         = require '../../../lib/helpers'\nr                         = String.raw\nnew_xregex                = require 'xregexp'\n\n\n#===========================================================================================================\nclass DBay_sqlx extends ( require H.dbay_path ).DBay\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( P... ) ->\n    super P...\n    GUY.props.hide @, '_sqlx_declarations', {}\n    GUY.props.hide @, '_sqlx_cmd_re',       null\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  declare: ( sqlx ) ->\n    @types.validate.nonempty_text sqlx\n    parameters_re           = null\n    #.......................................................................................................\n    name_re                 = /^(?<name>@[^\\s^(]+)/y\n    unless ( match = sqlx.match name_re )?\n      throw new E.DBay_sqlx_error '^dbay/sqlx@1^', \"syntax error in #{rpr sqlx}\"\n    { name, }               = match.groups\n    #.......................................................................................................\n    if sqlx[ name_re.lastIndex ] is '('\n      parameters_re           = /\\(\\s*(?<parameters>[^)]*?)\\s*\\)\\s*=\\s*/y\n      parameters_re.lastIndex = name_re.lastIndex\n      unless ( match = sqlx.match parameters_re )?\n        throw new E.DBay_sqlx_error '^dbay/sqlx@2^', \"syntax error in #{rpr sqlx}\"\n      { parameters, }         = match.groups\n      parameters              = parameters.split /\\s*,\\s*/\n    else\n      ### extension for declaration, call w/out parentheses left for later ###\n      throw new E.DBay_sqlx_error '^dbay/sqlx@3^', \"syntax error: parentheses are obligatory but missing in #{rpr sqlx}\"\n      # parameters              = []\n    #.......................................................................................................\n    current_idx                 = parameters_re?.lastIndex ? name_re.lastIndex\n    body                        = sqlx[ current_idx ... ].replace /\\s*;\\s*$/, ''\n    @_sqlx_declare { name, parameters, body, }\n  #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _sqlx_get_cmd_re: ->\n    return R if ( R = @_sqlx_cmd_re )?\n    names = ( Object.keys @_sqlx_declarations ).sort ( a, b ) ->\n      a = ( Array.from a ).length\n      b = ( Array.from b ).length\n      return +1 if a > b\n      return -1 if a < b\n      return 0\n    names = ( @_escape_literal_for_regex name for name in names ).join '|'\n    return @_sqlx_cmd_re = /// (?<= \\W | ^ ) (?<name> #{names} ) (?= \\W | $ ) ///g\n\n  #---------------------------------------------------------------------------------------------------------\n  ### thx to https://stackoverflow.com/a/6969486/7568091 and\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping ###\n  _escape_literal_for_regex: ( literal ) -> literal.replace /[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'\n\n  #---------------------------------------------------------------------------------------------------------\n  _sqlx_declare: ( cfg ) ->\n    @_sqlx_cmd_re                   = null\n    @_sqlx_declarations[ cfg.name ] = cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  resolve: ( sqlx ) ->\n    @types.validate.nonempty_text sqlx\n    return sqlx.replace @_sqlx_get_cmd_re(), ( _matches..., idx, _sqlx, groups ) =>\n      # debug '^546^', rpr sqlx[ idx ... idx + groups.name.length ]\n      { name, } = groups\n      tail      = sqlx[ idx + name.length ... ]\n      #.....................................................................................................\n      unless ( definition = @_sqlx_declarations[ name ] )?\n        ### NOTE should never happen as we always re-compile pattern from declaration keys ###\n        throw new E.DBay_sqlx_error '^dbay/sqlx@4^', \"unknown name #{rpr name}\"\n      #.....................................................................................................\n      if tail.startsWith '('\n        debug '^87-4^', rpr tail\n        # debug '^87-4^', new_xregex.matchRecursive tail, '(?<!\\\\\\\\)\\x5c(', '(?<!\\\\\\\\)\\x5c)', 'g', { unbalanced: 'skip' }\n        # debug '^87-4^', try new_xregex.matchRecursive tail, '\\\\(', '\\\\)', 'g', { escapeChar: '\\\\', unbalanced: 'error' } catch e then warn GUY.trm.reverse e.message\n        # debug '^87-4^', new_xregex.matchRecursive tail, '\\\\(', '\\\\)', 'g', { escapeChar: '\\\\', unbalanced: 'skip' }\n        tail = \"foo ( bar ), ( baz \\\\) ), ( 1, 2, 3, )\"\n        matches = new_xregex.matchRecursive tail, '\\\\(', '\\\\)', '', \\\n          { escapeChar: '\\\\', unbalanced: 'skip-lazy', valueNames: [ 'outside', 'before', 'between', 'after', ], }\n        debug '^87-4^', match for match in matches when match.name is 'between'\n      else\n        call_arity = 0\n      # #.....................................................................................................\n      # unless ( call_arity = values.length ) is ( definition_arity = definition.parameters.length )\n      #   throw new E.DBay_sqlx_error '^dbay/sqlx@5^', \"expected #{definition_arity} arguments, got #{call_arity}\"\n      # #.....................................................................................................\n      # debug '^546^', groups\n      return '*'\n\n    return sqlx.replace /(?<name>@[^\\s^(]+)\\(\\s*(?<values>[^)]*?)\\s*\\)/g, ( P..., groups ) =>\n      { name, values, } = groups\n      values            = values.split /\\s*,\\s*/\n      unless ( definition = @_sqlx_declarations[ name ] )?\n        throw new E.DBay_sqlx_error '^dbay/sqlx@4^', \"unknown name #{rpr name}\"\n      unless ( call_arity = values.length ) is ( definition_arity = definition.parameters.length )\n        throw new E.DBay_sqlx_error '^dbay/sqlx@5^', \"expected #{definition_arity} arguments, got #{call_arity}\"\n      #.....................................................................................................\n      R = definition.body\n      for parameter, idx in definition.parameters\n        value = values[ idx ]\n        R = R.replace ///#{parameter}///g, value\n      return R\n\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_sqlx_function = ( T, done ) ->\n  # T?.halt_on_error()\n  E                 = require '../../../apps/dbay/lib/errors'\n  { SQL  }          = DBay_sqlx\n  db                = new DBay_sqlx()\n  { Tbl, }          = require '../../../apps/icql-dba-tabulate'\n  dtab              = new Tbl { dba: db, }\n  #.........................................................................................................\n  class E.DBay_sqlx_error            extends E.DBay_error\n    constructor: ( ref, message )     -> super ref, message\n  #.........................................................................................................\n  db ->\n    db.declare SQL\"\"\"@secret_power( @a, @b ) = power( @a, @b ) / @b;\"\"\"\n    sqlx  = SQL\"\"\"select @secret_power( 3, 2 );\"\"\"\n    sql   = db.resolve sqlx\n    help rpr sqlx\n    info rpr sql\n    # echo dtab._tabulate db db.resolve sql\n  #.........................................................................................................\n  db ->\n    db.declare SQL\"\"\"@max( @a, @b ) = case when @a > @b then @a else @b end;\"\"\"\n    sqlx  = SQL\"\"\"select @max( 3, 2 ) as the_bigger_the_better;\"\"\"\n    # debug '^87-1^', db._sqlx_get_cmd_re()\n    # debug '^87-1^', [ ( sqlx.matchAll db._sqlx_get_cmd_re() )..., ]\n    sql   = db.resolve sqlx\n    help rpr sqlx\n    info rpr sql\n    # echo dtab._tabulate db db.resolve sql\n  #.........................................................................................................\n  db ->\n    db.declare SQL\"\"\"@concat( @first, @second ) = @first || @second;\"\"\"\n    sqlx  = SQL\"\"\"select @concat( 'here', '\\\\)' ) as the_bigger_the_better;\"\"\"\n    # debug '^87-1^', db._sqlx_get_cmd_re()\n    # debug '^87-1^', [ ( sqlx.matchAll db._sqlx_get_cmd_re() )..., ]\n    sql   = db.resolve sqlx\n    help rpr sqlx\n    info rpr sql\n    # echo dtab._tabulate db db.resolve sql\n  #.........................................................................................................\n  db ->\n    db.declare SQL\"\"\"@intnn() = integer not null;\"\"\"\n    sqlx  = SQL\"\"\"\n      create table numbers (\n        n @intnn() primary key );\"\"\"\n    sql   = db.resolve sqlx\n    help rpr sqlx\n    info rpr sql\n  #.........................................................................................................\n  db ->\n    db.declare SQL\"\"\"@intnn( @a ) = integer not null;\"\"\"\n    sqlx  = SQL\"\"\"\n      create table numbers (\n        n @intnn( true ) primary key );\"\"\"\n    sql   = db.resolve sqlx\n    help rpr sqlx\n    info rpr sql\n  # #.........................................................................................................\n  # db ->\n  #   db.declare SQL\"\"\"@intnn = integer not null;\"\"\"\n  #   sqlx  = SQL\"\"\"\n  #     create table numbers (\n  #       n @intnn primary key );\"\"\"\n  #   sql   = db.resolve sqlx\n  #   help rpr sqlx\n  #   info rpr sql\n  #.........................................................................................................\n  done?()\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  @dbay_sqlx_function()\n  # test @dbay_sqlx_function\n\n"
  ]
}