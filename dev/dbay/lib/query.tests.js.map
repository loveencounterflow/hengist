{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/query.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/CONSTRUCTION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nguy                       = require '../../../apps/guy'\n# MMX                       = require '../../../apps/multimix/lib/cataloguing'\nX                         = require '../../../lib/helpers'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY SQL tag function\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  { SQL  }            = DBay\n  T?.eq SQL\"x\\n\\nx\", \"x\\n\\nx\"\n  T?.ok SQL is ( require PATH.join H.dbay_path, 'lib/helpers' ).SQL\n  T?.eq SQL\"foo #{1+2+3} bar\", \"foo 6 bar\"\n  if T?\n    ```\n    T.eq( SQL`foo ${1+2+3} bar`, \"foo 6 bar\" )\n    ```\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY create DB, table 1\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  ### explicit path, explicitly temporary ###\n  T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  path                = PATH.resolve DBay.C.autolocation, 'dbay-create-a-table.sqlite'\n  DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  db                  = new DBay { path, temporary: true, }\n  try\n    # debug '^447^', MMX.all_keys_of db\n    T?.ok DH.is_file db._dbs.main.path\n    db.execute SQL\"create table texts ( nr integer not null primary key, text text );\"\n    db.destroy()\n    T?.ok not DH.is_file db._dbs.main.path\n  finally\n    DH.unlink_file db._dbs.main.path\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY create DB, table 2\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  ### explicit path, explicitly not temporary ###\n  T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  path                = PATH.resolve DBay.C.autolocation, 'dbay-create-a-table.sqlite'\n  DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  db                  = new DBay { path, temporary: false, }\n  try\n    T?.ok DH.is_file db._dbs.main.path\n    db.execute SQL\"create table texts ( nr integer not null primary key, text text );\"\n    db.destroy()\n    T?.ok DH.is_file db._dbs.main.path\n  finally\n    DH.unlink_file db._dbs.main.path\n  T?.ok not DH.is_file db._dbs.main.path\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY create DB, table 3\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  ### explicit path, implicitly not temporary ###\n  T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  path                = PATH.resolve DBay.C.autolocation, 'dbay-create-a-table.sqlite'\n  DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  db                  = new DBay { path, }\n  try\n    T?.ok DH.is_file db._dbs.main.path\n    db.execute SQL\"create table texts ( nr integer not null primary key, text text );\"\n    db.destroy()\n    T?.ok DH.is_file db._dbs.main.path\n  finally\n    DH.unlink_file db._dbs.main.path\n  T?.ok not DH.is_file db._dbs.main.path\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY create DB, table 4\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  ### implicit path, implicitly temporary ###\n  T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  path                = PATH.resolve DBay.C.autolocation, 'dbay-create-a-table.sqlite'\n  DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  db                  = new DBay()\n  path                = null\n  try\n    T?.ok DH.is_file db._dbs.main.path\n    db.execute SQL\"create table texts ( nr integer not null primary key, text text );\"\n    db.destroy()\n    T?.ok not DH.is_file db._dbs.main.path\n  finally\n    DH.unlink_file db._dbs.main.path\n  T?.ok not DH.is_file db._dbs.main.path\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY create DB, table 5\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  ### implicit path, explicitly temporary ###\n  T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  path                = PATH.resolve DBay.C.autolocation, 'dbay-create-a-table.sqlite'\n  DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  db                  = new DBay { temporary: true, }\n  path                = null\n  try\n    T?.ok DH.is_file db._dbs.main.path\n    db.execute SQL\"create table texts ( nr integer not null primary key, text text );\"\n    db.destroy()\n    T?.ok not DH.is_file db._dbs.main.path\n  finally\n    DH.unlink_file db._dbs.main.path\n  T?.ok not DH.is_file db._dbs.main.path\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY create DB, table 6\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  ### implicit path, explicitly not temporary ###\n  T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  path                = PATH.resolve DBay.C.autolocation, 'dbay-create-a-table.sqlite'\n  DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  db                  = new DBay { temporary: false, }\n  path                = null\n  try\n    T?.ok DH.is_file db._dbs.main.path\n    db.execute SQL\"create table texts ( nr integer not null primary key, text text );\"\n    db.destroy()\n    T?.ok DH.is_file db._dbs.main.path\n  finally\n    DH.unlink_file db._dbs.main.path\n  T?.ok not DH.is_file db._dbs.main.path\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY create DB, insert, query values 1\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  ### implicit path, explicitly not temporary ###\n  T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  path                = PATH.resolve DBay.C.autolocation, 'dbay-create-and-query-a-table.sqlite'\n  DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  db                  = new DBay { temporary: false, }\n  try\n    db.execute  SQL\"drop table if exists texts;\"\n    db.execute  SQL\"create table texts ( nr integer not null primary key, text text );\"\n    db.execute  SQL\"insert into texts values ( 3, 'third' );\"\n    T?.throws /argument 'extra' not allowed/, =>\n      db.execute  SQL\"insert into texts values ( ?, ? );\", [ 4, 'fourth', ]\n    db.query    SQL\"insert into texts values ( 1, 'first' );\"\n    db.query    SQL\"insert into texts values ( ?, ? );\", [ 2, 'second', ]\n    rows = db.query SQL\"select * from texts order by nr;\"\n    T?.eq ( type_of rows ), 'statementiterator'\n    T?.eq [ rows..., ], [ { nr: 1, text: 'first' }, { nr: 2, text: 'second' }, { nr: 3, text: 'third' } ]\n  finally\n    null\n    DH.unlink_file db._dbs.main.path\n  T?.ok not DH.is_file db._dbs.main.path\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY do 1\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  ### implicit path, explicitly not temporary ###\n  T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  path                = PATH.resolve DBay.C.autolocation, 'dbay-do.sqlite'\n  db                  = new DBay { temporary: false, }\n  try\n    db.do  SQL\"drop table if exists texts;\"\n    db.do  SQL\"create table texts ( nr integer not null primary key, text text );\"\n    db.do  SQL\"insert into texts values ( 3, 'third' );\"\n    # T?.throws /argument extra not allowed/, =>\n    #   db.do  SQL\"insert into texts values ( 4,. ? );\", [ 4, 'fourth', ]\n    db.do    SQL\"insert into texts values ( 1, 'first' );\"\n    db.do    SQL\"insert into texts values ( ?, ? );\", [ 2, 'second', ]\n    rows = db.do SQL\"select * from texts order by nr;\"\n    T?.eq ( type_of rows ), 'statementiterator'\n    T?.eq [ rows..., ], [ { nr: 1, text: 'first' }, { nr: 2, text: 'second' }, { nr: 3, text: 'third' } ]\n  finally\n    DH.unlink_file db._dbs.main.path\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY db as callable\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  path                = PATH.resolve DBay.C.autolocation, 'dbay-do.sqlite'\n  db                  = new DBay { temporary: false, }\n  try\n    db SQL\"drop table if exists texts;\"\n    db SQL\"create table texts ( nr integer not null primary key, text text );\"\n    db SQL\"insert into texts values ( 3, 'third' );\"\n    # T?.throws /argument extra not allowed/, =>\n    #   db  SQL\"insert into texts values ( 4,. ? );\", [ 4, 'fourth', ]\n    db SQL\"insert into texts values ( 1, 'first' );\"\n    db SQL\"insert into texts values ( ?, ? );\", [ 2, 'second', ]\n    rows = db SQL\"select * from texts order by nr;\"\n    T?.eq ( type_of rows ), 'statementiterator'\n    rows = [ rows..., ]\n    T?.eq rows, [ { nr: 1, text: 'first' }, { nr: 2, text: 'second' }, { nr: 3, text: 'third' } ]\n  finally\n    DH.unlink_file db._dbs.main.path\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY db callable checks types of arguments\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  # T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  db                  = new DBay()\n  T?.throws /expected .*, got a float/, -> db 42\n  T?.throws /expected .*, got a undefined/, -> db()\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY db callable accepts function, begins, commits transaction\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  db                  = new DBay()\n  #.........................................................................................................\n  db ->\n    db SQL\"drop table if exists texts;\"\n    db SQL\"create table texts ( nr integer not null primary key, text text );\"\n    db SQL\"insert into texts values ( 3, 'third' );\"\n    db SQL\"insert into texts values ( 1, 'first' );\"\n    db SQL\"insert into texts values ( ?, ? );\", [ 2, 'second', ]\n    #.......................................................................................................\n    T?.throws /cannot start a transaction within a transaction/, ->\n      db ->\n  #.........................................................................................................\n  T?.throws /UNIQUE constraint failed: texts\\.nr/, ->\n    db ->\n      db SQL\"insert into texts values ( 3, 'third' );\"\n  #.........................................................................................................\n  rows = db SQL\"select * from texts order by nr;\"\n  rows = [ rows..., ]\n  T?.eq rows, [ { nr: 1, text: 'first' }, { nr: 2, text: 'second' }, { nr: 3, text: 'third' } ]\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY implicit tx can be configured\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  db                  = new DBay()\n  #.........................................................................................................\n  db ->\n    db SQL\"drop table if exists texts;\"\n    db SQL\"create table texts ( nr integer not null primary key, text text );\"\n  db { mode: 'deferred', }, ->\n    db SQL\"insert into texts values ( 3, 'third' );\"\n  db { mode: 'immediate', }, ->\n    db SQL\"insert into texts values ( 1, 'first' );\"\n  db { mode: 'exclusive', }, ->\n    db SQL\"insert into texts values ( ?, ? );\", [ 2, 'second', ]\n  #.........................................................................................................\n  rows = db SQL\"select * from texts order by nr;\"\n  rows = [ rows..., ]\n  T?.eq rows, [ { nr: 1, text: 'first' }, { nr: 2, text: 'second' }, { nr: 3, text: 'third' } ]\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY can do explicit rollback in tx context handler\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  # T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  db                  = new DBay()\n  db SQL\"create table squares ( n int not null primary key, square int not null );\"\n  db ->\n    for n in [ 10 .. 12 ]\n      db SQL\"insert into squares ( n, square ) values ( ?, ? );\", [ n, n ** 2, ]\n    db SQL\"rollback;\"\n  T?.eq ( db.all_rows SQL\"select * from squares order by n;\" ), []\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY tx rollback also reverts create table\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  db                  = new DBay()\n  db.open { schema: 'aux', }\n  #.........................................................................................................\n  try\n    db ->\n      db SQL\"create table squares ( n int not null primary key, square int not null );\"\n      db SQL\"create table aux.squares ( n int not null primary key, square int not null );\"\n      throw new Error 'xxx'\n  catch error\n    throw error unless error.message is 'xxx'\n  T?.eq ( db.all_rows SQL\"select * from main.sqlite_schema;\" ).length, 0\n  T?.eq ( db.all_rows SQL\"select * from aux.sqlite_schema;\"  ).length, 0\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY db.first_row returns `null` for empty result set\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  db                  = new DBay()\n  db.open { schema: 'aux', }\n  db SQL\"create table squares ( n int not null primary key, square int not null );\"\n  #.........................................................................................................\n  db ->\n    for n in [ 10 .. 12 ]\n      db SQL\"insert into squares ( n, square ) values ( ?, ? );\", [ n, n ** 2, ]\n  T?.eq ( db.all_rows  SQL\"select * from squares order by n;\"     ).length, 3\n  T?.eq ( db.first_row SQL\"select * from squares order by n;\"     ), { n: 10, square: 100, }\n  T?.eq ( db.first_row SQL\"select * from squares where n > 100;\"  ), null\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY db.single_row returns throws error on empty result set\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  db                  = new DBay()\n  db.open { schema: 'aux', }\n  db SQL\"create table squares ( n int not null primary key, square int not null );\"\n  #.........................................................................................................\n  db ->\n    for n in [ 10 .. 12 ]\n      db SQL\"insert into squares ( n, square ) values ( ?, ? );\", [ n, n ** 2, ]\n  T?.eq ( db.all_rows  SQL\"select * from squares order by n;\"     ).length, 3\n  T?.eq ( db.single_row SQL\"select * from squares order by n limit 1;\"     ), { n: 10, square: 100, }\n  T?.throws /expected 1 row, got 0/, -> db.single_row SQL\"select * from squares where n > 100;\"\n  T?.throws /expected 1 row, got 3/, -> db.single_row SQL\"select * from squares;\"\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY db.first_values walks over first value in all rows\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  # T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  db                  = new DBay()\n  db.open { schema: 'aux', }\n  db SQL\"create table squares ( n int not null primary key, square int not null );\"\n  #.........................................................................................................\n  db ->\n    for n in [ 10 .. 12 ]\n      db SQL\"insert into squares ( n, square ) values ( ?, ? );\", [ n, n ** 2, ]\n  #.........................................................................................................\n  do ->\n    result = []\n    for value from db.first_values SQL\"select * from squares order by n desc;\"\n      result.push value\n    T?.eq result, [ 12, 11, 10, ]\n  #.........................................................................................................\n  do ->\n    result = []\n    for value from db.first_values SQL\"select square, n from squares order by n desc;\"\n      result.push value\n    T?.eq result, [ 144, 121, 100 ]\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY db.all_first_values returns list of first value in all rows\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  # T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  db                  = new DBay()\n  db.open { schema: 'aux', }\n  db SQL\"create table squares ( n int not null primary key, square int not null );\"\n  #.........................................................................................................\n  db ->\n    for n in [ 10 .. 12 ]\n      db SQL\"insert into squares ( n, square ) values ( ?, ? );\", [ n, n ** 2, ]\n  #.........................................................................................................\n  do ->\n    result = db.all_first_values SQL\"select * from squares order by n desc;\"\n    T?.eq result, [ 12, 11, 10, ]\n  #.........................................................................................................\n  do ->\n    result = db.all_first_values SQL\"select square, n from squares order by n desc;\"\n    T?.eq result, [ 144, 121, 100 ]\n  #.........................................................................................................\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY db.single_value returns single value or throws error\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  # T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  db                  = new DBay()\n  db.open { schema: 'aux', }\n  db SQL\"create table squares ( n int not null primary key, square int not null );\"\n  #.........................................................................................................\n  db ->\n    for n in [ 10 .. 12 ]\n      db SQL\"insert into squares ( n, square ) values ( ?, ? );\", [ n, n ** 2, ]\n  #.........................................................................................................\n  do ->\n    result = db.single_value SQL\"select n from squares order by n desc limit 1;\"\n    T?.eq result, 12\n  #.........................................................................................................\n  do ->\n    T?.throws /expected 1 row, got 3/, ->\n      db.single_value SQL\"select square, n from squares order by n desc;\"\n  #.........................................................................................................\n  do ->\n    T?.throws /expected row with single field, got fields \\[ 'square', 'n' \\]/, ->\n      db.single_value SQL\"select square, n from squares order by n limit 1;\"\n  #.........................................................................................................\n  do ->\n    T?.throws /expected 1 row, got 0/, ->\n      db.single_value SQL\"select square, n from squares where n < 0;\"\n  #.........................................................................................................\n  return done?()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY prepared statement allowed in `db.do()`\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  db                = new DBay()\n  { Tbl, }          = require '../../../apps/icql-dba-tabulate'\n  dtab              = new Tbl { dba: db, }\n  schema            = 'main'\n  #.........................................................................................................\n  db ->\n    db SQL\"\"\"\n      create table xy (\n        a   integer not null primary key,\n        b   text not null,\n        c   boolean not null );\"\"\"\n    insert_into_xy = db.prepare_insert { into: 'xy', exclude: [ 'a', ], }\n    db insert_into_xy, { b: 'one', c: 1, }\n    db insert_into_xy, { b: 'two', c: 1, }\n    db insert_into_xy, { b: 'three', c: 1, }\n    db insert_into_xy, { b: 'four', c: 1, }\n    echo dtab._tabulate db SQL\"select * from xy order by a;\"\n    T?.eq ( db.all_rows SQL\"select * from xy order by a;\" ), [ { a: 1, b: 'one', c: 1 }, { a: 2, b: 'two', c: 1 }, { a: 3, b: 'three', c: 1 }, { a: 4, b: 'four', c: 1 } ]\n    db SQL\"rollback;\"\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY `execute_file()`\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  db                = new DBay()\n  path              = PATH.resolve PATH.join __dirname, '../../../assets/dbay/html5-tags.sql'\n  #.........................................................................................................\n  db SQL\"\"\"\n    create table tags (\n      tag       text    not null primary key,\n      is_block  boolean not null default false,\n      is_empty  boolean not null default false );\"\"\"\n  # db ->\n  db.execute_file { path, }\n  X.tabulate 'tags', db SQL\"select * from tags order by 3, 2, 1;\"\n  #.........................................................................................................\n  done?()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"DBAY db.first_row() exhausts iterator\" ] = ( T, done ) ->\n#   # T?.halt_on_error()\n#   { DBay }            = require H.dbay_path\n#   db                  = new DBay()\n#   db SQL\"create table squares ( n int not null primary key, square int not null );\"\n#   db ->\n#     for n in [ 10 .. 12 ]\n#       db SQL\"insert into squares ( n, square ) values ( ?, ? );\", [ n, n ** 2, ]\n#   sql = SQL\"select * from squares order by n;\"\n#   T?.eq ( db.first_row sql ), { n: 10, square: 100 }\n#   # T?.eq db._statements[ sql ].all(), []\n#   urge [ ( db.query SQL\"select * from squares;\" )..., ]\n#   info db.sqlt1\n#   info [ db._statements[ sql ].iterate()..., ]\n#   info [ db._statements[ sql ].iterate()..., ]\n#   info [ db._statements[ sql ].iterate()..., ]\n#   return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY `db.as_object()`\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  db                = new DBay()\n  #.........................................................................................................\n  db ->\n    db SQL\"\"\"\n      drop table if exists integers;\n      create table integers (\n        value   integer not null primary key,\n        name    text    not null,\n        is_even boolean not null );\"\"\"\n    insert_into_integers = db.prepare_insert { into: 'integers', }\n    db insert_into_integers, { value: 1, name: 'one',   is_even: 0, }\n    db insert_into_integers, { value: 2, name: 'two',   is_even: 1, }\n    db insert_into_integers, { value: 3, name: 'three', is_even: 0, }\n    db insert_into_integers, { value: 4, name: 'four',  is_even: 1, }\n  #.........................................................................................................\n  X.tabulate 'integers', db SQL\"select * from integers;\"\n  result = db.as_object 'name', SQL\"select * from integers;\"\n  T?.eq result, {\n    one: { value: 1, is_even: 0 },\n    two: { value: 2, is_even: 1 },\n    three: { value: 3, is_even: 0 },\n    four: { value: 4, is_even: 1 } }\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY query with non-unique field names\" ] = ( T, done ) ->\n  SQL                       = String.raw\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  db                = new DBay()\n  #.........................................................................................................\n  X.tabulate 'integers', db SQL\"select 1 as first, 2 as first;\"\n  T?.eq ( db.all_rows SQL\"select 1 as first, 2 as first;\" ), [ { first: 2, }, ]\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # test @[ \"DBAY SQL tag function\" ]\n  # test @[ \"DBAY `db.as_object()`\" ]\n  test @[ \"DBAY query with non-unique field names\" ]\n  # @[ \"DBAY prepared statement allowed in `db.do()`\" ]()\n  # test @[ \"DBAY create DB, insert, query values 1\" ]\n  # test @[ \"DBAY db as callable\" ]\n  # @[ \"DBAY create DB, table 2\" ]()\n  # test @[ \"DBAY db callable checks types of arguments\" ]\n  # test @[ \"DBAY tx rollback also reverts create table\" ]\n  # test @[ \"DBAY db.first_row() exhausts iterator\" ]\n  # @[ \"DBAY can do explicit rollback in tx context handler\" ]()\n  # test @[ \"DBAY implicit tx can be configured\" ]\n  # test @[ \"DBAY db.first_row returns `null` for empty result set\" ]\n  # test @[ \"DBAY db.first_values walks over first value in all rows\" ]\n"
  ]
}