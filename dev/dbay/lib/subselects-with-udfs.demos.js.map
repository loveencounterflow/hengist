{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/subselects-with-udfs.demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n###\n\nVariables:\n\n* (2) **`use_unsafe: [ true, false, ]`**: safe mode on / off\n* (2) **`use_transaction: [ true, false, ]`**: explicit vs implicit transaction\n* (2) **`connection_count: [ 1, 2, ]`**: single connection vs double connection\n* (2) **`use_worker: [ true, false, ]`**: single thread vs main thread + worker thread\n* (2) **`use_subselect_function: [ true, false, ]`**: using a function that does no sub-select vs function\n  that does\n* (4) **`function_type: [ 'none', 'scalar', 'table', 'sqlite', ]`**: SQL using no UDF, using scalar UDF,\n  using table UDF, using SQLite function[^1]\n* (2) **`use_nested_statement: [ true, false, ]`**: use nested statement or not\n\n2^6 * 4^1 = 64 * 4 = 256 possible variants (but minus some impossible combinations)\n\nchanges:\n\n* (?) **`transaction_type: [ 'deferred', ..., ]`**\n* (?) **`journalling_mode: [ 'wal', 'memory', ..., ]`**\n\nNotes:\n\n[^1]: using a function provided by SQLite will not lead to equivalent results because there's no SQLite\n  function that provides a sub-select.\n\n###\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/DEMOS/UDFSEL'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ equals\n  isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n#-----------------------------------------------------------------------------------------------------------\ncfg =\n  # verbose:              true\n  verbose:              false\n  # catch_errors:         false\n  catch_errors:         true\n  # show_na_choices:      true\n  show_na_choices:      false\n  hilite:               { ft: 'scalar', }\n  choices:\n    uu: [ true, false, ]                                            ### use_unsafe            ###\n    cc: [ 1, 2, ]                                                   ### connection_count      ###\n    ut: [ true, false, ]                                            ### use_transaction       ###\n    uw: [ null, ]        # [ true, false, ]                         ### use_worker            ###\n    # ft: [ null, ]        # [ 'none', 'scalar', 'table', 'sqlite', ] ### function_type         ###\n    ft: [ 'none', 'scalar', 'table', ]                              ### function_type         ###\n    un: [ true, false, ]                                            ### use_nested_statement  ###\n  results:\n    not_applicable:   Symbol 'not_applicable'\n    not_implemented:  Symbol 'not_implemented'\n\n#-----------------------------------------------------------------------------------------------------------\nprepare_db = ( db ) ->\n  db.sqlt1.exec SQL\"create table x ( word text, nrx );\"\n  db.sqlt1.exec SQL\"create table y ( word text, nry );\"\n  for word, idx in \"foo bar baz\".split /\\s+/\n    nrx = idx + 1\n    ( db.sqlt1.prepare SQL\"insert into x ( word, nrx ) values ( $word, $nrx );\" ).run { word, nrx, }\n    for n in [ 1, 2, 3, ]\n      nry = nrx + n * 2\n      ( db.sqlt1.prepare SQL\"insert into y ( word, nry ) values ( $word, $nry );\" ).run { word, nry, }\n  fn_cfg = { deterministic: false, varargs: false, }\n  ### TAINT use other connection for query ###\n  for connection in [ db.sqlt1, db.sqlt2, ]\n    connection.function 'join_x_and_y_using_word_scalar', fn_cfg, ->\n      return JSON.stringify join_x_and_y_using_word connection\n    connection.function 'select_word_from_y_scalar', fn_cfg, ( word ) ->\n      return JSON.stringify select_word_from_y_scalar connection, word\n    # connection.table 'join_x_and_y_using_word_table', fn_cfg, ->\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\njoin_x_and_y_using_word = ( sqlt ) ->\n  statement = sqlt.prepare SQL\"\"\"\n    select\n        x.word  as word,\n        x.nrx   as nrx,\n        y.nry   as nry\n      from x\n      join y on ( x.word = y.word )\n      order by 1, 2, 3;\"\"\"\n  return statement.all()\n\n#-----------------------------------------------------------------------------------------------------------\nselect_word_from_y_scalar = ( sqlt, word ) ->\n  statement = sqlt.prepare SQL\"select * from y where word = $word order by 1, 2;\"\n  return statement.all { word, }\n\n#-----------------------------------------------------------------------------------------------------------\nget_matcher = ( db ) -> join_x_and_y_using_word db.sqlt1\n\n#-----------------------------------------------------------------------------------------------------------\nget_kenning = ( fingerprint ) ->\n  R = []\n  for k, v of fingerprint\n    v = if v is true then '1' else ( if v is false then '0' else rpr v )\n    R.push \"#{k}:#{v}\"\n  return R.join ','\n\n#-----------------------------------------------------------------------------------------------------------\n_begin_transaction = ( ut, sqlt_a, sqlt_b ) ->\n  return unless ut\n  debug '^334-1^', \"begin tx\" if cfg.verbose\n  sqlt_a.exec SQL\"begin transaction;\"\n  sqlt_b.exec SQL\"begin transaction;\" if sqlt_a isnt sqlt_b\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n_commit_transaction = ( ut, sqlt_a, sqlt_b ) ->\n  return unless ut\n  debug '^334-2^', \"commit tx\" if cfg.verbose\n  sqlt_a.exec SQL\"commit;\"\n  sqlt_b.exec SQL\"commit;\" if sqlt_a isnt sqlt_b\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nquery_with_nested_statement = ( db, fingerprint, sqlt_a, sqlt_b ) ->\n  switch fingerprint.ft\n    #.......................................................................................................\n    when 'none'\n      ### TAINT refactor ###\n      result = []\n      outer_statement = sqlt_a.prepare SQL\"select * from x order by 1, 2;\"\n      for outer_row from outer_statement.iterate()\n        inner_statement = sqlt_b.prepare SQL\"select * from y where word = $word order by 1, 2;\"\n        for inner_row in inner_rows = inner_statement.all { word: outer_row.word, }\n          result.push { word: outer_row.word, nrx: outer_row.nrx, nry: inner_row.nry, }\n      return { result, }\n    #.......................................................................................................\n    when 'scalar'\n      ### TAINT refactor ###\n      result = []\n      outer_statement = sqlt_a.prepare SQL\"select * from x order by 1, 2;\"\n      for outer_row from outer_statement.iterate()\n        { word, }       = outer_row\n        inner_statement = sqlt_b.prepare SQL\"select select_word_from_y_scalar( $word ) as rows;\"\n        inner_rows      = ( inner_statement.get { word, } ).rows\n        inner_rows      = JSON.parse inner_rows\n        for inner_row in inner_rows\n          result.push { word: outer_row.word, nrx: outer_row.nrx, nry: inner_row.nry, }\n      return { result, }\n  #.........................................................................................................\n  return { result: cfg.results.not_implemented, error: \"ft: #{rpr fingerprint.ft} not implemented\", }\n\n#-----------------------------------------------------------------------------------------------------------\nquery_without_nested_statement = ( db, fingerprint, sqlt_a, sqlt_b ) ->\n  switch fingerprint.ft\n    when 'none'\n      return { result: ( join_x_and_y_using_word sqlt_a ), }\n    when 'scalar'\n      statement = sqlt_a.prepare SQL\"\"\"\n        select join_x_and_y_using_word_scalar() as rows;\"\"\"\n      result = statement.get()\n      result = JSON.parse result.rows\n      return { result, }\n  return { result: cfg.results.not_implemented, error: \"ft: #{rpr fingerprint.ft} not implemented\", }\n\n#-----------------------------------------------------------------------------------------------------------\nff = ( db, fingerprint ) ->\n  error           = null\n  result          = null\n  { uu, cc, ut,\n    uw, ft, un, } = fingerprint\n  #.........................................................................................................\n  if uu\n    db.sqlt1.unsafeMode true\n    db.sqlt2.unsafeMode true\n  #.........................................................................................................\n  switch cc\n    when 1\n      sqlt_a          = db.sqlt1\n      sqlt_b          = sqlt_a\n    when 2\n      sqlt_a          = db.sqlt1\n      sqlt_b          = db.sqlt2\n    else throw new Error \"expected cc to be 1 or 2, got #{rpr cc}\"\n  #.........................................................................................................\n  try\n    if ut\n      unless un  then return { result: cfg.results.not_applicable, error: \"need nested stms for tx:1\", }\n      if cc is 2 then return { result: cfg.results.not_applicable, error: \"need single conn for tx:1\", }\n    _begin_transaction ut, sqlt_a, sqlt_b\n    #.......................................................................................................\n    if un ### use_nested_statement ###\n      R = query_with_nested_statement db, fingerprint, sqlt_a, sqlt_b\n    else ### do not use_nested_statement ###\n      R = query_without_nested_statement db, fingerprint, sqlt_a, sqlt_b\n    #.......................................................................................................\n    _commit_transaction ut, sqlt_a, sqlt_b\n    return R\n  #.........................................................................................................\n  catch error\n    throw error unless cfg.catch_errors\n    error = \"(#{error.message})\"\n    return { error, }\n  #.........................................................................................................\n  finally\n    db.sqlt1.unsafeMode false\n    db.sqlt2.unsafeMode false\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nselect = ( fingerprint ) ->\n  return false unless cfg.hilite?\n  for key, choices of cfg.hilite\n    switch type_of choices\n      when 'list'\n        for choice in choices\n          return true if equals choice, fingerprint[ key ]\n      else\n        return true if equals choices, fingerprint[ key ]\n  return false\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_f = ->\n  { Dbay }  = require H.dbay_path\n  db        = new Dbay()\n  prepare_db db\n  matcher   = get_matcher db\n  counts    =\n    total:            0\n    not_implemented:  0\n    not_applicable:   0\n    other:            0\n    error:            0\n    test:             0\n    success:          0\n    fail:             0\n  #.........................................................................................................\n  for             uu in cfg.choices.uu  ### use_unsafe            ###\n    for           cc in cfg.choices.cc  ### connection_count     ###\n      for         ut in cfg.choices.ut  ### use_transaction       ###\n        for       uw in cfg.choices.uw  ### use_worker            ###\n          for     ft in cfg.choices.ft  ### function_type         ###\n            for   un in cfg.choices.un  ### use_nested_statement  ###\n              counts.total++\n              fingerprint   = { uu, cc, ut, uw, ft, un, }\n              kenning       = get_kenning fingerprint\n              { result\n                error }     = ff db, fingerprint\n              # debug '^3453^', result, isa.symbol result\n              if ( isa.symbol result )\n                switch result\n                  when cfg.results.not_implemented\n                    counts.not_implemented++\n                    color = CND.red\n                  when cfg.results.not_applicable\n                    counts.not_applicable++\n                    color = CND.grey\n                  else\n                    counts.other++\n                    color = CND.yellow\n                unless ( result is cfg.results.not_applicable ) and ( not cfg.show_na_choices )\n                  echo CND.grey ' ', 0, color kenning, result, error\n                continue\n              counts.test++\n              if ( is_ok = equals result, matcher ) then  counts.success++\n              else                                        counts.fail++\n              if error?                             then  counts.error++\n              if select fingerprint                 then  marker = CND.gold '█'\n              else                                        marker = ' '\n              echo marker, ( CND.blue counts.test, kenning ), ( CND.truth is_ok ), marker, ( CND.red CND.reverse error ? '' )\n              echo CND.red CND.reverse ' ', result, ' ' if ( not is_ok ) and ( not error? )\n  #.........................................................................................................\n  for k, v of counts\n    help ( k.padStart 20 ), ( v.toString().padStart 5 )\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  await demo_f()\n\n"
  ]
}