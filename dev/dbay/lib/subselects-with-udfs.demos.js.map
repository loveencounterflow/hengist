{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/subselects-with-udfs.demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n###\n\nVariables:\n\n* (2) **`unsafe_mode: [ true, false, ]`**: safe mode on / off\n* (2) **`use_transaction: [ true, false, ]`**: explicit vs implicit transaction\n* (2) **`connection_count: [ 1, 2, ]`**: single connection vs double connection\n* (2) **`use_worker: [ true, false, ]`**: single thread vs main thread + worker thread\n* (2) **`use_subselect_function: [ true, false, ]`**: using a function that does no sub-select vs function\n  that does\n* (4) **`function_type: [ 'none', 'scalar', 'table', 'sqlite', ]`**: SQL using no UDF, using scalar UDF,\n  using table UDF, using SQLite function[^1]\n* (2) **`use_nested_statement: [ true, false, ]`**: use nested statement or not\n\n2^6 * 4^1 = 64 * 4 = 256 possible variants (but minus some impossible combinations)\n\nchanges:\n\n* (?) **`transaction_type: [ 'deferred', ..., ]`**\n* (?) **`journalling_mode: [ 'wal', 'memory', ..., ]`**\n\nNotes:\n\n[^1]: using a function provided by SQLite will not lead to equivalent results because there's no SQLite\n  function that provides a sub-select.\n\n###\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/DEMOS/UDFSEL'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ equals\n  isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\njr                        = JSON.stringify\nguy                       = require '../../../apps/guy'\n{ Dbay }                  = require H.dbay_path\ntrash                     = require 'trash'\n#-----------------------------------------------------------------------------------------------------------\ncfg =\n  # use_ram_db:           true\n  # journal_mode:         'wal'\n  journal_mode:         'memory'\n  verbose:              true\n  # verbose:              false\n  # catch_errors:         false\n  catch_errors:         true\n  # show_na_choices:      true\n  show_na_choices:      false\n  # hilite:               { ft: 'scalar', }\n  hilite:               { ft: 'table', }\n  choices:\n    um: [ true, false, ]                                            ### unsafe_mode            ###\n    cc: [ 1, 2, ]                                                   ### connection_count      ###\n    # cc: [ 2, ]                                                      ### connection_count      ###\n    wo: [ null, ]        # [ true, false, ]                         ### use_worker            ###\n    # ft: [ null, ]        # [ 'none', 'scalar', 'table', 'sqlite', ] ### function_type         ###\n    # ft: [ 'none', 'scalar', 'table', ]                              ### function_type         ###\n    ft: [ 'scalar', 'table', ]                              ### function_type         ###\n    ne: [ true, false, ]                                            ### use_nested_statement  ###\n  results:\n    not_applicable:   Symbol 'not_applicable'\n    not_implemented:  Symbol 'not_implemented'\n    query_hangs:      Symbol 'query_hangs'\n\n#-----------------------------------------------------------------------------------------------------------\nprepare_db = ( db ) ->\n  db.sqlt1.exec SQL\"create table x ( word text, nrx );\"\n  db.sqlt1.exec SQL\"create table y ( word text, nry );\"\n  for word, idx in \"foo bar baz\".split /\\s+/\n    nrx = idx + 1\n    ( db.sqlt1.prepare SQL\"insert into x ( word, nrx ) values ( $word, $nrx );\" ).run { word, nrx, }\n    for n in [ 1, 2, 3, ]\n      nry = nrx + n * 2\n      ( db.sqlt1.prepare SQL\"insert into y ( word, nry ) values ( $word, $nry );\" ).run { word, nry, }\n  scalar_fn_cfg = { deterministic: false, varargs: false, }\n  #.........................................................................................................\n  for [ c1, c2, ] in [ [ db.sqlt1, db.sqlt2, ], [ db.sqlt2, db.sqlt1, ], ]\n    #.......................................................................................................\n    c1.function 'join_x_and_y_using_word_scalar_cc1', scalar_fn_cfg, -> jr join_x_and_y_using_word c1\n    c1.function 'join_x_and_y_using_word_scalar_cc2', scalar_fn_cfg, -> jr join_x_and_y_using_word c2\n    c1.table 'join_x_and_y_using_word_table_cc1',\n      deterministic:  false\n      varargs:        false\n      columns:        [ 'word', 'nrx', 'nry', ]\n      rows:           -> yield from join_x_and_y_using_word_iterate c1\n    c1.table 'join_x_and_y_using_word_table_cc2',\n      deterministic:  false\n      varargs:        false\n      columns:        [ 'word', 'nrx', 'nry', ]\n      rows:           -> yield from join_x_and_y_using_word_iterate c2\n    #.......................................................................................................\n    c1.function 'select_word_from_y_scalar_cc1', scalar_fn_cfg, ( word ) -> jr select_word_from_y_scalar c1, word\n    c1.function 'select_word_from_y_scalar_cc2', scalar_fn_cfg, ( word ) -> jr select_word_from_y_scalar c2, word\n    c1.table 'select_word_from_y_table_cc1',\n      deterministic:  false\n      varargs:        false\n      columns:        [ 'word', 'nry', ]\n      rows:           ( word ) -> yield from select_word_from_y_iterate c1, word\n    c1.table 'select_word_from_y_table_cc2',\n      deterministic:  false\n      varargs:        false\n      columns:        [ 'word', 'nry', ]\n      rows:           ( word ) -> yield from select_word_from_y_iterate c2, word\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nprepare_dbr = ( dbr ) ->\n  dbr.execute SQL\"create table results (\n    um      boolean,\n    cc      integer,\n    wo      boolean,\n    ft      text,\n    ne      boolean,\n    is_ok   boolean,\n    marker  text,\n    error   text );\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ninsert_result = ( dbr, fingerprint, is_ok, marker, error = null ) ->\n  fingerprint = { fingerprint..., }\n  for k, v of fingerprint\n    fingerprint[ k ] = if v is true then 1 else ( if v is false then 0 else rpr v )\n  { um, cc, wo, ft, ne, } = fingerprint\n  is_ok   = if is_ok then 1 else 0\n  dbr.run SQL\"\"\"\n    insert into results values (\n      $um, $cc, $wo, $ft, $ne, $is_ok, $marker, $error );\n    \"\"\", { um, cc, wo, ft, ne, is_ok, marker, error }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nshow_dbr = ( dbr ) ->\n  { Tbl, }  = require '../../../apps/icql-dba-tabulate'\n  dtab      = new Tbl { dba: dbr, }\n  echo dtab._tabulate dbr.query SQL\"\"\"select\n      *\n    from results\n    order by error, marker desc, cc, ne, 1, 2, 3, 4, 5, 6;\"\"\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\njoin_x_and_y_using_word = ( sqlt ) ->\n  statement = sqlt.prepare SQL\"\"\"\n    select\n        x.word  as word,\n        x.nrx   as nrx,\n        y.nry   as nry\n      from x\n      join y on ( x.word = y.word )\n      order by 1, 2, 3;\"\"\"\n  return statement.all()\n\n#-----------------------------------------------------------------------------------------------------------\njoin_x_and_y_using_word_iterate = ( sqlt ) ->\n  statement = sqlt.prepare SQL\"\"\"\n    select\n        x.word  as word,\n        x.nrx   as nrx,\n        y.nry   as nry\n      from x\n      join y on ( x.word = y.word )\n      order by 1, 2, 3;\"\"\"\n  yield from statement.iterate()\n\n#-----------------------------------------------------------------------------------------------------------\nselect_word_from_y_scalar = ( sqlt, word ) ->\n  statement = sqlt.prepare SQL\"select * from y where word = $word order by 1, 2;\"\n  return statement.all { word, }\n\n#-----------------------------------------------------------------------------------------------------------\nselect_word_from_y_iterate = ( sqlt, word ) ->\n  statement = sqlt.prepare SQL\"select * from y where word = $word order by 1, 2;\"\n  return statement.iterate { word, }\n\n#-----------------------------------------------------------------------------------------------------------\nget_matcher = ( db ) -> join_x_and_y_using_word db.sqlt1\n\n#-----------------------------------------------------------------------------------------------------------\nget_kenning = ( fingerprint ) ->\n  R = []\n  for k, v of fingerprint\n    v = if v is true then '1' else ( if v is false then '0' else rpr v )\n    R.push \"#{k}:#{v}\"\n  return R.join ','\n\n#-----------------------------------------------------------------------------------------------------------\nquery_with_nested_statement = ( db, fingerprint, sqlt_a, sqlt_b ) ->\n  switch fingerprint.ft\n    #.......................................................................................................\n    when 'none'\n      result = []\n      outer_statement = sqlt_a.prepare SQL\"select * from x order by 1, 2;\"\n      for outer_row from outer_statement.iterate()\n        inner_statement = sqlt_b.prepare SQL\"select * from y where word = $word order by 1, 2;\"\n        for inner_row in inner_rows = inner_statement.all { word: outer_row.word, }\n          result.push { word: outer_row.word, nrx: outer_row.nrx, nry: inner_row.nry, }\n      return { result, }\n    #.......................................................................................................\n    when 'scalar'\n      result = []\n      outer_statement = sqlt_a.prepare SQL\"select * from x order by 1, 2;\"\n      for outer_row from outer_statement.iterate()\n        { word, }       = outer_row\n        if fingerprint.cc is 1\n          inner_statement = sqlt_b.prepare SQL\"select select_word_from_y_scalar_cc1( $word ) as rows;\"\n        else\n          inner_statement = sqlt_b.prepare SQL\"select select_word_from_y_scalar_cc2( $word ) as rows;\"\n        inner_rows      = ( inner_statement.get { word, } ).rows\n        inner_rows      = JSON.parse inner_rows\n        for inner_row in inner_rows\n          result.push { word: outer_row.word, nrx: outer_row.nrx, nry: inner_row.nry, }\n      return { result, }\n    #.......................................................................................................\n    when 'table'\n      result = []\n      outer_statement = sqlt_a.prepare SQL\"select * from x order by 1, 2;\"\n      for outer_row from outer_statement.iterate()\n        { word, }       = outer_row\n        if fingerprint.cc is 1\n          inner_statement = sqlt_b.prepare SQL\"select * from select_word_from_y_table_cc1( $word );\"\n        else\n          inner_statement = sqlt_b.prepare SQL\"select * from select_word_from_y_table_cc2( $word );\"\n        inner_rows      = inner_statement.all { word, }\n        for inner_row in inner_rows\n          result.push { word: outer_row.word, nrx: outer_row.nrx, nry: inner_row.nry, }\n      return { result, }\n  #.........................................................................................................\n  return { result: cfg.results.not_implemented, error: \"ft: #{rpr fingerprint.ft} not implemented\", }\n\n#-----------------------------------------------------------------------------------------------------------\nquery_without_nested_statement = ( db, fingerprint, sqlt_a, sqlt_b ) ->\n  switch fingerprint.ft\n    when 'none'\n      return { result: ( join_x_and_y_using_word sqlt_a ), }\n    when 'scalar'\n      if fingerprint.cc is 1\n        statement = sqlt_a.prepare SQL\"select join_x_and_y_using_word_scalar_cc1() as rows;\"\n      else\n        statement = sqlt_a.prepare SQL\"select join_x_and_y_using_word_scalar_cc2() as rows;\"\n      result    = statement.get()\n      result    = JSON.parse result.rows\n      return { result, }\n    when 'table'\n      if fingerprint.cc is 1\n        statement = sqlt_a.prepare SQL\"select * from join_x_and_y_using_word_table_cc1() as rows;\"\n      else\n        statement = sqlt_a.prepare SQL\"select * from join_x_and_y_using_word_table_cc2() as rows;\"\n      result    = statement.all()\n      return { result, }\n  return { result: cfg.results.not_implemented, error: \"ft: #{rpr fingerprint.ft} not implemented\", }\n\n#-----------------------------------------------------------------------------------------------------------\nff = ( db, fingerprint ) ->\n  error           = null\n  result          = null\n  { um, cc,\n    wo, ft, ne, } = fingerprint\n  #.........................................................................................................\n  if um\n    db.sqlt1.unsafeMode true\n    db.sqlt2.unsafeMode true\n  #.........................................................................................................\n  switch cc\n    when 1\n      sqlt_a          = db.sqlt1\n      sqlt_b          = sqlt_a\n    when 2\n      sqlt_a          = db.sqlt1\n      sqlt_b          = db.sqlt2\n    else throw new Error \"expected cc to be 1 or 2, got #{rpr cc}\"\n  #.........................................................................................................\n  try\n    #.......................................................................................................\n    if ne ### use_nested_statement ###\n      R = query_with_nested_statement db, fingerprint, sqlt_a, sqlt_b\n    else ### do not use_nested_statement ###\n      R = query_without_nested_statement db, fingerprint, sqlt_a, sqlt_b\n  #.........................................................................................................\n  catch error\n    throw error unless cfg.catch_errors\n    error = \"(#{error.message})\"\n    return { error, }\n  #.........................................................................................................\n  finally\n    db.sqlt1.unsafeMode false\n    db.sqlt2.unsafeMode false\n  #.........................................................................................................\n  return R\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nselect = ( fingerprint ) ->\n  return false unless cfg.hilite?\n  for key, choices of cfg.hilite\n    switch type_of choices\n      when 'list'\n        for choice in choices\n          return true if equals choice, fingerprint[ key ]\n      else\n        return true if equals choices, fingerprint[ key ]\n  return false\n\n#-----------------------------------------------------------------------------------------------------------\nnew_db_with_data = ->\n  if cfg.use_ram_db\n    db = new Dbay { timeout: 500, }\n  else\n    path  = '/tmp/subselects.db'\n    try await trash path catch error # then throw error unless error.name is 'ENOENT'\n      debug error.name\n      debug error.code\n      debug type_of error\n      throw error\n    db = new Dbay { path, timeout: 500, }\n  db.sqlt1.exec SQL\"pragma journal_mode=#{cfg.journal_mode}\"\n  db.sqlt2.exec SQL\"pragma journal_mode=#{cfg.journal_mode}\"\n  prepare_db db\n  return db\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_f = ->\n  matcher   = get_matcher await new_db_with_data()\n  counts    =\n    total:            0\n    not_implemented:  0\n    not_applicable:   0\n    query_hangs:      0\n    other:            0\n    error:            0\n    test:             0\n    success:          0\n    fail:             0\n  #.........................................................................................................\n  dbr       = new ( require '../../../apps/icql-dba' ).Dba()\n  dbr.open()\n  prepare_dbr dbr\n  #.........................................................................................................\n  for             um in cfg.choices.um  ### unsafe_mode            ###\n    for           cc in cfg.choices.cc  ### connection_count     ###\n      for         wo in cfg.choices.wo  ### use_worker            ###\n        for       ft in cfg.choices.ft  ### function_type         ###\n          for     ne in cfg.choices.ne  ### use_nested_statement  ###\n            counts.total++\n            db            = await new_db_with_data()\n            fingerprint   = { um, cc, wo, ft, ne, }\n            kenning       = get_kenning fingerprint\n            # #...............................................................................................\n            # if false \\\n            #   or ( equals fingerprint, { um: true,  cc: 1, wo: null, ft: 'table', ne: false } ) \\\n            #   or ( equals fingerprint, { um: false, cc: 1, wo: null, ft: 'table', ne: false } ) \\\n            #   or ( equals fingerprint, { um: true,  cc: 1, wo: null, ft: 'table', ne: true  } ) \\\n            #   or ( equals fingerprint, { um: false, cc: 1, wo: null, ft: 'table', ne: true  } ) \\\n            #   or ( equals fingerprint, { um: true,  cc: 2, wo: null, ft: 'table', ne: true  } ) \\\n            #   or ( equals fingerprint, { um: false, cc: 2, wo: null, ft: 'table', ne: true  } )\n            #   # warn \"^338^ ad-hoc skipped\"\n            #   result  = cfg.results.query_hangs\n            #   error   = \"query hangs indefinitely\"\n            # #...............................................................................................\n            # else\n            #   { result\n            #     error }     = ff db, fingerprint\n            { result\n              error }     = ff db, fingerprint\n            #...............................................................................................\n            # debug '^3453^', result, isa.symbol result\n            if ( isa.symbol result )\n              switch result\n                when cfg.results.not_implemented\n                  counts.not_implemented++\n                  color = CND.red\n                when cfg.results.not_applicable\n                  counts.not_applicable++\n                  color = CND.grey\n                when cfg.results.query_hangs\n                  counts.query_hangs++\n                  color = CND.grey\n                else\n                  counts.other++\n                  color = CND.yellow\n              unless ( result is cfg.results.not_applicable ) and ( not cfg.show_na_choices )\n                echo CND.grey ' ', 0, color kenning, result, error\n              continue unless result is cfg.results.query_hangs\n            #.............................................................................................\n            counts.test++\n            if ( is_ok = equals result, matcher ) then  counts.success++\n            else                                        counts.fail++\n            if error?                             then  counts.error++\n            if select fingerprint                 then  marker = CND.gold '█'\n            else                                        marker = ' '\n            #.............................................................................................\n            insert_result dbr, fingerprint, is_ok, marker, error\n            echo marker, ( CND.blue counts.test, kenning ), ( CND.truth is_ok ), marker, ( CND.red CND.reverse error ? '' )\n            echo CND.red CND.reverse ' ', result, ' ' if ( not is_ok ) and ( not error? )\n  #.........................................................................................................\n  for k, v of counts\n    help ( k.padStart 20 ), ( v.toString().padStart 5 )\n  #.........................................................................................................\n  show_dbr dbr\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  await demo_f()\n\n"
  ]
}