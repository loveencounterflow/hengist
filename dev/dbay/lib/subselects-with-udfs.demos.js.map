{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/subselects-with-udfs.demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/SUBSELECTS-WITH-UDFS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n\n\n#-----------------------------------------------------------------------------------------------------------\nff = ( db, count, fingerprint ) ->\n  sqlt_a        = db.sqlt1\n  sqlt_b        = db.sqlt2\n  error         = null\n  rows          = null\n  { uu, sc, ut,\n    uw, sf, ft,\n    un, }       = fingerprint\n  #...........................................................................................\n  if uu\n    db.sqlt1.unsafeMode true\n    db.sqlt2.unsafeMode true\n  #...........................................................................................\n  if sc\n    sqlt_b = db.sqlt1\n  #...........................................................................................\n  if ut\n    # debug '^334-1^', \"begin tx\"\n    sqlt_a.exec SQL\"begin transaction;\"\n    sqlt_b.exec SQL\"begin transaction;\" if sqlt_a isnt sqlt_b\n  #...........................................................................................\n  try\n    #.........................................................................................\n    if un ### use_nested ###\n      # throw new Error \"test case missing\"\n      rows            = []\n      outer_statement = sqlt_a.prepare SQL\"\"\"\n        select\n            *\n          from x\n          order by 1, 2;\"\"\"\n      for outer_row from outer_statement.iterate()\n        inner_statement = sqlt_b.prepare SQL\"\"\"\n          select\n              *\n            from y\n            where word = $word\n            order by 1, 2;\"\"\"\n        for inner_row in inner_rows = inner_statement.all { word: outer_row.word, }\n          rows.push { word: outer_row.word, nrx: outer_row.nrx, nry: inner_row.nry, }\n    #.........................................................................................\n    else\n      statement = sqlt_a.prepare SQL\"\"\"\n        select\n            x.word  as word,\n            x.nrx   as nrx,\n            y.nry   as nry\n          from x\n          join y on ( x.word = y.word )\n          order by 1, 2, 3;\"\"\"\n      rows  = statement.all()\n  catch error\n    error = \"(#{error.message})\"\n  #...........................................................................................\n  finally\n    #.........................................................................................\n    if uu\n      db.sqlt1.unsafeMode false\n      db.sqlt2.unsafeMode false\n    #.........................................................................................\n    if ut\n      # debug '^334-2^', \"commit tx\"\n      sqlt_a.exec SQL\"commit;\"\n      sqlt_b.exec SQL\"commit;\" if sqlt_a isnt sqlt_b\n    #.........................................................................................\n    if sc\n      sqlt_b = db.sqlt2\n  #...........................................................................................\n  return { rows, error, }\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_f = ->\n  { Dbay }  = require H.dbay_path\n  db        = new Dbay()\n  #.........................................................................................................\n  do =>\n    db.sqlt1.exec SQL\"create table x ( word text, nrx );\"\n    db.sqlt1.exec SQL\"create table y ( word text, nry );\"\n    for word, idx in \"foo bar baz\".split /\\s+/\n      nrx = idx + 1\n      ( db.sqlt1.prepare SQL\"insert into x ( word, nrx ) values ( $word, $nrx );\" ).run { word, nrx, }\n      for n in [ 1, 2, 3, ]\n        nry = nrx + n * 2\n        ( db.sqlt1.prepare SQL\"insert into y ( word, nry ) values ( $word, $nry );\" ).run { word, nry, }\n    return null\n  #.........................................................................................................\n  get_kenning = ( fingerprint ) ->\n    R = []\n    for k, v of fingerprint\n      v = if v is true then '1' else ( if v is false then '0' else rpr v )\n      R.push \"#{k}:#{v}\"\n    return R.join ','\n  #.........................................................................................................\n  matcher = [\n      { word: 'bar', nrx: 2, nry: 4 }\n      { word: 'bar', nrx: 2, nry: 6 }\n      { word: 'bar', nrx: 2, nry: 8 }\n      { word: 'baz', nrx: 3, nry: 5 }\n      { word: 'baz', nrx: 3, nry: 7 }\n      { word: 'baz', nrx: 3, nry: 9 }\n      { word: 'foo', nrx: 1, nry: 3 }\n      { word: 'foo', nrx: 1, nry: 5 }\n      { word: 'foo', nrx: 1, nry: 7 }\n      ]\n  #.........................................................................................................\n  choices =\n    uu: [ true, false, ]                                            ### use_unsafe            ###\n    sc: [ true, false, ]                                            ### single_connection     ###\n    ut: [ true, false, ]                                            ### use_transaction       ###\n    uw: [ null, ]        # [ true, false, ]                         ### use_worker            ###\n    sf: [ null, ]        # [ true, false, ]                         ### sf                    ###\n    ft: [ null, ]        # [ 'none', 'scalar', 'table', 'sqlite', ] ### function_type         ###\n    un: [ true, false, ]                                            ### use_nested_statement  ###\n  #.........................................................................................................\n  count = 0\n  for             uu in choices.uu  ### use_unsafe            ###\n    for           sc in choices.sc  ### single_connection     ###\n      for         ut in choices.ut  ### use_transaction       ###\n        for       uw in choices.uw  ### use_worker            ###\n          for     sf in choices.sf  ### sf                    ###\n            for   ft in choices.ft  ### function_type         ###\n              for un in choices.un  ### use_nested_statement  ###\n                count++\n                fingerprint   = { uu, sc, ut, uw, sf, ft, un, }\n                kenning       = get_kenning fingerprint\n                { rows\n                  error }     = ff db, count++, fingerprint\n                is_ok = types.equals rows, matcher\n                debug '^4509^', ( CND.blue count, kenning ), ( CND.truth is_ok ), ( CND.red error_message ? '' )\n                unless is_ok\n                  debug '^338^', rows\n  return null\n\n###\n\nVariables:\n\n* (2) **`use_unsafe: [ true, false, ]`**: safe mode on / off\n* (2) **`use_transaction: [ true, false, ]`**: explicit vs implicit transaction\n* (2) **`single_connection: [ true, false, ]`**: single connection vs double connection\n* (2) **`use_worker: [ true, false, ]`**: single thread vs main thread + worker thread\n* (2) **`use_subselect_function: [ true, false, ]`**: using a function that does no sub-select vs function\n  that does\n* (4) **`function_type: [ 'none', 'scalar', 'table', 'sqlite', ]`**: SQL using no UDF, using scalar UDF,\n  using table UDF, using SQLite function[^1]\n* (2) **`use_nested_statement: [ true, false, ]`**: use nested statement or not\n\n2^6 * 4^1 = 64 * 4 = 256 possible variants (but minus some impossible combinations)\n\nchanges:\n\n* (?) **`transaction_type: [ 'deferred', ..., ]`**\n* (?) **`journalling_mode: [ 'wal', 'memory', ..., ]`**\n\nNotes:\n\n[^1]: using a function provided by SQLite will not lead to equivalent results because there's no SQLite\n  function that provides a sub-select.\n\n###\n\n############################################################################################################\nif require.main is module then do =>\n  await demo_f()\n\n"
  ]
}