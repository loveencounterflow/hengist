{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-concurrent-writes.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/DEMOS/CONCURRENT-WRITES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nH                         = require '../../../lib/helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require '../../../apps/guy'\nX                         = require '../../../lib/helpers'\nevery                     = ( dts, f ) ->                         setInterval f,    dts * 1000\nafter                     = ( dts, f ) ->                         setTimeout  f,    dts * 1000\nsleep                     = ( dts    ) -> new Promise ( done ) => setTimeout  done, dts * 1000\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_concurrent_writes = ->\n  # T?.halt_on_error()\n  { DBay }            = require '../../../apps/dbay'\n  { SQL  }            = DBay\n  path                = ( PATH.resolve PATH.join __dirname, '../../../dev-shm/concurrent-writes.sqlite' )\n  count               = 0\n  insert_numbers      = null\n  #.........................................................................................................\n  do =>\n    db                  = new DBay { path, }\n    db =>\n      db SQL\"\"\"\n        drop table if exists c;\n        create table c (\n            count integer not null,\n            src   text    not null,\n            n     integer not null,\n            s     integer not null,\n          primary key ( src, n ) );\n        \"\"\"\n    insert_numbers = db.prepare_insert { into: 'c', returning: '*', }\n  #.........................................................................................................\n  insert_one = =>\n    db                  = new DBay { path, }\n    db.begin_transaction()\n    urge '^603-1^', \"start one\"\n    await sleep 0.1\n    src = 'one'\n    for n in [ 1 .. 10 ]\n      count++\n      s   = n ** 2\n      row = { count, src, n, s, }\n      try\n        row = insert_numbers.get row\n      catch error\n        warn '^603-1^', error.message, row\n      help '^603-one^', row\n      await sleep 0.1\n    db.commit_transaction()\n    return null\n  #.........................................................................................................\n  insert_two = =>\n    db                  = new DBay { path, }\n    db.begin_transaction()\n    urge '^603-1^', \"start two\"\n    await sleep 0.1\n    src = 'two'\n    for n in [ 1 .. 10 ]\n      count++\n      s   = n ** 2\n      row = { count, src, n, s, }\n      try\n        row = insert_numbers.get row\n      catch error\n        warn '^603-2^', error.message, row\n      help '^603-two^', row\n      await sleep 0.1\n    db.rollback_transaction()\n    return null\n  #.........................................................................................................\n  p1 = new Promise ( resolve ) =>\n    after 0.5, =>\n      await insert_one()\n      resolve()\n  #.........................................................................................................\n  p2 = new Promise ( resolve ) =>\n    after 0.5, =>\n      await insert_two()\n      resolve()\n  await Promise.all [ p1, p2, ]\n  #.........................................................................................................\n  do =>\n    db                  = new DBay { path, }\n    H.tabulate \"c\", db SQL\"select * from c order by src, n;\"\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  await demo_concurrent_writes()\n"
  ]
}