{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-datetime.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require '../../../apps/guy'\n# { HDML }                  = require '../../../apps/hdml'\nH                         = require '../../../lib/helpers'\n{ lets\n  freeze }                = GUY.lft\n{ to_width }              = require 'to-width'\n{ raw }                   = String\n\n#-----------------------------------------------------------------------------------------------------------\ntabulate = ( db, query ) -> H.tabulate query, db query\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo_datetime = ( cfg ) ->\n  ### https://day.js.org ###\n  dayjs                     = require 'dayjs'\n  do =>\n    utc           = require 'dayjs/plugin/utc';           dayjs.extend utc\n    relativeTime  = require 'dayjs/plugin/relativeTime';  dayjs.extend relativeTime\n    toObject      = require 'dayjs/plugin/toObject';      dayjs.extend toObject\n  #.........................................................................................................\n  { DBay }        = require '../../../apps/dbay'\n  { SQL }         = DBay\n  db              = new DBay()\n  db.create_stdlib()\n  # #---------------------------------------------------------------------------------------------------------\n  # db ->\n  #   #.......................................................................................................\n  #   db.create_function\n  #     name:     'digits_from_time'\n  #     call:     ( time ) -> JSON.stringify ( parseInt d, 10 for d in time when d isnt ':' )\n  #   #.......................................................................................................\n  #   db SQL\"\"\"\n  #     drop table if exists times;\n  #     create table times (\n  #       nr      integer not null primary key,\n  #       time    text not null unique,\n  #       digits  json not null generated always as ( digits_from_time( time ) ) virtual,\n  #       check ( std_re_is_match( time, '^([01][0-9]|2[0-3]):[0-5][0-9]$' ) ) );\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db ->\n    tabulate db, SQL\"\"\"select date(     1092941466, 'auto', 'utc' ) as date;\"\"\"\n    tabulate db, SQL\"\"\"select time(     1092941466, 'auto', 'utc' ) as time;\"\"\"\n    tabulate db, SQL\"\"\"select datetime( 1092941466, 'auto', 'utc' ) as datetime;\"\"\"\n    debug '^45354-1^', dayjs().format                                   'YYYY-MM-DD,HH:mm:ss[Z]'\n    debug '^45354-2^', dayjs().utc().format                             'YYYY-MM-DD,HH:mm:ss[Z]'\n    debug '^45354-3^', ( dayjs    '2022-01-01,18:30' ).format           'YYYY-MM-DD,HH:mm:ss[Z]'\n    debug '^45354-4^', ( dayjs    '2022-01-01,18:30' ).utc().format     'YYYY-MM-DD,HH:mm:ss[Z]'\n    debug '^45354-5^', dayjs.utc( '2022-01-01,18:30' ).format           'YYYY-MM-DD,HH:mm:ss[Z]'\n    debug '^45354-6^', dayjs.utc( '2022-01-01,18:30' ).fromNow()\n    debug '^45354-7^', dayjs.utc( '2023-01-01,18:30' ).fromNow()\n    debug '^45354-8^', dayjs.utc( '2022-01-01,18:30:00Z' ).format       'YYYY-MM-DD,HH:mm:ss[Z]'\n    debug '^45354-9^', dayjs.utc( '2022-01-01,18:30:00Z Mon' ).format   'YYYY-MM-DD,HH:mm:ss[Z]'\n    debug '^45354-10^', dayjs().toISOString()\n    debug '^45354-11^', dayjs().utc().toISOString()\n    debug '^45354-12^', dayjs().toObject()\n    debug '^45354-13^', dayjs().utc().toObject()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_stdlib_api_pre = ( cfg ) ->\n  ### https://day.js.org ###\n  dayjs                     = require 'dayjs'\n  do =>\n    utc           = require 'dayjs/plugin/utc';           dayjs.extend utc\n    relativeTime  = require 'dayjs/plugin/relativeTime';  dayjs.extend relativeTime\n    toObject      = require 'dayjs/plugin/toObject';      dayjs.extend toObject\n  #.........................................................................................................\n  { DBay }        = require '../../../apps/dbay'\n  { SQL }         = DBay\n  db              = new DBay()\n  db.create_stdlib()\n  db.types.declare 'dbay_dt_valid_dayjs', tests:\n    \"( @type_of x ) is 'm'\":  ( x ) -> ( @type_of x ) is 'm'\n    \"@isa.float x.$y\":        ( x ) -> @isa.float x.$y\n    \"@isa.float x.$M\":        ( x ) -> @isa.float x.$M\n    \"@isa.float x.$D\":        ( x ) -> @isa.float x.$D\n    \"@isa.float x.$W\":        ( x ) -> @isa.float x.$W\n    \"@isa.float x.$H\":        ( x ) -> @isa.float x.$H\n    \"@isa.float x.$m\":        ( x ) -> @isa.float x.$m\n    \"@isa.float x.$s\":        ( x ) -> @isa.float x.$s\n    \"@isa.float x.$ms\":       ( x ) -> @isa.float x.$ms\n  #---------------------------------------------------------------------------------------------------------\n  create_stdlib = ->\n    DBay_timestamp_template = 'YYYY-MM-DD,HH:mm:ss[Z]'\n    prefix                  = 'std_'\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      ### Returns a DBay_timestamp representing the present point in time. ###\n      name:           prefix + 'dt_now'\n      deterministic:  false\n      varargs:        false\n      call:           => dayjs().utc().format DBay_timestamp_template\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      ### Given a DBay_timestamp, returns an English human-readable text indicating the remoteness of that\n      time relative to now, like 'four minutes ago' or 'in a week'. ###\n      name:           prefix + 'dt_from_now'\n      deterministic:  false\n      varargs:        false\n      call:           ( dt ) => ( dayjs().utc dt ).fromNow()\n    #-------------------------------------------------------------------------------------------------------\n    @dt_parse = ( dbay_timestamp ) ->\n      unless /^\\d\\d\\d\\d-\\d\\d-\\d\\d,\\d\\d:\\d\\d:\\d\\dZ$/.test dbay_timestamp\n        throw new Error \"not a valid dbay_timestamp: #{rpr dbay_timestamp}\"\n      R = dayjs.utc dbay_timestamp\n      unless @types.isa.dbay_dt_valid_dayjs R\n        throw new Error \"not a valid dbay_timestamp: #{rpr dbay_timestamp}\"\n      return R\n  #---------------------------------------------------------------------------------------------------------\n  create_stdlib.apply db\n  db ->\n    # tabulate db, SQL\"\"\"select date(     1092941466, 'auto', 'utc' ) as date;\"\"\"\n    # tabulate db, SQL\"\"\"select time(     1092941466, 'auto', 'utc' ) as time;\"\"\"\n    # tabulate db, SQL\"\"\"select datetime( 1092941466, 'auto', 'utc' ) as datetime;\"\"\"\n    debug '^453-1^', dayjs().format                                   'YYYY-MM-DD,HH:mm:ss[Z]'\n    tabulate db, SQL\"\"\"select std_dt_now() as dt;\"\"\"\n    debug '^453-2^', dayjs().utc().format                             'YYYY-MM-DD,HH:mm:ss[Z]'\n    debug '^453-3^', db.dt_parse '2022-01-01,18:30:00Z'\n    debug '^453-3^', db.dt_parse '2022-01-01,18:30:99Z'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_dayjs_parse_custom_format = ->\n  dayjs                     = require 'dayjs'\n  do =>\n    utc               = require 'dayjs/plugin/utc';               dayjs.extend utc\n    relativeTime      = require 'dayjs/plugin/relativeTime';      dayjs.extend relativeTime\n    toObject          = require 'dayjs/plugin/toObject';          dayjs.extend toObject\n    customParseFormat = require 'dayjs/plugin/customParseFormat'; dayjs.extend customParseFormat\n  debug '^34534534^', ( dayjs '19951225-123456Z', 'YYYYMMDD-HHmmssZ' )\n  debug '^34534534^', ( dayjs '19951225-123456Z', 'YYYYMMDD-HHmmssZ' ).toISOString()\n  debug '^34534534^', ( dayjs '20220101-123456Z', 'YYYYMMDD-HHmmssZ' )\n  debug '^34534534^', ( dayjs '20220101-123456Z', 'YYYYMMDD-HHmmssZ' ).toISOString()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_stdlib_api = ( cfg ) ->\n  { DBay }        = require '../../../apps/dbay'\n  { SQL }         = DBay\n  db              = new DBay()\n  db.create_stdlib()\n  #---------------------------------------------------------------------------------------------------------\n  db ->\n    debug '^34534^', db.dt_now()\n    debug '^34534^', db.dt_from_now '20220101-183000Z'\n    tabulate db, SQL\"\"\"select std_dt_now() as date;\"\"\"\n    tabulate db, SQL\"\"\"select std_dt_from_now( '20220101-183000Z' ) as date;\"\"\"\n  return null\n\n############################################################################################################\nif require.main is module then do =>\n  # @demo_datetime()\n  @demo_stdlib_api()\n  # @demo_dayjs_parse_custom_format()\n"
  ]
}