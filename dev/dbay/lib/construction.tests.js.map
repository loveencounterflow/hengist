{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/construction.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/CONSTRUCTION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY _get-autolocation\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  T?.eq ( DH.is_directory '/tmp'                                              ), true\n  T?.eq ( DH.is_directory '/nonexistant-path-395827345826345762347856374562'  ), false\n  T?.eq ( DH.is_directory __filename                                          ), false\n  T?.eq ( DH.is_directory __dirname                                           ), true\n  T?.ok DH.autolocation in [ '/dev/shm', ( require 'os' ).tmpdir(), ]\n  T?.eq DBay.C.autolocation, DH.autolocation\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY constructor arguments 1\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }            = require H.dbay_path\n  resolved_path       = PATH.resolve process.cwd(), 'mypath'\n  autolocation        = ( require '../../../apps/dbay/lib/helpers' ).autolocation\n  join                = ( P... ) -> PATH.resolve PATH.join P...\n  class DBay2 extends DBay\n    @_skip_sqlt:    true\n  #.........................................................................................................\n  # { work_path: db_path, } = await H.procure_db { size: 'small', ref: 'ctor-1', }\n  # info '^3443^', { db_path, }\n  #.........................................................................................................\n  relpath = 'mypath/myname'\n  abspath = PATH.resolve process.cwd(), PATH.join relpath\n  probes_and_matchers = [\n    #-------------------------------------------------------------------------------------------------------\n    null\n    [ { random_seed: 1, random_delta: 1,  temporary: null   }, { path: ( join autolocation, 'dbay-7388632709.sqlite' ),   temporary: true  }, null ]\n    [ { random_seed: 1, random_delta: 1,  temporary: false  }, { path: ( join autolocation, 'dbay-7388632709.sqlite' ),   temporary: false }, null ]\n    [ { random_seed: 1, random_delta: 1,  temporary: true   }, { path: ( join autolocation, 'dbay-7388632709.sqlite' ),   temporary: true  }, null ]\n    [ { path: relpath,                    temporary: null,  }, { path: abspath,                             temporary: false }, null ]\n    [ { path: relpath,                    temporary: false, }, { path: abspath,                             temporary: false }, null ]\n    [ { path: relpath,                    temporary: true,  }, { path: abspath,                             temporary: true  }, null ]\n    ]\n  #.........................................................................................................\n  for x in probes_and_matchers\n    if x is null\n      whisper '-'.repeat 108\n      continue\n    [ probe, matcher, error, ] = x\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      db      = new DBay2 probe\n      result  = { db.cfg..., }\n      for k of result\n        delete result[ k ] unless k in [ 'path', 'temporary', ]\n      # debug '^657561^', result, matcher, equals result, matcher\n      #...................................................................................................\n      # debug '^341^', db\n      # debug '^341^', db._dbs\n      resolve result\n  # for _ in [ 1 .. 3 ]\n  #   do =>\n  #     db = new DBay()\n  #     whisper '---------------------'\n  #     info '^345657^', db.rnd.get_random_filename()\n  #     info '^345657^', db.rnd.get_random_filename()\n  #     info '^345657^', db.rnd.get_random_filename()\n  #     info '^345657^', db.rnd.get_random_filename()\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY instance has two connections\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { DBay }        = require H.dbay_path\n  Sqlt            = require PATH.join H.dbay_path, 'node_modules/better-sqlite3'\n  bsqlite_class   = Sqlt().constructor\n  db              = new DBay()\n  # debug '^332^', db\n  # debug '^332^', db.cfg\n  #.........................................................................................................\n  info '^908-2^', db.sqlt1.constructor is bsqlite_class\n  #.........................................................................................................\n  T?.ok db.sqlt1.constructor is bsqlite_class\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY instance has property `alt` (alternative connection)\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { DBay }        = require H.dbay_path\n  Sqlt            = require PATH.join H.dbay_path, 'node_modules/better-sqlite3'\n  bsqlite_class   = Sqlt().constructor\n  db              = new DBay()\n  #.........................................................................................................\n  # db.open { schema: 'main', }\n  db.execute SQL\"\"\"\n    create table foo ( n integer );\n    create table bar ( n integer );\"\"\"\n  for n in [ 10 .. 12 ]\n    db SQL\"insert into foo ( n ) values ( $n );\", { n, }\n  #.........................................................................................................\n  do =>\n    help '^806-1^ ------------------------'\n    error = null\n    try\n      db.with_transaction =>\n        for row from db SQL\"select * from foo order by n;\"\n          info '^806-2^', row\n          db SQL\"insert into bar values ( $n );\", { n: n ** 2, }\n        return null\n    catch error\n      warn error.name, error.message\n    T?.fail \"^806-3^ expected error, got none\" unless error?\n  # #.........................................................................................................\n  # do =>\n  #   help '^806-4^ ------------------------'\n  #   insert_into_bar = db.prepare SQL\"insert into bar values ( $n ) returning *;\"\n  #   db.with_transaction =>\n  #     for { n, } from ( db.sqlt2.prepare SQL\"select * from foo order by n;\" ).iterate()\n  #       info '^806-5^', { n, }\n  #       urge '^806-6^', insert_into_bar.get { n: n ** 2, }\n  #     return null\n  # #.........................................................................................................\n  # do =>\n  #   help '^806-7^ ------------------------'\n  #   db.with_transaction =>\n  #     for { n, } from ( db.sqlt2.prepare SQL\"select * from foo order by n;\" ).iterate()\n  #       info '^806-8^', { n, }\n  #       urge '^806-9^', db.first_row SQL\"insert into bar values ( $n ) returning *;\", { n: n ** 2, }\n  #     return null\n  #.........................................................................................................\n  do =>\n    help '^806-10^ ------------------------'\n    insert_into_bar = db.prepare SQL\"insert into bar values ( $n ) returning *;\"\n    db.with_transaction =>\n      for { n, } from db.alt SQL\"select * from foo order by n;\"\n        #             ^^^^^^\n        info '^806-12^', { n, }\n        urge '^806-13^', db.first_row SQL\"insert into bar values ( $n ) returning *;\", { n: n ** 2, }\n      return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY instance non-enumerable properties\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { DBay }        = require H.dbay_path\n  Sqlt            = require PATH.join H.dbay_path, 'node_modules/better-sqlite3'\n  db              = new DBay()\n  debug '^332^', db\n  T?.eq ( Object.getOwnPropertyDescriptor db, 'sqlt1'     ).enumerable, false\n  T?.eq ( Object.getOwnPropertyDescriptor db, 'rnd'       ).enumerable, false\n  # debug '^332^', db.cfg\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY instance has property `_dayjs`\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { DBay }        = require H.dbay_path\n  db              = new DBay()\n  T?.eq ( type_of db._dayjs ), 'function'\n  T?.eq ( type_of db._dayjs.utc ), 'function'\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_SQL_sql_available_on_module = ( T, done ) ->\n  # T?.halt_on_error()\n  { SQL\n    sql  }        = require H.dbay_path\n  T?.eq ( type_of SQL ), 'function'\n  T?.eq ( type_of sql ), 'sql'\n  T?.eq ( isa.object sql ), true\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_SQL_sql_available_on_class = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }        = require H.dbay_path\n  { SQL\n    sql  }        = DBay\n  T?.eq ( type_of SQL ), 'function'\n  T?.eq ( type_of sql ), 'sql'\n  T?.eq ( isa.object sql ), true\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_SQL_sql_available_on_instance = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }        = require H.dbay_path\n  { SQL\n    sql  }        = new DBay()\n  T?.eq ( type_of SQL ), 'function'\n  T?.eq ( type_of sql ), 'sql'\n  T?.eq ( isa.object sql ), true\n  done?()\n\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # test @[ \"DBAY _get-autolocation\" ]\n  # test @[ \"DBAY constructor arguments 1\" ]\n  # @[ \"DBAY instance has property `alt` (alternative connection)\" ]()\n  # test @[ \"DBAY instance has property `_dayjs`\" ]\n  # test @[ \"DBAY URL/path conversion\" ]\n  # test @[ \"xxx\" ]\n  # test @[ \"DBAY instance has two connections\" ]\n  # test @[ \"DBAY instance non-enumerable properties\" ]\n  # test @dbay_SQL_sql_available_on_module\n  # test @dbay_SQL_sql_available_on_class\n  test @dbay_SQL_sql_available_on_instance\n\n"
  ]
}