{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/construction.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/CONSTRUCTION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY _get-autolocation\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { Dbay }            = require H.dbay_path\n  DH                  = require PATH.join H.dbay_path, 'lib/helpers'\n  T?.eq ( DH.is_directory '/tmp'                                              ), true\n  T?.eq ( DH.is_directory '/nonexistant-path-395827345826345762347856374562'  ), false\n  T?.eq ( DH.is_directory __filename                                          ), false\n  T?.eq ( DH.is_directory __dirname                                           ), true\n  T?.ok DH.autolocation in [ '/dev/shm', ( require 'os' ).tmpdir(), ]\n  T?.eq Dbay.C.autolocation, DH.autolocation\n  return done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY constructor arguments 1\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { Dbay }           = require H.dbay_path\n  resolved_path      = PATH.resolve process.cwd(), 'mypath'\n  class Dbay2 extends Dbay\n    @_skip_sqlt:    true\n    @_rnd_int_cfg:  true\n  #.........................................................................................................\n  # { work_path: db_path, } = await H.procure_db { size: 'small', ref: 'ctor-1', }\n  # info '^3443^', { db_path, }\n  #.........................................................................................................\n  probes_and_matchers = [\n    #-------------------------------------------------------------------------------------------------------\n    null\n    [ { path: null,            temporary: null,  }, { path: '/dev/shm/dbay-6200294332.sqlite',   temporary: true  }, null,              ]\n    [ { path: null,            temporary: false, }, { path: '/dev/shm/dbay-6200294332.sqlite',   temporary: false }, null,              ]\n    [ { path: null,            temporary: true,  }, { path: '/dev/shm/dbay-6200294332.sqlite',   temporary: true  }, null,              ]\n    [ { path: 'mypath/myname', temporary: null,  }, { path: '/home/flow/jzr/dbay/mypath/myname', temporary: false }, null,              ]\n    [ { path: 'mypath/myname', temporary: false, }, { path: '/home/flow/jzr/dbay/mypath/myname', temporary: false }, null,              ]\n    [ { path: 'mypath/myname', temporary: true,  }, { path: '/home/flow/jzr/dbay/mypath/myname', temporary: true  }, null,              ]\n    ]\n  #.........................................................................................................\n  for x in probes_and_matchers\n    if x is null\n      whisper '-'.repeat 108\n      continue\n    [ probe, matcher, error, ] = x\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      do =>\n        db      = new Dbay2 probe\n        result  = { db.cfg..., }\n        for k of result\n          delete result[ k ] unless k in [ 'path', 'tempory', ]\n        #...................................................................................................\n        # debug '^341^', db\n        # debug '^341^', db._dbs\n        resolve matcher\n      return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY instance has two connections\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { Dbay }        = require H.dbay_path\n  Sqlt            = require PATH.join H.dbay_path, 'node_modules/better-sqlite3'\n  bsqlite_class   = Sqlt().constructor\n  db              = new Dbay()\n  # debug '^332^', db\n  # debug '^332^', db.cfg\n  #.........................................................................................................\n  info '^908-1^', equals db.sqlt1.name, db.sqlt2.name\n  info '^908-2^', db.sqlt1.constructor is bsqlite_class\n  info '^908-3^', db.sqlt2.constructor is bsqlite_class\n  info '^908-4^', db.sqlt2.constructor is db.sqlt1.constructor\n  info '^908-5^', db.sqlt2 isnt db.sqlt1\n  #.........................................................................................................\n  T?.eq db.sqlt1.name, db.sqlt2.name\n  T?.ok db.sqlt1.constructor is bsqlite_class\n  T?.ok db.sqlt2.constructor is bsqlite_class\n  T?.ok db.sqlt2.constructor is db.sqlt1.constructor\n  T?.ok db.sqlt2 isnt db.sqlt1\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY instance non-enumerable properties\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { Dbay }        = require H.dbay_path\n  Sqlt            = require PATH.join H.dbay_path, 'node_modules/better-sqlite3'\n  db              = new Dbay()\n  debug '^332^', db\n  T?.eq ( Object.getOwnPropertyDescriptor db, 'sqlt1'     ).enumerable, false\n  T?.eq ( Object.getOwnPropertyDescriptor db, 'sqlt2'     ).enumerable, false\n  T?.eq ( Object.getOwnPropertyDescriptor db, '_rnd_int'  ).enumerable, false\n  # debug '^332^', db.cfg\n  done?()\n\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n  # test @[ \"DBAY attach memory connections\" ]\n  # @[ \"DBAY attach memory connections\" ]()\n  # test @[ \"DBAY constructor arguments 1\" ]\n  # test @[ \"DBAY _get-autolocation\" ]\n  # test @[ \"DBAY instance non-enumerable properties\" ]\n  # test @[ \"DBAY: _get_connection_url()\" ]\n  # test @[ \"DBAY instance has two connections\" ]\n\n"
  ]
}