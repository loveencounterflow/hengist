{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/windowed-search-demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/WINDOWED-SEARCH.DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\n# types                     = new ( require 'intertype' ).Intertype\n# { isa\n#   type_of\n#   validate\n#   validate_list_of }      = types.export()\nSQL                       = String.raw\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_1 = ->\n  { DBay }          = require H.dbay_path\n  { Tbl, }          = require '../../../apps/icql-dba-tabulate'\n  db                = new DBay()\n  dtab              = new Tbl { db, }\n  db =>\n    db SQL\"\"\"\n      create table ads (\n        nr    integer not null primary key,\n        chrs  text    not null,\n        nobr  boolean not null,\n        br    text );\"\"\"\n    insert  = db.prepare_insert { into: 'ads', exclude: [ 'nr', ], }\n    text    = \"The Affirmation\"\n    text    = text.replace /&shy;/g, '\\xad'\n    parts   = [\n      { chrs: \"T\", nobr: 0, br: null,  }\n      { chrs: \"h\", nobr: 0, br: null,  }\n      { chrs: \"e\", nobr: 0, br: null,  }\n      { chrs: \" \", nobr: 0, br: null,  }\n      { chrs: \"A\", nobr: 0, br: null,  }\n      { chrs: \"f\", nobr: 0, br: null,  }\n      { chrs: \"f\", nobr: 1, br: null,  }\n      { chrs: \"i\", nobr: 1, br: 'shy', }\n      { chrs: \"r\", nobr: 0, br: null,  }\n      { chrs: \"m\", nobr: 1, br: null,  }\n      { chrs: \"a\", nobr: 0, br: null,  }\n      { chrs: \"t\", nobr: 0, br: 'shy', }\n      { chrs: \"i\", nobr: 1, br: null,  }\n      { chrs: \"o\", nobr: 0, br: null,  }\n      { chrs: \"n\", nobr: 0, br: null,  } ]\n    insert.run part for part in parts\n  #.........................................................................................................\n  echo dtab._tabulate db SQL\"select * from ads order by nr;\"\n  # echo dtab._tabulate db SQL\"\"\"\n  #   with v1 as ( select\n  #       nr,\n  #       chrs,\n  #       nobr,\n  #       br,\n  #       lag( nr ) over () as prv_nr\n  #     from ads )\n  #   select\n  #       nr,\n  #       chrs,\n  #       case when nobr then lag( prv_nr ) over () else nr end as first_nr_1,\n  #       case when nobr then prv_nr else nr end as first_nr_2\n  #     from v1\n  #     order by nr;\"\"\"\n  echo dtab._tabulate db SQL\"\"\"\n    with v1 as ( select\n        nr,\n        chrs,\n        nobr,\n        dense_rank() over ( partition by nobr order by nr ) as rank,\n        case when lead( nobr ) over ( order by nr ) = nobr then lag( nr ) over ( order by nr ) else\n          nr end as group_nr,\n        -- first_value( nr ) over ( partition by nobr order by nr ) as group_nr,\n        br\n      from ads )\n    select * from v1\n    order by nr;\"\"\"\n  echo dtab._tabulate db SQL\"\"\"\n    with v1 as ( select\n        nr,\n        chrs,\n        nobr,\n        lead( nobr ) over ( order by nr ) as nxt_nobr,\n        br\n      from ads ),\n    v2 as ( select\n        *,\n        dense_rank() over ( order by nr ) - nr as group_id\n      from v1\n      where nobr or nxt_nobr\n      )\n    select\n        * -- first_value( nr )\n      from v2\n      order by nr;\"\"\"\n  #.........................................................................................................\n  # echo dtab._tabulate db SQL\"\"\"\n  #   with v1 as ( select\n  #       dense_rank() over ( order by nr, nobr ) - nr as group_id,\n  #       nr\n  #     from ads )\n  #   select\n  #       min( group_id ) as nr_1,\n  #       max( group_id ) as nr_2\n  #     from v1\n  #     group by group_id\n  #     -- where br = 'shy'\n  #     order by nr;\"\"\"\n  # #.........................................................................................................\n  # echo dtab._tabulate db SQL\"\"\"\n  #   select\n  #       nr                                                  as nr_0,\n  #       chrs                                                as chrs_0,\n  #       nobr                                                as nobr_0,\n  #       rank() over ( partition by nobr order by nr ) as nobr_x,\n  #       -- case when nobr then lag( nr, 1 ) over () else null end as yyy,\n  #       case when nobr then first_value( nr ) over ( partition by br, nobr order by nr ) - 1 else nr end as zzz,\n  #       br                                                  as br_0\n  #       -- row_number() over ( partition by nobr order by nr ) as xxx\n  #     from ads\n  #     -- where br = 'shy'\n  #     order by nr;\"\"\"\n  # #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_2 = ->\n  { DBay }          = require H.dbay_path\n  { Tbl, }          = require '../../../apps/icql-dba-tabulate'\n  db                = new DBay()\n  dtab              = new Tbl { db, }\n  db =>\n    db SQL\"\"\"\n      create table t1(\n          a integer primary key,\n          b,\n          c,\n          nobr boolean );\n      insert into t1 values\n        (1, 'a', 'one',   0,  ),\n        (2, 'b', 'two',   0,  ),\n        (3, 'c', 'three', 0,  ),\n        (4, 'd', 'one',   1,  ),\n        (5, 'e', 'two',   0,  ),\n        (6, 'f', 'three', 0,  ),\n        (7, 'g', 'one',   0,  );\"\"\"\n  #.........................................................................................................\n  echo dtab._tabulate db SQL\"select * from t1 order by 1, 2, 3;\"\n  echo dtab._tabulate db SQL\"\"\"\n    select\n        b                               as b,\n        lead( b, 2, 'n/a' )     over w1 as lead,\n        lag( b )                over w1 as lag,\n        first_value( b )        over w1 as first_value,\n        last_value( b )         over w1 as last_value,\n        nth_value( b, 3 )       over w1 as nth_value_3\n      from t1\n      window w1 as (\n        order by b\n        rows between unbounded preceding and current row );\"\"\"\n  #.........................................................................................................\n  return null\n\n\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  @demo_1()\n  # @demo_2()\n\n\n\n\n"
  ]
}