{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sql-generation.tests.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,wBAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,QAFF,EAGE,gBAHF,CAAA,GAG4B,KAAK,CAAC,MAAN,CAAA,CAH5B;;EAIA,GAAA,GAA4B,MAAM,CAAC;;EACnC,CAAA,GAA4B,MAAM,CAAC,IAxBnC;;;EA4BA,IAAC,CAAE,kBAAF,CAAD,GAA0B,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC1B,QAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA;;IACE,CAAA,CAAE,IAAF,CAAA,GAAoB,OAAA,CAAQ,CAAC,CAAC,SAAV,CAApB;IACA,EAAA,GAAoB,IAAI,IAAJ,CAAA;IACpB,CAAA,CAAE,GAAF,CAAA,GAAoB,OAAA,CAAQ,iCAAR,CAApB;IACA,IAAA,GAAoB,IAAI,GAAJ,CAAQ;MAAE,GAAA,EAAK;IAAP,CAAR;IACpB,MAAA,GAAoB,OALtB;;;MAOE,CAAC,CAAE,MAAH,CAAU,qCAAV,EAAiD,CAAA,CAAA,GAAA;eAAG,EAAE,CAAC,gBAAH,CAAoB,MAApB,EAA4B,QAA5B;MAAH,CAAjD;KAPF;;IASE,EAAA,CAAG,QAAA,CAAA,CAAA;AACL,UAAA;MAAI,EAAA,CAAG,GAAG,CAAA;;;4BAAA,CAAN;MAMA,GAAA,GAAM,EAAE,CAAC,aAAH,CAAiB;QAAE,MAAF;QAAU,IAAA,EAAM;MAAhB,CAAjB;yBACN,CAAC,CAAE,EAAH,CAAM,GAAN,EAAW,CAAA,wFAAA,CAAX;IARC,CAAH;wCAcA;EAxBwB,EA5B1B;;;EAyDA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA;aAChC,IAAA,CAAK,IAAL,EAAQ;QAAE,OAAA,EAAS;MAAX,CAAR;IADgC,CAAA,IAAlC;;;EAzDA;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/SQL-GENERATION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nr                         = String.raw\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY Sqlgen demo\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  db                = new DBay()\n  { Tbl, }          = require '../../../apps/icql-dba-tabulate'\n  dtab              = new Tbl { dba: db, }\n  schema            = 'main'\n  #.........................................................................................................\n  T?.throws /object 'main.cities' does not exist/, => db._get_field_names 'main', 'cities'\n  #.........................................................................................................\n  db ->\n    db SQL\"\"\"\n      create table cities (\n        id      integer not null primary key,\n        name    text    not null,\n        country text    not null )\n      \"\"\"\n    sql = db.create_insert { schema, into: 'cities', }\n    T?.eq sql, \"\"\"insert into \"main\".\"cities\" ( \"id\", \"name\", \"country\" ) values ( $id, $name, $country );\"\"\"\n    # echo dtab._tabulate db SQL\"select type, name from sqlite_schema;\"\n    # echo dtab._tabulate db SQL\"select * from #{schema}.pragma_table_info( $name );\", { name: 'cities', }\n    # debug '^33443^', db._get_fields { schema, name: 'cities', }\n    # echo dtab._tabulate ( row for _, row of db._get_fields { schema, name: 'cities', } )\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  test @, { timeout: 10e3, }\n  # @[ \"_DBAY Sqlgen demo\" ]()\n\n\n\n\n\n\n\n"
  ]
}