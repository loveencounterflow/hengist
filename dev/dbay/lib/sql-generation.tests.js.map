{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sql-generation.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/SQL-GENERATION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nr                         = String.raw\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY Sqlgen isa.dbay_create_insert_cfg()\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  db                = new DBay()\n  { Tbl, }          = require '../../../apps/icql-dba-tabulate'\n  dtab              = new Tbl { dba: db, }\n  schema            = 'main'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ {}, null, /violates '@isa.dbay_name x.into'/, ]\n    [ { into: 'foobar', }, true, ]\n    [ { schema: 'blah', into: 'foobar', }, true, ]\n    [ { into: 'foobar', fields: [ 'a', 'b', ], }, true, ]\n    [ { into: 'foobar', exclude: [ 'a', 'b', ], }, true, ]\n    [ { into: 'foobar', exclude: [ 'a', 'b', ], on_conflict: SQL\"do nothing\", }, true, ]\n    [ { into: 'foobar', fields: [ 'a', 'b', ], exclude: [ 'a', 'b', ], }, null, /violates 'either x.fields or x.exclude may be a nonempty list of nonempty_texts'/, ]\n    [ { into: 'foobar', fields: [], }, null, /violates 'either x.fields or x.exclude may be a nonempty list of nonempty_texts'/, ]\n    [ { into: 'foobar', exclude: [], }, null, /violates 'either x.fields or x.exclude may be a nonempty list of nonempty_texts'/, ]\n    [ { into: 'foobar', exclude: 'c', }, null, /violates 'either x.fields or x.exclude may be a nonempty list of nonempty_texts'/, ]\n    [ { into: 'foobar', on_conflict: 42, }, null, /violates/, ]\n    [ { into: 'foobar', on_conflict: { update: true, }, }, true, ]\n    [ { into: 'foobar', on_conflict: { update: [ 'b', ], }, }, null, /violates/, ]\n    ]\n  #.........................................................................................................\n  # debug intersection_of [ 1, 2, 3, ], [ 'a', 3, 1, ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      cfg     = probe\n      cfg     = ( cfg = { DBay.C.defaults.dbay_create_insert_cfg..., cfg..., } )\n      result  = db.types.validate.dbay_create_insert_cfg cfg\n      resolve result\n      return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY Sqlgen create_insert() 1\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  db                = new DBay()\n  { Tbl, }          = require '../../../apps/icql-dba-tabulate'\n  dtab              = new Tbl { dba: db, }\n  schema            = 'main'\n  #.........................................................................................................\n  T?.throws /object 'main.cities' does not exist/, => db._get_field_names 'main', 'cities'\n  #.........................................................................................................\n  db ->\n    T?.throws /syntax error/, -> db SQL\"create table xy ();\"\n  #.........................................................................................................\n  db ->\n    db SQL\"\"\"create table xy (\n      id      integer primary key,\n      next_id integer generated always as ( id + 1 ) );\"\"\"\n    sql = db.create_insert { into: 'xy', }\n    urge '^4498^', rpr sql\n    T?.eq sql, 'insert into \"main\".\"xy\" ( \"id\" ) values ( $id );'\n    db SQL\"rollback;\"\n  #.........................................................................................................\n  db ->\n    db SQL\"\"\"\n      create table xy (\n        a   integer not null primary key,\n        b   text not null,\n        c   boolean not null );\"\"\"\n    sql = db.create_insert { into: 'xy', }\n    urge '^4498^', rpr sql\n    T?.eq sql, 'insert into \"main\".\"xy\" ( \"a\", \"b\", \"c\" ) values ( $a, $b, $c );'\n    db SQL\"rollback;\"\n  #.........................................................................................................\n  db ->\n    # from https://www.sqlite.org/gencol.html\n    db SQL\"\"\"\n      create table t1(\n         a integer primary key,\n         b integer,\n         c text,\n         d integer generated always as (a*abs(b)) virtual,\n         e text generated always as (substr(c,b,b+1)) stored );\"\"\"\n    #.......................................................................................................\n    sql = db.create_insert { into: 't1', }\n    urge '^4498^', rpr sql\n    T?.eq sql, 'insert into \"main\".\"t1\" ( \"a\", \"b\", \"c\" ) values ( $a, $b, $c );'\n    #.......................................................................................................\n    sql = db.create_insert { into: 't1', fields: [ 'b', 'c', ], }\n    urge '^4498^', rpr sql\n    T?.eq sql, 'insert into \"main\".\"t1\" ( \"b\", \"c\" ) values ( $b, $c );'\n    #.......................................................................................................\n    sql = db.create_insert { into: 't1', exclude: [ 'a', ], }\n    urge '^4498^', rpr sql\n    T?.eq sql, 'insert into \"main\".\"t1\" ( \"b\", \"c\" ) values ( $b, $c );'\n    #.......................................................................................................\n    sql = db.create_insert { into: 't1', exclude: [ 'a', ], on_conflict: \"do nothing\", }\n    urge '^4498^', rpr sql\n    T?.eq sql, 'insert into \"main\".\"t1\" ( \"b\", \"c\" ) values ( $b, $c ) on conflict do nothing;'\n    #.......................................................................................................\n    sql = db.create_insert { into: 't1', exclude: [ 'a', ], on_conflict: { update: true, }, }\n    urge '^4498^', rpr sql\n    T?.eq sql, 'insert into \"main\".\"t1\" ( \"b\", \"c\" ) values ( $b, $c ) on conflict do update set \"b\" = excluded.\"b\", \"c\" = excluded.\"c\";'\n    #.......................................................................................................\n    echo dtab._tabulate db SQL\"select * from pragma_table_info( 't1' );\"\n    echo dtab._tabulate db SQL\"select * from pragma_table_xinfo( 't1' );\"\n    db SQL\"rollback;\"\n  #.........................................................................................................\n  db ->\n    db SQL\"\"\"\n      create table cities (\n        id      integer not null primary key,\n        name    text    not null,\n        country text    not null )\n      \"\"\"\n    sql = db.create_insert { schema, into: 'cities', }\n    T?.eq sql, \"\"\"insert into \"main\".\"cities\" ( \"id\", \"name\", \"country\" ) values ( $id, $name, $country );\"\"\"\n    # echo dtab._tabulate db SQL\"select type, name from sqlite_schema;\"\n    # echo dtab._tabulate db SQL\"select * from #{schema}.pragma_table_info( $name );\", { name: 'cities', }\n    # debug '^33443^', db._get_fields { schema, name: 'cities', }\n    # echo dtab._tabulate ( row for _, row of db._get_fields { schema, name: 'cities', } )\n    db SQL\"rollback;\"\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY Sqlgen create_insert() 2\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  db                = new DBay()\n  { Tbl, }          = require '../../../apps/icql-dba-tabulate'\n  dtab              = new Tbl { dba: db, }\n  schema            = 'main'\n  #.........................................................................................................\n  db ->\n    db SQL\"\"\"\n      create table xy (\n        a   integer not null primary key,\n        b   text not null,\n        c   boolean not null );\"\"\"\n    urge '^4498^', db.create_insert { into: 'xy', }\n    urge '^4498^', db.create_insert { into: 'xy', fields: [ 'b', 'c', ] }\n    urge '^4498^', db.create_insert { into: 'xy', exclude: [ 'a', ], }\n    insert_into_xy = db.prepare_insert { into: 'xy', exclude: [ 'a', ], }\n    insert_into_xy.run { b: 'one', c: 1, }\n    insert_into_xy.run { b: 'two', c: 1, }\n    insert_into_xy.run { b: 'three', c: 1, }\n    insert_into_xy.run { b: 'four', c: 1, }\n    echo dtab._tabulate db SQL\"select * from xy order by a;\"\n    T?.eq ( db.all_rows SQL\"select * from xy order by a;\" ), [ { a: 1, b: 'one', c: 1 }, { a: 2, b: 'two', c: 1 }, { a: 3, b: 'three', c: 1 }, { a: 4, b: 'four', c: 1 } ]\n    db SQL\"rollback;\"\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY Sqlgen on_conflict 1\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  db                = new DBay()\n  { Tbl, }          = require '../../../apps/icql-dba-tabulate'\n  dtab              = new Tbl { dba: db, }\n  schema            = 'main'\n  #.........................................................................................................\n  db SQL\"\"\"\n    create table xy (\n      a   integer not null primary key,\n      b   text not null,\n      c   integer not null );\"\"\"\n  #.........................................................................................................\n  db ->\n    insert_into_xy_sql = db.create_insert { into: 'xy', on_conflict: SQL\"do nothing\", }\n    urge '^4400^', rpr insert_into_xy_sql\n    T?.eq insert_into_xy_sql, 'insert into \"main\".\"xy\" ( \"a\", \"b\", \"c\" ) values ( $a, $b, $c ) on conflict do nothing;'\n    db insert_into_xy_sql, { a: 1, b: 'one', c: 1, }\n    db insert_into_xy_sql, { a: 1, b: 'two', c: 2, }\n    db insert_into_xy_sql, { a: 1, b: 'three', c: 3, }\n    db insert_into_xy_sql, { a: 1, b: 'four', c: 4, }\n    echo dtab._tabulate db SQL\"select * from xy order by a;\"\n    T?.eq ( db.all_rows SQL\"select * from xy order by a;\" ), [ { a: 1, b: 'one', c: 1 } ]\n    db SQL\"rollback;\"\n  #.........................................................................................................\n  db ->\n    insert_into_xy_sql = db.create_insert { into: 'xy', on_conflict: { update: true, }, }\n    urge '^4400^', rpr insert_into_xy_sql\n    T?.eq insert_into_xy_sql, 'insert into \"main\".\"xy\" ( \"a\", \"b\", \"c\" ) values ( $a, $b, $c ) on conflict do update set \"a\" = excluded.\"a\", \"b\" = excluded.\"b\", \"c\" = excluded.\"c\";'\n    db insert_into_xy_sql, { a: 1, b: 'one', c: 1, }\n    db insert_into_xy_sql, { a: 1, b: 'two', c: 2, }\n    db insert_into_xy_sql, { a: 1, b: 'three', c: 3, }\n    db insert_into_xy_sql, { a: 1, b: 'four', c: 4, }\n    echo dtab._tabulate db SQL\"select * from xy order by a;\"\n    T?.eq ( db.all_rows SQL\"select * from xy order by a;\" ), [ { a: 1, b: 'four', c: 4 } ]\n    db SQL\"rollback;\"\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  test @, { timeout: 10e3, }\n  # @[ \"_DBAY Sqlgen demo\" ]()\n  # test @[ \"DBAY Sqlgen create_insert() 2\" ]\n  # test @[ \"DBAY Sqlgen isa.dbay_create_insert_cfg()\" ]\n  # test @[ \"DBAY Sqlgen on_conflict 2\" ]\n\n\n\n\n\n\n\n"
  ]
}