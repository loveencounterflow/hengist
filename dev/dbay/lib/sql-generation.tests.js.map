{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sql-generation.tests.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,wBAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,QAFF,EAGE,gBAHF,CAAA,GAG4B,KAAK,CAAC,MAAN,CAAA,CAH5B;;EAIA,GAAA,GAA4B,MAAM,CAAC;;EACnC,CAAA,GAA4B,MAAM,CAAC;;EAEnC,UAAA,GAAa,QAAA,CAAA,CAAA;AACb,QAAA,IAAA,EAAA;IAAE,CAAA,CAAE,IAAF,CAAA,GAAY,OAAA,CAAQ,CAAC,CAAC,SAAV,CAAZ;IACA,KAAA,GAAY,OAAA,CAAQ,IAAI,CAAC,IAAL,CAAU,CAAC,CAAC,SAAZ,EAAuB,WAAvB,CAAR,EADd;;IAIE,KAAK,CAAC,OAAN,CAAc,wBAAd,EAAwC;MAAA,KAAA,EACtC;QAAA,eAAA,EAAgD,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;QAAT,CAAhD;QACA,+BAAA,EAAgD,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAC,CAAA,GAAG,CAAC,eAAL,CAAqB,CAAC,CAAC,MAAvB;QAAT,CADhD;QAEA,uBAAA,EAAgD,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAC,CAAA,GAAG,CAAC,SAAL,CAAe,CAAC,CAAC,IAAjB;QAAT,CAFhD;QAGA,uCAAA,EAAgD,QAAA,CAAE,CAAF,CAAA;UAAS,IAAY,iBAAZ;YAAA,KAAA;;iBAAwB,IAAC,CAAA,WAAW,CAAC,aAAb,CAA2B,CAAC,CAAC,OAA7B;QAAjC,CAHhD;QAIA,uCAAA,EAAgD,QAAA,CAAE,CAAF,CAAA;UAAS,IAAY,iBAAZ;YAAA,KAAA;;iBAAwB,IAAC,CAAA,WAAW,CAAC,aAAb,CAA2B,CAAC,CAAC,OAA7B;QAAjC,CAJhD;QAKA,8CAAA,EAAgD,QAAA,CAAE,CAAF,CAAA;iBAAS,CAAM,iBAAN,CAAA,IAAsB,CAAM,iBAAN;QAA/B,CALhD;QAMA,wCAAA,EAAgD,QAAA,CAAE,CAAF,CAAA;AAAQ,cAAA;wBAAC,CAAC,CAAC,iBAAiB,aAAnB,QAA8B;QAAvC,CANhD;QAOA,qCAAA,EAAgD,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAC,CAAA,WAAW,CAAC,aAAb,CAA2B,CAAC,CAAC,MAA7B;QAAT;MAPhD;IADsC,CAAxC,EAJF;;;;;;;;IAsBQ,SAAN,MAAA,OAAA,QAAqB,KAArB,CAAA;;;;;MAME,WAAa,CAAE,GAAF,CAAA;aACX,CAAM,GAAN;AACA,eAAO;MAFI,CAJjB;;;MASI,cAAgB,CAAE,GAAF,CAAA;eAAW,IAAC,CAAA,OAAD,CAAS,IAAC,CAAA,aAAD,CAAe,GAAf,CAAT;MAAX;;MAChB,aAAe,CAAE,GAAF,CAAA;AACnB,YAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;QAAM,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,sBAAhB,CAAuC,CAAE,GAAA,GAAM,CAAE,GAAA,IAAC,CAAA,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,sBAA1B,EAAqD,GAAA,GAArD,CAAR,CAAvC;QACA,CAAA,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAA,GAAgB,IAAC,CAAA,GAAjB;QACA,CAAA,GAAgB;QAChB,CAAC,CAAC,IAAF,CAAO,CAAA,YAAA,CAAA,CAAe,CAAA,CAAE,GAAG,CAAC,MAAN,CAAf,CAAA,CAAA,CAAA,CAA+B,CAAA,CAAE,GAAG,CAAC,KAAN,CAA/B,CAAA,CAAP;AACA,eAAO,CAAC,CAAC,IAAF,CAAO,GAAP;MALM,CAVnB;;;MAkBI,WAAa,CAAE,MAAF,EAAU,IAAV,CAAA;AACjB,YAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA;;QACM,CAAA,CAAE,IAAF,EAAQ,MAAR,CAAA,GAAoB,GAApB;QACA,QAAA,GAAoB,IAAC,CAAA,GAAG,CAAC,CAAL,CAAO,MAAP;QACpB,CAAA,GAAoB,CAAA;AACpB;QAAA,KAAA,QAAA,GAAA;;UAEE,IAAA,GAAU,CAAC,CAAC,IAAF,KAAU,EAAb,GAAqB,IAArB,GAA+B,CAAC,CAAC;UACxC,CAAC,CAAE,CAAC,CAAC,IAAJ,CAAD,GAAc;YACZ,GAAA,EAAU,CAAC,CAAC,GADA;YAEZ,IAAA,EAAU,IAFE;YAGZ,IAAA,EAAU,CAAC,CAAC,IAHA;YAIZ,QAAA,EAAU,CAAC,CAAC,CAAC,OAJD;YAKZ,OAAA,EAAU,CAAC,CAAC,UALA;YAMZ,KAAA,EAAU,CAAC,CAAC,CAAC,CAAC;UANF;QAHhB;AAUA,eAAO;MAfI;;IApBf;AAqCA,WAAO;EA5DI,EA1Bb;;;EAyFA,IAAC,CAAE,mBAAF,CAAD,GAA2B,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC3B,QAAA,MAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA;;;;IAGE,MAAA,GAAoB,UAAA,CAAA;IACpB,EAAA,GAAoB,IAAI,MAAJ,CAAA;IACpB,CAAA,CAAE,GAAF,CAAA,GAAoB,OAAA,CAAQ,iCAAR,CAApB;IACA,IAAA,GAAoB,IAAI,GAAJ,CAAQ;MAAE,GAAA,EAAK;IAAP,CAAR;IACpB,MAAA,GAAoB,OAPtB;;IASE,EAAA,CAAG,QAAA,CAAA,CAAA;AACL,UAAA,CAAA,EAAA;MAAI,EAAA,CAAG,GAAG,CAAA;;;4BAAA,CAAN;MAMA,KAAA,CAAM,OAAN,EAAe,EAAE,CAAC,aAAH,CAAiB;QAAE,MAAF;QAAU,KAAA,EAAO;MAAjB,CAAjB,CAAf;MACA,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,EAAA,CAAG,GAAG,CAAA,qCAAA,CAAN,CAAf,CAAL;MACA,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,EAAA,CAAG,GAAG,CAAA,cAAA,CAAA,CAAiB,MAAjB,CAAA,4BAAA,CAAN,EAA6D;QAAE,IAAA,EAAM;MAAR,CAA7D,CAAf,CAAL;MACA,KAAA,CAAM,SAAN,EAAiB,EAAE,CAAC,WAAH,CAAe;QAAE,MAAF;QAAU,IAAA,EAAM;MAAhB,CAAf,CAAjB;aACA,IAAA,CAAK,IAAI,CAAC,SAAL;;AAAiB;;;;AAAA;QAAA,KAAA,QAAA;;uBAAA;QAAA,CAAA;;UAAjB,CAAL;IAXC,CAAH;wCAaA;EAvByB,EAzF3B;;;EAqHA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA;;aAEhC,IAAC,CAAE,mBAAF,CAAD,CAAA;IAFgC,CAAA,IAAlC;;AArHA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/SQL-GENERATION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nr                         = String.raw\n\nget_Sqlgen = ->\n  { DBay, } = require H.dbay_path\n  types     = require PATH.join H.dbay_path, 'lib/types'\n\n  #-----------------------------------------------------------------------------------------------------------\n  types.declare 'dbay_create_insert_cfg', tests:\n    \"@isa.object x\":                                ( x ) -> @isa.object x\n    \"@isa.dbay_usr_schema x.schema\":                ( x ) -> @isa.dbay_usr_schema x.schema\n    \"@isa.dbay_name x.name\":                        ( x ) -> @isa.dbay_name x.name\n    \"?@isa_list_of.nonempty_text x.exclude\":        ( x ) -> true unless x.exclude?; @isa_list_of.nonempty_text x.exclude\n    \"?@isa_list_of.nonempty_text x.include\":        ( x ) -> true unless x.include?; @isa_list_of.nonempty_text x.include\n    \"x.exclude, x.include may not appear together\": ( x ) -> ( not x.exclude? ) or ( not x.include? )\n    \"x.on_conflict in [ 'nothing', 'sql', ]\":       ( x ) -> x.on_conflict in [ 'nothing', 'sql', ]\n    \"@isa_list_of.nonempty_text x.fields\":          ( x ) -> @isa_list_of.nonempty_text x.fields\n\n  # #-----------------------------------------------------------------------------------------------------------\n  # types.declare 'dbay_fields_of_cfg', tests:\n  #   \"@isa.object x\":                          ( x ) -> @isa.object x\n  #   # \"@isa.ic_schema x.schema\":                ( x ) -> @isa.ic_schema x.schema\n  #   # \"@isa.nonempty_text x.name\":              ( x ) -> @isa_optional.ic_name x.name\n\n\n  #===========================================================================================================\n  class Sqlgen extends DBay\n\n    #---------------------------------------------------------------------------------------------------------\n    # C\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ( cfg ) ->\n      super cfg\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    prepare_insert: ( cfg ) -> @prepare @create_insert cfg\n    create_insert: ( cfg ) ->\n      @types.validate.dbay_create_insert_cfg ( cfg = { @constructor.C.defaults.dbay_create_insert_cfg..., cfg..., } )\n      { L, I, V, }  = @sql\n      R             = []\n      R.push \"insert into #{I cfg.schema}.#{I cfg.table}\"\n      return R.join ' '\n\n    #---------------------------------------------------------------------------------------------------------\n    _get_fields: ( schema, name ) ->\n      # @types.validate.dbay_fields_of_cfg ( cfg = { @constructor.C.defaults.dbay_fields_of_cfg..., cfg..., } )\n      { name, schema, } = cfg\n      schema_i          = @sql.I schema\n      R                 = {}\n      for d from @query SQL\"select * from #{schema_i}.pragma_table_info( $name );\", { name, }\n        # { cid: 0, name: 'id', type: 'integer', notnull: 1, dflt_value: null, pk: 1 }\n        type = if d.type is '' then null else d.type\n        R[ d.name ] = {\n          idx:      d.cid\n          type:     type\n          name:     d.name\n          optional: !d.notnull\n          default:  d.dflt_value\n          is_pk:    !!d.pk }\n      return R\n\n  return Sqlgen\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_DBAY Sqlgen demo\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  # { DBay }          = require H.dbay_path\n  # db                = new DBay()\n  Sqlgen            = get_Sqlgen()\n  db                = new Sqlgen()\n  { Tbl, }          = require '../../../apps/icql-dba-tabulate'\n  dtab              = new Tbl { dba: db, }\n  schema            = 'main'\n  #.........................................................................................................\n  db ->\n    db SQL\"\"\"\n      create table cities (\n        id      integer not null primary key,\n        name    text    not null,\n        country text    not null )\n      \"\"\"\n    debug '^334^', db.create_insert { schema, table: 'cities', }\n    echo dtab._tabulate db SQL\"select type, name from sqlite_schema;\"\n    echo dtab._tabulate db SQL\"select * from #{schema}.pragma_table_info( $name );\", { name: 'cities', }\n    debug '^33443^', db._get_fields { schema, name: 'cities', }\n    echo dtab._tabulate ( row for _, row of db._get_fields { schema, name: 'cities', } )\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # test @, { timeout: 10e3, }\n  @[ \"_DBAY Sqlgen demo\" ]()\n\n\n\n\n\n\n\n"
  ]
}