{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/ctx.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/CTX'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\nH                         = require './helpers'\n# types                     = new ( require 'intertype' ).Intertype\n# { isa\n#   type_of\n#   validate\n#   validate_list_of }      = types.export()\nSQL                       = String.raw\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY/CTX with_transaction() 1\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  #.........................................................................................................\n  do =>\n    db = new DBay()\n    T?.throws /expected between 1 and 2 arguments, got 0/, -> db.with_transaction()\n  #.........................................................................................................\n  do =>\n    db   = new DBay()\n    # db.open { schema: 'main', }\n    create_table = ( cfg ) ->\n      debug '^435^', { cfg, }\n      db.with_transaction ->\n        help '^70^', \"creating a table with\", cfg\n        db.execute SQL\"create table foo ( bar integer );\"\n        throw new Error \"oops\" if cfg.throw_error\n    #.......................................................................................................\n    error = null\n    try create_table { throw_error: true, } catch error\n      T?.ok error.message is \"oops\"\n      T?.eq ( db.all_rows \"select * from sqlite_schema;\" ), []\n    T.fail \"expected error but none was thrown\" unless error?\n    #.......................................................................................................\n    create_table { throw_error: false, }\n    T?.eq ( db.all_first_values \"select name from sqlite_schema;\" ), [ 'foo', ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY/CTX with_transaction() 2\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  #.........................................................................................................\n  do =>\n    db = new DBay()\n    T?.throws /expected between 1 and 2 arguments, got 0/, -> db.with_transaction()\n  #.........................................................................................................\n  do =>\n    error = null\n    db   = new DBay()\n    try\n      db.with_transaction ->\n        help '^70^', \"creating a table\"\n        db.execute SQL\"create table foo ( bar integer );\"\n        throw new Error \"oops\"\n    catch error\n      warn error.message\n      T?.ok error.message is \"oops\"\n    T.fail \"expected error but none was thrown\" unless error?\n    T?.eq ( db.all_rows \"select * from sqlite_schema;\" ), []\n    #.......................................................................................................\n    db.with_transaction ->\n      help '^70^', \"creating a table\"\n      db.execute SQL\"create table foo ( bar integer );\"\n    #.......................................................................................................\n    T?.eq ( db.all_first_values SQL\"select name from sqlite_schema;\" ), [ 'foo', ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY/CTX with_unsafe_mode()\" ] = ( T, done ) ->\n  T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  #.........................................................................................................\n  do =>\n    db = new DBay()\n    T?.throws /not a valid function/, -> db.with_unsafe_mode()\n  #.........................................................................................................\n  do =>\n    error = null\n    db   = new DBay()\n    # db.open { schema: 'main', }\n    db.execute SQL\"create table foo ( n integer, is_new boolean default false );\"\n    for n in [ 10 .. 19 ]\n      db SQL\"insert into foo ( n ) values ( $n );\", { n, }\n    db.with_unsafe_mode ->\n      for row from db.query SQL\"select * from foo where not is_new;\"\n        db SQL\"insert into foo ( n, is_new ) values ( $n, $is_new );\", { n: row.n * 3, is_new: 1, }\n      db.execute SQL\"update foo set is_new = false where is_new;\"\n    #.......................................................................................................\n    console.table rows = db.all_rows SQL\"select * from foo order by n;\"\n    result = ( d.n for d in rows )\n    T?.eq result, [ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57 ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY/CTX with_foreign_keys_deferred(), preliminaries\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  list_table_a      = ( db ) -> ( row.n for row from db.query SQL\"select n from a;\" )\n  list_table_b      = ( db ) -> ( row.n for row from db.query SQL\"select n from b;\" )\n  #---------------------------------------------------------------------------------------------------------\n  do =>\n    urge '^50-1^', \"begin transaction, then defer fks\"\n    db                = new DBay()\n    { sqlt1, }        = db\n    db.execute SQL\"\"\"\n      create table a ( n integer not null primary key references b ( n ) );\n      create table b ( n integer not null primary key references a ( n ) );\n      \"\"\"\n    #.......................................................................................................\n    ### ensure DB transaction, fk state ###\n    info '^50-2^', sqlt1.inTransaction;                     T?.eq sqlt1.inTransaction, false\n    info '^50-3^', db.get_foreign_keys_state();             T?.eq db.get_foreign_keys_state(), true\n    info '^50-4^', sqlt1.pragma SQL\"defer_foreign_keys;\";   T?.eq ( sqlt1.pragma SQL\"defer_foreign_keys;\" ), [ { defer_foreign_keys: 0 } ]\n    #.......................................................................................................\n    ### begin transaction, then  start deferred fks ###\n    debug '^50-5^'; db.execute SQL\"begin transaction;\"\n    debug '^50-6^'; sqlt1.pragma SQL\"defer_foreign_keys=1;\"\n    #.......................................................................................................\n    ### ensure DB transaction, fk state ###\n    info '^50-7^', sqlt1.inTransaction;                     T?.eq sqlt1.inTransaction, true\n    info '^50-8^', db.get_foreign_keys_state();             T?.eq db.get_foreign_keys_state(), true\n    info '^50-9^', sqlt1.pragma SQL\"defer_foreign_keys;\";   T?.eq ( sqlt1.pragma SQL\"defer_foreign_keys;\" ), [ { defer_foreign_keys: 1 } ]\n    #.......................................................................................................\n    ### insert partly bogus values, check ###\n    debug '^50-10^'; db.execute SQL\"insert into a ( n ) values ( 1 );\"\n    debug '^50-11^'; db.execute SQL\"insert into b ( n ) values ( 1 );\"\n    debug '^50-12^'; db.execute SQL\"insert into a ( n ) values ( 2 );\"\n    # debug '^50-13^'; db.execute SQL\"insert into b ( n ) values ( 2 );\"\n    error = null\n    debug '^50-14^', list_table_a db; T?.eq ( list_table_a db ), [ 1, 2, ]\n    debug '^50-15^', list_table_b db; T?.eq ( list_table_b db ), [ 1, ]\n    #.......................................................................................................\n    ### try to commit, rollback on error ###\n    try\n      debug '^50-16^'; db.execute SQL\"commit;\"\n    catch error\n      debug '^50-17^', sqlt1.inTransaction; T?.eq sqlt1.inTransaction, true\n      warn error.message\n      T?.eq error.message, \"FOREIGN KEY constraint failed\"\n      debug '^50-18^'; db.execute SQL\"rollback;\"\n      debug '^50-19^', sqlt1.inTransaction; T?.eq sqlt1.inTransaction, false\n    finally\n      debug '^50-20^', sqlt1.inTransaction; T?.eq sqlt1.inTransaction, false\n    #.......................................................................................................\n    ### Ensure error happened, tables empty as before ###\n    T.fail '^50-21^', \"expected error, got none\" unless error?\n    debug '^50-22^', list_table_a db; T?.eq ( list_table_a db ), []\n    debug '^50-23^', list_table_b db; T?.eq ( list_table_b db ), []\n    #.......................................................................................................\n    ### ensure DB transaction, fk state ###\n    info '^50-24^', sqlt1.inTransaction;                    T?.eq sqlt1.inTransaction, false\n    info '^50-25^', db.get_foreign_keys_state();            T?.eq db.get_foreign_keys_state(), true\n    info '^50-26^', sqlt1.pragma SQL\"defer_foreign_keys;\";  T?.eq ( sqlt1.pragma SQL\"defer_foreign_keys;\" ), [ { defer_foreign_keys: 0 } ]\n  #---------------------------------------------------------------------------------------------------------\n  do =>\n    urge '^50-27^', \"defer fks, then begin transaction\"\n    db                = new DBay()\n    { sqlt1, }         = db\n    db.execute SQL\"\"\"\n      create table a ( n integer not null primary key references b ( n ) );\n      create table b ( n integer not null primary key references a ( n ) );\n      \"\"\"\n    #.......................................................................................................\n    ### ensure DB transaction, fk state ###\n    info '^50-28^', sqlt1.inTransaction;                    T?.eq sqlt1.inTransaction, false\n    info '^50-29^', db.get_foreign_keys_state();            T?.eq db.get_foreign_keys_state(), true\n    info '^50-30^', sqlt1.pragma SQL\"defer_foreign_keys;\";  T?.eq ( sqlt1.pragma SQL\"defer_foreign_keys;\" ), [ { defer_foreign_keys: 0 } ]\n    #.......................................................................................................\n    ### begin transaction, then  start deferred fks ###\n    debug '^50-31^'; sqlt1.pragma SQL\"defer_foreign_keys=1;\"\n    debug '^50-32^'; db.execute SQL\"begin transaction;\"\n    #.......................................................................................................\n    ### ensure DB transaction, fk state ###\n    info '^50-33^', sqlt1.inTransaction;                    T?.eq sqlt1.inTransaction, true\n    info '^50-34^', db.get_foreign_keys_state();            T?.eq db.get_foreign_keys_state(), true\n    info '^50-35^', sqlt1.pragma SQL\"defer_foreign_keys;\";  T?.eq ( sqlt1.pragma SQL\"defer_foreign_keys;\" ), [ { defer_foreign_keys: 1 } ]\n    #.......................................................................................................\n    ### insert partly bogus values, check ###\n    debug '^50-36^'; db.execute SQL\"insert into a ( n ) values ( 1 );\"\n    debug '^50-37^'; db.execute SQL\"insert into b ( n ) values ( 1 );\"\n    debug '^50-38^'; db.execute SQL\"insert into a ( n ) values ( 2 );\"\n    # debug '^50-39^'; db.execute SQL\"insert into b ( n ) values ( 2 );\"\n    error = null\n    debug '^50-40^', list_table_a db; T?.eq ( list_table_a db ), [ 1, 2, ]\n    debug '^50-41^', list_table_b db; T?.eq ( list_table_b db ), [ 1, ]\n    #.......................................................................................................\n    ### try to commit, rollback on error ###\n    try\n      debug '^50-42^'; db.execute SQL\"commit;\"\n    catch error\n      debug '^50-43^', sqlt1.inTransaction; T?.eq sqlt1.inTransaction, true\n      warn error.message\n      T?.eq error.message, \"FOREIGN KEY constraint failed\"\n      debug '^50-44^'; db.execute SQL\"rollback;\"\n      debug '^50-45^', sqlt1.inTransaction; T?.eq sqlt1.inTransaction, false\n      # throw error ### in production, re-throw error after rollback ###\n    finally\n      debug '^50-46^', sqlt1.inTransaction; T?.eq sqlt1.inTransaction, false\n    #.......................................................................................................\n    ### Ensure error happened, tables empty as before ###\n    T.fail '^50-47^', \"expected error, got none\" unless error?\n    debug '^50-48^', list_table_a db; T?.eq ( list_table_a db ), []\n    debug '^50-49^', list_table_b db; T?.eq ( list_table_b db ), []\n    #.......................................................................................................\n    ### ensure DB transaction, fk state ###\n    info '^50-50^', sqlt1.inTransaction;                    T?.eq sqlt1.inTransaction, false\n    info '^50-51^', db.get_foreign_keys_state();            T?.eq db.get_foreign_keys_state(), true\n    info '^50-52^', sqlt1.pragma SQL\"defer_foreign_keys;\";  T?.eq ( sqlt1.pragma SQL\"defer_foreign_keys;\" ), [ { defer_foreign_keys: 0 } ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DBAY/CTX with_foreign_keys_deferred(), ensure checks\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  #.........................................................................................................\n  list_table_a      = ( db ) -> ( row.n for row from db.query SQL\"select n from a;\" )\n  #.........................................................................................................\n  error             = null\n  db                = new DBay()\n  # db.open { schema: 'main', }\n  db.execute SQL\"\"\"\n    create table a ( n integer not null primary key references b ( n ) );\n    create table b ( n integer not null primary key references a ( n ) );\n    \"\"\"\n  #.........................................................................................................\n  T?.eq db.within_transaction(), false\n  T?.eq db.get_foreign_keys_state(), true\n  db.with_foreign_keys_deferred ->\n    T?.eq CND.truth db.within_transaction(), true\n    T?.eq db.get_foreign_keys_state(), true\n    db.execute SQL\"insert into a ( n ) values ( 1 );\"\n    db.execute SQL\"insert into a ( n ) values ( 2 );\"\n    db.execute SQL\"insert into a ( n ) values ( 3 );\"\n    db.execute SQL\"insert into b ( n ) values ( 1 );\"\n    db.execute SQL\"insert into b ( n ) values ( 2 );\"\n    db.execute SQL\"insert into b ( n ) values ( 3 );\"\n    # db.execute SQL\"insert into a ( n ) values ( 4 );\"\n    console.table db.all_rows SQL\"select * from a;\"\n    console.table db.all_rows SQL\"select * from b;\"\n  T?.eq db.within_transaction(), false\n  #.........................................................................................................\n  T?.eq db.get_foreign_keys_state(), true\n  T?.eq ( db.pragma SQL\"foreign_key_check;\" ), []\n  T?.eq ( db.pragma SQL\"integrity_check;\"   ), [ { integrity_check: 'ok' } ]\n  #.........................................................................................................\n  debug '^778-1^', ( prv_values = list_table_a db )\n  T?.eq ( nxt_values = list_table_a db ), prv_values; prv_values = nxt_values\n  debug '^778-2^'\n  T?.eq db.within_transaction(), false\n  try\n    db.with_foreign_keys_deferred ->\n      T?.eq db.within_transaction(), true\n      db.execute SQL\"insert into a ( n ) values ( 101 );\"\n  catch error\n    warn error.message\n    T?.eq error.message, \"FOREIGN KEY constraint failed\"\n  T?.eq db.within_transaction(), false\n  debug '^778-4^', list_table_a db\n  T?.eq ( nxt_values = list_table_a db ), prv_values; prv_values = nxt_values\n  #.........................................................................................................\n  debug '^778-5^'\n  try\n    db.with_transaction ->\n      db.with_foreign_keys_deferred ->\n        db.execute SQL\"insert into a ( n ) values ( 102 );\"\n  catch error\n    warn error.message\n    T?.eq error.message, '^dbay/ctx@6^ (DBay_no_deferred_fks_in_tx) cannot defer foreign keys inside a transaction'\n  debug '^778-6^', list_table_a db\n  T?.eq ( nxt_values = list_table_a db ), prv_values; prv_values = nxt_values\n  #.........................................................................................................\n  debug '^778-7^'\n  try\n    db.with_foreign_keys_deferred ->\n      db.with_transaction ->\n        db.execute SQL\"insert into a ( n ) values ( 103 );\"\n  catch error\n    warn error.message\n    T?.eq error.message, '^dbay/ctx@5^ (DBay_no_nested_transactions) cannot start a transaction within a transaction'\n  debug '^778-8^', list_table_a db\n  T?.eq ( nxt_values = list_table_a db ), prv_values; prv_values = nxt_values\n  #.........................................................................................................\n  T?.eq ( db.pragma SQL\"foreign_key_check;\" ), []\n  T?.eq ( db.pragma SQL\"integrity_check;\"   ), [ { integrity_check: 'ok' } ]\n  #.........................................................................................................\n  console.table rows = db.all_rows SQL\"\"\"\n    select\n        a.n as a_n,\n        b.n as b_n\n      from a\n      left join b using ( n )\n      order by n;\"\"\"\n  debug '^400^', rows\n  result = ( [ d.a_n, d.b_n ] for d in rows )\n  T?.eq result, [ [ 1, 1 ], [ 2, 2 ], [ 3, 3 ] ]\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  test @, { timeout: 10e3, }\n  # test @[ \"DBAY/CTX with_transaction() 1\" ]\n  # test @[ \"DBAY/CTX with_transaction() 2\" ]\n  # test @[ \"DBAY/CTX with_unsafe_mode()\" ]\n  # test @[ \"DBAY/CTX with_foreign_keys_deferred(), preliminaries\" ]\n  # test @[ \"DBAY/CTX with_foreign_keys_deferred(), ensure checks\" ]\n"
  ]
}