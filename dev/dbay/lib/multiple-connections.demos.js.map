{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/multiple-connections.demos.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,kBAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,QAFF,EAGE,gBAHF,CAAA,GAG4B,KAAK,CAAC,MAAN,CAAA,CAH5B;;EAIA,GAAA,GAA4B,MAAM,CAAC;;EACnC,GAAA,GAA4B,OAAA,CAAQ,mBAAR,EAvB5B;;;EA2BA,kBAAA,GAAqB,QAAA,CAAA,CAAA;AACrB,QAAA,IAAA,EAAA,KAAA,EAAA;IAAE,CAAA,CAAE,IAAF,CAAA,GAAY,OAAA,CAAQ,CAAC,CAAC,SAAV,CAAZ;IACM;MAAN,MAAA,MAAA,QAAoB,KAApB,CAAA;;MACE,KAAC,CAAA,YAAD,GAAe;;;;;IACjB,EAAA,GAAY,IAAI,KAAJ,CAAA,EAHd;;;IAME,EAAE,CAAC,KAAK,CAAC,IAAT,CAAc,GAAG,CAAA,0BAAA,CAAjB;IACA,EAAE,CAAC,KAAK,CAAC,IAAT,CAAc,GAAG,CAAA,4CAAA,CAAjB;IACA,EAAE,CAAC,KAAK,CAAC,IAAT,CAAc,GAAG,CAAA,6CAAA,CAAjB;IACA,EAAE,CAAC,KAAK,CAAC,IAAT,CAAc,GAAG,CAAA,8CAAA,CAAjB;IAEG,CAAA,CAAA,CAAA,GAAA,EAAA;;AACL,UAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA;MACI,MAAA,GAAS,EAAE,CAAC,KAAK,CAAC,OAAT,CAAiB,GAAG,CAAA,gBAAA,CAApB,EAAwC,CAAA,CAAxC,EAA4C,KAA5C;MACT,MAAM,CAAC,GAAP,CAAA;AACA;AAAA;MAAA,KAAA,UAAA;qBAAA,IAAA,CAAK,SAAL,EAAgB,GAAhB;MAAA,CAAA;;IAJC,CAAA;IAMA,CAAA,CAAA,CAAA,GAAA,EAAA;AACL,UAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,MAAA;;MACI,EAAE,CAAC,KAAK,CAAC,QAAT,CAAkB,YAAlB,EAAgC;QAAE,OAAA,EAAS;MAAX,CAAhC,EAAqD,QAAA,CAAE,CAAF,CAAA;eAAS,CAAA,IAAK;MAAd,CAArD,EADJ;;MAGI,MAAA,GAAU,EAAE,CAAC,KAAK,CAAC,OAAT,CAAiB,GAAG,CAAA,6BAAA,CAApB;MACV,MAAM,CAAC,GAAP,CAAA;AACA;AAAA;MAAA,KAAA,UAAA;qBAAA,IAAA,CAAK,SAAL,EAAgB,GAAhB;MAAA,CAAA;;IANC,CAAA;IAQA,CAAA,CAAA,CAAA,GAAA,EAAA;AACL,UAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,MAAA;;MACI,EAAE,CAAC,KAAK,CAAC,QAAT,CAAkB,eAAlB,EAAmC;QAAE,OAAA,EAAS,KAAX;QAAkB,aAAA,EAAe;MAAjC,CAAnC,EAA8E,QAAA,CAAA,CAAA;AAClF,YAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA;QAAM,SAAA,GAAY,EAAE,CAAC,KAAK,CAAC,OAAT,CAAiB,GAAG,CAAA,gCAAA,CAApB,EAAwD,CAAA,CAAxD,EAA4D,KAA5D;QACZ,SAAS,CAAC,GAAV,CAAA;QACA,IAAA,GAAY,CAAE,GAAA,SAAS,CAAC,OAAV,CAAA,CAAF;AACZ,sFAA0B;MAJkD,CAA9E;MAKA,MAAA,GAAU,EAAE,CAAC,KAAK,CAAC,OAAT,CAAiB,GAAG,CAAA,4BAAA,CAApB;MACV,MAAM,CAAC,GAAP,CAAA;AACA;AAAA;MAAA,KAAA,UAAA;qBAAA,IAAA,CAAK,SAAL,EAAgB,GAAhB;MAAA,CAAA;;IATC,CAAA;AAUH,WAAO;EApCY,EA3BrB;;;EAkEA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA;;;aAGhC,kBAAA,CAAA;IAHgC,CAAA,IAAlC;;AAlEA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/CONSTRUCTION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_udf_dbay_sqlt = ->\n  { Dbay }  = require H.dbay_path\n  class Dbayx extends Dbay\n    @_rnd_int_cfg: true\n  db        = new Dbayx()\n  #.........................................................................................................\n  ### Create table on first connection, can insert data on second connconnection: ###\n  db.sqlt1.exec SQL\"create table x ( n text );\"\n  db.sqlt2.exec SQL\"insert into x ( n ) values ( 'helo world' );\"\n  db.sqlt2.exec SQL\"insert into x ( n ) values ( 'good to see' );\"\n  db.sqlt2.exec SQL\"insert into x ( n ) values ( 'it does work' );\"\n  #.........................................................................................................\n  do =>\n    ### Sanity check that data was persisted: ###\n    select = db.sqlt2.prepare SQL\"select * from x;\", {}, false\n    select.run()\n    info '^309-1^', row for row from select.iterate()\n  #.........................................................................................................\n  do =>\n    ### Sanity check that UDF does work (on the same connconnection): ###\n    db.sqlt1.function 'std_square', { varargs: false, }, ( n ) -> n ** 2\n    # select  = db.sqlt1.prepare SQL\"select sqrt( 42 ) as n;\"\n    select  = db.sqlt1.prepare SQL\"select std_square( 42 ) as n;\"\n    select.run()\n    info '^309-1^', row for row from select.iterate()\n  #.........................................................................................................\n  do =>\n    ### Run query (on 1st connconnection) that calls UDF running another query (on the 2nd connconnection): ###\n    db.sqlt1.function 'std_row_count', { varargs: false, deterministic: false, }, ->\n      statement = db.sqlt2.prepare SQL\"select count(*) as count from x;\", {}, false\n      statement.run()\n      rows      = [ statement.iterate()..., ]\n      return rows[ 0 ]?.count ? null\n    select  = db.sqlt1.prepare SQL\"select std_row_count() as n;\"\n    select.run()\n    info '^309-1^', row for row from select.iterate()\n  return null\n\n############################################################################################################\nif require.main is module then do =>\n  # demo_attach_memory_connections_1()\n  # demo_udf_1()\n  demo_udf_dbay_sqlt()\n"
  ]
}