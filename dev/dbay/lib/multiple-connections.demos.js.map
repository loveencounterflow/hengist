{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/multiple-connections.demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/TESTS/CONSTRUCTION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nH                         = require './helpers'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_udf_dbay_sqlt = ->\n  { Dbay }  = require H.dbay_path\n  class Dbayx extends Dbay\n    @_rnd_int_cfg: true\n  db        = new Dbayx()\n  #.........................................................................................................\n  ### Create table on first connection, can insert data on second connection: ###\n  db.sqlt1.exec SQL\"create table x ( n text );\"\n  db.sqlt2.exec SQL\"insert into x ( n ) values ( 'helo world' );\"\n  db.sqlt2.exec SQL\"insert into x ( n ) values ( 'good to see' );\"\n  db.sqlt2.exec SQL\"insert into x ( n ) values ( 'it does work' );\"\n  #.........................................................................................................\n  do =>\n    ### Sanity check that data was persisted: ###\n    select = db.sqlt2.prepare SQL\"select * from x;\", {}, false\n    select.run()\n    info '^309-1^', row for row from select.iterate()\n    return null\n  #.........................................................................................................\n  do =>\n    ### Sanity check that UDF does work (on the same connection): ###\n    db.sqlt1.function 'std_square', { varargs: false, }, ( n ) -> n ** 2\n    # select  = db.sqlt1.prepare SQL\"select sqrt( 42 ) as n;\"\n    select  = db.sqlt1.prepare SQL\"select std_square( 42 ) as n;\"\n    select.run()\n    info '^309-2^', row for row from select.iterate()\n    return null\n  #.........................................................................................................\n  do =>\n    ### Run query (on 1st connection) that calls UDF running another query (on the 2nd connection): ###\n    db.sqlt1.function 'std_row_count', { varargs: false, deterministic: false, }, ->\n      statement = db.sqlt2.prepare SQL\"select count(*) as count from x;\", {}, false\n      statement.run()\n      rows      = [ statement.iterate()..., ]\n      return rows[ 0 ]?.count ? null\n    select  = db.sqlt1.prepare SQL\"select std_row_count() as n;\"\n    select.run()\n    info '^309-3^', row for row from select.iterate()\n    return null\n  #.........................................................................................................\n  do =>\n    db.sqlt1.unsafeMode true\n    db.sqlt2.unsafeMode true\n    db.sqlt1.exec SQL\"begin deferred transaction;\"\n    db.sqlt2.exec SQL\"begin deferred transaction;\"\n    db.sqlt1.exec SQL\"pragma main.journal_mode=WAL;\"\n    db.sqlt2.exec SQL\"pragma main.journal_mode=WAL;\"\n    #.......................................................................................................\n    db.sqlt1.table 'std_generate_series',\n      columns:        [ 'n', ]\n      deterministic:  false\n      varargs:        false\n      rows: ->\n        yield { n, } for n in [ 1 .. 3 ]\n        return null\n    #.......................................................................................................\n    debug '^309-4^'\n    xxx_statement = db.sqlt2.prepare SQL\"select n from x;\"\n    db.sqlt1.table 'std_some_texts',\n      columns:        [ 'n', ]\n      deterministic:  false\n      varargs:        false\n      rows: ->\n        debug '^309-5^'\n        xxx_statement.run()\n        debug '^309-6^'\n        # yield from xxx_statement.iterate()\n        for row from xxx_statement.iterate()\n          debug '^309-7^', row\n          yield row\n        return null\n    #.......................................................................................................\n    ### not possible to attach the same DB more than once: ###\n    # debug '^309-8^', db.sqlt1.name\n    # debug '^309-9^', ( db.sqlt1.prepare SQL\"attach ? as s1b;\" ).run [ db.sqlt1.name, ]\n    #.......................................................................................................\n    # select  = db.sqlt1.prepare SQL\"select * from std_generate_series();\"\n    # select2 = db.sqlt1.prepare SQL\"select * from std_generate_series();\"\n    select  = db.sqlt1.prepare SQL\"select * from std_some_texts();\"\n    select.run()\n    # for row from select.iterate()\n    #   select2.run()\n    #   info '^309-10^', row, [ ( select2.iterate() )..., ]\n    for row from select.iterate()\n      info '^309-11^', row\n    db.sqlt1.unsafeMode false\n    db.sqlt2.unsafeMode false\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_worker_threads = ->\n  #.........................................................................................................\n  create_and_populate_tables = ( db ) ->\n    ### Create table on first connection, can insert data on second connection unless when within\n    transaction: ###\n    debug '^339^', db.sqlt1\n    debug '^339^', db.sqlt2\n    sqlt_a = db.sqlt1\n    sqlt_b = if sqlt_a.inTransaction then sqlt_a else db.sqlt2\n    sqlt_a.exec SQL\"create table x ( n text );\"\n    sqlt_b.exec SQL\"insert into x ( n ) values ( 'helo world' );\"\n    sqlt_b.exec SQL\"insert into x ( n ) values ( 'good to see' );\"\n    sqlt_b.exec SQL\"insert into x ( n ) values ( 'it does work' );\"\n    urge '^309-12^', \"created and populated table `x`\"\n    return null\n  #.........................................................................................................\n  add_table_function = ( db ) ->\n    db.sqlt1.table 'my_table_udf',\n      deterministic:  false\n      varargs:        false\n      columns:        [ 'n', ]\n      rows:           ->\n        # statement = db.sqlt2.prepare SQL\"select * from x;\"\n        # yield from statement.iterate()\n        for n in [ 1, 2, 3, ]\n          await sleep 0.25\n          yield { n, }\n        return null\n  #.........................................................................................................\n  show_sqlite_schema = ( db ) =>\n    info '^309-13^', \"sqlite_schema\"\n    select  = db.sqlt1.prepare SQL\"select * from sqlite_schema;\"\n    select.run()\n    info '^309-14^', row for row from select.iterate()\n    return null\n  #.........................................................................................................\n  show_table_contents = ( title, db ) =>\n    try\n      select  = db.sqlt1.prepare SQL\"select * from x;\"\n      select.run()\n      urge '^309-15^', title\n      info '^309-16^', row for row from select.iterate()\n    catch error\n      warn CND.reverse error.message\n    return null\n  #.........................................................................................................\n  { Worker\n    parentPort\n    isMainThread  } = require 'worker_threads'\n  { Dbay }          = require H.dbay_path\n  dbnick            = 'mydb'\n  #.........................................................................................................\n  if isMainThread\n    do =>\n      debug \"main thread\"\n      db = new Dbay { dbnick, ram: true, }\n      db.sqlt1.exec SQL\"begin transaction;\"\n      create_and_populate_tables db\n      db.sqlt1.exec SQL\"commit;\"\n      show_sqlite_schema db\n      worker = new Worker __filename\n      # worker.postMessage 'ready'\n      worker.on 'message', ( P... ) -> info '^309-1^', \"Main thread received message:\", P\n      debug '^309-17^', db.sqlt1\n      debug '^309-18^', db.cfg\n      show_table_contents \"main thread\", db\n      # for n in [ 0 .. 1e8 ]\n      #   null\n      help \"sleeping...\"; await guy.async.sleep 10\n      help '^309-1^', \"exiting\"\n      return null\n  #.........................................................................................................\n  else\n    do =>\n      urge CND.reverse \"█ █ █ █ █ █ worker thread █ █ █ █ █ █ \"\n      # parentPort.on 'message', ( P... ) -> info '^309-1^', P\n      db = new Dbay { dbnick, ram: true, }\n      add_table_function db\n      show_sqlite_schema db\n      debug '^309-19^', db.sqlt1\n      debug '^309-20^', db.cfg\n      # # show_table_contents \"worker thread\", db\n      statement = db.sqlt1.prepare SQL\"select * from my_table_udf();\"\n      for row from statement.iterate()\n        info '^309-1^', row\n      parentPort.postMessage 'done'\n      # help \"sleeping...\"; await guy.async.sleep 1\n      # show_table_contents \"worker thread\", db\n      return null\n      # help \"sleeping...\"; await guy.async.sleep 0.1\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  # demo_attach_memory_connections_1()\n  # demo_udf_1()\n  # demo_udf_dbay_sqlt()\n  await demo_worker_threads()\n\n"
  ]
}