{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/hyphenation-over-rpc.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/DEV/INTERPLOT/HYPHENATION-OVER-RPC'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  cast\n  type_of }               = types.export()\n#...........................................................................................................\ntest                      = require 'guy-test'\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"_XEMITTER: _\" ] = ( T, done ) ->\n#   DATOM                     = require '../../../apps/datom'\n#   { new_datom\n#     select }                = DATOM.export()\n#   #.........................................................................................................\n#   probes_and_matchers = [\n#     [['^foo', { time: 1500000, value: \"msg#1\", }],{\"time\":1500000,\"value\":\"msg#1\",\"$key\":\"^foo\"},null]\n#     ]\n#   #.........................................................................................................\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n#       [ key, value, ] = probe\n#       resolve new_datom key, value\n#   done()\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\nserve = ->\n  Rpc                       = require '../../../apps/intershop-rpc'\n  # DB                        = require '../../../apps/intershop/intershop_modules/db'\n  # DATOM                     = require '../../../apps/datom'\n  IX                        = require '../../../apps/intertext'\n  after                     = ( time_s, f ) -> setTimeout f, time_s * 1000\n  #.........................................................................................................\n  rpc = await Rpc.create { show_counts: true, count_interval: 1, logging: true, }\n  #.........................................................................................................\n  rpc.contract '^hyphenate',            ( d ) -> hyphenate d.$value\n  rpc.contract '^slabjoints_from_text', ( d ) -> slabjoints_from_text d.$value\n  rpc.contract '^shyphenate',           ( d ) -> slabjoints_from_text hyphenate d.$value\n    # debug '^447^', rpr text\n  #.........................................................................................................\n  hyphenate = ( text ) ->\n    validate.text text\n    return IX.HYPH.hyphenate text\n  #.........................................................................................................\n  slabjoints_from_text = ( text ) ->\n    validate.text text\n    return IX.SLABS.slabjoints_from_text text\n\n#-----------------------------------------------------------------------------------------------------------\npsql_run_file = ( cwd, path ) -> new Promise ( resolve, reject ) =>\n  CP                        = require 'child_process'\n  ### TAINT must properly escape path literal ###\n  command   = \"psql -U interplot -d interplot -f \\\"#{path}\\\"\"\n  whisper '^psql_run_file@3366^', path\n  settings  =\n    cwd:    cwd\n    shell:  true\n    stdio:  [ 'inherit', 'inherit', 'inherit', ]\n  cp        = CP.spawn command, null, settings\n  cp.on 'close', ( code   ) ->\n    return resolve 0 if code is 0\n    reject new Error \"^psql_run_file@34478^ processs exited with code #{code}\"\n  cp.on 'error', ( error  ) -> reject error\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"INTERSHOP-RPC basics\" ] = ( T, done ) ->\n  Rpc                       = require '../../../apps/intershop-rpc'\n  DB                        = require '../../../apps/intershop/intershop_modules/db'\n  DATOM                     = require '../../../apps/datom'\n  #.........................................................................................................\n  create_server_two_steps = ->\n    rpc = new Rpc()\n    await rpc.start()\n    return rpc\n  #.........................................................................................................\n  create_server_one_step = -> await Rpc.create()\n  #.........................................................................................................\n  # rpc = await create_server_two_steps()\n  rpc = await create_server_one_step()\n  rpc.contract '^add-42', (       d ) -> help '^hengist@101^ contract', d; return ( ( d ? {} ).x ? 0 ) + 42\n  rpc.listen_to_all       ( key,  d ) -> urge \"^hengist@102^ listen_to_all     \", d\n  rpc.listen_to_unheard   ( key,  d ) -> warn \"^hengist@103^ listen_to_unheard \", d\n  await rpc.emit '^foobar', 108\n  help '^hengist@104^', await rpc.delegate '^add-42', { x: 123, }\n  # help '^hengist@105^', await rpc.delegate { '^add-42', x: 123, }\n  # help '^hengist@106^', await rpc.delegate { '^add-42', $value: { x: 123, }, }\n  # debug '^hengist@107^', await rpc.delegate '^add-42', 123\n  T.eq ( await rpc.delegate DATOM.new_datom '^add-42', 123          ), 42\n  T.eq ( await rpc.delegate DATOM.new_datom '^add-42', { x: 123, }  ), 165\n  T.eq ( await DB.query         [ \"select IPC.server_is_online()\"                       ] ), [ { server_is_online: true } ]\n  T.eq ( await DB.query         [ \"select IPC.send( $1, $2 );\", '^add-42', '{\"x\":1000}' ] ), [ { send: '' } ] ### TAINT should be `null` ###\n  T.eq ( await DB.query         [ \"select IPC.rpc( $1, $2 );\", '^add-42', '{\"x\":1000}'  ] ), [ { rpc: 1042 } ]\n  T.eq ( await DB.query_single  [ \"select IPC.server_is_online()\"                       ] ), true\n  T.eq ( await DB.query_single  [ \"select IPC.send( $1, $2 );\", '^add-42', '{\"x\":1000}' ] ), '' ### TAINT should be `null` ###\n  T.eq ( await DB.query_single  [ \"select IPC.rpc( $1, $2 );\", '^add-42', '{\"x\":1000}'  ] ), 1042\n  info rpc.counts\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"INTERPLOT hyphenation\" ] = ( T, done ) ->\n  await serve()\n  await psql_run_file '/home/flow/jzr/interplot', 'db/080-intertext.sql'\n  await psql_run_file '/home/flow/jzr/interplot', 'db/100-harfbuzz.sql'\n  # cp.stdout.on 'data', ( data ) ->\n  #   data = data.toString 'utf-8'\n  #   help rpr data\n  # cp.stdout.on 'error', ( error ) -> warn \"stdout.on 'error'  \", rpr error\n  # cp.stderr.on 'data',  ( data )  -> warn \"stderr.on 'data'   \", rpr data.toString 'utf-8'\n  # cp.stderr.on 'error', ( error ) -> warn \"stderr.on 'error'  \", rpr error\n  done()\n\n\n############################################################################################################\nif module is require.main then do =>\n  # test @\n  # serve()\n  test @[ \"INTERPLOT hyphenation\" ], { timeout: 5000, }\n\n"
  ]
}