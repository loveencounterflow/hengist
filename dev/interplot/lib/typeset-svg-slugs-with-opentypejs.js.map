{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/typeset-svg-slugs-with-opentypejs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'INTERPLOT/TYPESET-SVG-SLUGS-WITH-OPENTYPEJS'\nrpr                       = CND.rpr\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\nassign                    = Object.assign\nafter                     = ( time_s, f ) -> setTimeout f, time_s * 1000\ndefer                     = setImmediate\nasync                     = {}\nsync                      = { concurrency: 1, }\n# async                     = { async: true, }\n#...........................................................................................................\nHGST                      = require '../../../../hengist'\ntypes                     = require HGST.resolve_project_path 'apps/interplot/lib/types'\n{ isa\n  validate\n  cast\n  type_of }               = types\nINTERTEXT                 = require HGST.resolve_project_path 'apps/intertext'\n# { HTML\n#   RXWS }                  = require '../../../apps/paragate'\nSP                        = require HGST.resolve_project_path 'apps/steampipes'\n{ $\n  $async\n  $drain\n  $show\n  $watch  }               = SP.export()\nDATOM                     = require HGST.resolve_project_path 'apps/datom'\n{ select\n  stamp\n  freeze\n  lets\n  new_datom\n  fresh_datom }           = DATOM.export()\n# # DB                        = require '../intershop/intershop_modules/db'\n# INTERSHOP                 = require '../intershop'\n# PGP                       = ( require 'pg-promise' ) { capSQL: false, }\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$hyphenate = ( S ) ->\n  return $ ( text, send ) =>\n    send INTERTEXT.HYPH.hyphenate text\n\n#-----------------------------------------------------------------------------------------------------------\n@$slabjoints_from_text = ( S ) ->\n  return $ ( text, send ) =>\n    send INTERTEXT.SLABS.slabjoints_from_text text\n\n#-----------------------------------------------------------------------------------------------------------\n@typeset = -> new Promise ( resolve, reject ) =>\n  S         = {} ### NOTE will hold state such as configuration ###\n  source    = [ \"welcome to InterPlot Typesetting客观事物。文字\", ]\n  pipeline  = []\n  pipeline.push source\n  pipeline.push @$hyphenate S\n  pipeline.push $watch ( text ) -> urge '^3321^', rpr INTERTEXT.HYPH.reveal_hyphens text, '*'\n  pipeline.push @$slabjoints_from_text S\n  pipeline.push $show()\n  pipeline.push $drain -> resolve()\n  SP.pull pipeline...\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  await @typeset()\n\n\n\n\n\n\n\n\n\n\n"
  ]
}