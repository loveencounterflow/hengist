{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/hollerith-tng.benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'IN-MEMORY-SQL'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nDATA                      = require '../../../lib/data-providers-nocache'\ntest                      = require 'guy-test'\n{ jr }                    = CND\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\ngcfg                      = { verbose: false, }\nHOLLERITH_CODEC           = require '../../../apps/hollerith-codec'\nHOLLERITH_CODEC_TNG       = ( require '../../../apps/hollerith-codec/lib/tng' ).HOLLERITH_CODEC\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  whisper \"retrieving test data...\"\n  DATOM = require '../../../apps/datom'\n  integer_lists = []\n  list_lengths  = DATA.get_integers cfg.list_count, cfg.list_length_min, cfg.list_length_max\n  #.........................................................................................................\n  for list_length in list_lengths\n    # integer_lists.push DATA.get_integers list_length, HOLLERITH.nr_min, HOLLERITH.nr_max\n    integer_lists.push DATA.get_integers list_length, -100, +100\n  #.........................................................................................................\n  data_cache  = { integer_lists, }\n  data_cache  = DATOM.freeze data_cache\n  whisper \"...done\"\n  return data_cache\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@hollerith_classic = ( cfg ) -> new Promise ( resolve ) =>\n  { integer_lists, } = @get_data cfg\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    for integer_list in integer_lists\n      x = HOLLERITH_CODEC.encode integer_list\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@hollerith_tng = ( cfg ) -> new Promise ( resolve ) =>\n  { integer_lists, } = @get_data cfg\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    for integer_list in integer_lists\n      x = HOLLERITH_CODEC_TNG.encode integer_list\n      count++\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@hollerith_bcd = ( cfg ) -> new Promise ( resolve ) =>\n  { integer_lists, } = @get_data cfg\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    for integer_list in integer_lists\n      x = HOLLERITH_CODEC_TNG._encode_bcd [ integer_list, ]\n      count++\n    resolve count\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  gcfg.verbose  = true\n  gcfg.verbose  = false\n  bench         = BM.new_benchmarks()\n  cfg           = { list_count: 3e1, list_length_min: 1, list_length_max: HOLLERITH_CODEC_TNG.vnr_width, }\n  repetitions   = 5\n  test_names    = [\n    'hollerith_classic'\n    'hollerith_tng'\n    'hollerith_bcd'\n    ]\n  global.gc() if global.gc?\n  data_cache = null\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in CND.shuffle test_names\n      global.gc() if global.gc?\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n\n\n\n\n\n"
  ]
}