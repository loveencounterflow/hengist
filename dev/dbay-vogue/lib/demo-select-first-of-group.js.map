{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-select-first-of-group.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAKA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,sBAAR,EAhB5B;;;;;EAsBA,MAAA,GAAS,QAAA,CAAA,CAAA;AACT,QAAA,GAAA,EAAA,KAAA,EAAA,EAAA,EAAA;IAAE,CAAA,CAAE,KAAF,CAAA,GAAY,OAAA,CAAQ,0BAAR,CAAZ;IACA,KAAA,GAAY,IAAI,KAAJ,CAAA;IACZ,EAAA,GAAY,KAAK,CAAC,GAAG,CAAC;IACtB,GAAA,GAAY,EAAE,CAAC,WAAW,CAAC,IAH7B;;IAKE,EAAA,CAAG,GAAG,CAAA;;;6BAAA,CAAN,EALF;;IAUE,EAAA,CAAG,GAAG,CAAA;;;;;;;iBAAA,CAAN,EAVF;;IAmBE,EAAA,CAAG,GAAG,CAAA;;;;iBAAA,CAAN,EAnBF;;IAyBE,EAAA,CAAG,GAAG,CAAA;;;;;;iBAAA,CAAN,EAzBF;;IAiCE,EAAA,CAAG,GAAG,CAAA;;;;;;;;;;;6BAAA,CAAN,EAjCF;;IA+CE,CAAC,CAAC,QAAF,CAAW,wBAAX,EAAqC,EAAA,CAAG,GAAG,CAAA,qCAAA,CAAN,CAArC;IACA,CAAC,CAAC,QAAF,CAAW,sBAAX,EAAqC,EAAA,CAAG,GAAG,CAAA,mCAAA,CAAN,CAArC;IACA,CAAC,CAAC,QAAF,CAAW,wBAAX,EAAqC,EAAA,CAAG,GAAG,CAAA,qCAAA,CAAN,CAArC,EAjDF;;AAmDE,WAAO;EApDA,EAtBT;;;EA8EA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,KAAA,CAAA,CAAA,GAAA;aAChC,CAAA,MAAM,MAAA,CAAA,CAAN;IADgC,CAAA,IAAlC;;AA9EA",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-VOGUE/DEMO-OBJECT-CREATION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\ntypes                     = new ( require 'intertype' ).Intertype()\nH                         = require '../../../lib/helpers'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  { Vogue } = require '../../../apps/dbay-vogue'\n  vogue     = new Vogue()\n  db        = vogue.vdb.db\n  SQL       = db.constructor.SQL\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"create table product_sales(\n        product     text  not null,\n        order_date  date  not null,\n        sale        int   not null );\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"create view _product_sales_ordered as select\n        row_number() over w as nr,\n        *\n      from product_sales\n      window w as (\n        partition by product\n        order by order_date desc )\n      order by product;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"create view latest_product_sales as select\n        *\n      from _product_sales_ordered\n      where nr = 1\n      order by product;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"create view latest_product_sales_2 as select\n        product           as product,\n        max( order_date ) as order_date,\n        sale              as sale\n      from product_sales\n      group by product\n      order by product;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    insert into product_sales(product,order_date, sale)\n         values('A','2020-05-01',250),\n         ('B','2020-05-01',350),\n         ('C','2020-05-01',1250),\n         -- ................................................................................................\n         ('A','2020-05-02',450),\n         ('B','2020-05-02',650),\n         ('C','2020-05-02',1050),\n         -- ................................................................................................\n         ('A','2020-05-03',150),\n         ('B','2020-05-03',250),\n         ('C','2020-05-03',1850);\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  H.tabulate \"_product_sales_ordered\", db SQL\"\"\"select * from _product_sales_ordered;\"\"\"\n  H.tabulate \"latest_product_sales\",   db SQL\"\"\"select * from latest_product_sales;\"\"\"\n  H.tabulate \"latest_product_sales_2\", db SQL\"\"\"select * from latest_product_sales_2;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  await demo_1()\n\n"
  ]
}