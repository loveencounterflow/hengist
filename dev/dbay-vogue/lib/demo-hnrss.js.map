{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-hnrss.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA,EAAA,EAAA,GAAA,EAAA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,kCAAA,EAAA,cAAA,EAAA,mBAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,gBAAA,EAAA,QAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAKA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA,EAf5B;;;;EAkBA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,OAAA,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,GAAA,GAA4B,OAAA,CAAQ,mBAAR;;EAC5B,CAAA,CAAE,IAAF,CAAA,GAA4B,OAAA,CAAQ,oBAAR,CAA5B;;EACA,CAAA,CAAE,GAAF,CAAA,GAA4B,IAA5B;;EACA,CAAA,CAAE,KAAF,EACE,iBADF,CAAA,GAC4B,OAAA,CAAQ,0BAAR,CAD5B;;EAEA,CAAA,CAAE,IAAF,CAAA,GAA4B,OAAA,CAAQ,oBAAR,CAA5B;;EACA,CAAA,GAA4B,OAAA,CAAQ,sCAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,CAAA,CAAE,QAAF,CAAA,GAA4B,OAAA,CAAQ,UAAR,CAA5B;;EACA,GAAA,GAA4B,OAAA,CAAQ,UAAR,EA/B5B;;;;;EAqCA,MAAA,GAAS,MAAA,QAAA,CAAA,CAAA;AACT,QAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA;IAAE,GAAA,GAAY;IACZ,QAAA,GACE;MAAA,KAAA,EAAQ,YAAR;MACA,IAAA,EAAQ,YADR;MAEA,MAAA,EACE;QAAA,QAAA,EAAU,aAAV;QACA,IAAA,EAAU;MADV;IAHF;IAKF,CAAA,CAAE,IAAF,EAAQ,QAAR,CAAA,GAAsB,CAAA,MAAM,SAAA,CAAU,GAAV,EAAe,QAAf,CAAN,CAAtB;IACA,IAAA,CAAK,qCAAL;IACA,IAAA,CAAK,IAAL;AACA,WAAO;EAXA,EArCT;;;EAmDA,mBAAA,GAAsB,MAAA,QAAA,CAAA,CAAA;AACtB,QAAA,CAAA,EAAA,MAAA,EAAA,SAAA,EAAA,CAAA,EAAA,QAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA;IAAE,GAAA,GAAY;IACZ,QAAA,GAEE,CAAA;;MAAA,UAAA,EACE;QAAA,QAAA,EAAU,iBAAV;QACA,IAAA,EACE;UAAA,OAAA,EACE;YAAA,QAAA,EAAU;UAAV;QADF;MAFF;IADF;IAKF,QAAA,GAAY,SARd;;IAUE,MAAA,GAAY,CAAA,MAAM,GAAA,CAAI,GAAJ,CAAN;IACZ,IAAA,GAAY,MAAM,CAAC,OAAO,CAAC,QAAf,CAAwB,QAAxB;IACZ,CAAA,GAAY,CAAA,MAAM,SAAS,CAAC,UAAV,CAAqB,IAArB,EAA2B,QAA3B,CAAN;AAEZ;;IAAA,KAAA,iDAAA;;MACE,IAAA,CAAK,SAAL,EAAgB,GAAhB,EAAqB,GAAA,CAAI,SAAS,CAAC,OAAd,CAArB;MACA,CAAA,GAAI;AACJ;MAAA,KAAA,wCAAA;;QACE,IAAO,4DAAP;UACE,IAAA,CAAK,QAAL,EAAe,GAAA,CAAI,IAAJ,CAAf;UACA,CAAC,CAAC,IAAF,CAAO;YAAE,GAAA,EAAK,KAAP;YAAc,KAAA,EAAO;UAArB,CAAP;AACA,mBAHF;;QAIA,CAAA,CAAE,GAAF,EAAO,KAAP,CAAA,GAAkB,KAAK,CAAC,MAAxB;QACA,GAAA,GAAkB,GAAG,CAAC,IAAJ,CAAA;QAClB,KAAA,GAAkB,KAAK,CAAC,IAAN,CAAA;QAClB,CAAC,CAAC,IAAF,CAAO,CAAE,GAAF,EAAO,KAAP,CAAP;MARF;MASA,OAAO,CAAC,KAAR,CAAc,CAAd;IAZF;AAaA,WAAO;EA5Ba,EAnDtB;;;EAkFA,cAAA,GAAiB,MAAA,QAAA,CAAA,CAAA;AACjB,QAAA,MAAA,EAAA,CAAA,EAAA,QAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA;IAAE,GAAA,GAAY;IACZ,QAAA,GAEE,CAAA;;MAAA,UAAA,EACE;QAAA,QAAA,EAAU;MAAV;IADF,EAHJ;;;;IAQE,QAAA,GAAY,OARd;;;;IAYE,MAAA,GAAY,EAAE,CAAC,YAAH,CAAgB,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,uEAArB,CAAhB;IACZ,IAAA,GAAY,MAAM,CAAC,QAAP,CAAgB,QAAhB;IACZ,CAAA,GAAY,CAAA,MAAM,SAAS,CAAC,UAAV,CAAqB,IAArB,EAA2B,QAA3B,CAAN;AAEZ;;IAAA,KAAA,iDAAA;;MACE,KAAA,GAAQ,IAAI,CAAC,KAAL,CAAW,UAAX,EAAZ;;;;;MAKI,KAAA;;AAAU;QAAA,KAAA,yCAAA;;cAA4B,IAAA,KAAU;yBAAtC;;QAAA,CAAA;;;MACV,IAAA,CAAK,SAAL,EAAgB,GAAhB,EAAqB,GAAA,CAAI,KAAJ,CAArB;IAPF,CAhBF;;;;;;;;;;;;;AAoCE,WAAO;EArCQ,EAlFjB;;;EA0HM,SAAN,MAAA,OAAA,QAAqB,kBAArB,CAAA;;IAGE,WAAa,CAAE,cAAF,CAAA;AACf,UAAA,CAAA,EAAA,CAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,CAAA,EAAA,WAAA,EAAA,IAAA,EAAA,YAAA,EAAA,OAAA,EAAA,UAAA,EAAA,aAAA,EAAA,UAAA,EAAA,QAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,QAAA,EAAA,KAAA,EAAA;MAAI,GAAA,GAAc;MACd,OAAA,GAAc,IAAC,CAAA,GAAG,CAAC,GAAG,CAAC,WAAT,CAAqB,GAArB;MACd,CAAA,CAAE,GAAF,CAAA,GAAc,OAAd;MACA,WAAA,GAAc,IAAC,CAAA,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC;MAC/B,IAAA,GAAc,IAAC,CAAA,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,MAAZ,CAAA,EAJlB;;MAMI,IAAA,GAAc,IAAC,CAAA,yBAAD,CAA2B,cAA3B;MACd,CAAA,GAAc,OAAO,CAAC,IAAR,CAAa,IAAb;MACd,CAAA,GAAc;AAEd;;MAAA,KAAA,qCAAA;;QACE,IAAA,GAAgB,CAAA,CAAE,IAAF;QAChB,YAAA,GAAgB,IAAI,CAAC,IAAL,CAAU,qBAAV;QAChB,UAAA,GAAgB,IAAI,CAAC,IAAL,CAAU,kBAAV;QAChB,aAAA,GAAgB,IAAI,CAAC,IAAL,CAAU,sBAAV;QAChB,UAAA,GAAgB,IAAI,CAAC,IAAL,CAAU,oBAAV,EAJtB;;;;;QASM,QAAA,GAAgB,CAAE,IAAI,CAAC,IAAL,CAAU,GAAV,CAAF,CAAiB,CAAC,IAAlB,CAAuB,MAAvB;QAChB,QAAA,GAAgB,QAAQ,CAAC,OAAT,CAAiB,eAAjB,EAAkC,IAAlC;QAChB,OAAA,GAAgB,QAAQ,CAAC,OAAT,CAAiB,gBAAjB,EAAmC,IAAnC;QAChB,IAAG,OAAA,KAAW,QAAd;UACE,IAAA,CAAK,mCAAL;AACA,mBAFF;SAZN;;;QAiBM,GAAA,GAAgB,CAAA,OAAA,CAAA,CAAU,OAAV,CAAA;QAChB,KAAA,GAAgB,UAAU,CAAC,IAAX,CAAA;QAChB,QAAA,GAAgB,aAAa,CAAC,IAAd,CAAA;QAChB,KAAA,GAAgB,KAAA,GAAQ,CAAA,GAAA,CAAA,CAAM,QAAN,CAAA;QACxB,SAAA,GAAgB,SArBtB;;QAuBM,OAAA,GAAU,CAAE,KAAF,EAAS,SAAT;QACV,GAAA,GAAU,IAAC,CAAA,GAAG,CAAC,GAAG,CAAC,QAAT,CAAkB,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,OAAjB,EAA0B,OAA1B,CAAlB;MAzBZ,CAVJ;;;AAsCI,aAAO;IAvCI;;EAHf,EA1HA;;;EAwKM,QAAN,MAAA,MAAA,QAAoB,kBAApB,CAAA;;IAGE,aAAe,CAAE,IAAF,CAAA;aAAY,IAAI,CAAC,OAAL,CAAa,wBAAb,EAAuC,IAAvC;IAAZ,CADjB;;;IAIE,6BAA+B,CAAE,WAAF,CAAA;AACjC,UAAA;MAAI,IAAG,4EAAH;AACE,eAAO,KAAK,CAAC,MAAM,CAAC,YADtB;;AAEA,aAAO;IAHsB,CAJjC;;;IASE,yBAA2B,CAAE,WAAF,CAAA;AAC7B,UAAA;MAAI,IAAmB,mBAAnB;AAAA,eAAO,KAAP;;MACA,GAAA,GAAM,GAAG,CAAC,KAAJ,CAAU,WAAV;AACN,aAAO,CAAA,CAAA,CAAG,GAAG,CAAC,IAAP,CAAA,CAAA,CAAc,QAAA,CAAS,GAAG,CAAC,QAAb,EAAuB,EAAvB,CAAd,CAAA;IAHkB,CAT7B;;;IAeU,MAAR,MAAQ,CAAA,CAAA;AACV,UAAA,MAAA,EAAA,QAAA,EAAA;MAAI,GAAA,GAAY;MACZ,QAAA,GAAY;MACZ,MAAA,GAAY,CAAA,MAAM,GAAA,CAAI,GAAJ,CAAN;AACZ,aAAO,IAAC,CAAA,WAAD,CAAa,MAAM,CAAC,OAApB;IAJD,CAfV;;;IAsBE,WAAa,CAAE,cAAF,CAAA;AACf,UAAA,CAAA,EAAA,OAAA,EAAA,WAAA,EAAA,OAAA,EAAA,IAAA,EAAA,WAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,EAAA,WAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA;MAAI,GAAA,GAAc;MACd,OAAA,GAAc,IAAC,CAAA,GAAG,CAAC,GAAG,CAAC,WAAT,CAAqB,GAArB;MACd,CAAA,CAAE,GAAF,CAAA,GAAc,OAAd;MACA,WAAA,GAAc,IAAC,CAAA,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC;MAC/B,IAAA,GAAc,IAAC,CAAA,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,MAAZ,CAAA,EAJlB;;MAMI,IAAA,GAAc,IAAC,CAAA,yBAAD,CAA2B,cAA3B,EANlB;;;;;MAWI,IAAA,GAAc,IAAI,CAAC,OAAL,CAAa,eAAb,EAAgC,WAAhC;MACd,IAAA,GAAc,IAAI,CAAC,OAAL,CAAa,iBAAb,EAAgC,YAAhC;MACd,IAAA,GAAc,IAAI,CAAC,OAAL,CAAa,SAAb,EAAgC,iBAAhC;MACd,IAAA,GAAc,IAAI,CAAC,OAAL,CAAa,WAAb,EAAgC,kBAAhC,EAdlB;;MAgBI,CAAA,GAAc,OAAO,CAAC,IAAR,CAAa,IAAb;AAEd;;MAAA,KAAA,qCAAA;;QACE,IAAA,GAAkB,CAAA,CAAE,IAAF,EAAxB;;QAEM,KAAA,GAAkB,IAAI,CAAC,IAAL,CAAU,OAAV;QAClB,KAAA,GAAkB,KAAK,CAAC,IAAN,CAAA;QAClB,KAAA,GAAkB,IAAC,CAAA,aAAD,CAAe,KAAf;QAClB,KAAA,GAAkB,KAAK,CAAC,IAAN,CAAA,EALxB;;QAOM,SAAA,GAAkB,IAAI,CAAC,IAAL,CAAU,eAAV;QAClB,SAAA,GAAkB,SAAS,CAAC,IAAV,CAAA;QAClB,GAAA,GAAkB,SAAS,CAAC,OAAV,CAAkB,uBAAlB,EAA2C,OAA3C,EATxB;;QAWM,IAAA,GAAkB,IAAI,CAAC,IAAL,CAAU,SAAV;QAClB,IAAA,GAAkB,IAAI,CAAC,IAAL,CAAA,EAZxB;;QAcM,OAAA,GAAkB,IAAI,CAAC,IAAL,CAAU,SAAV;QAClB,OAAA,GAAkB,OAAO,CAAC,IAAR,CAAA,EAfxB;;QAiBM,WAAA,GAAkB,IAAI,CAAC,IAAL,CAAU,aAAV;QAClB,WAAA,GAAkB,WAAW,CAAC,IAAZ,CAAA;QAClB,WAAA,GAAkB,IAAC,CAAA,aAAD,CAAe,WAAf;QAClB,WAAA,GAAkB,IAAC,CAAA,6BAAD,CAAgC,WAAhC;QAClB,OAAA,GAAkB,IAAC,CAAA,yBAAD,CAAgC,WAAhC,EArBxB;;QAuBM,IAAA,GAAU,KAvBhB;;;QA0BM,OAAA,GAAU,CAAE,KAAF,EAAS,SAAT,EAAoB,OAApB,EAA6B,WAA7B,EAA0C,IAA1C;QACV,GAAA,GAAU,IAAC,CAAA,GAAG,CAAC,GAAG,CAAC,QAAT,CAAkB,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,OAAjB,EAA0B,OAA1B,CAAlB;MA5BZ;AA6BA,aAAO;IAhDI;;EAxBf,EAxKA;;;EAoPM,SAAN,MAAA,OAAA,QAAqB,kBAArB,CAAA;;;;;;;;;;;;;;;;;IAkBE,kBAAoB,CAAA,CAAA;AACtB,UAAA;MAAI,SAAA,GAAgB,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,0BAArB,CAAb;AAChB,aAAO,CAAE,EAAE,CAAC,YAAH,CAAgB,SAAhB,EAA2B;QAAE,QAAA,EAAU;MAAZ,CAA3B,CAAF,CAAqD,CAAC,IAAtD,CAAA;IAFW,CAjBtB;;;IAsBU,MAAR,MAAQ,CAAA,CAAA,EAAA;;AACV,UAAA,MAAA,EAAA,WAAA,EAAA,GAAA,EAAA,OAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA,SAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,OAAA,EAAA,GAAA,EAAA;MACI,GAAA,GAAc,KADlB;;MAGI,OAAA,GAAc,IAAC,CAAA,GAAG,CAAC,GAAG,CAAC,WAAT,CAAqB,GAArB;MACd,CAAA,CAAE,GAAF,CAAA,GAAc,OAAd;MACA,QAAA,GAAY,oBALhB;;;MAQI,SAAA,GAAgB,CAAA,6BAAA,CAAA,CAAgC,kBAAA,CAAmB,QAAnB,CAAhC,CAAA,MAAA;MAChB,CAAA,GAAgB;QAAE,QAAA,EAAU,GAAZ;QAAiB,IAAA,EAAM;MAAvB;MAChB,OAAA,GACE;QAAA,OAAA,EAAc;UAAE,QAAA,EAAU,gCAAZ;UAA8C,aAAA,EAAe,IAAC,CAAA,kBAAD,CAAA;QAA7D,CAAd;QACA,YAAA,EAAc;MADd;AAEF,aAAA,IAAA;QACE,OAAA,CAAQ,SAAR,EAAmB,wDAAnB;QACA,CAAC,CAAC,IAAF;QACA,IAAoB,CAAC,CAAC,IAAF,GAAS,EAA7B;UAAA,OAAO,CAAC,IAAR,CAAa,GAAb,EAAA;;QACA,MAAA,GAAgB,CAAA,MAAM,GAAA,CAAI,SAAJ,EAAe,OAAf,CAAN;QAChB,OAAA,GAAgB,IAAI,CAAC,KAAL,CAAW,MAAM,CAAC,OAAO,CAAC,QAAf,CAAA,CAAX;QAChB,IAAS,OAAO,CAAC,MAAR,KAAkB,CAA3B;AAAA,gBAAA;;QACA,KAAA,yCAAA;;UACE,SAAA,GAAgB,MAAM,CAAC;UACvB,QAAA,GAAgB,MAAM,CAAC;UACvB,WAAA,8CAAqC;UACrC,WAAA,GAAgB,CAAE,KAAK,CAAC,IAAN,CAAW,WAAX,CAAF,CAAyB,aAAS,CAAC,IAAnC,CAAwC,EAAxC;UAChB,IAAG,WAAW,CAAC,MAAZ,GAAqB,CAAxB;YAAgC,IAAA,GAAQ,CAAA,CAAA,CAAG,SAAH,CAAA,EAAA,CAAA,CAAiB,WAAjB,CAAA,CAAA,EAAxC;WAAA,MAAA;YACgC,IAAA,GAAQ,UADxC;;UAEA,KAAA,CAAM,SAAN,EAAiB,IAAjB;UACA,IAAA,CAAK,SAAL;QARF;MAPF,CAbJ;;;;;;;;;;;;;;;;;;;;;;;AAmDI,aAAO;IApDD;;EAvBV,EApPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAuXA,gBAAA,GAAmB,QAAA,CAAE,EAAF,CAAA;IACjB,CAAC,CAAC,QAAF,CAAW,MAAX,EAAmB,EAAA,CAAG,GAAG,CAAA;;+FAAA,CAAN,CAAnB;AAIA,WAAO;EALU,EAvXnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4ZA,kCAAA,GAAqC,MAAA,QAAA,CAAE,GAAF,CAAA;AACrC,QAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EAAA,IAAA,EAAA,QAAA,EAAA,GAAA,EAAA;IAAE,QAAA,GAAoB;MAAE,KAAA,EAAO,IAAT;MAAe,MAAA,EAAQ,IAAvB;MAA6B,EAAA,EAAI;IAAjC;IACpB,GAAA,GAAoB,CAAE,GAAA,QAAF,EAAe,GAAA,GAAf;IACpB,CAAA,CAAE,KAAF,EACE,iBADF,EAEE,QAFF,CAAA,GAEoB,OAAA,CAAQ,0BAAR,CAFpB;IAGA,CAAA,CAAE,IAAF,CAAA,GAAoB,OAAA,CAAQ,oBAAR,CAApB;IACA,IAAA,GAAoB,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,gCAArB,CAAb;IACpB,EAAA,GAAoB,IAAI,IAAJ,CAAS,CAAE,IAAF,CAAT;IACpB,GAAA,GAAoB,IAAI,QAAJ,CAAa,CAAE,EAAF,CAAb;IACpB,KAAA,GAAoB,IAAI,KAAJ,CAAU,CAAE,GAAF,CAAV,EATtB;;IAWE,IAAG,GAAG,CAAC,MAAP;MAAmB,MAAS,CAAA,KAAA,CAAA,CAAA,GAAA;AAC9B,YAAA,SAAA,EAAA,GAAA,EAAA,cAAA,EAAA,YAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;QAAI,GAAA,GAAkB;QAClB,cAAA,GAAkB,IAAI,MAAJ,CAAW,CAAE,GAAF,CAAX;QAClB,KAAK,CAAC,QAAQ,CAAC,GAAf,CAAwC;UAAE,OAAA,EAAS;QAAX,CAAxC;QACA,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAApC,CAAwC;UAAE,GAAF;UAAO,GAAA,EAAK;QAAZ,CAAxC;QACA,YAAA,GAAkB,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,iFAArB;AAClB;AAAA;QAAA,KAAA,qCAAA;;uBACE,CAAA,MAAS,CAAA,KAAA,CAAA,CAAA,GAAA;AACf,gBAAA;YAAQ,MAAA,GAAY,EAAE,CAAC,YAAH,CAAgB,SAAhB;mBACZ,CAAA,MAAM,cAAc,CAAC,WAAf,CAA2B,MAA3B,CAAN;UAFO,CAAA,GAAT;QADF,CAAA;;MAN0B,CAAA,IAA5B;KAXF;;IAsBE,IAAG,GAAG,CAAC,KAAP;MAAkB,MAAS,CAAA,KAAA,CAAA,CAAA,GAAA;AAC7B,YAAA,SAAA,EAAA,GAAA,EAAA,YAAA,EAAA,UAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;QAAI,GAAA,GAAkB;QAClB,UAAA,GAAkB,IAAI,KAAJ,CAAU,CAAE,GAAF,CAAV;QAClB,KAAK,CAAC,QAAQ,CAAC,GAAf,CAAwC;UAAE,OAAA,EAAS;QAAX,CAAxC;QACA,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAApC,CAAwC;UAAE,GAAF;UAAO,GAAA,EAAK;QAAZ,CAAxC;QACA,YAAA,GAAkB,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,uDAArB;AAClB;AAAA;QAAA,KAAA,qCAAA;;uBACE,CAAA,MAAS,CAAA,KAAA,CAAA,CAAA,GAAA;AACf,gBAAA;YAAQ,MAAA,GAAY,EAAE,CAAC,YAAH,CAAgB,SAAhB;mBACZ,CAAA,MAAM,UAAU,CAAC,WAAX,CAAuB,MAAvB,CAAN;UAFO,CAAA,GAAT;QADF,CAAA;;MANyB,CAAA,IAA3B;KAtBF;;IAiCE,IAAG,GAAG,CAAC,EAAP;MAAe,MAAS,CAAA,KAAA,CAAA,CAAA,GAAA;AAC1B,YAAA,GAAA,EAAA;QAAI,GAAA,GAAkB;QAClB,UAAA,GAAkB,IAAI,MAAJ,CAAW,CAAE,GAAF,CAAX,EADtB;;;QAII,KAAK,CAAC,QAAQ,CAAC,GAAf,CAAwC;UAAE,OAAA,EAAS;QAAX,CAAxC;QACA,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAApC,CAAwC;UAAE,GAAF;UAAO,GAAA,EAAK;QAAZ,CAAxC;eACA,CAAA,MAAM,UAAU,CAAC,MAAX,CAAA,CAAN;MAPsB,CAAA,IAAxB;KAjCF;;IA0CE,gBAAA,CAAiB,EAAjB;IACA,KAAA,CAAM,YAAN,EAAoB,CAAA,MAAM,KAAK,CAAC,MAAM,CAAC,KAAb,CAAA,CAAN,CAApB;IACA,IAAA,CAAK,YAAL,EAAmB,gBAAnB;IACA,IAAG,GAAG,CAAC,KAAP;MACE,QAAA,GAAW,CAAA,MAAM,GAAA,CAAI,qCAAJ,CAAN;MACX,IAAA,CAAK,YAAL,EAAmB,CAAA,SAAA,CAAA,CAAY,MAAM,CAAC,UAAP,CAAkB,QAAQ,CAAC,IAA3B,CAAZ,CAAA,MAAA,CAAnB,EAFF;;IAGA,IAAG,GAAG,CAAC,EAAP;MACE,QAAA,GAAW,CAAA,MAAM,GAAA,CAAI,qCAAJ,CAAN;MACX,IAAA,CAAK,YAAL,EAAmB,CAAA,SAAA,CAAA,CAAY,MAAM,CAAC,UAAP,CAAkB,QAAQ,CAAC,IAA3B,CAAZ,CAAA,MAAA,CAAnB,EAFF;;IAGA,QAAA,GAAW,CAAA,MAAM,GAAA,CAAI,8BAAJ,CAAN;IACX,IAAA,CAAK,YAAL,EAAmB,CAAA,SAAA,CAAA,CAAY,MAAM,CAAC,UAAP,CAAkB,QAAQ,CAAC,IAA3B,CAAZ,CAAA,MAAA,CAAnB;AACA,WAAO;EAtD4B,EA5ZrC;;;EAudA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,KAAA,CAAA,CAAA,GAAA,EAAA;;;;;;aAMhC,CAAA,MAAM,kCAAA,CAAmC;QAAE,KAAA,EAAO,KAAT;QAAgB,MAAA,EAAQ,KAAxB;QAA+B,EAAA,EAAI;MAAnC,CAAnC,CAAN;IANgC,CAAA,IAAlC;;;EAvdA;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-VOGUE/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\ntypes                     = new ( require 'intertype' ).Intertype()\n#...........................................................................................................\n# ( require 'mixa/lib/check-package-versions' ) require '../pinned-package-versions.json'\nPATH                      = require 'path'\nFS                        = require 'fs'\ngot                       = require 'got'\nCHEERIO                   = require 'cheerio'\nGUY                       = require '../../../apps/guy'\n{ DBay, }                 = require '../../../apps/dbay'\n{ SQL, }                  = DBay\n{ Vogue,\n  Vogue_scraper_ABC }     = require '../../../apps/dbay-vogue'\n{ HDML, }                 = require '../../../apps/hdml'\nH                         = require '../../../apps/dbay-vogue/lib/helpers'\nglob                      = require 'glob'\n{ to_width }              = require 'to-width'\nURL                       = require 'node:url'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  url       = 'https://ionicabizau.net'\n  elements  =\n    title:  \".header h1\"\n    desc:   \".header h2\"\n    avatar:\n      selector: \".header img\"\n      attr:     \"src\"\n  { data, response, } = await scrape_it url, elements\n  info \"Status Code: ${response.statusCode}\"\n  urge data\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_zvg_online_net = ->\n  url       = 'https://www.zvg-online.net/1400/1101986118/ag_seite_001.php'\n  elements  =\n    # containers: '.container_vors a'\n    containers:\n      listItem: '.container_vors'\n      data:\n        listing:\n          listItem: 'a'\n  encoding  = 'latin1'\n  #.........................................................................................................\n  buffer    = await got url\n  html      = buffer.rawBody.toString encoding\n  d         = await scrape_it.scrapeHTML html, elements\n  # info \"Status Code: #{response.statusCode}\"\n  for container, idx in d.containers\n    urge '^74443^', idx, rpr container.listing\n    R = []\n    for line in container.listing\n      unless ( match = line.match /^(?<key>[^:]*):(?<value>.*)$/ )?\n        help '^3453^', rpr line\n        R.push { key: './.', value: line, }\n        continue\n      { key, value, } = match.groups\n      key             = key.trim()\n      value           = value.trim()\n      R.push { key, value, }\n    console.table R\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_zvg24_net = ->\n  url       = 'https://www.zvg24.net/zwangsversteigerung/brandenburg'\n  elements  =\n    # containers: '.container_vors a'\n    containers:\n      listItem: 'article'\n  #     data:\n  #       listing:\n  #         listItem: 'a'\n  encoding  = 'utf8'\n  #.........................................................................................................\n  # buffer    = await got url\n  # html      = buffer.rawBody.toString encoding\n  buffer    = FS.readFileSync PATH.join __dirname, '../sample-data/www.zvg24.net_,_zwangsversteigerung_,_brandenburg.html'\n  html      = buffer.toString encoding\n  d         = await scrape_it.scrapeHTML html, elements\n  # info \"Status Code: #{response.statusCode}\"\n  for text, idx in d.containers\n    lines = text.split /\\s*\\n\\s*/\n    # text = text.replace /\\x20+/g, ' '\n    # text = text.replace /\\n\\x20\\n/g, '\\n'\n    # text = text.replace /\\n+/g, '\\n'\n    # text = text.replace /Musterbild\\n/g, ''\n    lines = ( line for line in lines when line isnt 'Musterbild' )\n    urge '^74443^', idx, rpr lines\n    # urge '^74443^', idx, rpr container.replace /\\n+/g, '\\n'\n    # R = []\n    # for line in container.listing\n    #   unless ( match = line.match /^(?<key>[^:]*):(?<value>.*)$/ )?\n    #     help '^3453^', rpr line\n    #     R.push { key: './.', value: line, }\n    #     continue\n    #   { key, value, } = match.groups\n    #   key             = key.trim()\n    #   value           = value.trim()\n    #   R.push { key, value, }\n    # console.table R\n  return null\n\n#===========================================================================================================\nclass Ebayde extends Vogue_scraper_ABC\n\n  #---------------------------------------------------------------------------------------------------------\n  scrape_html: ( html_or_buffer ) ->\n    dsk         = 'ebayde'\n    session     = @hub.vdb.new_session dsk\n    { sid, }    = session\n    insert_post = @hub.vdb.queries.insert_post\n    seen        = @hub.vdb.db.dt_now()\n    #.......................................................................................................\n    html        = @_html_from_html_or_buffer html_or_buffer\n    $           = CHEERIO.load html\n    R           = []\n    #.......................................................................................................\n    for item in ( $ 'div.s-item__info' )\n      item          = $ item\n      item_details  = item.find 'div.s-item__details'\n      item_title    = item.find 'h3.s-item__title'\n      item_subtitle = item.find 'div.s-item__subtitle'\n      item_price    = item.find 'span.s-item__price'\n      # urge '^434554^', item_details.text()\n      # info '^434554^', item_title.text()\n      # info '^434554^', item_subtitle.text()\n      # info '^434554^', item_price.text()\n      item_url      = ( item.find 'a' ).attr 'href'\n      item_url      = item_url.replace /^([^?]+)\\?.*$/, '$1'\n      item_id       = item_url.replace /^.*\\/([^\\/]+)$/, '$1'\n      if item_id is '123456'\n        warn \"skipping invalid Item ID (123456)\"\n        continue\n      # info '^434554^', item_url\n      # info '^434554^', item_id\n      pid           = \"ebayde-#{item_id}\"\n      title         = item_title.text()\n      subtitle      = item_subtitle.text()\n      title         = title + \" / #{subtitle}\"\n      title_url     = item_url\n      #.....................................................................................................\n      details = { title, title_url, }\n      row     = @hub.vdb.new_post { dsk, sid, pid, session, details, }\n    #.......................................................................................................\n    # process.exit 111\n    return null\n\n\n#===========================================================================================================\nclass Hnrss extends Vogue_scraper_ABC\n\n  #---------------------------------------------------------------------------------------------------------\n  _remove_cdata: ( text ) -> text.replace /^<!\\[CDATA\\[(.*)\\]\\]>$/, '$1'\n\n  #---------------------------------------------------------------------------------------------------------\n  _article_url_from_description: ( description ) ->\n    if ( match = description.match /Article URL:\\s*(?<article_url>[^\\s]+)/ )?\n      return match.groups.article_url\n    return null\n  #---------------------------------------------------------------------------------------------------------\n  _article_from_article_url: ( article_url ) ->\n    return null unless article_url?\n    url = URL.parse article_url\n    return \"#{url.host}#{to_width url.pathname, 50}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  scrape: ->\n    url       = 'https://hnrss.org/newest?link=comments'\n    encoding  = 'utf8'\n    buffer    = await got url\n    return @scrape_html buffer.rawBody\n\n  #---------------------------------------------------------------------------------------------------------\n  scrape_html: ( html_or_buffer ) ->\n    dsk         = 'hn'\n    session     = @hub.vdb.new_session dsk\n    { sid, }    = session\n    insert_post = @hub.vdb.queries.insert_post\n    seen        = @hub.vdb.db.dt_now()\n    #.......................................................................................................\n    html        = @_html_from_html_or_buffer html_or_buffer\n    #.......................................................................................................\n    ### NOTE This is RSS XML, so `link` doesn't behave like HTML `link` and namespaces are not supported: ###\n    ### TAINT Cheerio docs: \"can select with XML Namespaces but due to the CSS specification, the colon (:)\n     needs to be escaped for the selector to be valid\" ###\n    html        = html.replace /<dc:creator>/g,   '<creator>'\n    html        = html.replace /<\\/dc:creator>/g, '</creator>'\n    html        = html.replace /<link>/g,         '<reserved-link>'\n    html        = html.replace /<\\/link>/g,       '</reserved-link>'\n    #.......................................................................................................\n    $           = CHEERIO.load html\n    #.......................................................................................................\n    for item in ( $ 'item' )\n      item            = $ item\n      #.....................................................................................................\n      title           = item.find 'title'\n      title           = title.text()\n      title           = @_remove_cdata title\n      title           = title.trim()\n      #.....................................................................................................\n      title_url       = item.find 'reserved-link'\n      title_url       = title_url.text()\n      pid             = title_url.replace /^.*item\\?id=([0-9]+)$/, 'hn-$1'\n      #.....................................................................................................\n      date            = item.find 'pubDate'\n      date            = date.text()\n      #.....................................................................................................\n      creator         = item.find 'creator'\n      creator         = creator.text()\n      #.....................................................................................................\n      description     = item.find 'description'\n      description     = description.text()\n      description     = @_remove_cdata description\n      article_url     = @_article_url_from_description  description\n      article         = @_article_from_article_url      article_url\n      #.....................................................................................................\n      href    = null\n      ### TAINT avoid duplicate query ###\n      # details = { title, title_url, article_url, date, creator, description, }\n      details = { title, title_url, article, article_url, date, }\n      row     = @hub.vdb.new_post { dsk, sid, pid, session, details, }\n    return null\n\n\n#===========================================================================================================\nclass Github extends Vogue_scraper_ABC\n  ###\n\n  Properties of `repo`:\n\n  allow_forking archive_url archived assignees_url blobs_url branches_url clone_url collaborators_url\n  comments_url commits_url compare_url contents_url contributors_url created_at default_branch deployments_url\n  description disabled downloads_url events_url fork forks forks_count forks_url full_name git_commits_url\n  git_refs_url git_tags_url git_url has_downloads has_issues has_pages has_projects has_wiki homepage\n  hooks_url html_url id is_template issue_comment_url issue_events_url issues_url keys_url labels_url language\n  languages_url license merges_url milestones_url mirror_url name node_id notifications_url open_issues\n  open_issues_count owner private pulls_url pushed_at releases_url size ssh_url stargazers_count\n  stargazers_url statuses_url subscribers_url subscription_url svn_url tags_url teams_url topics trees_url\n  updated_at url visibility watchers watchers_count\n\n  ###\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_authorization: ->\n    mimi_path     = PATH.resolve PATH.join __dirname, '../../../../../temp/mimi'\n    return ( FS.readFileSync mimi_path, { encoding: 'utf-8', } ).trim()\n\n  #---------------------------------------------------------------------------------------------------------\n  scrape: ->\n    ### TAINT make `dsk` a `cfg` property of instance ###\n    dsk         = 'gh'\n    # { dsk, }    = @cfg\n    session     = @hub.vdb.new_session dsk\n    { sid, }    = session\n    username  = 'loveencounterflow'\n    #.......................................................................................................\n    ### TAINT use proper URL builder ###\n    repos_url     = \"https://api.github.com/users/#{encodeURIComponent username}/repos\"\n    q             = { per_page: 100, page: 0, }\n    got_cfg       =\n      headers:      { 'accept': 'application/vnd.github.v3+json', authorization: @_get_authorization(), }\n      searchParams: q\n    loop\n      whisper '^342-1^', '——————————————————————————————————————————————————————'\n      q.page++\n      process.exit 111 if q.page > 10\n      buffer        = await got repos_url, got_cfg\n      repos_d       = JSON.parse buffer.rawBody.toString()\n      break if repos_d.length is 0\n      for repo_d in repos_d\n        repo_name     = repo_d.name\n        repo_url      = repo_d.url\n        description   = repo_d.description ? ''\n        description   = ( Array.from description)[ .. 80 ].join ''\n        if description.length > 0 then  repo  = \"#{repo_name} (#{description})\"\n        else                            repo  = repo_name\n        debug '^342-2^', repo\n        echo repo_name\n      # #.....................................................................................................\n      # ### TAINT use proper URL builder ###\n    # debug '^34534-9^', db.dt_isots_from_dbayts db.dt_now { subtract: [ 1, 'month', ], }\n      # commits_url = \"https://api.github.com/repos/#{encodeURIComponent username}/#{encodeURIComponent repo_name}/commits\"\n      # buffer      = await got commits_url, got_cfg\n      # commits     = JSON.parse buffer.rawBody.toString()\n      # for commit in commits\n      #   title_url = commit.html_url\n      #   title     = ( ( commit.commit.message ? '' ).split '\\n' )[ 0 ]\n      #   sha       = commit.sha\n      #   sha       = sha[ .. 7 ]\n      #   pid       = \"#{dsk}-#{repo_name}-#{sha}\"\n      #   date      = @hub.vdb.db.dt_from_iso commit.commit.author.date\n      #   details   = { title, title_url, date, repo, repo_url, }\n      #   row       = @hub.vdb.new_post { dsk, sid, pid, session, details, }\n      #   whisper '^33423^', { repo, sha, date, title, title_url, }\n      #   debug '^33423^', row\n      # #.....................................................................................................\n      # process.exit 111\n    # url       = 'https://hnrss.org/newest?link=comments'\n    # encoding  = 'utf8'\n    # return @scrape_html buffer.rawBody\n    return null\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# demo_hnrss = ->\n#   { Vogue\n#     Vogue_scraper_ABC\n#     Vogue_db      } = require '../../../apps/dbay-vogue'\n#   { DBay          } = require '../../../apps/dbay'\n#   path              = PATH.resolve PATH.join __dirname, '../../../dev-shm/dbay-vogue.db'\n#   db                = new DBay { path, }\n#   vdb               = new Vogue_db { db, }\n#   vogue             = new Vogue { vdb, }\n#   dsk               = 'hn'\n#   scraper           = new Hnrss()\n#   vogue.scrapers.add { dsk, scraper, }\n#   ### TAINT use API method, don't use query directly ###\n#   ### TAINT should be done by `vogue.scraper.add()` ###\n#   vogue.vdb.queries.insert_datasource.run { dsk, url: 'http://nourl', }\n#   #.........................................................................................................\n#   glob_pattern  = PATH.join __dirname, '../../../assets/dbay-vogue/hnrss.org_,_newest.???.xml'\n#   for path in glob.sync glob_pattern\n#     await do =>\n#       buffer    = FS.readFileSync path\n#       await scraper.scrape_html buffer\n#   #.........................................................................................................\n#   show_post_counts db\n#   return vogue\n\n# #-----------------------------------------------------------------------------------------------------------\n# demo_ebayde = ->\n#   { Vogue\n#     Vogue_scraper_ABC\n#     Vogue_db      } = require '../../../apps/dbay-vogue'\n#   { DBay          } = require '../../../apps/dbay'\n#   dsk               = 'ebayde'\n#   path              = PATH.resolve PATH.join __dirname, '../../../dev-shm/dbay-vogue.db'\n#   db                = new DBay { path, }\n#   vdb               = new Vogue_db { db, }\n#   vogue             = new Vogue { vdb, }\n#   scraper           = new Ebayde()\n#   vogue.scrapers.add { dsk, scraper, }\n#   ### TAINT use API method, don't use query directly ###\n#   ### TAINT should be done by `vogue.scraper.add()` ###\n#   vogue.vdb.queries.insert_datasource.run { dsk, url: 'http://nourl', }\n#   #.........................................................................................................\n#   glob_pattern  = PATH.join __dirname, '../../../assets/dbay-vogue/ebay-de-search-result-rucksack-????????-??????Z.html'\n#   for path in glob.sync glob_pattern\n#     await do =>\n#       buffer    = FS.readFileSync path\n#       await scraper.scrape_html buffer\n#   #.........................................................................................................\n#   show_post_counts db\n#   return vogue\n\n#-----------------------------------------------------------------------------------------------------------\nshow_post_counts = ( db ) ->\n  H.tabulate \"PIDs\", db SQL\"\"\"\n    select 'distinct in vogue_posts'  as \"title\", count( distinct pid ) as count from vogue_posts\n    union all\n    select 'all in vogue_trends'      as \"title\", count(*)              as count from vogue_trends;\"\"\"\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# demo_statement_type_info = ->\n#   { Vogue_db      } = require '../../../apps/dbay-vogue'\n#   { DBay          } = require '../../../apps/dbay'\n#   db                = new DBay()\n#   vdb               = new Vogue_db { db, }\n#   for name, query of vdb.queries\n#     try\n#       H.tabulate name, query.columns()\n#     catch error\n#       warn '^446^', name, error.message\n#   query = db.prepare SQL\"select * from vogue_trends;\"; H.tabulate \"vogue_trends\", query.columns()\n#   query = db.prepare SQL\"select * from vogue_XXX_grouped_ranks;\"; H.tabulate \"vogue_XXX_grouped_ranks\", query.columns()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# demo_serve_hnrss = ( cfg ) ->\n#   vogue = await demo_hnrss()\n#   debug '^445345-1^', vogue.server.start()\n#   help '^445345-2^', \"server started\"\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# demo_serve_ebayde = ( cfg ) ->\n#   vogue = await demo_ebayde()\n#   debug '^445345-3^', vogue.server.start()\n#   help '^445345-4^', \"server started\"\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_read_datasources_start_server = ( cfg ) ->\n  defaults          = { hnrss: true, ebayde: true, gh: true, }\n  cfg               = { defaults..., cfg..., }\n  { Vogue\n    Vogue_scraper_ABC\n    Vogue_db      } = require '../../../apps/dbay-vogue'\n  { DBay          } = require '../../../apps/dbay'\n  path              = PATH.resolve PATH.join __dirname, '../../../dev-shm/dbay-vogue.db'\n  db                = new DBay { path, }\n  vdb               = new Vogue_db { db, }\n  vogue             = new Vogue { vdb, }\n  #.........................................................................................................\n  if cfg.ebayde then await do =>\n    dsk             = 'ebayde'\n    ebayde_scraper  = new Ebayde { dsk, }\n    vogue.scrapers.add                      { scraper: ebayde_scraper, }\n    vogue.vdb.queries.insert_datasource.run { dsk, url: 'http://nourl', }\n    glob_pattern    = PATH.join __dirname, '../../../assets/dbay-vogue/ebay-de-search-result-rucksack-????????-??????Z.html'\n    for data_path in glob.sync glob_pattern\n      await do =>\n        buffer    = FS.readFileSync data_path\n        await ebayde_scraper.scrape_html buffer\n  #.........................................................................................................\n  if cfg.hnrss then await do =>\n    dsk             = 'hn'\n    hn_scraper      = new Hnrss { dsk, }\n    vogue.scrapers.add                      { scraper: hn_scraper, }\n    vogue.vdb.queries.insert_datasource.run { dsk, url: 'http://nourl', }\n    glob_pattern    = PATH.join __dirname, '../../../assets/dbay-vogue/hnrss.org_,_newest.???.xml'\n    for data_path in glob.sync glob_pattern\n      await do =>\n        buffer    = FS.readFileSync data_path\n        await hn_scraper.scrape_html buffer\n  #.........................................................................................................\n  if cfg.gh then await do =>\n    dsk             = 'gh'\n    gh_scraper      = new Github { dsk, }\n    ### TAINT use API method, don't use query directly ###\n    ### TAINT should be done by `vogue.scraper.add()` ###\n    vogue.scrapers.add                      { scraper: gh_scraper, }\n    vogue.vdb.queries.insert_datasource.run { dsk, url: 'http://nourl', }\n    await gh_scraper.scrape()\n  #.........................................................................................................\n  show_post_counts db\n  debug '^445345-5^', await vogue.server.start()\n  help '^445345-6^', \"server started\"\n  if cfg.hnrss\n    response = await got \"http://localhost:3456/trends?dsk=hn\"\n    help '^445345-6^', \"received #{Buffer.byteLength response.body} bytes\"\n  if cfg.gh\n    response = await got \"http://localhost:3456/trends?dsk=gh\"\n    help '^445345-6^', \"received #{Buffer.byteLength response.body} bytes\"\n  response = await got \"http://localhost:3456/trends\"\n  help '^445345-6^', \"received #{Buffer.byteLength response.body} bytes\"\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_zvg_online_net()\n  # await demo_zvg24_net()\n  # await demo_serve_hnrss()\n  # await demo_serve_ebayde()\n  # await demo_statement_type_info()\n  await demo_read_datasources_start_server { hnrss: false, ebayde: false, gh: true, }\n  # await demo_read_datasources_start_server { hnrss: true, ebayde: true, gh: false, }\n\n\n\n\n"
  ]
}