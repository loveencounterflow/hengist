{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,iBAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC,EAdA;;;EAmBA,IAAA,GAA4B,OAAA,CAAQ,wBAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR,EApB5B;;;EAsBA,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,MADF,EAEE,OAFF,EAGE,QAHF,CAAA,GAG4B,KAH5B;;EAIA,CAAA,CAAE,GAAF,CAAA,GAA4B,OAAA,CAAQ,iCAAR,CAA5B;;EACA,IAAA,GAA4B,IAAI,GAAJ,CAAQ;IAAE,GAAA,EAAK;EAAP,CAAR;;EAC5B,CAAA,CAAE,GAAF,CAAA,GAA4B,CAAE,OAAA,CAAQ,mBAAR,CAAF,CAA+B,CAAC,GAA5D,EA7BA;;;;;EAmCA,IAAC,CAAA,kBAAD,GAAsB,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACtB,QAAA,SAAA,EAAA,KAAA,EAAA,EAAA;;IACE,CAAA,CAAE,SAAF,CAAA,GAAoB,OAAA,CAAQ,+BAAR,CAApB;IACA,EAAA,GAAoB,IAAI,SAAJ,CAAA,EAFtB;;IAIE,KAAA,GAAQ,QAAA,CAAE,KAAF,EAAS,OAAT,CAAA;AACV,UAAA,KAAA,EAAA,GAAA,EAAA;AAAI;QACE,IAAA,GAAQ;QACR,GAAA,GAAQ,EAAE,CAAC,OAAH,CAAW,IAAX;QACR,IAAA,CAAK,GAAA,CAAI,IAAJ,CAAL;QACA,IAAA,CAAK,GAAA,CAAI,GAAJ,CAAL;2BACA,CAAC,CAAE,EAAH,CAAM,GAAN,EAAW,OAAX,WALF;OAMA,cAAA;QAAM;2BACJ,CAAC,CAAE,EAAH,CAAM,OAAN,EAAe,CAAA,CAAA,CAAG,KAAK,CAAC,OAAT,CAAA,EAAA,CAAA,CAAqB,GAAA,CAAI,KAAJ,CAArB,CAAA,CAAf,WADF;;IAPM,EAJV;;IAcE,EAAE,CAAC,OAAH,CAAW,GAAG,CAAA,+CAAA,CAAd;IACA,EAAE,CAAC,OAAH,CAAW,GAAG,CAAA,uDAAA,CAAd;IACA,EAAE,CAAC,OAAH,CAAW,GAAG,CAAA,+CAAA,CAAd;IACA,EAAE,CAAC,OAAH,CAAW,GAAG,CAAA,4BAAA,CAAd;IAEG,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,GAAA,EAAA;MAAI,IAAA,GAAQ,GAAG,CAAA,6BAAA;MACX,GAAA,GAAQ,GAAG,CAAA,yBAAA;aACX,KAAA,CAAM,IAAN,EAAY,GAAZ;IAHC,CAAA;IAKA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,GAAA,EAAA;MAAI,IAAA,GAAQ,GAAG,CAAA,6CAAA;MACX,GAAA,GAAQ,GAAG,CAAA,kEAAA;aACX,KAAA,CAAM,IAAN,EAAY,GAAZ;IAHC,CAAA;IAKA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,GAAA,EAAA;MAAI,IAAA,GAAQ,GAAG,CAAA,gCAAA;MACX,GAAA,GAAQ,GAAG,CAAA,uBAAA;aACX,KAAA,CAAM,IAAN,EAAY,GAAZ;IAHC,CAAA;IAKA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,GAAA,EAAA;MAAI,IAAA,GAAQ,GAAG,CAAA;2BAAA;MAGX,GAAA,GAAQ,GAAG,CAAA;mCAAA;aAGX,KAAA,CAAM,IAAN,EAAY,GAAZ;IAPC,CAAA;IASA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,GAAA,EAAA;MAAI,IAAA,GAAQ,GAAG,CAAA;yBAAA;MAGX,GAAA,GAAQ,GAAG,CAAA;mCAAA;aAGX,KAAA,CAAM,IAAN,EAAY,GAAZ;IAPC,CAAA;IASA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,GAAA,EAAA;MAAI,IAAA,GAAQ,GAAG,CAAA,4DAAA;MACX,GAAA,GAAQ,GAAG,CAAA,0CAAA;aACX,KAAA,CAAM,IAAN,EAAY,GAAZ;IAHC,CAAA;IAKA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,GAAA,EAAA;MAAI,IAAA,GAAQ,GAAG,CAAA,2CAAA;MACX,GAAA,GAAQ,GAAG,CAAA,yBAAA;aACX,KAAA,CAAM,IAAN,EAAY,GAAZ;IAHC,CAAA;IAKA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,GAAA,EAAA;MAAI,IAAA,GAAQ,GAAG,CAAA,2CAAA;MACX,GAAA,GAAQ,GAAG,CAAA,yBAAA;aACX,KAAA,CAAM,IAAN,EAAY,GAAZ;IAHC,CAAA;wCAKH;EApEoB,EAnCtB;;;EA0GA,IAAC,CAAA,wBAAD,GAA4B,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC5B,QAAA,SAAA,EAAA,KAAA,EAAA,EAAA;;IACE,CAAA,CAAE,SAAF,CAAA,GAAoB,OAAA,CAAQ,+BAAR,CAApB;IACA,EAAA,GAAoB,IAAI,SAAJ,CAAA;IACpB,KAAA,GAAoB,QAAA,CAAE,KAAF,EAAS,OAAT,CAAA;AACtB,UAAA;MAAI,MAAA,GAAS,EAAE,CAAC,eAAH,CAAmB,KAAnB;MACT,IAAA,CAAK,QAAL,EAAe,KAAf;MACA,IAAA,CAAK,QAAL,EAAe,MAAf;yBACA,CAAC,CAAE,EAAH,CAAM,MAAN,EAAc,OAAd;IAJkB;IAKpB,KAAA,CAAM,GAAG,CAAA,MAAA,CAAT,EAA4C,CAAE,GAAF,EAAO,GAAP,CAA5C;IACA,KAAA,CAAM,GAAG,CAAA,cAAA,CAAT,EAA4C,CAAE,GAAF,EAAO,WAAP,CAA5C;IACA,KAAA,CAAM,GAAG,CAAA,0BAAA,CAAT,EAA4C,CAAE,GAAF,EAAO,uBAAP,CAA5C;IACA,KAAA,CAAM,GAAG,CAAA,sBAAA,CAAT,EAA4C,CAAE,GAAF,EAAO,GAAP,EAAY,gBAAZ,CAA5C;IACA,KAAA,CAAM,GAAG,YAAA,CAAT,EAA4C,EAA5C;wCACA;EAd0B,EA1G5B;;;EA4HA,IAAC,CAAA,kCAAD,GAAsC,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACtC,QAAA,SAAA,EAAA,EAAA;;IACE,CAAA,CAAE,SAAF,CAAA,GAAoB,OAAA,CAAQ,+BAAR,CAApB;IACA,EAAA,GAAoB,IAAI,SAAJ,CAAA,EAFtB;;IAIE,EAAE,CAAC,OAAH,CAAW,GAAG,CAAA,6BAAA,CAAd;IACA,EAAE,CAAC,OAAH,CAAW,GAAG,CAAA,6BAAA,CAAd;IACA,EAAE,CAAC,OAAH,CAAW,GAAG,CAAA,sDAAA,CAAd;IAEG,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,OAAA,EAAA,KAAA,EAAA;MAAI,KAAA,GAAU,GAAG,CAAA,qEAAA;MACb,OAAA,GAAU;MACV,MAAA,GAAU,EAAE,CAAC,OAAH,CAAW,KAAX;MACV,KAAA,CAAM,QAAN,EAAgB,GAAA,CAAI,MAAJ,CAAhB;yBACA,CAAC,CAAE,EAAH,CAAM,MAAN,EAAc,OAAd;IALC,CAAA;IAOA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,OAAA,EAAA,KAAA,EAAA;MAAI,KAAA,GAAU,GAAG,CAAA,0BAAA;MACb,OAAA,GAAU;MACV,MAAA,GAAU,EAAE,CAAC,OAAH,CAAW,KAAX;MACV,KAAA,CAAM,QAAN,EAAgB,GAAA,CAAI,MAAJ,CAAhB;yBACA,CAAC,CAAE,EAAH,CAAM,MAAN,EAAc,OAAd;IALC,CAAA;wCAOH;EAvBoC,EA5HtC;;;EAsJA,IAAC,CAAA,+BAAD,GAAmC,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACnC,QAAA,SAAA,EAAA,EAAA;;IACE,CAAA,CAAE,SAAF,CAAA,GAAoB,OAAA,CAAQ,+BAAR,CAApB;IACA,EAAA,GAAoB,IAAI,SAAJ,CAAA;IACpB,EAAA,GAAoB,IAAI,IAAJ,CAAS;MAAE,MAAA,EAAQ;IAAV,CAAT,EAHtB;;IAKE,EAAE,CAAC,OAAH,CAAW,GAAG,CAAA,gCAAA,CAAd;IAEG,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,OAAA,EAAA,KAAA,EAAA;MAAI,KAAA,GAAU,GAAG,CAAA,kCAAA;MACb,OAAA,GAAU;QAAE;UAAE,CAAA,EAAG;QAAL,CAAF;;MACV,MAAA,GAAU,EAAE,CAAC,OAAH,CAAW,KAAX;yBACV,CAAC,CAAE,EAAH,CAAM,MAAN,EAAc,OAAd;IAJC,CAAA;wCAMH;EAdiC,EAtJnC;;;EAyKA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA;MAChC,IAAA,CAAK,IAAC,CAAA,kCAAN;aACA,IAAA,CAAK,IAAL;IAFgC,CAAA,IAAlC;;;EAzKA;;;;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DBAY-SQL-MACROS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate }              = types\n{ Tbl, }                  = require '../../../apps/icql-dba-tabulate'\ndtab                      = new Tbl { dba: null, }\n{ SQL  }                  = ( require '../../../apps/guy' ).str\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@dbay_sqlx_function = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  db                = new DBay_sqlx()\n  #.........................................................................................................\n  _test = ( probe, matcher ) ->\n    try\n      sqlx  = probe\n      sql   = db.resolve sqlx\n      help rpr sqlx\n      info rpr sql\n      T?.eq sql, matcher\n    catch error\n      T?.eq \"ERROR\", \"#{error.message}\\n#{rpr probe}\"\n  #.........................................................................................................\n  db.declare SQL\"\"\"@secret_power( @a, @b ) = power( @a, @b ) / @b;\"\"\"\n  db.declare SQL\"\"\"@max( @a, @b ) = case when @a > @b then @a else @b end;\"\"\"\n  db.declare SQL\"\"\"@concat( @first, @second ) = @first || @second;\"\"\"\n  db.declare SQL\"\"\"@intnn() = integer not null;\"\"\"\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @secret_power( 3, 2 );\"\"\"\n    sql   = SQL\"\"\"select power( 3, 2 ) / 2;\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @max( 3, 2 ) as the_bigger_the_better;\"\"\"\n    sql   = SQL\"\"\"select case when 3 > 2 then 3 else 2 end as the_bigger_the_better;\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( 'here', '\\\\)' );\"\"\"\n    sql   = SQL\"\"\"select 'here' || '\\\\)';\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"\n      create table numbers (\n        n @intnn() primary key );\"\"\"\n    sql   = SQL\"\"\"\n      create table numbers (\n        n integer not null primary key );\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"\n      create table numbers (\n        n @intnn primary key );\"\"\"\n    sql   = SQL\"\"\"\n      create table numbers (\n        n integer not null primary key );\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( 'a', 'b' ) as c1, @concat( 'c', 'd' ) as c2;\"\"\"\n    sql   = SQL\"\"\"select 'a' || 'b' as c1, 'c' || 'd' as c2;\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( 'a', @concat( 'c', 'd' ) );\"\"\"\n    sql   = SQL\"\"\"select 'a' || 'c' || 'd';\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( ',', @concat( ',', ',' ) );\"\"\"\n    sql   = SQL\"\"\"select ',' || ',' || ',';\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_sqlx_find_arguments = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  db                = new DBay_sqlx()\n  _test             = ( probe, matcher ) ->\n    result = db._find_arguments probe\n    help '^43-1^', probe\n    urge '^43-1^', result\n    T?.eq result, matcher\n  _test SQL\"\"\" 3, 2 \"\"\",                      [ '3', '2', ]\n  _test SQL\"\"\" 3, f( 2, 4 ) \"\"\",              [ '3', 'f( 2, 4 )' ]\n  _test SQL\"\"\" 3, f( 2, @g( 4, 5, 6 ) ) \"\"\",  [ '3', 'f( 2, @g( 4, 5, 6 ) )' ]\n  _test SQL\"\"\" 3, 2, \"strange,name\" \"\"\",      [ '3', '2', '\"strange,name\"' ]\n  _test SQL\"\"\"           \"\"\",                 []\n  done?()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_parameter_name_clashes = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  db                = new DBay_sqlx()\n  #.........................................................................................................\n  db.declare SQL\"\"\"@add( @a, @b ) = ( @a + @b );\"\"\"\n  db.declare SQL\"\"\"@mul( @a, @b ) = ( @a * @b );\"\"\"\n  db.declare SQL\"\"\"@frob( @a, @b ) = ( @add( @a * @b, @mul( @a, @b ) ) );\"\"\"\n  #.........................................................................................................\n  do ->\n    probe   = SQL\"\"\"select @add( @mul( @add( 1, 2 ), 3 ), @add( 4, @mul( 5, 6 ) ) ) as p;\"\"\"\n    matcher = 'select ( ( ( 1 + 2 ) * 3 ) + ( 4 + ( 5 * 6 ) ) ) as p;'\n    result  = db.resolve probe\n    debug '^5345^', rpr result\n    T?.eq result, matcher\n  #.........................................................................................................\n  do ->\n    probe   = SQL\"\"\"select @frob( 1, 2 ) as p;\"\"\"\n    matcher = 'select ( ( ( 1 * 2 ) + ( 1 * 2 ) ) ) as p;'\n    result  = db.resolve probe\n    debug '^5345^', rpr result\n    T?.eq result, matcher\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_recursive_expansion = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  db                = new DBay_sqlx()\n  db                = new DBay { macros: true, }\n  #.........................................................................................................\n  db.declare SQL\"\"\"@add_2( @a ) = @a + @ @b ) / @b;\"\"\"\n  #.........................................................................................................\n  do ->\n    probe   = SQL\"\"\"select @secret_power( 3, 2 ) as p;\"\"\"\n    matcher = [ { p: 4.5 } ]\n    result  = db.resolve probe\n    T?.eq result, matcher\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @dbay_macros_parameter_name_clashes\n  test @\n  # @dbay_sql_lexer()\n  # @dbay_sqlx_find_arguments()\n  # test @dbay_sqlx_find_arguments\n  # @dbay_sqlx_function()\n  # test @dbay_sqlx_function\n\n\n"
  ]
}