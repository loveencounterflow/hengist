{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DBAY-SQL-MACROS'\n{ rpr\n  inspect\n  echo\n  log\n  reverse }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate }              = types\n{ Tbl, }                  = require '../../../apps/icql-dba-tabulate'\ndtab                      = new Tbl { dba: null, }\n{ SQL  }                  = ( require '../../../apps/guy' ).str\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_function = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  db                = new DBay_sqlx()\n  #.........................................................................................................\n  _test = ( probe, matcher ) ->\n    try\n      sqlx  = probe\n      sql   = db.resolve sqlx\n      help rpr sqlx\n      info rpr sql\n      T?.eq sql, matcher\n    catch error\n      T?.eq \"ERROR\", \"#{error.message}\\n#{rpr probe}\"\n  #.........................................................................................................\n  db.declare SQL\"\"\"@secret_power( @a, @b ) = power( @a, @b ) / @b;\"\"\"\n  db.declare SQL\"\"\"@max( @a, @b ) = case when @a > @b then @a else @b end;\"\"\"\n  db.declare SQL\"\"\"@concat( @first, @second ) = @first || @second;\"\"\"\n  db.declare SQL\"\"\"@intnn() = integer not null;\"\"\"\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @secret_power( 3, 2 );\"\"\"\n    sql   = SQL\"\"\"select power( 3, 2 ) / 2;\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @max( 3, 2 ) as the_bigger_the_better;\"\"\"\n    sql   = SQL\"\"\"select case when 3 > 2 then 3 else 2 end as the_bigger_the_better;\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( 'here', '\\\\)' );\"\"\"\n    sql   = SQL\"\"\"select 'here' || '\\\\)';\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"\n      create table numbers (\n        n @intnn() primary key );\"\"\"\n    sql   = SQL\"\"\"\n      create table numbers (\n        n integer not null primary key );\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"\n      create table numbers (\n        n @intnn primary key );\"\"\"\n    sql   = SQL\"\"\"\n      create table numbers (\n        n integer not null primary key );\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( 'a', 'b' ) as c1, @concat( 'c', 'd' ) as c2;\"\"\"\n    sql   = SQL\"\"\"select 'a' || 'b' as c1, 'c' || 'd' as c2;\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( 'a', @concat( 'c', 'd' ) );\"\"\"\n    sql   = SQL\"\"\"select 'a' || 'c' || 'd';\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( ',', @concat( ',', ',' ) );\"\"\"\n    sql   = SQL\"\"\"select ',' || ',' || ',';\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_find_arguments = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  db                = new DBay_sqlx()\n  _test             = ( probe, matcher ) ->\n    result = db._find_arguments probe\n    help '^43-1^', probe\n    urge '^43-1^', result\n    T?.eq result, matcher\n  _test SQL\"\"\" 3, 2 \"\"\",                      [ '3', '2', ]\n  _test SQL\"\"\" 3, f( 2, 4 ) \"\"\",              [ '3', 'f( 2, 4 )' ]\n  _test SQL\"\"\" 3, f( 2, @g( 4, 5, 6 ) ) \"\"\",  [ '3', 'f( 2, @g( 4, 5, 6 ) )' ]\n  _test SQL\"\"\" 3, 2, \"strange,name\" \"\"\",      [ '3', '2', '\"strange,name\"' ]\n  _test SQL\"\"\"           \"\"\",                 []\n  done?()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_parameter_name_clashes = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  db                = new DBay_sqlx()\n  #.........................................................................................................\n  db.declare SQL\"\"\"@add( @a, @b ) = ( @a + @b );\"\"\"\n  db.declare SQL\"\"\"@程( @a, @b ) = ( @a * @b );\"\"\"\n  db.declare SQL\"\"\"@程_2( @a, @b ) = ( @a * @b );\"\"\"\n  db.declare SQL\"\"\"@mul( @a, @b ) = ( @a * @b );\"\"\"\n  db.declare SQL\"\"\"@frob( @a, @b ) = ( @add( @a * @b, @mul( @a, @b ) ) );\"\"\"\n  #.........................................................................................................\n  do ->\n    probe   = SQL\"\"\"select @add( @mul( @add( 1, 2 ), 3 ), @add( 4, @mul( 5, 6 ) ) ) as p;\"\"\"\n    matcher = SQL\"\"\"select ( ( ( 1 + 2 ) * 3 ) + ( 4 + ( 5 * 6 ) ) ) as p;\"\"\"\n    result  = db.resolve probe\n    help '^5345^', rpr result\n    T?.eq result, matcher\n  #.........................................................................................................\n  do ->\n    probe   = SQL\"\"\"select @add( @程( @add( 1, 2 ), 3 ), @add( 4, @程( 5, 6 ) ) ) as p;\"\"\"\n    matcher = SQL\"\"\"select ( ( ( 1 + 2 ) * 3 ) + ( 4 + ( 5 * 6 ) ) ) as p;\"\"\"\n    result  = db.resolve probe\n    help '^5345^', rpr result\n    T?.eq result, matcher\n  #.........................................................................................................\n  do ->\n    probe   = SQL\"\"\"select @add( @程_2( @add( 1, 2 ), 3 ), @add( 4, @程_2( 5, 6 ) ) ) as p;\"\"\"\n    matcher = SQL\"\"\"select ( ( ( 1 + 2 ) * 3 ) + ( 4 + ( 5 * 6 ) ) ) as p;\"\"\"\n    result  = db.resolve probe\n    help '^5345^', rpr result\n    T?.eq result, matcher\n  #.........................................................................................................\n  do ->\n    probe   = SQL\"\"\"select @frob( 1, 2 ) as q;\"\"\"\n    matcher = SQL\"\"\"select ( ( 1 * 2 + ( 1 * 2 ) ) ) as q;\"\"\"\n    result  = db.resolve probe\n    help '^5345^', rpr result\n    T?.eq result, matcher\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_works_without_any_declarations = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  m                 = new DBay_sqlx()\n  probe             = SQL\"\"\"select 42 as answer;\"\"\"\n  help '^12-1^', rpr result  = m.resolve probe\n  T?.eq probe, SQL\"\"\"select 42 as answer;\"\"\"\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_checks_for_leftovers = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  m                 = new DBay_sqlx()\n  probe             = SQL\"\"\"\n    select\n      @strange_thing()      as c1,\n      @secret_power( 3, 2 ) as c2,\n      @strange_thing        as c3;\"\"\"\n  debug '^79-1^', try m.resolve probe catch e then warn reverse e.message\n  T?.throws /found unresolved macros @secret_power, @strange_thing/, -> m.resolve probe\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_use_case_virtual_types = ( T, done ) ->\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  { DBay      }     = require '../../../apps/dbay'\n  m                 = new DBay_sqlx()\n  ### NOTE using a 'generic' DB connection w/out implicit macro handling ###\n  db                = new DBay { macros: false, }\n  #.........................................................................................................\n  m.declare SQL\"\"\"@id( @name )    = @name text    check ( @name regexp '^[a-z]{3}-[0-9]{2}' )\"\"\"\n  m.declare SQL\"\"\"@month( @name ) = @name integer check ( @name between 1 and 12 )\"\"\"\n  debug '^14-1^', d for _, d of m._declarations\n  db ->\n    sql = m.resolve SQL\"\"\"\n      create table bookings (\n        @id( \"booking_id\" ),\n        @month( \"booking_period\" )\n        );\"\"\"\n    T?.eq sql, SQL\"\"\"\n      create table bookings (\n        \"booking_id\" text    check ( \"booking_id\" regexp '^[a-z]{3}-[0-9]{2}' ),\n        \"booking_period\" integer check ( \"booking_period\" between 1 and 12 )\n        );\"\"\"\n    urge '^34-1^', sql\n    # db sql\n    db.rollback_transaction()\n    return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_declarations_undone_on_rollback_or_not = ( T, done ) ->\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  { DBay      }     = require '../../../apps/dbay'\n  m                 = new DBay_sqlx()\n  ### NOTE using a 'generic' DB connection w/out implicit macro handling ###\n  db                = new DBay { macros: false, }\n  #.........................................................................................................\n  m.declare SQL\"\"\"@declared_without_tx = whatever;\"\"\"\n  T?.eq ( key for key of m._declarations ), [ '@declared_without_tx', ]\n  db ->\n    m.declare SQL\"\"\"@declared_within_tx = whatever;\"\"\"\n    T?.eq ( key for key of m._declarations ), [ '@declared_without_tx', '@declared_within_tx', ]\n    db.rollback_transaction()\n    return null\n  ### current behavior: ###\n  T?.eq ( key for key of m._declarations ), [ '@declared_without_tx', '@declared_within_tx', ]\n  ### possible future behavior: ###\n  # T?.eq ( key for  of m._declarations ), [ '@declared_without_tx', ]\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @dbay_macros_use_case_virtual_types()\n  # test @dbay_macros_use_case_virtual_types\n  @dbay_macros_parameter_name_clashes()\n  # test @dbay_macros_parameter_name_clashes\n  # @dbay_macros_checks_for_leftovers()\n  # test @dbay_macros_checks_for_leftovers\n  test @\n  # @dbay_sql_lexer()\n  # @dbay_macros_find_arguments()\n  # test @dbay_macros_find_arguments\n  # @dbay_macros_function()\n  # test @dbay_macros_function\n\n\n"
  ]
}