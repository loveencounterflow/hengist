{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DBAY-SQL-MACROS/tests'\n{ rpr\n  inspect\n  echo\n  log\n  reverse }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate }              = types\n{ Tbl, }                  = require '../../../apps/icql-dba-tabulate'\ndtab                      = new Tbl { dba: null, }\n{ SQL  }                  = ( require '../../../apps/guy' ).str\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_regexen = ( T, done ) ->\n  # T?.halt_on_error()\n  regexes = require '../../../apps/dbay-sql-macros/lib/regexes'\n  T?.eq ( type_of regexes.rx.chrs.strict.allowed.head                               ), 'regex'\n  T?.eq ( type_of regexes.rx.chrs.strict.allowed.tail                               ), 'regex'\n  T?.eq ( type_of regexes.rx.chrs.strict.forbidden.head                             ), 'regex'\n  T?.eq ( type_of regexes.rx.chrs.strict.forbidden.tail                             ), 'regex'\n  T?.eq ( type_of regexes.rx.chrs.strict.forbidden.paren                            ), 'regex'\n  T?.eq ( type_of regexes.rx.chrs.practical.allowed.head                            ), 'regex'\n  T?.eq ( type_of regexes.rx.chrs.practical.allowed.tail                            ), 'regex'\n  T?.eq ( type_of regexes.rx.chrs.practical.forbidden.head                          ), 'regex'\n  T?.eq ( type_of regexes.rx.chrs.practical.forbidden.tail                          ), 'regex'\n  T?.eq ( type_of regexes.rx.chrs.practical.forbidden.paren                         ), 'regex'\n  T?.eq ( type_of regexes.get_rx_for_any_name                                       ), 'function'\n  T?.eq ( type_of regexes.get_rx_for_bare_name                                      ), 'function'\n  T?.eq ( type_of regexes.get_rx_for_paren_name                                     ), 'function'\n  T?.eq ( type_of regexes.get_rx_for_start_paren_name                               ), 'function'\n  T?.eq ( type_of rx_for_any_name         = regexes.get_rx_for_any_name()           ), 'regex'\n  T?.eq ( type_of rx_for_bare_name        = regexes.get_rx_for_bare_name()          ), 'regex'\n  T?.eq ( type_of rx_for_paren_name       = regexes.get_rx_for_paren_name()         ), 'regex'\n  T?.eq ( type_of rx_for_start_paren_name = regexes.get_rx_for_start_paren_name()   ), 'regex'\n  T?.eq ( type_of rx_for_parameter_a      = regexes.get_rx_for_parameter 'practical', '|', '@a' ), 'regex'\n  sqlx  = \"22@foo @bar( baz @what's @that( @辻 oops @程　たたみ() @blah\"\n  #.........................................................................................................\n  do ->\n    whisper '^49-1^', rx_for_any_name\n    result = ( { index: match.index, name: match[ 0 ], } for match from sqlx.matchAll rx_for_any_name   )\n    urge '^49-2^', result\n    info '^49-3^', match for match in result\n    T?.eq result, [ { index: 2, name: '@foo' }, { index: 7, name: '@bar' }, { index: 17, name: '@what' }, { index: 25, name: '@that' }, { index: 32, name: '@辻' }, { index: 40, name: '@程　たたみ' }, { index: 49, name: '@blah' } ]\n  #.........................................................................................................\n  do ->\n    whisper '^49-4^', rx_for_bare_name\n    result = ( { index: match.index, name: match[ 0 ], } for match from sqlx.matchAll rx_for_bare_name   )\n    urge '^49-5^', result\n    info '^49-6^', match for match in result\n    T?.eq result, [ { index: 2, name: '@foo' }, { index: 17, name: '@what' }, { index: 32, name: '@辻' }, { index: 49, name: '@blah' } ]\n  #.........................................................................................................\n  do ->\n    whisper '^49-7^', rx_for_parameter_a\n    result = ( { index: match.index, name: match[ 0 ], } for match from \"foo@a bar\".matchAll rx_for_parameter_a   )\n    urge '^49-8^', result\n    info '^49-9^', match for match in result\n    T?.eq result, [ { index: 3, name: '@a' } ]\n  #.........................................................................................................\n  do ->\n    whisper '^49-10^', rx_for_parameter_a\n    result = ( { index: match.index, name: match[ 0 ], } for match from \"foo@a|bar\".matchAll rx_for_parameter_a   )\n    urge '^49-11^', result\n    info '^49-12^', match for match in result\n    T?.eq result, [ { index: 3, name: '@a|' } ]\n  #.........................................................................................................\n  do ->\n    whisper '^49-13^', rx_for_paren_name\n    result = ( { index: match.index, name: match[ 0 ], } for match from sqlx.matchAll rx_for_paren_name   )\n    urge '^49-14^', result\n    info '^49-15^', match for match in result\n    T?.eq result, [ { index: 7, name: '@bar' }, { index: 25, name: '@that' }, { index: 40, name: '@程　たたみ' } ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_declarations = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  #.........................................................................................................\n  do ->\n    m     = new DBay_sqlx()\n    m.declare \"\"\"@secret_power( @a, @b ) = power( @a, @b ) / @b;\"\"\"\n    T?.eq ( k for k of m._declarations ),                 [ '@secret_power', ]\n    T?.eq m._declarations[ '@secret_power' ]?.body,       \"\"\"power( @a, @b ) / @b\"\"\"\n    T?.eq m._declarations[ '@secret_power' ]?.parameters, [ '@a', '@b' ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_simple_resolution = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  #.........................................................................................................\n  _test = ( ref, m, probe, matcher, error ) ->\n    help ref, rpr probe\n    try\n      if error?\n        T?.throws error, -> try result = m.resolve probe catch e then warn ref, reverse e.message; throw e\n        warn ref, rpr result\n      else\n        result = m.resolve probe\n        if result is matcher then ( info ref, rpr result ) else ( warn ref, rpr result )\n        T?.eq result, matcher\n    catch error\n      T?.eq \"ERROR #{ref}\", \"#{error.message}\\n#{rpr probe}\"\n  #.........................................................................................................\n  do ->\n    m     = new DBay_sqlx()\n    m.declare SQL\"\"\"@power( @a, @b ) = ( /* power */ @a ** @b );\"\"\"\n    sqlx  = SQL\"\"\"select @power( 3, 2 ) as x;\"\"\"\n    sql   = SQL\"\"\"select ( /* power */ 3 ** 2 ) as x;\"\"\"\n    _test '^t#1^', m, sqlx, sql\n  #.........................................................................................................\n  do ->\n    m     = new DBay_sqlx()\n    m.declare SQL\"\"\"@secret_power( @a, @b ) = power( @a, @b ) / @b;\"\"\"\n    sqlx  = SQL\"\"\"select @secret_power( 3, 2 ) as x;\"\"\"\n    sql   = SQL\"\"\"select power( 3, 2 ) / 2 as x;\"\"\"\n    _test '^t#2^', m, sqlx, sql\n  #.........................................................................................................\n  do ->\n    m     = new DBay_sqlx()\n    m.declare SQL\"\"\"@hoax( @a ) = @a || '@a' || @a;\"\"\"\n    sqlx  = SQL\"\"\"select @hoax( 'x' ) as hoax;\"\"\"\n    sql   = SQL\"\"\"select 'x' || ''x'' || 'x' as hoax;\"\"\"\n    _test '^t#3^', m, sqlx, sql\n  #.........................................................................................................\n  do ->\n    m     = new DBay_sqlx()\n    m.declare SQL\"\"\"@hoax( @a ) = @a || '\\\\@a' || @a;\"\"\"\n    sqlx  = SQL\"\"\"select @hoax( 'x' ) as hoax;\"\"\"\n    sql   = SQL\"\"\"select 'x' || '@a' || 'x' as hoax;\"\"\"\n    _test '^t#4^', m, sqlx, sql\n  #.........................................................................................................\n  do ->\n    m     = new DBay_sqlx()\n    m.declare SQL\"\"\"@secret_power( @a, @b ) = @power( @a, @b ) / @b;\"\"\"\n    sqlx  = SQL\"\"\"select @secret_power( 3, 2 ) as x;\"\"\"\n    _test '^t#5^', m, sqlx, null, /unknown macro '@power'/\n  #.........................................................................................................\n  do ->\n    m     = new DBay_sqlx()\n    m.declare SQL\"\"\"@add(     @a, @b ) = /*\\\\add*/( @a + @b );\"\"\"\n    m.declare SQL\"\"\"@power(   @a, @b ) = /*\\\\power*/( @a ** @b );\"\"\"\n    m.declare SQL\"\"\"@secret(  @a, @b ) = /*\\\\secret*/( @power( @a, @b ) / @b );\"\"\"\n    sqlx  = SQL\"\"\"select @secret( @add( 1, 2 ), 3 ) as x;\"\"\"\n    # _test '^t#6^', m, sqlx, SQL\"\"\"select /*@secret*/( /*@power*/( /*@add*/( 1 + 2 ) ** 3 ) / 3 ) as x;\"\"\"\n    m.resolve sqlx\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_more_resolutions = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  db                = new DBay_sqlx()\n  #.........................................................................................................\n  _test = ( probe, matcher ) ->\n    try\n      sqlx  = probe\n      sql   = db.resolve sqlx\n      help rpr sqlx\n      info rpr sql\n      T?.eq sql, matcher\n    catch error\n      T?.eq \"ERROR\", \"#{error.message}\\n#{rpr probe}\"\n  #.........................................................................................................\n  db.declare SQL\"\"\"@secret_power( @a, @b ) = power( @a, @b ) / @b;\"\"\"\n  db.declare SQL\"\"\"@max( @a, @b ) = case when @a > @b then @a else @b end;\"\"\"\n  db.declare SQL\"\"\"@concat( @first, @second ) = @first || @second;\"\"\"\n  db.declare SQL\"\"\"@intnn() = integer not null;\"\"\"\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @secret_power( 3, 2 );\"\"\"\n    sql   = SQL\"\"\"select power( 3, 2 ) / 2;\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @max( 3, 2 ) as the_bigger_the_better;\"\"\"\n    sql   = SQL\"\"\"select case when 3 > 2 then 3 else 2 end as the_bigger_the_better;\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( 'here', '\\\\)' );\"\"\"\n    sql   = SQL\"\"\"select 'here' || '\\\\)';\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"\n      create table numbers (\n        n @intnn() primary key );\"\"\"\n    sql   = SQL\"\"\"\n      create table numbers (\n        n integer not null primary key );\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( 'a', 'b' ) as c1, @concat( 'c', 'd' ) as c2;\"\"\"\n    sql   = SQL\"\"\"select 'a' || 'b' as c1, 'c' || 'd' as c2;\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( 'a', @concat( 'c', 'd' ) );\"\"\"\n    sql   = SQL\"\"\"select 'a' || 'c' || 'd';\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( ',', @concat( ',', ',' ) );\"\"\"\n    sql   = SQL\"\"\"select ',' || ',' || ',';\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_find_arguments = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  db                = new DBay_sqlx()\n  _test             = ( probe, matcher ) ->\n    result = db._find_arguments probe\n    # help '^43-1^', probe\n    urge '^43-1^', result\n    T?.eq result, matcher\n  _test SQL\"\"\"( 3, 2 )\"\"\",                                      { values: [ '3', '2' ], stop_idx: 8 }\n  _test SQL\"\"\"( 3, f( 2, 4 ) )\"\"\",                              { values: [ '3', 'f( 2, 4 )' ], stop_idx: 16 }\n  _test SQL\"\"\"( 3, f( 2, @g( 4, 5, 6 ) ) )\"\"\",                  { values: [ '3', 'f( 2, @g( 4, 5, 6 ) )' ], stop_idx: 28 }\n  _test SQL\"\"\"( 3, 2, \"strange,name\" )\"\"\",                      { values: [ '3', '2', '\"strange,name\"' ], stop_idx: 24 }\n  _test SQL\"\"\"(           )\"\"\",                                 { values: [], stop_idx: 13 }\n  _test SQL\"\"\"()\"\"\",                                            { values: [], stop_idx: 2 }\n  _test SQL\"\"\"( @power( 1, 2 ), 3 ) as x;\"\"\",                   { values: [ '@power( 1, 2 )', '3' ], stop_idx: 21 }\n  _test SQL\"\"\"( @power( 1, @f( 2, 3, @g( 4 ) ) ), 5 ) as x;\"\"\", { values: [ '@power( 1, @f( 2, 3, @g( 4 ) ) )', '5' ], stop_idx: 39 }\n  _test SQL\"\"\"( /*@add*/( 1 + 2 ), 3 ) / 3 )\"\"\",                { values: [ '/*@add*/( 1 + 2 )', '3' ], stop_idx: 24 }\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_parameter_name_clashes = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  db                = new DBay_sqlx()\n  #.........................................................................................................\n  db.declare SQL\"\"\"@add( @a, @b ) = ( @a + @b );\"\"\"\n  db.declare SQL\"\"\"@程( @a, @b ) = ( @a * @b );\"\"\"\n  db.declare SQL\"\"\"@程_2( @a, @b ) = ( @a * @b );\"\"\"\n  db.declare SQL\"\"\"@mul( @a, @b ) = ( @a * @b );\"\"\"\n  db.declare SQL\"\"\"@frob( @a, @b ) = ( @add( @a * @b, @mul( @a, @b ) ) );\"\"\"\n  #.........................................................................................................\n  do ->\n    probe   = SQL\"\"\"select @add( @mul( @add( 1, 2 ), 3 ), @add( 4, @mul( 5, 6 ) ) ) as p;\"\"\"\n    matcher = SQL\"\"\"select ( ( ( 1 + 2 ) * 3 ) + ( 4 + ( 5 * 6 ) ) ) as p;\"\"\"\n    result  = db.resolve probe\n    help '^5345^', rpr result\n    T?.eq result, matcher\n  #.........................................................................................................\n  do ->\n    probe   = SQL\"\"\"select @add( @程( @add( 1, 2 ), 3 ), @add( 4, @程( 5, 6 ) ) ) as p;\"\"\"\n    matcher = SQL\"\"\"select ( ( ( 1 + 2 ) * 3 ) + ( 4 + ( 5 * 6 ) ) ) as p;\"\"\"\n    result  = db.resolve probe\n    help '^5345^', rpr result\n    T?.eq result, matcher\n  #.........................................................................................................\n  do ->\n    probe   = SQL\"\"\"select @add( @程_2( @add( 1, 2 ), 3 ), @add( 4, @程_2( 5, 6 ) ) ) as p;\"\"\"\n    matcher = SQL\"\"\"select ( ( ( 1 + 2 ) * 3 ) + ( 4 + ( 5 * 6 ) ) ) as p;\"\"\"\n    result  = db.resolve probe\n    help '^5345^', rpr result\n    T?.eq result, matcher\n  #.........................................................................................................\n  do ->\n    probe   = SQL\"\"\"select @frob( 1, 2 ) as q;\"\"\"\n    matcher = SQL\"\"\"select ( ( 1 * 2 + ( 1 * 2 ) ) ) as q;\"\"\"\n    result  = db.resolve probe\n    help '^5345^', rpr result\n    T?.eq result, matcher\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_works_without_any_declarations = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  m                 = new DBay_sqlx()\n  #.........................................................................................................\n  do ->\n    probe             = SQL\"\"\"select 42 as answer;\"\"\"\n    help '^12-1^', rpr result  = m.resolve probe\n    T?.eq result, SQL\"\"\"select 42 as answer;\"\"\"\n  #.........................................................................................................\n  do ->\n    probe             = SQL\"\"\"\n      select\n      42\n      as\n      answer;\"\"\"\n    help '^12-1^', rpr result  = m.resolve probe\n    T?.eq result, SQL\"\"\"\n      select\n      42\n      as\n      answer;\"\"\"\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_works_without_any_matching_declarations = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  m                 = new DBay_sqlx()\n  m.declare SQL\"\"\"@add( @a, @b ) = ( @a + @b );\"\"\"\n  #.........................................................................................................\n  do ->\n    probe             = SQL\"\"\"select 42 as answer;\"\"\"\n    help '^12-1^', rpr result  = m.resolve probe\n    T?.eq result, SQL\"\"\"select 42 as answer;\"\"\"\n  #.........................................................................................................\n  do ->\n    probe             = SQL\"\"\"\n      select\n      42\n      as\n      answer;\"\"\"\n    help '^12-1^', rpr result  = m.resolve probe\n    T?.eq result, SQL\"\"\"\n      select\n      42\n      as\n      answer;\"\"\"\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_checks_for_leftovers = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  #.........................................................................................................\n  do ->\n    m                 = new DBay_sqlx()\n    probe             = SQL\"\"\"\n      select\n        @strange_thing()      as c1,\n        @secret_power( 3, 2 ) as c2,\n        @strange_thing        as c3;\"\"\"\n    debug '^79-1^', try m.resolve probe catch e then warn reverse e.message\n    try m.resolve probe catch e then warn reverse e.message\n    T?.throws /unknown macro '@strange_thing'/, -> m.resolve probe\n  #.........................................................................................................\n  do ->\n    m                 = new DBay_sqlx()\n    m.declare SQL\"\"\"@secret_power( @a, @b ) = @power( @a, @b ) / @b;\"\"\"\n    probe  = SQL\"\"\"select @secret_power( 3, 2 ) as x;\"\"\"\n    debug '^79-1^', try m.resolve probe catch e then warn reverse e.message\n    try m.resolve probe catch e then warn reverse e.message\n    T?.throws /unknown macro '@power'/, -> m.resolve probe\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_dont_allow_undeclared_parameters = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  probe             = SQL\"\"\"@macro( @parameter ) = ( @parameter * @undeclared + @invented );\"\"\"\n  #.........................................................................................................\n  do ->\n    m     = new DBay_sqlx()\n    try m.declare probe catch e then warn reverse e.message\n    return null\n  #.........................................................................................................\n  do ->\n    m     = new DBay_sqlx()\n    T?.throws /unknown parameters '@undeclared', '@invented'/, -> m.declare probe\n    return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_dont_allow_reduplicated_parameters = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  probe             = SQL\"\"\"@macro( @a, @parameter, @a, @parameter, @b ) = whatever;\"\"\"\n  #.........................................................................................................\n  do ->\n    m     = new DBay_sqlx()\n    try m.declare probe catch e then warn reverse e.message\n    return null\n  #.........................................................................................................\n  do ->\n    m     = new DBay_sqlx()\n    T?.throws /duplicate parameters '@a', '@parameter'/, -> m.declare probe\n    return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_dont_allow_unprefixed_parameters = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  probe             = SQL\"\"\"@macro( @a, naked, @b ) = whatever;\"\"\"\n  #.........................................................................................................\n  do ->\n    m     = new DBay_sqlx()\n    try m.declare probe catch e then warn reverse e.message\n    return null\n  #.........................................................................................................\n  do ->\n    m     = new DBay_sqlx()\n    T?.throws /syntax error in parameters of declaration/, -> m.declare probe\n    return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_allow_name_reuse_between_macros_and_parameters = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  do ->\n    m = new DBay_sqlx()\n    try m.declare SQL\"\"\"@foo_1( @foo_1 ) = ( @foo_1 * @foo_1 );\"\"\" catch e then warn reverse e.message\n    result = m.resolve SQL\"\"\"select @foo_1( 42 );\"\"\"\n    urge '^80-1^', rpr result\n    T?.eq result, SQL\"\"\"select ( 42 * 42 );\"\"\"\n  do ->\n    m = new DBay_sqlx()\n    try m.declare SQL\"\"\"@a( @b ) = (a @b );\"\"\" catch e then warn reverse e.message\n    try m.declare SQL\"\"\"@b( @a ) = (b @a );\"\"\" catch e then warn reverse e.message\n    T?.eq ( m.resolve \"@a( 'b' )\"       ), SQL\"\"\"(a 'b' )\"\"\"\n    T?.eq ( m.resolve \"@b( 'a' )\"       ), SQL\"\"\"(b 'a' )\"\"\"\n    T?.eq ( m.resolve \"@a( @b( 'a' ) )\" ), SQL\"\"\"(a (b 'a' ) )\"\"\"\n    T?.eq ( m.resolve \"@b( @a( 'b' ) )\" ), SQL\"\"\"(b (a 'b' ) )\"\"\"\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_dont_allow_circular_references = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  #.........................................................................................................\n  do ->\n    probe = SQL\"\"\"@recursive( @x ) = ( @recursive( @x ) + @recursive( @x ) );\"\"\"\n    m = new DBay_sqlx()\n    try m.declare probe catch e then warn reverse e.message\n    T?.throws /detected circular references/, -> m.declare probe\n  #.........................................................................................................\n  do ->\n    m = new DBay_sqlx()\n    m.declare SQL\"\"\"@f( @x ) = ( @g( @x ) + @h( @x ) );\"\"\"\n    m.declare SQL\"\"\"@g( @x ) = sin( @x );\"\"\"\n    m.declare SQL\"\"\"@h( @x ) = cos( @x ) / @k( @x );\"\"\"\n    help '^5345^', rpr ( require 'ltsort' ).group m._topograph\n    T?.throws /detected circular references/, -> m.declare SQL\"\"\"@k( @x ) = @f( @x ) * @g( @x );\"\"\"\n  #.........................................................................................................\n  do ->\n    m = new DBay_sqlx()\n    m.declare SQL\"\"\"@add( @a, @b ) = ( @a + @b );\"\"\"\n    m.declare SQL\"\"\"@mul( @a, @b ) = ( @a * @b );\"\"\"\n    probe   = SQL\"\"\"select @add( @mul( @add( 1, 2 ), 3 ), @add( 4, @mul( 5, 6 ) ) ) as p;\"\"\"\n    matcher = SQL\"\"\"select ( ( ( 1 + 2 ) * 3 ) + ( 4 + ( 5 * 6 ) ) ) as p;\"\"\"\n    result  = m.resolve probe\n    help '^5345^', rpr result\n    T?.eq result, matcher\n    help '^5345^', rpr ( require 'ltsort' ).group m._topograph\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_use_case_virtual_types = ( T, done ) ->\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  { DBay      }     = require '../../../apps/dbay'\n  m                 = new DBay_sqlx()\n  ### NOTE using a 'generic' DB connection w/out implicit macro handling ###\n  db                = new DBay { macros: false, }\n  #.........................................................................................................\n  m.declare SQL\"\"\"@id( @name )    = @name text    check ( @name regexp '^[a-z]{3}-[0-9]{2}' )\"\"\"\n  m.declare SQL\"\"\"@month( @name ) = @name integer check ( @name between 1 and 12 )\"\"\"\n  # debug '^14-1^', d for _, d of m._declarations\n  db ->\n    sql = m.resolve SQL\"\"\"\n      create table bookings (\n        @id( \"booking_id\" ),\n        @month( \"booking_period\" )\n        );\"\"\"\n    T?.eq sql, SQL\"\"\"\n      create table bookings (\n        \"booking_id\" text    check ( \"booking_id\" regexp '^[a-z]{3}-[0-9]{2}' ),\n        \"booking_period\" integer check ( \"booking_period\" between 1 and 12 )\n        );\"\"\"\n    urge '^34-1^', sql\n    # db sql\n    db.rollback_transaction()\n    return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_macros_declarations_undone_on_rollback_or_not = ( T, done ) ->\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  { DBay      }     = require '../../../apps/dbay'\n  m                 = new DBay_sqlx()\n  ### NOTE using a 'generic' DB connection w/out implicit macro handling ###\n  db                = new DBay { macros: false, }\n  #.........................................................................................................\n  m.declare SQL\"\"\"@declared_without_tx() = whatever;\"\"\"\n  T?.eq ( key for key of m._declarations ), [ '@declared_without_tx', ]\n  db ->\n    m.declare SQL\"\"\"@declared_within_tx() = whatever;\"\"\"\n    T?.eq ( key for key of m._declarations ), [ '@declared_without_tx', '@declared_within_tx', ]\n    db.rollback_transaction()\n    return null\n  ### current behavior: ###\n  T?.eq ( key for key of m._declarations ), [ '@declared_without_tx', '@declared_within_tx', ]\n  ### possible future behavior: ###\n  # T?.eq ( key for  of m._declarations ), [ '@declared_without_tx', ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@_dbay_macros_demo_legal_chrs_in_identifiers = ( T, done ) ->\n  { DBay      }     = require '../../../apps/dbay'\n  db                = new DBay()\n  #.........................................................................................................\n  db ->\n    for cid in [ 0x0000 .. 0xffff ]\n      cid_hex = '0x' + ( cid.toString 16 ).padStart 4, '0'\n      chr   = String.fromCodePoint cid\n      name  = \"#{chr}x\"\n      # name  = \"x#{chr}x\"\n      try\n        rows = ( row for row from db SQL\"\"\"select 42 as #{name};\"\"\" )\n        # debug '^434^', cid_hex, rows[ 0 ]\n      catch error\n        warn cid_hex, GUY.trm.reverse error.message\n    debug '^645^', cid_hex\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_vanishing_terminator = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay_sqlx }     = require '../../../apps/dbay-sql-macros'\n  m                 = new DBay_sqlx()\n  m.declare SQL\"\"\"@mymacro( @a ) = FOO@a|BAR;\"\"\"\n  m.declare SQL\"\"\"@othermacro( @a ) = FOO@a||BAR;\"\"\"\n  #.........................................................................................................\n  do ->\n    sqlx              = \"@mymacro( value_of_a )\"\n    result            = m.resolve sqlx\n    urge '^50-8^', result\n    T?.eq result, \"FOOvalue_of_aBAR\"\n  #.........................................................................................................\n  do ->\n    sqlx              = \"@othermacro( value_of_a )\"\n    result            = m.resolve sqlx\n    urge '^50-8^', result\n    T?.eq result, \"FOOvalue_of_a|BAR\"\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @dbay_macros_use_case_virtual_types()\n  # test @dbay_macros_use_case_virtual_types\n  # @dbay_macros_find_arguments()\n  # test @dbay_macros_find_arguments\n  # test @dbay_macros_works_without_any_declarations\n  # @_dbay_macros_demo_legal_chrs_in_identifiers()\n  # @dbay_macros_regexen()\n  # test @dbay_macros_regexen\n  # test @dbay_macros_declarations\n  # @dbay_macros_simple_resolution()\n  # test @dbay_macros_simple_resolution\n  # @dbay_macros_more_resolutions()\n  # test @dbay_macros_more_resolutions\n  # @dbay_macros_checks_for_leftovers()\n  # test @dbay_macros_checks_for_leftovers\n  # @_dbay_macros_demo_boundaries()\n  # @dbay_vanishing_terminator()\n  # test @dbay_vanishing_terminator\n  # @dbay_macros_dont_allow_circular_references()\n  # test @dbay_macros_dont_allow_circular_references\n  # @dbay_macros_dont_allow_undeclared_parameters()\n  # test @dbay_macros_dont_allow_undeclared_parameters\n  # @dbay_macros_dont_allow_reduplicated_parameters()\n  # test @dbay_macros_dont_allow_reduplicated_parameters\n  # @dbay_macros_dont_allow_unprefixed_parameters()\n  # test @dbay_macros_dont_allow_unprefixed_parameters\n  # @dbay_macros_declarations_undone_on_rollback_or_not()\n  # test @dbay_macros_declarations_undone_on_rollback_or_not\n  # @dbay_macros_parameter_name_clashes()\n  # test @dbay_macros_parameter_name_clashes\n  test @\n\n\n"
  ]
}