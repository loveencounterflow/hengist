{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-sticky-regex-lexer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DEMO-MOO-LEXER'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ equals }                = GUY.samesame\n# new_xregex                = require 'xregexp'\n# E                         = require '../../../apps/dbay/lib/errors'\n{ Tbl, }                  = require '../../../apps/icql-dba-tabulate'\ndtab                      = new Tbl { dba: null, }\n\n#-----------------------------------------------------------------------------------------------------------\n@rx =\n  chrs:\n    strict:\n      allowed:\n        head:     /// [        A-Z _ a-z \\u{0080}-\\u{10ffff}  ] ///u\n        tail:     /// [  $ 0-9 A-Z _ a-z \\u{0080}-\\u{10ffff}  ] ///u\n      forbidden:\n        head:     /// [  \\x00-\\x2f           \\x3a-\\x40 \\x5b-\\x5e \\x60 \\x7b-\\x7f ] ///u\n        tail:     /// [  \\x00-\\x23 \\x25-\\x2f \\x3a-\\x40 \\x5b-\\x5e \\x60 \\x7b-\\x7f ] ///u\n        paren:    /// [  ( $ 0-9 A-Z _ a-z \\u{0080}-\\u{10ffff}  ] ///u\n    practical:\n      allowed:\n        # head:     /// [        A-Z _ a-z   ] ///u\n        # tail:     /// [  $ 0-9 A-Z _ a-z   ] ///u\n        head:     /// [        A-Z _ a-z \\u{00a1}-\\u{10ffff}  ] ///u\n        tail:     /// [  $ 0-9 A-Z _ a-z \\u{00a1}-\\u{10ffff}  ] ///u\n      forbidden:\n        head:     /// [  \\x00-\\x2f           \\x3a-\\x40 \\x5b-\\x5e \\x60 \\x7b-\\xa0 ] ///u\n        tail:     /// [  \\x00-\\x23 \\x25-\\x2f \\x3a-\\x40 \\x5b-\\x5e \\x60 \\x7b-\\xa0 ] ///u\n        paren:    /// [  ( $ 0-9 A-Z _ a-z \\u{00a1}-\\u{10ffff}  ] ///u\n\n#-----------------------------------------------------------------------------------------------------------\n@demo = ->\n  { Lexer } = require '../../../apps/dbay-sql-lexer'\n  cfg =\n    # segment: /[\\n\\x20]/\n    tokens:\n      ws_linear:        /[\\x20\\x09\\xa0]+/u ### TAINT incomplete but ¿good enough? for SQLite ###\n      ws_nl:            /\\n/u\n      #.....................................................................................................\n      keyword_select:   /select\\b/u\n      keyword_as:       /as\\b/u\n      keyword_from:     /from\\b/u\n      #.....................................................................................................\n      paren_left:       '('\n      paren_right:      ')'\n      #.....................................................................................................\n      op_plus:          '+'\n      op_minus:         '-'\n      # op_caret:         '^' ### NOTE not an actual operator in SQLite ###\n      # op_dollar:        '$' ### NOTE not an actual operator in SQLite ###\n      op_star:          '*'\n      op_slash:         '/'\n      op_dsolidus:      '||'\n      #.....................................................................................................\n      sep_comma:        ','\n      sep_semicolon:    ';'\n      #.....................................................................................................\n      literal_string:   /'(?:\\\\['\\\\]|[^'\\\\])*'/us # , value: ( ( s ) => s.slice 1, -1 ), }\n      #.....................................................................................................\n      identifier_dq:    /// \" [^\"]+ \" ///u\n      identifier_bare:  /// #{@rx.chrs.practical.allowed.head.source} #{@rx.chrs.practical.allowed.tail.source}* ///u\n      #.....................................................................................................\n      other_illegal:    /\\x00/u\n      other_unknown:    { matcher: /./u, consolidate: true, }\n  #.........................................................................................................\n  lexer = new Lexer cfg\n  tokens = lexer.read \"\"\"select\n      'foo\n      bar' as 国字,\n      selectclass as classselect,\n      a || 'test' as \"what ever\",\n      ( 4 + c - y ) as d ^%$\\x00\n    from t;\"\"\"\n  tokens = ( d for d in tokens when not d.token.startsWith 'ws_' )\n  echo dtab._tabulate tokens\n  # for token from lexer\n  #   debug '^5534^', token\n  #.........................................................................................................\n  return null\n\n############################################################################################################\nif require.main is module then do =>\n  @demo()\n"
  ]
}