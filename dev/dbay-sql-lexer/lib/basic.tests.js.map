{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/basic.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DBAY-SQL-LEXER'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate }              = types\n# X                         = require '../../../lib/helpers'\nr                         = String.raw\n{ Tbl, }                  = require '../../../apps/icql-dba-tabulate'\ndtab                      = new Tbl { dba: null, }\n{ DBay }                  = require '../../../apps/dbay'\n{ SQL  }                  = DBay\n#-----------------------------------------------------------------------------------------------------------\nshow = ( sql, tokens ) ->\n  info rpr sql\n  echo dtab._tabulate tokens\n  return tokens\n\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_sql_lexer = ( T, done ) ->\n  lexer             = require '../../../apps/dbay-sql-lexer'\n  info k for k in ( GUY.props.keys lexer ).sort()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ SQL\"select * from my_table\",          [\n      { type: 'select', text: 'select', idx: 0 },\n      { type: 'star', text: '*', idx: 7 },\n      { type: 'from', text: 'from', idx: 9 },\n      { type: 'identifier', text: 'my_table', idx: 14 }, ], null ]\n    [ SQL\"select a from my_table\",          [\n      { type: 'select', text: 'select', idx: 0 },\n      { type: 'identifier', text: 'a', idx: 7 },\n      { type: 'from', text: 'from', idx: 9 },\n      { type: 'identifier', text: 'my_table', idx: 14 }, ], null ]\n    [ SQL\"select 阿 from my_table\",          [\n      { type: 'select', text: 'select', idx: 0 },\n      { type: 'identifier', text: '阿', idx: 7 },\n      { type: 'from', text: 'from', idx: 9 },\n      { type: 'identifier', text: 'my_table', idx: 14 }, ], null ]\n    [ SQL\"select '阿' as c$\",          [\n      { type: 'select', text: 'select', idx: 0 },\n      { type: 'string', text: '阿', idx: 7 },\n      { type: 'as', text: 'as', idx: 11 },\n      { type: 'identifier', text: 'c$', idx: 14 } ], null ]\n    [ SQL\"42\",                              [ { type: 'number', text: '42', idx: 0 }, ], null ]\n    [ SQL\"( 'text', 'another''text', 42 )\", [ { type: 'left_paren', text: '(', idx: 0 }, { type: 'string', text: 'text', idx: 2 }, { type: 'comma', text: ',', idx: 8 }, { type: 'string', text: \"another'text\", idx: 10 }, { type: 'comma', text: ',', idx: 25 }, { type: 'number', text: '42', idx: 27 }, { type: 'right_paren', text: ')', idx: 30 }, ], null ]\n    [ SQL\"( 'text', @f( 1, 2, 3 ), 42 )\",   [ { type: 'left_paren', text: '(', idx: 0 }, { type: 'string', text: 'text', idx: 2 }, { type: 'comma', text: ',', idx: 8 }, { type: 'unknown', text: '@', idx: 10 }, { type: 'identifier', text: 'f', idx: 11 }, { type: 'left_paren', text: '(', idx: 12 }, { type: 'number', text: '1', idx: 14 }, { type: 'comma', text: ',', idx: 15 }, { type: 'number', text: '2', idx: 17 }, { type: 'comma', text: ',', idx: 18 }, { type: 'number', text: '3', idx: 20 }, { type: 'right_paren', text: ')', idx: 22 }, { type: 'comma', text: ',', idx: 23 }, { type: 'number', text: '42', idx: 25 }, { type: 'right_paren', text: ')', idx: 28 }, ], null ]\n    [ SQL'SELECT 42 as c;',                 [ { type: 'select', text: 'SELECT', idx: 0 }, { type: 'number', text: '42', idx: 7 }, { type: 'as', text: 'as', idx: 10 }, { type: 'identifier', text: 'c', idx: 13 }, { type: 'semicolon', text: ';', idx: 14 }, ], null ]\n    [ SQL\"select 'helo', 'world''';\",       [ { type: 'select', text: 'select', idx: 0 }, { type: 'string', text: 'helo', idx: 7 }, { type: 'comma', text: ',', idx: 13 }, { type: 'string', text: \"world'\", idx: 15 }, { type: 'semicolon', text: ';', idx: 24 }, ], null ]\n    [ SQL\"select 'helo', 'world'''\",        [ { type: 'select', text: 'select', idx: 0 }, { type: 'string', text: 'helo', idx: 7 }, { type: 'comma', text: ',', idx: 13 }, { type: 'string', text: \"world'\", idx: 15 }, ], null ]\n    [ SQL\"this is any text $%§'§\",          [ { type: 'identifier', text: 'this', idx: 0 }, { type: 'operator', text: 'is', idx: 5 }, { type: 'sub_select_op', text: 'any', idx: 8 }, { type: 'identifier', text: 'text', idx: 12 }, { type: 'unknown', text: '$', idx: 17 }, { type: 'unknown', text: '%', idx: 18 }, { type: 'unknown', text: '§', idx: 19 }, { type: 'unknown', text: \"'\", idx: 20 }, { type: 'unknown', text: '§', idx: 21 }, ], null ]\n    ### TAINT reactivate ###\n    # [ SQL\"\"\"'a' \"b\" [c] `d` {e}\"\"\",         [\n    #   { type: 'string',             text: 'a', idx: 0 },\n    #   { type: 'quoted_identifier',  text: 'b', idx: 4 },\n    #   { type: 'unknown',            text: '[', idx: 8 },\n    #   { type: 'identifier',         text: 'c', idx: 9 },\n    #   { type: 'unknown',            text: ']', idx: 10 },\n    #   { type: 'identifier',         text: 'd', idx: 12 },\n    #   { type: 'unknown',            text: '{', idx: 16 },\n    #   { type: 'identifier',         text: 'e', idx: 17 },\n    #   { type: 'unknown',            text: '}', idx: 18 },\n    #   ], null ]\n    [ SQL\"select * from t where t.a between 0 and 1;\", [\n      { type: 'select',       text: 'select',   idx: 0 },\n      { type: 'star',         text: '*',        idx: 7 },\n      { type: 'from',         text: 'from',     idx: 9 },\n      { type: 'identifier',   text: 't',        idx: 14 },\n      { type: 'where',        text: 'where',    idx: 16 },\n      { type: 'identifier',   text: 't',        idx: 22 },\n      { type: 'dot',          text: '.',        idx: 23 },\n      { type: 'identifier',   text: 'a',        idx: 24 },\n      { type: 'between',      text: 'between',  idx: 26 },\n      { type: 'number',       text: '0',        idx: 34 },\n      { type: 'conditional',  text: 'and',      idx: 36 },\n      { type: 'number',       text: '1',        idx: 40 },\n      { type: 'semicolon',    text: ';',        idx: 41 } ], null ]\n    [ SQL\"select * from t where t.a not between 0 and 1;\", [\n      { type: 'select',       text: 'select',   idx: 0 },\n      { type: 'star',         text: '*',        idx: 7 },\n      { type: 'from',         text: 'from',     idx: 9 },\n      { type: 'identifier',   text: 't',        idx: 14 },\n      { type: 'where',        text: 'where',    idx: 16 },\n      { type: 'identifier',   text: 't',        idx: 22 },\n      { type: 'dot',          text: '.',        idx: 23 },\n      { type: 'identifier',   text: 'a',        idx: 24 },\n      { type: 'not',          text: 'not',      idx: 26 },\n      { type: 'between',      text: 'between',  idx: 30 },\n      { type: 'number',       text: '0',        idx: 38 },\n      { type: 'conditional',  text: 'and',      idx: 40 },\n      { type: 'number',       text: '1',        idx: 44 },\n      { type: 'semicolon',    text: ';',        idx: 45 } ], null ]\n    [ SQL\"select * from t where t.a not      between 0 and 1;\", [\n      { type: 'select',       text: 'select',   idx: 0 },\n      { type: 'star',         text: '*',        idx: 7 },\n      { type: 'from',         text: 'from',     idx: 9 },\n      { type: 'identifier',   text: 't',        idx: 14 },\n      { type: 'where',        text: 'where',    idx: 16 },\n      { type: 'identifier',   text: 't',        idx: 22 },\n      { type: 'dot',          text: '.',        idx: 23 },\n      { type: 'identifier',   text: 'a',        idx: 24 },\n      { type: 'not',          text: 'not',      idx: 26 },\n      { type: 'between',      text: 'between',  idx: 35 },\n      { type: 'number',       text: '0',        idx: 43 },\n      { type: 'conditional',  text: 'and',      idx: 45 },\n      { type: 'number',       text: '1',        idx: 49 },\n      { type: 'semicolon',    text: ';',        idx: 50 } ], null ]\n    [ SQL\"a not in ( 'a', 'b', )\", [\n      { type: 'identifier',     text: 'a',      idx: 0 },\n      { type: 'not',            text: 'not',    idx: 2 },\n      { type: 'sub_select_op',  text: 'in',     idx: 6 },\n      { type: 'left_paren',     text: '(',      idx: 9 },\n      { type: 'string',         text: 'a',      idx: 11 },\n      { type: 'comma',          text: ',',      idx: 14 },\n      { type: 'string',         text: 'b',      idx: 16 },\n      { type: 'comma',          text: ',',      idx: 19 },\n      { type: 'right_paren',    text: ')',      idx: 21 } ], null ]\n    [ SQL\"select avg( x )\", [\n      { type: 'select',       text: 'select',   idx: 0 },\n      { type: 'identifier',   text: 'avg',      idx: 7 },\n      { type: 'left_paren',   text: '(',        idx: 10 },\n      { type: 'identifier',   text: 'x',        idx: 12 },\n      { type: 'right_paren',  text: ')',        idx: 14 } ], null ]\n    [ SQL\"select f( x )\", [\n      { type: 'select',       text: 'select',   idx: 0 },\n      { type: 'identifier',   text: 'f',        idx: 7 },\n      { type: 'left_paren',   text: '(',        idx: 8 },\n      { type: 'identifier',   text: 'x',        idx: 10 },\n      { type: 'right_paren',  text: ')',        idx: 12 } ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result = lexer.tokenize probe\n      show probe, result\n      resolve result\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_sql_lexer_recognizes_comments = ( T, done ) ->\n  lexer             = require '../../../apps/dbay-sql-lexer'\n  #.........................................................................................................\n  sqlx = SQL\"foobar -- whatever\";     T?.eq ( show sqlx, lexer.tokenize sqlx ), [ { type: 'identifier', text: 'foobar', idx: 0 }, { type: 'eolcomment', text: '--', idx: 7 }, { type: 'identifier', text: 'whatever', idx: 10 } ]\n  sqlx = SQL\"foo /* whatever */ bar\"; T?.eq ( show sqlx, lexer.tokenize sqlx ), [ { type: 'identifier', text: 'foo', idx: 0 }, { type: 'blockcomment', text: '/* whatever */', idx: 4 }, { type: 'identifier', text: 'bar', idx: 19 } ]\n  #.........................................................................................................\n  done?()\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n  # @dbay_sql_lexer()\n  # @dbay_sqlx_find_arguments()\n  # test @dbay_sqlx_find_arguments\n  # @dbay_sqlx_function()\n  # test @dbay_sqlx_function\n\n\n"
  ]
}