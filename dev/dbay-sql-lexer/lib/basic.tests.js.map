{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/basic.tests.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,gBAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC,EAdA;;;EAmBA,IAAA,GAA4B,OAAA,CAAQ,wBAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR,EApB5B;;;EAsBA,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,MADF,EAEE,OAFF,EAGE,QAHF,CAAA,GAG4B,KAH5B,EAvBA;;;EA4BA,CAAA,GAA4B,MAAM,CAAC;;EACnC,CAAA,CAAE,GAAF,CAAA,GAA4B,OAAA,CAAQ,iCAAR,CAA5B;;EACA,IAAA,GAA4B,IAAI,GAAJ,CAAQ;IAAE,GAAA,EAAK;EAAP,CAAR;;EAC5B,CAAA,CAAE,IAAF,CAAA,GAA4B,OAAA,CAAQ,oBAAR,CAA5B;;EACA,CAAA,CAAE,GAAF,CAAA,GAA4B,IAA5B,EAhCA;;;EAkCA,IAAA,GAAO,QAAA,CAAE,GAAF,EAAO,MAAP,CAAA;IACL,IAAA,CAAK,GAAA,CAAI,GAAJ,CAAL;IACA,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,MAAf,CAAL;AACA,WAAO;EAHF,EAlCP;;;EAyCA,IAAC,CAAA,cAAD,GAAkB,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAClB,QAAA,KAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,EAAA;IAAE,CAAA,CAAE,EAAF,EACE,GADF,CAAA,GACY,OAAA,CAAQ,2BAAR,CADZ;IAEA,CAAA,CAAE,KAAF,CAAA,GAAY,OAAA,CAAQ,8BAAR,CAAZ;IACA,KAAA,GAAY,IAAI,KAAJ,CAAU,GAAV;IACZ,EAAA,GAAY,KAAK,CAAC,gBAAN,CAAA;IACZ,EAAE,CAAC,IAAH,CAAQ,mCAAR;IACA,EAAE,CAAC,KAAH,CAAA;wCACA;EARgB,EAzClB;;;EAsDA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA;aAChC,IAAC,CAAA,cAAD,CAAA;IADgC,CAAA,IAAlC;;;EAtDA;;;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DBAY-SQL-LEXER'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate }              = types\n# X                         = require '../../../lib/helpers'\nr                         = String.raw\n{ Tbl, }                  = require '../../../apps/icql-dba-tabulate'\ndtab                      = new Tbl { dba: null, }\n{ DBay }                  = require '../../../apps/dbay'\n{ SQL  }                  = DBay\n#-----------------------------------------------------------------------------------------------------------\nshow = ( sql, tokens ) ->\n  info rpr sql\n  echo dtab._tabulate tokens\n  return tokens\n\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_sql_lexer = ( T, done ) ->\n  { rx\n    cfg }   = require './demo-sticky-regex-lexer'\n  { Lexer } = require '../../../apps/dbay-sql-lexer'\n  lexer     = new Lexer cfg\n  mr        = lexer._create_pipeline()\n  mr.send \"select a + b as sum from mytable;\"\n  mr.drive()\n  done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  @dbay_sql_lexer()\n  # test @\n\n\n# is identifier: '\"foo\"\" bar\"'\n# syntax error: 'select +1 as \"foo\\\" bar\";'\n\n"
  ]
}