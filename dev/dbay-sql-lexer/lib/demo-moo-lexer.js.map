{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-moo-lexer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DEMO-MOO-LEXER'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ equals }                = GUY.samesame\n# new_xregex                = require 'xregexp'\n# E                         = require '../../../apps/dbay/lib/errors'\n# sql_lexer                 = require 'dbay-sql-lexer'\n# MOO                       = require 'moo'\n# MOO                       = require '../../../../../3rd-party-repos/no-context_moo-lexer'\nMOO                       = require 'moo-patched'\n{ Tbl, }                  = require '../../../apps/icql-dba-tabulate'\ndtab                      = new Tbl { dba: null, }\n\n#-----------------------------------------------------------------------------------------------------------\n@rx =\n  chrs:\n    strict:\n      allowed:\n        head:     /// [        A-Z _ a-z \\u{0080}-\\u{10ffff}  ] ///u\n        tail:     /// [  $ 0-9 A-Z _ a-z \\u{0080}-\\u{10ffff}  ] ///u\n      forbidden:\n        head:     /// [  \\x00-\\x2f           \\x3a-\\x40 \\x5b-\\x5e \\x60 \\x7b-\\x7f ] ///u\n        tail:     /// [  \\x00-\\x23 \\x25-\\x2f \\x3a-\\x40 \\x5b-\\x5e \\x60 \\x7b-\\x7f ] ///u\n        paren:    /// [  ( $ 0-9 A-Z _ a-z \\u{0080}-\\u{10ffff}  ] ///u\n    practical:\n      allowed:\n        # head:     /// [        A-Z _ a-z   ] ///u\n        # tail:     /// [  $ 0-9 A-Z _ a-z   ] ///u\n        head:     /// [        A-Z _ a-z \\u{00a1}-\\u{10ffff}  ] ///u\n        tail:     /// [  $ 0-9 A-Z _ a-z \\u{00a1}-\\u{10ffff}  ] ///u\n      forbidden:\n        head:     /// [  \\x00-\\x2f           \\x3a-\\x40 \\x5b-\\x5e \\x60 \\x7b-\\xa0 ] ///u\n        tail:     /// [  \\x00-\\x23 \\x25-\\x2f \\x3a-\\x40 \\x5b-\\x5e \\x60 \\x7b-\\xa0 ] ///u\n        paren:    /// [  ( $ 0-9 A-Z _ a-z \\u{00a1}-\\u{10ffff}  ] ///u\n\n#-----------------------------------------------------------------------------------------------------------\n@demo = ->\n  cfg =\n    ws_linear:        { match: /[\\x20\\x09\\xa0]+/u, lineBreaks: true, }\n    ws_nl:            { match: /\\n/u, lineBreaks: true, }\n    #.......................................................................................................\n    keyword_select:   /select\\b/u\n    keyword_as:       /as\\b/u\n    keyword_from:     /from\\b/u\n    #.......................................................................................................\n    paren_left:       '('\n    paren_right:      ')'\n    #.......................................................................................................\n    op_plus:          '+'\n    op_minus:         /-/u\n    # op_caret:         '^' ### NOTE not an actual operator in SQLite ###\n    # op_dollar:        '$' ### NOTE not an actual operator in SQLite ###\n    op_star:          '*'\n    op_slash:         '/'\n    op_dsolidus:      '||'\n    #.......................................................................................................\n    sep_comma:        ','\n    sep_semicolon:    ';'\n    #.......................................................................................................\n    literal_string:   { match: /'(?:\\\\['\\\\]|[^\\n'\\\\])*'/u, value: ( ( s ) => s.slice 1, -1 ), }\n    #.......................................................................................................\n    identifier_dq:\n      match:  /// \" [^\"]+ \" ///u\n      value:  ( ( s ) => s.slice 1, -1 )\n    identifier_bare: /// #{@rx.chrs.practical.allowed.head.source} #{@rx.chrs.practical.allowed.tail.source}* ///u\n    #.......................................................................................................\n    other_unknown:    /.+?/u\n\n  lexer = MOO.compile cfg\n  lexer.reset \"\"\"select\n      'foo' as 国字,\n      selectclass as classselect,\n      a || 'test' as \"what ever\",\n      ( 4 + c - y ) as d\n    from t;\"\"\"\n  tokens  = []\n  level   = 0\n  loop\n    break unless ( _token = lexer.next() )?\n    # info token\n    token         = {}\n    [ type\n      subtype ]   = _token.type.split '_'\n    token.type    = type\n    continue if token.type is 'ws'\n    token.subtype = subtype\n    level++ if _token.type is 'paren_left'\n    token.value   = _token.value\n    token.text    = _token.text\n    token.level   = level\n    token.offset  = _token.offset\n    token.linenr  = _token.line\n    token.colnr   = _token.col\n    tokens.push token\n    level-- if _token.type is 'paren_right'\n  echo dtab._tabulate tokens\n  return\n\n############################################################################################################\nif require.main is module then do =>\n  @demo()\n"
  ]
}