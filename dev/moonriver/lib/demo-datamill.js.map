{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-datamill.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require '../../../apps/guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/NG'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\ntypes                     = new ( require '../../../apps/intertype' ).Intertype()\n{ isa\n  type_of }               = types\nbr                        = -> echo '—————————————————————————————————————————————'\nH                         = require '../../../lib/helpers'\n{ lets\n  freeze  }               = require '../../../apps/letsfreezethat'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ndemo_concurrency_with_unsafe_mode = ->\n  br()\n  { Pipeline, \\\n    transforms: T,\n    $,              } = require '../../../apps/moonriver'\n  { DBay }            = require '../../../apps/dbay'\n  { SQL  }            = DBay\n  db                  = new DBay()\n  db.pragma SQL\"journal_mode = wal;\"\n  #.........................................................................................................\n  db SQL\"\"\"create table numbers (\n    n   integer not null primary key,\n    sqr integer );\"\"\"\n  insert_number = db.prepare_insert { into: 'numbers', on_conflict: { update: true, }, }\n  #.........................................................................................................\n  db ->\n    for n in [ 0 .. 10 ]\n      db insert_number, { n, sqr: null, }\n  #.........................................................................................................\n  p = new Pipeline { protocol: true, }\n  p.push ( d ) -> d.sqr = d.n ** 2\n  p.push ( d ) -> urge '^35^', d\n  iterator = p.walk()\n  db.with_unsafe_mode ->\n    # mode = 'deferred' # 'deferred', 'immediate', 'exclusive'\n    # mode = 'immediate' # 'deferred', 'immediate', 'exclusive'\n    # mode = 'exclusive' # 'deferred', 'immediate', 'exclusive'\n    # db.with_transaction { mode, }, ->\n    db.pragma SQL\"journal_mode = wal;\"\n    db.with_transaction ->\n      for d from db SQL\"select * from numbers order by n;\"\n        debug '^35^', d\n        p.send d\n        { value: e, done, } = iterator.next()\n        db insert_number, e\n        break if done\n  #.........................................................................................................\n  H.tabulate \"numbers\", db SQL\"\"\"select * from numbers order by n;\"\"\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_concurrency_with_two_connections = ->\n  br()\n  { Pipeline, \\\n    transforms: T,\n    $,              } = require '../../../apps/moonriver'\n  { DBay }            = require '../../../apps/dbay'\n  { SQL  }            = DBay\n  dbr                 = new DBay()\n  dbw                 = new DBay { path: dbr.cfg.path, }\n  # dbr.set_journal_mode 'delete'\n  # dbw.set_journal_mode 'delete'\n  #.........................................................................................................\n  dbr SQL\"\"\"create table numbers (\n    n   integer not null primary key,\n    sqr integer );\"\"\"\n  insert_number = dbw.prepare_insert { into: 'numbers', on_conflict: { update: true, }, }\n  #.........................................................................................................\n  dbr ->\n    for n in [ 0 .. 10 ]\n      dbr insert_number, { n, sqr: null, }\n  #.........................................................................................................\n  H.tabulate \"numbers\", dbr SQL\"\"\"select * from numbers order by n;\"\"\"\n  #.........................................................................................................\n  # dbr.with_transaction ->\n  for d from dbr SQL\"select * from numbers order by n;\"\n    d.sqr = d.n ** 2\n    dbw insert_number, d\n    d.n = d.n + 100\n    d.sqr = d.n ** 2\n    dbw insert_number, d\n  #.........................................................................................................\n  H.tabulate \"numbers\", dbr SQL\"\"\"select * from numbers order by n;\"\"\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_concurrent_writes = ->\n  { DBay }            = require '../../../apps/dbay'\n  { SQL  }            = DBay\n  { Pipeline }        = require '../../../apps/moonriver'\n  #.........................................................................................................\n  show = ( db ) -> H.tabulate \"numbers\", db SQL\"\"\"select * from numbers order by n;\"\"\"\n  #.........................................................................................................\n  prepare = ( db ) ->\n    if ( db.all_rows SQL\"select name from sqlite_schema where name = 'numbers';\" ).length is 0\n      db SQL\"\"\"create table numbers (\n        n   integer not null primary key,\n        sqr integer );\"\"\"\n    #.......................................................................................................\n    insert_number = db.prepare_insert { into: 'numbers', on_conflict: { update: true, }, }\n    db insert_number, { n, sqr: null, } for n in [ 0 .. 10 ]\n    return null\n  #.........................................................................................................\n  db              = new DBay()\n  prepare db\n  show    db\n  read_numbers    = db.prepare SQL\"select * from numbers order by n;\"\n  insert_numbers  = db.prepare_insert { into: 'numbers', on_conflict: { update: true, }, }\n  #.........................................................................................................\n  $initialize = ->\n    p               = new Pipeline()\n    p.push _show    = ( d ) -> urge '^22-1^', d\n    p.push _freeze  = ( d ) -> freeze d\n    return p\n  #.........................................................................................................\n  $process = ->\n    p               = new Pipeline()\n    p.push square   = ( d, send ) -> send lets d, ( d ) -> d.sqr = d.n ** 2\n    return p\n  #.........................................................................................................\n  $sink = ( write_data ) -> _sink = ( d ) -> write_data d\n  #.........................................................................................................\n  $my_datamill = ( read_data, write_data ) ->\n    p               = new Pipeline()\n    p.push -> yield from db read_data\n    p.push $initialize()\n    p.push $process()\n    p.push $sink write_data\n    return p\n  #.........................................................................................................\n  db.with_deferred_write ( write ) ->\n    write_data  = ( d ) -> write insert_numbers, d\n    p           = $my_datamill read_numbers, write_data\n    p.run()\n  #.........................................................................................................\n  show db\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # demo_concurrent_writes()\n  demo_concurrency_with_two_connections()\n\n"
  ]
}