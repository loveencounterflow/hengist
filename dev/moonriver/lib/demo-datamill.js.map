{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-datamill.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require '../../../apps/guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/NG'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\ntypes                     = new ( require '../../../apps/intertype' ).Intertype()\n{ isa\n  type_of }               = types\nbr                        = -> echo '—————————————————————————————————————————————'\nH                         = require '../../../lib/helpers'\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ndemo_datamill = ->\n  br()\n  { Pipeline, \\\n    transforms: T,\n    $,              } = require '../../../apps/moonriver'\n  { DBay }            = require '../../../apps/dbay'\n  { SQL  }            = DBay\n  db                  = new DBay()\n  #.........................................................................................................\n  db SQL\"\"\"create table numbers (\n    n   integer not null primary key,\n    sqr integer );\"\"\"\n  insert_number = db.prepare_insert { into: 'numbers', on_conflict: { update: true, }, }\n  # db.sqlt1.unsafeMode true\n  #.........................................................................................................\n  db ->\n    for n in [ 0 .. 10 ]\n      db insert_number, { n, sqr: null, }\n  #.........................................................................................................\n  p = new Pipeline { protocol: true, }\n  p.push ( d ) -> d.sqr = d.n ** 2\n  p.push ( d ) -> urge '^35^', d\n  iterator = p.walk()\n  db.with_unsafe_mode ->\n    # mode = 'deferred' # 'deferred', 'immediate', 'exclusive'\n    # mode = 'immediate' # 'deferred', 'immediate', 'exclusive'\n    # mode = 'exclusive' # 'deferred', 'immediate', 'exclusive'\n    # db.with_transaction { mode, }, ->\n    db.pragma SQL\"journal_mode = wal;\"\n    db.with_transaction ->\n      for d from db SQL\"select * from numbers order by n;\"\n        debug '^35^', d\n        p.send d\n        { value: e, done, } = iterator.next()\n        db insert_number, e\n        break if done\n  #.........................................................................................................\n  H.tabulate \"numbers\", db SQL\"\"\"select * from numbers order by n;\"\"\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_shadow_db = ->\n  { DBay }            = require '../../../apps/dbay'\n  { SQL  }            = DBay\n  #.........................................................................................................\n  with_shadow = ( db, handler ) ->\n    original_path = db.cfg.path\n    GUY.temp.with_shadow_file original_path, ({ path, }) ->\n      handler { db: ( new DBay { path, } ), }\n      db.destroy()\n    return new DBay { path: original_path, }\n  #.........................................................................................................\n  my_path = '/tmp/helo.db'\n  db      = new DBay { path: my_path, }\n  db ->\n    if ( db.all_rows SQL\"select name from sqlite_schema where name = 'numbers';\" ).length is 0\n      db SQL\"\"\"create table numbers (\n        n   integer not null primary key,\n        sqr integer );\"\"\"\n    #.......................................................................................................\n    insert_number = db.prepare_insert { into: 'numbers', on_conflict: { update: true, }, }\n    db insert_number, { n, sqr: null, } for n in [ 0 .. 10 ]\n  #.........................................................................................................\n  H.tabulate \"numbers\", db SQL\"\"\"select * from numbers order by n;\"\"\"\n  select_numbers = db.prepare SQL\"select * from numbers order by n;\"\n  #.........................................................................................................\n  db = with_shadow read_db = db, ({ db: write_db, }) ->\n    db.pragma SQL\"journal_mode = wal;\"\n    db ->\n      debug '^23-1^'\n      insert_number = write_db.prepare_insert { into: 'numbers', on_conflict: { update: true, }, }\n      debug '^23-2^'\n      for d from read_db select_numbers\n        write_db insert_number, { n, sqr: n ** 2, } for n in [ 0 .. 10 ]\n      debug '^23-3^'\n      return null\n    return null\n  #.........................................................................................................\n  H.tabulate \"numbers\", db SQL\"\"\"select * from numbers order by n;\"\"\"\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_datamill()\n  demo_shadow_db()\n\n\n"
  ]
}