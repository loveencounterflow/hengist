{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-datamill.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require '../../../apps/guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/NG'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\ntypes                     = new ( require '../../../apps/intertype' ).Intertype()\n{ isa\n  type_of }               = types\nbr                        = -> echo '—————————————————————————————————————————————'\nH                         = require '../../../lib/helpers'\n{ lets\n  freeze  }               = require '../../../apps/letsfreezethat'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ndemo_concurrency_with_two_connections = ->\n  br()\n  { Pipeline, \\\n    transforms: T,\n    $,              } = require '../../../apps/moonriver'\n  { DBay }            = require '../../../apps/dbay'\n  { SQL  }            = DBay\n  dbr                 = new DBay()\n  dbw                 = new DBay { path: dbr.cfg.path, }\n  # dbr.set_journal_mode 'delete'\n  # dbw.set_journal_mode 'delete'\n  #.........................................................................................................\n  dbr SQL\"\"\"create table numbers (\n    n   integer not null primary key,\n    sqr integer );\"\"\"\n  insert_number = dbw.prepare_insert { into: 'numbers', on_conflict: { update: true, }, }\n  #.........................................................................................................\n  dbr ->\n    for n in [ 0 .. 10 ]\n      dbr insert_number, { n, sqr: null, }\n  #.........................................................................................................\n  H.tabulate \"numbers\", dbr SQL\"\"\"select * from numbers order by n;\"\"\"\n  #.........................................................................................................\n  # dbr.with_transaction ->\n  for d from dbr SQL\"select * from numbers order by n;\"\n    d.sqr = d.n ** 2\n    dbw insert_number, d\n    d.n = d.n + 100\n    d.sqr = d.n ** 2\n    dbw insert_number, d\n  #.........................................................................................................\n  H.tabulate \"numbers\", dbr SQL\"\"\"select * from numbers order by n;\"\"\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_datamill_pipeline = ->\n  { DBay }                  = require '../../../apps/dbay'\n  { SQL  }                  = DBay\n  { Pipeline }              = require '../../../apps/moonriver'\n  { HDML }                  = require '../../../apps/hdml'\n  #.........................................................................................................\n  show = ( db ) -> H.tabulate \"texts\", db SQL\"\"\"select * from texts order by n1_lnr, n3_part;\"\"\"\n  #.........................................................................................................\n  prepare = ( db ) ->\n    db = new DBay()\n    # if ( db.all_rows SQL\"select name from sqlite_schema where name = 'texts';\" ).length is 0\n    db SQL\"\"\"create table texts (\n      n1_lnr      integer not null,\n      n2_version  integer not null,\n      n3_part     integer not null,\n      line  text    not null,\n      primary key ( n1_lnr, n2_version, n3_part ) );\"\"\"\n    #.......................................................................................................\n    write_data  = db.prepare_insert { into: 'texts', on_conflict: { update: true, }, }\n    read_data   = db.prepare SQL\"\"\"select * from texts order by n1_lnr, n3_part;\"\"\"\n    db write_data, { n1_lnr: 1, n3_part: 1, n2_version: 1, line: \"helo world\", }\n    return { db, read_data, write_data, }\n  #.........................................................................................................\n  $initialize = ->\n    p               = new Pipeline()\n    p.push _show    = ( d ) -> whisper '^22-1^', d\n    p.push _freeze  = ( d ) -> freeze d\n    return p\n  #.........................................................................................................\n  $process = ->\n    p               = new Pipeline()\n    p.push foobar   = ( d, send ) -> send lets d, ( d ) -> d.line = \"*#{d.line}*\"\n    p.push foobar   = ( d, send ) -> send lets d, ( d ) ->\n      d.line = HDML.pair 'div.foo', HDML.text d.line\n      d.n2_version++\n    p.push _show    = ( d ) -> urge '^22-1^', d\n    return p\n  #.........................................................................................................\n  $my_datamill = ( db, read_data, write_data ) ->\n    p = new Pipeline()\n    p.push source = -> yield from db read_data\n    p.push $initialize()\n    p.push $process()\n    p.push sink = ( d ) -> db write_data, d\n    return p\n  #.........................................................................................................\n  { db\n    read_data\n    write_data }  = prepare()\n  show db\n  p = $my_datamill db, read_data, write_data\n  info '^34-1^', p\n  p.run()\n  #.........................................................................................................\n  show db\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  demo_datamill_pipeline()\n  # demo_concurrency_with_two_connections()\n\n"
  ]
}