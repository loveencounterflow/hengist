{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-ng.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/NG'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntypes                     = null\nUTIL                      = require 'node:util'\n{ hide\n  def }                   = GUY.props\nnameit                    = ( name, f ) -> def f, 'name', { value: name, }\nstf_prefix                = '_source_transform_from_'\n\n\n#===========================================================================================================\nget_types = ->\n  return types if types?\n  types = new ( require '../../../apps/intertype' ).Intertype()\n\n  #---------------------------------------------------------------------------------------------------------\n  source_fitting_types  = new Set do =>\n    ( name.replace stf_prefix, '' \\\n      for name in ( Object.getOwnPropertyNames Segment:: ) \\ ### thx to https://stackoverflow.com/a/31055009/7568091 ###\n        when name.startsWith stf_prefix )\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.mr_source_fitting ( x ) -> source_fitting_types.has @type_of x\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.mr_nonsource_fitting ( x ) ->\n    return false unless @isa.function x\n    return false unless 1 <= x.length <= 2\n    return true\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.mr_reporting_collector ( x ) -> x instanceof Reporting_collector\n  types.declare.mr_collector 'list.or.mr_reporting_collector'\n  types.declare.mr_fitting 'mr_nonsource_fitting.or.mr_source_fitting'\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.mr_segment_cfg\n    fields:\n      input:    'mr_collector'\n      output:   'mr_collector'\n      fitting:  'mr_fitting'\n    create: ( x ) ->\n      return x unless @isa.optional.object x\n      R         = x\n      x.input  ?= []\n      x.output ?= []\n      return R\n\n  #---------------------------------------------------------------------------------------------------------\n  return types\n\n\n#===========================================================================================================\nclass Segment\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    hide @, 'types',      get_types()\n    @types.create.mr_segment_cfg cfg\n    @input      = cfg.input\n    @output     = cfg.output\n    hide @, 'transform',  @_as_transform cfg.fitting\n    hide @, '_send', send = ( d ) => @output.push d; d ### 'inner' send method ###\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _as_transform: ( fitting ) ->\n    ###\n\n    * `fitting`: a value that may be used as (the central part of) a transform in a pipeline. This may be a\n      function of arity 2 (a transducer), a list (a source) &c.\n    * `transform`: one of the serial elements that constitute a pipeline. While a `fitting` may be of\n      various types, a `transform` is always a function. `transform`s have a `type` attribute which takes\n      one of the following values:\n      * `source`: a `transform` that does not take any arguments and will yield one value per call\n      * `observer`: a `transform` that takes one argument (the current value) and does not send any values\n        into the pipeline; the value an observer gets called with will be the same value that the next\n        transformer will be called with. Note that if an observer receives a mutable value it can modify it\n        and thereby affect one data item at a time.\n      * `transducer`: a `transform` that takes two arguments, the current data item and a `send()` function\n        that can be used any number of times to send values to the ensuing transform.\n\n    ###\n    transform_type = null\n    if @types.isa.mr_source_fitting fitting\n      R = @_get_source_transform fitting\n      transform_type  = 'source'\n    #.......................................................................................................\n    else\n      R = fitting\n      switch arity = R.length ? 0\n        when 1 then transform_type = 'observer'\n        when 2 then transform_type = 'transducer'\n        else throw new Error \"fittings with arity #{arity} not implemented\"\n    #.......................................................................................................\n    nameit 'ƒ', R if R.name is ''\n    R.type = transform_type\n    return R\n\n\n  #=========================================================================================================\n  # SOURCE TRANSFORMS\n  #---------------------------------------------------------------------------------------------------------\n  _get_source_transform: ( source ) ->\n    type = @types.type_of source\n    unless ( method = @[ stf_prefix + type ] )?\n      throw new Error \"unable to convert a #{type} to a transform\"\n    return method.call @, source\n\n  #---------------------------------------------------------------------------------------------------------\n  [ stf_prefix + 'generator' ]: ( source ) ->\n    done = false\n    return ( send ) ->\n      return null if done\n      { value: d\n        done      } = source.next()\n      send d unless done\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  [ stf_prefix + 'generatorfunction' ]: ( source ) -> @_get_source_transform source()\n  [ stf_prefix + 'list' ]:              ( source ) -> @_get_source_transform source.values()\n  [ stf_prefix + 'arrayiterator' ]:     ( source ) -> @[ stf_prefix + 'generator' ] source\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  ### 'outer' send method ###\n  send: ( d ) -> @input.push d; d\n\n  #---------------------------------------------------------------------------------------------------------\n  process: ->\n    if @input.length > 0\n      @transform.call null, @input.shift(), @_send\n      return 1\n    return 0\n\n  #---------------------------------------------------------------------------------------------------------\n  [UTIL.inspect.custom]:  -> @toString()\n  toString:               -> \"#{rpr @input} ▶ #{@transform.name} ▶ #{rpr @output}\"\n\n#===========================================================================================================\nclass Reporting_collector\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( callback ) ->\n    hide @, 'callback', callback\n    hide @, 'd',        []\n    GUY.props.def @,  'length',   get: -> @d.length\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  push:     ( d ) -> @callback +1; @d.push d\n  unshift:  ( d ) -> @callback +1; @d.unshift d\n  pop:            -> @callback -1; @d.pop()\n  shift:          -> @callback -1; @d.shift()\n\n  #---------------------------------------------------------------------------------------------------------\n  [UTIL.inspect.custom]:  -> @toString()\n  toString:               -> rpr @d\n\n\n#===========================================================================================================\nclass Pipeline\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    cfg                 = { {}..., cfg..., }\n    # cfg                 = types.create.mr_pipeline_cfg cfg\n    @datacount          = 0\n    @input              = @_new_collector()\n    @output             = [] ### pipeline output buffer does not participate in datacount ###\n    @segments           = []\n    @on_before_step     = cfg.on_before_step ? null\n    @on_after_step      = cfg.on_after_step  ? null\n    @on_before_process  = cfg.on_before_process ? null\n    @on_after_process   = cfg.on_after_process  ? null\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_collector: -> new Reporting_collector ( delta ) => @datacount += delta\n\n  #---------------------------------------------------------------------------------------------------------\n  push: ( fitting ) ->\n    if ( count = @segments.length ) is 0\n      input               = @input\n    else\n      prv_segment         = @segments[ count - 1 ]\n      prv_segment.output  = @_new_collector()\n      input               = prv_segment.output\n    R = new Segment { input, fitting, output: @output, }\n    @segments.push R\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  send: ( d ) -> @input.push d; d\n\n  #---------------------------------------------------------------------------------------------------------\n  process: ->\n    @on_before_process() if @on_before_process?\n    for segment, segment_idx in @segments\n      @on_before_step segment_idx if @on_before_step?\n      segment.process()\n      @on_after_step segment_idx if @on_after_step?\n    @on_after_process() if @on_after_process?\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  run: -> ( d for d from @walk() )\n\n  #---------------------------------------------------------------------------------------------------------\n  walk: ->\n    loop\n      @process()\n      yield d for d in @output\n      @output.length = []\n      # yield @output.shift() while @output.length > 0\n      break if @datacount < 1\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  [UTIL.inspect.custom]:  -> @toString()\n  toString:               ->\n    R = []\n    for segment in @segments\n      R.push rpr segment.input\n      R.push '▶'\n      R.push segment.transform.name\n      R.push '▶'\n    R.push rpr @output\n    return R.join ' '\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  echo '—————————————————————————————————————————————'\n  _types = new ( require '../../../apps/intertype' ).Intertype()\n  on_before_process = -> help '^97-1^', @\n  on_after_process  = -> warn '^97-2^', @\n  on_before_step    =  ( sidx ) -> urge '^97-3^', sidx, @\n  on_after_step     =  ( sidx ) -> urge '^97-4^', sidx, @\n  on_before_step    = null\n  # on_after_step     = null\n  on_after_process  = null\n  p = new Pipeline { on_before_process, on_before_step, on_after_step, on_after_process, }\n  p.push times_2 = ( d, send ) ->\n    if _types.isa.float d\n      # send '('\n      send d * 2\n      # send ')'\n    else\n      send d\n  p.push plus_2  = ( d, send ) ->\n    if _types.isa.float d\n      # send '['\n      send d + 2\n      # send ']'\n    else\n      send d\n  p.push times_3 = ( d, send ) ->\n    if _types.isa.float d\n      # send '{'\n      send d * 3\n      # send '}'\n    else\n      send d\n  p.send 1\n  p.send 2\n  p.send 3\n  # urge '^97-4^', d for d from p.walk()\n  info '^97-4^', p.run()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_2 = ->\n  echo '—————————————————————————————————————————————'\n  on_before_process = -> help '^97-1^', @\n  on_after_process  = -> warn '^97-2^', @\n  on_before_step    =  ( sidx ) -> urge '^97-3^', sidx, @\n  on_after_step     =  ( sidx ) -> urge '^97-4^', sidx, @\n  on_before_step    = null\n  # on_after_step     = null\n  on_after_process  = null\n  p = new Pipeline { on_before_process, on_before_step, on_after_step, on_after_process, }\n  p.push [ 1, 2, 3, ]\n  info '^97-4^', p.run()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nmodel_2b = ->\n  echo '—————————————————————————————————————————————'\n  ### Same as `model_2a()`, but using a generator as the more general solution. ###\n  source  = [ 5, 6, 7, ]\n  send    = ( d ) -> info '^61-1^', d; d\n  mr      =\n    _get_source_transform: ( source ) ->\n      type = type_of source\n      unless ( method = @[ \"_source_transform_from_#{type}\"] )?\n        throw new Error \"unable to convert a #{type} to a transform\"\n      return method.call @, source\n    _source_transform_from_generator: ( source ) ->\n      done = false\n      return ( send ) ->\n        return null if done\n        { value: d\n          done      } = source.next()\n        send d unless done\n        return null\n    _source_transform_from_generatorfunction: ( source ) -> @_get_source_transform source()\n    _source_transform_from_list:              ( source ) -> @_get_source_transform source.values()\n    _source_transform_from_arrayiterator:     ( source ) -> @_source_transform_from_generator source\n  do ->\n    whisper '...................'\n    tf = mr._get_source_transform source\n    tf send for _ in [ 1 .. 5 ]\n  do ->\n    whisper '...................'\n    tf = mr._get_source_transform ( -> yield from source )\n    tf send for _ in [ 1 .. 5 ]\n  do ->\n    whisper '...................'\n    tf = mr._get_source_transform ( -> yield from source )()\n    tf send for _ in [ 1 .. 5 ]\n  do ->\n    whisper '...................'\n    tf = mr._get_source_transform source.values()\n    tf send for _ in [ 1 .. 5 ]\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  demo_1()\n  demo_2()\n  # model_2b()\n  # get_types()\n"
  ]
}