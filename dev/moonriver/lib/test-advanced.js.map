{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-advanced.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/TESTS/ADVANCED'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\n\n\n#-----------------------------------------------------------------------------------------------------------\n$as_keysorted_list = -> ( d, send ) => send as_keysorted_list d\nas_keysorted_list = ( d ) ->\n  keys = ( Object.keys d ).sort ( a, b ) ->\n    a = parseInt a, 10\n    b = parseInt b, 10\n    return +1 if a > b\n    return -1 if a < b\n    return  0\n  return ( d[ key ] for key in keys )\n\n#-----------------------------------------------------------------------------------------------------------\n@transform_window_cfg_type = ( T, done ) ->\n  # T?.halt_on_error()\n  { get_transform_types\n    misfit              } = require '../../../apps/moonriver'\n  { isa\n    type_of\n    create              } = get_transform_types()\n  #.........................................................................................................\n  T?.eq ([ '^07-1^', isa.transform_window_cfg { min: -1, max: 2, empty: null, } ]), [ '^07-1^', true, ]\n  T?.eq ([ '^07-2^', isa.transform_window_cfg { min: +1, max: 2, empty: null, } ]), [ '^07-2^', true, ]\n  T?.eq ([ '^07-3^', isa.transform_window_cfg { min: +2, max: 2, empty: null, } ]), [ '^07-3^', false, ]\n  #.........................................................................................................\n  T?.eq ( create.transform_window_cfg {}            ), { min: -1, max: 1, empty: misfit, }\n  T?.eq ( create.transform_window_cfg { min: -3, }  ), { min: -3, max: 1, empty: misfit, }\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@window_transform = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline,         \\\n    transforms: TF  } = require '../../../apps/moonriver'\n  { $window         } = require '../../../apps/moonriver/lib/transforms'\n  collector           = []\n  p                   = new Pipeline()\n  #.........................................................................................................\n  p.push [ 1 .. 9 ]\n  p.push TF.$window { min: -2, max: +2, empty: '_', }\n  p.push $as_keysorted_list()\n  p.push ( d, send ) -> send ( \"#{e}\" for e in d ).join ''\n  p.push show = ( d ) -> urge '^45-1^', d\n  result = p.run()\n  T?.eq result, [\n    '__123'\n    '_1234'\n    '12345'\n    '23456'\n    '34567'\n    '45678'\n    '56789'\n    '6789_'\n    '789__'\n    ]\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@named_window_transform = ( T, done ) ->\n  # T?.halt_on_error()\n  GUY                 = require '../../../apps/guy'\n  { Pipeline,         \\\n    transforms: TF  } = require '../../../apps/moonriver'\n  collector           = []\n  p                   = new Pipeline()\n  #.........................................................................................................\n  p.push [ 1 .. 9 ]\n  p.push show = ( d ) -> urge '^45-1^', d\n  p.push TF.$named_window { names: [ 'a', 'b', 'c', 'd', 'e', ], empty: '_', }\n  p.push show = ( d ) -> urge '^45-1^', d\n  p.push $as_keysorted_list()\n  p.push ( d, send ) -> send ( \"#{e}\" for e in d ).join ''\n  p.push show = ( d ) -> urge '^45-1^', d\n  result = p.run()\n  info '^45-2^', result\n  T?.eq result, [\n    '__123'\n    '_1234'\n    '12345'\n    '23456'\n    '34567'\n    '45678'\n    '56789'\n    '6789_'\n    '789__'\n    ]\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@use_sync_pipeline_as_segment = ( T, done ) ->\n  # T?.halt_on_error()\n  GUY                   = require '../../../apps/guy'\n  { Pipeline,           \\\n    transforms: TF    } = require '../../../apps/moonriver'\n  count                 = 0\n  #.........................................................................................................\n  byline                = new Pipeline()\n  byline.push show      = ( d ) -> urge '^29-1^', d\n  byline.push add       = ( d, send ) -> send d + 3\n  byline.push mul       = ( d, send ) -> send d * 3\n  byline.push enumerate = ( d, send ) -> count++; send count; send d * 3\n  # byline.push TF.$collect()\n  #.........................................................................................................\n  trunk_1               = new Pipeline()\n  trunk_1.push [ 1 .. 5 ]\n  trunk_1.push show     = ( d ) -> help '^29-2^', d\n  trunk_1.push byline\n  trunk_1.push show     = ( d ) -> help '^29-3^', d\n  # #.........................................................................................................\n  # trunk_2               = new Pipeline()\n  # trunk_2.push [ 1 .. 5 ]\n  # trunk_2.push show     = ( d ) -> help '^29-4^', d\n  # trunk_2.push byline\n  # trunk_2.push show     = ( d ) -> help '^29-5^', d\n  #.........................................................................................................\n  debug '^57-1^'\n  result_1              = trunk_1.run()\n  # debug '^57-2^'\n  # result_2              = trunk_2.run()\n  debug '^57-3^'\n  urge '^29-6^', trunk_1\n  info '^29-7^', result_1\n  # urge '^29-8^', trunk_2\n  # info '^29-9^', result_2\n  T?.eq result_1, [ 1, 36, 2, 45, 3, 54, 4, 63, 5, 72 ]\n  T?.eq result_2, [ 6, 36, 7, 45, 8, 54, 9, 63, 10, 72 ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@segment_pipelines_can_be_nested = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline,         \\\n    transforms: TF  } = require '../../../apps/moonriver'\n  #.........................................................................................................\n  do ->\n    outer = new Pipeline()\n    #.......................................................................................................\n    outer.push 'abcde'\n    #.......................................................................................................\n    outer.push uppercase  = ( d, send ) -> send d.toUpperCase()\n    outer.push show       = ( d ) -> whisper '(inner)', d\n    outer.push TF.$collect()\n    outer.push join       = ( d, send ) -> send d.join ''\n    #.......................................................................................................\n    outer.push ( d ) -> help 'outer', d\n    #.......................................................................................................\n    result = outer.run()\n    info '^34-1^', rpr result\n    T?.eq result, [ 'ABCDE', ]\n    return null\n  #.........................................................................................................\n  do ->\n    inner = new Pipeline()\n    outer = new Pipeline()\n    #.......................................................................................................\n    inner.push uppercase  = ( d, send ) -> send d.toUpperCase()\n    inner.push TF.$collect()\n    inner.push join       = ( d, send ) -> send d.join ''\n    inner.push show       = ( d ) -> whisper 'inner', d\n    #.......................................................................................................\n    outer.push 'abcde'\n    outer.push inner\n    outer.push finish     = ( d ) -> help 'outer', d\n    #.......................................................................................................\n    result = outer.run()\n    info '^34-2^', rpr result\n    T?.eq result, [ 'ABCDE', ]\n    return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@use_async_pipeline_as_segment = ( T, done ) ->\n  # T?.halt_on_error()\n  GUY                   = require '../../../apps/guy'\n  { Async_pipeline }    = require '../../../apps/moonriver'\n  count                 = 0\n  #.........................................................................................................\n  byline                = new Async_pipeline()\n  byline.push show      = ( d ) -> urge '^29-1^', d\n  byline.push add       = ( d, send ) -> send d + 3\n  byline.push mul       = ( d, send ) -> send d * 3\n  byline.push enumerate = ( d, send ) -> GUY.async.after 0.01, -> count++; send count; send d * 3\n  #.........................................................................................................\n  trunk_1               = new Async_pipeline()\n  trunk_1.push [ 1 .. 5 ]\n  trunk_1.push show     = ( d ) -> help '^29-2^', d\n  trunk_1.push byline\n  trunk_1.push show     = ( d ) -> help '^29-3^', d\n  #.........................................................................................................\n  trunk_2               = new Async_pipeline()\n  trunk_2.push [ 1 .. 5 ]\n  trunk_2.push show     = ( d ) -> help '^29-4^', d\n  trunk_2.push byline\n  trunk_2.push show     = ( d ) -> help '^29-5^', d\n  #.........................................................................................................\n  result_1              = await trunk_1.run()\n  result_2              = await trunk_2.run()\n  urge '^29-6^', trunk_1\n  info '^29-7^', result_1\n  urge '^29-8^', trunk_2\n  info '^29-9^', result_2\n  T?.eq result_1, [ 1, 36, 2, 45, 3, 54, 4, 63, 5, 72 ]\n  T?.eq result_2, [ 6, 36, 7, 45, 8, 54, 9, 63, 10, 72 ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@protocol_1 = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline,         \\\n    $,\n    transforms,     } = require '../../../apps/moonriver'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  do ->\n    p = new Pipeline { protocol: true, }\n    p.push add2   = ( d, send ) -> send d + 2\n    p.push mul2   = ( d, send ) -> send d * 2\n    p.push $ { first, last, }, fl_ap = ( d, send ) ->\n      return send '(' if d is first\n      return send ')' if d is last\n      send d\n    p.send n for n in [ 0 .. 3 ]\n    # p.push l_coll = ( d, send ) ->\n    #   return send collector if d is last\n    #   collector.push d\n    debug '^74-2^', p\n    debug '^74-2^', result = p.run()\n    H.tabulate \"journal\", p.journal\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@protocol_2 = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline,         \\\n    $,\n    transforms,     } = require '../../../apps/moonriver'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  $with_stars         = -> with_stars = ( d, send ) -> send \"*#{d}*\"\n  $add_parentheses    = ->\n    return $ { first, last, }, add_parentheses = ( d, send ) ->\n      return send '(' if d is first\n      return send ')' if d is last\n      send d\n  #.........................................................................................................\n  do ->\n    p = new Pipeline()\n    p.push Array.from '氣場全開'\n    p.push $with_stars()\n    # p.push ( d ) -> info '^77-1^', p, p.segments[ 0 ].output\n    p.push $add_parentheses()\n    # p.push ( d ) -> info '^77-2^', p # .segments[ 1 ].output\n    p.push show = ( d ) -> help rpr d\n    p.push transforms.$collect()\n    p.push show = ( d ) -> urge rpr d\n    p.push join = ( d, send ) -> send d.join ''\n    result = p.run()\n    urge '^77-3^', p\n    urge '^77-4^', result\n    T?.eq result, [ '(*氣**場**全**開*)' ]\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @window_transform()\n  # test @window_transform\n  # @use_pipeline_as_segment_preview()\n  # @named_window_transform()\n  # test @named_window_transform\n  # @use_sync_pipeline_as_segment()\n  # @transform_window_cfg_type()\n  # test @transform_window_cfg_type\n  # @use_async_pipeline_as_segment()\n  # test @use_async_pipeline_as_segment\n  # @segment_pipelines_can_be_nested()\n  @protocol_1()\n  # test @modifiers_preserved_for_pipeline_segments\n  # test @segment_pipelines_can_be_nested\n  # test @\n\n\n\n\n"
  ]
}