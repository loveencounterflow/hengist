{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/modifiers.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MOONRIVER/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\n\n#-----------------------------------------------------------------------------------------------------------\n@_modifiers = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline\n    $           }   = require '../../../apps/moonriver'\n  first             = Symbol 'first'\n  last              = Symbol 'last'\n  once_before_first = true\n  once_after_last   = true\n  #.........................................................................................................\n  do =>\n    collector         = []\n    protocol          = []\n    mr                = new Pipeline { protocol, }\n    mr.push [ 1, 2, 3, 5, ]\n    mr.push                             ( d, send ) -> send d * 2\n    mr.push $ { first,              },  ( d, send ) -> send d\n    mr.push $ { last,               },  ( d, send ) -> send d\n    mr.push                             ( d       ) -> urge '^309^', d\n    mr.push                             ( d, send ) -> collector.push d #; help collector\n    mr.run()\n    T?.eq collector, [ first, 2, 4, 6, 10, last, ]\n    # debug '^453^', d for d in protocol\n    # console.table protocol\n    H.tabulate 'protocol', protocol\n  #.........................................................................................................\n  do =>\n    collector         = []\n    protocol          = []\n    mr                = new Pipeline { protocol, }\n    mr.push [ 1, 2, 3, 5, ]\n    mr.push                             ( d, send ) -> send d * 2\n    mr.push $ { first,              },  ( d, send ) -> send d\n    # mr.push $ { once_after_last,    },  ( d       ) -> debug '^987^', 'once_after_last'\n    mr.push $ { last,               },  ( d, send ) -> send d\n    mr.push $ { once_before_first,  },  ( d       ) -> debug '^276^ once_before_first'; collector.push 'once_before_first'\n    mr.push $ { once_after_last,    },  ( d       ) -> debug '^276^ once_after_last';   collector.push 'once_after_last'\n    mr.push                             ( d       ) -> urge '^309^', d\n    mr.push                             ( d, send ) -> collector.push d #; help collector\n    T?.eq mr.on_once_before_first.length, 1\n    T?.eq mr.on_once_after_last.length,   1\n    mr.run()\n    T?.eq collector, [ 'once_before_first', first, 2, 4, 6, 10, last, 'once_after_last', ]\n    debug '^453^', collector\n    # console.table protocol\n    H.tabulate 'protocol', protocol\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_resettable_state_shared_across_transforms = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline\n    $           }   = require '../../../apps/moonriver'\n  #.........................................................................................................\n  source = [\n    '<h1>'\n    'The Opening'\n    '</h1>'\n    '<p>'\n    'Twas brillig, and the slithy toves Did gyre and gimble in the'\n    '<em>'\n    'wabe'\n    '</p>'\n    '</body>'\n    '</html>'\n    ]\n  #.........................................................................................................\n  do =>\n    first             = Symbol 'first'\n    last              = Symbol 'last'\n    once_before_first = true\n    once_after_last   = true\n    collector         = []\n    counts            =\n      once_before_first:  0\n      first:              0\n      last:               0\n      once_after_last:    0\n    mr                = new Pipeline()\n    #.......................................................................................................\n    mr.push source\n    #.......................................................................................................\n    mr.push $ { once_before_first, }, on_first = ( d ) ->\n      debug '^373^', 'once_before_first'\n      debug '^336^', @\n      debug '^336^', type_of @\n      debug '^336^', ( k for k of @ )\n      counts.once_before_first++\n    #.......................................................................................................\n    mr.push $ { first, }, initialize_stack = ( d ) ->\n      debug '^487^', d\n      counts.first++\n      if d is first\n        mr.user.stack = []\n        urge '^3487^', 'initialize_stack()', @.user\n      return null\n    #.......................................................................................................\n    mr.push push_opening_to_stack = ( d, send ) ->\n      return send d if  not isa.text d\n      return send d if  not d.startsWith '<'\n      return send d if      d.startsWith '</'\n      left_d  = d.replace /^<([^\\s>]+).*$/, '$1'\n      # debug '^039850^', { left_d, }\n      mr.user.stack.push left_d\n      send d\n    #.......................................................................................................\n    mr.push pop_closing_from_stack = ( d, send ) ->\n      return send d if  not isa.text d\n      return send d if  not d.startsWith '</'\n      # debug '^4564^', 'pop_closing_from_stack', mr.user.stack, d\n      if mr.user.stack.length < 1\n        send \"error: extraneous closing tag #{rpr d}\"\n        return send d\n      left_d  = mr.user.stack.pop()\n      right_d = d.replace /^<\\/([^\\s>]+).*$/, '$1'\n      # debug '^039850^', { left_d, right_d, }\n      unless left_d is right_d\n        send \"error: expected closing tag for <#{rpr left_d}>, got #{rpr d}\"\n        return send d\n      send d\n    #.......................................................................................................\n    mr.push $ { once_after_last, }, pop_remaining_from_stack = ( d ) ->\n      debug '^309-1^', d\n      # counts.last++\n      # send d\n    #.......................................................................................................\n    mr.push collect = ( d ) ->\n      debug '^309-1^', d\n      collector.push d\n    #.......................................................................................................\n    mr.push $ { once_after_last, }, cleanup = ( d ) ->\n      debug '^309-2^', d\n      counts.once_after_last++\n    #.......................................................................................................\n    mr.push $ { last, }, cleanup = ( d ) ->\n      debug '^309-2^', d\n      counts.last++\n    #.......................................................................................................\n    mr.run()\n    debug '^558^', mr.user\n    echo rpr d for d in collector\n    T?.eq collector, [\n      '<h1>'\n      'The Opening'\n      '</h1>'\n      '<p>'\n      'Twas brillig, and the slithy toves Did gyre and gimble in the'\n      '<em>'\n      'wabe'\n      \"error: expected closing tag for <'em'>, got '</p>'\"\n      '</p>'\n      \"error: expected closing tag for <'p'>, got '</body>'\"\n      '</body>'\n      \"error: extraneous closing tag '</html>'\"\n      '</html>'\n      ]\n    T?.eq counts, {\n      once_before_first:  1\n      first:        source.length + 1\n      last:         source.length + 3 + 1\n      once_after_last:   1 }\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_once_before_first_once_after_last_transformers_transparent_to_data = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline\n    $           }   = require '../../../apps/moonriver'\n  collectors    =\n    c1: []\n    c2: []\n    c3: []\n    c4: []\n  mr            = new Pipeline()\n  #.......................................................................................................\n  mr.push Array.from 'bcd'\n  mr.push $ { once_before_first:  true,   }, once_before_first  = ( send  ) -> send 'A';                                  T?.eq [ arguments..., ].length, 1\n  mr.push $ { once_before_first:  true,   }, once_before_first  =           -> collectors.c1.push 'E';                    T?.eq [ arguments..., ].length, 0\n  mr.push collect2                                              = ( d     ) -> debug '^453-2^', d;  collectors.c2.push d; T?.eq [ arguments..., ].length, 1\n  mr.push $ { once_after_last:    true,   }, once_after_last    = ( send  ) -> send 'Z';                                  T?.eq [ arguments..., ].length, 1\n  mr.push $ { once_after_last:    true,   }, once_after_last    =           -> collectors.c3.push 'F';                    T?.eq [ arguments..., ].length, 0\n  mr.push collect4                                              = ( d     ) -> debug '^453-4^', d;  collectors.c4.push d; T?.eq [ arguments..., ].length, 1\n  mr.run()\n  help '^894^', collectors.c1\n  help '^894^', collectors.c2\n  help '^894^', collectors.c3\n  help '^894^', collectors.c4\n  T?.eq collectors.c1, [ 'E', ]\n  T?.eq collectors.c2, [ 'A', 'b', 'c', 'd', ]\n  T?.eq collectors.c3, [ 'F', ]\n  T?.eq collectors.c4, [ 'A', 'b', 'c', 'd', 'Z', ]\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_appending_data_before_closing = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline\n    $           }   = require '../../../apps/moonriver'\n  last          = Symbol 'last'\n  collector     = []\n  mr            = new Pipeline()\n  #.......................................................................................................\n  mr.push [ -1, ]\n  mr.push show    = ( d ) -> urge '^4948-1^', d\n  mr.push $ { last, }, at_last = ( d, send ) ->\n    return send d unless d is last\n    send e for e in [ 'a', 'b', 'c', ]\n  mr.push show    = ( d ) -> urge '^4948-2^', d\n  mr.push collect = ( d ) -> collector.push d\n  mr.run()\n  T?.eq collector, [ -1, 'a', 'b', 'c' ]\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_modifier_last_does_not_leak_into_pipeline_when_used_with_observer = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline\n    $           }   = require '../../../apps/moonriver'\n  last1        = Symbol 'last1'\n  last2        = Symbol 'last2'\n  collector     = []\n  #.......................................................................................................\n  do =>\n    mr = new Pipeline()\n    mr.push Array.from 'abc'\n    mr.push $ { last: last1, }, ( d )       -> debug '^765-1^', rpr d\n    mr.push $ { last: last2, }, ( d, send ) -> debug '^765-2^', rpr d; send d unless d is last2\n    mr.push ( d ) -> collector.push d\n    #.....................................................................................................\n    mr.run()\n    urge '^859^', collector\n    T?.eq collector, Array.from 'abc'\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@_modifier_last = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline\n    $           }   = require '../../../apps/moonriver'\n  first         = Symbol 'first'\n  last          = Symbol 'last'\n  collector     = []\n  mr            = new Pipeline()\n  #.......................................................................................................\n  mr.push [ 'first', 'second', 'third', ]\n  s1 = mr.push $ { last, }, finalize = ( d, send ) ->\n    debug '^347^', rpr d\n    if d is last\n      collector.push collector.length\n      return send 'fourth'\n    send d\n    return null\n  mr.push collect = ( d ) -> collector.push d\n  #.........................................................................................................\n  T?.eq s1.modifiers.last,          true\n  T?.eq s1.modifiers.values?.last,  last\n  #.........................................................................................................\n  mr.run()\n  debug '^343^', collector\n  T?.eq collector, [ 'first', 'second', 'third', 3, 'fourth', ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@_modifier_once_after_last = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline\n    $           }   = require '../../../apps/moonriver'\n  collector     = []\n  mr            = new Pipeline()\n  #.......................................................................................................\n  mr.push [ 'first', 'second', 'third', ]\n  s1 = mr.push $ { once_after_last: true, }, finalize = ( d ) ->\n    collector.push collector.length\n    return null\n  mr.push ( d ) -> collector.push d\n  #.........................................................................................................\n  T?.eq s1.is_sender,                 true\n  T?.eq s1.modifiers.once_after_last, true\n  #.........................................................................................................\n  mr.run()\n  T?.eq collector, [ 'first', 'second', 'third', 3, ]\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_exit_symbol = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline\n    $           }   = require '../../../apps/moonriver'\n  collector     = []\n  protocol      = []\n  mr            = new Pipeline { protocol, }\n  #.......................................................................................................\n  mr.push [ 'first', 'second', 'third', 'fourth', 'fifth', ]\n  mr.push look_for_third = ( d, send ) ->\n    send if d is 'third' then Symbol.for 'exit' else d\n  mr.push collect = ( d, send ) ->\n    collector.push d\n  mr.run()\n  echo rpr d for d in collector\n  T?.eq collector, [ 'first', 'second', ]\n  H.tabulate 'protocol', protocol\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_once_before_first_and_once_after_last_called_even_when_pipeline_empty = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline\n    $           }   = require '../../../apps/moonriver'\n  collector         = []\n  once_before_first = true\n  once_after_last   = true\n  counts            =\n    once_before_first:  0\n    once_after_last:    0\n  mr                = new Pipeline()\n  #.......................................................................................................\n  mr.push []\n  mr.push $ { once_before_first,  },  on_once_before  = ( d ) -> counts.once_before_first++\n  mr.push show_1  = ( d       ) -> urge '^498-1^', rpr d\n  mr.push $ { once_after_last,    },  on_once_after   = ( d ) -> counts.once_after_last++\n  mr.push collect = ( d       ) -> collector.push d\n  mr.push show_2  = ( d       ) -> urge '^498-2^', rpr d\n  mr.run()\n  T?.eq counts, { once_before_first: 1, once_after_last: 1 }\n  T?.eq collector, []\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_modifier_first_does_not_leak_into_pipeline_when_used_with_observer = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline\n    $           }   = require '../../../apps/moonriver'\n  first1        = Symbol 'first1'\n  first2        = Symbol 'first2'\n  collector     = []\n  #.......................................................................................................\n  do =>\n    mr = new Pipeline()\n    mr.push Array.from 'abc'\n    mr.push $ { first: first1, }, ( d )       -> debug '^765-1^', rpr d\n    mr.push $ { first: first2, }, ( d, send ) -> debug '^765-2^', rpr d; send d unless d is first2\n    mr.push ( d ) -> collector.push d\n    #.....................................................................................................\n    mr.run()\n    urge '^859^', collector\n    T?.eq collector, Array.from 'abc'\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n\n\n\n\n"
  ]
}