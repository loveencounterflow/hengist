{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/basic.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MOONRIVER/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\n\n\n  # #.........................................................................................................\n  # probes_and_matchers = [\n  #   ]\n  # #.........................................................................................................\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"send.call_count\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Moonriver\n    $once     } = require '../../../apps/moonriver'\n  #.........................................................................................................\n  do =>\n    collector = []\n    pipeline  = [\n      [ 1, 2, 3, 5, ]\n      ( d, send ) -> send d * 2\n      ( d, send ) -> send d #; urge d\n      ( d, send ) -> collector.push d #; help collector\n      ]\n    mr = new Moonriver pipeline\n    mr.drive()\n    T?.eq collector, [ 2, 4, 6, 10, ]\n  #.........................................................................................................\n  do =>\n    collector = []\n    pipeline  = [\n      [ 'a', 'b', ]\n      ( d, send ) -> urge '^598^', d; send d\n      ( d, send ) ->\n        send d\n        if send.call_count is 1\n          send e for e from [ 1, 2, 3, 5, ].values()\n        return null\n      ( d, send ) -> send if isa.float d then d * 2 else d\n      ( d       ) -> urge d\n      ( d, send ) -> collector.push d #; help collector\n      ]\n    mr = new Moonriver pipeline\n    mr.drive()\n    T?.eq collector, [ 'a', 2, 4, 6, 10, 'b' ]\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"can access pipeline from within transform, get user area\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Moonriver } = require '../../../apps/moonriver'\n  #.........................................................................................................\n  do =>\n    collector = []\n    pipeline  = [\n      [ '^4564^', ]\n      ( d ) -> urge d\n      #.....................................................................................................\n      can_access_pipeline_1 = ( d ) ->\n        if @ is mr then T?.ok true\n        else            T?.fail \"^478-1^ not ok\"\n        return null\n      #.....................................................................................................\n      can_access_pipeline_2 = ( d, send ) ->\n        send d\n        if @ is mr then T?.ok true\n        else            T?.fail \"^478-2^ not ok\"\n        return null\n      #.....................................................................................................\n      has_user_area = ( d, send ) ->\n        send d\n        if isa.object @user then  T?.ok true\n        else                      T?.fail \"^478-3^ not ok\"\n        return null\n      #.....................................................................................................\n      ]\n    mr = new Moonriver pipeline\n    debug '^558^', mr\n    mr.drive()\n    # T?.eq collector, [ 2, 4, 6, 10, ]\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"resettable state shared across transforms\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Moonriver } = require '../../../apps/moonriver'\n  { $ }         = Moonriver\n  #.........................................................................................................\n  source = [\n    '<h1>'\n    'The Opening'\n    '</h1>'\n    '<p>'\n    'Twas brillig, and the slithy toves Did gyre and gimble in the'\n    '<em>'\n    'wabe'\n    '</p>'\n    '</body>'\n    '</html>'\n    ]\n  #.........................................................................................................\n  do =>\n    first       = Symbol 'first'\n    last        = Symbol 'last'\n    once_before = Symbol.for 'once_before'\n    once_after  = Symbol.for 'once_after'\n    collector   = []\n    counts      =\n      once_before:  0\n      first:        0\n      last:         0\n      once_after:   0\n    #.......................................................................................................\n    pipeline  = [\n      #.....................................................................................................\n      source\n      #.....................................................................................................\n      $ { once_before, }, on_first = ( d ) ->\n        counts.once_before++\n      #.....................................................................................................\n      $ { first, }, initialize_stack = ( d ) ->\n        counts.first++\n        if d is first\n          @user.stack = []\n          urge '^3487^', 'initialize_stack()', @.user\n        return null\n      #.....................................................................................................\n      push_opening_to_stack = ( d, send ) ->\n        return send d if  not isa.text d\n        return send d if  not d.startsWith '<'\n        return send d if      d.startsWith '</'\n        left_d  = d.replace /^<([^\\s>]+).*$/, '$1'\n        # debug '^039850^', { left_d, }\n        @user.stack.push left_d\n        send d\n      #.....................................................................................................\n      pop_closing_from_stack = ( d, send ) ->\n        return send d if  not isa.text d\n        return send d if  not d.startsWith '</'\n        # debug '^4564^', 'pop_closing_from_stack', @user.stack, d\n        if @user.stack.length < 1\n          send \"error: extraneous closing tag #{rpr d}\"\n          return send d\n        left_d  = @user.stack.pop()\n        right_d = d.replace /^<\\/([^\\s>]+).*$/, '$1'\n        # debug '^039850^', { left_d, right_d, }\n        unless left_d is right_d\n          send \"error: expected closing tag for <#{rpr left_d}>, got #{rpr d}\"\n          return send d\n        send d\n      #.....................................................................................................\n      $ { once_after, }, pop_remaining_from_stack = ( d ) ->\n        debug '^309-1^', d\n        # counts.last++\n        # send d\n      #.....................................................................................................\n      collect = ( d ) ->\n        debug '^309-1^', d\n        collector.push d\n      #.....................................................................................................\n      $ { once_after, }, cleanup = ( d ) ->\n        debug '^309-2^', d\n        counts.once_after++\n      #.....................................................................................................\n      $ { last, }, cleanup = ( d ) ->\n        debug '^309-2^', d\n        counts.last++\n      #.....................................................................................................\n      ]\n    mr = new Moonriver pipeline\n    mr.drive()\n    debug '^558^', mr.user\n    echo rpr d for d in collector\n    T?.eq collector, [\n      '<h1>'\n      'The Opening'\n      '</h1>'\n      '<p>'\n      'Twas brillig, and the slithy toves Did gyre and gimble in the'\n      '<em>'\n      'wabe'\n      \"error: expected closing tag for <'em'>, got '</p>'\"\n      '</p>'\n      \"error: expected closing tag for <'p'>, got '</body>'\"\n      '</body>'\n      \"error: extraneous closing tag '</html>'\"\n      '</html>'\n      ]\n    T?.eq counts, {\n      once_before:  1\n      first:        source.length + 1\n      last:         source.length + 3 + 1\n      once_after:   1 }\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"modifier last\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Moonriver } = require '../../../apps/moonriver'\n  { $ }         = Moonriver\n  first         = Symbol 'first'\n  last          = Symbol 'last'\n  collector     = []\n  #.......................................................................................................\n  pipeline      = [\n    [ 'first', 'second', 'third', ]\n    #.....................................................................................................\n    $ { last, }, finalize = ( d, send ) ->\n      if d is last\n        collector.push collector.length\n        return send 'fourth'\n      send d\n      return null\n    #.....................................................................................................\n    ( d ) -> collector.push d\n    #.....................................................................................................\n    ]\n  #.........................................................................................................\n  mr      = new Moonriver pipeline\n  segment = mr.pipeline[ 1 ]\n  T?.eq segment.modifications.do_last,  true\n  T?.eq segment.modifications.last,     last\n  #.........................................................................................................\n  error = null\n  try mr.drive() catch error\n    T?.ok /cannot send values after pipeline has terminated/.test error.message\n  T?.ok error?\n  #.........................................................................................................\n  echo rpr d for d in collector\n  T?.eq collector, [ 'first', 'second', 'third', 3, ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"modifier once_after\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Moonriver } = require '../../../apps/moonriver'\n  { $ }         = Moonriver\n  once_after    = Symbol 'once_after'\n  collector     = []\n  #.......................................................................................................\n  pipeline      = [\n    [ 'first', 'second', 'third', ]\n    #.....................................................................................................\n    $ { once_after, }, finalize = ( d ) ->\n      if d is once_after\n        collector.push collector.length\n      return null\n    #.....................................................................................................\n    ( d ) -> collector.push d\n    #.....................................................................................................\n    ]\n  #.........................................................................................................\n  mr      = new Moonriver pipeline\n  segment = mr.pipeline[ 1 ]\n  T?.eq segment.is_sender,                    false\n  T?.eq segment.is_listener,                  false\n  T?.eq segment.modifications.do_once_after,  true\n  T?.eq segment.modifications.once_after,     once_after\n  #.........................................................................................................\n  mr.drive()\n  T?.eq collector, [ 'first', 'second', 'third', 3, ]\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"exit symbol\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Moonriver } = require '../../../apps/moonriver'\n  { $ }         = Moonriver\n  collector     = []\n  #.......................................................................................................\n  pipeline      = [\n    [ 'first', 'second', 'third', 'fourth', 'fifth', ]\n    #.....................................................................................................\n    look_for_third = ( d, send ) ->\n      send if d is 'third' then Symbol.for 'exit' else d\n    #.....................................................................................................\n    collect = ( d, send ) ->\n      collector.push d\n    #.....................................................................................................\n    ]\n  mr = new Moonriver pipeline\n  mr.drive()\n  echo rpr d for d in collector\n  T?.eq collector, [ 'first', 'second', ]\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"called even when pipeline empty: once_before, once_after\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Moonriver } = require '../../../apps/moonriver'\n  { $ }         = Moonriver\n  collector     = []\n  once_before   = Symbol.for 'once_before'\n  once_after    = Symbol.for 'once_after'\n  counts        =\n    once_before:  0\n    once_after:   0\n  #.......................................................................................................\n  pipeline      = [\n    []\n    #.....................................................................................................\n    $ { once_before, }, on_once_before = ( d ) ->\n      counts.once_before++\n    #.....................................................................................................\n    show_1 = ( d, send ) -> urge '^498-1^', rpr d; send d\n    #.....................................................................................................\n    $ { once_after, }, on_once_after = ( d ) ->\n      counts.once_after++\n    #.....................................................................................................\n    collect = ( d, send ) ->\n      collector.push d\n      send d\n    #.....................................................................................................\n    show_2 = ( d, send ) -> urge '^498-2^', rpr d; send d\n    #.....................................................................................................\n    ]\n  mr = new Moonriver pipeline\n  mr.drive()\n  T?.eq counts, { once_before: 1, once_after: 1 }\n  T?.eq collector, []\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"transforms with once_after must not be senders\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Moonriver } = require '../../../apps/moonriver'\n  { $ }         = Moonriver\n  once_after    = Symbol.for 'once_after'\n  #.......................................................................................................\n  pipeline      = [\n    $ { once_after, }, on_once_after = ( d, send ) ->\n    ]\n  #.........................................................................................................\n  error = null\n  try mr = new Moonriver pipeline catch error\n    # throw error\n    T?.ok /transforms with modifier once_after cannot be senders/.test error.message\n  T?.ok error?\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"using send() in a once_before transform\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Moonriver } = require '../../../apps/moonriver'\n  { $ }         = Moonriver\n  once_before   = [ 42, 43, 44, ]\n  collector     = []\n  #.......................................................................................................\n  pipeline      = [\n    $ { once_before, }, on_once_before = ( d, send ) ->\n      debug '^4532^', d\n      send e for e in d\n    show    = ( d ) -> urge '^4948^', d\n    collect = ( d ) -> collector.push d\n    ]\n  mr = new Moonriver pipeline\n  mr.drive()\n  T?.eq collector, [ 42, 43, 44, ]\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"appending data before closing\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Moonriver } = require '../../../apps/moonriver'\n  { $ }         = Moonriver\n  before_last   = Symbol 'before_last'\n  collector     = []\n  #.......................................................................................................\n  pipeline      = [\n    [ -1, ]\n    show    = ( d ) -> urge '^4948-1^', d\n    $ { before_last, }, on_once_before = ( d, send ) ->\n      debug '^4532^', d\n      return send d unless d is before_last\n      send e for e in [ 'a', 'b', 'c', ]\n    show    = ( d ) -> urge '^4948-2^', d\n    collect = ( d ) -> collector.push d\n    ]\n  mr = new Moonriver pipeline\n  mr.drive()\n  help '^894^', collector\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"once_before, once_after transformers transparent to data\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Moonriver } = require '../../../apps/moonriver'\n  { $ }         = Moonriver\n  collectors    =\n    c1: []\n    c2: []\n    c3: []\n    c4: []\n    c5: []\n  #.......................................................................................................\n  pipeline      = [\n    [ 'a', 'b', 'c', ]\n    collect = ( d ) ->                                                          collectors.c1.push d\n    $ { once_before:  'bfr', }, on_once_before  = ( d ) -> debug '^453-1^', d;  collectors.c2.push d\n    collect = ( d ) ->                                                          collectors.c3.push d\n    $ { once_after:   'aft', }, on_once_after   = ( d ) -> debug '^453-2^', d;  collectors.c4.push d\n    collect = ( d ) ->                                                          collectors.c5.push d\n    show    = ( d ) -> urge '^4948^', d\n    ]\n  mr = new Moonriver pipeline\n  mr.drive()\n  help '^894^', collectors.c1\n  help '^894^', collectors.c2\n  help '^894^', collectors.c3\n  help '^894^', collectors.c4\n  help '^894^', collectors.c5\n  T?.eq collectors.c1, [ 'a', 'b', 'c', ]\n  T?.eq collectors.c2, [ 'bfr', ]\n  T?.eq collectors.c3, [ 'a', 'b', 'c', ]\n  T?.eq collectors.c4, [ 'aft', ]\n  T?.eq collectors.c5, [ 'a', 'b', 'c', ]\n  #.........................................................................................................\n  done?()\n  return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # @[ \"send.call_count\" ]()\n  @[ \"appending data before closing\" ]()\n  # test @[ \"appending data before closing\" ]\n  # test @[ \"using send() in a once_before transform\" ]\n  # @[ \"once_before, once_after transformers transparent to data\" ]()\n  # test @[ \"once_before, once_after transformers transparent to data\" ]\n  # @[ \"resettable state shared across transforms\" ]()\n  # test @[ \"resettable state shared across transforms\" ]\n  # @[ \"modifier once_after\" ]()\n  # test @[ \"modifier once_after\" ]\n  # @[ \"modifier last\" ]()\n  # test @[ \"modifier last\" ]\n  # test @[ \"modifier last\" ]\n  # @[ \"called even when pipeline empty: once_before, once_after\" ]()\n  # test @[ \"called even when pipeline empty: once_before, once_after\" ]\n  # test @[ \"transforms with once_after must not be senders\" ]\n  # test @[ \"exit symbol\" ]\n  # @[ \"can access pipeline from within transform, get user area\" ]()\n  # test @[ \"can access pipeline from within transform, get user area\" ]\n\n\n"
  ]
}