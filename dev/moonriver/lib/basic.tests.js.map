{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/basic.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MOONRIVER/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\n\n\n  # #.........................................................................................................\n  # probes_and_matchers = [\n  #   ]\n  # #.........................................................................................................\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"send.call_count\" ] = ( T, done ) ->\n  # T?.halt_on_error()\n  { Moonriver\n    $once     } = require '../../../apps/moonriver'\n  #.........................................................................................................\n  do =>\n    collector = []\n    pipeline  = [\n      [ 1, 2, 3, 5, ]\n      ( d, send ) -> send d * 2\n      ( d, send ) -> send d #; urge d\n      ( d, send ) -> collector.push d #; help collector\n      ]\n    mr = new Moonriver pipeline\n    mr.drive()\n    T?.eq collector, [ 2, 4, 6, 10, ]\n  #.........................................................................................................\n  do =>\n    collector = []\n    pipeline  = [\n      [ 'a', 'b', ]\n      ( d, send ) -> urge '^598^', d; send d\n      ( d, send ) ->\n        send d\n        if send.call_count is 1\n          send e for e from [ 1, 2, 3, 5, ].values()\n        return null\n      ( d, send ) -> send if isa.float d then d * 2 else d\n      ( d       ) -> urge d\n      ( d, send ) -> collector.push d #; help collector\n      ]\n    mr = new Moonriver pipeline\n    mr.drive()\n    T?.eq collector, [ 'a', 2, 4, 6, 10, 'b' ]\n  #.........................................................................................................\n  done?()\n  return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n  # @[ \"send.call_count\" ]()\n\n\n\n"
  ]
}