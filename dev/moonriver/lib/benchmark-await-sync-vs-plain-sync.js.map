{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/benchmark-await-sync-vs-plain-sync.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/NG'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\ntypes                     = new ( require '../../../apps/intertype' ).Intertype()\n{ isa\n  type_of }               = types\n#...........................................................................................................\nDATA                      = require '../../../lib/data-providers-nocache'\nBM                        = require '../../../lib/benchmarks'\ndata_cache                = null\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@get_data = ( cfg ) ->\n  return data_cache if data_cache?\n  #.........................................................................................................\n  integers = DATA.get_integers cfg.item_count, -1e6, +1e6\n  #.........................................................................................................\n  data_cache  = {\n    integers }\n  data_cache  = GUY.lft.freeze data_cache\n  return data_cache\n\n#-----------------------------------------------------------------------------------------------------------\n@compute = ( a, b ) -> ( a + b ) * b / a\n\n#-----------------------------------------------------------------------------------------------------------\n@plain_sync = ( cfg ) -> new Promise ( resolve ) =>\n  { integers }  = @get_data cfg\n  get_value     = ( P... ) => @compute P...\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    sum   = 0\n    for integer in integers\n      c     = get_value 12345, integer\n      sum  += c\n      count++\n    info '^543^', { sum, } if cfg.show\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@plain_await = ( cfg ) -> new Promise ( resolve ) =>\n  { integers }  = @get_data cfg\n  get_value     = ( P... ) => await @compute P...\n  #.........................................................................................................\n  resolve => new Promise ( resolve ) =>\n    count = 0\n    sum   = 0\n    for integer in integers\n      c     = get_value 12345, integer\n      sum  += c\n      count++\n    info '^543^', { sum, } if cfg.show\n    resolve count\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@run_benchmarks = ->\n  bench         = BM.new_benchmarks()\n  cfg           =\n    item_count:     1e1\n  cfg.show      = cfg.item_count < 100\n  repetitions   = 5\n  test_names    = [\n    'plain_sync'\n    'plain_await'\n    ]\n  data_cache = null\n  for _ in [ 1 .. repetitions ]\n    whisper '-'.repeat 108\n    for test_name in ( require 'cnd' ).shuffle test_names\n      await BM.benchmark bench, cfg, false, @, test_name\n  BM.show_totals bench\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @run_benchmarks()\n"
  ]
}