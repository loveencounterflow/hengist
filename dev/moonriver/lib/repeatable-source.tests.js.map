{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/repeatable-source.tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MOONRIVER/TESTS/REPEATABLE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@can_use_function_without_arguments_as_source = ( T, done ) ->\n  # T?.halt_on_error()\n  GUY             = require '../../../apps/guy'\n  { Pipeline\n    signals     } = require '../../../apps/moonriver'\n  #.........................................................................................................\n  on_before_process = null\n  on_before_step    = null\n  on_after_step     = null\n  on_after_process  = null\n  # on_before_process = -> help '^98-1^', @\n  # on_after_process  = -> warn '^98-2^', @\n  # on_before_step    =  ( sidx ) -> urge '^98-3^', sidx, @\n  # on_after_step     =  ( sidx ) -> urge '^98-4^', sidx, @\n  p = new Pipeline { on_before_process, on_before_step, on_after_step, on_after_process, }\n  #.........................................................................................................\n  p.push -> return 'abcdef'\n  # p.push insert   = ( d, send ) -> send d; send d.toUpperCase() if isa.text d\n  p.push extra    = ( d, send ) -> send \"*#{d}*\"\n  p.push show     = ( d ) -> whisper '^98-5^', d\n  #.........................................................................................................\n  result_1 = p.run()\n  urge '^98-1^', result_1\n  result_2 = p.run()\n  urge '^98-1^', result_2\n  T?.eq result_1, result_2\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@run_and_walk_are_repeatable = ( T, done ) ->\n  # T?.halt_on_error()\n  GUY             = require '../../../apps/guy'\n  { Pipeline\n    $\n    signals     } = require '../../../apps/moonriver'\n  # first           = Symbol 'first'\n  # last            = Symbol 'last'\n  #.........................................................................................................\n  p               = new Pipeline()\n  source          = 'abcdef'\n  # source          = Array.from 'abcdef'\n  p.push source\n  # p.push insert   = ( d, send ) -> send d; send d.toUpperCase() if isa.text d\n  p.push extra    = ( d, send ) -> send \"*#{d}*\"\n  p.push show     = ( d ) -> whisper '^45-1^', d\n  #.........................................................................................................\n  debug '^54-1^', p\n  debug '^54-2^', p.segments[ 0 ]\n  T?.eq ( type_of signals       ), 'object'\n  T?.eq ( type_of signals.reset ), 'symbol'\n  T?.eq ( type_of signals.ok    ), 'symbol'\n  T?.eq ( type_of p.reset       ), 'function'\n  debug '^54-3^', p.reset()\n  T?.eq p.reset(), null\n  #.........................................................................................................\n  do ->\n    result_1 = p.run()\n    result_2 = p.run()\n    info '^54-4^', result_1\n    info '^54-5^', result_2\n    T?.eq result_1, result_2\n    return null\n  #.........................................................................................................\n  do ->\n    result_1 = [ p.walk()..., ]\n    result_2 = [ p.walk()..., ]\n    info '^54-6^', result_1\n    info '^54-7^', result_2\n    T?.eq result_1, result_2\n    return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@run_and_walk_throw_error_on_repeating_nonrepeatable = ( T, done ) ->\n  # T?.halt_on_error()\n  GUY             = require '../../../apps/guy'\n  { Pipeline\n    $\n    signals     } = require '../../../apps/moonriver'\n  # first           = Symbol 'first'\n  # last            = Symbol 'last'\n  #.........................................................................................................\n  get_pipeline = ->\n    p               = new Pipeline()\n    p.push ( -> yield chr for chr in 'abcdef' )()\n    # p.push insert   = ( d, send ) -> send d; send d.toUpperCase() if isa.text d\n    p.push extra    = ( d, send ) -> send \"*#{d}*\"\n    p.push show     = ( d ) -> whisper '^45-1^', d\n    return p\n  #.........................................................................................................\n  do ->\n    p = get_pipeline()\n    result_1 = p.run()\n    T?.throws /source.*not repeatable/, -> result_2 = p.run()\n    return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@repeatable_and_nonrepeatable_sources = ( T, done ) ->\n  # T?.halt_on_error()\n  GUY             = require '../../../apps/guy'\n  { Pipeline    } = require '../../../apps/moonriver'\n  #.........................................................................................................\n  get_pipeline = ( source ) ->\n    p               = new Pipeline()\n    p.push source\n    p.push show     = ( d ) -> whisper '^47-1^', d\n    return p\n  #.........................................................................................................\n  do ->\n    p = get_pipeline 'abcdef'\n    result_1 = p.run()\n    result_2 = p.run()\n    T?.eq result_1, result_2\n    return null\n  #.........................................................................................................\n  do ->\n    p = get_pipeline -> yield chr for chr from Array.from 'abcdef'\n    result_1 = p.run()\n    result_2 = p.run()\n    T?.eq result_1, result_2\n    return null\n  # #.........................................................................................................\n  # do ->\n  #   p = get_pipeline Array.from 'abcdef'\n  #   result_1 = p.run()\n  #   result_2 = p.run()\n  #   T?.eq result_1, result_2\n  #   return null\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @can_use_function_without_arguments_as_source()\n  test @can_use_function_without_arguments_as_source\n  # test @\n\n"
  ]
}