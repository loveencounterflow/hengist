{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-window.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/TESTS/ADVANCED'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\n\n\n#-----------------------------------------------------------------------------------------------------------\n$as_keysorted_list = -> ( d, send ) => send as_keysorted_list d\nas_keysorted_list = ( d ) ->\n  keys = ( Object.keys d ).sort ( a, b ) ->\n    a = parseInt a, 10\n    b = parseInt b, 10\n    return +1 if a > b\n    return -1 if a < b\n    return  0\n  return ( d[ key ] for key in keys )\n\n#-----------------------------------------------------------------------------------------------------------\n@transform_window_cfg_type = ( T, done ) ->\n  # T?.halt_on_error()\n  { get_transform_types\n    misfit              } = require '../../../apps/moonriver'\n  { isa\n    type_of\n    create              } = get_transform_types()\n  #.........................................................................................................\n  T?.eq ([ '^07-1^', isa.transform_window_cfg { min: -1, max: 2, empty: null, } ]), [ '^07-1^', true, ]\n  T?.eq ([ '^07-2^', isa.transform_window_cfg { min: +1, max: 2, empty: null, } ]), [ '^07-2^', true, ]\n  T?.eq ([ '^07-3^', isa.transform_window_cfg { min: +2, max: 2, empty: null, } ]), [ '^07-3^', false, ]\n  #.........................................................................................................\n  T?.eq ( create.transform_window_cfg {}            ), { min: -1, max: 1, empty: misfit, }\n  T?.eq ( create.transform_window_cfg { min: -3, }  ), { min: -3, max: 1, empty: misfit, }\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@window_transform_1 = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline,         \\\n    transforms: TF  } = require '../../../apps/moonriver'\n  collector           = []\n  p                   = new Pipeline()\n  #.........................................................................................................\n  p.push [ 1 .. 9 ]\n  p.push TF.$window { min: -2, max: +2, empty: '_', }\n  # p.push show = ( d ) -> info '^45-1^', d\n  # p.push ( d, send ) -> d.join ''\n  p.push ( d, send ) -> send ( \"#{e}\" for e in d ).join ''\n  p.push show = ( d ) -> urge '^45-1^', d\n  result = p.run()\n  result.push d for await d from p.stop_walk()\n  T?.eq result, [\n    '__123'\n    '_1234'\n    '12345'\n    '23456'\n    '34567'\n    '45678'\n    '56789'\n    '6789_'\n    '789__'\n    ]\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@window_transform_2 = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline,         \\\n    transforms: TF  } = require '../../../apps/moonriver'\n  collector           = []\n  p                   = new Pipeline()\n  #.........................................................................................................\n  p.push [ 1 .. 9 ]\n  p.push TF.$window { min: -2, max: 0, empty: '_', }\n  p.push show = ([ ddd, dd, d, ]) -> urge '^45-1^', [ ddd, dd, d, ]\n  p.push ( ds, send ) -> send ( \"#{d}\" for d in ds ).join ''\n  result = p.run()\n  result.push d for await d from p.stop_walk()\n  T?.eq result, [ '__1', '_12', '123', '234', '345', '456', '567', '678', '789' ]\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@window_transform_3 = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline,         \\\n    transforms: TF  } = require '../../../apps/moonriver'\n  collector           = []\n  p                   = new Pipeline()\n  #.........................................................................................................\n  p.push [ 1 .. 9 ]\n  p.push TF.$window { min: -3, max: +3, empty: '_', }\n  p.push show = ([ d_$3, d_$2, d_$1, d, d_1, d_2, d_3, ]) -> urge '^45-1^', [ d_$3, d_$2, d_$1, d, d_1, d_2, d_3, ]\n  p.push ( ds, send ) -> send ( \"#{d}\" for d in ds ).join ''\n  result = p.run()\n  result.push d for await d from p.stop_walk()\n  T?.eq result, [\n    '___1234'\n    '__12345'\n    '_123456'\n    '1234567'\n    '2345678'\n    '3456789'\n    '456789_'\n    '56789__'\n    '6789___' ]\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@window_transform_4 = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline,         \\\n    transforms: TF  } = require '../../../apps/moonriver'\n  result              = []\n  p                   = new Pipeline()\n  #.........................................................................................................\n  p.push TF.$window { min: -3, max: +3, empty: '_', }\n  p.push show = ([ d_$3, d_$2, d_$1, d, d_1, d_2, d_3, ]) -> urge '^45-1^', [ d_$3, d_$2, d_$1, d, d_1, d_2, d_3, ]\n  p.push ( ds, send ) -> send ( \"#{d}\" for d in ds ).join ''\n  for d in [ 1 .. 9 ]\n    p.send d\n    result.push e for e from p.walk()\n  result.push e for e from p.stop_walk()\n  T?.eq result, [\n    '___1234'\n    '__12345'\n    '_123456'\n    '1234567'\n    '2345678'\n    '3456789'\n    '456789_'\n    '56789__'\n    '6789___' ]\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@window_transform_as_modifier = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline,         \\\n    transforms: TF  } = require '../../../apps/moonriver'\n  result              = []\n  p                   = new Pipeline()\n  #.........................................................................................................\n  p.push TF.$window { min: -3, max: +3, empty: '_', }, ( ds, send ) ->\n    info '^window_transform_as_modifier@1^', ds\n    send ( \"#{d}\" for d in ds ).join ''\n  #.........................................................................................................\n  for d in [ 1 .. 9 ]\n    p.send d\n    # result.push e for e from p.walk_and_stop()\n    result.push e for e from p.walk()\n  result.push e for e from p.stop_walk()\n  T?.eq result, [\n    '___1234'\n    '__12345'\n    '_123456'\n    '1234567'\n    '2345678'\n    '3456789'\n    '456789_'\n    '56789__'\n    '6789___' ]\n  done?()\n\n\n\n\n############################################################################################################\nif require.main is module then await do =>\n  # @window_transform_1()\n  # test @window_transform_1\n  # test @window_transform_2\n  # test @window_transform_3\n  # test @window_transform_4\n  test @window_transform_as_modifier\n\n"
  ]
}