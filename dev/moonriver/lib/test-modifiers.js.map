{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-modifiers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/TESTS/MODIFIERS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\n\n#-----------------------------------------------------------------------------------------------------------\n@modifiers_first_and_last = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline, \\\n    transforms,     } = require '../../../apps/moonriver'\n  p                   = new Pipeline()\n  { $ }               = p\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  $with_stars         = -> with_stars = ( d, send ) -> send \"*#{d}*\"\n  $add_parentheses    = ->\n    return $ { first, last, }, add_parentheses = ( d, send ) ->\n      return send '(' if d is first\n      return send ')' if d is last\n      send d\n  #.........................................................................................................\n  $collect            = ->\n    return $ { last, }, do ->\n      collector = []\n      return collect = ( d, send ) ->\n        debug '^234^', d\n        return send collector if d is last\n        collector.push d\n        return null\n  #.........................................................................................................\n  p.push Array.from '氣場全開'\n  p.push $with_stars()\n  p.push $add_parentheses()\n  # p.push $collect()\n  p.push show = ( d ) -> whisper rpr d\n  result = p.run()\n  urge '^735^', result\n  T?.eq result, [ '(', '*氣*', '*場*', '*全*', '*開*', ')' ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@modifiers_with_empty_pipeline = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline    }     = require '../../../apps/moonriver'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  do =>\n    collector           = []\n    protocol            = []\n    p                   = new Pipeline { protocol, }\n    { $ }               = p\n    p.push []\n    p.push                             ( d, send ) -> send d * 2\n    p.push $ { first,              },  ( d, send ) -> send d\n    p.push $ { last,               },  ( d, send ) -> send d\n    p.push                             ( d       ) -> urge '^309^', d\n    p.push                             ( d, send ) -> collector.push d #; help collector\n    p.run()\n    T?.eq collector, [ first, last, ]\n    # debug '^453^', d for d in protocol\n    # H.tabulate 'protocol', protocol\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_appending_data_before_closing = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline\n    $           }   = require '../../../apps/moonriver'\n  last          = Symbol 'last'\n  collector     = []\n  p            = new Pipeline()\n  #.......................................................................................................\n  p.push [ -1, ]\n  p.push show    = ( d ) -> urge '^4948-1^', d\n  p.push $ { last, }, at_last = ( d, send ) ->\n    return send d unless d is last\n    send e for e in [ 'a', 'b', 'c', ]\n  p.push show    = ( d ) -> urge '^4948-2^', d\n  p.push collect = ( d ) -> collector.push d\n  p.run()\n  T?.eq collector, [ -1, 'a', 'b', 'c' ]\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_modifier_last_does_not_leak_into_pipeline_when_used_with_observer = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline\n    $           }   = require '../../../apps/moonriver'\n  last1        = Symbol 'last1'\n  last2        = Symbol 'last2'\n  collector     = []\n  #.......................................................................................................\n  do =>\n    p = new Pipeline()\n    p.push Array.from 'abc'\n    p.push $ { last: last1, }, ( d )       -> debug '^765-1^', rpr d\n    p.push $ { last: last2, }, ( d, send ) -> debug '^765-2^', rpr d; send d unless d is last2\n    p.push ( d ) -> collector.push d\n    #.....................................................................................................\n    p.run()\n    urge '^859^', collector\n    T?.eq collector, Array.from 'abc'\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@_modifier_last = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline\n    $           }   = require '../../../apps/moonriver'\n  first         = Symbol 'first'\n  last          = Symbol 'last'\n  collector     = []\n  p            = new Pipeline()\n  #.......................................................................................................\n  p.push [ 'first', 'second', 'third', ]\n  s1 = p.push $ { last, }, finalize = ( d, send ) ->\n    debug '^347^', rpr d\n    if d is last\n      collector.push collector.length\n      return send 'fourth'\n    send d\n    return null\n  p.push collect = ( d ) -> collector.push d\n  #.........................................................................................................\n  T?.eq s1.modifiers.last,          true\n  T?.eq s1.modifiers.values?.last,  last\n  #.........................................................................................................\n  p.run()\n  debug '^343^', collector\n  T?.eq collector, [ 'first', 'second', 'third', 3, 'fourth', ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@_modifier_once_after_last = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline\n    $           }   = require '../../../apps/moonriver'\n  collector     = []\n  p            = new Pipeline()\n  #.......................................................................................................\n  p.push [ 'first', 'second', 'third', ]\n  s1 = p.push $ { once_after_last: true, }, finalize = ( d ) ->\n    collector.push collector.length\n    return null\n  p.push ( d ) -> collector.push d\n  #.........................................................................................................\n  T?.eq s1.is_sender,                 true\n  T?.eq s1.modifiers.once_after_last, true\n  #.........................................................................................................\n  p.run()\n  T?.eq collector, [ 'first', 'second', 'third', 3, ]\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_exit_symbol = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline\n    $           }   = require '../../../apps/moonriver'\n  collector     = []\n  protocol      = []\n  p            = new Pipeline { protocol, }\n  #.......................................................................................................\n  p.push [ 'first', 'second', 'third', 'fourth', 'fifth', ]\n  p.push look_for_third = ( d, send ) ->\n    send if d is 'third' then Symbol.for 'exit' else d\n  p.push collect = ( d, send ) ->\n    collector.push d\n  p.run()\n  echo rpr d for d in collector\n  T?.eq collector, [ 'first', 'second', ]\n  H.tabulate 'protocol', protocol\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_once_before_first_and_once_after_last_called_even_when_pipeline_empty = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline\n    $           }   = require '../../../apps/moonriver'\n  collector         = []\n  once_before_first = true\n  once_after_last   = true\n  counts            =\n    once_before_first:  0\n    once_after_last:    0\n  p                = new Pipeline()\n  #.......................................................................................................\n  p.push []\n  p.push $ { once_before_first,  },  on_once_before  = ( d ) -> counts.once_before_first++\n  p.push show_1  = ( d       ) -> urge '^498-1^', rpr d\n  p.push $ { once_after_last,    },  on_once_after   = ( d ) -> counts.once_after_last++\n  p.push collect = ( d       ) -> collector.push d\n  p.push show_2  = ( d       ) -> urge '^498-2^', rpr d\n  p.run()\n  T?.eq counts, { once_before_first: 1, once_after_last: 1 }\n  T?.eq collector, []\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_modifier_first_does_not_leak_into_pipeline_when_used_with_observer = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline\n    $           }   = require '../../../apps/moonriver'\n  first1        = Symbol 'first1'\n  first2        = Symbol 'first2'\n  collector     = []\n  #.......................................................................................................\n  do =>\n    p = new Pipeline()\n    p.push Array.from 'abc'\n    p.push $ { first: first1, }, ( d )       -> debug '^765-1^', rpr d\n    p.push $ { first: first2, }, ( d, send ) -> debug '^765-2^', rpr d; send d unless d is first2\n    p.push ( d ) -> collector.push d\n    #.....................................................................................................\n    p.run()\n    urge '^859^', collector\n    T?.eq collector, Array.from 'abc'\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @modifiers_first_and_last()\n  # test @modifiers_first_and_last\n  @modifiers_with_empty_pipeline()\n  test @modifiers_with_empty_pipeline\n  # test @\n\n\n\n\n"
  ]
}