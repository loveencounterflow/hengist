{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-modifiers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/TESTS/MODIFIERS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\n\n#-----------------------------------------------------------------------------------------------------------\n@modifiers_first_and_last_1 = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline,         \\\n    transforms,     } = require '../../../apps/moonriver'\n  p                   = new Pipeline()\n  { $ }               = p\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  $with_stars         = -> with_stars = ( d, send ) -> send \"*#{d}*\"\n  $add_parentheses    = ->\n    return $ { first, last, }, add_parentheses = ( d, send ) ->\n      return send '(' if d is first\n      return send ')' if d is last\n      send d\n  #.........................................................................................................\n  do ->\n    p.push Array.from '氣場全開'\n    p.push $with_stars()\n    p.push $add_parentheses()\n    # p.push transforms.$collect()\n    p.push show = ( d ) -> whisper rpr d\n    result = p.run()\n    urge '^735^', result\n    T?.eq result, [ '(', '*氣*', '*場*', '*全*', '*開*', ')' ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@modifiers_start_and_stop = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline,         \\\n    $,                \\\n    transforms,     } = require '../../../apps/moonriver'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  start               = Symbol 'start'\n  stop                = Symbol 'stop'\n  #.........................................................................................................\n  $with_stars                 = -> with_stars = ( d, send ) -> send \"*#{d}*\"\n  $add_parentheses_start_stop = ->\n    return $ { start, stop, }, add_parentheses_start_stop = ( d, send ) ->\n      return send '(' if d is start\n      return send ')' if d is stop\n      send d\n  $add_parentheses_first_last  = ->\n    return $ { first, last, }, add_parentheses_first_last = ( d, send ) ->\n      return send '[' if d is first\n      return send ']' if d is last\n      send d\n  new_pipeline_start_stop = ( cfg ) ->\n    p = new Pipeline { cfg..., }\n    p.push $with_stars()\n    p.push $add_parentheses_start_stop()\n    # p.push transforms.$collect()\n    # p.push show = ( d ) -> whisper rpr d\n    return p\n  new_pipeline_first_last = ( cfg ) ->\n    p = new Pipeline { cfg..., }\n    p.push $with_stars()\n    p.push $add_parentheses_first_last()\n    # p.push transforms.$collect()\n    # p.push show = ( d ) -> whisper rpr d\n    return p\n  #.........................................................................................................\n  do ->\n    p       = new_pipeline_start_stop()\n    result  = []\n    for chr in Array.from '氣場全開'\n      p.send chr\n    result.push d for d from p.walk()\n    result.push d for d from p.stop_walk()\n    urge '^735^', result\n    T?.eq result, [ '(', '*氣*', '*場*', '*全*', '*開*', ')' ]\n  #.........................................................................................................\n  do ->\n    p       = new_pipeline_first_last()\n    result  = []\n    for chr in Array.from '氣場全開'\n      p.send chr\n    result.push d for d from p.walk()\n    result.push d for d from p.stop_walk()\n    urge '^735^', result\n    T?.eq result, [ '[', '*氣*', '*場*', '*全*', '*開*', ']' ]\n  #.........................................................................................................\n  do ->\n    p       = new_pipeline_first_last()\n    result  = []\n    for chr in Array.from '氣場全開'\n      p.send chr\n      result.push d for d from p.walk()\n    result.push d for d from p.stop_walk()\n    urge '^735^', result\n    T?.eq result, [ '[', '*氣*', ']', '[', '*場*', ']', '[', '*全*', ']', '[', '*開*', ']' ]\n  #.........................................................................................................\n  do ->\n    p       = new_pipeline_start_stop()\n    result  = []\n    for chr in Array.from '氣場全開'\n      p.send chr\n      result.push d for d from p.walk()\n    result.push d for d from p.stop_walk()\n    urge '^735^', result\n    T?.eq result, [ '(', '*氣*', '*場*', '*全*', '*開*', ')' ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@modifiers_first_and_last_2 = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline,         \\\n    $,\n    transforms,     } = require '../../../apps/moonriver'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  $with_stars         = -> with_stars = ( d, send ) -> send \"*#{d}*\"\n  $add_parentheses    = ->\n    return $ { first, last, }, add_parentheses = ( d, send ) ->\n      return send '(' if d is first\n      return send ')' if d is last\n      send d\n  #.........................................................................................................\n  do ->\n    p = new Pipeline()\n    p.push Array.from '氣場全開'\n    p.push $with_stars()\n    p.push $add_parentheses()\n    # p.push transforms.$collect()\n    p.push show = ( d ) -> whisper rpr d\n    result = p.run()\n    urge '^735^', result\n    T?.eq result, [ '(', '*氣*', '*場*', '*全*', '*開*', ')' ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@modifiers_first_and_last_3 = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline,         \\\n    $,\n    transforms,     } = require '../../../apps/moonriver'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  $with_stars         = -> with_stars = ( d, send ) -> send \"*#{d}*\"\n  $add_parentheses    = ->\n    return $ { first, last, }, add_parentheses = ( d, send ) ->\n      return send '(' if d is first\n      return send ')' if d is last\n      send d\n  #.........................................................................................................\n  do ->\n    p = new Pipeline()\n    p.push Array.from '氣場全開'\n    p.push $with_stars()\n    # p.push ( d ) -> info '^77-1^', p, p.segments[ 0 ].output\n    p.push $add_parentheses()\n    # p.push ( d ) -> info '^77-2^', p # .segments[ 1 ].output\n    p.push show = ( d ) -> help rpr d\n    p.push transforms.$collect()\n    p.push show = ( d ) -> urge rpr d\n    p.push join = ( d, send ) -> send d.join ''\n    result = p.run()\n    result.push d for d from p.stop_walk()\n    urge '^77-3^', p\n    urge '^77-4^', result\n    T?.eq result, [ '(*氣**場**全**開*)' ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@modifiers_of_observers_do_not_leak = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline\n    Async_pipeline\n    $\n    transforms      } = require '../../../apps/moonriver'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  start               = Symbol 'start'\n  stop                = Symbol 'stop'\n  #.........................................................................................................\n  do ->\n    p = new Pipeline { protocol: true, }\n    p.push Array.from '氣場全開'\n    p.push $ { first, last, start, stop, }, observe = ( d ) -> info '^79-1^', rpr d\n    result = p.run()\n    result.push d for d from p.stop_walk()\n    urge '^79-2^', p\n    urge '^79-3^', result\n    T?.eq result, [ '氣', '場', '全', '開', ]\n    H.tabulate \"modifiers_of_observers_do_not_leak\", p.journal\n  #.........................................................................................................\n  await do ->\n    p = new Async_pipeline { protocol: true, }\n    p.push Array.from '氣場全開'\n    p.push $ { first, last, start, stop, }, observe = ( d ) -> await GUY.async.after 0.1, -> info '^79-4^', rpr d\n    result = await p.run()\n    result.push d for await d from p.stop_walk()\n    urge '^79-5^', p\n    urge '^79-6^', result\n    T?.eq result, [ '氣', '場', '全', '開', ]\n    H.tabulate \"modifiers_of_observers_do_not_leak\", p.journal\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@modifiers_with_empty_pipeline = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline    }     = require '../../../apps/moonriver'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  do =>\n    collector           = []\n    p                   = new Pipeline { protocol: true, }\n    { $ }               = p\n    p.push []\n    p.push                             ( d, send ) -> send d * 2\n    p.push $ { first,              },  ( d, send ) -> send d\n    p.push $ { last,               },  ( d, send ) -> send d\n    p.push                             ( d       ) -> urge '^309^', d\n    p.push                             ( d, send ) -> collector.push d #; help collector\n    p.run()\n    T?.eq collector, [ first, last, ]\n    H.tabulate 'modifiers_with_empty_pipeline #2', p.journal\n  #.........................................................................................................\n  do =>\n    collector           = []\n    p                   = new Pipeline { protocol: true, }\n    { $ }               = p\n    p.push []\n    p.push                             ( d, send ) -> send d * 2\n    p.push $ { first, last, },         ( d, send ) -> send d\n    p.push                             ( d       ) -> urge '^309^', d\n    p.push                             ( d, send ) -> collector.push d #; help collector\n    p.run()\n    T?.eq collector, [ first, last, ]\n    # debug '^453^', d for d in protocol\n    H.tabulate 'modifiers_with_empty_pipeline #2', p.journal\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@modifiers_preserved_for_pipeline_segments = ( T, done ) ->\n  # T?.halt_on_error()\n  GUY                   = require '../../../apps/guy'\n  { Pipeline,           \\\n    $,                  \\\n    transforms: TF    } = require '../../../apps/moonriver'\n  first                 = Symbol 'first'\n  last                  = Symbol 'last'\n  #.........................................................................................................\n  do ->\n    p = new Pipeline()\n    p.push 'abcd'\n    p.push $ { first, last, }, ( d, send ) ->\n      debug '^53-1^', rpr d\n      return send '(' if d is first\n      return send ')' if d is last\n      send d.toUpperCase()\n    p.push TF.$collect()\n    # p.push do ->\n    #   collector = []\n    #   return $ { last, }, ( d, send ) ->\n    #     return send collector if d is last\n    #     collector.push d\n    p.push ( d, send ) -> send d.join ''\n    result = p.run()\n    result.push d for await d from p.stop_walk()\n    T?.eq result, [ '(ABCD)', ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@unknown_modifiers_cause_error = ( T, done ) ->\n  # T?.halt_on_error()\n  GUY                   = require '../../../apps/guy'\n  { Pipeline,           \\\n    $,                  \\\n    transforms: TF    } = require '../../../apps/moonriver'\n  unknown               = Symbol 'unknown'\n  #.........................................................................................................\n  do ->\n    p = new Pipeline()\n    p.push 'abcd'\n    T?.throws /not a valid/, -> p.push $ { unknown, }, ( d ) ->\n  #.........................................................................................................\n  done?()\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @modifiers_first_and_last()\n  # test @modifiers_first_and_last_1\n  # @modifiers_first_and_last_2()\n  # @modifiers_first_and_last_3()\n  # test @modifiers_first_and_last_2\n  # test @modifiers_first_and_last_3\n  # @modifiers_with_empty_pipeline()\n  # test @modifiers_with_empty_pipeline\n  # await @modifiers_of_observers_do_not_leak()\n  # await test @modifiers_of_observers_do_not_leak\n  test @modifiers_start_and_stop\n  # @unknown_modifiers_cause_error()\n  # test @unknown_modifiers_cause_error\n  # test @modifiers_with_empty_pipeline\n  # test @\n\n\n\n\n"
  ]
}