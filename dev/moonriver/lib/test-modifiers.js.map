{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-modifiers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/TESTS/MODIFIERS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\n\n#-----------------------------------------------------------------------------------------------------------\n@modifiers_first_and_last_1 = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline,         \\\n    transforms,     } = require '../../../apps/moonriver'\n  p                   = new Pipeline()\n  { $ }               = p\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  $with_stars         = -> with_stars = ( d, send ) -> send \"*#{d}*\"\n  $add_parentheses    = ->\n    return $ { first, last, }, add_parentheses = ( d, send ) ->\n      return send '(' if d is first\n      return send ')' if d is last\n      send d\n  #.........................................................................................................\n  do ->\n    p.push Array.from '氣場全開'\n    p.push $with_stars()\n    p.push $add_parentheses()\n    # p.push transforms.$collect()\n    p.push show = ( d ) -> whisper rpr d\n    result = p.run()\n    urge '^735^', result\n    T?.eq result, [ '(', '*氣*', '*場*', '*全*', '*開*', ')' ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@modifiers_first_and_last_2 = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline,         \\\n    $,\n    transforms,     } = require '../../../apps/moonriver'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  $with_stars         = -> with_stars = ( d, send ) -> send \"*#{d}*\"\n  $add_parentheses    = ->\n    return $ { first, last, }, add_parentheses = ( d, send ) ->\n      return send '(' if d is first\n      return send ')' if d is last\n      send d\n  #.........................................................................................................\n  do ->\n    p = new Pipeline()\n    p.push Array.from '氣場全開'\n    p.push $with_stars()\n    p.push $add_parentheses()\n    # p.push transforms.$collect()\n    p.push show = ( d ) -> whisper rpr d\n    result = p.run()\n    urge '^735^', result\n    T?.eq result, [ '(', '*氣*', '*場*', '*全*', '*開*', ')' ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@modifiers_first_and_last_3 = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline,         \\\n    $,\n    transforms,     } = require '../../../apps/moonriver'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  $with_stars         = -> with_stars = ( d, send ) -> send \"*#{d}*\"\n  $add_parentheses    = ->\n    return $ { first, last, }, add_parentheses = ( d, send ) ->\n      return send '(' if d is first\n      return send ')' if d is last\n      send d\n  #.........................................................................................................\n  do ->\n    p = new Pipeline()\n    p.push Array.from '氣場全開'\n    p.push $with_stars()\n    # p.push ( d ) -> info '^77-1^', p, p.segments[ 0 ].output\n    p.push $add_parentheses()\n    # p.push ( d ) -> info '^77-2^', p # .segments[ 1 ].output\n    p.push show = ( d ) -> help rpr d\n    p.push transforms.$collect()\n    p.push show = ( d ) -> urge rpr d\n    p.push join = ( d, send ) -> send d.join ''\n    result = p.run()\n    urge '^77-3^', p\n    urge '^77-4^', result\n    T?.eq result, [ '(*氣**場**全**開*)' ]\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@modifiers_with_empty_pipeline = ( T, done ) ->\n  # T?.halt_on_error()\n  { Pipeline    }     = require '../../../apps/moonriver'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  do =>\n    collector           = []\n    protocol            = []\n    p                   = new Pipeline { protocol, }\n    { $ }               = p\n    p.push []\n    p.push                             ( d, send ) -> send d * 2\n    p.push $ { first,              },  ( d, send ) -> send d\n    p.push $ { last,               },  ( d, send ) -> send d\n    p.push                             ( d       ) -> urge '^309^', d\n    p.push                             ( d, send ) -> collector.push d #; help collector\n    p.run()\n    T?.eq collector, [ first, last, ]\n  #.........................................................................................................\n  do =>\n    collector           = []\n    protocol            = []\n    p                   = new Pipeline { protocol, }\n    { $ }               = p\n    p.push []\n    p.push                             ( d, send ) -> send d * 2\n    p.push $ { first, last, },         ( d, send ) -> send d\n    p.push                             ( d       ) -> urge '^309^', d\n    p.push                             ( d, send ) -> collector.push d #; help collector\n    p.run()\n    T?.eq collector, [ first, last, ]\n    # debug '^453^', d for d in protocol\n    # H.tabulate 'protocol', protocol\n  #.........................................................................................................\n  done?()\n  return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @modifiers_first_and_last()\n  # test @modifiers_first_and_last_1\n  # @modifiers_first_and_last_2()\n  @modifiers_first_and_last_3()\n  # test @modifiers_first_and_last_2\n  # test @modifiers_first_and_last_3\n  # @modifiers_with_empty_pipeline()\n  # test @modifiers_with_empty_pipeline\n  # test @\n\n\n\n\n"
  ]
}