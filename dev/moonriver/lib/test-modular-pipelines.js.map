{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-modular-pipelines.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/TESTS/MODULES'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate }              = types\n# H                         = require './helpers'\n# after                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n# { DATOM }                 = require '../../../apps/datom'\n# { new_datom\n#   lets\n#   stamp     }             = DATOM\n\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_modular_pipeline_classes = ->\n  { Pipeline\n    Pipeline_module } = require '../../../apps/moonriver'\n\n  #=========================================================================================================\n  class P_1 extends Pipeline_module\n\n    $p_1_1: -> p_1_1 = ( d, send ) -> help '$p_1_1'; d.push '$p_1_1'; send d\n    $p_1_2: -> p_1_2 = ( d, send ) -> help '$p_1_2'; d.push '$p_1_2'; send d\n    $p_1_3: -> p_1_3 = ( d, send ) -> help '$p_1_3'; d.push '$p_1_3'; send d\n\n  #=========================================================================================================\n  class P_2 extends Pipeline_module\n\n    $p_2_1: -> p_2_1 = ( d, send ) -> help '$p_2_1'; d.push '$p_2_1'; send d\n    $p_2_2: -> p_2_2 = ( d, send ) -> help '$p_2_2'; d.push '$p_2_2'; send d\n    $p_2_3: -> p_2_3 = ( d, send ) -> help '$p_2_3'; d.push '$p_2_3'; send d\n\n  #=========================================================================================================\n  class P_12 extends Pipeline_module\n\n    #-------------------------------------------------------------------------------------------------------\n    constructor: ->\n      super()\n      # R = new Pipeline()\n      @push new P_1()\n      @push new P_2()\n      return undefined\n\n  #=========================================================================================================\n  p_4 = new Pipeline()\n  p_4.push p_4_1 = ( d, send ) -> help 'p_4_1'; d.push 'p_4_1'; send d\n\n  #=========================================================================================================\n  class P_12_x extends Pipeline_module\n\n    #-------------------------------------------------------------------------------------------------------\n    $: [\n      direct_fn     =    ( d, send ) -> help 'direct_fn';     d.push 'direct_fn';     send d\n      $indirect_fn  = -> ( d, send ) -> help '$indirect_fn';  d.push '$indirect_fn';  send d\n      new P_1()\n      P_2\n      p_4\n      ]\n\n  #=========================================================================================================\n  class P_3 extends Pipeline_module\n    foo: ( d, send ) -> d.push 'foo'; send d\n    bar: ( d, send ) -> d.push 'bar'; send d\n    baz: p_4_1\n\n  #=========================================================================================================\n  return {\n    P_1\n    P_2\n    P_12\n    P_12_x\n    P_3 }\n\n#-----------------------------------------------------------------------------------------------------------\n@pipeline_modules_1 = ( T, done ) ->\n  { Pipeline }              = require '../../../apps/moonriver'\n  { P_1\n    P_2\n    P_12\n    P_12_x\n    P_3 } = get_modular_pipeline_classes()\n  #.........................................................................................................\n  do ->\n    p = new P_1()\n    p.send []\n    T?.eq p.run(), [ [ '$p_1_1', '$p_1_2', '$p_1_3' ] ]\n    return null\n  #.........................................................................................................\n  do ->\n    p = new P_2()\n    p.send []\n    T?.eq p.run(), [ [ '$p_2_1', '$p_2_2', '$p_2_3' ] ]\n    return null\n  #.........................................................................................................\n  do ->\n    p = new P_12()\n    p.send []\n    T?.eq p.run(), [ [ '$p_1_1', '$p_1_2', '$p_1_3', '$p_2_1', '$p_2_2', '$p_2_3' ] ]\n    return null\n  #.........................................................................................................\n  do ->\n    p = new P_12_x()\n    p.send []\n    T?.eq p.run(), [ [ 'direct_fn', '$indirect_fn', '$p_1_1', '$p_1_2', '$p_1_3', '$p_2_1', '$p_2_2', '$p_2_3', 'p_4_1' ] ]\n    return null\n  #.........................................................................................................\n  do ->\n    p = new P_3()\n    p.send []\n    T?.eq p.run(), [ [ 'foo', 'bar', 'p_4_1' ] ]\n    return null\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @pipeline_modules_1()\n  test @pipeline_modules_1\n\n"
  ]
}