{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-modular-pipelines.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,IAAA,EAAA,MAAA,EAAA,4BAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,yBAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC,EAdA;;;;EAoBA,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,MADF,EAEE,OAFF,EAGE,QAHF,EAIE,gBAJF,CAAA,GAI4B,KAAK,CAAC,MAAN,CAAA,CAJ5B,EArBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwDA,4BAAA,GAA+B,QAAA,CAAA,CAAA;AAC/B,QAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAA;IAAE,CAAA,CAAE,QAAF,EACE,eADF,CAAA,GACsB,OAAA,CAAQ,yBAAR,CADtB,EAAF;;IAIQ,MAAN,MAAA,IAAA,QAAkB,gBAAlB;MAEE,MAAQ,CAAA,CAAA;AAAE,YAAA;eAAC,KAAA,GAAQ,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAA,CAAK,QAAL;QAAT;MAAX;;MACR,MAAQ,CAAA,CAAA;AAAE,YAAA;eAAC,KAAA,GAAQ,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAA,CAAK,QAAL;QAAT;MAAX;;MACR,MAAQ,CAAA,CAAA;AAAE,YAAA;eAAC,KAAA,GAAQ,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAA,CAAK,QAAL;QAAT;MAAX;;IAJV,EAJF;;IAWQ,MAAN,MAAA,IAAA,QAAkB,gBAAlB;MAEE,MAAQ,CAAA,CAAA;AAAE,YAAA;eAAC,KAAA,GAAQ,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAA,CAAK,QAAL;QAAT;MAAX;;MACR,MAAQ,CAAA,CAAA;AAAE,YAAA;eAAC,KAAA,GAAQ,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAA,CAAK,QAAL;QAAT;MAAX;;MACR,MAAQ,CAAA,CAAA;AAAE,YAAA;eAAC,KAAA,GAAQ,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAA,CAAK,QAAL;QAAT;MAAX;;IAJV,EAXF;;IAkBQ,OAAN,MAAA,KAAA,QAAmB,gBAAnB,CAAA;;MAGE,WAAa,CAAA,CAAA;aACX,CAAA,EAAN;;QAEM,IAAC,CAAA,IAAD,CAAM,IAAI,GAAJ,CAAA,CAAN;QACA,IAAC,CAAA,IAAD,CAAM,IAAI,GAAJ,CAAA,CAAN;AACA,eAAO;MALI;;IAHf;IAWM;;;;MAAN,MAAA,OAAA,QAAqB,gBAArB,CAAA;;;uBAGE,CAAA,GAAG;QACD,SAAA,GAAmB,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAA,CAAK,WAAL;QAAT,CADlB;QAED,YAAA,GAAgB,QAAA,CAAA,CAAA;iBAAG,QAAA,CAAE,CAAF,CAAA;mBAAS,IAAA,CAAK,cAAL;UAAT;QAAH,CAFf;QAGD,IAAI,GAAJ,CAAA,CAHC;QAID,GAJC;;;;;kBAhCP;;AAwCE,WAAO,CACL,GADK,EAEL,GAFK,EAGL,IAHK,EAIL,MAJK;EAzCsB,EAxD/B;;;EAyGA,MAAA,GAAS,QAAA,CAAA,CAAA;AACT,QAAA,CAAA;;;IAEE,OAAA,CAAQ,MAAR,EAAgB,QAAhB;IACA,CAAA,GAAI,IAAI,IAAJ,CAAA;IACJ,KAAA,CAAM,MAAN,EAAc,CAAd;IACA,CAAC,CAAC,IAAF,CAAO,GAAP;IACA,CAAC,CAAC,GAAF,CAAA;IACA,OAAA,CAAQ,MAAR,EAAgB,QAAhB;IACA,CAAA,GAAI,IAAI,MAAJ,CAAA;IACJ,KAAA,CAAM,MAAN,EAAc,CAAd;IACA,CAAC,CAAC,IAAF,CAAO,GAAP;IACA,CAAC,CAAC,GAAF,CAAA;AACA,WAAO;EAbA,EAzGT;;;EA0HA,IAAC,CAAA,kBAAD,GAAsB,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACtB,QAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA;IAAE,CAAA,CAAE,QAAF,CAAA,GAA4B,OAAA,CAAQ,yBAAR,CAA5B;IACA,CAAA,CAAE,GAAF,EACE,GADF,EAEE,IAFF,EAGE,MAHF,CAAA,GAGa,4BAAA,CAAA,CAHb;wCAIA;EANoB,EA1HtB;;;EAoIA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA;aAChC,kBAAA,CAAA;IADgC,CAAA,IAAlC;;AApIA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/TESTS/MODULES'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n# test                      = require '../../../apps/guy-test'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# H                         = require './helpers'\n# after                     = ( dts, f  ) => new Promise ( resolve ) -> setTimeout ( -> resolve f() ), dts * 1000\n# { DATOM }                 = require '../../../apps/datom'\n# { new_datom\n#   lets\n#   stamp     }             = DATOM\n\n###\n\n# Modular Pipeline\n\n* derive pipeline module class from class `Pipeline_module`\n* base class looks for methods on instance (prototype) whose names start with a dollar sign `$`\n* each of these will be called, added to pipeline\n* constructor returns new instance of a MoonRiver `Pipeline` containing the results of calling each `$`\n  method\n* ordering is preserved\n* modules may in turn be combined\n* can return list with\n  * functions that when called return a transform; these transforms must have a name that starts with a\n    dollar sign `$`\n  * functions (whose name must not start with a dollar sign `$`)\n  * instances of `Pipeline`\n  * instances of (derivatives of) `Pipeline_module`\n  * classes derivatived from `Pipeline_module` (will be instantiated)\n\n###\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_modular_pipeline_classes = ->\n  { Pipeline\n    Pipeline_module } = require '../../../apps/moonriver'\n\n  #=========================================================================================================\n  class P_1 extends Pipeline_module\n\n    $p_1_1: -> p_1_1 = ( d ) -> help '$p_1_1'\n    $p_1_2: -> p_1_2 = ( d ) -> help '$p_1_2'\n    $p_1_3: -> p_1_3 = ( d ) -> help '$p_1_3'\n\n  #=========================================================================================================\n  class P_2 extends Pipeline_module\n\n    $p_2_1: -> p_2_1 = ( d ) -> help '$p_2_1'\n    $p_2_2: -> p_2_2 = ( d ) -> help '$p_2_2'\n    $p_2_3: -> p_2_3 = ( d ) -> help '$p_2_3'\n\n  #=========================================================================================================\n  class P_12 extends Pipeline_module\n\n    #-------------------------------------------------------------------------------------------------------\n    constructor: ->\n      super()\n      # R = new Pipeline()\n      @push new P_1()\n      @push new P_2()\n      return undefined\n\n  #=========================================================================================================\n  class P_12_x extends Pipeline_module\n\n    #-------------------------------------------------------------------------------------------------------\n    $: [\n      direct_fn     =    ( d ) -> help 'direct_fn'\n      $indirect_fn  = -> ( d ) -> help '$indirect_fn'\n      new P_1()\n      P_2\n      ]\n\n  #=========================================================================================================\n  return {\n    P_1\n    P_2\n    P_12\n    P_12_x }\n\n\n#===========================================================================================================\ndemo_1 = ->\n  # whisper '^21^', '——————'\n  # p = new Pipeline_module()\n  whisper '^21^', '——————'\n  p = new P_12()\n  debug '^21^', p\n  p.send 'x'\n  p.run()\n  whisper '^21^', '——————'\n  p = new P_12_x()\n  debug '^21^', p\n  p.send 'x'\n  p.run()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@pipeline_modules_1 = ( T, done ) ->\n  { Pipeline }              = require '../../../apps/moonriver'\n  { P_1\n    P_2\n    P_12\n    P_12_x } = get_modular_pipeline_classes()\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  pipeline_modules_1()\n\n"
  ]
}