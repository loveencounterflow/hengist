{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-streams.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,yBAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC,EAdA;;;EAmBA,IAAA,GAA4B,OAAA,CAAQ,wBAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,MADF,EAEE,OAFF,EAGE,QAHF,EAIE,gBAJF,CAAA,GAI4B,KAAK,CAAC,MAAN,CAAA,CAJ5B;;EAKA,GAAA,GAA4B,OAAA,CAAQ,mBAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,sBAAR,EA3B5B;;;EA+BA,IAAC,CAAA,4BAAD,GAAgC,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAChC,QAAA,cAAA,EAAA,EAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,UAAA,EAAA,OAAA,EAAA,IAAA,EAAA,MAAA;;IACE,IAAA,GAAwB,OAAA,CAAQ,MAAR;IACxB,EAAA,GAAwB,OAAA,CAAQ,IAAR;IACxB,GAAA,GAAwB,OAAA,CAAQ,mBAAR;IACxB,CAAA;MAAE,QAAF;MACE,cADF;MAEE,UAAA,EAAY;IAFd,CAAA,GAEwB,OAAA,CAAQ,yBAAR,CAFxB;IAGA,EAAA,GAAwB,OAAA,CAAQ,SAAR;IACxB,IAAA,GAAwB,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,wCAArB;IACxB,UAAA,GAAwB,QAAA,CAAA,CAAA;aAAG,EAAE,CAAC,gBAAH,CAAoB,IAApB,EAAH;IAAA,EAT1B;;IAWE,OAAA,GAAa,CAAA,CAAA,CAAA,GAAA;AACf,UAAA,QAAA,EAAA,KAAA,EAAA,IAAA,EAAA;MAAI,KAAA,GAAY;MACZ,QAAA,GAAY;AACZ;MAAA,KAAA,WAAA;QACE,KAAA;QACA,IAAY,KAAA,GAAQ,CAApB;AAAA,mBAAA;;QACA,IAAA,CAAK,KAAL,EAAY,GAAA,CAAI,IAAJ,CAAZ;QACA,QAAQ,CAAC,IAAT,CAAc,IAAd;MAJF;AAKA,aAAO;IARI,CAAA,IAXf;;IAqBE,MAAA,GAAS,CAAA,MAAS,CAAA,KAAA,CAAA,CAAA,GAAA;AACpB,UAAA,CAAA,EAAA;MAAI,CAAA,GAAI,IAAI,cAAJ,CAAA;MACJ,KAAA,CAAM,QAAN,EAAgB,CAAhB;MACA,CAAC,CAAC,IAAF,CAAO,UAAA,CAAA,CAAP,EAFJ;;MAII,CAAC,CAAC,IAAF,CAAO,EAAE,CAAC,YAAH,CAAA,CAAP;MACA,CAAC,CAAC,IAAF,CAAO,EAAE,CAAC,MAAH,CAAU,CAAV,CAAP;MACA,CAAC,CAAC,IAAF,CAAO,IAAA,GAAO,QAAA,CAAE,CAAF,CAAA;eAAS,IAAA,CAAK,QAAL,EAAe,GAAA,CAAI,CAAJ,CAAf;MAAT,CAAd;MACA,IAAA,CAAK,QAAL,EAAe,CAAf;AACA,aAAO,CAAA,MAAM,CAAC,CAAC,GAAF,CAAA,CAAN;IATS,CAAA,GAAT,EArBX;;;MAgCE,CAAC,CAAE,EAAH,CAAM,MAAN,EAAc,OAAd;;;MACA;;AACA,WAAO;EAnCuB,EA/BhC;;;EAqEA,IAAC,CAAA,+BAAD,GAAmC,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACnC,QAAA,CAAA,EAAA,cAAA,EAAA,EAAA,EAAA,IAAA,EAAA,CAAA,EAAA,MAAA;;IACE,EAAA,GAAwB,OAAA,CAAQ,SAAR;IACxB,GAAA,GAAwB,OAAA,CAAQ,mBAAR;IACxB,CAAA,CAAE,cAAF,EACE,CADF,CAAA,GACwB,OAAA,CAAQ,yBAAR,CADxB;IAEA,IAAA,GAAwB,MAAA,CAAO,MAAP;IACxB,MAAA,GAAwB;IACxB,CAAA,GAAwB,IAAI,cAAJ,CAAA,EAP1B;;IASE,MAAM,GAAG,CAAC,IAAI,CAAC,SAAT,CAAmB;MAAE,IAAA,EAAM;IAAR,CAAnB,EAAqC,MAAA,QAAA,CAAE,IAAF,CAAA;AAC7C,UAAA,MAAA,EAAA,MAAA,EAAA,YAAA,EAAA;MAAI,MAAA,GAAS,EAAE,CAAC,iBAAH,CAAqB,IAAI,CAAC,IAA1B,EAAgC;QAAE,QAAA,EAAU;MAAZ,CAAhC;MACT,KAAA,CAAM,IAAI,CAAC,IAAX,EADJ;;MAGI,CAAC,CAAC,IAAF,CAAO,MAAP,EAHJ;;MAKI,CAAC,CAAC,IAAF,CAAO,MAAA,QAAA,CAAE,CAAF,CAAA;eACL,CAAA,MAAM,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,CAAA;iBAChB,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,QAAA,CAAA,CAAA,EAAA;;mBAEd,OAAA,CAAA;UAFc,CAAhB;QADgB,CAAZ,CAAN;MADK,CAAP,EALJ;;MAWI,CAAC,CAAC,IAAF,CAAO,CAAA,CAAE,CAAE,IAAF,CAAF,EAAY,MAAA,QAAA,CAAE,CAAF,CAAA;QACjB,IAAmB,CAAA,KAAK,IAAxB;AAAA,iBAAO,KAAP;;QACA,MAAM,MAAM,CAAC,GAAP,CAAA;QACN,MAAM,MAAM,CAAC,KAAP,CAAA;AACN,eAAO;MAJU,CAAZ,CAAP;MAKA,CAAC,CAAC,IAAF,CAAO,QAAA,CAAE,CAAF,CAAA;eAAS,IAAA,CAAK,QAAL,EAAe,GAAA,CAAI,CAAJ,CAAf;MAAT,CAAP,EAhBJ;;;MAmBI,MAAA,GAAgB,CAAA,MAAM,CAAC,CAAC,GAAF,CAAA,CAAN;MAChB,MAAA,GAAgB;;AAAE;QAAA,KAAA,wCAAA;;uBAAA,CAAC,CAAC,QAAF,CAAA;QAAA,CAAA;;UAAF,CAAgC,CAAC,IAAjC,CAAsC,EAAtC;MAChB,YAAA,GAAgB,EAAE,CAAC,YAAH,CAAgB,IAAI,CAAC,IAArB,EAA2B;QAAE,QAAA,EAAU;MAAZ,CAA3B;;QAChB,CAAC,CAAE,EAAH,CAAM,MAAN,EAAoB,MAApB;;;QACA,CAAC,CAAE,EAAH,CAAM,YAAN,EAAoB,MAApB;;aACA,IAAA,CAAK,QAAL,EAAe,MAAf;IAzByC,CAArC;wCA0BN;EApCiC,EArEnC;;;EA4GA,IAAC,CAAA,+BAAD,GAAmC,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACnC,QAAA,cAAA,EAAA,EAAA,EAAA,CAAA,EAAA,MAAA;;IACE,EAAA,GAAwB,OAAA,CAAQ,SAAR;IACxB,GAAA,GAAwB,OAAA,CAAQ,mBAAR;IACxB,CAAA,CAAE,cAAF,CAAA,GAAwB,OAAA,CAAQ,yBAAR,CAAxB;IACA,MAAA,GAAwB;IACxB,CAAA,GAAwB,IAAI,cAAJ,CAAA,EAL1B;;IAOE,MAAM,GAAG,CAAC,IAAI,CAAC,SAAT,CAAmB;MAAE,IAAA,EAAM;IAAR,CAAnB,EAAqC,MAAA,QAAA,CAAE,IAAF,CAAA;AAC7C,UAAA,MAAA,EAAA,MAAA,EAAA;MAAI,MAAA,GAAS,EAAE,CAAC,iBAAH,CAAqB,IAAI,CAAC,IAA1B,EAAgC;QAAE,QAAA,EAAU;MAAZ,CAAhC;MACT,KAAA,CAAM,IAAI,CAAC,IAAX,EADJ;;MAGI,CAAC,CAAC,IAAF,CAAO,MAAP;MACA,CAAC,CAAC,IAAF,CAAO,QAAA,CAAE,CAAF,CAAA;eAAS,IAAA,CAAK,QAAL,EAAe,GAAA,CAAI,CAAJ,CAAf;MAAT,CAAP;MACA,CAAC,CAAC,IAAF,CAAO,MAAP,EALJ;;MAOI,MAAA,GAAgB,CAAA,MAAM,CAAC,CAAC,GAAF,CAAA,CAAN;MAChB,MAAA,GAAgB,MAAM,CAAC,IAAP,CAAY,EAAZ;MAChB,YAAA,GAAgB,EAAE,CAAC,YAAH,CAAgB,IAAI,CAAC,IAArB,EAA2B;QAAE,QAAA,EAAU;MAAZ,CAA3B;;QAChB,CAAC,CAAE,EAAH,CAAM,MAAN,EAAoB,MAApB;;;QACA,CAAC,CAAE,EAAH,CAAM,YAAN,EAAoB,MAApB;;aACA,IAAA,CAAK,QAAL,EAAe,MAAf;IAbyC,CAArC;wCAcN;EAtBiC,EA5GnC;;;EAqIA,IAAC,CAAA,2BAAD,GAA+B,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC/B,QAAA,cAAA,EAAA,EAAA,EAAA,CAAA,EAAA,MAAA;;IACE,EAAA,GAAwB,OAAA,CAAQ,SAAR;IACxB,GAAA,GAAwB,OAAA,CAAQ,mBAAR;IACxB,CAAA,CAAE,cAAF,CAAA,GAAwB,OAAA,CAAQ,yBAAR,CAAxB;IACA,MAAA,GAAwB;IACxB,CAAA,GAAwB,IAAI,cAAJ,CAAA,EAL1B;;IAOE,MAAM,GAAG,CAAC,IAAI,CAAC,SAAT,CAAmB;MAAE,IAAA,EAAM;IAAR,CAAnB,EAAqC,MAAA,QAAA,CAAE,IAAF,CAAA;AAC7C,UAAA,CAAA,EAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA;MAAI,MAAA,GAAS,EAAE,CAAC,iBAAH,CAAqB,IAAI,CAAC,IAA1B,EAAgC;QAAE,QAAA,EAAU;MAAZ,CAAhC;MACT,KAAA,CAAM,IAAI,CAAC,IAAX,EADJ;;MAGI,CAAC,CAAC,IAAF,CAAO,MAAP;MACA,CAAC,CAAC,IAAF,CAAO,QAAA,CAAE,CAAF,CAAA;eAAS,IAAA,CAAK,QAAL,EAAe,GAAA,CAAI,CAAJ,CAAf;MAAT,CAAP;MACA,CAAC,CAAC,IAAF,CAAO,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;eAAe,IAAA,CAAK,MAAM,CAAC,IAAP,CAAY,GAAA,CAAI,CAAJ,CAAZ,CAAL;MAAf,CAAP;MACA,CAAC,CAAC,IAAF,CAAO,QAAA,CAAE,CAAF,CAAA;eAAS,IAAA,CAAK,QAAL,EAAe,GAAA,CAAI,CAAJ,CAAf;MAAT,CAAP;MACA,CAAC,CAAC,IAAF,CAAO,MAAP,EAPJ;;MASI,OAAA,GAAgB;;AAAE;QAAA,KAAA,wCAAA;;uBAAA,GAAA,CAAI,CAAJ;QAAA,CAAA;;UAAF,CAAyB,CAAC,IAA1B,CAA+B,EAA/B;MAChB,MAAA,GAAgB,CAAA,MAAM,CAAC,CAAC,GAAF,CAAA,CAAN;MAChB,MAAA,GAAgB,MAAM,CAAC,IAAP,CAAY,EAAZ;MAChB,YAAA,GAAgB,EAAE,CAAC,YAAH,CAAgB,IAAI,CAAC,IAArB,EAA2B;QAAE,QAAA,EAAU;MAAZ,CAA3B;;QAChB,CAAC,CAAE,EAAH,CAAM,MAAN,EAAoB,OAApB;;;QACA,CAAC,CAAE,EAAH,CAAM,YAAN,EAAoB,OAApB;;MACA,IAAA,CAAK,QAAL,EAAe,GAAA,CAAI,OAAJ,CAAf;MACA,IAAA,CAAK,QAAL,EAAe,GAAA,CAAI,MAAJ,CAAf;aACA,IAAA,CAAK,QAAL,EAAe,GAAA,CAAI,YAAJ,CAAf;IAlByC,CAArC;wCAmBN;EA3B6B,EArI/B;;;EAoKA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA;;;;;aAKhC,IAAC,CAAA,4BAAD,CAAA;IALgC,CAAA,IAAlC;;;EApKA;;;;;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/TESTS/STREAMS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@can_use_readstream_as_source = ( T, done ) ->\n  # T?.halt_on_error()\n  PATH                  = require 'path'\n  FS                    = require 'fs'\n  GUY                   = require '../../../apps/guy'\n  { Pipeline,           \\\n    Async_pipeline,     \\\n    transforms: TF }    = require '../../../apps/moonriver'\n  FS                    = require 'node:fs'\n  path                  = PATH.join __dirname, '../../../assets/short-proposal.mkts.md'\n  get_source            = -> FS.createReadStream path #, { encoding: 'utf-8', }\n  #.......................................................................................................\n  matcher = do =>\n    count     = 0\n    _matcher  = []\n    for line from GUY.fs.walk_lines path\n      count++\n      continue if count > 5\n      info count, rpr line\n      _matcher.push line\n    return _matcher\n  #.......................................................................................................\n  result = await do =>\n    p = new Async_pipeline()\n    debug '^34-2^', p\n    p.push get_source()\n    # p.push 'rtethg'\n    p.push TF.$split_lines()\n    p.push TF.$limit 5\n    p.push show = ( d ) -> urge '^34-3^', rpr d\n    help '^34-3^', p\n    return await p.run()\n  #.........................................................................................................\n  T?.eq result, matcher\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@can_use_writestream_as_target_1 = ( T, done ) ->\n  # T?.halt_on_error()\n  FS                    = require 'node:fs'\n  GUY                   = require '../../../apps/guy'\n  { Async_pipeline\n    $               }   = require '../../../apps/moonriver'\n  last                  = Symbol 'last'\n  source                = \"ファイルに書きたいテキストです。\"\n  p                     = new Async_pipeline()\n  #.........................................................................................................\n  await GUY.temp.with_file { keep: false, }, ( temp ) ->\n    output = FS.createWriteStream temp.path, { encoding: 'utf-8', }\n    debug temp.path\n    #.......................................................................................................\n    p.push source\n    #.......................................................................................................\n    p.push ( d ) ->\n      await new Promise ( resolve ) ->\n        output.write d, ->\n          # info '^342^', output.bytesWritten\n          resolve()\n    #.......................................................................................................\n    p.push $ { last }, ( d ) ->\n      return null unless d is last\n      await output.end()\n      await output.close()\n      return null\n    p.push ( d ) -> help '^45-2^', rpr d\n    # p.push output\n    #.......................................................................................................\n    result        = await p.run()\n    result        = ( x.toString() for x in result ).join ''\n    written_text  = FS.readFileSync temp.path, { encoding: 'utf-8', }\n    T?.eq result,       source\n    T?.eq written_text, source\n    info '^45-2^', result\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@can_use_writestream_as_target_3 = ( T, done ) ->\n  # T?.halt_on_error()\n  FS                    = require 'node:fs'\n  GUY                   = require '../../../apps/guy'\n  { Async_pipeline    } = require '../../../apps/moonriver'\n  source                = \"ファイルに書きたいテキストです。\"\n  p                     = new Async_pipeline()\n  #.........................................................................................................\n  await GUY.temp.with_file { keep: false, }, ( temp ) ->\n    output = FS.createWriteStream temp.path, { encoding: 'utf-8', }\n    debug temp.path\n    #.......................................................................................................\n    p.push source\n    p.push ( d ) -> help '^45-2^', rpr d\n    p.push output\n    #.......................................................................................................\n    result        = await p.run()\n    result        = result.join ''\n    written_text  = FS.readFileSync temp.path, { encoding: 'utf-8', }\n    T?.eq result,       source\n    T?.eq written_text, source\n    info '^45-2^', result\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@writestream_accepts_buffers = ( T, done ) ->\n  # T?.halt_on_error()\n  FS                    = require 'node:fs'\n  GUY                   = require '../../../apps/guy'\n  { Async_pipeline    } = require '../../../apps/moonriver'\n  source                = [ 0 .. 9 ]\n  p                     = new Async_pipeline()\n  #.........................................................................................................\n  await GUY.temp.with_file { keep: false, }, ( temp ) ->\n    output = FS.createWriteStream temp.path, { encoding: 'utf-8', }\n    debug temp.path\n    #.......................................................................................................\n    p.push source\n    p.push ( d ) -> help '^47-1^', rpr d\n    p.push ( d, send ) -> send Buffer.from rpr d\n    p.push ( d ) -> urge '^47-2^', rpr d\n    p.push output\n    #.......................................................................................................\n    matcher       = ( rpr d for d in source ).join ''\n    result        = await p.run()\n    result        = result.join ''\n    written_text  = FS.readFileSync temp.path, { encoding: 'utf-8', }\n    T?.eq result,       matcher\n    T?.eq written_text, matcher\n    info '^47-3^', rpr matcher\n    info '^47-4^', rpr result\n    info '^47-5^', rpr written_text\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @window_transform()\n  # await @can_use_readstream_as_source()\n  # @can_use_writestream_as_target_1()\n  # test @can_use_writestream_as_target_1\n  @can_use_readstream_as_source()\n  # test @can_use_readstream_as_source\n  # await @can_use_writestream_as_target_2()\n  # @can_use_writestream_as_target_3()\n  # await @writestream_accepts_buffers()\n  # await test @writestream_accepts_buffers\n  # test @\n\n"
  ]
}