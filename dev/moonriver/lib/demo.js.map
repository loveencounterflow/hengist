{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MINIMAL'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nGUY                       = require 'guy'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate }              = types\n{ Moonriver }             = require '../../../apps/moonriver'\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  #.........................................................................................................\n  $source_A = ( a_list ) ->\n    return source = ( d, send ) ->\n      send d\n      for e in a_list\n        help '^source A^', e if trace\n        send e\n      send.over()\n      return null\n  #.........................................................................................................\n  $source_B = ( a_list ) ->\n    last_idx  = a_list.length - 1\n    idx       = -1\n    return source = ( d, send ) ->\n      send d\n      idx++\n      if idx > last_idx\n        idx = -1\n        return send.over()\n      help '^source B^', a_list[ idx ] if trace\n      send a_list[ idx ]\n      return null\n  #.........................................................................................................\n  $addsome = ->\n    return addsome = ( d, send ) ->\n      help '^addsome^', d if trace\n      return send ( rpr d ) + ' * 100 + 1' unless isa.float d\n      send d * 100 + 1\n      return null\n  #.........................................................................................................\n  $embellish = ->\n    return embellish = ( d, send ) ->\n      help '^embellish^', d if trace\n      send \"*#{rpr d}*\"\n      return null\n  #.........................................................................................................\n  $show = ->\n    return show = ( d, send ) ->\n      help '^show^', d if trace\n      info d\n      send d\n      return null\n  #.........................................................................................................\n  $generator = ->\n    return ->\n      yield 22\n      yield 33\n      return null\n  #.........................................................................................................\n  $add_call_count = ->\n    return ( d, send ) ->\n      urge '^449^', send.call_count, d\n      send if isa.float then send.call_count * 10_000 + d else d\n  #.........................................................................................................\n  pipeline  = []\n  # pipeline.push $source_A [ 1, 2, 3, ]\n  # pipeline.push $source_B [ 1, 2, ]\n  pipeline.push [ 1, 2, ]\n  pipeline.push [ 'A', 'B', ]\n  pipeline.push [ 'C', 'D', 'E', ].values()\n  pipeline.push ( new Map [ [ 'a', 42, ], ] ).entries()\n  pipeline.push $generator()\n  pipeline.push $add_call_count()\n  pipeline.push $addsome()\n  pipeline.push $embellish()\n  pipeline.push $show()\n  trace = false\n  drive = ( mode ) ->\n    mr = new Moonriver pipeline\n    for _ in [ 1, 2, ]\n      unless mr.can_repeat()\n        warn \"not repeatable\"\n        break\n      whisper '————————————————————————————————————————'\n      mr.drive { mode, }\n  drive 'breadth'\n  drive 'depth'\n  return null\n\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  demo()\n\n\n\n"
  ]
}