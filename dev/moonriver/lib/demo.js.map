{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MINIMAL'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nGUY                       = require 'guy'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate }              = types\n{ Moonriver }             = require '../../../apps/moonriver'\n{ $ }                     = Moonriver\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  #.........................................................................................................\n  $source_A = ( a_list ) ->\n    return source = ( d, send ) ->\n      send d\n      for e in a_list\n        help '^source A^', e if trace\n        send e\n      send.over()\n      return null\n  #.........................................................................................................\n  $source_B = ( a_list ) ->\n    last_idx  = a_list.length - 1\n    idx       = -1\n    return source = ( d, send ) ->\n      send d\n      idx++\n      if idx > last_idx\n        idx = -1\n        return send.over()\n      help '^source B^', a_list[ idx ] if trace\n      send a_list[ idx ]\n      return null\n  #.........................................................................................................\n  $addsome = ->\n    return addsome = ( d, send ) ->\n      help '^addsome^', d if trace\n      return send ( rpr d ) + ' * 100 + 1' unless isa.float d\n      send d * 100 + 1\n      return null\n  #.........................................................................................................\n  $embellish = ->\n    return embellish = ( d, send ) ->\n      help '^embellish^', d if trace\n      send \"*#{rpr d}*\"\n      return null\n  #.........................................................................................................\n  $show = ->\n    return show = ( d, send ) ->\n      help '^show^', d if trace\n      info d\n      send d\n      return null\n  #.........................................................................................................\n  $generator = ->\n    return ->\n      yield 22\n      yield 33\n      return null\n  #.........................................................................................................\n  $add_call_count = ->\n    return ( d, send ) ->\n      urge '^449^', send.call_count, d\n      send if isa.float then send.call_count * 10_000 + d else d\n  #.........................................................................................................\n  pipeline  = []\n  # pipeline.push $source_A [ 1, 2, 3, ]\n  # pipeline.push $source_B [ 1, 2, ]\n  pipeline.push [ 1, 2, ]\n  pipeline.push [ 'A', 'B', ]\n  pipeline.push [ 'C', 'D', 'E', ].values()\n  pipeline.push ( new Map [ [ 'a', 42, ], ] ).entries()\n  pipeline.push $generator()\n  pipeline.push $add_call_count()\n  pipeline.push $addsome()\n  pipeline.push $embellish()\n  pipeline.push $show()\n  trace = false\n  drive = ( mode ) ->\n    mr = new Moonriver pipeline\n    for _ in [ 1, 2, ]\n      unless mr.can_repeat()\n        warn \"not repeatable\"\n        break\n      whisper '————————————————————————————————————————'\n      mr.drive { mode, }\n  drive 'breadth'\n  drive 'depth'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_2 = ->\n  collector = []\n  mr1       = new Moonriver()\n  mr2       = new Moonriver()\n  #.........................................................................................................\n  mr1.push [ 1, 5, ]\n  mr1.push [ 2, 6, ]\n  mr1.push [ 3, 7, 9, ]\n  mr1.push ( d, send ) ->\n    send 'abcdefghi'[ d - 1 ]\n    send d\n  mr1.push [ 4, 8, ]\n  # mr1.push ( d ) -> yield e for e in Array.from 'abc'\n  # mr1.push show      = ( d ) -> help CND.reverse '^332-1^', d\n  mr1.push show     = ( d ) -> help CND.reverse \" #{rpr d} \"\n  mr1.push collect  = ( d ) -> collector.push d\n  # mr1.push tee      = ( d, send ) -> mr2.send d; send d\n  # mr1.push multiply = ( d, send ) -> send d * 100\n  # mr1.push tee      = ( d, send ) -> mr2.send d; send d\n  # mr1.push show     = ( d ) -> urge CND.reverse '^332-2^', d\n  # #.........................................................................................................\n  # mr2.push add      = ( d, send ) -> send d + 300\n  # mr2.push show     = ( d ) -> info CND.reverse '^332-3^', d\n  # #.........................................................................................................\n  # mr1.drive()\n  ### can send additional inputs: ###\n  help '^343-1^', mr1\n  help '^343-2^', mr2\n  #.........................................................................................................\n  mr1.drive { mode: 'depth', }\n  urge '^343-3^', ( d.toString() for d in collector ).join ' '\n  collector.length = 0\n  mr1.drive { mode: 'breadth', }\n  urge '^343-3^', ( d.toString() for d in collector ).join ' '\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_3 = ->\n  collector = []\n  mr1       = new Moonriver()\n  mr2       = new Moonriver()\n  #.........................................................................................................\n  mr1.push [ 1, 2, 3, ]\n  mr1.push ( d, send ) ->\n    # send d\n    send d + 10\n    send d + 100\n  #.........................................................................................................\n  mr1.push show = ( d ) -> whisper CND.reverse \" #{rpr d} \"\n  mr1.push ( d, send ) ->\n    send d\n    send d + 20\n  #.........................................................................................................\n  mr1.push show = ( d ) -> warn CND.reverse \" #{rpr d} \"\n  mr1.push ( d, send ) ->\n    send d\n    send d + 30\n  #.........................................................................................................\n  mr1.push show = ( d ) -> help CND.reverse \" #{rpr d} \"\n  mr1.push collect  = ( d ) -> collector.push d\n  #.........................................................................................................\n  mr1.drive { mode: 'depth', }\n  urge '^343-3^', ( d.toString() for d in collector ).join ' '\n  collector.length = 0\n  mr1.drive { mode: 'breadth', }\n  urge '^343-3^', ( d.toString() for d in collector ).join ' '\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_4 = ->\n  collector = []\n  mr1       = new Moonriver()\n  mr2       = new Moonriver()\n  fas_idx   = 0\n  #.........................................................................................................\n  $function_as_source = ->\n    values  = Array.from 'abc'\n    return fas = ( d, send ) ->\n      # debug '^3439^', fas_idx, d\n      send d\n      if ( e = values[ fas_idx ] )? then  send e\n      else                                send.over()\n      fas_idx++\n      return null\n  #.........................................................................................................\n  # mr1.push $ { is_source: true, }, $function_as_source()\n  # mr1.push show = ( d ) -> help CND.gold CND.reverse \" #{rpr d} \"\n  mr1.push [ 1, 4, 7, ]\n  # # mr1.push show = ( d ) -> help CND.blue CND.reverse \" #{rpr d} \"\n  mr1.push [ 2, 5, 8, ]\n  # # mr1.push show = ( d ) -> help CND.lime CND.reverse \" #{rpr d} \"\n  mr1.push $ { once_after_last: true, }, oal = ( send ) ->\n    send 10\n    send 11\n    send 12\n  mr1.push [ 3, 6, 9, ]\n  mr1.push show = ( d ) -> help CND.grey CND.reverse \" #{rpr d} \"\n  #.........................................................................................................\n  mr1.push collect  = ( d ) -> collector.push d\n  #.........................................................................................................\n  urge '^343-5^', mr1\n  mr1.drive { mode: 'depth', }\n  urge '^343-3^', ( d.toString() for d in collector ).join ' '\n  collector.length = 0; fas_idx = 0; whisper '-----------------------------------'\n  mr1.drive { mode: 'breadth', }\n  urge '^343-3^', ( d.toString() for d in collector ).join ' '\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # demo()\n  # demo_2()\n  # demo_3()\n  demo_4()\n\n"
  ]
}