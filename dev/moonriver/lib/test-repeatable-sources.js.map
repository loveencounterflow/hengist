{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-repeatable-sources.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MOONRIVER/TESTS/REPEATABLE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@can_use_function_without_arguments_as_source = ( T, done ) ->\n  # T?.halt_on_error()\n  GUY             = require '../../../apps/guy'\n  { Pipeline\n    signals     } = require '../../../apps/moonriver'\n  #.........................................................................................................\n  p = new Pipeline()\n  p.push -> 'abcdef'\n  p.push extra    = ( d, send ) -> send \"*#{d}*\"\n  p.push show     = ( d ) -> whisper '^98-1^', d\n  #.........................................................................................................\n  urge '^98-2^', result_1 = p.run()\n  urge '^98-3^', result_2 = p.run()\n  T?.eq result_1, result_2\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@run_and_walk_are_repeatable = ( T, done ) ->\n  # T?.halt_on_error()\n  GUY             = require '../../../apps/guy'\n  { Pipeline\n    $\n    signals     } = require '../../../apps/moonriver'\n  # first           = Symbol 'first'\n  # last            = Symbol 'last'\n  #.........................................................................................................\n  p               = new Pipeline()\n  source          = -> yield n for n from [ 1 .. 5 ]\n  # source          = ( -> yield n for n from [ 1 .. 5 ] )()\n  # p.push source\n  p.push -> source\n  # p.push insert   = ( d, send ) -> send d; send d.toUpperCase() if isa.text d\n  p.push extra    = ( d, send ) -> send \"*#{d}*\"\n  p.push show     = ( d ) -> whisper '^54-1^', d\n  #.........................................................................................................\n  T?.eq ( type_of signals       ), 'undefined'\n  T?.eq ( type_of p.reset       ), 'undefined'\n  #.........................................................................................................\n  do ->\n    result_1 = p.run()\n    result_2 = p.run()\n    info '^54-2^', result_1\n    info '^54-3^', result_2\n    T?.eq result_1, result_2\n    return null\n  #.........................................................................................................\n  do ->\n    result_1 = [ p.walk()..., ]\n    result_2 = [ p.walk()..., ]\n    info '^54-4^', result_1\n    info '^54-5^', result_2\n    T?.eq result_1, result_2\n    return null\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  @can_use_function_without_arguments_as_source()\n  test @can_use_function_without_arguments_as_source\n  # @run_and_walk_are_repeatable()\n  # test @run_and_walk_are_repeatable\n  # test @\n\n"
  ]
}