{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-multi-pipeline-processing.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/TESTS/MULTI-PIPELINE-PROCESSING'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate              } = types\nguy                       = require '../../../apps/guy'\nH                         = require '../../../lib/helpers'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_named_pipelines = ( T, done ) ->\n  { Pipeline, \\\n    $,              } = require '../../../apps/moonriver'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  get_pipelines = ->\n    p_1                 = new Pipeline()\n    p_2                 = new Pipeline()\n    p_1.push [ 0 .. 5 ]\n    p_1.push $ { first, last, }, ( d, send ) -> send d\n    p_1.push show = ( d ) -> whisper 'input', d\n    p_1.push do ->\n      count = 0\n      return ( d, send ) ->\n        count++\n        if count %% 2 is 0 then return p_2.send d\n        send d\n    p_1.push show = ( d ) -> urge 'p_1', d\n    p_2.push show = ( d ) -> warn 'p_2', d\n    return { p_1, p_2, }\n  #.........................................................................................................\n  do ->\n    { p_1, p_2, } = get_pipelines()\n    result        = { even: [], odd: [], }\n    for d from Pipeline.walk_named_pipelines { odd: p_1, even: p_2, }\n      info d\n      result[ d.name ].push d.data\n    T?.eq result, { even: [ 0, 2, 4, last ], odd: [ first, 1, 3, 5 ] }\n    return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@async_walk_named_pipelines = ( T, done ) ->\n  { Async_pipeline, \\\n    $,              } = require '../../../apps/moonriver'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  { defer }           = GUY.async\n  #.........................................................................................................\n  get_pipelines = ->\n    p_1                 = new Async_pipeline { protocol: true, }\n    p_2                 = new Async_pipeline { protocol: true, }\n    p_1.push [ 0 .. 5 ]\n    p_1.push show = ( d ) -> whisper 'input', d\n    p_1.push $ { first, last, }, firstlast = ( d, send ) -> await defer -> send d\n    p_1.push show = ( d ) -> whisper 'input', d\n    p_1.push do ->\n      count = 0\n      return divert = ( d, send ) ->\n        await defer ->\n          count++\n          if count %% 2 is 0 then return p_2.send d\n          send d\n    p_1.push show = ( d ) -> urge 'p_1', d\n    p_2.push show = ( d ) -> warn 'p_2', d\n    return { p_1, p_2, }\n  #.........................................................................................................\n  await do ->\n    { p_1, p_2, } = get_pipelines()\n    result        = { even: [], odd: [], }\n    for await d from Async_pipeline.walk_named_pipelines { odd: p_1, even: p_2, }\n      info d\n      result[ d.name ].push d.data\n    T?.eq result, { even: [ 0, 2, 4, last ], odd: [ first, 1, 3, 5 ] }\n    H.tabulate \"async_walk_named_pipeline 1\", p_1.journal\n    H.tabulate \"async_walk_named_pipeline 2\", p_2.journal\n    return null\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@diverted_pipelines = ( T, done ) ->\n  { Pipeline, \\\n    $,              } = require '../../../apps/moonriver'\n  first               = Symbol 'first'\n  last                = Symbol 'last'\n  #.........................................................................................................\n  get_pipelines = ->\n    p_1                 = new Pipeline { protocol: true, }\n    p_2                 = new Pipeline { protocol: true, }\n    #.......................................................................................................\n    p_1.push [ 0 .. 5 ]\n    p_1.push $ { first, last, }, firstlast = ( d, send ) -> send d\n    p_1.push diverter = ( d, send ) -> p_2.send d\n    p_1.push receiver = ( d, send ) -> send d\n    p_1.push show     = ( d ) -> whisper 'input', d\n    #.......................................................................................................\n    p_2.push square   = ( d, send ) -> send if isa.symbol d then d else d ** 2\n    p_2.push diverter = ( d, send ) -> p_1.segments[ 3 ].send d\n    #.......................................................................................................\n    return { p_1, p_2, }\n  #.........................................................................................................\n  do ->\n    { p_1, p_2, } = get_pipelines()\n    result        = { p_1: [], p_2: [], }\n    info '^77-1^', p_1\n    info '^77-1^', p_2\n    for d from Pipeline.walk_named_pipelines { p_1, p_2, }\n      info d\n      result[ d.name ].push d.data\n    T?.eq result, { p_1: [ first, 0, 1, 4, 9, 16, 25, last ], p_2: [] }\n    H.tabulate \"diverted_pipeline 1\", p_1.journal\n    H.tabulate \"diverted_pipeline 2\", p_2.journal\n    return null\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # @walk_named_pipelines_1()\n  # await @async_walk_named_pipelines()\n  test @async_walk_named_pipelines\n  # test @walk_named_pipelines\n  # @diverted_pipelines()\n  # test @diverted_pipelines\n  # await test @\n"
  ]
}