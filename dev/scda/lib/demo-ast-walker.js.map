{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-ast-walker.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SCDA'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\n{ Dba }                   = require '../../../apps/icql-dba'\nReadlines                 = require 'n-readlines'\nglob                      = require 'glob'\n{ freeze\n  lets }                  = require 'letsfreezethat'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate }              = types.export()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_ast_walker = ->\n  CS = require 'coffeescript'\n  xrpr = ( x ) -> ( rpr x )[ .. 100 ]\n  #-----------------------------------------------------------------------------------------------------------\n  walk_ast = ( tree ) ->\n    whisper '^38^', '-'.repeat 108\n    urge '^38^', tree.children, CND.steel xrpr tree\n    switch tree_type = type_of tree\n      #.....................................................................................................\n      when 'root'\n        yield { name: 'root', }\n        yield from walk_ast tree.body\n      #.....................................................................................................\n      when 'block'\n        yield { name: 'block', }\n        for childname in tree.children\n          debug '^39^', childname, xrpr tree[ childname ]\n          yield from walk_ast tree[ childname ]\n      #.....................................................................................................\n      when 'list'\n        for element in tree\n          yield from walk_ast element\n      #.....................................................................................................\n      else\n        whisper \"^54^ unknown tree_type: #{rpr tree_type}\"\n    #.......................................................................................................\n    return null\n    # #.......................................................................................................\n    # whisper '^35345-1^', 'type:', type_of tree\n    # # whisper '^35345-2^', 'type:', type_of tree\n    # for childname in tree.children\n    #   whisper '^35345-3^', childname\n    #   switch childname\n    #     when 'variable'\n    #       debug '^6456-1^', 'variable:                     ', xrpr tree.variable\n    #       debug '^6456-1^', 'variable.children:            ', xrpr tree.variable.children\n    #       debug '^6456-1^', 'variable.base:                ', xrpr tree.variable.base\n    #       debug '^6456-1^', 'variable.base.children:       ', xrpr tree.variable.base.children\n    #       debug '^6456-1^', 'variable.properties:          ', xrpr tree.variable.properties\n    #       debug '^6456-1^', 'variable.properties.children: ', xrpr tree.variable.properties.children\n    #       null\n    #     when 'value'\n    #       debug '^6456-1^', 'value:                        ', xrpr tree.value\n    #       debug '^6456-1^', 'value.children:               ', xrpr tree.value.children\n    #       debug '^6456-1^', 'value.params:                 ', xrpr tree.value.params\n    #       debug '^6456-1^', 'value.params.children:        ', xrpr tree.value.params.children\n    #       debug '^6456-1^', 'value.body:                   ', xrpr tree.value.body\n    #       debug '^6456-1^', 'value.body.children:          ', xrpr tree.value.body.children\n    #       null\n    #     when 'expressions'\n    #       for node in tree.expressions\n    #         whisper '^35345-4^', 'type:', type_of node\n    #         delete node.locationData\n    #         info  '^6456-2^', node.children\n    #         # switch node_type = type_of node\n    #         #   when 'assign'\n    #         #     null\n    #         #   when 'variable'\n    #         #     null\n    #         #   when 'value'\n    #         #     null\n    #         #   else throw new Error \"unknown node type #{node_type}\"\n    #         walk_ast node\n    #     else throw new Error \"unknown node type #{rpr childname}\"\n    # return null\n  #.........................................................................................................\n  source = \"\"\"\n    @foo = ( x ) -> x * x\n    bar = -> 42\n    \"\"\"\n  for d from walk_ast CS.nodes source\n    info '^54^', d\n  #.........................................................................................................\n  return null\n\n############################################################################################################\nif module is require.main then do =>\n  @demo_ast_walker()\n"
  ]
}