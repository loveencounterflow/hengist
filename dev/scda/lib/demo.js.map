{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SCDA'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\n{ Dba }                   = require '../../../apps/icql-dba'\nReadlines                 = require 'n-readlines'\nglob                      = require 'glob'\n{ freeze\n  lets }                  = require 'letsfreezethat'\ntypes                     = require '../../../apps/scda/lib/types'\n{ isa\n  type_of\n  validate }              = types.export()\n{ Tokenwalker }           = require '../../../apps/scda/lib/tokenwalker'\n{ Scda }                  = require '../../../apps/scda'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_scda = ->\n  schema              = 'scda'\n  prefix              = PATH.resolve PATH.join __dirname, '../../../../icql-dba/src'\n  # prefix            = PATH.resolve PATH.join __dirname, '../src'\n  ignore_names        = [\n    'rpr'\n    'get_logger'\n    'require'\n    'isa'\n    'type_of'\n    'text'\n    'list'\n    'nonempty_text'\n    'object'\n    'cardinal'\n    'bind'\n    ]\n  ignore_spaths       = [ 'types.coffee', 'common.coffee', 'errors.coffee', ]\n  dependencies        = [ 'import-export-mixin.coffee', 'main.coffee', ]\n  scda                = new Scda { schema, prefix, ignore_names, ignore_spaths, dependencies, verbose: false, }\n  # info '^334^', scda\n  #.........................................................................................................\n  scda.add_sources()\n  # console.table [ ( scda.dba.query \"select * from scda.paths order by path;\" )..., ]\n  # console.table [ ( scda.dba.query \"select * from scda.occurrences where role = 'call' order by name, spath, lnr, cnr;\" )..., ]\n  # console.table [ ( scda.dba.query \"select * from scda.occurrences where role = 'def' order by name, spath, lnr, cnr;\" )..., ]\n  console.table [ ( scda.dba.query \"select * from scda.dependencies;\" )..., ]\n  sql = \"\"\"\n    select\n        t1.spath      as def_spath,\n        t1.lnr        as def_lnr,\n        t2.spath      as call_spath,\n        t2.lnr        as call_lnr,\n        -- t1.cnr        as cnr,\n        t1.name       as name\n      from scda.occurrences as t1\n      join scda.occurrences as t2 on ( t1.name = t2.name )\n      where true\n        and ( t1.role = 'def' )\n        and ( t2.role = 'call' )\n        and ( t1.spath != t2.spath )\n        and not exists ( select 1 from scda.dependencies as d\n          where true\n            and d.provider_spath  = t1.spath\n            and d.consumer_spath  = t2.spath\n          limit 1 )\n      order by 1, 2, 3, 4;\n    \"\"\"\n  console.table [ ( scda.dba.query sql )..., ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_tokenwalker = ->\n  source = \"\"\"\n    @foo = -> 42\n    @foo = f = -> 42\n    @foo = => 42\n    @foo = () -> 42\n    @foo = () => 42\n    @foo = ( x ) -> x * x\n    @foo = ( x ) => x * x\n    @foo = ( x = 42 ) => x * x\n    @foo = ( x = f 42 ) => x * x\n    @foo = ( x, y ) -> x * y\n    @foo = ( x, f = ( a ) -> a ) -> f x\n    @foo()\n    @foo value\n    @foo value, value, value\n    @foo value, @bar value\n    @foo value, ( @bar value ), value\n    @foo value, ( blah.bar value ), value\n    foo = -> 42\n    foo = f = -> 42\n    foo = => 42\n    foo = () -> 42\n    foo = () => 42\n    foo = ( x ) -> x * x\n    foo = ( x ) => x * x\n    foo = ( x = 42 ) => x * x\n    foo = ( x = f 42 ) => x * x\n    foo = ( x, y ) -> x * y\n    foo = ( x, f = ( a ) -> a ) -> f x\n    foo()\n    foo value\n    foo value, value, value\n    foo value, @bar value\n    foo value, ( @bar value ), value\n    foo value, ( blah.bar value ), value\n    @foo = -> 42\n    foo value\n    foo value, value, value; bar = ->\n    some.object.f = -> x\n    some.object.f x\n    foo: ->\n    foo: ( x ) ->\n    \"\"\"\n  tokenwalker = new Tokenwalker { lnr: 0, source, verbose: true, }\n  # debug '^4433^', tokenwalker\n  for d from tokenwalker.walk()\n    # whisper '^333443^', tokenwalker\n    info    '^333443^', d\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  @demo_scda()\n  # @demo_tokenwalker()\n\n\n\n"
  ]
}