{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'KASEKI/TESTS/BASIC'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nH                         = require '../../../lib/helpers'\nFS                        = require 'node:fs'\n\n#-----------------------------------------------------------------------------------------------------------\n@kaseki_zero = ( T, done ) ->\n  { Kaseki } = require '../../../apps/kaseki'\n  GUY.temp.with_directory ({ path: repo_home, }) ->\n    GUY.temp.with_directory ({ path: work_home, }) ->\n      debug '^98-1^', rpr repo_home\n      debug '^98-2^', rpr work_home\n      repo_path     = PATH.join repo_home,     'kaseki-demo.fossil'\n      work_path     = PATH.join work_home\n      ksk           = new Kaseki { repo_path, work_path, }\n      info  '^98-3^', rpr ksk.get_fossil_version_text()\n      # 'This is fossil version 2.21 [3e95d94583] 2022-11-30 11:44:26 UTC'\n      T?.ok /^This is fossil version .*UTC$/.test ksk.get_fossil_version_text()\n      #.....................................................................................................\n      T?.eq ksk.init(), null\n      T?.eq ksk.init(), null\n      try ksk.init { if_exists: 'error', } catch error then warn GUY.trm.reverse error.message\n      T?.throws /when trying to `init` rep.* an error occurred.*file already exists/, -> ksk.init { if_exists: 'error', }\n      #.....................................................................................................\n      urge  '^98-6^', ksk.open()\n      urge  '^98-7^', ksk.list_file_names()\n      urge  '^98-8^', ksk.list_file_paths()\n      urge  '^98-9^', ksk.ls()\n      #.....................................................................................................\n      readme_path = PATH.join work_home, 'README.md'\n      FS.writeFileSync readme_path, \"\"\"\n        # MyProject\n\n        A fancy text explaing MyProject.\n        \"\"\"\n      help  '^98-10^', rpr ksk._spawn 'fossil', 'changes'\n      urge  '^98-11^', ksk.add readme_path\n      urge  '^98-12^', ksk.commit \"add README.md\"\n      urge  '^98-13^', ksk.list_file_names()\n      #.....................................................................................................\n      FS.appendFileSync readme_path, \"\\n\\nhelo\"\n      strange_name = '  strange.txt'\n      FS.appendFileSync ( PATH.join work_path, strange_name ), \"\\n\\nhelo\"\n      help  '^98-14^', rpr ksk._spawn 'fossil', 'changes'\n      help  '^98-15^', rpr ksk._spawn 'fossil', 'extras'\n      help  '^98-16^', rpr ksk.add strange_name\n      urge  '^98-17^', ksk.commit \"add file with strange name\"\n      help  '^98-18^', rpr ksk.change_texts()\n      #.....................................................................................................\n      FS.appendFileSync ( PATH.join work_path, strange_name ), \"\\n\\nhelo again\"\n      help  '^98-19^', rpr ksk.change_texts()\n      help  '^98-19^', rpr ksk.list_of_changes()\n      help  '^98-19^', rpr ksk.has_changes()\n      help  '^98-19^', rpr ksk.changes_by_file()\n      #.....................................................................................................\n      urge  '^98-22^', ksk._status()\n      help  '^98-23^', ksk.status()\n      info  '^98-24^', ( k.padEnd 20 ), v for k, v of ksk.status()\n      help  '^98-25^', ksk.list_file_names()\n      urge  '^98-26^', FS.readdirSync repo_home\n      urge  '^98-27^', FS.readdirSync work_home\n      # urge  '^98-28^', FS.readFileSync ( PATH.join work_home, '.fslckout' ), { encoding: 'utf-8', }\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@kaseki_create_doc_workflow_for_consuming_app = ( T, done ) ->\n  ###\n\n  An app (e.g. DataMill, the 'client' app) that uses KaSeki to provide a single-file format that is a\n  container of multiple individual files (text souirces, images, stylesheets &c) would have to tell KaSeki\n\n  * the location of the 'repo' (i.e. the single container of any number of versioned document sources);\n    let's call it `my-first-doc.datamill`, and\n\n  * the location where to unpack the repo; let's call it the 'working path'.\n\n  There are two interesting ways to organize these two locations: one approach is the one advocated by []()\n\n\n  ###\n\n  ### NOTE fossil apparently passes the 'mirror test' i.e. when the repo is present in the checkout folder\n      it will *not* be listed by the `fossil extras` command, although a copy of it will (which seems to\n      indicate that fossil tests not against a file not being a fossil repo but specifically the repo that\n      is connected to the current project) ###\n\n  #.........................................................................................................\n  { Kaseki } = require '../../../apps/kaseki'\n  GUY.temp.with_directory ({ path: work_path, }) ->\n      debug '^99-1^', rpr work_path\n      repo_path     = work_path\n      ksk           = new Kaseki { work_path, repo_path, }\n      info  '^99-3^', rpr ksk.get_fossil_version_text()\n      urge  '^99-26^', FS.readdirSync repo_path\n      urge  '^99-27^', FS.readdirSync work_path\n  #.........................................................................................................\n  done?()\n\n\n############################################################################################################\nif module is require.main then do =>\n  @kaseki_zero()\n  # @kaseki_create_doc_workflow_for_consuming_app()\n  return null\n"
  ]
}