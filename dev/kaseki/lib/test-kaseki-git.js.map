{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-kaseki-git.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'KASEKI/TESTS/BASIC'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nH                         = require '../../../lib/helpers'\nFS                        = require 'node:fs'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@kaseki_git_status_sb = ( T, done ) ->\n  { Git } = require '../../../apps/kaseki'\n  #.........................................................................................................\n  GUY.temp.with_directory ({ path: remote_path, }) ->\n    remote = new Git { work_path: remote_path, repo_path: remote_path, }\n    remote.ic.spawn 'git', 'init', '--bare'\n    urge '^76-1^', FS.readdirSync remote_path\n    T?.eq ( FS.readdirSync remote_path ), [ 'HEAD', 'branches', 'config', 'description', 'hooks', 'info', 'objects', 'refs' ]\n    # echo '---'; echo remote.ic.spawn 'git', 'branch', '-m', 'master', 'main'\n    echo '---'; echo remote.ic.spawn 'git', 'branch'\n    #.......................................................................................................\n    GUY.temp.with_directory ({ path: work_path, }) ->\n      repo_path     = PATH.join work_path, '.git'\n      debug '^76-2^', { work_path, repo_path, }\n      local         = new Git { work_path, repo_path, }\n      try local._git_status_sb() catch error then warn GUY.trm.reverse error.message\n      local._git_init()\n      FS.writeFileSync ( PATH.join work_path, 'foo.txt', ), \"helo world\"\n      #.....................................................................................................\n      info '^76-3^', local.status()\n      T?.eq local.status(), { local_branch: 'master', remote_branch: null, ahead_count: 0, behind_count: 0, dirty_count: 1 }\n      local._add_and_commit_all \"first!\"\n      local.ic.spawn 'git', 'branch', '-m', 'master', 'main'\n      info '^76-4^', local.status()\n      T?.eq local.status(), { local_branch: 'main', remote_branch: null, ahead_count: 0, behind_count: 0, dirty_count: 0 }\n      #.....................................................................................................\n      local.ic.spawn 'git', 'remote', 'add', 'hoopla', remote_path\n      local.ic.spawn 'git', 'push', '-u', 'hoopla', 'main'\n      #.....................................................................................................\n      info '^76-5^', local.status()\n      T?.eq local.status(), { local_branch: 'main', remote_branch: 'hoopla/main', ahead_count: 0, behind_count: 0, dirty_count: 0 }\n      #.....................................................................................................\n      FS.appendFileSync ( PATH.join work_path, 'foo.txt', ), \"helo world\"\n      info '^76-6^', local.status()\n      T?.eq local.status(), { local_branch: 'main', remote_branch: 'hoopla/main', ahead_count: 0, behind_count: 0, dirty_count: 1 }\n      urge '^76-6^', local.ic.spawn 'git', 'log', \"--pretty=format:'%h%x09%cI%x09%s'\", '--since=\"12 months ago\"'\n      urge '^76-6^', local.log { since: '12 months ago', }\n  #.........................................................................................................\n  done?()\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  @kaseki_git_status_sb()\n  test @kaseki_git_status_sb\n  return null\n\n"
  ]
}