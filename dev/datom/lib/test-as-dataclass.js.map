{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-as-dataclass.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DATOM/TESTS/AS-DATACLASS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\n# PATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  validate }              = types\n\n\n#===========================================================================================================\nclass Datom\n\n  #---------------------------------------------------------------------------------------------------------\n  @declaration:\n    template: null\n\n  #---------------------------------------------------------------------------------------------------------\n  @new_datom: ( x ) -> new Proxy x,\n    #.......................................................................................................\n    get: ( target, key, receiver ) ->\n      Object.freeze target unless Object.isFrozen target\n      return Reflect.get target, key, receiver\n    #.......................................................................................................\n    set: ( target, key, value, receiver ) ->\n      Object.freeze target unless Object.isFrozen target\n      throw new TypeError \"Cannot assign to read only property #{rpr key} of object #{rpr target}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    ### TAINT naive implementation, check for validity ###\n    # debug '^12-1^', [ @constructor.declaration.template, cfg, ]\n    # debug '^12-2^', [ @, ]\n    # debug '^12-3^', [ @constructor, ]\n    # debug '^12-4^', [ new.target, ]\n    # debug '^12-5^', [ new.target.constructor, ]\n    # debug '^12-6^', [ new.target?.constructor?.declaration?.template, ]\n    debug '^12-6^', [ @constructor?.declaration?.template, ]\n    for k, v of { ( @constructor.declaration?.template ? null )..., cfg..., }\n      @[ k ] = v\n    return @constructor.new_datom @\n\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_as_dataclass = ( T, done ) ->\n  # DATOM = new ( require '../../../apps/datom' ).Datom { freeze: false, }\n  # probes_and_matchers = [\n  #   [ [ '^foo' ], { '$fresh': true, '$key': '^foo' }, null ]\n  #   [ [ '^foo', { foo: 'bar' } ], { foo: 'bar', '$fresh': true, '$key': '^foo' }, null ]\n  #   [ [ '^foo', { value: 42 } ], { value: 42, '$fresh': true, '$key': '^foo' }, null ]\n  #   [ [ '^foo', { value: 42 }, { '$fresh': false } ], { value: 42, '$fresh': true, '$key': '^foo' }, null ]\n  #   ]\n  # #.........................................................................................................\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n  #     d = DATOM.new_fresh_datom probe...\n  #     T.ok not Object.isFrozen d\n  #     resolve d\n  #     return null\n  #.........................................................................................................\n  do ->\n    d = new Datom()\n    info '^12-7^', ( Object.isFrozen d )\n    T?.eq ( Object.isFrozen d ), false\n    try d.foo = 42 catch error then warn GUY.trm.reverse error.message\n    T?.eq ( Object.isFrozen d ), true\n    T?.throws /.*/, -> d.foo = 42\n    return null\n  #.........................................................................................................\n  do ->\n    class E extends Datom\n\n      #-----------------------------------------------------------------------------------------------------\n      @declaration:\n        template:\n          foo: 41\n          bar: 42\n          baz: 43\n\n      #-----------------------------------------------------------------------------------------------------\n      constructor: ( cfg ) ->\n        # super { template..., cfg..., }\n        super cfg\n        return undefined\n    e = new E()\n    T?.eq ( Object.isFrozen e ), false\n    try e.foo = 42 catch error then warn '^Datom@1^', GUY.trm.reverse error.message\n    T?.throws /.*/, -> e.foo = 42\n    T?.eq ( Object.isFrozen e ), true\n    ### TAINT should use method independent of `inspect` (which could be user-configured?) ###\n    T?.eq ( ( require 'util' ).inspect e ), 'E { foo: 41, bar: 42, baz: 43 }'\n    T?.eq e.foo, 41\n    T?.eq e.bar, 42\n    T?.eq e.baz, 43\n    T?.eq e, { foo: 41, bar: 42, baz: 43, }\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # test @fresh_datom_with_freeze\n  test @datom_as_dataclass\n\n\n"
  ]
}