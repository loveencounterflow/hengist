{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-as-dataclass.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DATOM/TESTS/AS-DATACLASS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\n# PATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  equals\n  validate }              = types\n\n\n#===========================================================================================================\n\n  # DATOM = new ( require '../../../apps/datom' ).Datom { freeze: false, }\n  # probes_and_matchers = [\n  #   [ [ '^foo' ], { '$fresh': true, '$key': '^foo' }, null ]\n  #   [ [ '^foo', { foo: 'bar' } ], { foo: 'bar', '$fresh': true, '$key': '^foo' }, null ]\n  #   [ [ '^foo', { value: 42 } ], { value: 42, '$fresh': true, '$key': '^foo' }, null ]\n  #   [ [ '^foo', { value: 42 }, { '$fresh': false } ], { value: 42, '$fresh': true, '$key': '^foo' }, null ]\n  #   ]\n  # #.........................................................................................................\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n  #     d = DATOM.new_fresh_datom probe...\n  #     T.ok not Object.isFrozen d\n  #     resolve d\n  #     return null\n\n\n#===========================================================================================================\nclass Datom\n\n  #---------------------------------------------------------------------------------------------------------\n  @declaration: null\n\n  #---------------------------------------------------------------------------------------------------------\n  @new_datom: ( x ) -> new Proxy x,\n    #.......................................................................................................\n    get: ( target, key, receiver ) ->\n      Object.freeze target unless Object.isFrozen target\n      return Reflect.get target, key, receiver\n    #.......................................................................................................\n    set: ( target, key, value, receiver ) ->\n      Object.freeze target unless Object.isFrozen target\n      throw new TypeError \"Cannot assign to read only property #{rpr key} of object #{rpr target}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    clasz   = @constructor\n    __types = clasz.types ? new ( require '../../../apps/intertype' ).Intertype()\n    GUY.props.hide @, '__types', __types\n    if ( declaration = clasz.declaration )?\n      @__types.declare[ clasz.name ] declaration\n      @[ k ] = v for k, v of @__types.create[ clasz.name ] cfg\n    return clasz.new_datom @\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_as_dataclass = ( T, done ) ->\n  #.........................................................................................................\n  do ->\n    d = new Datom()\n    info '^12-7^', ( Object.isFrozen d )\n    T?.eq ( Object.isFrozen d ), false\n    try d.foo = 42 catch error then warn GUY.trm.reverse error.message\n    T?.eq ( Object.isFrozen d ), true\n    T?.throws /.*/, -> d.foo = 42\n    return null\n  #.........................................................................................................\n  do ->\n    class Quantity extends Datom\n\n      #-----------------------------------------------------------------------------------------------------\n      @declaration:\n        fields:\n          q:    'float'\n          u:    'nonempty.text'\n        template:\n          q:    0\n          u:    'unit'\n\n      #-----------------------------------------------------------------------------------------------------\n      constructor: ( cfg ) ->\n        # super { template..., cfg..., }\n        super cfg\n        return undefined\n    #.......................................................................................................\n    q = new Quantity()\n    T?.eq ( Object.isFrozen q ), false\n    try q.foo = 42 catch error then warn '^Datom@1^', GUY.trm.reverse error.message\n    T?.throws /.*/, -> q.foo = 42\n    T?.eq ( Object.isFrozen q ), true\n    ### TAINT should use method independent of `inspect` (which could be user-configured?) ###\n    T?.eq ( ( require 'util' ).inspect q ), \"Quantity { q: 0, u: 'unit' }\"\n    T?.eq q.q, 0\n    T?.eq q.u, 'unit'\n    T?.eq q, { q: 0, u: 'unit', }\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_dataclass_automatic_validation = ( T, done ) ->\n  #.........................................................................................................\n  do ->\n    #.......................................................................................................\n    class Quantity extends Datom\n\n      #-----------------------------------------------------------------------------------------------------\n      @declaration:\n        fields:\n          q:    'float'\n          u:    'nonempty.text'\n        template:\n          q:    0\n          u:    'unit'\n\n      # #-----------------------------------------------------------------------------------------------------\n      # constructor: ( cfg ) ->\n      #   # super { template..., cfg..., }\n      #   super cfg\n      #   return undefined\n    #.......................................................................................................\n    T?.eq ( q = new Quantity()                    ), { q: 0, u: 'unit', }\n    T?.eq ( q = new Quantity { q: 0, u: 'unit', } ), { q: 0, u: 'unit', }\n    T?.eq ( q = new Quantity { q: 23, u: 'm', }   ), { q: 23, u: 'm', }\n    T?.throws /not a valid Quantity/, -> q = new Quantity { q: 23, u: '', }\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_dataclass_deep_freezing = ( T, done ) ->\n  #.........................................................................................................\n  class Something extends Datom\n\n    #-------------------------------------------------------------------------------------------------------\n    @declaration:\n      freeze:   'deep'\n      fields:\n        values:   'list.of.integer'\n      template:\n        values:   []\n  #.........................................................................................................\n  do ->\n    T?.eq ( s = new Something()                     ), { values: [], }\n    T?.eq ( s = new Something { values: [ 3, 5, ] } ), { values: [ 3, 5, ], }\n    return null\n  #.........................................................................................................\n  do ->\n    s = new Something { values: [ 3, 5, ] }\n    debug '^23-1^', s\n    T?.eq ( Object.isFrozen s         ), true\n    T?.eq ( Object.isFrozen s.values  ), true\n    try s.values.push 7 catch error then warn '^Datom@1^', GUY.trm.reverse error.message\n    T?.throws /object is not extensible/, -> s.values.push 7\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_dataclass_custom_types_instance = ( T, done ) ->\n  #.........................................................................................................\n  do ->\n    my_types = new ( require '../../../apps/intertype' ).Intertype()\n    my_types.declare.awesome_list isa: 'list.of.integer'\n    #.......................................................................................................\n    class Something extends Datom\n      #-----------------------------------------------------------------------------------------------------\n      @types: my_types\n      @declaration:\n        freeze:   'deep'\n        fields:\n          values:   'awesome_list'\n        template:\n          values:   []\n    #.......................................................................................................\n    s = new Something [ 4, 5, 6, ]\n    T?.eq ( my_types is s.__types ), true\n    return null\n  #.........................................................................................................\n  do ->\n    my_types = new ( require '../../../apps/intertype' ).Intertype()\n    my_types.declare.awesome_list isa: 'list.of.integer'\n    #.......................................................................................................\n    class Something extends Datom\n      #-----------------------------------------------------------------------------------------------------\n      @types: my_types\n      @declaration:\n        freeze:   'deep'\n        fields:\n          values:   'awesome_list'\n        template:\n          values:   []\n    #.......................................................................................................\n    T?.throws /not a valid Something/, -> new Something { values: [ 'wronk', ], }\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n  # test @datom_as_dataclass\n  # test @datom_dataclass_automatic_validation\n\n"
  ]
}