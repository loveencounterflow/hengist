{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-as-dataclass.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;IAAA,oBAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,0BAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC,EAdA;;;EAmBA,IAAA,GAA4B,OAAA,CAAQ,wBAAR,EAnB5B;;;;EAsBA,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,MADF,EAEE,QAFF,CAAA,GAE4B,KAF5B,EAvBA;;;;;;;;;;;;;;;;;;;;EAiDA,IAAC,CAAA,kBAAD,GAAsB,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACtB,QAAA;IAAE,CAAA,CAAE,SAAF,CAAA,GAAgB,OAAA,CAAQ,qBAAR,CAAhB;IAEG,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,CAAA,EAAA;MAAI,CAAA,GAAI,IAAI,SAAJ,CAAA;MACJ,IAAA,CAAK,QAAL,EAAiB,MAAM,CAAC,QAAP,CAAgB,CAAhB,CAAjB;;QACA,CAAC,CAAE,EAAH,CAAQ,MAAM,CAAC,QAAP,CAAgB,CAAhB,CAAR,EAA6B,IAA7B;;AACA;QAAI,CAAC,CAAC,GAAF,GAAQ,GAAZ;OAAe,cAAA;QAAM;QAAW,IAAA,CAAK,GAAG,CAAC,GAAG,CAAC,OAAR,CAAgB,KAAK,CAAC,OAAtB,CAAL,EAAjB;;;QACf,CAAC,CAAE,EAAH,CAAQ,MAAM,CAAC,QAAP,CAAgB,CAAhB,CAAR,EAA6B,IAA7B;;;QACA,CAAC,CAAE,MAAH,CAAU,IAAV,EAAgB,QAAA,CAAA,CAAA;iBAAG,CAAC,CAAC,GAAF,GAAQ;QAAX,CAAhB;;AACA,aAAO;IAPN,CAAA;IASA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,QAAA,EAAA,KAAA,EAAA;MAAU;QAAN,MAAA,SAAA,QAAuB,UAAvB,CAAA;;UAYE,WAAa,CAAE,GAAF,CAAA,EAAA;;iBAEX,CAAM,GAAN;AACA,mBAAO;UAHI;;QAZf;;;QAGE,QAAC,CAAA,WAAD,GACE;UAAA,MAAA,EACE;YAAA,CAAA,EAAM,OAAN;YACA,CAAA,EAAM;UADN,CADF;UAGA,QAAA,EACE;YAAA,CAAA,EAAM,CAAN;YACA,CAAA,EAAM;UADN;QAJF;;;;oBAJR;;MAiBI,CAAA,GAAI,IAAI,QAAJ,CAAA;;QACJ,CAAC,CAAE,EAAH,CAAQ,MAAM,CAAC,QAAP,CAAgB,CAAhB,CAAR,EAA6B,IAA7B;;AACA;QAAI,CAAC,CAAC,GAAF,GAAQ,GAAZ;OAAe,cAAA;QAAM;QAAW,IAAA,CAAK,eAAL,EAAsB,GAAG,CAAC,GAAG,CAAC,OAAR,CAAgB,KAAK,CAAC,OAAtB,CAAtB,EAAjB;;;QACf,CAAC,CAAE,MAAH,CAAU,IAAV,EAAgB,QAAA,CAAA,CAAA;iBAAG,CAAC,CAAC,GAAF,GAAQ;QAAX,CAAhB;;;QACA,CAAC,CAAE,EAAH,CAAQ,MAAM,CAAC,QAAP,CAAgB,CAAhB,CAAR,EAA6B,IAA7B;OArBJ;;;QAuBI,CAAC,CAAE,EAAH,CAAQ,CAAE,OAAA,CAAQ,MAAR,CAAF,CAAkB,CAAC,OAAnB,CAA2B,CAA3B,CAAR,EAAwC,8BAAxC;;;QACA,CAAC,CAAE,EAAH,CAAM,CAAC,CAAC,CAAR,EAAW,CAAX;;;QACA,CAAC,CAAE,EAAH,CAAM,CAAC,CAAC,CAAR,EAAW,MAAX;;;QACA,CAAC,CAAE,EAAH,CAAM,CAAN,EAAS;UAAE,CAAA,EAAG,CAAL;UAAQ,CAAA,EAAG;QAAX,CAAT;;AACA,aAAO;IA5BN,CAAA;;MA8BH;;AACA,WAAO;EA3Ca,EAjDtB;;;EA+FA,IAAC,CAAA,oCAAD,GAAwC,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACxC,QAAA;IAAE,CAAA,CAAE,SAAF,CAAA,GAAgB,OAAA,CAAQ,qBAAR,CAAhB;IAEG,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,QAAA,EAAA;MACU;;QAAN,MAAA,SAAA,QAAuB,UAAvB,CAAA;;;QAGE,QAAC,CAAA,WAAD,GACE;UAAA,MAAA,EACE;YAAA,CAAA,EAAM,OAAN;YACA,CAAA,EAAM;UADN,CADF;UAGA,QAAA,EACE;YAAA,CAAA,EAAM,CAAN;YACA,CAAA,EAAM;UADN;QAJF;;;;oBALR;;;;;;;;QAkBI,CAAC,CAAE,EAAH,CAAM,CAAE,CAAA,GAAI,IAAI,QAAJ,CAAA,CAAN,CAAN,EAAiD;UAAE,CAAA,EAAG,CAAL;UAAQ,CAAA,EAAG;QAAX,CAAjD;;;QACA,CAAC,CAAE,EAAH,CAAM,CAAE,CAAA,GAAI,IAAI,QAAJ,CAAa;UAAE,CAAA,EAAG,CAAL;UAAQ,CAAA,EAAG;QAAX,CAAb,CAAN,CAAN,EAAiD;UAAE,CAAA,EAAG,CAAL;UAAQ,CAAA,EAAG;QAAX,CAAjD;;;QACA,CAAC,CAAE,EAAH,CAAM,CAAE,CAAA,GAAI,IAAI,QAAJ,CAAa;UAAE,CAAA,EAAG,EAAL;UAAS,CAAA,EAAG;QAAZ,CAAb,CAAN,CAAN,EAAiD;UAAE,CAAA,EAAG,EAAL;UAAS,CAAA,EAAG;QAAZ,CAAjD;;;QACA,CAAC,CAAE,MAAH,CAAU,sBAAV,EAAkC,QAAA,CAAA,CAAA;iBAAG,CAAA,GAAI,IAAI,QAAJ,CAAa;YAAE,CAAA,EAAG,EAAL;YAAS,CAAA,EAAG;UAAZ,CAAb;QAAP,CAAlC;;AACA,aAAO;IAvBN,CAAA;;MAyBH;;AACA,WAAO;EA7B+B,EA/FxC;;;EA+HA,IAAC,CAAA,6BAAD,GAAiC,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACjC,QAAA;IAAE,CAAA,CAAE,SAAF,CAAA,GAAgB,OAAA,CAAQ,qBAAR,CAAhB;IAEG,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,SAAA,EAAA;MAAU;QAAN,MAAA,UAAA,QAAwB,UAAxB,CAAA;;QACE,SAAC,CAAA,WAAD,GAEE,CAAA;;UAAA,MAAA,EACE;YAAA,MAAA,EAAU;UAAV,CADF;UAEA,QAAA,EACE;YAAA,MAAA,EAAU;UAAV;QAHF;;;;oBAHR;;;QAQI,CAAC,CAAE,EAAH,CAAM,CAAE,CAAA,GAAI,IAAI,SAAJ,CAAA,CAAN,CAAN,EAAmD;UAAE,MAAA,EAAQ;QAAV,CAAnD;;;QACA,CAAC,CAAE,EAAH,CAAM,CAAE,CAAA,GAAI,IAAI,SAAJ,CAAc;UAAE,MAAA,EAAQ,CAAE,CAAF,EAAK,CAAL;QAAV,CAAd,CAAN,CAAN,EAAmD;UAAE,MAAA,EAAQ,CAAE,CAAF,EAAK,CAAL;QAAV,CAAnD;;AACA,aAAO;IAXN,CAAA;IAaA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,SAAA,EAAA,KAAA,EAAA;MAAU;QAAN,MAAA,UAAA,QAAwB,UAAxB,CAAA;;QACE,SAAC,CAAA,WAAD,GAEE,CAAA;;UAAA,MAAA,EACE;YAAA,MAAA,EAAU;UAAV,CADF;UAEA,QAAA,EACE;YAAA,MAAA,EAAU;UAAV;QAHF;;;;oBAHR;;MAQI,CAAA,GAAI,IAAI,SAAJ,CAAc;QAAE,MAAA,EAAQ,CAAE,CAAF,EAAK,CAAL;MAAV,CAAd;MACJ,KAAA,CAAM,QAAN,EAAgB,CAAhB;;QACA,CAAC,CAAE,EAAH,CAAQ,MAAM,CAAC,QAAP,CAAgB,CAAhB,CAAR,EAAqC,IAArC;;;QACA,CAAC,CAAE,EAAH,CAAQ,MAAM,CAAC,QAAP,CAAgB,CAAC,CAAC,MAAlB,CAAR,EAAqC,IAArC;;MACA,KAAA,CAAM,QAAN,EAAgB,CAAhB;MACA,KAAA,CAAM,QAAN,EAAgB,MAAM,CAAC,QAAP,CAAgB,CAAhB,CAAhB;MACA,KAAA,CAAM,QAAN,EAAgB,MAAM,CAAC,QAAP,CAAgB,CAAC,CAAC,MAAlB,CAAhB;AACA;QAAI,CAAC,CAAC,MAAM,CAAC,IAAT,CAAc,CAAd,EAAJ;OAAoB,cAAA;QAAM;QAAW,IAAA,CAAK,eAAL,EAAsB,GAAG,CAAC,GAAG,CAAC,OAAR,CAAgB,KAAK,CAAC,OAAtB,CAAtB,EAAjB;;;QACpB,CAAC,CAAE,MAAH,CAAU,0BAAV,EAAsC,QAAA,CAAA,CAAA;iBAAG,CAAC,CAAC,MAAM,CAAC,IAAT,CAAc,CAAd;QAAH,CAAtC;;AACA,aAAO;IAlBN,CAAA;IAoBA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,SAAA,EAAA;MAAU;QAAN,MAAA,UAAA,QAAwB,UAAxB,CAAA;;QACE,SAAC,CAAA,WAAD,GACE;UAAA,MAAA,EAAU,KAAM,gCAAhB;UACA,MAAA,EACE;YAAA,MAAA,EAAU;UAAV,CAFF;UAGA,QAAA,EACE;YAAA,MAAA,EAAU;UAAV;QAJF;;;;oBAFR;;MAQI,CAAA,GAAI,IAAI,SAAJ,CAAc;QAAE,MAAA,EAAQ,CAAE,CAAF,EAAK,CAAL;MAAV,CAAd;MACJ,KAAA,CAAM,QAAN,EAAgB,CAAhB;;QACA,CAAC,CAAE,EAAH,CAAQ,MAAM,CAAC,QAAP,CAAgB,CAAhB,CAAR,EAAqC,KAArC;;;QACA,CAAC,CAAE,EAAH,CAAQ,MAAM,CAAC,QAAP,CAAgB,CAAC,CAAC,MAAlB,CAAR,EAAqC,KAArC;;MACA,KAAA,CAAM,QAAN,EAAgB,CAAhB;MACA,KAAA,CAAM,QAAN,EAAgB,MAAM,CAAC,QAAP,CAAgB,CAAhB,CAAhB;MACA,KAAA,CAAM,QAAN,EAAgB,MAAM,CAAC,QAAP,CAAgB,CAAC,CAAC,MAAlB,CAAhB;MACA,CAAC,CAAC,MAAM,CAAC,IAAT,CAAc,CAAd;MACA,CAAC,CAAC,KAAF,GAAU;;QACV,CAAC,CAAE,EAAH,CAAM,CAAN,EAAS;UAAE,MAAA,EAAQ,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAV;UAAwB,KAAA,EAAO;QAA/B,CAAT;;AACA,aAAO;IAnBN,CAAA;IAqBA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,SAAA,EAAA,KAAA,EAAA;MAAU;QAAN,MAAA,UAAA,QAAwB,UAAxB,CAAA;;QACE,SAAC,CAAA,WAAD,GACE;UAAA,MAAA,EAAU,IAAK,4CAAf;UACA,MAAA,EACE;YAAA,MAAA,EAAU;UAAV,CAFF;UAGA,QAAA,EACE;YAAA,MAAA,EAAU;UAAV;QAJF;;;;oBAFR;;MAQI,CAAA,GAAI,IAAI,SAAJ,CAAc;QAAE,MAAA,EAAQ,CAAE,CAAF,EAAK,CAAL;MAAV,CAAd,EARR;;;QAUI,CAAC,CAAE,EAAH,CAAQ,MAAM,CAAC,QAAP,CAAgB,CAAhB,CAAR,EAAqC,IAArC;;;QACA,CAAC,CAAE,EAAH,CAAQ,MAAM,CAAC,QAAP,CAAgB,CAAC,CAAC,MAAlB,CAAR,EAAqC,KAArC;;MACA,KAAA,CAAM,QAAN,EAAgB,CAAhB;MACA,KAAA,CAAM,SAAN,EAAiB,MAAM,CAAC,QAAP,CAAgB,CAAhB,CAAjB;MACA,KAAA,CAAM,SAAN,EAAiB,MAAM,CAAC,QAAP,CAAgB,CAAC,CAAC,MAAlB,CAAjB;MACA,KAAA,CAAM,SAAN,EAAiB,GAAA,CAAI,CAAC,CAAC,KAAN,CAAjB;MACA,CAAC,CAAC,MAAM,CAAC,IAAT,CAAc,CAAd;AACA;QAAI,CAAC,CAAC,KAAF,GAAU,GAAd;OAAiB,cAAA;QAAM;QAAW,IAAA,CAAK,eAAL,EAAsB,GAAG,CAAC,GAAG,CAAC,OAAR,CAAgB,KAAK,CAAC,OAAtB,CAAtB,EAAjB;;;QACjB,CAAC,CAAE,MAAH,CAAU,qCAAV,EAAiD,QAAA,CAAA,CAAA;iBAAG,CAAC,CAAC,KAAF,GAAU;QAAb,CAAjD;;;QACA,CAAC,CAAE,EAAH,CAAM,CAAN,EAAS;UAAE,MAAA,EAAQ,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR;QAAV,CAAT;;AACA,aAAO;IArBN,CAAA;IAuBA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,SAAA,EAAA,KAAA,EAAA;MAAU;QAAN,MAAA,UAAA,QAAwB,UAAxB,CAAA;;QACE,SAAC,CAAA,WAAD,GACE;UAAA,MAAA,EAAU,SAAU,4CAApB;UACA,MAAA,EACE;YAAA,MAAA,EAAU;UAAV,CAFF;UAGA,QAAA,EACE;YAAA,MAAA,EAAU;UAAV;QAJF;;;;oBAFR;;MAQI,CAAA,GAAI,IAAI,SAAJ,CAAc;QAAE,MAAA,EAAQ,CAAE,CAAF,EAAK,CAAL;MAAV,CAAd,EARR;;;QAUI,CAAC,CAAE,EAAH,CAAQ,MAAM,CAAC,QAAP,CAAgB,CAAhB,CAAR,EAAqC,IAArC;;;QACA,CAAC,CAAE,EAAH,CAAQ,MAAM,CAAC,QAAP,CAAgB,CAAC,CAAC,MAAlB,CAAR,EAAqC,KAArC;;MACA,KAAA,CAAM,QAAN,EAAgB,CAAhB;MACA,KAAA,CAAM,SAAN,EAAiB,MAAM,CAAC,QAAP,CAAgB,CAAhB,CAAjB;MACA,KAAA,CAAM,SAAN,EAAiB,MAAM,CAAC,QAAP,CAAgB,CAAC,CAAC,MAAlB,CAAjB;MACA,KAAA,CAAM,SAAN,EAAiB,GAAA,CAAI,CAAC,CAAC,KAAN,CAAjB;MACA,CAAC,CAAC,MAAM,CAAC,IAAT,CAAc,CAAd;AACA;QAAI,CAAC,CAAC,KAAF,GAAU,GAAd;OAAiB,cAAA;QAAM;QAAW,IAAA,CAAK,eAAL,EAAsB,GAAG,CAAC,GAAG,CAAC,OAAR,CAAgB,KAAK,CAAC,OAAtB,CAAtB,EAAjB;;;QACjB,CAAC,CAAE,MAAH,CAAU,qCAAV,EAAiD,QAAA,CAAA,CAAA;iBAAG,CAAC,CAAC,KAAF,GAAU;QAAb,CAAjD;;;QACA,CAAC,CAAE,EAAH,CAAM,CAAN,EAAS;UAAE,MAAA,EAAQ,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR;QAAV,CAAT;;AACA,aAAO;IArBN,CAAA;;MAuBH;;AACA,WAAO;EAxGwB,EA/HjC;;;EA0OA,IAAC,CAAA,qCAAD,GAAyC,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACzC,QAAA;IAAE,CAAA,CAAE,SAAF,CAAA,GAAgB,OAAA,CAAQ,qBAAR,CAAhB;IAEG,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,SAAA,EAAA,QAAA,EAAA;MAAI,QAAA,GAAW,IAAI,CAAE,OAAA,CAAQ,yBAAR,CAAF,CAAqC,CAAC,SAA1C,CAAA;MACX,QAAQ,CAAC,OAAO,CAAC,YAAjB,CAA8B;QAAA,GAAA,EAAK;MAAL,CAA9B;MAEM;;QAAN,MAAA,UAAA,QAAwB,UAAxB,CAAA;;;QAEE,SAAC,CAAA,KAAD,GAAQ;;QACR,SAAC,CAAA,WAAD,GACE;UAAA,MAAA,EAAU,MAAV;UACA,MAAA,EACE;YAAA,MAAA,EAAU;UAAV,CAFF;UAGA,QAAA,EACE;YAAA,MAAA,EAAU;UAAV;QAJF;;;;oBAPR;;MAaI,CAAA,GAAI,IAAI,SAAJ,CAAc,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAd;;QACJ,CAAC,CAAE,EAAH,CAAQ,QAAA,KAAY,CAAC,CAAC,OAAtB,EAAiC,IAAjC;;AACA,aAAO;IAhBN,CAAA;IAkBA,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,SAAA,EAAA;MAAI,QAAA,GAAW,IAAI,CAAE,OAAA,CAAQ,yBAAR,CAAF,CAAqC,CAAC,SAA1C,CAAA;MACX,QAAQ,CAAC,OAAO,CAAC,YAAjB,CAA8B;QAAA,GAAA,EAAK;MAAL,CAA9B;MAEM;;QAAN,MAAA,UAAA,QAAwB,UAAxB,CAAA;;;QAEE,SAAC,CAAA,KAAD,GAAQ;;QACR,SAAC,CAAA,WAAD,GACE;UAAA,MAAA,EAAU,MAAV;UACA,MAAA,EACE;YAAA,MAAA,EAAU;UAAV,CAFF;UAGA,QAAA,EACE;YAAA,MAAA,EAAU;UAAV;QAJF;;;;oBAPR;;;QAaI,CAAC,CAAE,MAAH,CAAU,uBAAV,EAAmC,QAAA,CAAA,CAAA;iBAAG,IAAI,SAAJ,CAAc;YAAE,MAAA,EAAQ,CAAE,OAAF;UAAV,CAAd;QAAH,CAAnC;;AACA,aAAO;IAfN,CAAA;;MAiBH;;AACA,WAAO;EAvCgC,EA1OzC;;;EAoRA,IAAC,CAAA,mCAAD,GAAuC,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACvC,QAAA;IAAE,CAAA,CAAE,SAAF,CAAA,GAAgB,OAAA,CAAQ,qBAAR,CAAhB;IAEG,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,SAAA,EAAA;MACU;;QAAN,MAAA,UAAA,QAAwB,UAAxB,CAAA;;;;;UAcE,WAAa,CAAA,GAAE,CAAF,CAAA;iBACX,CAAM,GAAA,CAAN;YACA,GAAG,CAAC,KAAK,CAAC,GAAV,CAAc,IAAd,EAAiB,IAAjB,EACE;cAAA,UAAA,EAAY,IAAZ;cACA,GAAA,EAAK,CAAA,CAAA,GAAA;uBAAG,CAAA,CAAA,CAAG,IAAC,CAAA,IAAJ,CAAA,CAAA,CAAA,CAAY,IAAC,CAAA,IAAb,CAAA;cAAH,CADL;cAEA,GAAA,EAAK,CAAE,KAAF,CAAA,GAAA;AACf,oBAAA;gBAAY,IAAC,CAAA,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAA3B,CAAgC,KAAhC;gBACA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAY,GAAZ;gBACR,IAAC,CAAA,IAAD,GAAQ,KAAK,CAAE,CAAF;gBACb,IAAC,CAAA,IAAD,GAAQ,KAAK,SAAQ,CAAC,IAAd,CAAmB,GAAnB;AACR,uBAAO;cALJ;YAFL,CADF;AASA,mBAAO;UAXI;;QAdf;;;QAEE,SAAC,CAAA,WAAD,GACE;UAAA,MAAA,EAAU,KAAV;UACA,MAAA,EACE;YAAA,IAAA,EAAQ,eAAR;YACA,IAAA,EAAQ;UADR,CAFF;UAIA,QAAA,EACE;YAAA,IAAA,EAAQ,IAAR;YACA,IAAA,EAAQ;UADR;QALF;;;;oBAJR;;MA4BI,CAAA,GAAI,IAAI,SAAJ,CAAc;QAAE,IAAA,EAAM,QAAR;QAAkB,IAAA,EAAM;MAAxB,CAAd;MACJ,KAAA,CAAM,UAAN,EAAkB,CAAlB;;QACA,CAAC,CAAE,EAAH,CAAM,CAAN,EAAS;UAAE,IAAA,EAAM,QAAR;UAAkB,IAAA,EAAM,GAAxB;UAA6B,EAAA,EAAI;QAAjC,CAAT;;MACA,KAAA,CAAM,UAAN,EAAkB,CAAC,CAAC,EAApB;MACA,CAAC,CAAC,EAAF,GAAO;;QACP,CAAC,CAAE,EAAH,CAAM,CAAN,EAAS;UAAE,IAAA,EAAM,KAAR;UAAe,IAAA,EAAM,KAArB;UAA4B,EAAA,EAAI;QAAhC,CAAT;;AACA,aAAO;IAnCN,CAAA;;MAqCH;;AACA,WAAO;EAzC8B,EApRvC;;;EAgUA,IAAC,CAAA,6CAAD,GAAiD,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACjD,QAAA;IAAE,CAAA,CAAE,SAAF,CAAA,GAAgB,OAAA,CAAQ,qBAAR,CAAhB;IAEG,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,SAAA,EAAA,QAAA,EAAA;MAAI,QAAA,GAAW,IAAI,CAAE,OAAA,CAAQ,yBAAR,CAAF,CAAqC,CAAC,SAA1C,CAAA;MAEL;;QAAN,MAAA,UAAA,QAAwB,UAAxB,CAAA;;;QAEE,SAAC,CAAA,KAAD,GAAQ;;QACR,SAAC,CAAA,WAAD,GACE;UAAA,MAAA,EACE;YAAA,IAAA,EAAQ,eAAR;YACA,IAAA,EAAQ,eADR;YAEA,EAAA,EAAQ;UAFR,CADF;UAIA,QAAA,EACE;YAAA,IAAA,EAAQ,IAAR;YACA,IAAA,EAAQ,IADR;YAEA,EAAA,EAAQ;UAFR,CALF;UAQA,MAAA,EAAQ,QAAA,CAAE,CAAF,CAAA;AAChB,gBAAA;YAAU,KAAgB,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ,CAAhB;AAAA,qBAAO,EAAP;;YACA,CAAA,GAAI;cAAE,GAAA,CAAF;cAAQ,EAAA,EAAI,CAAA,CAAA,CAAG,CAAC,CAAC,IAAL,CAAA,CAAA,CAAA,CAAa,CAAC,CAAC,IAAf,CAAA;YAAZ;AACJ,mBAAO;UAHD;QARR;;;;oBANR;;MAmBI,CAAA,GAAI,IAAI,SAAJ,CAAc;QAAE,IAAA,EAAM,QAAR;QAAkB,IAAA,EAAM;MAAxB,CAAd;;QACJ,CAAC,CAAE,EAAH,CAAM,CAAN,EAAS;UAAE,IAAA,EAAM,QAAR;UAAkB,IAAA,EAAM,GAAxB;UAA6B,EAAA,EAAI;QAAjC,CAAT;;;QACA,CAAC,CAAE,EAAH,CAAM,cAAiB,MAAM,CAAC,IAAP,CAAY,QAAQ,CAAC,QAArB,GAAf,iBAAF,CAAN,EAAwD,IAAxD;;AACA,aAAO;IAvBN,CAAA;;MAyBH;;AACA,WAAO;EA7BwC,EAhUjD;;;EAgWA,IAAC,CAAA,qCAAD,GAAyC,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACzC,QAAA,SAAA,EAAA;IAAE,CAAA,CAAE,SAAF,CAAA,GAAgB,OAAA,CAAQ,qBAAR,CAAhB,EAAF;;IAEE,mBAAA,GAAsB,QAAA,CAAA,CAAA;AACxB,UAAA,KAAA,EAAA;MAAI,UAAA,GAAa,IAAI,CAAE,OAAA,CAAQ,yBAAR,CAAF,CAAqC,CAAC,SAA1C,CAAA;MACb,UAAU,CAAC,OAAO,CAAC,gBAAnB,CAAoC,mBAApC;MACA,UAAU,CAAC,OAAO,CAAC,eAAnB,CAAoC,mBAApC;MACA,UAAU,CAAC,OAAO,CAAC,eAAnB,CAAoC,MAApC;MACA,UAAU,CAAC,OAAO,CAAC,aAAnB,CAAiC,QAAA,CAAE,CAAF,CAAA;QAC/B,KAAoB,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,CAAV,CAApB;AAAA,iBAAO,MAAP;;AACA,eAAO,CAAE,CAAC,CAAC,OAAF,CAAU,GAAV,CAAF,CAAA,KAAuB,CAAC;MAFA,CAAjC;MAIM;;;;QAAN,MAAA,MAAA,QAAoB,UAApB;UA4BE,QAAU,CAAE,IAAF,CAAA;mBACR,IAAI,KAAJ,CAAU;cAAE,GAAA,IAAF;cAAQ,IAAA,EAAM,CAAA,CAAA,CAAG,IAAH,CAAA,CAAA,CAAA,CAAW,IAAC,CAAA,IAAZ,CAAA;YAAd,CAAV;UADQ;;QA5BZ;;QACE,KAAA,GAAQ;;QACR,KAAC,CAAA,KAAD,GAAQ;;QACR,KAAC,CAAA,WAAD,GACE;UAAA,MAAA,EACE;YAAA,IAAA,EAAQ,eAAR;YACA,IAAA,EAAQ,iBADR;YAEA,EAAA,EAAQ,kBAFR;YAGA,IAAA,EAAQ,iBAHR;YAIA,EAAA,EAAQ,kBAJR;YAKA,KAAA,EAAQ;UALR,CADF;UAOA,QAAA,EACE;YAAA,IAAA,EAAQ,IAAR;YACA,IAAA,EAAQ,CADR;YAEA,EAAA,EAAQ,CAFR;YAGA,IAAA,EAAQ,IAHR;YAIA,EAAA,EAAQ,IAJR;YAKA,KAAA,EAAQ;UALR,CARF;UAcA,MAAA,EAAQ,QAAA,CAAE,CAAF,CAAA;AAChB,gBAAA,CAAA,EAAA,CAI8B;YAJpB,IAAY,WAAA,IAAO,CAAI,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ,CAAvB;AAAA,qBAAO,EAAP;;YACA,CAAA,GAAU,CAAE,GAAA,KAAK,CAAC,WAAW,CAAC,QAApB,EAAiC,GAAA,CAAjC;;cACV,CAAC,CAAC,OAAQ,CAAC,CAAC;;;cACZ,CAAC,CAAC,KAAQ,CAAC,CAAC;;YACZ,IAAG,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,CAAC,CAAC,IAAZ,CAAH;cACE,CAAA,GAAU,CAAE,CAAC,CAAC,IAAI,CAAC,KAAP,CAAa,8BAAb,CAAF,CAA+C,CAAC;cAC1D,CAAC,CAAC,IAAF,GAAU,CAAC,CAAC;cACZ,CAAC,CAAC,IAAF,GAAU,CAAC,CAAC,KAHd;;AAIA,mBAAO;UATD;QAdR;;;;;AA0BJ,aAAO,CAAE,UAAF,EAAc,KAAd;IAvCa;IAyCnB,CAAA,QAAA,CAAA,CAAA,EAAA;AACL,UAAA,KAAA,EAAA,UAAA,EAAA,CAAA,EAAA;MAAI,CAAA,CAAE,UAAF,EACE,KADF,CAAA,GACgB,mBAAA,CAAA,CADhB;MAEA,CAAA,GAAI,IAAI,KAAJ,CAAU;QAAE,IAAA,EAAM,eAAR;QAAyB,IAAA,EAAM;MAA/B,CAAV,EAFR;;MAII,CAAA,GAAI,CAAC,CAAC,QAAF,CAAW,KAAX;MACJ,IAAA,CAAK,QAAL,EAAe,CAAf;MACA,IAAA,CAAK,QAAL,EAAe,CAAf;AACA,aAAO;IARN,CAAA;;MAUH;;AACA,WAAO;EAvDgC,EAhWzC;;;EA6ZA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA;;;;;;;;aAQhC,IAAA,CAAK,IAAC,CAAA,6BAAN;IARgC,CAAA,IAAlC;;;EA7ZA;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DATOM/TESTS/AS-DATACLASS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntest                      = require '../../../apps/guy-test'\n# PATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  equals\n  validate }              = types\n\n\n#===========================================================================================================\n\n  # DATOM = new ( require '../../../apps/datom' ).Datom { freeze: false, }\n  # probes_and_matchers = [\n  #   [ [ '^foo' ], { '$fresh': true, '$key': '^foo' }, null ]\n  #   [ [ '^foo', { foo: 'bar' } ], { foo: 'bar', '$fresh': true, '$key': '^foo' }, null ]\n  #   [ [ '^foo', { value: 42 } ], { value: 42, '$fresh': true, '$key': '^foo' }, null ]\n  #   [ [ '^foo', { value: 42 }, { '$fresh': false } ], { value: 42, '$fresh': true, '$key': '^foo' }, null ]\n  #   ]\n  # #.........................................................................................................\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n  #     d = DATOM.new_fresh_datom probe...\n  #     T.ok not Object.isFrozen d\n  #     resolve d\n  #     return null\n\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_as_dataclass = ( T, done ) ->\n  { Dataclass } = require '../../../apps/datom'\n  #.........................................................................................................\n  do ->\n    d = new Dataclass()\n    info '^12-7^', ( Object.isFrozen d )\n    T?.eq ( Object.isFrozen d ), true # used to be false\n    try d.foo = 42 catch error then warn GUY.trm.reverse error.message\n    T?.eq ( Object.isFrozen d ), true\n    T?.throws /.*/, -> d.foo = 42\n    return null\n  #.........................................................................................................\n  do ->\n    class Quantity extends Dataclass\n\n      #-----------------------------------------------------------------------------------------------------\n      @declaration:\n        fields:\n          q:    'float'\n          u:    'nonempty.text'\n        template:\n          q:    0\n          u:    'unit'\n\n      #-----------------------------------------------------------------------------------------------------\n      constructor: ( cfg ) ->\n        # super { template..., cfg..., }\n        super cfg\n        return undefined\n    #.......................................................................................................\n    q = new Quantity()\n    T?.eq ( Object.isFrozen q ), true # used to be false\n    try q.foo = 42 catch error then warn '^Dataclass@1^', GUY.trm.reverse error.message\n    T?.throws /.*/, -> q.foo = 42\n    T?.eq ( Object.isFrozen q ), true\n    ### TAINT should use method independent of `inspect` (which could be user-configured?) ###\n    T?.eq ( ( require 'util' ).inspect q ), \"Quantity { q: 0, u: 'unit' }\"\n    T?.eq q.q, 0\n    T?.eq q.u, 'unit'\n    T?.eq q, { q: 0, u: 'unit', }\n    return null\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_dataclass_automatic_validation = ( T, done ) ->\n  { Dataclass } = require '../../../apps/datom'\n  #.........................................................................................................\n  do ->\n    #.......................................................................................................\n    class Quantity extends Dataclass\n\n      #-----------------------------------------------------------------------------------------------------\n      @declaration:\n        fields:\n          q:    'float'\n          u:    'nonempty.text'\n        template:\n          q:    0\n          u:    'unit'\n\n      # #-----------------------------------------------------------------------------------------------------\n      # constructor: ( cfg ) ->\n      #   # super { template..., cfg..., }\n      #   super cfg\n      #   return undefined\n    #.......................................................................................................\n    T?.eq ( q = new Quantity()                    ), { q: 0, u: 'unit', }\n    T?.eq ( q = new Quantity { q: 0, u: 'unit', } ), { q: 0, u: 'unit', }\n    T?.eq ( q = new Quantity { q: 23, u: 'm', }   ), { q: 23, u: 'm', }\n    T?.throws /not a valid Quantity/, -> q = new Quantity { q: 23, u: '', }\n    return null\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_dataclass_deep_freezing = ( T, done ) ->\n  { Dataclass } = require '../../../apps/datom'\n  #.........................................................................................................\n  do ->\n    class Something extends Dataclass\n      @declaration:\n        # freeze:   'deep' ### the default ###\n        fields:\n          values:   'list.of.integer'\n        template:\n          values:   []\n    #.......................................................................................................\n    T?.eq ( s = new Something()                     ), { values: [], }\n    T?.eq ( s = new Something { values: [ 3, 5, ] } ), { values: [ 3, 5, ], }\n    return null\n  #.........................................................................................................\n  do ->\n    class Something extends Dataclass\n      @declaration:\n        # freeze:   'deep' ### the default ###\n        fields:\n          values:   'list.of.integer'\n        template:\n          values:   []\n    #.......................................................................................................\n    s = new Something { values: [ 3, 5, ] }\n    debug '^23-1^', s\n    T?.eq ( Object.isFrozen s         ), true\n    T?.eq ( Object.isFrozen s.values  ), true\n    debug '^23-2^', s\n    debug '^23-3^', Object.isFrozen s\n    debug '^23-4^', Object.isFrozen s.values\n    try s.values.push 7 catch error then warn '^Dataclass@2^', GUY.trm.reverse error.message\n    T?.throws /object is not extensible/, -> s.values.push 7\n    return null\n  #.........................................................................................................\n  do ->\n    class Something extends Dataclass\n      @declaration:\n        freeze:   false ### no freezing, fully mutable ###\n        fields:\n          values:   'list.of.integer'\n        template:\n          values:   []\n    #.......................................................................................................\n    s = new Something { values: [ 3, 5, ] }\n    debug '^23-5^', s\n    T?.eq ( Object.isFrozen s         ), false\n    T?.eq ( Object.isFrozen s.values  ), false\n    debug '^23-6^', s\n    debug '^23-7^', Object.isFrozen s\n    debug '^23-8^', Object.isFrozen s.values\n    s.values.push 7\n    s.extra = 42\n    T?.eq s, { values: [ 3, 5, 7, ], extra: 42, }\n    return null\n  #.........................................................................................................\n  do ->\n    class Something extends Dataclass\n      @declaration:\n        freeze:   true ### freeze instance but not its properties ###\n        fields:\n          values:   'list.of.integer'\n        template:\n          values:   []\n    #.......................................................................................................\n    s = new Something { values: [ 3, 5, ] }\n    # s.values # access property to trigger freezing\n    T?.eq ( Object.isFrozen s         ), true\n    T?.eq ( Object.isFrozen s.values  ), false\n    debug '^23-9^', s\n    debug '^23-10^', Object.isFrozen s\n    debug '^23-11^', Object.isFrozen s.values\n    debug '^23-11^', rpr s.extra\n    s.values.push 7\n    try s.extra = 42 catch error then warn '^Dataclass@3^', GUY.trm.reverse error.message\n    T?.throws /Cannot assign to read only property/, -> s.extra = 42\n    T?.eq s, { values: [ 3, 5, 7, ], }\n    return null\n  #.........................................................................................................\n  do ->\n    class Something extends Dataclass\n      @declaration:\n        freeze:   'shallow' ### freeze instance but not its properties ###\n        fields:\n          values:   'list.of.integer'\n        template:\n          values:   []\n    #.......................................................................................................\n    s = new Something { values: [ 3, 5, ] }\n    # s.values # access property to trigger freezing\n    T?.eq ( Object.isFrozen s         ), true\n    T?.eq ( Object.isFrozen s.values  ), false\n    debug '^23-9^', s\n    debug '^23-10^', Object.isFrozen s\n    debug '^23-11^', Object.isFrozen s.values\n    debug '^23-11^', rpr s.extra\n    s.values.push 7\n    try s.extra = 42 catch error then warn '^Dataclass@3^', GUY.trm.reverse error.message\n    T?.throws /Cannot assign to read only property/, -> s.extra = 42\n    T?.eq s, { values: [ 3, 5, 7, ], }\n    return null\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_dataclass_custom_types_instance = ( T, done ) ->\n  { Dataclass } = require '../../../apps/datom'\n  #.........................................................................................................\n  do ->\n    my_types = new ( require '../../../apps/intertype' ).Intertype()\n    my_types.declare.awesome_list isa: 'list.of.integer'\n    #.......................................................................................................\n    class Something extends Dataclass\n      #-----------------------------------------------------------------------------------------------------\n      @types: my_types\n      @declaration:\n        freeze:   'deep'\n        fields:\n          values:   'awesome_list'\n        template:\n          values:   []\n    #.......................................................................................................\n    s = new Something [ 4, 5, 6, ]\n    T?.eq ( my_types is s.__types ), true\n    return null\n  #.........................................................................................................\n  do ->\n    my_types = new ( require '../../../apps/intertype' ).Intertype()\n    my_types.declare.awesome_list isa: 'list.of.integer'\n    #.......................................................................................................\n    class Something extends Dataclass\n      #-----------------------------------------------------------------------------------------------------\n      @types: my_types\n      @declaration:\n        freeze:   'deep'\n        fields:\n          values:   'awesome_list'\n        template:\n          values:   []\n    #.......................................................................................................\n    T?.throws /not a valid Something/, -> new Something { values: [ 'wronk', ], }\n    return null\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_dataclass_computed_properties = ( T, done ) ->\n  { Dataclass } = require '../../../apps/datom'\n  #.........................................................................................................\n  do ->\n    #.......................................................................................................\n    class Something extends Dataclass\n      #-----------------------------------------------------------------------------------------------------\n      @declaration:\n        freeze:   false\n        fields:\n          mode:   'nonempty.text'\n          name:   'nonempty.text'\n        template:\n          mode:   null\n          name:   null\n        # create: ( x ) ->\n        #   return x unless @isa.object x\n        #   R = { x..., }\n        #   GUY.props.def R, 'id', get: -> \"#{@mode}:#{@name}\"\n      constructor: ( P... ) ->\n        super P...\n        GUY.props.def @, 'id',\n          enumerable: true\n          get: => \"#{@mode}:#{@name}\"\n          set: ( value ) =>\n            @__types.validate.nonempty.text value\n            parts = value.split ':'\n            @mode = parts[ 0 ]\n            @name = parts[ 1 .. ].join ':'\n            return null\n        return undefined\n    #.......................................................................................................\n    s = new Something { mode: 'mymode', name: 'p', }\n    debug '^464561^', s\n    T?.eq s, { mode: 'mymode', name: 'p', id: 'mymode:p', }\n    debug '^464561^', s.id\n    s.id = 'foo:bar'\n    T?.eq s, { mode: 'foo', name: 'bar', id: 'foo:bar', }\n    return null\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_dataclass_method_to_trigger_declaration = ( T, done ) ->\n  { Dataclass } = require '../../../apps/datom'\n  #.........................................................................................................\n  do ->\n    my_types = new ( require '../../../apps/intertype' ).Intertype()\n    #.......................................................................................................\n    class Something extends Dataclass\n      #-----------------------------------------------------------------------------------------------------\n      @types: my_types\n      @declaration:\n        fields:\n          mode:   'nonempty.text'\n          name:   'nonempty.text'\n          id:     'nonempty.text'\n        template:\n          mode:   null\n          name:   null\n          id:     null\n        create: ( x ) ->\n          return x unless @isa.object x\n          R = { x..., id: \"#{x.mode}:#{x.name}\", }\n          return R\n    #.......................................................................................................\n    s = new Something { mode: 'mymode', name: 'p', }\n    T?.eq s, { mode: 'mymode', name: 'p', id: 'mymode:p', }\n    T?.eq ( 'Something' in Object.keys my_types.registry ), true\n    return null\n  #.........................................................................................................\n  done?()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@datom_dataclass_with_instance_methods = ( T, done ) ->\n  { Dataclass } = require '../../../apps/datom'\n  #.........................................................................................................\n  get_types_and_class = ->\n    base_types = new ( require '../../../apps/intertype' ).Intertype()\n    base_types.declare.ilx_codeunit_idx 'positive0.integer'\n    base_types.declare.ilx_line_number  'positive1.integer'\n    base_types.declare.ilx_token_value  'text'\n    base_types.declare.ilx_token_key ( x ) ->\n      return false unless @isa.text x\n      return ( x.indexOf ':' ) isnt -1\n    #.......................................................................................................\n    class Token extends Dataclass\n      clasz = @\n      @types: base_types\n      @declaration:\n        fields:\n          $key:   'ilx_token_key'\n          lnr1:   'ilx_line_number'\n          x1:     'ilx_codeunit_idx'\n          lnr2:   'ilx_line_number'\n          x2:     'ilx_codeunit_idx'\n          value:  'ilx_token_value'\n        template:\n          $key:   null\n          lnr1:   1\n          x1:     0\n          lnr2:   null\n          x2:     null\n          value:  ''\n        create: ( x ) ->\n          return x if x? and not @isa.object x\n          R       = { clasz.declaration.template..., x..., }\n          R.lnr2 ?= R.lnr1\n          R.x2   ?= R.x1\n          if @isa.text R.$key ### NOTE safeguard against `$key` missing/wrong in user-supplied value ###\n            g       = ( R.$key.match /^(?<mode>[^:]+):(?<lxid>.+)$/ ).groups\n            R.mode  = g.mode\n            R.lxid  = g.lxid\n          return R\n      set_mode: ( mode ) ->\n        new clasz { @..., $key: \"#{mode}:#{@lxid}\", }\n    return { base_types, Token, }\n  #.........................................................................................................\n  do ->\n    { base_types\n      Token     } = get_types_and_class()\n    d = new Token { $key: 'plain:p:start', lnr1: 123, }\n    # info '^93-4^', GUY.trm.truth d.set_mode?\n    e = d.set_mode 'tag'\n    urge '^93-3^', d\n    urge '^93-5^', e\n    return null\n  #.........................................................................................................\n  done?()\n  return null\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # test @datom_dataclass_method_to_trigger_declaration\n  # @datom_dataclass_with_instance_methods()\n  # test @datom_dataclass_with_instance_methods\n  # test @datom_as_dataclass\n  # test @datom_dataclass_automatic_validation\n  # @datom_dataclass_deep_freezing()\n  test @datom_dataclass_deep_freezing\n  # test @datom_dataclass_computed_properties"
  ]
}