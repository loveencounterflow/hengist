{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/cupofdatom.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATOM/TESTS/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n#...........................................................................................................\n# types                     = require '../types'\n# { isa\n#   validate\n#   type_of }               = types\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"DATOM Cupofdatom 1\" ] = ( T, done ) ->\n  DATOM                     = new ( require '../../../apps/datom' ).Datom { dirty: false, }\n  { new_datom\n    lets\n    Cupofdatom\n    select }                = DATOM.export()\n  # #.........................................................................................................\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n  #     resolve DATOM.fresh_datom probe...\n  #.........................................................................................................\n  whisper '---------------------------------'\n  c = new Cupofdatom()\n  c.cram 'helo', 'world'\n  c.cram 'foo', ->\n    c.cram 'bold', ->\n      c.cram null, 'content'\n  collector = CND.deep_copy c.collector\n  ds = c.expand()\n  # urge CND.reverse collector if not equals collector, ds\n  help ds\n  T.eq ds, [\n    { '$key': '<helo' },\n    { text: 'world', '$key': '^text' },\n    { '$key': '>helo' },\n    { '$key': '<foo' },\n    { '$key': '<bold' },\n    { text: 'content', '$key': '^text' },\n    { '$key': '>bold' },\n    { '$key': '>foo' } ]\n  #.........................................................................................................\n  whisper '---------------------------------'\n  c = new Cupofdatom()\n  c.cram 'helo', 'world'\n  c.cram 'foo', ->\n    c.cram 'bold', 'content'\n  collector = CND.deep_copy c.collector\n  ds = c.expand()\n  # urge CND.reverse collector if not equals collector, ds\n  help ds\n  T.eq ds, [\n    { '$key': '<helo' },\n    { text: 'world', '$key': '^text' },\n    { '$key': '>helo' },\n    { '$key': '<foo' },\n    { '$key': '<bold' },\n    { text: 'content', '$key': '^text' },\n    { '$key': '>bold' },\n    { '$key': '>foo' } ]\n  #.........................................................................................................\n  whisper '---------------------------------'\n  c = new Cupofdatom()\n  c.cram 'helo', 'world'\n  c.cram 'foo', ->\n    c.cram 'bold', -> [ 'this', 'is', 'content' ]\n  collector = CND.deep_copy c.collector\n  ds = c.expand()\n  # urge CND.reverse collector if not equals collector, ds\n  help ds\n  T.eq ds, [\n    { '$key': '<helo' },\n    { text: 'world', '$key': '^text' },\n    { '$key': '>helo' },\n    { '$key': '<foo' },\n    { '$key': '<bold' },\n    { text: 'this', '$key': '^text' },\n    { text: 'is', '$key': '^text' },\n    { text: 'content', '$key': '^text' },\n    { '$key': '>bold' },\n    { '$key': '>foo' } ]\n  #.........................................................................................................\n  done()\n  return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  test @[ \"DATOM Cupofdatom 1\" ]\n  # test @[ \"wrap_datom\" ]\n  # test @[ \"new_datom complains when value has `$key`\" ]\n  # test @[ \"selector keypatterns\" ]\n  # test @[ \"select 2\" ]\n  # test @[ \"new_datom (default settings)\" ]\n  # debug new_datom '^helo', 42\n\n\n\n"
  ]
}