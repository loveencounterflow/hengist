{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATOM/TESTS/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n#...........................................................................................................\n# types                     = require '../types'\n# { isa\n#   validate\n#   type_of }               = types\n\n\n#-----------------------------------------------------------------------------------------------------------\n@fresh_datom_with_freeze = ( T, done ) ->\n  { DATOM } = require '../../../apps/datom'\n  probes_and_matchers = [\n    [ [ '^foo' ], { '$fresh': true, '$key': '^foo' }, null ]\n    [ [ '^foo', { foo: 'bar' } ], { foo: 'bar', '$fresh': true, '$key': '^foo' }, null ]\n    [ [ '^foo', { value: 42 } ], { value: 42, '$fresh': true, '$key': '^foo' }, null ]\n    [ [ '^foo', { value: 42 }, { '$fresh': false } ], { value: 42, '$fresh': true, '$key': '^foo' }, null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      d = DATOM.new_fresh_datom probe...\n      T.ok Object.isFrozen d\n      resolve d\n      return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@fresh_datom_nofreeze = ( T, done ) ->\n  DATOM = new ( require '../../../apps/datom' ).Datom { freeze: false, }\n  probes_and_matchers = [\n    [ [ '^foo' ], { '$fresh': true, '$key': '^foo' }, null ]\n    [ [ '^foo', { foo: 'bar' } ], { foo: 'bar', '$fresh': true, '$key': '^foo' }, null ]\n    [ [ '^foo', { value: 42 } ], { value: 42, '$fresh': true, '$key': '^foo' }, null ]\n    [ [ '^foo', { value: 42 }, { '$fresh': false } ], { value: 42, '$fresh': true, '$key': '^foo' }, null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      d = DATOM.new_fresh_datom probe...\n      T.ok not Object.isFrozen d\n      resolve d\n      return null\n  done()\n  return null\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # test @fresh_datom_with_freeze\n  test @fresh_datom_nofreeze\n\n\n"
  ]
}