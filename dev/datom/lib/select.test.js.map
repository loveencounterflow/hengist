{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/select.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATOM/TESTS/SELECT'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n#...........................................................................................................\ntypes                     = new ( require '../../../apps/intertype' ).Intertype\n{ isa\n  validate\n  type_of }               = types\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"selector keypatterns\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [\"\",{\"sigils\":\"\",\"name\":\"\"},null]\n#     [\"^foo\",{\"sigils\":\"^\",\"name\":\"foo\"},null]\n#     [\"<foo\",{\"sigils\":\"<\",\"name\":\"foo\"},null]\n#     [\"  \",null,null]\n#     [\">foo\",{\"sigils\":\">\",\"name\":\"foo\"},null]\n#     [\"<>foo\",{\"sigils\":\"<>\",\"name\":\"foo\"},null]\n#     [\"<>^foo\",{\"sigils\":\"<>^\",\"name\":\"foo\"},null]\n#     [\"^ foo\",null,null]\n#     [\"^prfx:foo\",{\"sigils\":\"^\",\"prefix\":\"prfx\",\"name\":\"foo\"},null]\n#     [\"<prfx:foo\",{\"sigils\":\"<\",\"prefix\":\"prfx\",\"name\":\"foo\"},null]\n#     [\">prfx:foo\",{\"sigils\":\">\",\"prefix\":\"prfx\",\"name\":\"foo\"},null]\n#     [\"<>prfx:foo\",{\"sigils\":\"<>\",\"prefix\":\"prfx\",\"name\":\"foo\"},null]\n#     [\"<>^prfx:foo\",{\"sigils\":\"<>^\",\"prefix\":\"prfx\",\"name\":\"foo\"},null]\n#     [\"^<>\",{\"sigils\":\"^<>\",\"name\":\"\"},null]\n#     ]\n#   #.........................................................................................................\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, ->\n#       R = ( probe.match DATOM._selector_keypattern )?.groups ? null\n#       return null unless R?\n#       for key, value of R\n#         delete R[ key ] if value is undefined\n#       return R\n#   done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"datom keypatterns\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [\"text\",null,null]\n#     [\"^text\",{\"sigil\":\"^\",\"name\":\"text\"},null]\n#     [\"<bold\",{\"sigil\":\"<\",\"name\":\"bold\"},null]\n#     [\">bold\",{\"sigil\":\">\",\"name\":\"bold\"},null]\n#     [\"~collect\",{\"sigil\":\"~\",\"name\":\"collect\"},null]\n#     [\"~kwic:collect\",{\"sigil\":\"~\",\"prefix\":\"kwic\",\"name\":\"collect\"},null]\n#     [\"<kwic:bar\",{\"sigil\":\"<\",\"prefix\":\"kwic\",\"name\":\"bar\"},null]\n#     [\">kwic:bar\",{\"sigil\":\">\",\"prefix\":\"kwic\",\"name\":\"bar\"},null]\n#     [\">!kwic:bar\",null,null]\n#     [\"<>kwic:bar\",null,null]\n#     ]\n#   #.........................................................................................................\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, ->\n#       R = ( probe.match DATOM._datom_keypattern )?.groups ? null\n#       return null unless R?\n#       for key, value of R\n#         delete R[ key ] if value is undefined\n#       return R\n#   done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"classify_selector\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [\"#justatag\",[\"tag\",\"justatag\"],'illegal']\n#     [\"^bar\",[\"keypattern\",{\"sigils\":\"^\",\"name\":\"bar\"}],null]\n#     ]\n#   #.........................................................................................................\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, ->\n#       probe = ( -> ) if probe.startsWith '!!!'\n#       R     = DATOM._classify_selector probe\n#       if R[ 0 ] is 'keypattern'\n#         for key, value of R[ 1 ]\n#           delete R[ 1 ][ key ] if value is undefined\n#       else if R[ 0 ] is 'function'\n#         R[ 1 ] = null\n#       return R\n#   done()\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@select_2 = ( T, done ) ->\n  { DATOM } = require '../../../apps/datom'\n  { new_datom\n    select }                = DATOM\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ { '$key': 'number', '$stamped': true }, 'number' ], false, null ]\n    [ [ { '$key': 'number' }, 'number' ], true, null ]\n    [ [ { '$key': 'math:number' }, 'number' ], false, null ]\n    [ [ { '$key': 'math:number' }, 'math' ], false, null ]\n    [ [ { '$key': 'math:number:integer' }, 'math:*:int*' ], true, null ]\n    # [ [ { '$key': 'outline:nl' }, 'outline:nl[s]' ], true, null ]\n    [ [ { '$key': 'x' }, '?' ], true, null ]\n    [ [ { '$key': 'xx' }, '?' ], false, null ]\n    [ [ { '$key': 'wat' }, '?' ], false, null ]\n    [ [ { '$key': '福' }, '?' ], true, null ]\n    [ [ { '$key': 'math:' }, 'math:*' ], true, null ]\n    [ [ { '$key': 'math:*' }, 'math:*' ], true, null ]\n    [ [ { '$key': '𫝂' }, '?' ], true, null ]\n    [ [ { '$key': 'math:*' }, 'math:\\\\*' ], true, null ]\n    [ [ { '$key': 'math:number' }, '*:number' ], true, null ]\n    [ [ { '$key': 'math:number' }, 'math:*' ], true, null ]\n    [ [ { '$key': 'math:' }, 'math:\\\\*' ], false, null ]\n    [ [ { '$key': 'math:' }, [ 'math:\\\\*', '*:' ] ], true, null ]\n    [ [ { '$key': 'math:number' }, 'm?th:n?mber' ], true, null ]\n    # [ [ { '$key': 'math:number' }, 'm?th:n[[:alpha:]]mber' ], true, null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve ) ->\n      [ d, selector, ]  = probe\n      if isa.text selector\n        result  = select d, selector\n      else\n        result  = select d, selector...\n      resolve result\n  # debug '^23-4^', DATOM.matcher_cache\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"select ignores values other than PODs\" ] = ( T, done ) ->\n  { DATOM } = require '../../../apps/datom'\n  { new_datom\n    select }                = DATOM\n  #.........................................................................................................\n  probes_and_matchers = [\n    [[ null, '^number',],false]\n    [[ 123, '^number',],false]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ d, selector, ] = probe\n      try\n        resolve select d, selector\n      catch error\n        return resolve error.message\n      return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"new_datom complains when value has `$key`\" ] = ( T, done ) ->\n  { DATOM } = require '../../../apps/datom'\n  { new_datom\n    select }                = DATOM\n  #.........................................................................................................\n  probes_and_matchers = [\n    [[\"^number\",{\"$value\":123,}],{\"$key\":\"^number\",\"$value\":123},null]\n    [[\"^number\",{\"$value\":123,\"$key\":\"something\"}],null,\"value must not have attribute '\\\\$key'\"]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ key, value, ] = probe\n      resolve new_datom key, value\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"xxx\" ] = ( T, done ) ->\n  { DATOM } = require '../../../apps/datom'\n  { new_datom\n    select }                = DATOM\n  #.........................................................................................................\n  probes_and_matchers = [\n    [['^foo', { time: 1500000, value: \"msg#1\", }],{\"time\":1500000,\"value\":\"msg#1\",\"$key\":\"^foo\"},null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ key, value, ] = probe\n      resolve new_datom key, value\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"new_datom (default settings)\" ] = ( T, done ) ->\n  { DATOM } = require '../../../apps/datom'\n  { new_datom\n    select }                = DATOM\n  #.........................................................................................................\n  probes_and_matchers = [\n    [[\"^number\",null],{\"$key\":\"^number\"},null]\n    [[\"^number\",123],{\"$key\":\"^number\",\"$value\":123},null]\n    [[\"^number\",{\"$value\":123,}],{\"$key\":\"^number\",\"$value\":123},null]\n    [[\"^number\",{\"value\":123,}],{\"$key\":\"^number\",\"value\":123},null]\n    [[\"^number\",{\"$value\":{\"$value\":123,}}],{\"$key\":\"^number\",\"$value\": { \"$value\": 123, }, },null]\n    [[\"^number\",{\"value\":{\"$value\":123,}}],{\"$key\":\"^number\",\"value\": { \"$value\": 123, }, },null]\n    [[\"^number\",{\"$value\":{\"value\":123,}}],{\"$key\":\"^number\",\"$value\": { \"value\": 123, }, },null]\n    [[\"^number\",{\"value\":{\"value\":123,}}],{\"$key\":\"^number\",\"value\": { \"value\": 123, }, },null]\n    [[\"^value\",123],{\"$key\":\"^value\",\"$value\":123},null]\n    [[\"<start\",123],{\"$key\":\"<start\",\"$value\":123},null]\n    [[\">stop\",123],{\"$key\":\">stop\",\"$value\":123},null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ key, value, ] = probe\n      resolve new_datom key, value\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"new_datom (without value merging)\" ] = ( T, done ) ->\n  DATOM                     = new ( require '../../../apps/datom' ).Datom { merge_values: false, }\n  { new_datom\n    select }                = DATOM\n  #.........................................................................................................\n  probes_and_matchers = [\n    [[\"^number\",null],{\"$key\":\"^number\"},null]\n    [[\"^number\",123],{\"$key\":\"^number\",\"$value\":123},null]\n    [[\"^number\",{\"$value\":123,}],{\"$key\":\"^number\",\"$value\":{\"$value\":123}},null]\n    [[\"^number\",{\"value\":123,}],{\"$key\":\"^number\",\"$value\":{\"value\":123}},null]\n    [[\"^number\",{\"$value\":{\"$value\":123,}}],{\"$key\":\"^number\",\"$value\":{\"$value\": { \"$value\": 123, }, }, },null]\n    [[\"^number\",{\"value\":{\"$value\":123,}}],{\"$key\":\"^number\",\"$value\":{\"value\": { \"$value\": 123, }}, },null]\n    [[\"^number\",{\"$value\":{\"value\":123,}}],{\"$key\":\"^number\",\"$value\":{ \"$value\": { \"value\": 123, }}, },null]\n    [[\"^number\",{\"value\":{\"value\":123,}}],{\"$key\":\"^number\",\"$value\":{ \"value\": { \"value\": 123, }}, },null]\n    [[\"^value\",123],{\"$key\":\"^value\",\"$value\":123},null]\n    [[\"<start\",123],{\"$key\":\"<start\",\"$value\":123},null]\n    [[\">stop\",123],{\"$key\":\">stop\",\"$value\":123},null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ key, value, ] = probe\n      resolve new_datom key, value\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"freezing\" ] = ( T, done ) ->\n  DATOM_FREEZE                        = new ( require '../../../apps/datom' ).Datom { freeze: true, }\n  { new_datom: new_datom_freeze, }    = DATOM_FREEZE\n  DATOM_NOFREEZE                      = new ( require '../../../apps/datom' ).Datom { freeze: false, }\n  { new_datom: new_datom_nofreeze, }  = DATOM_NOFREEZE\n  #.........................................................................................................\n  T.ok      Object.isFrozen new_datom_freeze    '^mykey'\n  T.ok not  Object.isFrozen new_datom_nofreeze  '^mykey'\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_regex performance, runaway test\" ] = ( T, done ) ->\n  ###\n  See https://github.com/loveencounterflow/runaway-regex-test\n  and select-benchmark in this project\n  ###\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"dirty\" ] = ( T, done ) ->\n  DATOM_DIRTY                         = new ( require '../../../apps/datom' ).Datom { dirty: true, }\n  DATOM_NODIRTY                       = new ( require '../../../apps/datom' ).Datom { dirty: false, }\n  DATOM_DEFAULT                       = new ( require '../../../apps/datom' ).Datom()\n  #.........................................................................................................\n  d = DATOM_DEFAULT.new_datom '^foo', { x: 42, y: 108, }\n  # debug d\n  # debug DATOM_DEFAULT.lets d, ( d ) -> null\n  T.eq ( DATOM_DIRTY.lets d,    ( d ) -> delete d.x ), { $key: '^foo', y: 108, $dirty: true,  }\n  T.eq ( DATOM_NODIRTY.lets d,  ( d ) -> delete d.x ), { $key: '^foo', y: 108,                }\n  T.eq ( DATOM_DEFAULT.lets d,  ( d ) -> delete d.x ), { $key: '^foo', y: 108,                }\n  done()\n  return null\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  # test @[ \"dirty\" ]\n  # test @[ \"new_datom complains when value has `$key`\" ]\n  # test @[ \"selector keypatterns\" ]\n  test @select_2\n  # test @[ \"new_datom (default settings)\" ]\n  # debug new_datom '^helo', 42\n\n\n\n"
  ]
}