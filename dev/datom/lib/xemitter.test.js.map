{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/xemitter.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATOM/TESTS/XEMITTER'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"_XEMITTER: _\" ] = ( T, done ) ->\n#   DATOM                     = require '../../../apps/datom'\n#   { new_datom\n#     select }                = DATOM.export()\n#   #.........................................................................................................\n#   probes_and_matchers = [\n#     [['^foo', { time: 1500000, value: \"msg#1\", }],{\"time\":1500000,\"value\":\"msg#1\",\"$key\":\"^foo\"},null]\n#     ]\n#   #.........................................................................................................\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n#       [ key, value, ] = probe\n#       resolve new_datom key, value\n#   done()\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"XEMITTER: public API shape\" ] = ( T, done ) ->\n  DATOM                     = require '../../../apps/datom'\n  { new_datom\n    new_xemitter\n    select }                = DATOM.export()\n  types                     = DATOM.types\n  { isa\n    validate\n    arity_of\n    type_of }               = types\n  #.........................................................................................................\n  XE = new_xemitter()\n  T.ok isa.asyncfunction  XE.emit\n  T.ok isa.asyncfunction  XE.delegate\n  T.ok isa.function       XE.contract\n  T.ok isa.function       XE.listen_to\n  T.ok isa.function       XE.listen_to_all\n  T.eq XE.emit.length,              2\n  T.eq XE.delegate.length,          2\n  T.eq XE.contract.length,          2\n  T.eq XE.listen_to.length,         2\n  T.eq XE.listen_to_all.length,     1\n  T.eq XE.listen_to_unheard.length, 1\n  known_keys = [ 'emit', 'delegate', 'contract', 'listen_to', 'listen_to_all', 'listen_to_unheard', ]\n  T.eq ( k for k of XE when ( not k.startsWith '_' ) and ( k not in known_keys ) ), []\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"XEMITTER: emit equivalently accepts key, value or datom\" ] = ( T, done ) ->\n  DATOM                     = require '../../../apps/datom'\n  { new_datom\n    new_xemitter\n    select }                = DATOM.export()\n  #.........................................................................................................\n  count = 0\n  XE    = new_xemitter()\n  XE.listen_to '^mykey', ( d ) ->\n    count++\n    T.eq d, { $key: '^mykey', $value: 42, }\n  await XE.emit '^mykey', 42\n  await XE.emit new_datom '^mykey', 42\n  #.........................................................................................................\n  try await XE.emit { $value: 42, } catch error\n    pattern = /expected a text or a datom got a object/\n    if pattern.test error.message\n      T.ok true\n    else\n      T.fail \"expected error to match #{pattern}, got #{rpr error.message}\"\n      throw error\n  T.ok error?\n  #.........................................................................................................\n  await XE.emit { $key: '^mykey', $value: 42, }\n  await XE.emit new_datom '^notmykey', 42\n  T.eq count, 3\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"XEMITTER: throws when more than one contractor is added for given event key\" ] = ( T, done ) ->\n  DATOM                     = require '../../../apps/datom'\n  { new_datom\n    new_xemitter\n    select }                = DATOM.export()\n  XE                        = new_xemitter()\n  #.........................................................................................................\n  XE.contract '^mykey', ( d ) ->\n  XE.contract '^otherkey', ( d ) ->\n  T.throws /already has a primary listener/, ( -> XE.contract '^otherkey', ( d ) -> )\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"XEMITTER: can listen to events that have no specific listener\" ] = ( T, done ) ->\n  DATOM                     = require '../../../apps/datom'\n  { new_datom\n    new_xemitter\n    select }                = DATOM.export()\n  XE                        = new_xemitter()\n  #.........................................................................................................\n  keys =\n    listen:     []\n    contract:   []\n    all:        []\n    unheard:    []\n  XE.listen_to          '^mykey',     ( d       ) ->  keys.listen   .push d.$key\n  XE.contract           '^otherkey',  ( d       ) ->  keys.contract .push d.$key; return \"some value\"\n  XE.listen_to_all                    ( key, d  ) ->  keys.all      .push d.$key\n  XE.listen_to_unheard                ( key, d  ) ->  keys.unheard  .push d.$key\n  await XE.emit     '^mykey'\n  await XE.emit     '^otherkey'\n  await XE.emit     '^thirdkey'\n  await XE.delegate '^otherkey'\n  # debug keys\n  T.eq keys, {\n    listen:   [ '^mykey'                                        ],\n    contract: [ '^otherkey', '^otherkey'                        ],\n    all:      [ '^mykey', '^otherkey', '^thirdkey', '^otherkey' ],\n    unheard:  [ '^thirdkey'                                     ] }\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"XEMITTER: delegation\" ] = ( T, done ) ->\n  DATOM                     = require '../../../apps/datom'\n  { new_datom\n    new_xemitter\n    select }                = DATOM.export()\n  XE                        = new_xemitter()\n  #.........................................................................................................\n  keys = { listen: [], all: [], contract: [] }\n  XE.listen_to          '^log',       ( d       ) ->  keys.listen   .push d.$key; urge d\n  XE.contract           '^add',       ( d       ) ->  keys.contract .push d.$key; return ( d?.a ? 0 ) + ( d?.b ? 0 )\n  XE.contract           '^multiply',  ( d       ) ->  keys.contract .push d.$key; return ( d?.a ? 1 ) * ( d?.b ? 1 )\n  XE.listen_to_all                    ( key, d  ) ->  keys.all      .push d.$key\n  await XE.emit     '^log', \"message\"\n  T.eq ( await XE.delegate '^add',      { a: 123, b: 456, } ), 579\n  T.eq ( await XE.delegate '^multiply', { a: 123, b: 456, } ), 56088\n  T.eq keys, { listen: [ '^log' ], all: [ '^log', '^add', '^multiply' ], contract: [ '^add', '^multiply' ] }\n  done()\n  return null\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n  # test @[ \"public API shape\" ]\n  # test @[ \"XEMITTER: can listen to events that have no specific listener\" ]\n  # test @[ \"XEMITTER: delegation\" ]\n  # test @[ \"can listen to events that have no specific listener 2\" ]\n  # test @[ \"emit equivalently accepts key, value or datom\" ]\n\n\n\n"
  ]
}