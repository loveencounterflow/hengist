{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/cli.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,MAAA,EAAA,cAAA,EAAA,oBAAA,EAAA,OAAA,EAAA,KAAA,EAAA,YAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,UAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,iBAFF,CAAA,GAE4B,KAAK,CAAC,MAAN,CAAA,CAF5B;;EAGA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,sBAAR;;EAC5B,CAAA,CAAE,MAAF,CAAA,GAA4B,MAA5B;;EACA,EAAA,GAA4B,OAAA,CAAQ,qBAAR;;EAC5B,CAAA,CAAE,CAAF,EACE,MADF,EAEE,MAFF,EAGE,YAHF,EAIE,KAJF,EAKE,OALF,EAME,MANF,CAAA,GAM4B,EAAE,CAAC,MAAH,CAAA,CAN5B;;EAOA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,CAAA,CAAE,KAAF,CAAA,GAA4B,OAAA,CAAQ,eAAR,CAA5B,EAjCA;;;;;EAuCA,KAAK,CAAC,OAAN,CAAc,4BAAd,EAA4C,QAAA,CAAE,CAAF,CAAA;WAAS,MAAO,YAAP,MAAiB;EAA1B,CAA5C,EAvCA;;;EA0CA,cAAA,GAAiB,QAAA,CAAA,CAAA;AACf,WAAO,MAAA,CAAO,CAAE,CAAF,CAAA,GAAA;AACZ,cAAO,CAAC,CAAC,IAAT;AAAA,aACO,SADP;UACsB,IAAA,CAAK,GAAG,CAAC,MAAJ,CAAW,CAAC,CAAC,MAAb,CAAL;AAAf;AADP,aAEO,SAFP;UAEsB,IAAA,CAAK,GAAG,CAAC,GAAJ,CAAQ,CAAC,CAAC,MAAV,CAAL;AAAf;AAFP;UAGO,KAAA,CAAM,CAAN,EAHP;AAAA;AAIA,aAAO;IALK,CAAP;EADQ,EA1CjB;;;EAmDA,oBAAA,GAAuB,QAAA,CAAA,CAAA;AACvB,QAAA,QAAA,EAAA,KAAA,EAAA,eAAA,EAAA,QAAA,EAAA,UAAA,EAAA;IAAE,QAAA,GAAwB;IACxB,QAAA,GAAwB;IACxB,eAAA,GAAwB;IACxB,UAAA,GAAwB;IACxB,MAAA,GAAwB;IACxB,KAAA,GAAwB;AACxB,WAAO,CAAA,CAAE,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACX,UAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAA;MAAI,WAAiB,CAAC,CAAC,UAAU,SAAZ,QAAmB,KAApC;AAAA,eAAO,IAAA,CAAK,CAAL,EAAP;;MACA,IAAG,CAAC,CAAC,IAAF,KAAY,SAAf;QACE,IAAA,CAAK,GAAG,CAAC,GAAJ,oCAAmB,CAAnB,CAAL;AACA,eAFF;OADJ;;MAKI,IAAA,GAAO,CAAC,CAAC;MACT,IAAU,8BAAV;AAAA,eAAA;;MACA,IAAU,IAAI,CAAC,UAAL,CAAgB,gBAAhB,CAAV;AAAA,eAAA;;MACA,IAAG,IAAI,CAAC,UAAL,CAAgB,aAAhB,CAAH;QACE,IAAqB,aAArB;UAAA,IAAA,CAAK,MAAA,CAAO,KAAP,CAAL,EAAA;;QACA,KAAA,GAAQ,KAFV;OAAA,MAGK,IAAG,sCAAH;QACH,IAAqB,aAArB;UAAA,IAAA,CAAK,MAAA,CAAO,KAAP,CAAL,EAAA;;QACA,KAAA,GAAQ,CAAE,GAAA,KAAK,CAAC,MAAR,EAFL;OAAA,MAGA,IAAG,6CAAH;QACH,IAAqB,aAArB;UAAA,IAAA,CAAK,MAAA,CAAO,KAAP,CAAL,EAAA;;QACA,KAAA,GAAQ,CAAE,GAAA,KAAK,CAAC,MAAR,EAFL;OAAA,MAGA,IAAG,IAAA,KAAQ,aAAX;QACH,KAAK,CAAC,MAAN,GAAe,KADZ;OAAA,MAEA,IAAG,wCAAH;QACH,KAAK,CAAC,OAAN,GAAgB,KAAK,CAAC,MAAM,CAAC;QAC7B,KAAK,CAAC,MAAN,GAAe,KAFZ;OAAA,MAGA,IAAG,oCAAH;QACH,KAAK,CAAC,GAAN,GAAc,KAAK,CAAC,MAAM,CAAC;QAC3B,IAAmC,2BAAA,IAAuB,CAAE,KAAK,CAAC,MAAM,CAAC,IAAb,KAAuB,SAAzB,CAA1D;UAAA,KAAK,CAAC,IAAN,GAAc,KAAK,CAAC,MAAM,CAAC,KAA3B;SAFG;OAAA,MAAA;QAIH,IAAA,CAAK,GAAG,CAAC,GAAJ,CAAQ,KAAR,EAAe,GAAA,CAAI,IAAJ,CAAf,CAAL,EAJG;OAtBT;;AA4BI,aAAO;IA7BA,CAAF;EAPc,EAnDvB;;;;;EA4FA,UAAA,GAAa,QAAA,CAAA,CAAA;WAAG,IAAI,OAAJ,CAAY,KAAA,CAAE,OAAF,EAAW,MAAX,CAAA,GAAA;AAC5B,UAAA,EAAA,EAAA,QAAA,EAAA,GAAA,EAAA,MAAA,EAAA;MAAE,MAAA,GAAc,EAAE,CAAC,eAAH,CAAA;MACd,QAAA,GAAc;MACd,QAAQ,CAAC,IAAT,CAAc,MAAd;MACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,eAAH,CAAA,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,oBAAA,CAAA,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,MAAA,CAAO,QAAA,CAAE,CAAF,CAAA;AACvB,YAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA;QAAI,WAAU,CAAC,CAAC,UAAU,SAAZ,QAAmB,KAA7B;AAAA,iBAAA;SAAJ;;eAEI,IAAA,CAAK,GAAG,CAAC,MAAJ,gCAAoB,GAApB,mCAAsC,GAAtC,EAA+C,GAAA,GAAM,kCAAW,GAAX,CAAN,GAAyB,GAAxE,CAAL;MAHmB,CAAP,CAAd,EALF;;MAUE,QAAQ,CAAC,IAAT,CAAc,MAAA,CAAO,QAAA,CAAA,CAAA;eAAG,OAAA,CAAA;MAAH,CAAP,CAAd;MACA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;MACA,EAAA,GAAK,KAAA,CAAM,MAAN,EAAc,CAAE,MAAF,EAAU,KAAV,EAAiB,kBAAjB,CAAd;AACL;MAAA,oBAAA;QAAA,MAAM,CAAC,IAAP,CAAY,CAAZ;MAAA;MACA,MAAM,CAAC,GAAP,CAAA,EAdF;;AAgBE,aAAO;IAjBmB,CAAZ;EAAH,EA5Fb;;;;;EAmHA,GAAA,GAAM,QAAA,CAAA,CAAA;WAAG,IAAI,OAAJ,CAAY,CAAE,IAAF,CAAA,GAAA;AACrB,UAAA,OAAA;;MACE,OAAA,GACE;QAAA,QAAA,EAEE,CAAA;;UAAA,YAAA,EACE;YAAA,WAAA,EAAc,qBAAd;YACA,MAAA,EAAQ,KAAA,CAAE,CAAF,CAAA,GAAA;cACN,MAAM,UAAA,CAAA;qBACN,IAAA,CAAA;YAFM;UADR;QADF;MAFF,EAFJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwKE,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,OAAO,CAAC,IAA1B;AACA,aAAO;IA1KY,CAAZ;EAAH,EAnHN;;;EAiSA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,KAAA,CAAA,CAAA,GAAA,EAAA;;aAEhC,CAAA,MAAM,GAAA,CAAA,CAAN;IAFgC,CAAA,IAAlC;;AAjSA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'NETWORK-TOPOLOGY'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  validate_optional }     = types.export()\nMIXA                      = require 'mixa'\nSL                        = require 'intertext-splitlines'\n{ freeze, }               = Object\nSP                        = require './steampipes-extras'\n{ $\n  $watch\n  $drain\n  $split_lines\n  $show\n  $sample\n  $batch }                = SP.export()\nJFEE                      = require 'jfee'\n{ spawn }                 = require 'child_process'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'sql_insert_target_encoding', ( x ) -> x in [ 'binary', 'text', ]\n\n#-----------------------------------------------------------------------------------------------------------\n$echo_channels = ->\n  return $watch ( d ) =>\n    switch d.$key\n      when '^stdout' then echo CND.yellow d.$value\n      when '^stderr' then echo CND.red d.$value\n      else debug d #.$value\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$process_nmap_output = ->\n  blank_re              = /^\\s*$/\n  first_re              = /^Nmap scan report for (?<name>.*)\\s+\\((?<ip>[0-9a-f.]+)\\)/\n  first_noname_re       = /^Nmap scan report for (?<ip>[0-9a-f.]+)$/\n  latency_re            = /^Host is up \\((?<latency>\\S+) latency\\)\\.$/\n  mac_re                = /^MAC Address: (?<mac>[0-9A-F:]+) \\((?<info>.*)\\)$/\n  entry                 = null\n  return $ ( d, send ) ->\n    return send d if d.$key in [ '<cp', '>cp', ]\n    if d.$key isnt '^stdout'\n      echo CND.red d.$value ? d\n      return\n    #.......................................................................................................\n    line = d.$value\n    return if ( line.match blank_re )?\n    return if line.startsWith 'Starting Nmap '\n    if line.startsWith 'Nmap done: '\n      send freeze entry if entry?\n      entry = null\n    else if ( match = line.match first_re )?\n      send freeze entry if entry?\n      entry = { match.groups..., }\n    else if ( match = line.match first_noname_re )?\n      send freeze entry if entry?\n      entry = { match.groups..., }\n    else if line is 'Host is up.'\n      entry.status = 'up'\n    else if ( match = line.match latency_re )?\n      entry.latency = match.groups.latency\n      entry.status = 'up'\n    else if ( match = line.match mac_re )?\n      entry.mac   = match.groups.mac\n      entry.info  = match.groups.info if match.groups.info? and ( match.groups.info isnt 'Unknown' )\n    else\n      echo CND.red '???', rpr line\n    # echo CND.grey d\n    return null\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nshow_hosts = -> new Promise ( resolve, reject ) =>\n  source      = SP.new_push_source()\n  pipeline    = []\n  pipeline.push source\n  pipeline.push SP.$split_channels()\n  pipeline.push $process_nmap_output()\n  pipeline.push $watch ( d ) ->\n    return if d.$key in [ '<cp', '>cp', ]\n    # echo CND.steel d\n    echo CND.yellow ( d.ip ? '?' ), ( d.name ? '?' ), ( '(' + ( d.info ? '?' ) + ')' )\n  # pipeline.push $show()\n  pipeline.push $drain -> resolve()\n  SP.pull pipeline...\n  cp = spawn 'sudo', [ 'nmap', '-sn', '192.168.190.0/24', ]\n  source.send x for await x from JFEE.Receiver.from_child_process cp\n  source.end()\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ncli = -> new Promise ( done ) =>\n  #.........................................................................................................\n  jobdefs =\n    commands:\n      #-----------------------------------------------------------------------------------------------------\n      'show-hosts':\n        description:  \"create DB `tessera`\"\n        runner: ( d ) =>\n          await show_hosts()\n          done()\n      # #-----------------------------------------------------------------------------------------------------\n      # 'copy-data':\n      #   description:  \"copy data into DB; specify individual DSKs or 'all'\"\n      #   flags:\n      #     'input':\n      #       alias:        'i'\n      #       type:         String\n      #       positional:   true\n      #       multiple:     'greedy'\n      #       description:  \"input file(s)\"\n      #   runner: ( d ) =>\n      #     unless ( dsks = d.verdict.parameters.input )?\n      #       warn \"need at least one DSK; use 'all' to copy data from all files\"\n      #     debug '^33344^', { dsks, }\n      #     await copy_data dsks\n      #     done()\n      # #-----------------------------------------------------------------------------------------------------\n      # 'locate':\n      #   description:  \"given a DSK, locate file(s) in datasources\"\n      #   flags:\n      #     'input':\n      #       alias:        'i'\n      #       type:         String\n      #       positional:   true\n      #       multiple:     'greedy'\n      #       description:  \"input file(s)\"\n      #   runner: ( d ) =>\n      #     unless ( dsks = d.verdict.parameters.input )?\n      #       warn \"need at least one DSK; use 'all' for all files\"\n      #     await locate dsks\n      #     done()\n      # #-----------------------------------------------------------------------------------------------------\n      # 'as-sql-insert':\n      #   description:  \"turn lines in text file into SQL insert statements\"\n      #   flags:\n      #     'encode-to':\n      #       alias:        't'\n      #       type:         String\n      #       fallback:     'binary'\n      #       description:  \"target encoding (text, binary)\"\n      #     'dsk':\n      #       alias:        'd'\n      #       type:         String\n      #       fallback:     'UNKNOWN'\n      #       description:  \"Data Source Key (DSK) that identfies source\"\n      #     'batchsize':\n      #       alias:        's'\n      #       type:         Number\n      #       fallback:     10000\n      #       description:  \"number of rows per insert statement (default 10'000)\"\n      #     'input':\n      #       alias:        'i'\n      #       positional:   true\n      #       type:         String\n      #       description:  \"data source file\"\n      #   runner: ( d ) =>\n      #     debug '^77665^', d.verdict\n      #     input_path  = PATH.resolve process.cwd(), d.verdict.parameters.input\n      #     encode_to   = d.verdict.parameters[ 'encode-to' ]\n      #     dsk         = d.verdict.parameters.dsk\n      #     batchsize   = d.verdict.parameters.batchsize\n      #     await file_as_sql_inserts dsk, input_path, encode_to, batchsize\n      #     done()\n      # #-----------------------------------------------------------------------------------------------------\n      # 'write':\n      #   description:  \"write challenging test data\"\n      #   flags:\n      #     'input':\n      #       alias:        'i'\n      #       type:         String\n      #       fallback:     'demo-data/challenging.template.txt'\n      #       description:  \"template to use\"\n      #     'output':\n      #       alias:        'o'\n      #       type:         String\n      #       fallback:     'demo-data/challenging.txt'\n      #       description:  \"file to write data to\"\n      #   runner: ( d ) =>\n      #     # write_challenging_data d.verdict.parameters.input, d.verdict.parameters.output\n      #     input_path  = PATH.resolve process.cwd(), d.verdict.parameters.input\n      #     output_path = PATH.resolve process.cwd(), d.verdict.parameters.output\n      #     debug '^33442^', { input_path, output_path, }\n      #     await write_challenging_data input_path, output_path\n      #     done()\n      # #-----------------------------------------------------------------------------------------------------\n      # 'show-lines':\n      #   description:  \"show lines of file in hex with context\"\n      #   flags:\n      #     'line':\n      #       alias:        'l'\n      #       type:         Number\n      #       fallback:     null\n      #       description:  \"line nr to show\"\n      #     'input':\n      #       alias:        'i'\n      #       type:         String\n      #       positional:   true\n      #       fallback:     'demo-data/challenging.txt'\n      #       description:  \"path to file\"\n      #   runner: ( d ) =>\n      #     line_nr     = d.verdict.parameters.line\n      #     input_path  = PATH.resolve process.cwd(), d.verdict.parameters.input\n      #     debug '^33442^', { line_nr, input_path, }\n      #     await show_lines line_nr, input_path\n      #     done()\n      # #-----------------------------------------------------------------------------------------------------\n      # 'detect-encoding':\n      #   description:  \"detect encoding of given file\"\n      #   flags:\n      #     'input':\n      #       alias:        'i'\n      #       type:         String\n      #       positional:   true\n      #       fallback:     'demo-data/challenging.txt'\n      #       description:  \"path to file\"\n      #   runner: ( d ) =>\n      #     input_path  = PATH.resolve process.cwd(), d.verdict.parameters.input\n      #     await detect_encoding input_path\n      #     done()\n      # #-----------------------------------------------------------------------------------------------------\n      # 'show-encodings':\n      #   description:  \"show encodings of given file\"\n      #   flags:\n      #     'input':\n      #       alias:        'i'\n      #       type:         String\n      #       positional:   true\n      #       fallback:     'demo-data/strange-encodings.txt'\n      #       description:  \"path to file\"\n      #     'from':\n      #       alias:        'f'\n      #       type:         Number\n      #       fallback:     1\n      #       description:  \"first line number\"\n      #     'to':\n      #       alias:        't'\n      #       type:         Number\n      #       fallback:     Infinity\n      #       description:  \"last line number\"\n      #   runner: ( d ) =>\n      #     first_lnr   = d.verdict.parameters.from\n      #     last_lnr    = d.verdict.parameters.to\n      #     input_path  = PATH.resolve process.cwd(), d.verdict.parameters.input\n      #     debug '^2369^', { input_path, first_lnr, last_lnr, }\n      #     await show_encodings input_path, first_lnr, last_lnr\n      #     done()\n      # #-----------------------------------------------------------------------------------------------------\n      # 'test-utf8-byte-pattern':\n      #   description:  \"test utf-8 byte pattern contained in _utf8-byte-pattern.sh\"\n      #   runner: ( d ) =>\n      #     await test_utf8_byte_pattern()\n      #     done()\n      # #-----------------------------------------------------------------------------------------------------\n      # 'add-indexes':\n      #   description:  \"add indexes to DB\"\n      #   runner: ( d ) =>\n      #     await add_indexes()\n      #     done()\n  #.........................................................................................................\n  MIXA.run jobdefs, process.argv\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_receiver()\n  await cli()\n\n"
  ]
}