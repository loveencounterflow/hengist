{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/steampipes-extras.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES-EXTRA'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  validate_optional }     = types.export()\nSL                        = require 'intertext-splitlines'\nfreeze                    = Object.freeze\n\n\n#-----------------------------------------------------------------------------------------------------------\nprovide = ->\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$split_lines = ( settings = null ) ->\n    ctx   = SL.new_context settings\n    last  = Symbol 'last'\n    return @$ { last, }, ( d, send ) =>\n      if d is last\n        send line for line from SL.flush ctx\n        return null\n      return unless d?\n      return unless isa.buffer d\n      send line for line from SL.walk_lines ctx, d\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$split_channels = ->\n    splitliners = {}\n    last        = Symbol 'last'\n    return @$ { last, }, ( d, send ) =>\n      { $key, $value, } = d\n      unless ( ctx = splitliners[ $key ] )?\n        ctx = splitliners[ $key ] = SL.new_context()\n      if d is last\n        send ( freeze { $key, $value, } ) for $value from SL.flush ctx\n        return null\n      return send d if ( not d? ) or ( not types.isa.buffer d.$value )\n      send ( freeze { $key, $value, } ) for $value from SL.walk_lines ctx, $value\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$batch = ( size, transform ) ->\n    validate.positive_integer size\n    validate_optional.function transform\n    collector = null\n    last      = Symbol 'last'\n    return @$ { last, }, ( d, send ) ->\n      if d is last\n        if collector?\n          send collector\n          collector = null\n        return\n      ( collector ?= [] ).push d\n      if collector.length >= size\n        send if transform? then transform collector else collector\n        collector = null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$sample = ( p = 0.5, settings ) ->\n    validate.nonnegative p\n    # validate_optional.positive settings.seed\n    #.........................................................................................................\n    return ( $ ( d, send ) -> send d  ) if p is 1\n    return ( $ ( d, send ) -> null    ) if p is 0\n    #.........................................................................................................\n    headers   = settings?[ 'headers'     ] ? false\n    seed      = settings?[ 'seed'        ] ? null\n    is_first  = headers\n    rnd       = if seed? then CND.get_rnd seed else Math.random\n    #.........................................................................................................\n    return @$ ( d, send ) =>\n      if is_first\n        is_first = false\n        return send d\n      send d if rnd() < p\n\n\n############################################################################################################\nprovide.apply ( module.exports = require 'steampipes' )\n\n\n\n"
  ]
}