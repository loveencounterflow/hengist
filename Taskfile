#!/usr/bin/env bash

# A Taskfile is just a bash script that will be sourced and run by taskit.
#
# You can also divide your Taskfile into multiple scripts and source them
# here.
#
# NOTE: Taskit stores the names of the tasks in a TASKS array, in their
#       definition order.

# Taskit should work with set -e and/or set -u.
# (probably not with set -o pipefail though, not tested)
set -eu

# A task is a function with a `Task::` prefix in its name.
Task::hello () { echo hello world; }

# Comments right before the task will be parsed as the task's help doc.
#
Task::mytask () {
    # Null commands that begin with '@attr ...' at the beginning of a task body
    # declare attributes for the task:

    : @desc            "A simple task"
    # Only tasks with @desc will be shown in `taskit -t`.

    # You can declare parameters for a task so that it can be run with arguments.
    : @param name!     "your name"
    : @param greeting  "words to greet with"
    : @param rest%     "rest of named arguments collected in an array"
    : @needs count-from-one  to=3           # dependency with arguments will ALWAYS be run.
    # : @needs count-from-one count-from-one  # dependency without arguments only runs ONCE.
    : @needs count-from-one  # dependency without arguments only runs ONCE.

    # a non-zero exit status of a task function stops taskit from
    # running the remaining tasks. This is the default.
    : @ignore_status no

    # switch the working directory of a task; the default is no cd.
    : @cwd /tmp

    # In the code below, notice that the parameters are referenced with a '_' prefix.
    # Also, that the slurpy(%) parameter(rest) collects unknown arguments in an array.

    echo "${_greeting:-Hello}, $_name"
    echo "I'm in $PWD"
    ls
    echo
    if (( ${#_rest[*]} )); then
        echo "The rest of named arguments are:"
        local key
        for key in "${!_rest[@]}"; do
            echo "$key=${_rest[$key]}"
        done
    fi
}

Task::count-from-one () {
    : @desc "Prints whole numbers, one per line, from 1 up to 'to', inclusive."
    : @param to=5  "The number to count up to. (must be an interger >=1)"

    local i
    for (( i=1; i <= _to; i++ )); do
        echo $i
    done
}

# 🅘🅝🅣🅔🅡🅣🅔🅧🅣
# Runs `src/demo.coffee` to show output of some parsers arranged in tables
Task::intertext-parsers-demo () {
	: @desc "runs InterText Parsing Demo"
  nodexh intertext/lib/demo.js 2>&1 | less -SRN#5 +G
	}

# 🅘🅝🅣🅔🅡🅣🅔🅧🅣
# Runs interim tests meant to assist in code refactoring
Task::intertext-interim-tests () {
	: @desc "runs InterText Interim Tests"
  nodexh intertext/lib/interim.tests.js || ~/bin/bad
	}





