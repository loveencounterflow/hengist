{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/data-providers-nocache.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'BENCHMARKS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ jr }                    = CND\nassign                    = Object.assign\nafter                     = ( time_s, f ) -> setTimeout f, time_s * 1000\nnf                        = require 'number-format.js'\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  declare\n  first_of\n  last_of\n  size_of\n  type_of }               = @types\n# VNR                       = require '../vnr'\n# $fresh                    = true\n# first                     = Symbol 'first'\n# last                      = Symbol 'last'\nPATH                      = require 'path'\nFS                        = require 'fs'\n\n#-----------------------------------------------------------------------------------------------------------\n@get_values = ( n = 10 ) ->\n  validate.cardinal n\n  providers = [\n    @get_integers.bind  @\n    @get_booleans.bind  @\n    @get_words.bind     @\n    @get_cjk_chr.bind   @\n    ]\n  #.........................................................................................................\n  idxs = @get_integers n, 0, providers.length\n  return ( ( providers[ idx ] 1 )[ 0 ] for idx in idxs )\n\n#-----------------------------------------------------------------------------------------------------------\n@get_integers = ( n = 10, min = -1000, max = +1000 ) ->\n  validate.cardinal n\n  validate.integer  min\n  validate.integer  max\n  return ( ( CND.random_integer min, max ) for _ in [ 1 .. n ] )\n\n#-----------------------------------------------------------------------------------------------------------\n@get_booleans = ( n = 10 ) ->\n  validate.cardinal n\n  return ( ( ( CND.random_integer 0, 2 ) is 0 ) for _ in [ 1 .. n ] )\n\n#-----------------------------------------------------------------------------------------------------------\n@get_cjk_chr = ( n = 10 ) ->\n  validate.cardinal n\n  R = []\n  for _ in [ 1 .. n ]\n    R.push switch CND.random_integer 0, 2\n      when 0 then String.fromCodePoint CND.random_integer 0x04e00, 0x09f00\n      when 1 then String.fromCodePoint CND.random_integer 0x20000, 0x2a6d7\n  return R\n\n\n#-----------------------------------------------------------------------------------------------------------\n@get_words = ( n = 10 ) ->\n  validate.cardinal n\n  m         = Math.ceil n / 2\n  path      = '/usr/share/dict/french'\n  CP        = require 'child_process'\n  R         = ( ( CP.execSync \"shuf -n #{m} #{path}\" ).toString 'utf-8' ).split '\\n'\n  R         = ( word.replace /'s$/g, '' for word in R )\n  R         = ( word for word in R when word isnt '' )\n  if R.length < n\n    R         = [ R..., ( @get_cjk_chr n - R.length )..., ]\n  return CND.shuffle R\n\n# #-----------------------------------------------------------------------------------------------------------\n# @get_random_datoms = ( n = 10, path = null ) ->\n#   PD        = require 'pipedreams11'\n#   path     ?= '/usr/share/dict/portuguese'\n#   cachekey  = @_get_key 'get_random_datoms', arguments...\n#   return R if ( R = @_cache[ cachekey ] )?\n#   words     = @get_random_words n, path\n#   nr        = 0\n#   R         = []\n#   keys      = [ '^word', '^fun', '^text', '^something', ]\n#   last_idx  = keys.length - 1\n#   for word in words\n#     nr++\n#     $vnr      = [ nr, ]\n#     vnr_blob  = @as_hollerith $vnr\n#     $vnr_hex  = vnr_blob.toString 'hex'\n#     key       = keys[ CND.random_integer 0, last_idx ]\n#     if Math.random() > 0.75 then  R.push PD.new_datom key, word, { $vnr, $vnr_hex, $stamped: true, }\n#     else                          R.push PD.new_datom key, word, { $vnr, $vnr_hex, }\n#   CND.shuffle R\n#   return @_cache[ cachekey ] = R\n\n"
  ]
}