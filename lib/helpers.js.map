{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/helpers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'BENCHMARKS/HELPERS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nPATH                      = require 'path'\n{ width_of\n  to_width }              = require 'to-width'\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@cwd_abspath              = CND.cwd_abspath\n@cwd_relpath              = CND.cwd_relpath\n@here_abspath             = CND.here_abspath\n@_drop_extension          = ( path ) => path[ ... path.length - ( PATH.extname path ).length ]\n@project_abspath          = ( P... ) => CND.here_abspath __dirname, '..', P...\n\n#-----------------------------------------------------------------------------------------------------------\n@badge_from_filename = ( filename ) ->\n  basename  = PATH.basename filename\n  return 'BENCHMARKS/' + ( basename .replace /^(.*?)\\.[^.]+$/, '$1' ).toUpperCase()\n\n#-----------------------------------------------------------------------------------------------------------\n@banner = ( title ) ->\n  echo CND.reverse CND.steel to_width ( ' ' + title + ' ' ), 108\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@tabulate = ( title, query ) ->\n  { Tbl, }  = require '../apps/icql-dba-tabulate'\n  dtab      = new Tbl { dba: {}, }\n  @banner title if title?\n  echo dtab._tabulate query\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@norm_tabulate = ( title, query ) ->\n  ### same as `tabulate()` but works on a copy of `query` where all rows have same properties to avoid\n  jumbling of column widths ###\n  rows  = ( { row..., } for row from query )\n  keys  = new Set()\n  for row in rows\n    keys.add key for key of row\n  keys = [ keys..., ]\n  for row, idx in rows\n    d = {}\n    for key in keys\n      d[ key ] = if ( value = row[ key ] ) is undefined then undefined else value\n    rows[ idx ] = d\n  return @tabulate title, rows\n"
  ]
}