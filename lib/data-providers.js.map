{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/data-providers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'BENCHMARKS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ jr }                    = CND\nassign                    = Object.assign\nafter                     = ( time_s, f ) -> setTimeout f, time_s * 1000\n#...........................................................................................................\nHOLLERITH                 = require 'hollerith-codec'\n@as_hollerith             = ( x ) => HOLLERITH.encode x\n@from_hollerith           = ( x ) => HOLLERITH.decode x\nnf                        = require 'number-format.js'\n#...........................................................................................................\n# H                         = require '../helpers'\n# DATAMILL                  = require '../..'\n@types                    = require './types'\n{ isa\n  validate\n  declare\n  first_of\n  last_of\n  size_of\n  type_of }               = @types\n# VNR                       = require '../vnr'\n# $fresh                    = true\n# first                     = Symbol 'first'\n# last                      = Symbol 'last'\nPATH                      = require 'path'\nFS                        = require 'fs'\n\n#-----------------------------------------------------------------------------------------------------------\n@_cache = {}\n@_get_key = ( name ) -> name + ' ' + jr [ arguments..., ][ 1 .. ]\n\n\n#-----------------------------------------------------------------------------------------------------------\n@get_integer_numbers = ( n = 10 ) ->\n  cachekey  = @_get_key 'get_integer_numbers', arguments...\n  return R if ( R = @_cache[ cachekey ] )?\n  validate.cardinal n\n  return @_cache[ cachekey ] = [ 1 .. n ]\n\n#-----------------------------------------------------------------------------------------------------------\n@get_random_words = ( n = 10, path = null, fresh = false ) ->\n  path     ?= '/usr/share/dict/portuguese'\n  cachekey  = @_get_key 'get_random_words', arguments...\n  delete @_cache[ cachekey ] if fresh\n  return R if ( R = @_cache[ cachekey ] )?\n  validate.cardinal n\n  CP        = require 'child_process'\n  R         = ( ( CP.execSync \"shuf -n #{n} #{path}\" ).toString 'utf-8' ).split '\\n'\n  R         = ( word.replace /'s$/g, '' for word in R )\n  R         = ( word for word in R when word isnt '' )\n  return @_cache[ cachekey ] = R\n\n#-----------------------------------------------------------------------------------------------------------\n@get_random_text = ( n = 10, path = null ) ->\n  path     ?= '/usr/share/dict/portuguese'\n  cachekey  = @_get_key 'get_random_text', arguments...\n  return R if ( R = @_cache[ cachekey ] )?\n  R         = @get_random_words n, path\n  R         = ( ( if Math.random() > 0.7 then '' else word ) for word in R )\n  R         = R.join '\\n'\n  return @_cache[ cachekey ] = R\n\n#-----------------------------------------------------------------------------------------------------------\n@get_random_datoms = ( n = 10, path = null ) ->\n  PD        = require 'pipedreams11'\n  path     ?= '/usr/share/dict/portuguese'\n  cachekey  = @_get_key 'get_random_datoms', arguments...\n  return R if ( R = @_cache[ cachekey ] )?\n  words     = @get_random_words n, path\n  nr        = 0\n  R         = []\n  keys      = [ '^word', '^fun', '^text', '^something', ]\n  last_idx  = keys.length - 1\n  for word in words\n    nr++\n    $vnr      = [ nr, ]\n    vnr_blob  = @as_hollerith $vnr\n    $vnr_hex  = vnr_blob.toString 'hex'\n    key       = keys[ CND.random_integer 0, last_idx ]\n    if Math.random() > 0.75 then  R.push PD.new_datom key, word, { $vnr, $vnr_hex, $stamped: true, }\n    else                          R.push PD.new_datom key, word, { $vnr, $vnr_hex, }\n  CND.shuffle R\n  return @_cache[ cachekey ] = R\n\n#-----------------------------------------------------------------------------------------------------------\n@get_svg_pathdata = ->\n  return ( FS.readFileSync ( PATH.join __dirname, '../src/tests/svgttf-test-data.txt' ), 'utf-8' ).split /\\n/\n\n#-----------------------------------------------------------------------------------------------------------\n@get_random_nested_objects = ( n = 10, path = null, fresh = false ) ->\n  cachekey  = @_get_key 'get_random_datoms', arguments...\n  delete @_cache[ cachekey ] if fresh\n  return R if ( R = @_cache[ cachekey ] )?\n  fresh     = true\n  words     = @get_random_words word_count, null, fresh\n  R = []\n  for _ in [ 1 .. n ]\n    CND.shuffle words\n    word_count      = CND.random_integer 3, 7\n    subset_of_words = words[ 1 .. word_count ]\n    entry           = {}\n    for word in subset_of_words\n      entry[ word ] = 42\n    R.push entry\n  return @_cache[ cachekey ] = R\n\n\n"
  ]
}