{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/benchmarks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HENGIST/BENCHMARKS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ jr }                    = CND\nassign                    = Object.assign\nafter                     = ( time_s, f ) -> setTimeout f, time_s * 1000\n### TAINT use standard JS solution ###\nnf                        = require '/home/flow/jzr/benchmarks/node_modules/number-format.js'\nINTERTEXT                 = require 'intertext'\n#...........................................................................................................\n# H                         = require '../helpers'\n# DATAMILL                  = require '../..'\n@types                    = require './types'\n{ isa\n  validate\n  declare\n  first_of\n  last_of\n  size_of\n  type_of }               = @types\n# VNR                       = require '../vnr'\n# $fresh                    = true\n# first                     = Symbol 'first'\n# last                      = Symbol 'last'\n# FS                        = require 'fs'\n\n#-----------------------------------------------------------------------------------------------------------\n@time_now = ->\n  t = process.hrtime()\n  return BigInt \"#{t[ 0 ]}\" + \"#{t[ 1 ]}\".padStart 9, '0'\n\n#-----------------------------------------------------------------------------------------------------------\n@stopwatch_sync = ( f ) ->\n  ### return time needed to call `f()` synchronously, in milliseconds ###\n  t0ns = @time_now()\n  f()\n  t1ns = @time_now()\n  return ( parseInt t1ns - t0ns, 10 ) / 1e6\n\n#-----------------------------------------------------------------------------------------------------------\n@stopwatch_async = ( f ) ->\n  ### return time needed to call `f()` asynchronously, in milliseconds ###\n  t0ns = @time_now()\n  await f()\n  t1ns = @time_now()\n  return ( parseInt t1ns - t0ns, 10 ) / 1e6\n\n#-----------------------------------------------------------------------------------------------------------\n@add_result = ( me, test_name, data ) -> me.records.push { test_name, data..., }\n\n#-----------------------------------------------------------------------------------------------------------\n### taken from InterShop db/011-bar.sql ###\nbar_from_percentage = ( n ) ->\n  if n is null or n <= 0\n    R = ''\n  else if n > 100\n    R = '████████████▌'\n  else\n    R = '█'.repeat n // 8\n    switch n %% 8\n      when 0 then R += ''\n      when 1 then R += '▏'\n      when 2 then R += '▎'\n      when 3 then R += '▍'\n      when 4 then R += '▌'\n      when 5 then R += '▋'\n      when 6 then R += '▊'\n      when 7 then R += '▉'\n      # when 8 then R += '█'\n  return '│' + ( R.padEnd 13, ' ' ) + '│'\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_averages = ( me ) ->\n  R         = {}\n  collector = {}\n  ( collector[ record.test_name ] ?= [] ).push record for record in me.records\n  keys = ( key for key of me.records[ 0 ] when key isnt 'test_name' )\n  for test_name, records of collector\n    target = R[ test_name ] = {}\n    for key in keys\n      measurements              = []\n      for record in records\n        continue unless ( value = record[ key ] )?\n        measurements.push value\n      average       = ( measurements.reduce ( ( x, y ) -> x + y ), 0 ) / measurements.length\n      target[ key ] = average\n  return ( { test_name, data..., } for test_name, data of R )\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use `me` argument instead of module globals ###\n@show_totals = ( me ) ->\n  throw new Error \"µ33998 must do benchmarks before showing totals\" if me.records.length is 0\n  # test_names  = ( test_name for test_name, data of me.records )\n  records     = @_get_averages me\n  records.sort ( a, b ) ->\n    return +1 if a.ops < b.ops\n    return -1 if a.ops > b.ops\n    return  0\n  best_ops = records[ 0 ].ops\n  for record in records\n    { test_name\n      ops }       = record\n    xxx_txt       =  '≙' + ( \" 1 ÷ #{f01a ( best_ops / ops )}\".padStart 8 ).padEnd 12\n    rops          = ( ops / best_ops ) * 100\n    ### TAINT code duplication ###\n    test_name_txt = test_name.padEnd 40\n    ops_txt       = f0l   ops\n    rops_txt      = f1s   rops\n    bar           = bar_from_percentage Math.round rops\n    info test_name_txt, ops_txt, 'Hz', xxx_txt, rops_txt, '%', bar\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nf0a   = ( n ) -> ( nf '###,##0.',          n )\nf01a  = ( n ) -> ( nf '###,##0.0',         n )\nf0    = ( n ) -> ( nf '###,##0.',          n ).padStart 15\nf0l   = ( n ) -> ( nf '###,##0.',          n ).padStart 15\nf1s   = ( n ) -> ( nf '###,##0.0',         n ).padStart  7\nf3    = ( n ) -> ( nf '###,##0.000',       n ).padStart 15\nf3s   = ( n ) -> ( nf '###,##0.000',       n ).padStart  7\nf9    = ( n ) -> ( nf '###,##0.000000000', n ).padStart 24\n\n#-----------------------------------------------------------------------------------------------------------\n@new_benchmarks = -> { records: [], }\n\n#-----------------------------------------------------------------------------------------------------------\n@benchmark = ( me, n, show, parent, test_name ) -> new Promise benchmark = ( resolve ) =>\n  unless test_name?\n    for test_name of parent\n      continue if test_name.startsWith '_'\n      await @benchmark n, show, parent, test_name\n    return null\n  #.........................................................................................................\n  t0ns          = @time_now()\n  try\n    test = await parent[ test_name ] n, show\n  catch error\n    error.message = \"µ77812 when trying to run test #{rpr test_name}, an error occurred: #{rpr error.message}\"\n    throw error\n  t1ns          = @time_now()\n  # cpu1          = process.cpuUsage()\n  console.profile test_name\n  count         = await test()\n  console.profileEnd test_name\n  # cpu2          = process.cpuUsage cpu1\n  t2ns          = @time_now()\n  #.........................................................................................................\n  dt1ns         = parseInt t1ns - t0ns, 10\n  dt2ns         = parseInt t2ns - t1ns, 10\n  dt1s          = dt1ns / 1e9\n  dt2s          = dt2ns / 1e9\n  nspc          = dt2ns / count\n  ops           = count / dt2s\n  #.........................................................................................................\n  test_name_txt = test_name.padEnd 40\n  # dt1s_txt      = f3s   dt1s\n  dt2s_txt      = f3s   dt2s\n  count_txt     = f0    count\n  ops_txt       = f0l   ops\n  nspc_txt      = f0    nspc\n  # cpuusr_txt    = f0   cpu2.user   / 1e3\n  # cpusys_txt    = f0   cpu2.system / 1e3\n  echo [\n    \"#{CND.yellow test_name_txt}\"\n    # \"#{CND.grey dt1s_txt + ' s'}\"\n    \"#{dt2s_txt} s\"\n    \"#{count_txt} items\"\n    \"#{CND.green ops_txt}⏶Hz\"\n    \"#{CND.gold nspc_txt}⏷nspc\"\n    # \"#{CND.gold cpuusr_txt}⏷CPU/u\"\n    # \"#{CND.gold cpusys_txt}⏷CPU/s\"\n    ].join ' '\n  # debug '^1662^ cpu', cpu2\n  @add_result me, test_name, { ops, }\n  resolve()\n  return null\n\n\n"
  ]
}