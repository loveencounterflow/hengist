{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/git-hook-prepare-commit-msg.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,UAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR,EAd5B;;;EAgBA,UAAA,GAA4B,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,IAArB,CAAb;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,eAAR;;EAC5B,CAAA,CAAE,QAAF,CAAA,GAA4B,OAAA,CAAQ,UAAR,CAA5B;;EACG,CAAA,KAAA,CAAA,CAAA,GAAA;AACH,QAAA,MAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,cAAA,EAAA,WAAA,EAAA;IAAE,MAAA,GAA4B,CAAA,MAAM,MAAA,CAAQ,SAAR,CAAN;IAC5B,YAAA,GAA4B,EAAE,CAAC,QAAH,CAAY,+BAAZ,EAA6C;MAAE,QAAA,EAAU;IAAZ,CAA7C;IAC5B,YAAA,GAA4B,YAAY,CAAC,KAAb,CAAmB,IAAnB;IAC5B,YAAA;;AAA8B;MAAA,KAAA,8CAAA;;qBAAA,WAAW,CAAC,IAAZ,CAAA;MAAA,CAAA;;;IAC9B,cAAA,GAA4B,IAAI,GAAJ,CAAA;IAC5B,KAAA,8CAAA;;MACE,cAAc,CAAC,GAAf,CAAmB,IAAI,CAAC,QAAL,CAAc,MAAM,CAAC,oBAAP,CAA4B,WAA5B,CAAd,CAAnB;IADF;IAEA,cAAA,GAA4B;;AAAE;MAAA,KAAA,sBAAA;qBAAA;MAAA,CAAA;;QAAF,CAAqC,CAAC,IAAtC,CAA2C,GAA3C;IAC5B,cAAA,GAA4B,CAAE,QAAA,CAAS,cAAT,EAAyB,EAAzB,CAAF,CAA+B,CAAC,IAAhC,CAAA;WAC5B,IAAA,CAAK,CAAA,CAAA,CAAA,CAAI,cAAJ,CAAA,CAAA,CAAL;EAVC,CAAA;AAnBH",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GIT-ANNOTATE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nPATH                      = require 'path'\n# dpan                      = require '../../dpan'\npkg_fspath                = PATH.resolve PATH.join __dirname, '..'\nCP                        = require 'child_process'\n{ to_width }              = require 'to-width'\ndo =>\n  PKGDIR                    = await import( 'pkg-dir' )\n  staged_paths              = CP.execSync 'git diff --cached --name-only', { encoding: 'utf-8', }\n  staged_paths              = staged_paths.split /\\n/\n  staged_paths              = ( staged_path.trim() for staged_path in staged_paths )\n  staged_modules            = new Set()\n  for staged_path in staged_paths\n    staged_modules.add PATH.basename PKGDIR.packageDirectorySync staged_path\n  staged_modules            = ( name for name from staged_modules ).join ' '\n  staged_modules            = ( to_width staged_modules, 50 ).trim()\n  echo \"[#{staged_modules}]\"\n\n\n\n"
  ]
}